{"root":"0:0:1728","crate_version":"1.10.0","includes_private":false,"index":{"1:12104:18228":{"id":"1:12104:18228","crate_id":1,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:74":{"id":"0:74","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[354,0],"end":[368,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[{"outlives":"'a"},{"trait_bound":{"trait":{"name":"Array","id":"0:327:1798","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["cmp_by","unzip","cloned","rposition","fold","collect_into","flat_map","enumerate","step_by","lt","partial_cmp_by","copied","max_by_key","reduce","partition","flatten","position","peekable","collect","chain","size_hint","eq_by","cycle","max_by","try_reduce","cmp","partition_in_place","fuse","eq","skip_while","ne","intersperse","gt","next_chunk","partial_cmp","is_sorted","array_chunks","count","min_by_key","find","le","is_partitioned","inspect","map","take_while","intersperse_with","last","ge","is_sorted_by","sum","min_by","find_map","try_fold","by_ref","map_while","all","filter","advance_by","zip","max","is_sorted_by_key","product","rev","try_find","any","try_for_each","try_collect","scan","filter_map","skip","nth","for_each","take","min","__iterator_get_unchecked"],"trait":{"name":"Iterator","id":"1:7321:159","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Drain","id":"0:57:1796","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:77:1802","0:78:957","0:80:1806"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:590:1367":{"id":"0:590:1367","crate_id":0,"name":"size","span":{"filename":"src/lib.rs","begin":[2112,0],"end":[2116,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12134:16900":{"id":"1:12134:16900","crate_id":1,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"1:39511:11974","Self::is_ascii":"1:12133:16899"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41353:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"AsciiChar","id":"1:39511:11974","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:479:1802":{"id":"0:479:1802","crate_id":0,"name":"Item","span":{"filename":"src/lib.rs","begin":[2112,0],"end":[2116,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"0:308:1803":{"id":"0:308:1803","crate_id":0,"name":"as_slice","span":{"filename":"src/lib.rs","begin":[1973,4],"end":[1976,5]},"visibility":"public","docs":"Returns the remaining items of this iterator as a slice.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"A"},"trait":{"name":"","id":"0:327:1798","args":null}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:176:2031":{"id":"0:176:2031","crate_id":0,"name":"retain_mut","span":{"filename":"src/lib.rs","begin":[1245,4],"end":[1247,5]},"visibility":"public","docs":"Retains only the elements specified by the predicate.\n\nThis method is identical in behaviour to [`retain`]; it is included only\nto maintain api-compatability with `std::Vec`, where the methods are\nseparate for historical reasons.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["f",{"generic":"F"}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:2928:2026","args":{"parenthesized":{"inputs":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"A"},"trait":{"name":"","id":"0:327:1798","args":null}}}}}],"output":{"primitive":"bool"}}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:215:1683":{"id":"0:215:1683","crate_id":0,"name":"borrow","span":{"filename":"src/lib.rs","begin":[1579,4],"end":[1581,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"A"},"trait":{"name":"","id":"0:327:1798","args":null}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:326:787":{"id":"0:326:787","crate_id":0,"name":"into_iter","span":{"filename":"src/lib.rs","begin":[2013,4],"end":[2015,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"qualified_path":{"name":"IntoIter","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"1:7205:152","args":null}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"4:5443:18121":{"id":"4:5443:18121","crate_id":4,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"1:12136:16903"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"4:7280:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2250-0:349:1772":{"id":"b:1:2250-0:349:1772","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2690:2566","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2244:98","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"CollectionAllocErr","id":"0:349:1772","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2252:2143"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:78:957":{"id":"0:78:957","crate_id":0,"name":"next","span":{"filename":"src/lib.rs","begin":[358,4],"end":[362,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41353:181","args":{"angle_bracketed":{"args":[{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"T"},"trait":{"name":"","id":"0:327:1798","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:89:815":{"id":"0:89:815","crate_id":0,"name":"len","span":{"filename":"src/lib.rs","begin":[381,4],"end":[383,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:302":{"id":"0:302","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1968,0],"end":[1968,51]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Array","id":"0:327:1798","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["is_empty","len"],"trait":{"name":"ExactSizeIterator","id":"1:7266:1808","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:280:2185","args":{"angle_bracketed":{"args":[{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:310":{"id":"0:310","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1985,0],"end":[2000,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Array","id":"0:327:1798","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"1:7205:152","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"SmallVec","id":"0:118:1733","args":{"angle_bracketed":{"args":[{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:312:2185","0:313:1802","0:314:787"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:2683:220-0:349:1772":{"id":"a:1:2683:220-0:349:1772","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:2683:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"CollectionAllocErr","id":"0:349:1772","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:541":{"id":"0:541","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[2112,0],"end":[2116,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Array","id":"0:327:1798","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"array":{"type":{"generic":"T"},"len":"256"}},"items":["0:544:1802","0:545:1367"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12113:18233":{"id":"1:12113:18233","crate_id":1,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:51664:418","self::pattern":"1:11715:6331"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11720:3808","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12043:18218":{"id":"1:12043:18218","crate_id":1,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\n\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line ending isn't required:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Lines","id":"1:43576:4082","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:505:1367":{"id":"0:505:1367","crate_id":0,"name":"size","span":{"filename":"src/lib.rs","begin":[2112,0],"end":[2116,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:446":{"id":"0:446","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[2112,0],"end":[2116,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Array","id":"0:327:1798","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"array":{"type":{"generic":"T"},"len":"18"}},"items":["0:449:1802","0:450:1367"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:245":{"id":"0:245","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1759,0],"end":[1782,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Array","id":"0:327:1798","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["extend_one","extend_reserve"],"trait":{"name":"Extend","id":"1:7214:2173","args":{"angle_bracketed":{"args":[{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"A"},"trait":{"name":"Array","id":"0:327:1798","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"SmallVec","id":"0:118:1733","args":{"angle_bracketed":{"args":[{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:247:1945"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:506":{"id":"0:506","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[2112,0],"end":[2116,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Array","id":"0:327:1798","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"array":{"type":{"generic":"T"},"len":"30"}},"items":["0:509:1802","0:510:1367"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12066:13292":{"id":"1:12066:13292","crate_id":1,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"1:51664:418","self::pattern":"1:11715:6331"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitInclusive","id":"1:11538:2673","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11720:3808","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12049:17031":{"id":"1:12049:17031","crate_id":1,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"prim@char":"1:51664:418","self::pattern":"1:11715:6331"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11720:3808","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2537-0:57:1796":{"id":"b:1:2537-0:57:1796","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2514:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2511:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Drain","id":"0:57:1796","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:2540:2137"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:186:2063":{"id":"0:186:2063","crate_id":0,"name":"resize_with","span":{"filename":"src/lib.rs","begin":[1323,4],"end":[1338,5]},"visibility":"public","docs":"Resizes the `SmallVec` in-place so that `len` is equal to `new_len`.\n\nIf `new_len` is greater than `len`, the `SmallVec` is extended by the difference, with each\nadditional slot filled with the result of calling the closure `f`. The return values from `f`\n\nIf `new_len` is less than `len`, the `SmallVec` is simply truncated.\n\nThis method uses a closure to create new values on every push. If you'd rather `Clone` a given\nvalue, use `resize`. If you want to use the `Default` trait to generate values, you can pass\n`Default::default()` as the second argument.\n\nAdded for std::vec::Vec compatibility (added in Rust 1.33.0)\n\n```\n# use smallvec::{smallvec, SmallVec};\nlet mut vec : SmallVec<[_; 4]> = smallvec![1, 2, 3];\nvec.resize_with(5, Default::default);\nassert_eq!(&*vec, &[1, 2, 3, 0, 0]);\n\nlet mut vec : SmallVec<[_; 4]> = smallvec![];\nlet mut p = 1;\nvec.resize_with(4, || { p *= 2; p });\nassert_eq!(&*vec, &[2, 4, 8, 16]);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["new_len",{"primitive":"usize"}],["f",{"generic":"F"}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:2928:2026","args":{"parenthesized":{"inputs":[],"output":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"A"},"trait":{"name":"","id":"0:327:1798","args":null}}}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12084:18222":{"id":"1:12084:18222","crate_id":1,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41353:181","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11720:3808","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:549:1802":{"id":"0:549:1802","crate_id":0,"name":"Item","span":{"filename":"src/lib.rs","begin":[2112,0],"end":[2116,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"1:12140:6211":{"id":"1:12140:6211","crate_id":1,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"1:4539:6211"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDefault","id":"1:43630:3775","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:144:1943":{"id":"0:144:1943","crate_id":0,"name":"append","span":{"filename":"src/lib.rs","begin":[878,4],"end":[883,5]},"visibility":"public","docs":"Moves all the elements of `other` into `self`, leaving `other` empty.\n\n# Example\n\n```\n# use smallvec::{SmallVec, smallvec};\nlet mut v0: SmallVec<[u8; 16]> = smallvec![1, 2, 3];\nlet mut v1: SmallVec<[u8; 32]> = smallvec![4, 5, 6];\nv0.append(&mut v1);\nassert_eq!(*v0, [1, 2, 3, 4, 5, 6]);\nassert_eq!(*v1, []);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"SmallVec","id":"0:118:1733","args":{"angle_bracketed":{"args":[{"type":{"generic":"B"}}],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"B","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"B"},"bounds":[{"trait_bound":{"trait":{"name":"Array","id":"0:327:1798","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"A"},"trait":{"name":"","id":"0:327:1798","args":null}}}}}}]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:149:1962":{"id":"0:149:1962","crate_id":0,"name":"try_reserve","span":{"filename":"src/lib.rs","begin":[950,4],"end":[963,5]},"visibility":"public","docs":"Reserve capacity for `additional` more elements to be inserted.\n\nMay reserve more space to avoid frequent reallocations.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["additional",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Result","id":"1:41497:210","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}},{"type":{"resolved_path":{"name":"CollectionAllocErr","id":"0:349:1772","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:213":{"id":"0:213","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1577,0],"end":[1582,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Array","id":"0:327:1798","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2241:97","args":{"angle_bracketed":{"args":[{"type":{"slice":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"A"},"trait":{"name":"Array","id":"0:327:1798","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"SmallVec","id":"0:118:1733","args":{"angle_bracketed":{"args":[{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:215:1683"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:81":{"id":"0:81","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[370,0],"end":[377,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[{"outlives":"'a"},{"trait_bound":{"trait":{"name":"Array","id":"0:327:1798","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["try_rfold","rfind","nth_back","rfold","advance_back_by"],"trait":{"name":"DoubleEndedIterator","id":"1:7243:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Drain","id":"0:57:1796","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:84:1807"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12055:2929":{"id":"1:12055:2929","crate_id":1,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"1:41355:179","prim@char":"1:51664:418","self::pattern":"1:11715:6331"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41353:181","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11720:3808","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:90":{"id":"0:90","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[386,0],"end":[386,52]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Array","id":"0:327:1798","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"FusedIterator","id":"1:7591:1687","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Drain","id":"0:57:1796","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:67:670":{"id":"0:67:670","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[346,4],"end":[348,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:9120:132","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:9109:210","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:441":{"id":"0:441","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[2112,0],"end":[2116,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Array","id":"0:327:1798","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"array":{"type":{"generic":"T"},"len":"17"}},"items":["0:444:1802","0:445:1367"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:77:1802":{"id":"0:77:1802","crate_id":0,"name":"Item","span":{"filename":"src/lib.rs","begin":[355,4],"end":[355,24]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"T"},"trait":{"name":"Array","id":"0:327:1798","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}},"a:1:8252:2779-0:118:1733":{"id":"a:1:8252:2779-0:118:1733","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"UnwindSafe","id":"1:8252:2779","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"A"},"trait":{"name":"Array","id":"0:327:1798","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:8253:2778","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:8252:2779","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"SmallVec","id":"0:118:1733","args":{"angle_bracketed":{"args":[{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:206:553":{"id":"0:206:553","crate_id":0,"name":"deref_mut","span":{"filename":"src/lib.rs","begin":[1555,4],"end":[1560,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"A"},"trait":{"name":"","id":"0:327:1798","args":null}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:539:1802":{"id":"0:539:1802","crate_id":0,"name":"Item","span":{"filename":"src/lib.rs","begin":[2112,0],"end":[2116,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"0:329:1367":{"id":"0:329:1367","crate_id":0,"name":"size","span":{"filename":"src/lib.rs","begin":[2023,4],"end":[2023,23]},"visibility":"default","docs":"Returns the number of items the array can hold.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"0:129:1878":{"id":"0:129:1878","crate_id":0,"name":"from_buf_and_len_unchecked","span":{"filename":"src/lib.rs","begin":[689,4],"end":[694,5]},"visibility":"public","docs":"Constructs a new `SmallVec` on the stack from an `A` without\ncopying elements. Also sets the length. The user is responsible\nfor ensuring that `len <= A::size()`.\n\n```rust\nuse smallvec::SmallVec;\nuse std::mem::MaybeUninit;\n\nlet buf = [1, 2, 3, 4, 5, 0, 0, 0];\nlet small_vec: SmallVec<_> = unsafe {\n    SmallVec::from_buf_and_len_unchecked(MaybeUninit::new(buf), 5)\n};\n\nassert_eq!(&*small_vec, &[1, 2, 3, 4, 5]);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["buf",{"resolved_path":{"name":"MaybeUninit","id":"1:30228:1689","args":{"angle_bracketed":{"args":[{"type":{"generic":"A"}}],"bindings":[]}}}}],["len",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"SmallVec","id":"0:118:1733","args":{"angle_bracketed":{"args":[{"type":{"generic":"A"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:125:1857":{"id":"0:125:1857","crate_id":0,"name":"with_capacity","span":{"filename":"src/lib.rs","begin":[593,4],"end":[597,5]},"visibility":"public","docs":"Construct an empty vector with enough capacity pre-allocated to store at least `n`\nelements.\n\nWill create a heap allocation only if `n` is larger than the inline capacity.\n\n```\n# use smallvec::SmallVec;\n\nlet v: SmallVec<[u8; 3]> = SmallVec::with_capacity(100);\n\nassert!(v.is_empty());\nassert!(v.capacity() >= 100);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["n",{"primitive":"usize"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:445:1367":{"id":"0:445:1367","crate_id":0,"name":"size","span":{"filename":"src/lib.rs","begin":[2112,0],"end":[2116,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12096:18225":{"id":"1:12096:18225","crate_id":1,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"1:11715:6331","`DoubleEndedIterator`":"1:7243:121","prim@char":"1:51664:418","str::rmatch_indices":"1:12099:18226"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"MatchIndices","id":"1:43472:4078","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11720:3808","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:325:1802":{"id":"0:325:1802","crate_id":0,"name":"Item","span":{"filename":"src/lib.rs","begin":[2012,4],"end":[2012,32]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"borrowed_ref":{"lifetime":"'a","mutable":true,"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"A"},"trait":{"name":"Array","id":"0:327:1798","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}}},"0:255":{"id":"0:255","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1815,0],"end":[1826,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(feature = \"may_dangle\"))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Array","id":"0:327:1798","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Drop","id":"1:2921:1809","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"SmallVec","id":"0:118:1733","args":{"angle_bracketed":{"args":[{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:257:587"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:290:422":{"id":"0:290:422","crate_id":0,"name":"clone","span":{"filename":"src/lib.rs","begin":[1920,4],"end":[1922,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"IntoIter","id":"0:280:2185","args":{"angle_bracketed":{"args":[{"type":{"generic":"A"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:96:587":{"id":"0:96:587","crate_id":0,"name":"drop","span":{"filename":"src/lib.rs","begin":[389,4],"end":[410,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:86":{"id":"0:86","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[379,0],"end":[384,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Array","id":"0:327:1798","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["is_empty","len"],"trait":{"name":"ExactSizeIterator","id":"1:7266:1808","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Drain","id":"0:57:1796","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:89:815"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:287:670":{"id":"0:287:670","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[1911,4],"end":[1913,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:9120:132","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:9109:210","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:328:1802":{"id":"0:328:1802","crate_id":0,"name":"Item","span":{"filename":"src/lib.rs","begin":[2021,4],"end":[2021,14]},"visibility":"default","docs":"The type of the array's elements.","links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":null}}},"0:142:1737":{"id":"0:142:1737","crate_id":0,"name":"push","span":{"filename":"src/lib.rs","begin":[838,4],"end":[850,5]},"visibility":"public","docs":"Append an item to the vector.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["value",{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"A"},"trait":{"name":"","id":"0:327:1798","args":null}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:586":{"id":"0:586","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[2112,0],"end":[2116,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Array","id":"0:327:1798","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"array":{"type":{"generic":"T"},"len":"32768"}},"items":["0:589:1802","0:590:1367"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:491":{"id":"0:491","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[2112,0],"end":[2116,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Array","id":"0:327:1798","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"array":{"type":{"generic":"T"},"len":"27"}},"items":["0:494:1802","0:495:1367"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:510:1367":{"id":"0:510:1367","crate_id":0,"name":"size","span":{"filename":"src/lib.rs","begin":[2112,0],"end":[2116,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:359:1802":{"id":"0:359:1802","crate_id":0,"name":"Item","span":{"filename":"src/lib.rs","begin":[2112,0],"end":[2116,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"0:434:1802":{"id":"0:434:1802","crate_id":0,"name":"Item","span":{"filename":"src/lib.rs","begin":[2112,0],"end":[2116,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"0:296:1802":{"id":"0:296:1802","crate_id":0,"name":"Item","span":{"filename":"src/lib.rs","begin":[1932,4],"end":[1932,24]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"A"},"trait":{"name":"Array","id":"0:327:1798","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}},"a:1:2700:228-0:349:1772":{"id":"a:1:2700:228-0:349:1772","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2700:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"CollectionAllocErr","id":"0:349:1772","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:581":{"id":"0:581","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[2112,0],"end":[2116,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Array","id":"0:327:1798","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"array":{"type":{"generic":"T"},"len":"24576"}},"items":["0:584:1802","0:585:1367"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:439:1802":{"id":"0:439:1802","crate_id":0,"name":"Item","span":{"filename":"src/lib.rs","begin":[2112,0],"end":[2116,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"b:1:2544-0:118:1733":{"id":"b:1:2544-0:118:1733","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2514:133","args":{"angle_bracketed":{"args":[{"type":{"primitive":"never"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"SmallVec","id":"0:118:1733","args":{"angle_bracketed":{"args":[{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2546:696"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:431":{"id":"0:431","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[2112,0],"end":[2116,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Array","id":"0:327:1798","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"array":{"type":{"generic":"T"},"len":"15"}},"items":["0:434:1802","0:435:1367"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12023:18215":{"id":"1:12023:18215","crate_id":1,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:243:699":{"id":"0:243:699","crate_id":0,"name":"from_iter","span":{"filename":"src/lib.rs","begin":[1752,4],"end":[1756,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["iterable",{"generic":"I"}]],"output":{"resolved_path":{"name":"SmallVec","id":"0:118:1733","args":{"angle_bracketed":{"args":[{"type":{"generic":"A"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"1:7205:152","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"A"},"trait":{"name":"","id":"0:327:1798","args":null}}}}}}]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12036:2179":{"id":"1:12036:2179","crate_id":1,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_mut":"1:12037:17015"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:202:230":{"id":"0:202:230","crate_id":0,"name":"Target","span":{"filename":"src/lib.rs","begin":[1543,4],"end":[1543,28]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"slice":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"A"},"trait":{"name":"Array","id":"0:327:1798","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}},"1:7211:1802":{"id":"1:7211:1802","crate_id":1,"name":"Item","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"Iterator","id":"1:7321:159","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}},"0:314:787":{"id":"0:314:787","crate_id":0,"name":"into_iter","span":{"filename":"src/lib.rs","begin":[1988,4],"end":[1999,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"qualified_path":{"name":"IntoIter","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"1:7205:152","args":null}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:379:1802":{"id":"0:379:1802","crate_id":0,"name":"Item","span":{"filename":"src/lib.rs","begin":[2112,0],"end":[2116,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"1:12044:18219":{"id":"1:12044:18219","crate_id":1,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinesAny","id":"1:43586:4083","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12013":{"id":"1:12013","crate_id":1,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["1:12014:815","1:12015:1897","1:12016:18212","1:12017:18213","1:12019:18214","1:12022:16956","1:12023:18215","1:12024:314","1:12025:1814","1:12026:2174","1:12028:2885","1:12030:2886","1:12032:2887","1:12034:18216","1:12035:18217","1:12036:2179","1:12037:17015","1:12038:3823","1:12039:4097","1:12040:3765","1:12041:13296","1:12042:13322","1:12043:18218","1:12044:18219","1:12045:13342","1:12046:2009","1:12049:17031","1:12052:17032","1:12055:2929","1:12059:2895","1:12063:17022","1:12066:13292","1:12069:17025","1:12072:18220","1:12075:18221","1:12078:17027","1:12081:17029","1:12084:18222","1:12087:18223","1:12090:2404","1:12093:18224","1:12096:18225","1:12099:18226","1:12102:18227","1:12104:18228","1:12106:18229","1:12108:18230","1:12109:18231","1:12110:18232","1:12113:18233","1:12116:17033","1:12119:17034","1:12122:18234","1:12125:18235","1:12128:18236","1:12131:18237","1:12133:16899","1:12134:16900","1:12135:16902","1:12136:16903","1:12137:16904","1:12138:18238","1:12140:6211","1:12141:18239"],"negative":false,"synthetic":false,"blanket_impl":null}}},"4:5425:18900":{"id":"4:5425:18900","crate_id":4,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"4:273:1682","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}},{"type":{"resolved_path":{"name":"Global","id":"4:7013:2439","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"4:273:1682","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}},{"type":{"resolved_path":{"name":"Global","id":"4:7013:2439","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:540:1367":{"id":"0:540:1367","crate_id":0,"name":"size","span":{"filename":"src/lib.rs","begin":[2112,0],"end":[2116,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:270:1039":{"id":"0:270:1039","crate_id":0,"name":"partial_cmp","span":{"filename":"src/lib.rs","begin":[1870,4],"end":[1872,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"SmallVec","id":"0:118:1733","args":{"angle_bracketed":{"args":[{"type":{"generic":"A"}}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41353:181","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"cmp::Ordering","id":"1:30798:183","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:421":{"id":"0:421","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[2112,0],"end":[2116,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Array","id":"0:327:1798","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"array":{"type":{"generic":"T"},"len":"13"}},"items":["0:424:1802","0:425:1367"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:499:1802":{"id":"0:499:1802","crate_id":0,"name":"Item","span":{"filename":"src/lib.rs","begin":[2112,0],"end":[2116,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"4:5444:18122":{"id":"4:5444:18122","crate_id":4,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"1:12137:16904"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"4:7280:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:299":{"id":"0:299","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1954,0],"end":[1966,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Array","id":"0:327:1798","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["try_rfold","rfind","nth_back","rfold","advance_back_by"],"trait":{"name":"DoubleEndedIterator","id":"1:7243:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:280:2185","args":{"angle_bracketed":{"args":[{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:301:1807"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:152:1970":{"id":"0:152:1970","crate_id":0,"name":"shrink_to_fit","span":{"filename":"src/lib.rs","begin":[988,4],"end":[1004,5]},"visibility":"public","docs":"Shrink the capacity of the vector as much as possible.\n\nWhen possible, this will move data from an external heap buffer to the vector's inline\nstorage.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:544:1802":{"id":"0:544:1802","crate_id":0,"name":"Item","span":{"filename":"src/lib.rs","begin":[2112,0],"end":[2116,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"1:12075:18221":{"id":"1:12075:18221","crate_id":1,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"1:11715:6331","str::split":"1:12063:17022","prim@char":"1:51664:418","str::split_terminator":"1:12072:18220"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitTerminator","id":"1:43390:4077","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11720:3808","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:11720:3808","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11735:6337","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:511":{"id":"0:511","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[2112,0],"end":[2116,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Array","id":"0:327:1798","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"array":{"type":{"generic":"T"},"len":"31"}},"items":["0:514:1802","0:515:1367"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:500:1367":{"id":"0:500:1367","crate_id":0,"name":"size","span":{"filename":"src/lib.rs","begin":[2112,0],"end":[2116,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:132:1736":{"id":"0:132:1736","crate_id":0,"name":"inline_size","span":{"filename":"src/lib.rs","begin":[728,4],"end":[730,5]},"visibility":"public","docs":"The maximum number of elements this vector can hold inline","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:391":{"id":"0:391","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[2112,0],"end":[2116,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Array","id":"0:327:1798","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"array":{"type":{"generic":"T"},"len":"7"}},"items":["0:394:1802","0:395:1367"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12014:815":{"id":"1:12014:815","crate_id":1,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\nBasic usage:\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"1:51664:418"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:4:5686-0:349:1772":{"id":"b:4:5686-0:349:1772","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"1:9150:120","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:2690:2566","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"ToString","id":"4:5684:232","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"CollectionAllocErr","id":"0:349:1772","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["4:5688:1460"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:265:612":{"id":"0:265:612","crate_id":0,"name":"eq","span":{"filename":"src/lib.rs","begin":[1858,4],"end":[1860,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"SmallVec","id":"0:118:1733","args":{"angle_bracketed":{"args":[{"type":{"generic":"B"}}],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:174:2024":{"id":"0:174:2024","crate_id":0,"name":"retain","span":{"filename":"src/lib.rs","begin":[1227,4],"end":[1238,5]},"visibility":"public","docs":"Retains only the elements specified by the predicate.\n\nIn other words, remove all elements `e` such that `f(&e)` returns `false`.\nThis method operates in place and preserves the order of the retained\nelements.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["f",{"generic":"F"}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:2928:2026","args":{"parenthesized":{"inputs":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"A"},"trait":{"name":"","id":"0:327:1798","args":null}}}}}],"output":{"primitive":"bool"}}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:455:1367":{"id":"0:455:1367","crate_id":0,"name":"size","span":{"filename":"src/lib.rs","begin":[2112,0],"end":[2116,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12135:16902":{"id":"1:12135:16902","crate_id":1,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:8252:2779-0:280:2185":{"id":"a:1:8252:2779-0:280:2185","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"UnwindSafe","id":"1:8252:2779","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"A"},"trait":{"name":"Array","id":"0:327:1798","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:8253:2778","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:8252:2779","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:280:2185","args":{"angle_bracketed":{"args":[{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:150:1859":{"id":"0:150:1859","crate_id":0,"name":"reserve_exact","span":{"filename":"src/lib.rs","begin":[968,4],"end":[970,5]},"visibility":"public","docs":"Reserve the minimum capacity for `additional` more elements to be inserted.\n\nPanics if the new capacity overflows `usize`.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["additional",{"primitive":"usize"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12078:17027":{"id":"1:12078:17027","crate_id":1,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"1:51664:418","self::pattern":"1:11715:6331","str::rsplitn":"1:12081:17029"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitN","id":"1:43426:2659","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11720:3808","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:191":{"id":"0:191","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1434,0],"end":[1494,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Array","id":"0:327:1798","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"A"},"trait":{"name":"","id":"0:327:1798","args":null}}},"bounds":[{"trait_bound":{"trait":{"name":"Copy","id":"1:2695:109","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"SmallVec","id":"0:118:1733","args":{"angle_bracketed":{"args":[{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:193:2120","0:194:2124","0:195:1770"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:212:1812":{"id":"0:212:1812","crate_id":0,"name":"as_mut","span":{"filename":"src/lib.rs","begin":[1572,4],"end":[1574,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"A"},"trait":{"name":"","id":"0:327:1798","args":null}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:534:1802":{"id":"0:534:1802","crate_id":0,"name":"Item","span":{"filename":"src/lib.rs","begin":[2112,0],"end":[2116,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"0:591":{"id":"0:591","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[2112,0],"end":[2116,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Array","id":"0:327:1798","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"array":{"type":{"generic":"T"},"len":"65536"}},"items":["0:594:1802","0:595:1367"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:416":{"id":"0:416","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[2112,0],"end":[2116,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Array","id":"0:327:1798","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"array":{"type":{"generic":"T"},"len":"12"}},"items":["0:419:1802","0:420:1367"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:595:1367":{"id":"0:595:1367","crate_id":0,"name":"size","span":{"filename":"src/lib.rs","begin":[2112,0],"end":[2116,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:349:1772":{"id":"0:349:1772","crate_id":0,"name":"CollectionAllocErr","span":{"filename":"src/lib.rs","begin":[283,0],"end":[291,1]},"visibility":"public","docs":"Error type for APIs with fallible heap allocation","links":{},"attrs":[],"deprecation":null,"inner":{"enum":{"generics":{"params":[],"where_predicates":[]},"variants_stripped":false,"variants":["0:350:1774","0:352:1776"],"impls":["a:1:8252:2779-0:349:1772","a:1:8253:2778-0:349:1772","a:1:2683:220-0:349:1772","a:1:2740:2679-0:349:1772","a:1:2700:228-0:349:1772","b:1:2247-0:349:1772","b:1:3319-0:349:1772","b:1:2552-0:349:1772","b:1:2250-0:349:1772","b:1:2541-0:349:1772","b:1:2547-0:349:1772","b:1:2537-0:349:1772","b:4:5686-0:349:1772","0:48","0:46","0:354"]}}},"0:474:1802":{"id":"0:474:1802","crate_id":0,"name":"Item","span":{"filename":"src/lib.rs","begin":[2112,0],"end":[2116,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"0:309:1981":{"id":"0:309:1981","crate_id":0,"name":"as_mut_slice","span":{"filename":"src/lib.rs","begin":[1979,4],"end":[1982,5]},"visibility":"public","docs":"Returns the remaining items of this iterator as a mutable slice.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"A"},"trait":{"name":"","id":"0:327:1798","args":null}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:411":{"id":"0:411","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[2112,0],"end":[2116,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Array","id":"0:327:1798","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"array":{"type":{"generic":"T"},"len":"11"}},"items":["0:414:1802","0:415:1367"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:594:1802":{"id":"0:594:1802","crate_id":0,"name":"Item","span":{"filename":"src/lib.rs","begin":[2112,0],"end":[2116,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"0:616":{"id":"0:616","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[2112,0],"end":[2116,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Array","id":"0:327:1798","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"array":{"type":{"generic":"T"},"len":"1048576"}},"items":["0:619:1802","0:620:1367"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:2543:696":{"id":"1:2543:696","crate_id":1,"name":"from","span":null,"visibility":"default","docs":"Returns the argument unchanged.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["t",{"generic":"T"}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:128:1877":{"id":"0:128:1877","crate_id":0,"name":"from_buf_and_len","span":{"filename":"src/lib.rs","begin":[668,4],"end":[671,5]},"visibility":"public","docs":"Constructs a new `SmallVec` on the stack from an `A` without\ncopying elements. Also sets the length, which must be less or\nequal to the size of `buf`.\n\n```rust\nuse smallvec::SmallVec;\n\nlet buf = [1, 2, 3, 4, 5, 0, 0, 0];\nlet small_vec: SmallVec<_> = SmallVec::from_buf_and_len(buf, 5);\n\nassert_eq!(&*small_vec, &[1, 2, 3, 4, 5]);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["buf",{"generic":"A"}],["len",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"SmallVec","id":"0:118:1733","args":{"angle_bracketed":{"args":[{"type":{"generic":"A"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:444:1802":{"id":"0:444:1802","crate_id":0,"name":"Item","span":{"filename":"src/lib.rs","begin":[2112,0],"end":[2116,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"0:291":{"id":"0:291","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1925,0],"end":[1929,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Array","id":"0:327:1798","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Drop","id":"1:2921:1809","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:280:2185","args":{"angle_bracketed":{"args":[{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:293:587"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:614:1802":{"id":"0:614:1802","crate_id":0,"name":"Item","span":{"filename":"src/lib.rs","begin":[2112,0],"end":[2116,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"0:400:1367":{"id":"0:400:1367","crate_id":0,"name":"size","span":{"filename":"src/lib.rs","begin":[2112,0],"end":[2116,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:426":{"id":"0:426","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[2112,0],"end":[2116,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Array","id":"0:327:1798","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"array":{"type":{"generic":"T"},"len":"14"}},"items":["0:429:1802","0:430:1367"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:3319-0:280:2185":{"id":"b:1:3319-0:280:2185","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:2690:2566","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3317:69","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:280:2185","args":{"angle_bracketed":{"args":[{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:3321:1496"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:2249:1683":{"id":"1:2249:1683","crate_id":1,"name":"borrow","span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[rustc_diagnostic_item = \"noop_method_borrow\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:381":{"id":"0:381","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[2112,0],"end":[2116,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Array","id":"0:327:1798","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"array":{"type":{"generic":"T"},"len":"5"}},"items":["0:384:1802","0:385:1367"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:389:1802":{"id":"0:389:1802","crate_id":0,"name":"Item","span":{"filename":"src/lib.rs","begin":[2112,0],"end":[2116,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"0:525:1367":{"id":"0:525:1367","crate_id":0,"name":"size","span":{"filename":"src/lib.rs","begin":[2112,0],"end":[2116,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"4:5432:18902":{"id":"4:5432:18902","crate_id":4,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"4:7280:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"4:7280:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"4:5441:18904":{"id":"4:5441:18904","crate_id":4,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"4:273:1682","`String`":"4:7280:224"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"4:273:1682","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}},{"type":{"resolved_path":{"name":"Global","id":"4:7013:2439","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"4:7280:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:404:1802":{"id":"0:404:1802","crate_id":0,"name":"Item","span":{"filename":"src/lib.rs","begin":[2112,0],"end":[2116,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"b:1:2547-0:280:2185":{"id":"b:1:2547-0:280:2185","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2521:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2517:238","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:280:2185","args":{"angle_bracketed":{"args":[{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2550:128","1:2551:1483"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:196":{"id":"0:196","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1496,0],"end":[1540,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Array","id":"0:327:1798","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"A"},"trait":{"name":"","id":"0:327:1798","args":null}}},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2263:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"SmallVec","id":"0:118:1733","args":{"angle_bracketed":{"args":[{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:198:2132","0:199:1734"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:8253:2778-0:118:1733":{"id":"a:1:8253:2778-0:118:1733","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:8253:2778","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"A"},"trait":{"name":"Array","id":"0:327:1798","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:8253:2778","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:8253:2778","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"SmallVec","id":"0:118:1733","args":{"angle_bracketed":{"args":[{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:313:1802":{"id":"0:313:1802","crate_id":0,"name":"Item","span":{"filename":"src/lib.rs","begin":[1987,4],"end":[1987,24]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"A"},"trait":{"name":"Array","id":"0:327:1798","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}},"1:12090:2404":{"id":"1:12090:2404","crate_id":1,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"1:11715:6331","`DoubleEndedIterator`":"1:7243:121","prim@char":"1:51664:418","str::matches":"1:12090:2404"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Matches","id":"1:43526:4080","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11720:3808","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:584:1802":{"id":"0:584:1802","crate_id":0,"name":"Item","span":{"filename":"src/lib.rs","begin":[2112,0],"end":[2116,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"0:609:1802":{"id":"0:609:1802","crate_id":0,"name":"Item","span":{"filename":"src/lib.rs","begin":[2112,0],"end":[2116,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"0:324:2185":{"id":"0:324:2185","crate_id":0,"name":"IntoIter","span":{"filename":"src/lib.rs","begin":[2011,4],"end":[2011,48]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"IterMut","id":"1:9988:2189","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"A"},"trait":{"name":"Array","id":"0:327:1798","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}}}}},"0:345:2247":{"id":"0:345:2247","crate_id":0,"name":"to_smallvec","span":{"filename":"src/lib.rs","begin":[2121,4],"end":[2121,41]},"visibility":"default","docs":"Construct a new `SmallVec` from a slice.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SmallVec","id":"0:118:1733","args":{"angle_bracketed":{"args":[{"type":{"generic":"A"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"0:604:1802":{"id":"0:604:1802","crate_id":0,"name":"Item","span":{"filename":"src/lib.rs","begin":[2112,0],"end":[2116,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"4:5429:18901":{"id":"4:5429:18901","crate_id":4,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"4:7280:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["count",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"4:7280:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11720:3808","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:343:2245":{"id":"0:343:2245","crate_id":0,"name":"ToSmallVec","span":{"filename":"src/lib.rs","begin":[2119,0],"end":[2122,1]},"visibility":"public","docs":"Convenience trait for constructing a `SmallVec`","links":{},"attrs":[],"deprecation":null,"inner":{"trait":{"is_auto":false,"is_unsafe":false,"items":["0:345:2247"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Array","id":"0:327:1798","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":["0:346"]}}},"b:1:2547-0:118:1733":{"id":"b:1:2547-0:118:1733","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2521:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2517:238","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"SmallVec","id":"0:118:1733","args":{"angle_bracketed":{"args":[{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2550:128","1:2551:1483"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:451":{"id":"0:451","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[2112,0],"end":[2116,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Array","id":"0:327:1798","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"array":{"type":{"generic":"T"},"len":"19"}},"items":["0:454:1802","0:455:1367"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2250-0:57:1796":{"id":"b:1:2250-0:57:1796","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2690:2566","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2244:98","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Drain","id":"0:57:1796","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:2252:2143"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2250-0:118:1733":{"id":"b:1:2250-0:118:1733","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2690:2566","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2244:98","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"SmallVec","id":"0:118:1733","args":{"angle_bracketed":{"args":[{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2252:2143"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"4:681:11796":{"id":"4:681:11796","crate_id":4,"name":"clone_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["target",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:494:1802":{"id":"0:494:1802","crate_id":0,"name":"Item","span":{"filename":"src/lib.rs","begin":[2112,0],"end":[2116,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"0:153:1976":{"id":"0:153:1976","crate_id":0,"name":"truncate","span":{"filename":"src/lib.rs","begin":[1013,4],"end":[1022,5]},"visibility":"public","docs":"Shorten the vector, keeping the first `len` elements and dropping the rest.\n\nIf `len` is greater than or equal to the vector's current length, this has no\neffect.\n\nThis does not re-allocate.  If you want the vector's capacity to shrink, call\n`shrink_to_fit` after truncating.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["len",{"primitive":"usize"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:461":{"id":"0:461","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[2112,0],"end":[2116,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Array","id":"0:327:1798","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"array":{"type":{"generic":"T"},"len":"21"}},"items":["0:464:1802","0:465:1367"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:535:1367":{"id":"0:535:1367","crate_id":0,"name":"size","span":{"filename":"src/lib.rs","begin":[2112,0],"end":[2116,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12037:17015":{"id":"1:12037:17015","crate_id":1,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"1:12036:2179"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:319:1802":{"id":"0:319:1802","crate_id":0,"name":"Item","span":{"filename":"src/lib.rs","begin":[2004,4],"end":[2004,28]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"A"},"trait":{"name":"Array","id":"0:327:1798","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}}},"0:579:1802":{"id":"0:579:1802","crate_id":0,"name":"Item","span":{"filename":"src/lib.rs","begin":[2112,0],"end":[2116,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"0:556":{"id":"0:556","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[2112,0],"end":[2116,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Array","id":"0:327:1798","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"array":{"type":{"generic":"T"},"len":"1536"}},"items":["0:559:1802","0:560:1367"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:194:2124":{"id":"0:194:2124","crate_id":0,"name":"insert_from_slice","span":{"filename":"src/lib.rs","begin":[1471,4],"end":[1484,5]},"visibility":"public","docs":"Copy elements from a slice into the vector at position `index`, shifting any following\nelements toward the back.\n\nFor slices of `Copy` types, this is more efficient than `insert`.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}],["slice",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"A"},"trait":{"name":"","id":"0:327:1798","args":null}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:574:1802":{"id":"0:574:1802","crate_id":0,"name":"Item","span":{"filename":"src/lib.rs","begin":[2112,0],"end":[2116,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"0:425:1367":{"id":"0:425:1367","crate_id":0,"name":"size","span":{"filename":"src/lib.rs","begin":[2112,0],"end":[2116,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:0:1728":{"id":"0:0:1728","crate_id":0,"name":"smallvec","span":{"filename":"src/lib.rs","begin":[7,0],"end":[2132,1]},"visibility":"public","docs":"Small vectors in various sizes. These store a certain number of elements inline, and fall back\nto the heap for larger allocations.  This can be a useful optimization for improving cache\nlocality and reducing allocator traffic for workloads that fit within the inline buffer.\n\n## `no_std` support\n\nBy default, `smallvec` does not depend on `std`.  However, the optional\n`write` feature implements the `std::io::Write` trait for vectors of `u8`.\nWhen this feature is enabled, `smallvec` depends on `std`.\n\n## Optional features\n\n### `serde`\n\nWhen this optional dependency is enabled, `SmallVec` implements the `serde::Serialize` and\n`serde::Deserialize` traits.\n\n### `write`\n\nWhen this feature is enabled, `SmallVec<[u8; _]>` implements the `std::io::Write` trait.\nThis feature is not compatible with `#![no_std]` programs.\n\n### `union`\n\n**This feature requires Rust 1.49.**\n\nWhen the `union` feature is enabled `smallvec` will track its state (inline or spilled)\nwithout the use of an enum tag, reducing the size of the `smallvec` by one machine word.\nThis means that there is potentially no space overhead compared to `Vec`.\nNote that `smallvec` can still be larger than `Vec` if the inline buffer is larger than two\nmachine words.\n\nTo use this feature add `features = [\"union\"]` in the `smallvec` section of Cargo.toml.\nNote that this feature requires Rust 1.49.\n\nTracking issue: [rust-lang/rust#55149](https://github.com/rust-lang/rust/issues/55149)\n\n### `const_generics`\n\n**This feature requires Rust 1.51.**\n\nWhen this feature is enabled, `SmallVec` works with any arrays of any size, not just a fixed\nlist of sizes.\n\n### `const_new`\n\n**This feature requires Rust 1.51.**\n\nThis feature exposes the functions [`SmallVec::new_const`], [`SmallVec::from_const`], and [`smallvec_inline`] which enables the `SmallVec` to be initialized from a const context.\nFor details, see the\n[Rust Reference](https://doc.rust-lang.org/reference/const_eval.html#const-functions).\n\n### `specialization`\n\n**This feature is unstable and requires a nightly build of the Rust toolchain.**\n\nWhen this feature is enabled, `SmallVec::from(slice)` has improved performance for slices\nof `Copy` types.  (Without this feature, you can use `SmallVec::from_slice` to get optimal\nperformance for `Copy` types.)\n\nTracking issue: [rust-lang/rust#31844](https://github.com/rust-lang/rust/issues/31844)\n\n### `may_dangle`\n\n**This feature is unstable and requires a nightly build of the Rust toolchain.**\n\nThis feature makes the Rust compiler less strict about use of vectors that contain borrowed\nreferences. For details, see the\n[Rustonomicon](https://doc.rust-lang.org/1.42.0/nomicon/dropck.html#an-escape-hatch).\n\nTracking issue: [rust-lang/rust#34761](https://github.com/rust-lang/rust/issues/34761)","links":{},"attrs":["#![no_std]","#![deny(missing_docs)]"],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:349:1772","0:57:1796","0:118:1733","0:280:2185","0:327:1798","0:343:2245","0:38:1728"],"is_stripped":false}}},"1:12087:18223":{"id":"1:12087:18223","crate_id":1,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41353:181","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11720:3808","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:11720:3808","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11735:6337","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:2700:228-0:280:2185":{"id":"a:1:2700:228-0:280:2185","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2700:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2700:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:280:2185","args":{"angle_bracketed":{"args":[{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:576":{"id":"0:576","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[2112,0],"end":[2116,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Array","id":"0:327:1798","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"array":{"type":{"generic":"T"},"len":"16384"}},"items":["0:579:1802","0:580:1367"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:210":{"id":"0:210","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1570,0],"end":[1575,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Array","id":"0:327:1798","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"AsMut","id":"1:2508:74","args":{"angle_bracketed":{"args":[{"type":{"slice":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"A"},"trait":{"name":"Array","id":"0:327:1798","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"SmallVec","id":"0:118:1733","args":{"angle_bracketed":{"args":[{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:212:1812"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:273:429":{"id":"0:273:429","crate_id":0,"name":"cmp","span":{"filename":"src/lib.rs","begin":[1880,4],"end":[1882,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"SmallVec","id":"0:118:1733","args":{"angle_bracketed":{"args":[{"type":{"generic":"A"}}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"cmp::Ordering","id":"1:30798:183","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:424:1802":{"id":"0:424:1802","crate_id":0,"name":"Item","span":{"filename":"src/lib.rs","begin":[2112,0],"end":[2116,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"0:366":{"id":"0:366","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[2112,0],"end":[2116,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Array","id":"0:327:1798","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"array":{"type":{"generic":"T"},"len":"2"}},"items":["0:369:1802","0:370:1367"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:526":{"id":"0:526","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[2112,0],"end":[2116,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Array","id":"0:327:1798","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"array":{"type":{"generic":"T"},"len":"64"}},"items":["0:529:1802","0:530:1367"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:546":{"id":"0:546","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[2112,0],"end":[2116,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Array","id":"0:327:1798","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"array":{"type":{"generic":"T"},"len":"512"}},"items":["0:549:1802","0:550:1367"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:565:1367":{"id":"0:565:1367","crate_id":0,"name":"size","span":{"filename":"src/lib.rs","begin":[2112,0],"end":[2116,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:509:1802":{"id":"0:509:1802","crate_id":0,"name":"Item","span":{"filename":"src/lib.rs","begin":[2112,0],"end":[2116,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"1:12102:18227":{"id":"1:12102:18227","crate_id":1,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:4:677-0:118:1733":{"id":"b:4:677-0:118:1733","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2263:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"4:673:231","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"SmallVec","id":"0:118:1733","args":{"angle_bracketed":{"args":[{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["4:679:3722","4:680:11795","4:681:11796"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:361":{"id":"0:361","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[2112,0],"end":[2116,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Array","id":"0:327:1798","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"array":{"type":{"generic":"T"},"len":"1"}},"items":["0:364:1802","0:365:1367"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:504:1802":{"id":"0:504:1802","crate_id":0,"name":"Item","span":{"filename":"src/lib.rs","begin":[2112,0],"end":[2116,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"0:430:1367":{"id":"0:430:1367","crate_id":0,"name":"size","span":{"filename":"src/lib.rs","begin":[2112,0],"end":[2116,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:394:1802":{"id":"0:394:1802","crate_id":0,"name":"Item","span":{"filename":"src/lib.rs","begin":[2112,0],"end":[2116,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"a:1:2740:2679-0:57:1796":{"id":"a:1:2740:2679-0:57:1796","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:2740:2679","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Drain","id":"0:57:1796","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:80:1806":{"id":"0:80:1806","crate_id":0,"name":"size_hint","span":{"filename":"src/lib.rs","begin":[365,4],"end":[367,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"tuple":[{"primitive":"usize"},{"resolved_path":{"name":"Option","id":"1:41353:181","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:118:1733":{"id":"0:118:1733","crate_id":0,"name":"SmallVec","span":{"filename":"src/lib.rs","begin":[555,0],"end":[561,1]},"visibility":"public","docs":"A `Vec`-like container that can store a small number of elements inline.\n\n`SmallVec` acts like a vector, but can store a limited amount of data inline within the\n`SmallVec` struct rather than in a separate allocation.  If the data exceeds this limit, the\n`SmallVec` will \"spill\" its data onto the heap, allocating a new buffer to hold it.\n\nThe amount of data that a `SmallVec` can store inline depends on its backing store. The backing\nstore can be any type that implements the `Array` trait; usually it is a small fixed-sized\narray.  For example a `SmallVec<[u64; 8]>` can hold up to eight 64-bit integers inline.\n\n## Example\n\n```rust\nuse smallvec::SmallVec;\nlet mut v = SmallVec::<[u8; 4]>::new(); // initialize an empty vector\n\n// The vector can hold up to 4 items without spilling onto the heap.\nv.extend(0..4);\nassert_eq!(v.len(), 4);\nassert!(!v.spilled());\n\n// Pushing another element will force the buffer to spill:\nv.push(4);\nassert_eq!(v.len(), 5);\nassert!(v.spilled());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Array","id":"0:327:1798","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"impls":["0:122","0:191","0:196","a:1:8252:2779-0:118:1733","a:1:8253:2778-0:118:1733","a:1:2740:2679-0:118:1733","a:1:2700:228-0:118:1733","b:1:2247-0:118:1733","b:1:3319-0:118:1733","b:1:2552-0:118:1733","b:1:2250-0:118:1733","b:1:2541-0:118:1733","b:1:2544-0:118:1733","b:1:2547-0:118:1733","b:1:2537-0:118:1733","b:4:677-0:118:1733","0:223","0:255","0:315","0:213","0:229","0:216","0:262","0:258","0:210","0:207","0:226","0:278","0:234","0:249","0:245","0:204","0:266","0:310","0:271","0:219","0:321","0:252","0:241","0:274","0:200","0:268"]}}},"a:1:8253:2778-0:57:1796":{"id":"a:1:8253:2778-0:57:1796","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:8253:2778","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"T"},"trait":{"name":"Array","id":"0:327:1798","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:8253:2778","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:8253:2778","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Drain","id":"0:57:1796","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:12137:16904":{"id":"1:12137:16904","crate_id":1,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12022:16956":{"id":"1:12022:16956","crate_id":1,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\nBasic usage:\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"1:11282:6339"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:356":{"id":"0:356","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[2112,0],"end":[2116,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Array","id":"0:327:1798","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"array":{"type":{"generic":"T"},"len":"0"}},"items":["0:359:1802","0:360:1367"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:414:1802":{"id":"0:414:1802","crate_id":0,"name":"Item","span":{"filename":"src/lib.rs","begin":[2112,0],"end":[2116,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"0:209:315":{"id":"0:209:315","crate_id":0,"name":"as_ref","span":{"filename":"src/lib.rs","begin":[1565,4],"end":[1567,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"A"},"trait":{"name":"","id":"0:327:1798","args":null}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:475:1367":{"id":"0:475:1367","crate_id":0,"name":"size","span":{"filename":"src/lib.rs","begin":[2112,0],"end":[2116,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"4:679:3722":{"id":"4:679:3722","crate_id":4,"name":"Owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"b:1:2247-0:57:1796":{"id":"b:1:2247-0:57:1796","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2690:2566","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2241:97","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Drain","id":"0:57:1796","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:2249:1683"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:122":{"id":"0:122","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[563,0],"end":[1432,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Array","id":"0:327:1798","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"SmallVec","id":"0:118:1733","args":{"angle_bracketed":{"args":[{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:124:943","0:125:1857","0:126:1738","0:127:1871","0:128:1877","0:129:1878","0:130:1817","0:132:1736","0:133:815","0:134:1897","0:135:1792","0:138:1901","0:139:1913","0:142:1737","0:143:1933","0:144:1943","0:146:1949","0:147:1951","0:148:1929","0:149:1962","0:150:1859","0:151:1966","0:152:1970","0:153:1976","0:154:1803","0:155:1981","0:156:1985","0:158:1989","0:159:1992","0:160:1995","0:161:2000","0:171:2012","0:172:2017","0:173:1825","0:174:2024","0:176:2031","0:178:2033","0:180:2034","0:182:2044","0:186:2063","0:188:1926","0:189:314","0:190:1814"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12108:18230":{"id":"1:12108:18230","crate_id":1,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:257:587":{"id":"0:257:587","crate_id":0,"name":"drop","span":{"filename":"src/lib.rs","begin":[1816,4],"end":[1825,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:476":{"id":"0:476","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[2112,0],"end":[2116,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Array","id":"0:327:1798","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"array":{"type":{"generic":"T"},"len":"24"}},"items":["0:479:1802","0:480:1367"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:222:696":{"id":"0:222:696","crate_id":0,"name":"from","span":{"filename":"src/lib.rs","begin":[1701,4],"end":[1703,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(feature = \"specialization\"))]","#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["slice",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"slice":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"A"},"trait":{"name":"","id":"0:327:1798","args":null}}}}}}]],"output":{"resolved_path":{"name":"SmallVec","id":"0:118:1733","args":{"angle_bracketed":{"args":[{"type":{"generic":"A"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:384:1802":{"id":"0:384:1802","crate_id":0,"name":"Item","span":{"filename":"src/lib.rs","begin":[2112,0],"end":[2116,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"0:385:1367":{"id":"0:385:1367","crate_id":0,"name":"size","span":{"filename":"src/lib.rs","begin":[2112,0],"end":[2116,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:274":{"id":"0:274","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1885,0],"end":[1892,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Array","id":"0:327:1798","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"A"},"trait":{"name":"","id":"0:327:1798","args":null}}},"bounds":[{"trait_bound":{"trait":{"name":"Hash","id":"1:9365:141","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["hash_slice"],"trait":{"name":"Hash","id":"1:9365:141","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"SmallVec","id":"0:118:1733","args":{"angle_bracketed":{"args":[{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:276:731"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:559:1802":{"id":"0:559:1802","crate_id":0,"name":"Item","span":{"filename":"src/lib.rs","begin":[2112,0],"end":[2116,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"0:551":{"id":"0:551","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[2112,0],"end":[2116,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Array","id":"0:327:1798","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"array":{"type":{"generic":"T"},"len":"1024"}},"items":["0:554:1802","0:555:1367"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:2740:2679-0:118:1733":{"id":"a:1:2740:2679-0:118:1733","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"1:2740:2679","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:2740:2679","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"SmallVec","id":"0:118:1733","args":{"angle_bracketed":{"args":[{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:151:1966":{"id":"0:151:1966","crate_id":0,"name":"try_reserve_exact","span":{"filename":"src/lib.rs","begin":[973,4],"end":[982,5]},"visibility":"public","docs":"Reserve the minimum capacity for `additional` more elements to be inserted.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["additional",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Result","id":"1:41497:210","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}},{"type":{"resolved_path":{"name":"CollectionAllocErr","id":"0:349:1772","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:266":{"id":"0:266","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1863,0],"end":[1863,54]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Array","id":"0:327:1798","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"A"},"trait":{"name":"","id":"0:327:1798","args":null}}},"bounds":[{"trait_bound":{"trait":{"name":"Eq","id":"1:2316:125","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"1:2316:125","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"SmallVec","id":"0:118:1733","args":{"angle_bracketed":{"args":[{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:380:1367":{"id":"0:380:1367","crate_id":0,"name":"size","span":{"filename":"src/lib.rs","begin":[2112,0],"end":[2116,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:465:1367":{"id":"0:465:1367","crate_id":0,"name":"size","span":{"filename":"src/lib.rs","begin":[2112,0],"end":[2116,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:285":{"id":"0:285","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1907,0],"end":[1914,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Array","id":"0:327:1798","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"A"},"trait":{"name":"","id":"0:327:1798","args":null}}},"bounds":[{"trait_bound":{"trait":{"name":"fmt::Debug","id":"1:9145:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:9145:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:280:2185","args":{"angle_bracketed":{"args":[{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:287:670"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:585:1367":{"id":"0:585:1367","crate_id":0,"name":"size","span":{"filename":"src/lib.rs","begin":[2112,0],"end":[2116,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"4:5440:18903":{"id":"4:5440:18903","crate_id":4,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"4:7280:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"4:7280:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:233:772":{"id":"0:233:772","crate_id":0,"name":"index","span":{"filename":"src/lib.rs","begin":[1729,4],"end":[1731,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"","id":"1:9816:222","args":null}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:600:1367":{"id":"0:600:1367","crate_id":0,"name":"size","span":{"filename":"src/lib.rs","begin":[2112,0],"end":[2116,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12106:18229":{"id":"1:12106:18229","crate_id":1,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:371":{"id":"0:371","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[2112,0],"end":[2116,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Array","id":"0:327:1798","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"array":{"type":{"generic":"T"},"len":"3"}},"items":["0:374:1802","0:375:1367"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:47:670":{"id":"0:47:670","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[294,4],"end":[296,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:9120:132","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:9109:210","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:68":{"id":"0:68","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[351,0],"end":[351,57]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2700:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Array","id":"0:327:1798","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2700:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Drain","id":"0:57:1796","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:288":{"id":"0:288","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1916,0],"end":[1923,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Array","id":"0:327:1798","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2263:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"A"},"trait":{"name":"","id":"0:327:1798","args":null}}},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2263:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2263:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:280:2185","args":{"angle_bracketed":{"args":[{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:290:422"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2552-0:280:2185":{"id":"b:1:2552-0:280:2185","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2511:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2521:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:280:2185","args":{"angle_bracketed":{"args":[{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2555:128","1:2556:1482"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:375:1367":{"id":"0:375:1367","crate_id":0,"name":"size","span":{"filename":"src/lib.rs","begin":[2112,0],"end":[2116,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:464:1802":{"id":"0:464:1802","crate_id":0,"name":"Item","span":{"filename":"src/lib.rs","begin":[2112,0],"end":[2116,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"1:12034:18216":{"id":"1:12034:18216","crate_id":1,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"1:51670:1402","str::slice_mut_unchecked":"1:12035:18217","crate::ops::Index":"1:2980:2171"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:204":{"id":"0:204","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1553,0],"end":[1561,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Array","id":"0:327:1798","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"DerefMut","id":"1:2910:2141","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"SmallVec","id":"0:118:1733","args":{"angle_bracketed":{"args":[{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:206:553"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:390:1367":{"id":"0:390:1367","crate_id":0,"name":"size","span":{"filename":"src/lib.rs","begin":[2112,0],"end":[2116,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:188:1926":{"id":"0:188:1926","crate_id":0,"name":"from_raw_parts","span":{"filename":"src/lib.rs","begin":[1409,4],"end":[1415,5]},"visibility":"public","docs":"Creates a `SmallVec` directly from the raw components of another\n`SmallVec`.\n\n# Safety\n\nThis is highly unsafe, due to the number of invariants that aren't\nchecked:\n\n* `ptr` needs to have been previously allocated via `SmallVec` for its\n  spilled storage (at least, it's highly likely to be incorrect if it\n  wasn't).\n* `ptr`'s `A::Item` type needs to be the same size and alignment that\n  it was allocated with\n* `length` needs to be less than or equal to `capacity`.\n* `capacity` needs to be the capacity that the pointer was allocated\n  with.\n\nViolating these may cause problems like corrupting the allocator's\ninternal data structures.\n\nAdditionally, `capacity` must be greater than the amount of inline\nstorage `A` has; that is, the new `SmallVec` must need to spill over\ninto heap allocated storage. This condition is asserted against.\n\nThe ownership of `ptr` is effectively transferred to the\n`SmallVec` which may then deallocate, reallocate or change the\ncontents of memory pointed to by the pointer at will. Ensure\nthat nothing else uses the pointer after calling this\nfunction.\n\n# Examples\n\n```\n# #[macro_use] extern crate smallvec;\n# use smallvec::SmallVec;\nuse std::mem;\nuse std::ptr;\n\nfn main() {\n    let mut v: SmallVec<[_; 1]> = smallvec![1, 2, 3];\n\n    // Pull out the important parts of `v`.\n    let p = v.as_mut_ptr();\n    let len = v.len();\n    let cap = v.capacity();\n    let spilled = v.spilled();\n\n    unsafe {\n        // Forget all about `v`. The heap allocation that stored the\n        // three values won't be deallocated.\n        mem::forget(v);\n\n        // Overwrite memory with [4, 5, 6].\n        //\n        // This is only safe if `spilled` is true! Otherwise, we are\n        // writing into the old `SmallVec`'s inline storage on the\n        // stack.\n        assert!(spilled);\n        for i in 0..len {\n            ptr::write(p.add(i), 4 + i);\n        }\n\n        // Put everything back together into a SmallVec with a different\n        // amount of inline storage, but which is still less than `cap`.\n        let rebuilt = SmallVec::<[_; 2]>::from_raw_parts(p, len, cap);\n        assert_eq!(&*rebuilt, &[4, 5, 6]);\n    }\n}","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["ptr",{"raw_pointer":{"mutable":true,"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"A"},"trait":{"name":"","id":"0:327:1798","args":null}}}}}],["length",{"primitive":"usize"}],["capacity",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"SmallVec","id":"0:118:1733","args":{"angle_bracketed":{"args":[{"type":{"generic":"A"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:376":{"id":"0:376","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[2112,0],"end":[2116,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Array","id":"0:327:1798","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"array":{"type":{"generic":"T"},"len":"4"}},"items":["0:379:1802","0:380:1367"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:570:1367":{"id":"0:570:1367","crate_id":0,"name":"size","span":{"filename":"src/lib.rs","begin":[2112,0],"end":[2116,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:312:2185":{"id":"0:312:2185","crate_id":0,"name":"IntoIter","span":{"filename":"src/lib.rs","begin":[1986,4],"end":[1986,32]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"IntoIter","id":"0:280:2185","args":{"angle_bracketed":{"args":[{"type":{"generic":"A"}}],"bindings":[]}}}}}}},"b:1:3319-0:118:1733":{"id":"b:1:3319-0:118:1733","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:2690:2566","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3317:69","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"SmallVec","id":"0:118:1733","args":{"angle_bracketed":{"args":[{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:3321:1496"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:355:670":{"id":"0:355:670","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[282,9],"end":[282,14]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"1:9120:132","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"1:9109:210","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:127:1871":{"id":"0:127:1871","crate_id":0,"name":"from_buf","span":{"filename":"src/lib.rs","begin":[648,4],"end":[653,5]},"visibility":"public","docs":"Constructs a new `SmallVec` on the stack from an `A` without\ncopying elements.\n\n```rust\nuse smallvec::SmallVec;\n\nlet buf = [1, 2, 3, 4, 5];\nlet small_vec: SmallVec<_> = SmallVec::from_buf(buf);\n\nassert_eq!(&*small_vec, &[1, 2, 3, 4, 5]);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["buf",{"generic":"A"}]],"output":{"resolved_path":{"name":"SmallVec","id":"0:118:1733","args":{"angle_bracketed":{"args":[{"type":{"generic":"A"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:459:1802":{"id":"0:459:1802","crate_id":0,"name":"Item","span":{"filename":"src/lib.rs","begin":[2112,0],"end":[2116,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"0:126:1738":{"id":"0:126:1738","crate_id":0,"name":"from_vec","span":{"filename":"src/lib.rs","begin":[612,4],"end":[634,5]},"visibility":"public","docs":"Construct a new `SmallVec` from a `Vec<A::Item>`.\n\nElements will be copied to the inline buffer if vec.capacity() <= Self::inline_capacity().\n\n```rust\nuse smallvec::SmallVec;\n\nlet vec = vec![1, 2, 3, 4, 5];\nlet small_vec: SmallVec<[_; 3]> = SmallVec::from_vec(vec);\n\nassert_eq!(&*small_vec, &[1, 2, 3, 4, 5]);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["vec",{"resolved_path":{"name":"Vec","id":"4:6717:244","args":{"angle_bracketed":{"args":[{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"A"},"trait":{"name":"","id":"0:327:1798","args":null}}}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"SmallVec","id":"0:118:1733","args":{"angle_bracketed":{"args":[{"type":{"generic":"A"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:365:1367":{"id":"0:365:1367","crate_id":0,"name":"size","span":{"filename":"src/lib.rs","begin":[2112,0],"end":[2116,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:454:1802":{"id":"0:454:1802","crate_id":0,"name":"Item","span":{"filename":"src/lib.rs","begin":[2112,0],"end":[2116,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"b:1:2552-0:349:1772":{"id":"b:1:2552-0:349:1772","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2511:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2521:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"CollectionAllocErr","id":"0:349:1772","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2555:128","1:2556:1482"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:189:314":{"id":"0:189:314","crate_id":0,"name":"as_ptr","span":{"filename":"src/lib.rs","begin":[1418,4],"end":[1423,5]},"visibility":"public","docs":"Returns a raw pointer to the vector's buffer.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"A"},"trait":{"name":"","id":"0:327:1798","args":null}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:560:1367":{"id":"0:560:1367","crate_id":0,"name":"size","span":{"filename":"src/lib.rs","begin":[2112,0],"end":[2116,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2537-0:118:1733":{"id":"b:1:2537-0:118:1733","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2514:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2511:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"SmallVec","id":"0:118:1733","args":{"angle_bracketed":{"args":[{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2540:2137"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:306":{"id":"0:306","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1971,0],"end":[1983,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Array","id":"0:327:1798","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"IntoIter","id":"0:280:2185","args":{"angle_bracketed":{"args":[{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:308:1803","0:309:1981"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:485:1367":{"id":"0:485:1367","crate_id":0,"name":"size","span":{"filename":"src/lib.rs","begin":[2112,0],"end":[2116,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:364:1802":{"id":"0:364:1802","crate_id":0,"name":"Item","span":{"filename":"src/lib.rs","begin":[2112,0],"end":[2116,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"0:353:1778":{"id":"0:353:1778","crate_id":0,"name":"layout","span":{"filename":"src/lib.rs","begin":[289,8],"end":[289,22]},"visibility":"default","docs":"The layout that was passed to the allocator","links":{},"attrs":[],"deprecation":null,"inner":{"struct_field":{"resolved_path":{"name":"Layout","id":"1:44312:161","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"1:12109:18231":{"id":"1:12109:18231","crate_id":1,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:158:1989":{"id":"0:158:1989","crate_id":0,"name":"clear","span":{"filename":"src/lib.rs","begin":[1053,4],"end":[1055,5]},"visibility":"public","docs":"Remove all elements from the vector.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:8253:2778-0:280:2185":{"id":"a:1:8253:2778-0:280:2185","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:8253:2778","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"A"},"trait":{"name":"Array","id":"0:327:1798","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:8253:2778","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:8253:2778","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:280:2185","args":{"angle_bracketed":{"args":[{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:280:2185":{"id":"0:280:2185","crate_id":0,"name":"IntoIter","span":{"filename":"src/lib.rs","begin":[1901,0],"end":[1905,1]},"visibility":"public","docs":"An iterator that consumes a `SmallVec` and yields its items by value.\n\nReturned from [`SmallVec::into_iter`][1].\n\n[1]: struct.SmallVec.html#method.into_iter","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Array","id":"0:327:1798","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"impls":["0:306","a:1:8252:2779-0:280:2185","a:1:8253:2778-0:280:2185","a:1:2683:220-0:280:2185","a:1:2740:2679-0:280:2185","a:1:2700:228-0:280:2185","b:1:7209-0:280:2185","b:1:2247-0:280:2185","b:1:3319-0:280:2185","b:1:2552-0:280:2185","b:1:2250-0:280:2185","b:1:2541-0:280:2185","b:1:2547-0:280:2185","b:1:2537-0:280:2185","b:4:677-0:280:2185","0:304","0:299","0:285","0:291","0:294","0:302","0:288"]}}},"b:1:2537-0:349:1772":{"id":"b:1:2537-0:349:1772","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2514:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2511:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"CollectionAllocErr","id":"0:349:1772","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2540:2137"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:489:1802":{"id":"0:489:1802","crate_id":0,"name":"Item","span":{"filename":"src/lib.rs","begin":[2112,0],"end":[2116,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"4:5426:2561":{"id":"4:5426:2561","crate_id":4,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"4:7280:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["from",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"4:7280:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11720:3808","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:449:1802":{"id":"0:449:1802","crate_id":0,"name":"Item","span":{"filename":"src/lib.rs","begin":[2112,0],"end":[2116,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"0:470:1367":{"id":"0:470:1367","crate_id":0,"name":"size","span":{"filename":"src/lib.rs","begin":[2112,0],"end":[2116,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:160:1995":{"id":"0:160:1995","crate_id":0,"name":"insert","span":{"filename":"src/lib.rs","begin":[1077,4],"end":[1094,5]},"visibility":"public","docs":"Insert an element at position `index`, shifting all elements after it to the right.\n\nPanics if `index > len`.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}],["element",{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"A"},"trait":{"name":"","id":"0:327:1798","args":null}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12016:18212":{"id":"1:12016:18212","crate_id":1,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12041:13296":{"id":"1:12041:13296","crate_id":1,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"1:12042:13322"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitWhitespace","id":"1:43596:4084","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:195:1770":{"id":"0:195:1770","crate_id":0,"name":"extend_from_slice","span":{"filename":"src/lib.rs","begin":[1490,4],"end":[1493,5]},"visibility":"public","docs":"Copy elements from a slice and append them to the vector.\n\nFor slices of `Copy` types, this is more efficient than `extend`.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["slice",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"A"},"trait":{"name":"","id":"0:327:1798","args":null}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12141:18239":{"id":"1:12141:18239","crate_id":1,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"1:4536:18239"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeUnicode","id":"1:43639:4013","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:133:815":{"id":"0:133:815","crate_id":0,"name":"len","span":{"filename":"src/lib.rs","begin":[734,4],"end":[736,5]},"visibility":"public","docs":"The number of elements stored in the vector","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:304":{"id":"0:304","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1969,0],"end":[1969,47]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Array","id":"0:327:1798","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"FusedIterator","id":"1:7591:1687","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:280:2185","args":{"angle_bracketed":{"args":[{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:490:1367":{"id":"0:490:1367","crate_id":0,"name":"size","span":{"filename":"src/lib.rs","begin":[2112,0],"end":[2116,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2541-0:280:2185":{"id":"b:1:2541-0:280:2185","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2514:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:280:2185","args":{"angle_bracketed":{"args":[{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2543:696"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:298:1806":{"id":"0:298:1806","crate_id":0,"name":"size_hint","span":{"filename":"src/lib.rs","begin":[1948,4],"end":[1951,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"tuple":[{"primitive":"usize"},{"resolved_path":{"name":"Option","id":"1:41353:181","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:3321:1496":{"id":"1:3321:1496","crate_id":1,"name":"type_id","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"TypeId","id":"1:39303:3873","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:7213:787":{"id":"1:7213:787","crate_id":1,"name":"into_iter","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"I"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:610:1367":{"id":"0:610:1367","crate_id":0,"name":"size","span":{"filename":"src/lib.rs","begin":[2112,0],"end":[2116,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:146:1949":{"id":"0:146:1949","crate_id":0,"name":"grow","span":{"filename":"src/lib.rs","begin":[889,4],"end":[891,5]},"visibility":"public","docs":"Re-allocate to set the capacity to `max(new_cap, inline_size())`.\n\nPanics if `new_cap` is less than the vector's length\nor if the capacity computation overflows `usize`.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["new_cap",{"primitive":"usize"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:554:1802":{"id":"0:554:1802","crate_id":0,"name":"Item","span":{"filename":"src/lib.rs","begin":[2112,0],"end":[2116,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"0:460:1367":{"id":"0:460:1367","crate_id":0,"name":"size","span":{"filename":"src/lib.rs","begin":[2112,0],"end":[2116,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:327:1798":{"id":"0:327:1798","crate_id":0,"name":"Array","span":{"filename":"src/lib.rs","begin":[2019,0],"end":[2024,1]},"visibility":"public","docs":"Types that can be used as the backing store for a SmallVec","links":{},"attrs":[],"deprecation":null,"inner":{"trait":{"is_auto":false,"is_unsafe":true,"items":["0:328:1802","0:329:1367"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":["0:531","0:516","0:406","0:481","0:426","0:401","0:556","0:456","0:381","0:551","0:566","0:486","0:561","0:476","0:601","0:471","0:361","0:466","0:611","0:596","0:441","0:376","0:391","0:616","0:571","0:421","0:446","0:416","0:461","0:581","0:356","0:436","0:491","0:591","0:496","0:546","0:606","0:431","0:451","0:366","0:371","0:541","0:526","0:501","0:576","0:506","0:411","0:386","0:511","0:586","0:396","0:536","0:521"]}}},"0:254:60":{"id":"0:254:60","crate_id":0,"name":"default","span":{"filename":"src/lib.rs","begin":[1795,4],"end":[1797,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"SmallVec","id":"0:118:1733","args":{"angle_bracketed":{"args":[{"type":{"generic":"A"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12024:314":{"id":"1:12024:314","crate_id":1,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"1:12025:1814","`u8`":"1:51681:1504"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:516":{"id":"0:516","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[2112,0],"end":[2116,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Array","id":"0:327:1798","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"array":{"type":{"generic":"T"},"len":"32"}},"items":["0:519:1802","0:520:1367"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:580:1367":{"id":"0:580:1367","crate_id":0,"name":"size","span":{"filename":"src/lib.rs","begin":[2112,0],"end":[2116,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2537-0:280:2185":{"id":"b:1:2537-0:280:2185","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2514:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2511:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:280:2185","args":{"angle_bracketed":{"args":[{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2540:2137"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:171:2012":{"id":"0:171:2012","crate_id":0,"name":"into_vec","span":{"filename":"src/lib.rs","begin":[1184,4],"end":[1195,5]},"visibility":"public","docs":"Convert a SmallVec to a Vec, without reallocating if the SmallVec has already spilled onto\nthe heap.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Vec","id":"4:6717:244","args":{"angle_bracketed":{"args":[{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"A"},"trait":{"name":"","id":"0:327:1798","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:2252:2143":{"id":"1:2252:2143","crate_id":1,"name":"borrow_mut","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:138:1901":{"id":"0:138:1901","crate_id":0,"name":"spilled","span":{"filename":"src/lib.rs","begin":[783,4],"end":[785,5]},"visibility":"public","docs":"Returns `true` if the data has spilled into a separate heap-allocated buffer.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:429:1802":{"id":"0:429:1802","crate_id":0,"name":"Item","span":{"filename":"src/lib.rs","begin":[2112,0],"end":[2116,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"a:1:8252:2779-0:57:1796":{"id":"a:1:8252:2779-0:57:1796","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:8253:2778","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"T"},"trait":{"name":"Array","id":"0:327:1798","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:8253:2778","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:8252:2779","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Drain","id":"0:57:1796","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:350:1774":{"id":"0:350:1774","crate_id":0,"name":"CapacityOverflow","span":{"filename":"src/lib.rs","begin":[285,4],"end":[285,20]},"visibility":"default","docs":"Overflow `usize::MAX` or other error during size computation","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"1:12032:2887":{"id":"1:12032:2887","crate_id":1,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:9816:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:9816:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2552-0:118:1733":{"id":"b:1:2552-0:118:1733","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2511:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2521:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"SmallVec","id":"0:118:1733","args":{"angle_bracketed":{"args":[{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2555:128","1:2556:1482"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:12035:18217":{"id":"1:12035:18217","crate_id":1,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"1:51670:1402","crate::ops::IndexMut":"1:2984:2172","str::slice_unchecked":"1:12034:18216"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:71":{"id":"0:71","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[352,0],"end":[352,57]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:2683:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Array","id":"0:327:1798","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:2683:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Drain","id":"0:57:1796","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:435:1367":{"id":"0:435:1367","crate_id":0,"name":"size","span":{"filename":"src/lib.rs","begin":[2112,0],"end":[2116,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:321":{"id":"0:321","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[2010,0],"end":[2016,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Array","id":"0:327:1798","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"1:7205:152","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"borrowed_ref":{"lifetime":"'a","mutable":true,"type":{"resolved_path":{"name":"SmallVec","id":"0:118:1733","args":{"angle_bracketed":{"args":[{"type":{"generic":"A"}}],"bindings":[]}}}}}},"items":["0:324:2185","0:325:1802","0:326:787"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2247-0:349:1772":{"id":"b:1:2247-0:349:1772","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2690:2566","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2241:97","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"CollectionAllocErr","id":"0:349:1772","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2249:1683"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:399:1802":{"id":"0:399:1802","crate_id":0,"name":"Item","span":{"filename":"src/lib.rs","begin":[2112,0],"end":[2116,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"1:12042:13322":{"id":"1:12042:13322","crate_id":1,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"1:12041:13296"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitAsciiWhitespace","id":"1:43605:4085","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:223":{"id":"0:223","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1712,0],"end":[1717,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Array","id":"0:327:1798","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2514:133","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Vec","id":"4:6717:244","args":{"angle_bracketed":{"args":[{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"A"},"trait":{"name":"Array","id":"0:327:1798","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},{"type":{"resolved_path":{"name":"Global","id":"4:7013:2439","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"SmallVec","id":"0:118:1733","args":{"angle_bracketed":{"args":[{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:225:696"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:419:1802":{"id":"0:419:1802","crate_id":0,"name":"Item","span":{"filename":"src/lib.rs","begin":[2112,0],"end":[2116,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"0:561":{"id":"0:561","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[2112,0],"end":[2116,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Array","id":"0:327:1798","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"array":{"type":{"generic":"T"},"len":"2048"}},"items":["0:564:1802","0:565:1367"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:521":{"id":"0:521","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[2112,0],"end":[2116,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Array","id":"0:327:1798","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"array":{"type":{"generic":"T"},"len":"36"}},"items":["0:524:1802","0:525:1367"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:226":{"id":"0:226","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1719,0],"end":[1724,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Array","id":"0:327:1798","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2514:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"A"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"SmallVec","id":"0:118:1733","args":{"angle_bracketed":{"args":[{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:228:696"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:2740:2679-0:349:1772":{"id":"a:1:2740:2679-0:349:1772","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:2740:2679","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"CollectionAllocErr","id":"0:349:1772","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:190:1814":{"id":"0:190:1814","crate_id":0,"name":"as_mut_ptr","span":{"filename":"src/lib.rs","begin":[1426,4],"end":[1431,5]},"visibility":"public","docs":"Returns a raw mutable pointer to the vector's buffer.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"A"},"trait":{"name":"","id":"0:327:1798","args":null}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:276:731":{"id":"0:276:731","crate_id":0,"name":"hash","span":{"filename":"src/lib.rs","begin":[1889,4],"end":[1891,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["state",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"H"}}}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"H","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Hasher","id":"1:9373:145","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12025:1814":{"id":"1:12025:1814","crate_id":1,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:51681:1504"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12128:18236":{"id":"1:12128:18236","crate_id":1,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:51664:418","self::pattern":"1:11715:6331"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11720:3808","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:11720:3808","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11735:6337","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:4:677-0:280:2185":{"id":"b:4:677-0:280:2185","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2263:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"4:673:231","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:280:2185","args":{"angle_bracketed":{"args":[{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["4:679:3722","4:680:11795","4:681:11796"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:611":{"id":"0:611","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[2112,0],"end":[2116,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Array","id":"0:327:1798","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"array":{"type":{"generic":"T"},"len":"524288"}},"items":["0:614:1802","0:615:1367"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:199:1734":{"id":"0:199:1734","crate_id":0,"name":"from_elem","span":{"filename":"src/lib.rs","begin":[1523,4],"end":[1539,5]},"visibility":"public","docs":"Creates a `SmallVec` with `n` copies of `elem`.\n```\nuse smallvec::SmallVec;\n\nlet v = SmallVec::<[char; 128]>::from_elem('d', 2);\nassert_eq!(v, SmallVec::from_buf(['d', 'd']));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["elem",{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"A"},"trait":{"name":"","id":"0:327:1798","args":null}}}],["n",{"primitive":"usize"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:369:1802":{"id":"0:369:1802","crate_id":0,"name":"Item","span":{"filename":"src/lib.rs","begin":[2112,0],"end":[2116,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"b:1:2552-0:57:1796":{"id":"b:1:2552-0:57:1796","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2511:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2521:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Drain","id":"0:57:1796","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:2555:128","1:2556:1482"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:156:1985":{"id":"0:156:1985","crate_id":0,"name":"swap_remove","span":{"filename":"src/lib.rs","begin":[1044,4],"end":[1049,5]},"visibility":"public","docs":"Remove the element at position `index`, replacing it with the last element.\n\nThis does not preserve ordering, but is O(1).\n\nPanics if `index` is out of bounds.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"A"},"trait":{"name":"","id":"0:327:1798","args":null}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12138:18238":{"id":"1:12138:18238","crate_id":1,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"1:4538:18238"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDebug","id":"1:43621:4014","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:466":{"id":"0:466","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[2112,0],"end":[2116,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Array","id":"0:327:1798","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"array":{"type":{"generic":"T"},"len":"22"}},"items":["0:469:1802","0:470:1367"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:409:1802":{"id":"0:409:1802","crate_id":0,"name":"Item","span":{"filename":"src/lib.rs","begin":[2112,0],"end":[2116,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"0:524:1802":{"id":"0:524:1802","crate_id":0,"name":"Item","span":{"filename":"src/lib.rs","begin":[2112,0],"end":[2116,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"1:12122:18234":{"id":"1:12122:18234","crate_id":1,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:51664:418","self::pattern":"1:11715:6331"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11720:3808","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:11720:3808","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11735:6337","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:569:1802":{"id":"0:569:1802","crate_id":0,"name":"Item","span":{"filename":"src/lib.rs","begin":[2112,0],"end":[2116,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"0:161:2000":{"id":"0:161:2000","crate_id":0,"name":"insert_many","span":{"filename":"src/lib.rs","begin":[1098,4],"end":[1180,5]},"visibility":"public","docs":"Insert multiple elements at position `index`, shifting all following elements toward the\nback.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}],["iterable",{"generic":"I"}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"1:7205:152","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"A"},"trait":{"name":"","id":"0:327:1798","args":null}}}}}}]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:529:1802":{"id":"0:529:1802","crate_id":0,"name":"Item","span":{"filename":"src/lib.rs","begin":[2112,0],"end":[2116,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"1:12063:17022":{"id":"1:12063:17022","crate_id":1,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"1:11715:6331","`DoubleEndedIterator`":"1:7243:121","prim@char":"1:51664:418","str::split_whitespace":"1:12041:13296","str::rsplit":"1:12069:17025"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Split","id":"1:43322:2657","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11720:3808","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:530:1367":{"id":"0:530:1367","crate_id":0,"name":"size","span":{"filename":"src/lib.rs","begin":[2112,0],"end":[2116,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:571":{"id":"0:571","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[2112,0],"end":[2116,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Array","id":"0:327:1798","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"array":{"type":{"generic":"T"},"len":"8192"}},"items":["0:574:1802","0:575:1367"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:606":{"id":"0:606","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[2112,0],"end":[2116,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Array","id":"0:327:1798","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"array":{"type":{"generic":"T"},"len":"393216"}},"items":["0:609:1802","0:610:1367"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:456":{"id":"0:456","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[2112,0],"end":[2116,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Array","id":"0:327:1798","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"array":{"type":{"generic":"T"},"len":"20"}},"items":["0:459:1802","0:460:1367"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:514:1802":{"id":"0:514:1802","crate_id":0,"name":"Item","span":{"filename":"src/lib.rs","begin":[2112,0],"end":[2116,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"1:12081:17029":{"id":"1:12081:17029","crate_id":1,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"1:51664:418","str::splitn":"1:12078:17027","self::pattern":"1:11715:6331"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitN","id":"1:43444:2655","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11720:3808","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:11720:3808","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11735:6337","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12026:2174":{"id":"1:12026:2174","crate_id":1,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"1:41355:179"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"1:41353:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:9816:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:9816:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:575:1367":{"id":"0:575:1367","crate_id":0,"name":"size","span":{"filename":"src/lib.rs","begin":[2112,0],"end":[2116,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:159:1992":{"id":"0:159:1992","crate_id":0,"name":"remove","span":{"filename":"src/lib.rs","begin":[1061,4],"end":[1072,5]},"visibility":"public","docs":"Remove and return the element at position `index`, shifting all elements after it to the\nleft.\n\nPanics if `index` is out of bounds.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"A"},"trait":{"name":"","id":"0:327:1798","args":null}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:2550:128":{"id":"1:2550:128","crate_id":1,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"1:2521:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}}},"0:262":{"id":"0:262","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1853,0],"end":[1861,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Array","id":"0:327:1798","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"B","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Array","id":"0:327:1798","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"A"},"trait":{"name":"","id":"0:327:1798","args":null}}},"bounds":[{"trait_bound":{"trait":{"name":"PartialEq","id":"1:2311:188","args":{"angle_bracketed":{"args":[{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"B"},"trait":{"name":"","id":"0:327:1798","args":null}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"1:2311:188","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"SmallVec","id":"0:118:1733","args":{"angle_bracketed":{"args":[{"type":{"generic":"B"}}],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"SmallVec","id":"0:118:1733","args":{"angle_bracketed":{"args":[{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:265:612"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:354":{"id":"0:354","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[282,9],"end":[282,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:9145:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"CollectionAllocErr","id":"0:349:1772","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:355:670"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12017:18213":{"id":"1:12017:18213","crate_id":1,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12039:4097":{"id":"1:12039:4097","crate_id":1,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the last character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:51664:418"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CharIndices","id":"1:43298:4074","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:501":{"id":"0:501","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[2112,0],"end":[2116,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Array","id":"0:327:1798","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"array":{"type":{"generic":"T"},"len":"29"}},"items":["0:504:1802","0:505:1367"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:480:1367":{"id":"0:480:1367","crate_id":0,"name":"size","span":{"filename":"src/lib.rs","begin":[2112,0],"end":[2116,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:180:2034":{"id":"0:180:2034","crate_id":0,"name":"dedup_by","span":{"filename":"src/lib.rs","begin":[1258,4],"end":[1287,5]},"visibility":"public","docs":"Removes consecutive duplicate elements using the given equality relation.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["same_bucket",{"generic":"F"}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:2928:2026","args":{"parenthesized":{"inputs":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"A"},"trait":{"name":"","id":"0:327:1798","args":null}}}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"A"},"trait":{"name":"","id":"0:327:1798","args":null}}}}}],"output":{"primitive":"bool"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:271":{"id":"0:271","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1875,0],"end":[1883,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Array","id":"0:327:1798","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"A"},"trait":{"name":"","id":"0:327:1798","args":null}}},"bounds":[{"trait_bound":{"trait":{"name":"Ord","id":"1:2347:182","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["max","min","clamp"],"trait":{"name":"Ord","id":"1:2347:182","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"SmallVec","id":"0:118:1733","args":{"angle_bracketed":{"args":[{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:273:429"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2247-0:280:2185":{"id":"b:1:2247-0:280:2185","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2690:2566","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2241:97","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:280:2185","args":{"angle_bracketed":{"args":[{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2249:1683"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:12133:16899":{"id":"1:12133:16899","crate_id":1,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[rustc_const_unstable(feature = \"const_slice_is_ascii\", issue = \"111090\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:237:773":{"id":"0:237:773","crate_id":0,"name":"index_mut","span":{"filename":"src/lib.rs","begin":[1735,4],"end":[1737,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["index",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"","id":"1:9816:222","args":null}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:173:1825":{"id":"0:173:1825","crate_id":0,"name":"into_inner","span":{"filename":"src/lib.rs","begin":[1209,4],"end":[1220,5]},"visibility":"public","docs":"Convert the SmallVec into an `A` if possible. Otherwise return `Err(Self)`.\n\nThis method returns `Err(Self)` if the SmallVec is too short (and the `A` contains uninitialized elements),\nor if the SmallVec is too long (and all the elements were spilled to the heap).","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Result","id":"1:41497:210","args":{"angle_bracketed":{"args":[{"type":{"generic":"A"}},{"type":{"generic":"Self"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:261:424":{"id":"0:261:424","crate_id":0,"name":"clone_from","span":{"filename":"src/lib.rs","begin":[1837,4],"end":[1850,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["source",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:178:2033":{"id":"0:178:2033","crate_id":0,"name":"dedup","span":{"filename":"src/lib.rs","begin":[1250,4],"end":[1255,5]},"visibility":"public","docs":"Removes consecutive duplicate elements.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[{"bound_predicate":{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"A"},"trait":{"name":"","id":"0:327:1798","args":null}}},"bounds":[{"trait_bound":{"trait":{"name":"PartialEq","id":"1:2311:188","args":{"angle_bracketed":{"args":[{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"A"},"trait":{"name":"","id":"0:327:1798","args":null}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2247-0:118:1733":{"id":"b:1:2247-0:118:1733","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2690:2566","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2241:97","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"SmallVec","id":"0:118:1733","args":{"angle_bracketed":{"args":[{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2249:1683"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:471":{"id":"0:471","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[2112,0],"end":[2116,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Array","id":"0:327:1798","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"array":{"type":{"generic":"T"},"len":"23"}},"items":["0:474:1802","0:475:1367"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12046:2009":{"id":"1:12046:2009","crate_id":1,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"1:51664:418","self::pattern":"1:11715:6331"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11720:3808","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:134:1897":{"id":"0:134:1897","crate_id":0,"name":"is_empty","span":{"filename":"src/lib.rs","begin":[740,4],"end":[742,5]},"visibility":"public","docs":"Returns `true` if the vector is empty","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12019:18214":{"id":"1:12019:18214","crate_id":1,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n# Panics\n\nPanics if `index > self.len()`.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"1:12017:18213"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:7212:2185":{"id":"1:7212:2185","crate_id":1,"name":"IntoIter","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"I"}}}},"0:293:587":{"id":"0:293:587","crate_id":0,"name":"drop","span":{"filename":"src/lib.rs","begin":[1926,4],"end":[1928,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:410:1367":{"id":"0:410:1367","crate_id":0,"name":"size","span":{"filename":"src/lib.rs","begin":[2112,0],"end":[2116,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:38:1728":{"id":"0:38:1728","crate_id":0,"name":"smallvec","span":{"filename":"src/lib.rs","begin":[168,0],"end":[185,1]},"visibility":"public","docs":"Creates a [`SmallVec`] containing the arguments.\n\n`smallvec!` allows `SmallVec`s to be defined with the same syntax as array expressions.\nThere are two forms of this macro:\n\n- Create a [`SmallVec`] containing a given list of elements:\n\n```\n# #[macro_use] extern crate smallvec;\n# use smallvec::SmallVec;\n# fn main() {\nlet v: SmallVec<[_; 128]> = smallvec![1, 2, 3];\nassert_eq!(v[0], 1);\nassert_eq!(v[1], 2);\nassert_eq!(v[2], 3);\n# }\n```\n\n- Create a [`SmallVec`] from a given element and size:\n\n```\n# #[macro_use] extern crate smallvec;\n# use smallvec::SmallVec;\n# fn main() {\nlet v: SmallVec<[_; 0x8000]> = smallvec![1; 3];\nassert_eq!(v, SmallVec::from_buf([1, 1, 1]));\n# }\n```\n\nNote that unlike array expressions this syntax supports all elements\nwhich implement [`Clone`] and the number of elements doesn't have to be\na constant.\n\nThis will use `clone` to duplicate an expression, so one should be careful\nusing this with types having a nonstandard `Clone` implementation. For\nexample, `smallvec![Rc::new(1); 5]` will create a vector of five references\nto the same boxed integer value, not five references pointing to independently\nboxed integers.","links":{"`SmallVec`":"0:118:1733","`Clone`":"1:2263:105"},"attrs":["#[macro_export]"],"deprecation":null,"inner":{"macro":"macro_rules! smallvec {\n    (@one $x:expr) => { ... };\n    ($elem:expr; $n:expr) => { ... };\n    ($($x:expr),*$(,)*) => { ... };\n}"}},"0:48":{"id":"0:48","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[300,0],"end":[304,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[allow(deprecated)]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2514:133","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"LayoutError","id":"1:44329:2442","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"CollectionAllocErr","id":"0:349:1772","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:49:696"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:7209-0:280:2185":{"id":"b:1:7209-0:280:2185","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"1:7321:159","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"1:7205:152","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:280:2185","args":{"angle_bracketed":{"args":[{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:7211:1802","1:7212:2185","1:7213:787"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"I"}}}},"0:315":{"id":"0:315","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[2002,0],"end":[2008,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Array","id":"0:327:1798","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"1:7205:152","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"resolved_path":{"name":"SmallVec","id":"0:118:1733","args":{"angle_bracketed":{"args":[{"type":{"generic":"A"}}],"bindings":[]}}}}}},"items":["0:318:2185","0:319:1802","0:320:787"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12131:18237":{"id":"1:12131:18237","crate_id":1,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"1:11676:127","`FromStr`":"1:11675:6058"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"1:41497:210","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"FromStr","id":"1:11675:6058","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"1:11675:6058","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:615:1367":{"id":"0:615:1367","crate_id":0,"name":"size","span":{"filename":"src/lib.rs","begin":[2112,0],"end":[2116,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:2546:696":{"id":"1:2546:696","crate_id":1,"name":"from","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["t",{"primitive":"never"}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3319-0:349:1772":{"id":"b:1:3319-0:349:1772","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:2690:2566","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3317:69","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"CollectionAllocErr","id":"0:349:1772","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3321:1496"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:247:1945":{"id":"0:247:1945","crate_id":0,"name":"extend","span":{"filename":"src/lib.rs","begin":[1760,4],"end":[1781,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["iterable",{"generic":"I"}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"1:7205:152","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"A"},"trait":{"name":"","id":"0:327:1798","args":null}}}}}}]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:401":{"id":"0:401","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[2112,0],"end":[2116,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Array","id":"0:327:1798","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"array":{"type":{"generic":"T"},"len":"9"}},"items":["0:404:1802","0:405:1367"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:405:1367":{"id":"0:405:1367","crate_id":0,"name":"size","span":{"filename":"src/lib.rs","begin":[2112,0],"end":[2116,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:619:1802":{"id":"0:619:1802","crate_id":0,"name":"Item","span":{"filename":"src/lib.rs","begin":[2112,0],"end":[2116,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"0:531":{"id":"0:531","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[2112,0],"end":[2116,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Array","id":"0:327:1798","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"array":{"type":{"generic":"T"},"len":"96"}},"items":["0:534:1802","0:535:1367"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:148:1929":{"id":"0:148:1929","crate_id":0,"name":"reserve","span":{"filename":"src/lib.rs","begin":[943,4],"end":[945,5]},"visibility":"public","docs":"Reserve capacity for `additional` more elements to be inserted.\n\nMay reserve more space to avoid frequent reallocations.\n\nPanics if the capacity computation overflows `usize`.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["additional",{"primitive":"usize"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12099:18226":{"id":"1:12099:18226","crate_id":1,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"1:11715:6331","`DoubleEndedIterator`":"1:7243:121","prim@char":"1:51664:418","str::match_indices":"1:12096:18225"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatchIndices","id":"1:43490:4079","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11720:3808","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:11720:3808","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11735:6337","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:172:2017":{"id":"0:172:2017","crate_id":0,"name":"into_boxed_slice","span":{"filename":"src/lib.rs","begin":[1201,4],"end":[1203,5]},"visibility":"public","docs":"Converts a `SmallVec` into a `Box<[T]>` without reallocating if the `SmallVec` has already spilled\nonto the heap.\n\nNote that this will drop any excess capacity.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Box","id":"4:273:1682","args":{"angle_bracketed":{"args":[{"type":{"slice":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"A"},"trait":{"name":"","id":"0:327:1798","args":null}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:84:1807":{"id":"0:84:1807","crate_id":0,"name":"next_back","span":{"filename":"src/lib.rs","begin":[372,4],"end":[376,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41353:181","args":{"angle_bracketed":{"args":[{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"T"},"trait":{"name":"","id":"0:327:1798","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:406":{"id":"0:406","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[2112,0],"end":[2116,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Array","id":"0:327:1798","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"array":{"type":{"generic":"T"},"len":"10"}},"items":["0:409:1802","0:410:1367"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:2555:128":{"id":"1:2555:128","crate_id":1,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Infallible","id":"1:31982:6187","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"0:124:943":{"id":"0:124:943","crate_id":0,"name":"new","span":{"filename":"src/lib.rs","begin":[566,4],"end":[577,5]},"visibility":"public","docs":"Construct an empty vector","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"SmallVec","id":"0:118:1733","args":{"angle_bracketed":{"args":[{"type":{"generic":"A"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12093:18224":{"id":"1:12093:18224","crate_id":1,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"1:11715:6331","`DoubleEndedIterator`":"1:7243:121","prim@char":"1:51664:418","str::matches":"1:12090:2404"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatches","id":"1:43544:4081","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11720:3808","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:11720:3808","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11735:6337","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:605:1367":{"id":"0:605:1367","crate_id":0,"name":"size","span":{"filename":"src/lib.rs","begin":[2112,0],"end":[2116,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:49:696":{"id":"0:49:696","crate_id":0,"name":"from","span":{"filename":"src/lib.rs","begin":[301,4],"end":[303,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["_",{"resolved_path":{"name":"LayoutErr","id":"1:12592:1680","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:46":{"id":"0:46","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[293,0],"end":[297,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Display","id":"1:9150:120","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"CollectionAllocErr","id":"0:349:1772","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:47:670"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:219":{"id":"0:219","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1695,0],"end":[1710,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Array","id":"0:327:1798","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"A"},"trait":{"name":"","id":"0:327:1798","args":null}}},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2263:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2514:133","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"slice":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"A"},"trait":{"name":"Array","id":"0:327:1798","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"SmallVec","id":"0:118:1733","args":{"angle_bracketed":{"args":[{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:222:696"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:589:1802":{"id":"0:589:1802","crate_id":0,"name":"Item","span":{"filename":"src/lib.rs","begin":[2112,0],"end":[2116,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"1:12110:18232":{"id":"1:12110:18232","crate_id":1,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"1:51664:418","self::pattern":"1:11715:6331"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11720:3808","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:11720:3808","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"1:11740:6336","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:155:1981":{"id":"0:155:1981","crate_id":0,"name":"as_mut_slice","span":{"filename":"src/lib.rs","begin":[1034,4],"end":[1036,5]},"visibility":"public","docs":"Extracts a mutable slice of the entire vector.\n\nEquivalent to `&mut s[..]`.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"A"},"trait":{"name":"","id":"0:327:1798","args":null}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:249":{"id":"0:249","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1784,0],"end":[1791,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Array","id":"0:327:1798","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"A"},"trait":{"name":"","id":"0:327:1798","args":null}}},"bounds":[{"trait_bound":{"trait":{"name":"fmt::Debug","id":"1:9145:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:9145:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"SmallVec","id":"0:118:1733","args":{"angle_bracketed":{"args":[{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:251:670"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:620:1367":{"id":"0:620:1367","crate_id":0,"name":"size","span":{"filename":"src/lib.rs","begin":[2112,0],"end":[2116,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:216":{"id":"0:216","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1584,0],"end":[1589,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Array","id":"0:327:1798","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2244:98","args":{"angle_bracketed":{"args":[{"type":{"slice":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"A"},"trait":{"name":"Array","id":"0:327:1798","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"SmallVec","id":"0:118:1733","args":{"angle_bracketed":{"args":[{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:218:2143"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12069:17025":{"id":"1:12069:17025","crate_id":1,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"1:11715:6331","`DoubleEndedIterator`":"1:7243:121","prim@char":"1:51664:418","str::split":"1:12063:17022"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplit","id":"1:43340:2661","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11720:3808","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:11720:3808","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11735:6337","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12119:17034":{"id":"1:12119:17034","crate_id":1,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:51664:418","self::pattern":"1:11715:6331"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["suffix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41353:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11720:3808","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:11720:3808","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11735:6337","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:139:1913":{"id":"0:139:1913","crate_id":0,"name":"drain","span":{"filename":"src/lib.rs","begin":[800,4],"end":[834,5]},"visibility":"public","docs":"Creates a draining iterator that removes the specified range in the vector\nand yields the removed items.\n\nNote 1: The element range is removed even if the iterator is only\npartially consumed or not consumed at all.\n\nNote 2: It is unspecified how many elements are removed from the vector\nif the `Drain` value is leaked.\n\n# Panics\n\nPanics if the starting point is greater than the end point or if\nthe end point is greater than the length of the vector.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["range",{"generic":"R"}]],"output":{"resolved_path":{"name":"Drain","id":"0:57:1796","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"A"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"R"},"bounds":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3078:1690","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:515:1367":{"id":"0:515:1367","crate_id":0,"name":"size","span":{"filename":"src/lib.rs","begin":[2112,0],"end":[2116,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:2700:228-0:118:1733":{"id":"a:1:2700:228-0:118:1733","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2700:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2700:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"SmallVec","id":"0:118:1733","args":{"angle_bracketed":{"args":[{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:12052:17032":{"id":"1:12052:17032","crate_id":1,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"1:51664:418","self::pattern":"1:11715:6331"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11720:3808","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:11720:3808","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11735:6337","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:218:2143":{"id":"0:218:2143","crate_id":0,"name":"borrow_mut","span":{"filename":"src/lib.rs","begin":[1586,4],"end":[1588,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"A"},"trait":{"name":"","id":"0:327:1798","args":null}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:536":{"id":"0:536","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[2112,0],"end":[2116,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Array","id":"0:327:1798","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"array":{"type":{"generic":"T"},"len":"128"}},"items":["0:539:1802","0:540:1367"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:555:1367":{"id":"0:555:1367","crate_id":0,"name":"size","span":{"filename":"src/lib.rs","begin":[2112,0],"end":[2116,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:2540:2137":{"id":"1:2540:2137","crate_id":1,"name":"into","span":null,"visibility":"default","docs":"Calls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of\n<code>[From]&lt;T&gt; for U</code> chooses to do.","links":{"From":"1:2514:133"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"U"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:519:1802":{"id":"0:519:1802","crate_id":0,"name":"Item","span":{"filename":"src/lib.rs","begin":[2112,0],"end":[2116,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"0:154:1803":{"id":"0:154:1803","crate_id":0,"name":"as_slice","span":{"filename":"src/lib.rs","begin":[1027,4],"end":[1029,5]},"visibility":"public","docs":"Extracts a slice containing the entire vector.\n\nEquivalent to `&s[..]`.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"A"},"trait":{"name":"","id":"0:327:1798","args":null}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12015:1897":{"id":"1:12015:1897","crate_id":1,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:318:2185":{"id":"0:318:2185","crate_id":0,"name":"IntoIter","span":{"filename":"src/lib.rs","begin":[2003,4],"end":[2003,45]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Iter","id":"1:9964:1801","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"A"},"trait":{"name":"Array","id":"0:327:1798","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}}}}},"0:203:551":{"id":"0:203:551","crate_id":0,"name":"deref","span":{"filename":"src/lib.rs","begin":[1545,4],"end":[1550,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"A"},"trait":{"name":"","id":"0:327:1798","args":null}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:234":{"id":"0:234","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1734,0],"end":[1738,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Array","id":"0:327:1798","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"I","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:9816:222","args":{"angle_bracketed":{"args":[{"type":{"slice":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"A"},"trait":{"name":"","id":"0:327:1798","args":null}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"IndexMut","id":"1:2984:2172","args":{"angle_bracketed":{"args":[{"type":{"generic":"I"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"SmallVec","id":"0:118:1733","args":{"angle_bracketed":{"args":[{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:237:773"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12038:3823":{"id":"1:12038:3823","crate_id":1,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:51664:418"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chars","id":"1:43292:3815","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:520:1367":{"id":"0:520:1367","crate_id":0,"name":"size","span":{"filename":"src/lib.rs","begin":[2112,0],"end":[2116,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:360:1367":{"id":"0:360:1367","crate_id":0,"name":"size","span":{"filename":"src/lib.rs","begin":[2112,0],"end":[2116,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:346":{"id":"0:346","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[2124,0],"end":[2132,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Array","id":"0:327:1798","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"A"},"trait":{"name":"","id":"0:327:1798","args":null}}},"bounds":[{"trait_bound":{"trait":{"name":"Copy","id":"1:2695:109","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"ToSmallVec","id":"0:343:2245","args":{"angle_bracketed":{"args":[{"type":{"generic":"A"}}],"bindings":[]}}},"for":{"slice":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"A"},"trait":{"name":"","id":"0:327:1798","args":null}}}},"items":["0:348:2247"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:64":{"id":"0:64","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[342,0],"end":[349,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[{"outlives":"'a"},{"trait_bound":{"trait":{"name":"Array","id":"0:327:1798","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"T"},"trait":{"name":"","id":"0:327:1798","args":null}}},"bounds":[{"trait_bound":{"trait":{"name":"fmt::Debug","id":"1:9145:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:9145:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Drain","id":"0:57:1796","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:67:670"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2547-0:349:1772":{"id":"b:1:2547-0:349:1772","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2521:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2517:238","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"CollectionAllocErr","id":"0:349:1772","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2550:128","1:2551:1483"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:229":{"id":"0:229","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1726,0],"end":[1732,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Array","id":"0:327:1798","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"I","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:9816:222","args":{"angle_bracketed":{"args":[{"type":{"slice":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"A"},"trait":{"name":"","id":"0:327:1798","args":null}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Index","id":"1:2980:2171","args":{"angle_bracketed":{"args":[{"type":{"generic":"I"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"SmallVec","id":"0:118:1733","args":{"angle_bracketed":{"args":[{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:232:186","0:233:772"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:2683:220-0:280:2185":{"id":"a:1:2683:220-0:280:2185","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"A"},"trait":{"name":"Array","id":"0:327:1798","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:2683:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:2683:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:280:2185","args":{"angle_bracketed":{"args":[{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:241":{"id":"0:241","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1750,0],"end":[1757,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Array","id":"0:327:1798","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"FromIterator","id":"1:7201:134","args":{"angle_bracketed":{"args":[{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"A"},"trait":{"name":"Array","id":"0:327:1798","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"SmallVec","id":"0:118:1733","args":{"angle_bracketed":{"args":[{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:243:699"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:182:2044":{"id":"0:182:2044","crate_id":0,"name":"dedup_by_key","span":{"filename":"src/lib.rs","begin":[1290,4],"end":[1296,5]},"visibility":"public","docs":"Removes consecutive elements that map to the same key.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["key",{"generic":"F"}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:2928:2026","args":{"parenthesized":{"inputs":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"A"},"trait":{"name":"","id":"0:327:1798","args":null}}}}}],"output":{"generic":"K"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"PartialEq","id":"1:2311:188","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:352:1776":{"id":"0:352:1776","crate_id":0,"name":"AllocErr","span":{"filename":"src/lib.rs","begin":[287,4],"end":[290,5]},"visibility":"default","docs":"The allocator return an error","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":{"struct":{"fields":["0:353:1778"],"fields_stripped":false}},"discriminant":null}}},"0:301:1807":{"id":"0:301:1807","crate_id":0,"name":"next_back","span":{"filename":"src/lib.rs","begin":[1956,4],"end":[1965,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41353:181","args":{"angle_bracketed":{"args":[{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"A"},"trait":{"name":"","id":"0:327:1798","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:486":{"id":"0:486","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[2112,0],"end":[2116,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Array","id":"0:327:1798","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"array":{"type":{"generic":"T"},"len":"26"}},"items":["0:489:1802","0:490:1367"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:3319-0:57:1796":{"id":"b:1:3319-0:57:1796","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:2690:2566","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3317:69","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Drain","id":"0:57:1796","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:3321:1496"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:57:1796":{"id":"0:57:1796","crate_id":0,"name":"Drain","span":{"filename":"src/lib.rs","begin":[335,0],"end":[340,1]},"visibility":"public","docs":"An iterator that removes the items from a `SmallVec` and yields them by value.\n\nReturned from [`SmallVec::drain`][1].\n\n[1]: struct.SmallVec.html#method.drain","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[{"outlives":"'a"},{"trait_bound":{"trait":{"name":"Array","id":"0:327:1798","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"impls":["a:1:8252:2779-0:57:1796","a:1:8253:2778-0:57:1796","a:1:2740:2679-0:57:1796","b:1:7209-0:57:1796","b:1:2247-0:57:1796","b:1:3319-0:57:1796","b:1:2552-0:57:1796","b:1:2250-0:57:1796","b:1:2541-0:57:1796","b:1:2547-0:57:1796","b:1:2537-0:57:1796","0:93","0:71","0:90","0:81","0:74","0:68","0:86","0:64"]}}},"0:415:1367":{"id":"0:415:1367","crate_id":0,"name":"size","span":{"filename":"src/lib.rs","begin":[2112,0],"end":[2116,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:450:1367":{"id":"0:450:1367","crate_id":0,"name":"size","span":{"filename":"src/lib.rs","begin":[2112,0],"end":[2116,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"4:680:11795":{"id":"4:680:11795","crate_id":4,"name":"to_owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:260:422":{"id":"0:260:422","crate_id":0,"name":"clone","span":{"filename":"src/lib.rs","begin":[1833,4],"end":[1835,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SmallVec","id":"0:118:1733","args":{"angle_bracketed":{"args":[{"type":{"generic":"A"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:436":{"id":"0:436","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[2112,0],"end":[2116,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Array","id":"0:327:1798","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"array":{"type":{"generic":"T"},"len":"16"}},"items":["0:439:1802","0:440:1367"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:198:2132":{"id":"0:198:2132","crate_id":0,"name":"resize","span":{"filename":"src/lib.rs","begin":[1506,4],"end":[1514,5]},"visibility":"public","docs":"Resizes the vector so that its length is equal to `len`.\n\nIf `len` is less than the current length, the vector simply truncated.\n\nIf `len` is greater than the current length, `value` is appended to the\nvector until its length equals `len`.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["len",{"primitive":"usize"}],["value",{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"A"},"trait":{"name":"","id":"0:327:1798","args":null}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:252":{"id":"0:252","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1793,0],"end":[1798,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Array","id":"0:327:1798","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"1:2588:116","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"SmallVec","id":"0:118:1733","args":{"angle_bracketed":{"args":[{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:254:60"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:481":{"id":"0:481","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[2112,0],"end":[2116,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Array","id":"0:327:1798","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"array":{"type":{"generic":"T"},"len":"25"}},"items":["0:484:1802","0:485:1367"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:147:1951":{"id":"0:147:1951","crate_id":0,"name":"try_grow","span":{"filename":"src/lib.rs","begin":[896,4],"end":[935,5]},"visibility":"public","docs":"Re-allocate to set the capacity to `max(new_cap, inline_size())`.\n\nPanics if `new_cap` is less than the vector's length","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["new_cap",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Result","id":"1:41497:210","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}},{"type":{"resolved_path":{"name":"CollectionAllocErr","id":"0:349:1772","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12040:3765":{"id":"1:12040:3765","crate_id":1,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"1:43308:4015","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:2556:1482":{"id":"1:2556:1482","crate_id":1,"name":"try_from","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["value",{"generic":"U"}]],"output":{"resolved_path":{"name":"Result","id":"1:41497:210","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"T"},"trait":{"name":"TryFrom","id":"1:2521:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:130:1817":{"id":"0:130:1817","crate_id":0,"name":"set_len","span":{"filename":"src/lib.rs","begin":[701,4],"end":[704,5]},"visibility":"public","docs":"Sets the length of a vector.\n\nThis will explicitly set the size of the vector, without actually\nmodifying its buffers, so it is up to the caller to ensure that the\nvector is actually the specified size.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["new_len",{"primitive":"usize"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:251:670":{"id":"0:251:670","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[1788,4],"end":[1790,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:9120:132","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:9109:210","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:193:2120":{"id":"0:193:2120","crate_id":0,"name":"from_slice","span":{"filename":"src/lib.rs","begin":[1441,4],"end":[1465,5]},"visibility":"public","docs":"Copy the elements from a slice into a new `SmallVec`.\n\nFor slices of `Copy` types, this is more efficient than `SmallVec::from(slice)`.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["slice",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"A"},"trait":{"name":"","id":"0:327:1798","args":null}}}}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:599:1802":{"id":"0:599:1802","crate_id":0,"name":"Item","span":{"filename":"src/lib.rs","begin":[2112,0],"end":[2116,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"1:12136:16903":{"id":"1:12136:16903","crate_id":1,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:93":{"id":"0:93","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[388,0],"end":[411,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[{"outlives":"'a"},{"trait_bound":{"trait":{"name":"Array","id":"0:327:1798","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Drop","id":"1:2921:1809","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Drain","id":"0:57:1796","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:96:587"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:348:2247":{"id":"0:348:2247","crate_id":0,"name":"to_smallvec","span":{"filename":"src/lib.rs","begin":[2129,4],"end":[2131,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SmallVec","id":"0:118:1733","args":{"angle_bracketed":{"args":[{"type":{"generic":"A"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12045:13342":{"id":"1:12045:13342","crate_id":1,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EncodeUtf16","id":"1:43614:3822","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:496":{"id":"0:496","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[2112,0],"end":[2116,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Array","id":"0:327:1798","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"array":{"type":{"generic":"T"},"len":"28"}},"items":["0:499:1802","0:500:1367"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12116:17033":{"id":"1:12116:17033","crate_id":1,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:51664:418","self::pattern":"1:11715:6331"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["prefix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41353:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11720:3808","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:2740:2679-0:280:2185":{"id":"a:1:2740:2679-0:280:2185","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"1:2740:2679","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:2740:2679","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:280:2185","args":{"angle_bracketed":{"args":[{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:8253:2778-0:349:1772":{"id":"a:1:8253:2778-0:349:1772","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:8253:2778","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"CollectionAllocErr","id":"0:349:1772","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:420:1367":{"id":"0:420:1367","crate_id":0,"name":"size","span":{"filename":"src/lib.rs","begin":[2112,0],"end":[2116,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:278":{"id":"0:278","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1894,0],"end":[1894,65]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Array","id":"0:327:1798","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"A"},"trait":{"name":"","id":"0:327:1798","args":null}}},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:2683:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:2683:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"SmallVec","id":"0:118:1733","args":{"angle_bracketed":{"args":[{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:258":{"id":"0:258","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1828,0],"end":[1851,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Array","id":"0:327:1798","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"A"},"trait":{"name":"","id":"0:327:1798","args":null}}},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2263:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2263:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"SmallVec","id":"0:118:1733","args":{"angle_bracketed":{"args":[{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:260:422","0:261:424"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:440:1367":{"id":"0:440:1367","crate_id":0,"name":"size","span":{"filename":"src/lib.rs","begin":[2112,0],"end":[2116,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:545:1367":{"id":"0:545:1367","crate_id":0,"name":"size","span":{"filename":"src/lib.rs","begin":[2112,0],"end":[2116,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:386":{"id":"0:386","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[2112,0],"end":[2116,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Array","id":"0:327:1798","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"array":{"type":{"generic":"T"},"len":"6"}},"items":["0:389:1802","0:390:1367"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:135:1792":{"id":"0:135:1792","crate_id":0,"name":"capacity","span":{"filename":"src/lib.rs","begin":[746,4],"end":[748,5]},"visibility":"public","docs":"The number of items the vector can hold without reallocating","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"4:5424":{"id":"4:5424","crate_id":4,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["4:5425:18900","4:5426:2561","4:5429:18901","4:5432:18902","4:5440:18903","4:5441:18904","4:5442:1686","4:5443:18121","4:5444:18122"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2541-0:349:1772":{"id":"b:1:2541-0:349:1772","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2514:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"CollectionAllocErr","id":"0:349:1772","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2543:696"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:8252:2779-0:349:1772":{"id":"a:1:8252:2779-0:349:1772","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:8252:2779","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"CollectionAllocErr","id":"0:349:1772","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:7209-0:57:1796":{"id":"b:1:7209-0:57:1796","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"1:7321:159","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"1:7205:152","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Drain","id":"0:57:1796","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:7211:1802","1:7212:2185","1:7213:787"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"I"}}}},"1:12030:2886":{"id":"1:12030:2886","crate_id":1,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:9816:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:9816:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:143:1933":{"id":"0:143:1933","crate_id":0,"name":"pop","span":{"filename":"src/lib.rs","begin":[854,4],"end":[864,5]},"visibility":"public","docs":"Remove an item from the end of the vector and return it, or None if empty.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41353:181","args":{"angle_bracketed":{"args":[{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"A"},"trait":{"name":"","id":"0:327:1798","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:469:1802":{"id":"0:469:1802","crate_id":0,"name":"Item","span":{"filename":"src/lib.rs","begin":[2112,0],"end":[2116,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"0:268":{"id":"0:268","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1865,0],"end":[1873,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Array","id":"0:327:1798","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"A"},"trait":{"name":"","id":"0:327:1798","args":null}}},"bounds":[{"trait_bound":{"trait":{"name":"PartialOrd","id":"1:2353:189","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["lt","gt","ge","le"],"trait":{"name":"PartialOrd","id":"1:2353:189","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"SmallVec","id":"0:118:1733","args":{"angle_bracketed":{"args":[{"type":{"generic":"A"}}],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"SmallVec","id":"0:118:1733","args":{"angle_bracketed":{"args":[{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:270:1039"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:370:1367":{"id":"0:370:1367","crate_id":0,"name":"size","span":{"filename":"src/lib.rs","begin":[2112,0],"end":[2116,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:396":{"id":"0:396","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[2112,0],"end":[2116,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Array","id":"0:327:1798","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"array":{"type":{"generic":"T"},"len":"8"}},"items":["0:399:1802","0:400:1367"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:550:1367":{"id":"0:550:1367","crate_id":0,"name":"size","span":{"filename":"src/lib.rs","begin":[2112,0],"end":[2116,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:495:1367":{"id":"0:495:1367","crate_id":0,"name":"size","span":{"filename":"src/lib.rs","begin":[2112,0],"end":[2116,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2547-0:57:1796":{"id":"b:1:2547-0:57:1796","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2521:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2517:238","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Drain","id":"0:57:1796","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:2550:128","1:2551:1483"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:374:1802":{"id":"0:374:1802","crate_id":0,"name":"Item","span":{"filename":"src/lib.rs","begin":[2112,0],"end":[2116,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"1:12028:2885":{"id":"1:12028:2885","crate_id":1,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"1:41355:179"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"1:41353:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:9816:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:9816:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:232:186":{"id":"0:232:186","crate_id":0,"name":"Output","span":{"filename":"src/lib.rs","begin":[1727,4],"end":[1727,28]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:9816:222","args":{"angle_bracketed":{"args":[{"type":{"slice":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"A"},"trait":{"name":"Array","id":"0:327:1798","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}],"bindings":[]}}}}}}}},"0:596":{"id":"0:596","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[2112,0],"end":[2116,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Array","id":"0:327:1798","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"array":{"type":{"generic":"T"},"len":"131072"}},"items":["0:599:1802","0:600:1367"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:320:787":{"id":"0:320:787","crate_id":0,"name":"into_iter","span":{"filename":"src/lib.rs","begin":[2005,4],"end":[2007,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"qualified_path":{"name":"IntoIter","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"1:7205:152","args":null}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:294":{"id":"0:294","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1931,0],"end":[1952,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Array","id":"0:327:1798","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["cmp_by","unzip","cloned","rposition","fold","collect_into","flat_map","enumerate","step_by","lt","partial_cmp_by","copied","max_by_key","reduce","partition","flatten","position","peekable","collect","chain","size_hint","eq_by","cycle","max_by","try_reduce","cmp","partition_in_place","fuse","eq","skip_while","ne","intersperse","gt","next_chunk","partial_cmp","is_sorted","array_chunks","count","min_by_key","find","le","is_partitioned","inspect","map","take_while","intersperse_with","last","ge","is_sorted_by","sum","min_by","find_map","try_fold","by_ref","map_while","all","filter","advance_by","zip","max","is_sorted_by_key","product","rev","try_find","any","try_for_each","try_collect","scan","filter_map","skip","nth","for_each","take","min","__iterator_get_unchecked"],"trait":{"name":"Iterator","id":"1:7321:159","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:280:2185","args":{"angle_bracketed":{"args":[{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:296:1802","0:297:957","0:298:1806"],"negative":false,"synthetic":false,"blanket_impl":null}}},"4:5442:1686":{"id":"4:5442:1686","crate_id":4,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"4:7280:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"4:7280:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:297:957":{"id":"0:297:957","crate_id":0,"name":"next","span":{"filename":"src/lib.rs","begin":[1935,4],"end":[1945,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41353:181","args":{"angle_bracketed":{"args":[{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"A"},"trait":{"name":"","id":"0:327:1798","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12059:2895":{"id":"1:12059:2895","crate_id":1,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"1:41355:179","prim@char":"1:51664:418","self::pattern":"1:11715:6331"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41353:181","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11720:3808","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:11720:3808","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11735:6337","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2541-0:118:1733":{"id":"b:1:2541-0:118:1733","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2514:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"SmallVec","id":"0:118:1733","args":{"angle_bracketed":{"args":[{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2543:696"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2250-0:280:2185":{"id":"b:1:2250-0:280:2185","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2690:2566","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2244:98","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:280:2185","args":{"angle_bracketed":{"args":[{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2252:2143"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:225:696":{"id":"0:225:696","crate_id":0,"name":"from","span":{"filename":"src/lib.rs","begin":[1714,4],"end":[1716,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["vec",{"resolved_path":{"name":"Vec","id":"4:6717:244","args":{"angle_bracketed":{"args":[{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"A"},"trait":{"name":"","id":"0:327:1798","args":null}}}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"SmallVec","id":"0:118:1733","args":{"angle_bracketed":{"args":[{"type":{"generic":"A"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:566":{"id":"0:566","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[2112,0],"end":[2116,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Array","id":"0:327:1798","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"array":{"type":{"generic":"T"},"len":"4096"}},"items":["0:569:1802","0:570:1367"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12125:18235":{"id":"1:12125:18235","crate_id":1,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:51664:418","self::pattern":"1:11715:6331"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11720:3808","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12072:18220":{"id":"1:12072:18220","crate_id":1,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"1:11715:6331","str::split":"1:12063:17022","prim@char":"1:51664:418","`DoubleEndedIterator`":"1:7243:121","str::rsplit_terminator":"1:12075:18221"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitTerminator","id":"1:43372:4076","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11720:3808","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:228:696":{"id":"0:228:696","crate_id":0,"name":"from","span":{"filename":"src/lib.rs","begin":[1721,4],"end":[1723,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["array",{"generic":"A"}]],"output":{"resolved_path":{"name":"SmallVec","id":"0:118:1733","args":{"angle_bracketed":{"args":[{"type":{"generic":"A"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:207":{"id":"0:207","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1563,0],"end":[1568,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Array","id":"0:327:1798","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"AsRef","id":"1:2505:75","args":{"angle_bracketed":{"args":[{"type":{"slice":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"A"},"trait":{"name":"Array","id":"0:327:1798","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"SmallVec","id":"0:118:1733","args":{"angle_bracketed":{"args":[{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:209:315"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:564:1802":{"id":"0:564:1802","crate_id":0,"name":"Item","span":{"filename":"src/lib.rs","begin":[2112,0],"end":[2116,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"0:601":{"id":"0:601","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[2112,0],"end":[2116,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Array","id":"0:327:1798","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"array":{"type":{"generic":"T"},"len":"262144"}},"items":["0:604:1802","0:605:1367"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:395:1367":{"id":"0:395:1367","crate_id":0,"name":"size","span":{"filename":"src/lib.rs","begin":[2112,0],"end":[2116,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:484:1802":{"id":"0:484:1802","crate_id":0,"name":"Item","span":{"filename":"src/lib.rs","begin":[2112,0],"end":[2116,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"b:1:2541-0:57:1796":{"id":"b:1:2541-0:57:1796","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2514:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Drain","id":"0:57:1796","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:2543:696"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"4:5688:1460":{"id":"4:5688:1460","crate_id":4,"name":"to_string","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"4:7280:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:200":{"id":"0:200","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1542,0],"end":[1551,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Array","id":"0:327:1798","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Deref","id":"1:2897:117","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"SmallVec","id":"0:118:1733","args":{"angle_bracketed":{"args":[{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:202:230","0:203:551"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:2551:1483":{"id":"1:2551:1483","crate_id":1,"name":"try_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Result","id":"1:41497:210","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"1:2521:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}}},"paths":{"1:42617:2491":{"crate_id":1,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"1:7168:2514":{"crate_id":1,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"1:21962:3859":{"crate_id":1,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"1:39920:4005":{"crate_id":1,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"1:43149:2670":{"crate_id":1,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"4:2128:3604":{"crate_id":4,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"1:3141:2600":{"crate_id":1,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"4:3327:2476":{"crate_id":4,"path":["alloc","collections","btree","set","ExtractIf"],"kind":"struct"},"1:40236:2520":{"crate_id":1,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"1:21453:15786":{"crate_id":1,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"1:1013:1685":{"crate_id":1,"path":["core","hint","unreachable_unchecked"],"kind":"function"},"1:2311:188":{"crate_id":1,"path":["core","cmp","PartialEq"],"kind":"trait"},"1:21797:5529":{"crate_id":1,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"1:0:496":{"crate_id":1,"path":["core"],"kind":"module"},"1:47735:4214":{"crate_id":1,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"1:51676:747":{"crate_id":1,"path":["core","i8"],"kind":"primitive"},"1:43586:4083":{"crate_id":1,"path":["core","str","iter","LinesAny"],"kind":"struct"},"1:8820:670":{"crate_id":1,"path":["core","fmt"],"kind":"module"},"4:7062:16866":{"crate_id":4,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"1:39198:202":{"crate_id":1,"path":["core","ops","range","RangeTo"],"kind":"struct"},"1:43614:3822":{"crate_id":1,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"1:9156:2954":{"crate_id":1,"path":["core","fmt","LowerHex"],"kind":"trait"},"4:6761:3623":{"crate_id":4,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"4:1461:3731":{"crate_id":4,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"1:40092:13409":{"crate_id":1,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"4:6156:1570":{"crate_id":4,"path":["alloc","vec"],"kind":"module"},"1:42642:145":{"crate_id":1,"path":["core","hash","sip","Hasher"],"kind":"struct"},"1:22237:178":{"crate_id":1,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"1:46025:4152":{"crate_id":1,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"4:892:1801":{"crate_id":4,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"1:45609:4138":{"crate_id":1,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"1:2316:125":{"crate_id":1,"path":["core","cmp","Eq"],"kind":"trait"},"1:43188:2669":{"crate_id":1,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"1:45933:4148":{"crate_id":1,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"1:44057:5599":{"crate_id":1,"path":["core","str","IsWhitespace"],"kind":"struct"},"1:40432:2542":{"crate_id":1,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"1:1466:1688":{"crate_id":1,"path":["core","mem"],"kind":"module"},"1:2816:2587":{"crate_id":1,"path":["core","ops","bit","BitOr"],"kind":"trait"},"1:42857:4066":{"crate_id":1,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"1:44065:5601":{"crate_id":1,"path":["core","str","IsNotEmpty"],"kind":"struct"},"1:2795:2582":{"crate_id":1,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"1:4380:3631":{"crate_id":1,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"4:673:231":{"crate_id":4,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"1:43220:2666":{"crate_id":1,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"1:4186:2962":{"crate_id":1,"path":["core","cell","Cell"],"kind":"struct"},"4:2687:5579":{"crate_id":4,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"1:2511:149":{"crate_id":1,"path":["core","convert","Into"],"kind":"trait"},"1:2353:189":{"crate_id":1,"path":["core","cmp","PartialOrd"],"kind":"trait"},"1:3151:234":{"crate_id":1,"path":["core","ops","try_trait","Try"],"kind":"trait"},"1:45356:4128":{"crate_id":1,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"1:2821:2588":{"crate_id":1,"path":["core","ops","bit","BitXor"],"kind":"trait"},"1:49633:11420":{"crate_id":1,"path":["core","core_simd","swizzle","Which"],"kind":"enum"},"1:45508:4134":{"crate_id":1,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"1:44312:161":{"crate_id":1,"path":["core","alloc","layout","Layout"],"kind":"struct"},"1:44238:205":{"crate_id":1,"path":["core","future","ready","Ready"],"kind":"struct"},"1:12592:1680":{"crate_id":1,"path":["core","alloc","layout","LayoutErr"],"kind":"typedef"},"1:47697:4212":{"crate_id":1,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"1:40108:4024":{"crate_id":1,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"1:40227:2519":{"crate_id":1,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"1:22270:175":{"crate_id":1,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"1:2740:2679":{"crate_id":1,"path":["core","marker","Unpin"],"kind":"trait"},"1:51664:418":{"crate_id":1,"path":["core","char"],"kind":"primitive"},"1:20739:11411":{"crate_id":1,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"1:43526:4080":{"crate_id":1,"path":["core","str","iter","Matches"],"kind":"struct"},"4:5062:3616":{"crate_id":4,"path":["alloc","rc","Weak"],"kind":"struct"},"1:40446:2543":{"crate_id":1,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"1:41291:4045":{"crate_id":1,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"1:43128:2663":{"crate_id":1,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"1:44354:4125":{"crate_id":1,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"4:7121:2185":{"crate_id":4,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"1:40306:2534":{"crate_id":1,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"1:41219:6271":{"crate_id":1,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"1:12505:107":{"crate_id":1,"path":["core","task","wake","Context"],"kind":"struct"},"1:40274:2531":{"crate_id":1,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"1:2980:2171":{"crate_id":1,"path":["core","ops","index","Index"],"kind":"trait"},"4:7022:2185":{"crate_id":4,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"4:4941:3610":{"crate_id":4,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"1:43308:4015":{"crate_id":1,"path":["core","str","iter","Bytes"],"kind":"struct"},"1:8678:86":{"crate_id":1,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"4:3593:2189":{"crate_id":4,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"1:51686:792":{"crate_id":1,"path":["core","isize"],"kind":"primitive"},"1:9529:3638":{"crate_id":1,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"1:12360:192":{"crate_id":1,"path":["core","future","pending","Pending"],"kind":"struct"},"1:30003:6026":{"crate_id":1,"path":["core","num","FpCategory"],"kind":"enum"},"1:21117:11896":{"crate_id":1,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"1:44256:195":{"crate_id":1,"path":["core","task","poll","Poll"],"kind":"enum"},"4:7076:2185":{"crate_id":4,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"1:39154:198":{"crate_id":1,"path":["core","ops","range","Range"],"kind":"struct"},"1:44073:5603":{"crate_id":1,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"1:9152:2952":{"crate_id":1,"path":["core","fmt","Octal"],"kind":"trait"},"1:22501:171":{"crate_id":1,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"4:1669:3590":{"crate_id":4,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"4:5233:3590":{"crate_id":4,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"1:2931:2598":{"crate_id":1,"path":["core","ops","function","FnOnce"],"kind":"trait"},"1:20889:2615":{"crate_id":1,"path":["core","core_simd","elements","mut_ptr","SimdMutPtr","from_exposed_addr"],"kind":"foreign_type"},"1:45456:4132":{"crate_id":1,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"4:4362:3612":{"crate_id":4,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"1:43934:4115":{"crate_id":1,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"1:9160:194":{"crate_id":1,"path":["core","fmt","Pointer"],"kind":"trait"},"4:1520:3736":{"crate_id":4,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"4:1099:4916":{"crate_id":4,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"4:7213:3760":{"crate_id":4,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"4:2959:4890":{"crate_id":4,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"4:819:3594":{"crate_id":4,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"1:20604:16025":{"crate_id":1,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"1:40061:4022":{"crate_id":1,"path":["core","char","TryFromCharError"],"kind":"struct"},"1:44329:2442":{"crate_id":1,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"1:39338:3876":{"crate_id":1,"path":["core","array","TryFromSliceError"],"kind":"struct"},"1:1746:5582":{"crate_id":1,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"1:2928:2026":{"crate_id":1,"path":["core","ops","function","FnMut"],"kind":"trait"},"1:20587:16023":{"crate_id":1,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"4:2956:3722":{"crate_id":4,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"1:21872:3846":{"crate_id":1,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"4:4001:1796":{"crate_id":4,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"1:46831:4166":{"crate_id":1,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"1:51677:744":{"crate_id":1,"path":["core","i16"],"kind":"primitive"},"1:45903:4147":{"crate_id":1,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"1:5990:2545":{"crate_id":1,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"1:30322:13384":{"crate_id":1,"path":["core","ptr","alignment","AlignmentEnum32"],"kind":"enum"},"1:20994:11404":{"crate_id":1,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"1:43728:4088":{"crate_id":1,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"1:40629:2499":{"crate_id":1,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"1:2690:2566":{"crate_id":1,"path":["core","marker","Sized"],"kind":"trait"},"1:46177:4156":{"crate_id":1,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"1:42457:73":{"crate_id":1,"path":["core","fmt","Arguments"],"kind":"struct"},"1:43426:2659":{"crate_id":1,"path":["core","str","iter","SplitN"],"kind":"struct"},"1:41830:83":{"crate_id":1,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"1:41870:90":{"crate_id":1,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"1:3998:3776":{"crate_id":1,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"1:40122:6243":{"crate_id":1,"path":["core","ffi","c_char"],"kind":"typedef"},"1:11675:6058":{"crate_id":1,"path":["core","str","traits","FromStr"],"kind":"trait"},"1:22402:2649":{"crate_id":1,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"1:9806:11896":{"crate_id":1,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"1:2984:2172":{"crate_id":1,"path":["core","ops","index","IndexMut"],"kind":"trait"},"4:875:3596":{"crate_id":4,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"1:39957:4009":{"crate_id":1,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"4:2046:3738":{"crate_id":4,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"4:6600:2139":{"crate_id":4,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"1:43900:6353":{"crate_id":1,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"1:47671:4210":{"crate_id":1,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"1:40667:2506":{"crate_id":1,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"1:45402:4130":{"crate_id":1,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"1:47712:4213":{"crate_id":1,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"4:7196:102":{"crate_id":4,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"1:2842:2593":{"crate_id":1,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"1:43490:4079":{"crate_id":1,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"1:11538:2673":{"crate_id":1,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"1:7594:2512":{"crate_id":1,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"4:3580:1801":{"crate_id":4,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"4:3214:16870":{"crate_id":4,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"1:39993:4013":{"crate_id":1,"path":["core","char","EscapeUnicode"],"kind":"struct"},"1:47179:4198":{"crate_id":1,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"1:41429:2185":{"crate_id":1,"path":["core","option","IntoIter"],"kind":"struct"},"1:42362:68":{"crate_id":1,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"1:4811:798":{"crate_id":1,"path":["core","iter"],"kind":"module"},"1:40326:2535":{"crate_id":1,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"1:39220:201":{"crate_id":1,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"1:20879:11409":{"crate_id":1,"path":["core","core_simd","elements","mut_ptr","SimdMutPtr"],"kind":"trait"},"4:5874:4875":{"crate_id":4,"path":["alloc","sync","ArcInner"],"kind":"struct"},"1:2263:105":{"crate_id":1,"path":["core","clone","Clone"],"kind":"trait"},"1:40418:2541":{"crate_id":1,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"1:39941:13418":{"crate_id":1,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"4:775:96":{"crate_id":4,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"1:10013:2657":{"crate_id":1,"path":["core","slice","iter","Split"],"kind":"struct"},"1:42654:4060":{"crate_id":1,"path":["core","hash","sip","State"],"kind":"struct"},"1:47429:4201":{"crate_id":1,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"1:5471:3610":{"crate_id":1,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"0:349:1772":{"crate_id":0,"path":["smallvec","CollectionAllocErr"],"kind":"enum"},"1:45378:4129":{"crate_id":1,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"1:46001:4151":{"crate_id":1,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"1:2846:2594":{"crate_id":1,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"1:41404:1802":{"crate_id":1,"path":["core","option","Item"],"kind":"struct"},"1:39971:4010":{"crate_id":1,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"1:39076:2454":{"crate_id":1,"path":["core","ops","generator","GeneratorState"],"kind":"enum"},"1:44291:4120":{"crate_id":1,"path":["core","task","wake","RawWaker"],"kind":"struct"},"4:2032:3737":{"crate_id":4,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"1:6920:2498":{"crate_id":1,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"1:44248:211":{"crate_id":1,"path":["core","future","ResumeTy"],"kind":"struct"},"1:7201:134":{"crate_id":1,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"1:9365:141":{"crate_id":1,"path":["core","hash","Hash"],"kind":"trait"},"1:43292:3815":{"crate_id":1,"path":["core","str","iter","Chars"],"kind":"struct"},"1:45587:4137":{"crate_id":1,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"1:41471:2776":{"crate_id":1,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"1:51665:1520":{"crate_id":1,"path":["core","unit"],"kind":"primitive"},"1:40358:2537":{"crate_id":1,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"1:40001:3775":{"crate_id":1,"path":["core","char","EscapeDefault"],"kind":"struct"},"1:45332:4127":{"crate_id":1,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"1:40652:2503":{"crate_id":1,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"1:10056:2673":{"crate_id":1,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"1:43605:4085":{"crate_id":1,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"1:46335:4158":{"crate_id":1,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"1:42352:5587":{"crate_id":1,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"1:2150:588":{"crate_id":1,"path":["core","ptr","drop_in_place"],"kind":"function"},"1:41268:13395":{"crate_id":1,"path":["core","net","parser","AddrKind"],"kind":"enum"},"1:30798:183":{"crate_id":1,"path":["core","cmp","Ordering"],"kind":"enum"},"1:41421:2189":{"crate_id":1,"path":["core","option","IterMut"],"kind":"struct"},"1:43954:3826":{"crate_id":1,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"1:2737:6191":{"crate_id":1,"path":["core","marker","Freeze"],"kind":"trait"},"1:41540:1801":{"crate_id":1,"path":["core","result","Iter"],"kind":"struct"},"1:2347:182":{"crate_id":1,"path":["core","cmp","Ord"],"kind":"trait"},"4:1439:2185":{"crate_id":4,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"0:343:2245":{"crate_id":0,"path":["smallvec","ToSmallVec"],"kind":"trait"},"1:30228:1689":{"crate_id":1,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"4:1371:94":{"crate_id":4,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"4:3668:3590":{"crate_id":4,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"1:5531:2532":{"crate_id":1,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"1:2468:11896":{"crate_id":1,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"1:2752:2575":{"crate_id":1,"path":["core","ops","arith","Add"],"kind":"trait"},"1:41556:2185":{"crate_id":1,"path":["core","result","IntoIter"],"kind":"struct"},"1:2521:237":{"crate_id":1,"path":["core","convert","TryFrom"],"kind":"trait"},"1:47537:4203":{"crate_id":1,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"1:9162:2956":{"crate_id":1,"path":["core","fmt","LowerExp"],"kind":"trait"},"1:46381:4159":{"crate_id":1,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"1:44053:5598":{"crate_id":1,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"1:2791:2583":{"crate_id":1,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"1:43266:4070":{"crate_id":1,"path":["core","str","error","Utf8Error"],"kind":"struct"},"1:10774:2671":{"crate_id":1,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"1:47640:4207":{"crate_id":1,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"1:9371:141":{"crate_id":1,"path":["core","hash","macros","Hash"],"kind":"proc_derive"},"0:0:1728":{"crate_id":0,"path":["smallvec"],"kind":"module"},"1:40155:3632":{"crate_id":1,"path":["core","ffi","VaListImpl"],"kind":"struct"},"1:47613:4205":{"crate_id":1,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"4:7360:2476":{"crate_id":4,"path":["alloc","vec","extract_if","ExtractIf"],"kind":"struct"},"1:2691:2450":{"crate_id":1,"path":["core","marker","Unsize"],"kind":"trait"},"1:9413:2488":{"crate_id":1,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"1:2767:2576":{"crate_id":1,"path":["core","ops","arith","Div"],"kind":"trait"},"1:8673:79":{"crate_id":1,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"1:41590:84":{"crate_id":1,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"1:42872:5594":{"crate_id":1,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"1:39929:4006":{"crate_id":1,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"1:39242:203":{"crate_id":1,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"1:1732:2634":{"crate_id":1,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"4:1008:3590":{"crate_id":4,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"1:22435:173":{"crate_id":1,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"1:2779:2578":{"crate_id":1,"path":["core","ops","arith","Neg"],"kind":"trait"},"1:45526:4135":{"crate_id":1,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"1:51674:642":{"crate_id":1,"path":["core","f32"],"kind":"primitive"},"1:4258:3780":{"crate_id":1,"path":["core","cell","BorrowError"],"kind":"struct"},"1:46493:4161":{"crate_id":1,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"1:45757:4143":{"crate_id":1,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"1:40383:2539":{"crate_id":1,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"1:41630:91":{"crate_id":1,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"1:40016:6232":{"crate_id":1,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"1:43630:3775":{"crate_id":1,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"1:21441:2650":{"crate_id":1,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"1:21342:11407":{"crate_id":1,"path":["core","core_simd","ord","SimdPartialOrd"],"kind":"trait"},"2:0:442":{"crate_id":2,"path":["compiler_builtins"],"kind":"module"},"1:39037:2605":{"crate_id":1,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"1:43340:2661":{"crate_id":1,"path":["core","str","iter","RSplit"],"kind":"struct"},"1:40677:2508":{"crate_id":1,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"1:10095:2658":{"crate_id":1,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"0:118:1733":{"crate_id":0,"path":["smallvec","SmallVec"],"kind":"struct"},"1:46411:4160":{"crate_id":1,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"1:41304:6272":{"crate_id":1,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"1:39178:199":{"crate_id":1,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"1:8252:2779":{"crate_id":1,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"1:44061:5600":{"crate_id":1,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"1:46647:4164":{"crate_id":1,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"1:32109:3869":{"crate_id":1,"path":["core","marker","PhantomPinned"],"kind":"struct"},"1:45979:4150":{"crate_id":1,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"1:46571:4162":{"crate_id":1,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"1:12333:16318":{"crate_id":1,"path":["core","future","join","MaybeDone"],"kind":"enum"},"1:44049:5597":{"crate_id":1,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"1:51662:371":{"crate_id":1,"path":["core","bool"],"kind":"primitive"},"4:4425:3612":{"crate_id":4,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"1:43886:4102":{"crate_id":1,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"1:43621:4014":{"crate_id":1,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"1:41327:3802":{"crate_id":1,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"1:47686:4211":{"crate_id":1,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"1:41480:2979":{"crate_id":1,"path":["core","panicking","AssertKind"],"kind":"enum"},"4:3180:16869":{"crate_id":4,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"4:3201:3748":{"crate_id":4,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"4:1285:3728":{"crate_id":4,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"1:20851:11415":{"crate_id":1,"path":["core","core_simd","elements","int","SimdInt"],"kind":"trait"},"1:40255:2529":{"crate_id":1,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"1:41489:193":{"crate_id":1,"path":["core","pin","Pin"],"kind":"struct"},"1:44299:4122":{"crate_id":1,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"1:40397:2540":{"crate_id":1,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"1:39317:2159":{"crate_id":1,"path":["core","any","tags","Value"],"kind":"struct"},"1:3373:6189":{"crate_id":1,"path":["core","any","Provider"],"kind":"trait"},"4:5838:70":{"crate_id":4,"path":["alloc","sync","Arc"],"kind":"struct"},"1:1543:3610":{"crate_id":1,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"4:1115:4869":{"crate_id":4,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"1:45809:4145":{"crate_id":1,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"1:20814:11414":{"crate_id":1,"path":["core","core_simd","elements","float","SimdFloat"],"kind":"trait"},"1:2799:2584":{"crate_id":1,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"1:2762:2577":{"crate_id":1,"path":["core","ops","arith","Mul"],"kind":"trait"},"1:44045:5596":{"crate_id":1,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"1:11503:3821":{"crate_id":1,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"4:3168:1801":{"crate_id":4,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"1:1820:1691":{"crate_id":1,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"4:7294:3767":{"crate_id":4,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"1:9475:1372":{"crate_id":1,"path":["core","slice"],"kind":"module"},"4:1773:2476":{"crate_id":4,"path":["alloc","collections","btree","map","ExtractIf"],"kind":"struct"},"1:4409:2966":{"crate_id":1,"path":["core","cell","UnsafeCell"],"kind":"struct"},"1:2750:1000":{"crate_id":1,"path":["core","ops"],"kind":"module"},"1:21781:3837":{"crate_id":1,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"1:41950:92":{"crate_id":1,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"4:5684:232":{"crate_id":4,"path":["alloc","string","ToString"],"kind":"trait"},"4:626:3721":{"crate_id":4,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"4:2957:19193":{"crate_id":4,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"4:2967:4892":{"crate_id":4,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"4:6619:2481":{"crate_id":4,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"1:45955:4149":{"crate_id":1,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"4:258:3590":{"crate_id":4,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"1:40205:2518":{"crate_id":1,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"1:42625:4056":{"crate_id":1,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"4:0:286":{"crate_id":4,"path":["alloc"],"kind":"module"},"1:2505:75":{"crate_id":1,"path":["core","convert","AsRef"],"kind":"trait"},"1:2962:2453":{"crate_id":1,"path":["core","ops","generator","Generator"],"kind":"trait"},"1:20780:2615":{"crate_id":1,"path":["core","core_simd","elements","const_ptr","SimdConstPtr","from_exposed_addr"],"kind":"foreign_type"},"1:44117:4117":{"crate_id":1,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"4:4233:1801":{"crate_id":4,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"1:4:1018":{"crate_id":1,"path":["core","panic"],"kind":"macro"},"1:43138:2664":{"crate_id":1,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"2:229:210":{"crate_id":2,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"1:40315:2544":{"crate_id":1,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"1:23047:3769":{"crate_id":1,"path":["core","num","saturating","Saturating"],"kind":"struct"},"1:4389:2964":{"crate_id":1,"path":["core","cell","RefMut"],"kind":"struct"},"1:51681:1504":{"crate_id":1,"path":["core","u8"],"kind":"primitive"},"1:41438:2775":{"crate_id":1,"path":["core","panic","location","Location"],"kind":"struct"},"1:32022:3868":{"crate_id":1,"path":["core","error","Source"],"kind":"struct"},"1:40335:2522":{"crate_id":1,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"1:9595:3640":{"crate_id":1,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"1:3513:1796":{"crate_id":1,"path":["core","array","drain","Drain"],"kind":"struct"},"4:1408:1801":{"crate_id":4,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"1:30826:3448":{"crate_id":1,"path":["core","cmp","Reverse"],"kind":"struct"},"1:9109:210":{"crate_id":1,"path":["core","fmt","Result"],"kind":"typedef"},"1:47651:4208":{"crate_id":1,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"1:40042:6233":{"crate_id":1,"path":["core","char","CaseMappingIter"],"kind":"enum"},"1:3181:14926":{"crate_id":1,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"1:43822:4101":{"crate_id":1,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"1:40080:4023":{"crate_id":1,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"1:7266:1808":{"crate_id":1,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"1:4010:3777":{"crate_id":1,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"1:42435:128":{"crate_id":1,"path":["core","fmt","Error"],"kind":"struct"},"1:51670:1402":{"crate_id":1,"path":["core","str"],"kind":"primitive"},"1:9145:112":{"crate_id":1,"path":["core","fmt","Debug"],"kind":"trait"},"1:1629:587":{"crate_id":1,"path":["core","mem","drop"],"kind":"function"},"1:32018:3867":{"crate_id":1,"path":["core","error","private","Internal"],"kind":"struct"},"1:40009:4014":{"crate_id":1,"path":["core","char","EscapeDebug"],"kind":"struct"},"0:280:2185":{"crate_id":0,"path":["smallvec","IntoIter"],"kind":"struct"},"1:2787:2585":{"crate_id":1,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"4:7180:11664":{"crate_id":4,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"1:41202:3801":{"crate_id":1,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"1:3196:2451":{"crate_id":1,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"1:44077:5536":{"crate_id":1,"path":["core","time","Nanoseconds"],"kind":"struct"},"1:2804:2589":{"crate_id":1,"path":["core","ops","bit","Not"],"kind":"trait"},"1:51689:13":{"crate_id":1,"path":["core","fn"],"kind":"primitive"},"1:21098:11403":{"crate_id":1,"path":["core","core_simd","masks","to_bitmask","ToBitMask"],"kind":"trait"},"1:9408:2487":{"crate_id":1,"path":["core","hash","BuildHasher"],"kind":"trait"},"1:20948:11402":{"crate_id":1,"path":["core","core_simd","eq","SimdPartialEq"],"kind":"trait"},"1:40367:2538":{"crate_id":1,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"1:21000:11406":{"crate_id":1,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"1:1915:2455":{"crate_id":1,"path":["core","ptr","unique","Unique"],"kind":"struct"},"1:25857:3770":{"crate_id":1,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"1:11786:6346":{"crate_id":1,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"1:8253:2778":{"crate_id":1,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"1:40643:2501":{"crate_id":1,"path":["core","iter","sources","once","Once"],"kind":"struct"},"1:41413:1801":{"crate_id":1,"path":["core","option","Iter"],"kind":"struct"},"1:21347:11417":{"crate_id":1,"path":["core","core_simd","ord","SimdOrd"],"kind":"trait"},"1:9627:3645":{"crate_id":1,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"1:10807:2672":{"crate_id":1,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"1:3162:2602":{"crate_id":1,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"0:327:1798":{"crate_id":0,"path":["smallvec","Array"],"kind":"trait"},"1:21955:5584":{"crate_id":1,"path":["core","num","fmt","Formatted"],"kind":"struct"},"1:40658:2504":{"crate_id":1,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"1:11715:6331":{"crate_id":1,"path":["core","str","pattern"],"kind":"module"},"4:5277:11680":{"crate_id":4,"path":["alloc","slice","Concat"],"kind":"trait"},"4:682:111":{"crate_id":4,"path":["alloc","borrow","Cow"],"kind":"enum"},"1:21675:3834":{"crate_id":1,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"1:21124:11410":{"crate_id":1,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"1:21864:3845":{"crate_id":1,"path":["core","num","diy_float","Fp"],"kind":"struct"},"1:40185:2517":{"crate_id":1,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"1:4263:3781":{"crate_id":1,"path":["core","cell","BorrowMutError"],"kind":"struct"},"4:6629:2482":{"crate_id":4,"path":["alloc","vec","in_place_drop","InPlaceDstBufDrop"],"kind":"struct"},"1:21910:13403":{"crate_id":1,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"1:11720:3808":{"crate_id":1,"path":["core","str","pattern","Pattern"],"kind":"trait"},"1:9120:132":{"crate_id":1,"path":["core","fmt","Formatter"],"kind":"struct"},"1:42112:2953":{"crate_id":1,"path":["core","fmt","num","Binary"],"kind":"struct"},"1:3934:3610":{"crate_id":1,"path":["core","array","Guard"],"kind":"struct"},"1:22369:174":{"crate_id":1,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"4:7113:2185":{"crate_id":4,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"1:11740:6336":{"crate_id":1,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"1:9298:3812":{"crate_id":1,"path":["core","fmt","fmt","BorrowedPlaceholder"],"kind":"struct"},"1:2508:74":{"crate_id":1,"path":["core","convert","AsMut"],"kind":"trait"},"1:39981:4011":{"crate_id":1,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"4:3719:3737":{"crate_id":4,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"1:41162:155":{"crate_id":1,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"1:47631:4206":{"crate_id":1,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"1:2693:226":{"crate_id":1,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"1:3078:1690":{"crate_id":1,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"4:2220:19323":{"crate_id":4,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"1:20992:11896":{"crate_id":1,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"1:45787:4144":{"crate_id":1,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"1:2244:98":{"crate_id":1,"path":["core","borrow","BorrowMut"],"kind":"trait"},"1:51687:1558":{"crate_id":1,"path":["core","usize"],"kind":"primitive"},"1:6588:2516":{"crate_id":1,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"1:41248:5537":{"crate_id":1,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"1:40214:2527":{"crate_id":1,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"1:51669:1372":{"crate_id":1,"path":["core","slice"],"kind":"primitive"},"1:41548:2189":{"crate_id":1,"path":["core","result","IterMut"],"kind":"struct"},"1:2743:2449":{"crate_id":1,"path":["core","marker","Tuple"],"kind":"trait"},"4:3567:163":{"crate_id":4,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"4:204:2458":{"crate_id":4,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"1:43372:4076":{"crate_id":1,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"1:21093:11896":{"crate_id":1,"path":["core","core_simd","masks","to_bitmask","sealed","Sealed"],"kind":"trait"},"1:5589:2521":{"crate_id":1,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"1:12516:3650":{"crate_id":1,"path":["core","task","wake","Waker"],"kind":"struct"},"1:8254:2777":{"crate_id":1,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"1:4785:13620":{"crate_id":1,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"0:350:1774":{"crate_id":0,"path":["smallvec","CollectionAllocErr","CapacityOverflow"],"kind":"variant"},"4:5527:2139":{"crate_id":4,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"4:2240:5528":{"crate_id":4,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"1:3647:2185":{"crate_id":1,"path":["core","array","iter","IntoIter"],"kind":"struct"},"1:22567:169":{"crate_id":1,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"1:43175:2517":{"crate_id":1,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"1:4144:3779":{"crate_id":1,"path":["core","cell","once","OnceCell"],"kind":"struct"},"4:1135:4917":{"crate_id":4,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"1:11941:112":{"crate_id":1,"path":["core","str","lossy","Debug"],"kind":"struct"},"1:7635:14638":{"crate_id":1,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"1:40075:101":{"crate_id":1,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"1:4254:207":{"crate_id":1,"path":["core","cell","RefCell"],"kind":"struct"},"1:43210:2668":{"crate_id":1,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"1:9816:222":{"crate_id":1,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"1:6677:2526":{"crate_id":1,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"1:40165:4025":{"crate_id":1,"path":["core","ffi","VaList"],"kind":"struct"},"1:7205:152":{"crate_id":1,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"1:47367:4200":{"crate_id":1,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"1:43100:2654":{"crate_id":1,"path":["core","slice","iter","Windows"],"kind":"struct"},"4:6786:3626":{"crate_id":4,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"1:2694:225":{"crate_id":1,"path":["core","marker","StructuralEq"],"kind":"trait"},"1:1755:2633":{"crate_id":1,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"4:7013:2439":{"crate_id":4,"path":["alloc","alloc","Global"],"kind":"struct"},"4:6468:3590":{"crate_id":4,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"1:20546:3448":{"crate_id":1,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"3:0:2422":{"crate_id":3,"path":["rustc_std_workspace_core"],"kind":"module"},"1:41710:88":{"crate_id":1,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"1:40245:2528":{"crate_id":1,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"4:5754:1796":{"crate_id":4,"path":["alloc","string","Drain"],"kind":"struct"},"1:3317:69":{"crate_id":1,"path":["core","any","Any"],"kind":"trait"},"4:4031:3590":{"crate_id":4,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"4:4392:3610":{"crate_id":4,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"1:20770:11408":{"crate_id":1,"path":["core","core_simd","elements","const_ptr","SimdConstPtr"],"kind":"trait"},"4:3235:3753":{"crate_id":4,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"1:39123:2599":{"crate_id":1,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"4:6137:11693":{"crate_id":4,"path":["alloc","task","Wake"],"kind":"trait"},"1:30234:2567":{"crate_id":1,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"1:41790:89":{"crate_id":1,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"4:1489:3734":{"crate_id":4,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"1:45646:4140":{"crate_id":1,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"1:9154:2953":{"crate_id":1,"path":["core","fmt","Binary"],"kind":"trait"},"1:14:1678":{"crate_id":1,"path":["core","write"],"kind":"macro"},"4:4193:3610":{"crate_id":4,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"1:43544:4081":{"crate_id":1,"path":["core","str","iter","RMatches"],"kind":"struct"},"1:2773:2579":{"crate_id":1,"path":["core","ops","arith","Rem"],"kind":"trait"},"1:51663:940":{"crate_id":1,"path":["core","never"],"kind":"primitive"},"1:43706:6352":{"crate_id":1,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"1:44096:122":{"crate_id":1,"path":["core","time","Duration"],"kind":"struct"},"1:39303:3873":{"crate_id":1,"path":["core","any","TypeId"],"kind":"struct"},"1:40407:2524":{"crate_id":1,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"1:42119:2952":{"crate_id":1,"path":["core","fmt","num","Octal"],"kind":"struct"},"1:44041:5595":{"crate_id":1,"path":["core","str","LinesMap"],"kind":"struct"},"1:43230:2667":{"crate_id":1,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"1:45312:4126":{"crate_id":1,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"4:1423:2189":{"crate_id":4,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"4:3175:3747":{"crate_id":4,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"1:20589:16027":{"crate_id":1,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"1:41750:82":{"crate_id":1,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"1:20574:15782":{"crate_id":1,"path":["core","core_simd","swizzle","rotate_lanes_right","Rotate"],"kind":"struct"},"1:20559:15782":{"crate_id":1,"path":["core","core_simd","swizzle","rotate_lanes_left","Rotate"],"kind":"struct"},"4:2963:4891":{"crate_id":4,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"1:21728:3836":{"crate_id":1,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"1:12385:3830":{"crate_id":1,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"1:45424:4131":{"crate_id":1,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"1:2162:2616":{"crate_id":1,"path":["core","ptr","from_exposed_addr_mut"],"kind":"function"},"4:7042:1796":{"crate_id":4,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"4:273:1682":{"crate_id":4,"path":["alloc","boxed","Box"],"kind":"struct"},"1:5383:3610":{"crate_id":1,"path":["core","iter","adapters","filter","next_chunk","Guard"],"kind":"struct"},"1:2745:106":{"crate_id":1,"path":["core","marker","ConstParamTy"],"kind":"trait"},"1:4325:3630":{"crate_id":1,"path":["core","cell","BorrowRef"],"kind":"struct"},"1:4436:2965":{"crate_id":1,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"4:779:3592":{"crate_id":4,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"1:20778:14269":{"crate_id":1,"path":["core","core_simd","elements","const_ptr","SimdConstPtr","with_addr"],"kind":"foreign_type"},"1:7591:1687":{"crate_id":1,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"4:7227:13409":{"crate_id":4,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"1:10168:2661":{"crate_id":1,"path":["core","slice","iter","RSplit"],"kind":"struct"},"1:43109:2652":{"crate_id":1,"path":["core","slice","iter","Chunks"],"kind":"struct"},"1:11427:3816":{"crate_id":1,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"4:3799:2476":{"crate_id":4,"path":["alloc","collections","linked_list","ExtractIf"],"kind":"struct"},"1:42664:4064":{"crate_id":1,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"1:40348:2536":{"crate_id":1,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"1:4764:388":{"crate_id":1,"path":["core","ffi","c_void"],"kind":"enum"},"1:40636:3793":{"crate_id":1,"path":["core","iter","sources","from_generator","FromGenerator"],"kind":"struct"},"1:2838:2592":{"crate_id":1,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"1:3168:2604":{"crate_id":1,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"1:2757:2580":{"crate_id":1,"path":["core","ops","arith","Sub"],"kind":"trait"},"1:43322:2657":{"crate_id":1,"path":["core","str","iter","Split"],"kind":"struct"},"4:2138:3739":{"crate_id":4,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"1:6980:2500":{"crate_id":1,"path":["core","iter","sources","once","once"],"kind":"function"},"1:2748:2632":{"crate_id":1,"path":["core","marker","FnPtr"],"kind":"trait"},"1:41339:3805":{"crate_id":1,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"1:39264:1916":{"crate_id":1,"path":["core","ops","range","Bound"],"kind":"enum"},"4:4073:2189":{"crate_id":4,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"1:43639:4013":{"crate_id":1,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"1:4605:6226":{"crate_id":1,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"1:30250:68":{"crate_id":1,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"4:1479:3733":{"crate_id":4,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"4:7377:2477":{"crate_id":4,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"1:51667:1053":{"crate_id":1,"path":["core","pointer"],"kind":"primitive"},"1:11487:3820":{"crate_id":1,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"1:22534:172":{"crate_id":1,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"1:47750:4215":{"crate_id":1,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"1:20932:11896":{"crate_id":1,"path":["core","core_simd","elements","sealed","Sealed"],"kind":"trait"},"1:43576:4082":{"crate_id":1,"path":["core","str","iter","Lines"],"kind":"struct"},"1:6771:2495":{"crate_id":1,"path":["core","iter","range","Step"],"kind":"trait"},"1:22468:170":{"crate_id":1,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"1:2514:133":{"crate_id":1,"path":["core","convert","From"],"kind":"trait"},"1:45857:4146":{"crate_id":1,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"1:4045:2448":{"crate_id":1,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"4:1511:198":{"crate_id":4,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"1:12298:136":{"crate_id":1,"path":["core","future","future","Future"],"kind":"trait"},"1:51685:1500":{"crate_id":1,"path":["core","u128"],"kind":"primitive"},"0:38:1728":{"crate_id":0,"path":["smallvec","smallvec"],"kind":"macro"},"1:43757:4098":{"crate_id":1,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"1:41353:181":{"crate_id":1,"path":["core","option","Option"],"kind":"enum"},"1:10247:2659":{"crate_id":1,"path":["core","slice","iter","SplitN"],"kind":"struct"},"1:41565:183":{"crate_id":1,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"1:42876:2678":{"crate_id":1,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"1:2783:2581":{"crate_id":1,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"1:8841:14640":{"crate_id":1,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"4:5:1570":{"crate_id":4,"path":["alloc","vec"],"kind":"macro"},"1:47037:4197":{"crate_id":1,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"1:43280:4073":{"crate_id":1,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"1:43911:4105":{"crate_id":1,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"4:2458:4870":{"crate_id":4,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"1:51679:746":{"crate_id":1,"path":["core","i64"],"kind":"primitive"},"4:4347:245":{"crate_id":4,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"1:46076:4153":{"crate_id":1,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"1:43472:4078":{"crate_id":1,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"1:47788:4217":{"crate_id":1,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"1:42126:2954":{"crate_id":1,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"1:21126:3833":{"crate_id":1,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"4:4845:204":{"crate_id":4,"path":["alloc","rc","Rc"],"kind":"struct"},"4:7280:224":{"crate_id":4,"path":["alloc","string","String"],"kind":"struct"},"1:9373:145":{"crate_id":1,"path":["core","hash","Hasher"],"kind":"trait"},"1:40265:2530":{"crate_id":1,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"1:9612:3641":{"crate_id":1,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"1:4113:3778":{"crate_id":1,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"1:4022:103":{"crate_id":1,"path":["core","asserting","Capture"],"kind":"struct"},"1:9988:2189":{"crate_id":1,"path":["core","slice","iter","IterMut"],"kind":"struct"},"1:51671:1486":{"crate_id":1,"path":["core","tuple"],"kind":"primitive"},"1:2469:6025":{"crate_id":1,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"1:12311:151":{"crate_id":1,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"1:7164:2515":{"crate_id":1,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"1:11268:2646":{"crate_id":1,"path":["core","slice","GetManyMutError"],"kind":"struct"},"1:2705:1702":{"crate_id":1,"path":["core","marker","PhantomData"],"kind":"struct"},"1:11252:2644":{"crate_id":1,"path":["core","slice","SlicePattern"],"kind":"trait"},"1:6724:4918":{"crate_id":1,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"4:5948:3610":{"crate_id":4,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"1:2289:429":{"crate_id":1,"path":["core","cmp"],"kind":"module"},"1:45486:4133":{"crate_id":1,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"4:6717:244":{"crate_id":4,"path":["alloc","vec","Vec"],"kind":"struct"},"1:2160:2615":{"crate_id":1,"path":["core","ptr","from_exposed_addr"],"kind":"function"},"1:41990:3810":{"crate_id":1,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"1:21569:11896":{"crate_id":1,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"1:51675:644":{"crate_id":1,"path":["core","f64"],"kind":"primitive"},"1:41497:210":{"crate_id":1,"path":["core","result","Result"],"kind":"enum"},"1:40035:4018":{"crate_id":1,"path":["core","char","ToUppercase"],"kind":"struct"},"1:46154:4155":{"crate_id":1,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"1:43596:4084":{"crate_id":1,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"1:39331:2963":{"crate_id":1,"path":["core","any","tags","Ref"],"kind":"struct"},"1:2695:109":{"crate_id":1,"path":["core","marker","Copy"],"kind":"trait"},"4:6389:2185":{"crate_id":4,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"1:45627:4139":{"crate_id":1,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"1:41670:81":{"crate_id":1,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"1:43921:4109":{"crate_id":1,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"1:51682:1501":{"crate_id":1,"path":["core","u16"],"kind":"primitive"},"1:20752:11412":{"crate_id":1,"path":["core","core_simd","cast","SimdCastPtr"],"kind":"trait"},"1:45711:4142":{"crate_id":1,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"1:42380:110":{"crate_id":1,"path":["core","fmt","rt","Count"],"kind":"enum"},"1:2826:2590":{"crate_id":1,"path":["core","ops","bit","Shl"],"kind":"trait"},"4:7052:3599":{"crate_id":4,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"1:20919:11416":{"crate_id":1,"path":["core","core_simd","elements","uint","SimdUint"],"kind":"trait"},"1:45664:4141":{"crate_id":1,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"4:6270:1796":{"crate_id":4,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"1:42417:68":{"crate_id":1,"path":["core","fmt","Alignment"],"kind":"enum"},"1:11729:6338":{"crate_id":1,"path":["core","str","pattern","Searcher"],"kind":"trait"},"1:42408:71":{"crate_id":1,"path":["core","fmt","rt","Argument"],"kind":"struct"},"1:2683:220":{"crate_id":1,"path":["core","marker","Send"],"kind":"trait"},"1:43774:4099":{"crate_id":1,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"1:51678:745":{"crate_id":1,"path":["core","i32"],"kind":"primitive"},"1:1636:2563":{"crate_id":1,"path":["core","mem","Discriminant"],"kind":"struct"},"1:2921:1809":{"crate_id":1,"path":["core","ops","drop","Drop"],"kind":"trait"},"1:39138:200":{"crate_id":1,"path":["core","ops","range","RangeFull"],"kind":"struct"},"1:22303:176":{"crate_id":1,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"1:3385:3774":{"crate_id":1,"path":["core","any","Demand"],"kind":"struct"},"1:41910:85":{"crate_id":1,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"1:39324:3875":{"crate_id":1,"path":["core","any","tags","MaybeSizedValue"],"kind":"struct"},"1:47765:4216":{"crate_id":1,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"0:352:1776":{"crate_id":0,"path":["smallvec","CollectionAllocErr","AllocErr"],"kind":"variant"},"4:7269:3617":{"crate_id":4,"path":["alloc","rc","UniqueRc"],"kind":"struct"},"1:9164:2957":{"crate_id":1,"path":["core","fmt","UpperExp"],"kind":"trait"},"0:57:1796":{"crate_id":0,"path":["smallvec","Drain"],"kind":"struct"},"1:21889:13422":{"crate_id":1,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"1:2517:238":{"crate_id":1,"path":["core","convert","TryInto"],"kind":"trait"},"1:2832:2591":{"crate_id":1,"path":["core","ops","bit","Shr"],"kind":"trait"},"1:7598:2513":{"crate_id":1,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"1:46257:4157":{"crate_id":1,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"1:39511:11974":{"crate_id":1,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"1:43849:3825":{"crate_id":1,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"4:4163:3610":{"crate_id":4,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"1:10206:2662":{"crate_id":1,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"1:39296:2601":{"crate_id":1,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"1:46123:4154":{"crate_id":1,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"1:42633:2490":{"crate_id":1,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"1:51684:1503":{"crate_id":1,"path":["core","u64"],"kind":"primitive"},"1:47575:4204":{"crate_id":1,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"4:7168:2475":{"crate_id":4,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"1:43298:4074":{"crate_id":1,"path":["core","str","iter","CharIndices"],"kind":"struct"},"1:45557:4136":{"crate_id":1,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"1:43444:2655":{"crate_id":1,"path":["core","str","iter","RSplitN"],"kind":"struct"},"1:7214:2173":{"crate_id":1,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"1:11735:6337":{"crate_id":1,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"4:5858:3616":{"crate_id":4,"path":["alloc","sync","Weak"],"kind":"struct"},"4:7243:3763":{"crate_id":4,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"1:22600:3864":{"crate_id":1,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"1:40685:2510":{"crate_id":1,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"4:7030:3758":{"crate_id":4,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"1:10133:2674":{"crate_id":1,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"1:46617:4163":{"crate_id":1,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"1:1666:1091":{"crate_id":1,"path":["core","ptr"],"kind":"module"},"1:47660:4209":{"crate_id":1,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"4:1299:3729":{"crate_id":4,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"1:2811:2586":{"crate_id":1,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"1:30428:13394":{"crate_id":1,"path":["core","ptr","alignment","AlignmentEnum64"],"kind":"enum"},"1:47491:4202":{"crate_id":1,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"4:6316:3590":{"crate_id":4,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"1:43201:2665":{"crate_id":1,"path":["core","slice","iter","RChunks"],"kind":"struct"},"4:1470:3732":{"crate_id":4,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"1:40283:4028":{"crate_id":1,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"1:2700:228":{"crate_id":1,"path":["core","marker","Sync"],"kind":"trait"},"4:7084:198":{"crate_id":4,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"1:46681:4165":{"crate_id":1,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"1:51668:312":{"crate_id":1,"path":["core","array"],"kind":"primitive"},"1:11464:3819":{"crate_id":1,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"1:2925:2597":{"crate_id":1,"path":["core","ops","function","Fn"],"kind":"trait"},"1:9110:2144":{"crate_id":1,"path":["core","fmt","Write"],"kind":"trait"},"1:3156:135":{"crate_id":1,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"1:40028:4017":{"crate_id":1,"path":["core","char","ToLowercase"],"kind":"struct"},"1:21988:6059":{"crate_id":1,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"1:2910:2141":{"crate_id":1,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"1:2241:97":{"crate_id":1,"path":["core","borrow","Borrow"],"kind":"trait"},"1:22336:177":{"crate_id":1,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"1:44129:6359":{"crate_id":1,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"4:2167:5525":{"crate_id":4,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"1:43743:4095":{"crate_id":1,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"1:51680:742":{"crate_id":1,"path":["core","i128"],"kind":"primitive"},"1:30264:13413":{"crate_id":1,"path":["core","ptr","alignment","AlignmentEnum16"],"kind":"enum"},"1:2588:116":{"crate_id":1,"path":["core","default","Default"],"kind":"trait"},"4:3139:95":{"crate_id":4,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"4:7305:3768":{"crate_id":4,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"1:47827:4218":{"crate_id":1,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"1:42133:2955":{"crate_id":1,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"1:9964:1801":{"crate_id":1,"path":["core","slice","iter","Iter"],"kind":"struct"},"4:7256:3766":{"crate_id":4,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"4:5281:11681":{"crate_id":4,"path":["alloc","slice","Join"],"kind":"trait"},"1:40297:2533":{"crate_id":1,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"1:42392:13603":{"crate_id":1,"path":["core","fmt","rt","Flag"],"kind":"enum"},"1:9150:120":{"crate_id":1,"path":["core","fmt","Display"],"kind":"trait"},"1:43118:2653":{"crate_id":1,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"1:21926:13412":{"crate_id":1,"path":["core","num","fmt","Part"],"kind":"enum"},"1:7243:121":{"crate_id":1,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"1:47289:4199":{"crate_id":1,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"1:10261:2655":{"crate_id":1,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"1:41185:3799":{"crate_id":1,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"1:21571:11405":{"crate_id":1,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"1:4335:2963":{"crate_id":1,"path":["core","cell","Ref"],"kind":"struct"},"1:10275:2660":{"crate_id":1,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"1:44341:2441":{"crate_id":1,"path":["core","alloc","AllocError"],"kind":"struct"},"1:7033:1686":{"crate_id":1,"path":["core","iter","sources","repeat","repeat"],"kind":"function"},"1:21837:3843":{"crate_id":1,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"1:3233:2452":{"crate_id":1,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"1:39914:3775":{"crate_id":1,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"4:7092:3759":{"crate_id":4,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"4:1500:3735":{"crate_id":4,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"4:1270:3725":{"crate_id":4,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"1:8359:3808":{"crate_id":1,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"1:11282:6339":{"crate_id":1,"path":["core","str","converts","from_utf8"],"kind":"function"},"1:10289:2656":{"crate_id":1,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"1:12608:2440":{"crate_id":1,"path":["core","alloc","Allocator"],"kind":"trait"},"1:21976:3860":{"crate_id":1,"path":["core","num","error","ParseIntError"],"kind":"struct"},"4:3209:3752":{"crate_id":4,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"4:3734:3738":{"crate_id":4,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"1:2602:128":{"crate_id":1,"path":["core","error","Error"],"kind":"trait"},"1:43049:4067":{"crate_id":1,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"1:51688:1131":{"crate_id":1,"path":["core","reference"],"kind":"primitive"},"1:8846:5534":{"crate_id":1,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"1:9158:2955":{"crate_id":1,"path":["core","fmt","UpperHex"],"kind":"trait"},"1:43390:4077":{"crate_id":1,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"4:35:2456":{"crate_id":4,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"1:20606:16028":{"crate_id":1,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"4:1254:11667":{"crate_id":4,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"1:2850:2595":{"crate_id":1,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"1:42672:4065":{"crate_id":1,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"1:21849:13406":{"crate_id":1,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"1:31982:6187":{"crate_id":1,"path":["core","convert","Infallible"],"kind":"enum"},"1:21014:3833":{"crate_id":1,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"1:7321:159":{"crate_id":1,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"1:51683:1502":{"crate_id":1,"path":["core","u32"],"kind":"primitive"},"1:44069:5602":{"crate_id":1,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"1:2855:2596":{"crate_id":1,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"1:21813:3838":{"crate_id":1,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"1:2897:117":{"crate_id":1,"path":["core","ops","deref","Deref"],"kind":"trait"},"1:30194:1820":{"crate_id":1,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"}},"external_crates":{"2":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":26}