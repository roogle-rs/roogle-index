{"root":"0:0:1849","crate_version":"1.11.1","includes_private":false,"index":{"0:485":{"id":"0:485","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[2419,0],"end":[2423,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Array","id":"0:328:1919","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"array":{"type":{"generic":"T"},"len":"23"}},"items":["0:488:168","0:489:1468"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:192":{"id":"0:192","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1737,0],"end":[1799,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Array","id":"0:328:1919","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"A"},"trait":{"name":"","id":"0:328:1919","args":null}}},"bounds":[{"trait_bound":{"trait":{"name":"Copy","id":"1:2788:113","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"SmallVec","id":"0:118:1854","args":{"angle_bracketed":{"args":[{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:194:2309","0:195:2314","0:196:1891"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:74":{"id":"0:74","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[370,0],"end":[384,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[{"outlives":"'a"},{"trait_bound":{"trait":{"name":"Array","id":"0:328:1919","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["inspect","map_while","all","intersperse_with","cloned","last","is_sorted_by","sum","take","min_by","eq","any","find_map","filter","try_fold","by_ref","scan","filter_map","advance_by","max","is_sorted_by_key","product","rev","try_find","partial_cmp","try_for_each","try_collect","flat_map","enumerate","nth","min","position","__iterator_get_unchecked","cmp_by","unzip","rposition","cmp","fold","lt","skip","collect_into","flatten","gt","peekable","step_by","partial_cmp_by","copied","max_by_key","for_each","reduce","partition","map_windows","ge","skip_while","chain","le","count","eq_by","cycle","zip","max_by","try_reduce","partition_in_place","fuse","take_while","intersperse","next_chunk","collect","ne","map","array_chunks","is_sorted","min_by_key","find","size_hint","is_partitioned"],"trait":{"name":"Iterator","id":"1:7627:173","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Drain","id":"0:57:1917","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:77:168","0:78:1015","0:80:1926"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2574-0:118:1854":{"id":"b:1:2574-0:118:1854","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2544:138","args":{"angle_bracketed":{"args":[{"type":{"primitive":"never"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"SmallVec","id":"0:118:1854","args":{"angle_bracketed":{"args":[{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2576:743"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:610":{"id":"0:610","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[2419,0],"end":[2423,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Array","id":"0:328:1919","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"array":{"type":{"generic":"T"},"len":"131072"}},"items":["0:613:168","0:614:1468"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:380":{"id":"0:380","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[2419,0],"end":[2423,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Array","id":"0:328:1919","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"array":{"type":{"generic":"T"},"len":"2"}},"items":["0:383:168","0:384:1468"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12417:2363":{"id":"1:12417:2363","crate_id":1,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"üóª‚ààüåè\");\n\nassert_eq!(Some(\"üóª\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"1:41566:196"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"1:41564:198","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:10196:244","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:10196:244","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:8607:2966-0:363:1893":{"id":"a:1:8607:2966-0:363:1893","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:8607:2966","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"CollectionAllocErr","id":"0:363:1893","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:190:341":{"id":"0:190:341","crate_id":0,"name":"as_ptr","span":{"filename":"src/lib.rs","begin":[1721,4],"end":[1726,5]},"visibility":"public","docs":"Returns a raw pointer to the vector's buffer.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"A"},"trait":{"name":"","id":"0:328:1919","args":null}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:400":{"id":"0:400","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[2419,0],"end":[2423,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Array","id":"0:328:1919","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"array":{"type":{"generic":"T"},"len":"6"}},"items":["0:403:168","0:404:1468"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2261-0:363:1893":{"id":"b:1:2261-0:363:1893","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2783:2755","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2255:100","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"CollectionAllocErr","id":"0:363:1893","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2263:1804"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:133:871":{"id":"0:133:871","crate_id":0,"name":"len","span":{"filename":"src/lib.rs","begin":[956,4],"end":[958,5]},"visibility":"public","docs":"The number of elements stored in the vector","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:297:168":{"id":"0:297:168","crate_id":0,"name":"Item","span":{"filename":"src/lib.rs","begin":[2239,4],"end":[2239,24]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"A"},"trait":{"name":"Array","id":"0:328:1919","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}},"0:603:168":{"id":"0:603:168","crate_id":0,"name":"Item","span":{"filename":"src/lib.rs","begin":[2419,0],"end":[2423,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"0:579:1468":{"id":"0:579:1468","crate_id":0,"name":"size","span":{"filename":"src/lib.rs","begin":[2419,0],"end":[2423,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:4:5790-0:363:1893":{"id":"b:4:5790-0:363:1893","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"1:9536:125","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:2783:2755","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"ToString","id":"4:5788:256","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"CollectionAllocErr","id":"0:363:1893","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["4:5792:1564"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:12522:17462":{"id":"1:12522:17462","crate_id":1,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"1:12067:132","`FromStr`":"1:12066:6498"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"1:41709:231","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"FromStr","id":"1:12066:6498","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"1:12066:6498","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:217":{"id":"0:217","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1890,0],"end":[1895,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Array","id":"0:328:1919","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2258:101","args":{"angle_bracketed":{"args":[{"type":{"slice":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"A"},"trait":{"name":"Array","id":"0:328:1919","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"SmallVec","id":"0:118:1854","args":{"angle_bracketed":{"args":[{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:219:2332"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:378:168":{"id":"0:378:168","crate_id":0,"name":"Item","span":{"filename":"src/lib.rs","begin":[2419,0],"end":[2423,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"0:150:2153":{"id":"0:150:2153","crate_id":0,"name":"try_reserve","span":{"filename":"src/lib.rs","begin":[1242,4],"end":[1254,5]},"visibility":"public","docs":"Reserve capacity for `additional` more elements to be inserted.\n\nMay reserve more space to avoid frequent reallocations.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["additional",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Result","id":"1:41709:231","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}},{"type":{"resolved_path":{"name":"CollectionAllocErr","id":"0:363:1893","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:529:1468":{"id":"0:529:1468","crate_id":0,"name":"size","span":{"filename":"src/lib.rs","begin":[2419,0],"end":[2423,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:405":{"id":"0:405","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[2419,0],"end":[2423,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Array","id":"0:328:1919","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"array":{"type":{"generic":"T"},"len":"7"}},"items":["0:408:168","0:409:1468"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:227":{"id":"0:227","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[2025,0],"end":[2030,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Array","id":"0:328:1919","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2544:138","args":{"angle_bracketed":{"args":[{"type":{"generic":"A"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"SmallVec","id":"0:118:1854","args":{"angle_bracketed":{"args":[{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:229:743"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:413:168":{"id":"0:413:168","crate_id":0,"name":"Item","span":{"filename":"src/lib.rs","begin":[2419,0],"end":[2423,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"0:415":{"id":"0:415","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[2419,0],"end":[2423,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Array","id":"0:328:1919","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"array":{"type":{"generic":"T"},"len":"9"}},"items":["0:418:168","0:419:1468"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:142:1858":{"id":"0:142:1858","crate_id":0,"name":"push","span":{"filename":"src/lib.rs","begin":[1119,4],"end":[1131,5]},"visibility":"public","docs":"Append an item to the vector.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["value",{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"A"},"trait":{"name":"","id":"0:328:1919","args":null}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:8606:2967-0:57:1917":{"id":"a:1:8606:2967-0:57:1917","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:8607:2966","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"T"},"trait":{"name":"Array","id":"0:328:1919","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:8607:2966","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:8606:2967","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Drain","id":"0:57:1917","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:129:2043":{"id":"0:129:2043","crate_id":0,"name":"from_buf_and_len_unchecked","span":{"filename":"src/lib.rs","begin":[911,4],"end":[916,5]},"visibility":"public","docs":"Constructs a new `SmallVec` on the stack from an `A` without\ncopying elements. Also sets the length. The user is responsible\nfor ensuring that `len <= A::size()`.\n\n```rust\nuse smallvec::SmallVec;\nuse std::mem::MaybeUninit;\n\nlet buf = [1, 2, 3, 4, 5, 0, 0, 0];\nlet small_vec: SmallVec<_> = unsafe {\n    SmallVec::from_buf_and_len_unchecked(MaybeUninit::new(buf), 5)\n};\n\nassert_eq!(&*small_vec, &[1, 2, 3, 4, 5]);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["buf",{"resolved_path":{"name":"MaybeUninit","id":"1:30237:1810","args":{"angle_bracketed":{"args":[{"type":{"generic":"A"}}],"bindings":[]}}}}],["len",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"SmallVec","id":"0:118:1854","args":{"angle_bracketed":{"args":[{"type":{"generic":"A"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:134:2061":{"id":"0:134:2061","crate_id":0,"name":"is_empty","span":{"filename":"src/lib.rs","begin":[962,4],"end":[964,5]},"visibility":"public","docs":"Returns `true` if the vector is empty","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:242":{"id":"0:242","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[2056,0],"end":[2063,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Array","id":"0:328:1919","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"FromIterator","id":"1:7476:139","args":{"angle_bracketed":{"args":[{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"A"},"trait":{"name":"Array","id":"0:328:1919","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"SmallVec","id":"0:118:1854","args":{"angle_bracketed":{"args":[{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:244:746"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:613:168":{"id":"0:613:168","crate_id":0,"name":"Item","span":{"filename":"src/lib.rs","begin":[2419,0],"end":[2423,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"0:615":{"id":"0:615","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[2419,0],"end":[2423,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Array","id":"0:328:1919","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"array":{"type":{"generic":"T"},"len":"262144"}},"items":["0:618:168","0:619:1468"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12419:3101":{"id":"1:12419:3101","crate_id":1,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"1:41566:196"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"1:41564:198","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:10196:244","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:10196:244","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:211":{"id":"0:211","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1876,0],"end":[1881,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Array","id":"0:328:1919","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"AsMut","id":"1:2538:77","args":{"angle_bracketed":{"args":[{"type":{"slice":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"A"},"trait":{"name":"Array","id":"0:328:1919","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"SmallVec","id":"0:118:1854","args":{"angle_bracketed":{"args":[{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:213:1932"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:47:717":{"id":"0:47:717","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[310,4],"end":[312,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:9506:137","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:9487:231","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:523:168":{"id":"0:523:168","crate_id":0,"name":"Item","span":{"filename":"src/lib.rs","begin":[2419,0],"end":[2423,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"0:534:1468":{"id":"0:534:1468","crate_id":0,"name":"size","span":{"filename":"src/lib.rs","begin":[2419,0],"end":[2423,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:479:1468":{"id":"0:479:1468","crate_id":0,"name":"size","span":{"filename":"src/lib.rs","begin":[2419,0],"end":[2423,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:367:1899":{"id":"0:367:1899","crate_id":0,"name":"layout","span":{"filename":"src/lib.rs","begin":[305,8],"end":[305,22]},"visibility":"default","docs":"The layout that was passed to the allocator","links":{},"attrs":[],"deprecation":null,"inner":{"struct_field":{"resolved_path":{"name":"alloc::alloc::Layout","id":"1:44520:175","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"0:210:342":{"id":"0:210:342","crate_id":0,"name":"as_ref","span":{"filename":"src/lib.rs","begin":[1871,4],"end":[1873,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"A"},"trait":{"name":"","id":"0:328:1919","args":null}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:450":{"id":"0:450","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[2419,0],"end":[2423,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Array","id":"0:328:1919","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"array":{"type":{"generic":"T"},"len":"16"}},"items":["0:453:168","0:454:1468"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:7484-0:57:1917":{"id":"b:1:7484-0:57:1917","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"1:7627:173","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"1:7480:160","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Drain","id":"0:57:1917","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:7486:168","1:7487:2374","1:7488:837"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"I"}}}},"0:132:1857":{"id":"0:132:1857","crate_id":0,"name":"inline_size","span":{"filename":"src/lib.rs","begin":[950,4],"end":[952,5]},"visibility":"public","docs":"The maximum number of elements this vector can hold inline","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:608:168":{"id":"0:608:168","crate_id":0,"name":"Item","span":{"filename":"src/lib.rs","begin":[2419,0],"end":[2423,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"0:495":{"id":"0:495","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[2419,0],"end":[2423,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Array","id":"0:328:1919","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"array":{"type":{"generic":"T"},"len":"25"}},"items":["0:498:168","0:499:1468"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:305":{"id":"0:305","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[2276,0],"end":[2276,47]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Array","id":"0:328:1919","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"FusedIterator","id":"1:7932:1808","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:281:2374","args":{"angle_bracketed":{"args":[{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:67:717":{"id":"0:67:717","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[362,4],"end":[364,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:9506:137","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:9487:231","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:81":{"id":"0:81","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[386,0],"end":[393,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[{"outlives":"'a"},{"trait_bound":{"trait":{"name":"Array","id":"0:328:1919","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["try_rfold","rfind","nth_back","rfold","advance_back_by"],"trait":{"name":"DoubleEndedIterator","id":"1:7518:126","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Drain","id":"0:57:1917","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:84:1927"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:175:2217":{"id":"0:175:2217","crate_id":0,"name":"retain","span":{"filename":"src/lib.rs","begin":[1524,4],"end":[1535,5]},"visibility":"public","docs":"Retains only the elements specified by the predicate.\n\nIn other words, remove all elements `e` such that `f(&e)` returns `false`.\nThis method operates in place and preserves the order of the retained\nelements.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["f",{"generic":"F"}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:3041:1944","args":{"parenthesized":{"inputs":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"A"},"trait":{"name":"","id":"0:328:1919","args":null}}}}}],"output":{"primitive":"bool"}}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:263":{"id":"0:263","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[2160,0],"end":[2168,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Array","id":"0:328:1919","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"B","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Array","id":"0:328:1919","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"A"},"trait":{"name":"","id":"0:328:1919","args":null}}},"bounds":[{"trait_bound":{"trait":{"name":"PartialEq","id":"1:2325:205","args":{"angle_bracketed":{"args":[{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"B"},"trait":{"name":"","id":"0:328:1919","args":null}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"1:2325:205","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"SmallVec","id":"0:118:1854","args":{"angle_bracketed":{"args":[{"type":{"generic":"B"}}],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"SmallVec","id":"0:118:1854","args":{"angle_bracketed":{"args":[{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:266:659"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:349:2435":{"id":"0:349:2435","crate_id":0,"name":"to_smallvec","span":{"filename":"src/lib.rs","begin":[2436,4],"end":[2438,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SmallVec","id":"0:118:1854","args":{"angle_bracketed":{"args":[{"type":{"generic":"A"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:524:1468":{"id":"0:524:1468","crate_id":0,"name":"size","span":{"filename":"src/lib.rs","begin":[2419,0],"end":[2423,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:347":{"id":"0:347","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[2431,0],"end":[2439,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Array","id":"0:328:1919","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"A"},"trait":{"name":"","id":"0:328:1919","args":null}}},"bounds":[{"trait_bound":{"trait":{"name":"Copy","id":"1:2788:113","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"ToSmallVec","id":"0:344:2433","args":{"angle_bracketed":{"args":[{"type":{"generic":"A"}}],"bindings":[]}}},"for":{"slice":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"A"},"trait":{"name":"","id":"0:328:1919","args":null}}}},"items":["0:349:2435"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:90":{"id":"0:90","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[402,0],"end":[402,52]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Array","id":"0:328:1919","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"FusedIterator","id":"1:7932:1808","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Drain","id":"0:57:1917","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:366:1897":{"id":"0:366:1897","crate_id":0,"name":"AllocErr","span":{"filename":"src/lib.rs","begin":[303,4],"end":[306,5]},"visibility":"default","docs":"The allocator return an error","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":{"struct":{"fields":["0:367:1899"],"fields_stripped":false}},"discriminant":null}}},"0:207:596":{"id":"0:207:596","crate_id":0,"name":"deref_mut","span":{"filename":"src/lib.rs","begin":[1861,4],"end":[1866,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"A"},"trait":{"name":"","id":"0:328:1919","args":null}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:409:1468":{"id":"0:409:1468","crate_id":0,"name":"size","span":{"filename":"src/lib.rs","begin":[2419,0],"end":[2423,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:545":{"id":"0:545","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[2419,0],"end":[2423,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Array","id":"0:328:1919","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"array":{"type":{"generic":"T"},"len":"96"}},"items":["0:548:168","0:549:1468"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:453:168":{"id":"0:453:168","crate_id":0,"name":"Item","span":{"filename":"src/lib.rs","begin":[2419,0],"end":[2423,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"0:246":{"id":"0:246","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[2065,0],"end":[2089,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Array","id":"0:328:1919","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["extend_one","extend_reserve"],"trait":{"name":"Extend","id":"1:7489:2362","args":{"angle_bracketed":{"args":[{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"A"},"trait":{"name":"Array","id":"0:328:1919","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"SmallVec","id":"0:118:1854","args":{"angle_bracketed":{"args":[{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:248:2135"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12510:16171":{"id":"1:12510:16171","crate_id":1,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:52078:449","self::pattern":"1:12106:6763"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["suffix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41564:198","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12111:4778","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12111:4778","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12126:6769","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:244:746":{"id":"0:244:746","crate_id":0,"name":"from_iter","span":{"filename":"src/lib.rs","begin":[2058,4],"end":[2062,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["iterable",{"generic":"I"}]],"output":{"resolved_path":{"name":"SmallVec","id":"0:118:1854","args":{"angle_bracketed":{"args":[{"type":{"generic":"A"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"1:7480:160","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"A"},"trait":{"name":"","id":"0:328:1919","args":null}}}}}}]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"4:5521:18133":{"id":"4:5521:18133","crate_id":4,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"4:7487:248"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["count",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"4:7487:248","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12111:4778","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:573:168":{"id":"0:573:168","crate_id":0,"name":"Item","span":{"filename":"src/lib.rs","begin":[2419,0],"end":[2423,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"0:86":{"id":"0:86","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[395,0],"end":[400,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Array","id":"0:328:1919","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["is_empty","len"],"trait":{"name":"ExactSizeIterator","id":"1:7571:1928","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Drain","id":"0:57:1917","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:89:871"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:259":{"id":"0:259","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[2135,0],"end":[2158,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Array","id":"0:328:1919","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"A"},"trait":{"name":"","id":"0:328:1919","args":null}}},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2277:108","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2277:108","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"SmallVec","id":"0:118:1854","args":{"angle_bracketed":{"args":[{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:261:453","0:262:455"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:379:1468":{"id":"0:379:1468","crate_id":0,"name":"size","span":{"filename":"src/lib.rs","begin":[2419,0],"end":[2423,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12472:16164":{"id":"1:12472:16164","crate_id":1,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"1:52078:449","str::splitn":"1:12469:16162","self::pattern":"1:12106:6763"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitN","id":"1:43648:2842","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12111:4778","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12111:4778","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12126:6769","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:574:1468":{"id":"0:574:1468","crate_id":0,"name":"size","span":{"filename":"src/lib.rs","begin":[2419,0],"end":[2423,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:118:1854":{"id":"0:118:1854","crate_id":0,"name":"SmallVec","span":{"filename":"src/lib.rs","begin":[772,0],"end":[778,1]},"visibility":"public","docs":"A `Vec`-like container that can store a small number of elements inline.\n\n`SmallVec` acts like a vector, but can store a limited amount of data inline within the\n`SmallVec` struct rather than in a separate allocation.  If the data exceeds this limit, the\n`SmallVec` will \"spill\" its data onto the heap, allocating a new buffer to hold it.\n\nThe amount of data that a `SmallVec` can store inline depends on its backing store. The backing\nstore can be any type that implements the `Array` trait; usually it is a small fixed-sized\narray.  For example a `SmallVec<[u64; 8]>` can hold up to eight 64-bit integers inline.\n\n## Example\n\n```rust\nuse smallvec::SmallVec;\nlet mut v = SmallVec::<[u8; 4]>::new(); // initialize an empty vector\n\n// The vector can hold up to 4 items without spilling onto the heap.\nv.extend(0..4);\nassert_eq!(v.len(), 4);\nassert!(!v.spilled());\n\n// Pushing another element will force the buffer to spill:\nv.push(4);\nassert_eq!(v.len(), 5);\nassert!(v.spilled());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Array","id":"0:328:1919","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"impls":["0:122","0:192","0:197","a:1:2793:252-0:118:1854","a:1:2833:2866-0:118:1854","a:1:8606:2967-0:118:1854","a:1:8607:2966-0:118:1854","b:1:2264-0:118:1854","b:1:2571-0:118:1854","b:1:2574-0:118:1854","b:1:2261-0:118:1854","b:1:2567-0:118:1854","b:1:2577-0:118:1854","b:1:3412-0:118:1854","b:1:2582-0:118:1854","b:4:680-0:118:1854","0:211","0:311","0:259","0:267","0:322","0:250","0:275","0:316","0:242","0:214","0:230","0:279","0:256","0:217","0:246","0:235","0:263","0:208","0:272","0:205","0:220","0:227","0:201","0:269","0:224","0:253"]}}},"4:5517:18132":{"id":"4:5517:18132","crate_id":4,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"4:276:1803","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"4:276:1803","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"4:5533:18136":{"id":"4:5533:18136","crate_id":4,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"4:276:1803","`String`":"4:7487:248"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"4:276:1803","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"4:7487:248","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12450:3111":{"id":"1:12450:3111","crate_id":1,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('√©'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"1:41566:196","prim@char":"1:52078:449","self::pattern":"1:12106:6763"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41564:198","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12111:4778","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12111:4778","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12126:6769","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:419:1468":{"id":"0:419:1468","crate_id":0,"name":"size","span":{"filename":"src/lib.rs","begin":[2419,0],"end":[2423,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:414:1468":{"id":"0:414:1468","crate_id":0,"name":"size","span":{"filename":"src/lib.rs","begin":[2419,0],"end":[2423,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12440:16168":{"id":"1:12440:16168","crate_id":1,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"prim@char":"1:52078:449","self::pattern":"1:12106:6763"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12111:4778","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:183:2234":{"id":"0:183:2234","crate_id":0,"name":"dedup_by_key","span":{"filename":"src/lib.rs","begin":[1587,4],"end":[1593,5]},"visibility":"public","docs":"Removes consecutive elements that map to the same key.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["key",{"generic":"F"}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:3041:1944","args":{"parenthesized":{"inputs":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"A"},"trait":{"name":"","id":"0:328:1919","args":null}}}}}],"output":{"generic":"K"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"PartialEq","id":"1:2325:205","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:310:2174":{"id":"0:310:2174","crate_id":0,"name":"as_mut_slice","span":{"filename":"src/lib.rs","begin":[2286,4],"end":[2289,5]},"visibility":"public","docs":"Returns the remaining items of this iterator as a mutable slice.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"A"},"trait":{"name":"","id":"0:328:1919","args":null}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:274:460":{"id":"0:274:460","crate_id":0,"name":"cmp","span":{"filename":"src/lib.rs","begin":[2187,4],"end":[2189,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"SmallVec","id":"0:118:1854","args":{"angle_bracketed":{"args":[{"type":{"generic":"A"}}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"cmp::Ordering","id":"1:30807:200","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:583:168":{"id":"0:583:168","crate_id":0,"name":"Item","span":{"filename":"src/lib.rs","begin":[2419,0],"end":[2423,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"b:1:2582-0:281:2374":{"id":"b:1:2582-0:281:2374","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2541:157","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2551:261","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:281:2374","args":{"angle_bracketed":{"args":[{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2585:133","1:2586:1587"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:619:1468":{"id":"0:619:1468","crate_id":0,"name":"size","span":{"filename":"src/lib.rs","begin":[2419,0],"end":[2423,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12414:17442":{"id":"1:12414:17442","crate_id":1,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"üóª‚ààüåè\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"üçî‚ààüåè\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:389:1468":{"id":"0:389:1468","crate_id":0,"name":"size","span":{"filename":"src/lib.rs","begin":[2419,0],"end":[2423,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:57:1917":{"id":"0:57:1917","crate_id":0,"name":"Drain","span":{"filename":"src/lib.rs","begin":[351,0],"end":[356,1]},"visibility":"public","docs":"An iterator that removes the items from a `SmallVec` and yields them by value.\n\nReturned from [`SmallVec::drain`][1].\n\n[1]: struct.SmallVec.html#method.drain","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[{"outlives":"'a"},{"trait_bound":{"trait":{"name":"Array","id":"0:328:1919","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"impls":["a:1:2833:2866-0:57:1917","a:1:8606:2967-0:57:1917","a:1:8607:2966-0:57:1917","b:1:7484-0:57:1917","b:1:2264-0:57:1917","b:1:2571-0:57:1917","b:1:2261-0:57:1917","b:1:2567-0:57:1917","b:1:2577-0:57:1917","b:1:3412-0:57:1917","b:1:2582-0:57:1917","0:68","0:64","0:71","0:74","0:93","0:81","0:90","0:86"]}}},"0:384:1468":{"id":"0:384:1468","crate_id":0,"name":"size","span":{"filename":"src/lib.rs","begin":[2419,0],"end":[2423,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:504:1468":{"id":"0:504:1468","crate_id":0,"name":"size","span":{"filename":"src/lib.rs","begin":[2419,0],"end":[2423,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:127:2036":{"id":"0:127:2036","crate_id":0,"name":"from_buf","span":{"filename":"src/lib.rs","begin":[870,4],"end":[875,5]},"visibility":"public","docs":"Constructs a new `SmallVec` on the stack from an `A` without\ncopying elements.\n\n```rust\nuse smallvec::SmallVec;\n\nlet buf = [1, 2, 3, 4, 5];\nlet small_vec: SmallVec<_> = SmallVec::from_buf(buf);\n\nassert_eq!(&*small_vec, &[1, 2, 3, 4, 5]);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["buf",{"generic":"A"}]],"output":{"resolved_path":{"name":"SmallVec","id":"0:118:1854","args":{"angle_bracketed":{"args":[{"type":{"generic":"A"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:223:743":{"id":"0:223:743","crate_id":0,"name":"from","span":{"filename":"src/lib.rs","begin":[2007,4],"end":[2009,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(feature = \"specialization\"))]","#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["slice",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"slice":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"A"},"trait":{"name":"","id":"0:328:1919","args":null}}}}}}]],"output":{"resolved_path":{"name":"SmallVec","id":"0:118:1854","args":{"angle_bracketed":{"args":[{"type":{"generic":"A"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:589:1468":{"id":"0:589:1468","crate_id":0,"name":"size","span":{"filename":"src/lib.rs","begin":[2419,0],"end":[2423,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:578:168":{"id":"0:578:168","crate_id":0,"name":"Item","span":{"filename":"src/lib.rs","begin":[2419,0],"end":[2423,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"0:558:168":{"id":"0:558:168","crate_id":0,"name":"Item","span":{"filename":"src/lib.rs","begin":[2419,0],"end":[2423,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"0:302:1927":{"id":"0:302:1927","crate_id":0,"name":"next_back","span":{"filename":"src/lib.rs","begin":[2263,4],"end":[2272,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41564:198","args":{"angle_bracketed":{"args":[{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"A"},"trait":{"name":"","id":"0:328:1919","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2567-0:363:1893":{"id":"b:1:2567-0:363:1893","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2544:138","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2541:157","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"CollectionAllocErr","id":"0:363:1893","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2570:2327"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:549:1468":{"id":"0:549:1468","crate_id":0,"name":"size","span":{"filename":"src/lib.rs","begin":[2419,0],"end":[2423,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12460:16160":{"id":"1:12460:16160","crate_id":1,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"1:12106:6763","`DoubleEndedIterator`":"1:7518:126","prim@char":"1:52078:449","str::split":"1:12454:16157"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplit","id":"1:43544:2848","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12111:4778","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12111:4778","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12126:6769","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:262:455":{"id":"0:262:455","crate_id":0,"name":"clone_from","span":{"filename":"src/lib.rs","begin":[2144,4],"end":[2157,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["source",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:295":{"id":"0:295","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[2238,0],"end":[2259,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Array","id":"0:328:1919","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["inspect","map_while","all","intersperse_with","cloned","last","is_sorted_by","sum","take","min_by","eq","any","find_map","filter","try_fold","by_ref","scan","filter_map","advance_by","max","is_sorted_by_key","product","rev","try_find","partial_cmp","try_for_each","try_collect","flat_map","enumerate","nth","min","position","__iterator_get_unchecked","cmp_by","unzip","rposition","cmp","fold","lt","skip","collect_into","flatten","gt","peekable","step_by","partial_cmp_by","copied","max_by_key","for_each","reduce","partition","map_windows","ge","skip_while","chain","le","count","eq_by","cycle","zip","max_by","try_reduce","partition_in_place","fuse","take_while","intersperse","next_chunk","collect","ne","map","array_chunks","is_sorted","min_by_key","find","size_hint","is_partitioned"],"trait":{"name":"Iterator","id":"1:7627:173","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:281:2374","args":{"angle_bracketed":{"args":[{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:297:168","0:298:1015","0:299:1926"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:151:2023":{"id":"0:151:2023","crate_id":0,"name":"reserve_exact","span":{"filename":"src/lib.rs","begin":[1259,4],"end":[1261,5]},"visibility":"public","docs":"Reserve the minimum capacity for `additional` more elements to be inserted.\n\nPanics if the new capacity overflows `usize`.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["additional",{"primitive":"usize"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2577-0:57:1917":{"id":"b:1:2577-0:57:1917","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2551:261","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2547:262","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Drain","id":"0:57:1917","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:2580:133","1:2581:1589"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:258:632":{"id":"0:258:632","crate_id":0,"name":"drop","span":{"filename":"src/lib.rs","begin":[2123,4],"end":[2132,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:146:2139":{"id":"0:146:2139","crate_id":0,"name":"grow","span":{"filename":"src/lib.rs","begin":[1171,4],"end":[1173,5]},"visibility":"public","docs":"Re-allocate to set the capacity to `max(new_cap, inline_size())`.\n\nPanics if `new_cap` is less than the vector's length\nor if the capacity computation overflows `usize`.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["new_cap",{"primitive":"usize"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:162:2194":{"id":"0:162:2194","crate_id":0,"name":"insert_many","span":{"filename":"src/lib.rs","begin":[1395,4],"end":[1477,5]},"visibility":"public","docs":"Insert multiple elements at position `index`, shifting all following elements toward the\nback.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}],["iterable",{"generic":"I"}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"1:7480:160","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"A"},"trait":{"name":"","id":"0:328:1919","args":null}}}}}}]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:514:1468":{"id":"0:514:1468","crate_id":0,"name":"size","span":{"filename":"src/lib.rs","begin":[2419,0],"end":[2423,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:2585:133":{"id":"1:2585:133","crate_id":1,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Infallible","id":"1:31991:6628","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"a:1:8607:2966-0:57:1917":{"id":"a:1:8607:2966-0:57:1917","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:8607:2966","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"T"},"trait":{"name":"Array","id":"0:328:1919","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:8607:2966","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:8607:2966","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Drain","id":"0:57:1917","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:292":{"id":"0:292","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[2232,0],"end":[2236,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Array","id":"0:328:1919","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Drop","id":"1:3034:1929","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:281:2374","args":{"angle_bracketed":{"args":[{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:294:632"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:463:168":{"id":"0:463:168","crate_id":0,"name":"Item","span":{"filename":"src/lib.rs","begin":[2419,0],"end":[2423,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"a:1:8606:2967-0:363:1893":{"id":"a:1:8606:2967-0:363:1893","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:8606:2967","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"CollectionAllocErr","id":"0:363:1893","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:443:168":{"id":"0:443:168","crate_id":0,"name":"Item","span":{"filename":"src/lib.rs","begin":[2419,0],"end":[2423,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"0:226:743":{"id":"0:226:743","crate_id":0,"name":"from","span":{"filename":"src/lib.rs","begin":[2020,4],"end":[2022,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["vec",{"resolved_path":{"name":"Vec","id":"4:6912:268","args":{"angle_bracketed":{"args":[{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"A"},"trait":{"name":"","id":"0:328:1919","args":null}}}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"SmallVec","id":"0:118:1854","args":{"angle_bracketed":{"args":[{"type":{"generic":"A"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:568:168":{"id":"0:568:168","crate_id":0,"name":"Item","span":{"filename":"src/lib.rs","begin":[2419,0],"end":[2423,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"0:519:1468":{"id":"0:519:1468","crate_id":0,"name":"size","span":{"filename":"src/lib.rs","begin":[2419,0],"end":[2423,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:539:1468":{"id":"0:539:1468","crate_id":0,"name":"size","span":{"filename":"src/lib.rs","begin":[2419,0],"end":[2423,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12526:17280":{"id":"1:12526:17280","crate_id":1,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferr√∂s\".eq_ignore_ascii_case(\"FERR√∂S\"));\nassert!(!\"Ferr√∂s\".eq_ignore_ascii_case(\"FERR√ñS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:224":{"id":"0:224","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[2018,0],"end":[2023,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Array","id":"0:328:1919","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2544:138","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Vec","id":"4:6912:268","args":{"angle_bracketed":{"args":[{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"A"},"trait":{"name":"Array","id":"0:328:1919","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"SmallVec","id":"0:118:1854","args":{"angle_bracketed":{"args":[{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:226:743"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:373:168":{"id":"0:373:168","crate_id":0,"name":"Item","span":{"filename":"src/lib.rs","begin":[2419,0],"end":[2423,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"b:1:2567-0:281:2374":{"id":"b:1:2567-0:281:2374","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2544:138","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2541:157","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:281:2374","args":{"angle_bracketed":{"args":[{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2570:2327"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2567-0:118:1854":{"id":"b:1:2567-0:118:1854","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2544:138","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2541:157","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"SmallVec","id":"0:118:1854","args":{"angle_bracketed":{"args":[{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2570:2327"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:628:168":{"id":"0:628:168","crate_id":0,"name":"Item","span":{"filename":"src/lib.rs","begin":[2419,0],"end":[2423,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"0:325:2374":{"id":"0:325:2374","crate_id":0,"name":"IntoIter","span":{"filename":"src/lib.rs","begin":[2318,4],"end":[2318,48]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"IterMut","id":"1:10368:2378","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"A"},"trait":{"name":"Array","id":"0:328:1919","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}}}}},"0:138:2065":{"id":"0:138:2065","crate_id":0,"name":"spilled","span":{"filename":"src/lib.rs","begin":[1005,4],"end":[1007,5]},"visibility":"public","docs":"Returns `true` if the data has spilled into a separate heap-allocated buffer.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:77:168":{"id":"0:77:168","crate_id":0,"name":"Item","span":{"filename":"src/lib.rs","begin":[371,4],"end":[371,24]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"T"},"trait":{"name":"Array","id":"0:328:1919","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}},"0:555":{"id":"0:555","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[2419,0],"end":[2423,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Array","id":"0:328:1919","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"array":{"type":{"generic":"T"},"len":"256"}},"items":["0:558:168","0:559:1468"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:230":{"id":"0:230","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[2032,0],"end":[2038,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Array","id":"0:328:1919","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"I","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:10196:244","args":{"angle_bracketed":{"args":[{"type":{"slice":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"A"},"trait":{"name":"","id":"0:328:1919","args":null}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Index","id":"1:3073:2360","args":{"angle_bracketed":{"args":[{"type":{"generic":"I"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"SmallVec","id":"0:118:1854","args":{"angle_bracketed":{"args":[{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:233:203","0:234:822"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:383:168":{"id":"0:383:168","crate_id":0,"name":"Item","span":{"filename":"src/lib.rs","begin":[2419,0],"end":[2423,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"1:12487:17450":{"id":"1:12487:17450","crate_id":1,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"1:12106:6763","`DoubleEndedIterator`":"1:7518:126","prim@char":"1:52078:449","str::rmatch_indices":"1:12490:17451"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"MatchIndices","id":"1:43676:4917","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12111:4778","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:538:168":{"id":"0:538:168","crate_id":0,"name":"Item","span":{"filename":"src/lib.rs","begin":[2419,0],"end":[2423,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"0:439:1468":{"id":"0:439:1468","crate_id":0,"name":"size","span":{"filename":"src/lib.rs","begin":[2419,0],"end":[2423,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:187:2252":{"id":"0:187:2252","crate_id":0,"name":"resize_with","span":{"filename":"src/lib.rs","begin":[1620,4],"end":[1635,5]},"visibility":"public","docs":"Resizes the `SmallVec` in-place so that `len` is equal to `new_len`.\n\nIf `new_len` is greater than `len`, the `SmallVec` is extended by the difference, with each\nadditional slot filled with the result of calling the closure `f`. The return values from `f`\n\nIf `new_len` is less than `len`, the `SmallVec` is simply truncated.\n\nThis method uses a closure to create new values on every push. If you'd rather `Clone` a given\nvalue, use `resize`. If you want to use the `Default` trait to generate values, you can pass\n`Default::default()` as the second argument.\n\nAdded for std::vec::Vec compatibility (added in Rust 1.33.0)\n\n```\n# use smallvec::{smallvec, SmallVec};\nlet mut vec : SmallVec<[_; 4]> = smallvec![1, 2, 3];\nvec.resize_with(5, Default::default);\nassert_eq!(&*vec, &[1, 2, 3, 0, 0]);\n\nlet mut vec : SmallVec<[_; 4]> = smallvec![];\nlet mut p = 1;\nvec.resize_with(4, || { p *= 2; p });\nassert_eq!(&*vec, &[2, 4, 8, 16]);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["new_len",{"primitive":"usize"}],["f",{"generic":"F"}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:3041:1944","args":{"parenthesized":{"inputs":[],"output":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"A"},"trait":{"name":"","id":"0:328:1919","args":null}}}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:454:1468":{"id":"0:454:1468","crate_id":0,"name":"size","span":{"filename":"src/lib.rs","begin":[2419,0],"end":[2423,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3412-0:363:1893":{"id":"b:1:3412-0:363:1893","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:2783:2755","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3410:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"CollectionAllocErr","id":"0:363:1893","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3414:1602"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:550":{"id":"0:550","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[2419,0],"end":[2423,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Array","id":"0:328:1919","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"array":{"type":{"generic":"T"},"len":"128"}},"items":["0:553:168","0:554:1468"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:510":{"id":"0:510","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[2419,0],"end":[2423,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Array","id":"0:328:1919","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"array":{"type":{"generic":"T"},"len":"28"}},"items":["0:513:168","0:514:1468"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2582-0:363:1893":{"id":"b:1:2582-0:363:1893","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2541:157","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2551:261","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"CollectionAllocErr","id":"0:363:1893","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2585:133","1:2586:1587"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:177:2221":{"id":"0:177:2221","crate_id":0,"name":"retain_mut","span":{"filename":"src/lib.rs","begin":[1542,4],"end":[1544,5]},"visibility":"public","docs":"Retains only the elements specified by the predicate.\n\nThis method is identical in behaviour to [`retain`]; it is included only\nto maintain api-compatability with `std::Vec`, where the methods are\nseparate for historical reasons.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["f",{"generic":"F"}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:3041:1944","args":{"parenthesized":{"inputs":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"A"},"trait":{"name":"","id":"0:328:1919","args":null}}}}}],"output":{"primitive":"bool"}}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:344:2433":{"id":"0:344:2433","crate_id":0,"name":"ToSmallVec","span":{"filename":"src/lib.rs","begin":[2426,0],"end":[2429,1]},"visibility":"public","docs":"Convenience trait for constructing a `SmallVec`","links":{},"attrs":[],"deprecation":null,"inner":{"trait":{"is_auto":false,"is_unsafe":false,"items":["0:346:2435"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Array","id":"0:328:1919","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":["0:347"]}}},"0:614:1468":{"id":"0:614:1468","crate_id":0,"name":"size","span":{"filename":"src/lib.rs","begin":[2419,0],"end":[2423,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:634:1468":{"id":"0:634:1468","crate_id":0,"name":"size","span":{"filename":"src/lib.rs","begin":[2419,0],"end":[2423,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12490:17451":{"id":"1:12490:17451","crate_id":1,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"1:12106:6763","`DoubleEndedIterator`":"1:7518:126","prim@char":"1:52078:449","str::match_indices":"1:12487:17450"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatchIndices","id":"1:43694:4918","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12111:4778","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12111:4778","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12126:6769","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:144:2133":{"id":"0:144:2133","crate_id":0,"name":"append","span":{"filename":"src/lib.rs","begin":[1160,4],"end":[1165,5]},"visibility":"public","docs":"Moves all the elements of `other` into `self`, leaving `other` empty.\n\n# Example\n\n```\n# use smallvec::{SmallVec, smallvec};\nlet mut v0: SmallVec<[u8; 16]> = smallvec![1, 2, 3];\nlet mut v1: SmallVec<[u8; 32]> = smallvec![4, 5, 6];\nv0.append(&mut v1);\nassert_eq!(*v0, [1, 2, 3, 4, 5, 6]);\nassert_eq!(*v1, []);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"SmallVec","id":"0:118:1854","args":{"angle_bracketed":{"args":[{"type":{"generic":"B"}}],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"B","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"B"},"bounds":[{"trait_bound":{"trait":{"name":"Array","id":"0:328:1919","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"A"},"trait":{"name":"","id":"0:328:1919","args":null}}}}}}]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:309:1923":{"id":"0:309:1923","crate_id":0,"name":"as_slice","span":{"filename":"src/lib.rs","begin":[2280,4],"end":[2283,5]},"visibility":"public","docs":"Returns the remaining items of this iterator as a slice.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"A"},"trait":{"name":"","id":"0:328:1919","args":null}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:316":{"id":"0:316","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[2309,0],"end":[2315,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Array","id":"0:328:1919","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"1:7480:160","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"resolved_path":{"name":"SmallVec","id":"0:118:1854","args":{"angle_bracketed":{"args":[{"type":{"generic":"A"}}],"bindings":[]}}}}}},"items":["0:319:2374","0:320:168","0:321:837"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:255:60":{"id":"0:255:60","crate_id":0,"name":"default","span":{"filename":"src/lib.rs","begin":[2102,4],"end":[2104,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"SmallVec","id":"0:118:1854","args":{"angle_bracketed":{"args":[{"type":{"generic":"A"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:220":{"id":"0:220","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[2001,0],"end":[2016,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Array","id":"0:328:1919","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"A"},"trait":{"name":"","id":"0:328:1919","args":null}}},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2277:108","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2544:138","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"slice":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"A"},"trait":{"name":"Array","id":"0:328:1919","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"SmallVec","id":"0:118:1854","args":{"angle_bracketed":{"args":[{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:223:743"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:548:168":{"id":"0:548:168","crate_id":0,"name":"Item","span":{"filename":"src/lib.rs","begin":[2419,0],"end":[2423,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"1:12433:13770":{"id":"1:12433:13770","crate_id":1,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"1:12432:13781"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitAsciiWhitespace","id":"1:43809:4924","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:508:168":{"id":"0:508:168","crate_id":0,"name":"Item","span":{"filename":"src/lib.rs","begin":[2419,0],"end":[2423,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"a:1:2776:242-0:281:2374":{"id":"a:1:2776:242-0:281:2374","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"A"},"trait":{"name":"Array","id":"0:328:1919","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:2776:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:2776:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:281:2374","args":{"angle_bracketed":{"args":[{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:311":{"id":"0:311","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[2292,0],"end":[2307,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Array","id":"0:328:1919","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"1:7480:160","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"SmallVec","id":"0:118:1854","args":{"angle_bracketed":{"args":[{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:313:2374","0:314:168","0:315:837"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2571-0:363:1893":{"id":"b:1:2571-0:363:1893","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2544:138","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"CollectionAllocErr","id":"0:363:1893","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2573:743"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:444:1468":{"id":"0:444:1468","crate_id":0,"name":"size","span":{"filename":"src/lib.rs","begin":[2419,0],"end":[2423,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2571-0:281:2374":{"id":"b:1:2571-0:281:2374","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2544:138","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:281:2374","args":{"angle_bracketed":{"args":[{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2573:743"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:500":{"id":"0:500","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[2419,0],"end":[2423,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Array","id":"0:328:1919","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"array":{"type":{"generic":"T"},"len":"26"}},"items":["0:503:168","0:504:1468"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:314:168":{"id":"0:314:168","crate_id":0,"name":"Item","span":{"filename":"src/lib.rs","begin":[2294,4],"end":[2294,24]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"A"},"trait":{"name":"Array","id":"0:328:1919","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}},"0:368":{"id":"0:368","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[298,9],"end":[298,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:9531:116","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"CollectionAllocErr","id":"0:363:1893","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:369:717"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:219:2332":{"id":"0:219:2332","crate_id":0,"name":"borrow_mut","span":{"filename":"src/lib.rs","begin":[1892,4],"end":[1894,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"A"},"trait":{"name":"","id":"0:328:1919","args":null}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12413:16114":{"id":"1:12413:16114","crate_id":1,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"1:11666:6771"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12429:4792":{"id":"1:12429:4792","crate_id":1,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"yÃÜ\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'yÃÜ'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:52078:449"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chars","id":"1:43496:4784","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"4:684:12133":{"id":"4:684:12133","crate_id":4,"name":"clone_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["target",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12495:17453":{"id":"1:12495:17453","crate_id":1,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  ◊¢◊ë◊®◊ô◊™  \";\nassert!(Some('◊¢') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12529:17463":{"id":"1:12529:17463","crate_id":1,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"‚ù§\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"‚ù§\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"‚ù§\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"‚ù§\\n!\".escape_debug().to_string(), \"‚ù§\\\\n!\");\n```","links":{"`char::escape_debug`":"1:4573:17463"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDebug","id":"1:43825:4854","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:564:1468":{"id":"0:564:1468","crate_id":0,"name":"size","span":{"filename":"src/lib.rs","begin":[2419,0],"end":[2423,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:478:168":{"id":"0:478:168","crate_id":0,"name":"Item","span":{"filename":"src/lib.rs","begin":[2419,0],"end":[2423,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"0:458:168":{"id":"0:458:168","crate_id":0,"name":"Item","span":{"filename":"src/lib.rs","begin":[2419,0],"end":[2423,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"1:12519:17461":{"id":"1:12519:17461","crate_id":1,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:52078:449","self::pattern":"1:12106:6763"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12111:4778","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12111:4778","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12126:6769","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:298:1015":{"id":"0:298:1015","crate_id":0,"name":"next","span":{"filename":"src/lib.rs","begin":[2242,4],"end":[2252,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41564:198","args":{"angle_bracketed":{"args":[{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"A"},"trait":{"name":"","id":"0:328:1919","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12443:16169":{"id":"1:12443:16169","crate_id":1,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"1:52078:449","self::pattern":"1:12106:6763"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12111:4778","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12111:4778","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12126:6769","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:4:680-0:118:1854":{"id":"b:4:680-0:118:1854","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2277:108","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"4:676:255","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"SmallVec","id":"0:118:1854","args":{"angle_bracketed":{"args":[{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["4:682:4567","4:683:12132","4:684:12133"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:633:168":{"id":"0:633:168","crate_id":0,"name":"Item","span":{"filename":"src/lib.rs","begin":[2419,0],"end":[2423,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"0:80:1926":{"id":"0:80:1926","crate_id":0,"name":"size_hint","span":{"filename":"src/lib.rs","begin":[381,4],"end":[383,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"tuple":[{"primitive":"usize"},{"resolved_path":{"name":"Option","id":"1:41564:198","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:518:168":{"id":"0:518:168","crate_id":0,"name":"Item","span":{"filename":"src/lib.rs","begin":[2419,0],"end":[2423,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"1:12426:17444":{"id":"1:12426:17444","crate_id":1,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"1:52084:1505","crate::ops::IndexMut":"1:3077:2361","str::slice_unchecked":"1:12425:17443"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:153:2163":{"id":"0:153:2163","crate_id":0,"name":"shrink_to_fit","span":{"filename":"src/lib.rs","begin":[1279,4],"end":[1295,5]},"visibility":"public","docs":"Shrink the capacity of the vector as much as possible.\n\nWhen possible, this will move data from an external heap buffer to the vector's inline\nstorage.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2577-0:281:2374":{"id":"b:1:2577-0:281:2374","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2551:261","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2547:262","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:281:2374","args":{"angle_bracketed":{"args":[{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2580:133","1:2581:1589"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:12478:16167":{"id":"1:12478:16167","crate_id":1,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41564:198","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12111:4778","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12111:4778","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12126:6769","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:269":{"id":"0:269","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[2172,0],"end":[2180,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Array","id":"0:328:1919","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"A"},"trait":{"name":"","id":"0:328:1919","args":null}}},"bounds":[{"trait_bound":{"trait":{"name":"PartialOrd","id":"1:2367:206","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["ge","lt","le","gt"],"trait":{"name":"PartialOrd","id":"1:2367:206","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"SmallVec","id":"0:118:1854","args":{"angle_bracketed":{"args":[{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:271:1099"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:394:1468":{"id":"0:394:1468","crate_id":0,"name":"size","span":{"filename":"src/lib.rs","begin":[2419,0],"end":[2423,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:3414:1602":{"id":"1:3414:1602","crate_id":1,"name":"type_id","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"TypeId","id":"1:39333:4842","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:375":{"id":"0:375","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[2419,0],"end":[2423,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Array","id":"0:328:1919","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"array":{"type":{"generic":"T"},"len":"1"}},"items":["0:378:168","0:379:1468"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:499:1468":{"id":"0:499:1468","crate_id":0,"name":"size","span":{"filename":"src/lib.rs","begin":[2419,0],"end":[2423,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:468:168":{"id":"0:468:168","crate_id":0,"name":"Item","span":{"filename":"src/lib.rs","begin":[2419,0],"end":[2423,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"0:428:168":{"id":"0:428:168","crate_id":0,"name":"Item","span":{"filename":"src/lib.rs","begin":[2419,0],"end":[2423,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"0:455":{"id":"0:455","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[2419,0],"end":[2423,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Array","id":"0:328:1919","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"array":{"type":{"generic":"T"},"len":"17"}},"items":["0:458:168","0:459:1468"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:248:2135":{"id":"0:248:2135","crate_id":0,"name":"extend","span":{"filename":"src/lib.rs","begin":[2066,4],"end":[2088,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["iterable",{"generic":"I"}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"1:7480:160","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"A"},"trait":{"name":"","id":"0:328:1919","args":null}}}}}}]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:328:1919":{"id":"0:328:1919","crate_id":0,"name":"Array","span":{"filename":"src/lib.rs","begin":[2326,0],"end":[2331,1]},"visibility":"public","docs":"Types that can be used as the backing store for a SmallVec","links":{},"attrs":[],"deprecation":null,"inner":{"trait":{"is_auto":false,"is_unsafe":true,"items":["0:329:168","0:330:1468"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":["0:450","0:605","0:570","0:550","0:430","0:525","0:410","0:490","0:445","0:460","0:420","0:400","0:425","0:470","0:455","0:625","0:480","0:435","0:610","0:545","0:520","0:540","0:465","0:510","0:555","0:415","0:580","0:390","0:475","0:405","0:375","0:380","0:630","0:560","0:600","0:495","0:500","0:595","0:620","0:585","0:565","0:505","0:530","0:485","0:575","0:395","0:370","0:615","0:535","0:590","0:515","0:440","0:385"]}}},"0:252:717":{"id":"0:252:717","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[2095,4],"end":[2097,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:9506:137","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:9487:231","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:464:1468":{"id":"0:464:1468","crate_id":0,"name":"size","span":{"filename":"src/lib.rs","begin":[2419,0],"end":[2423,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12525:17278":{"id":"1:12525:17278","crate_id":1,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"1:39520:12247","Self::is_ascii":"1:12524:17277"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41564:198","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"AsciiChar","id":"1:39520:12247","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12524:17277":{"id":"1:12524:17277","crate_id":1,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Gr√º√üe, J√ºrgen ‚ù§\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12531:6650":{"id":"1:12531:6650","crate_id":1,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"‚ù§\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"‚ù§\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"‚ù§\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"1:4574:6650"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDefault","id":"1:43834:4746","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12497:17454":{"id":"1:12497:17454","crate_id":1,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  ◊¢◊ë◊®◊ô◊™  \";\nassert!(Some('◊™') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:122":{"id":"0:122","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[780,0],"end":[1735,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Array","id":"0:328:1919","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"SmallVec","id":"0:118:1854","args":{"angle_bracketed":{"args":[{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:124:1001","0:125:2022","0:126:1859","0:127:2036","0:128:2042","0:129:2043","0:130:1936","0:132:1857","0:133:871","0:134:2061","0:135:1913","0:138:2065","0:139:1964","0:142:1858","0:143:2123","0:144:2133","0:146:2139","0:147:2141","0:148:2151","0:150:2153","0:151:2023","0:152:2159","0:153:2163","0:154:2169","0:155:1923","0:156:2174","0:157:2178","0:159:2182","0:160:2185","0:161:2188","0:162:2194","0:172:2205","0:173:2210","0:174:1989","0:175:2217","0:177:2221","0:179:2223","0:181:2224","0:183:2234","0:187:2252","0:189:2089","0:190:341","0:191:340"],"negative":false,"synthetic":false,"blanket_impl":null}}},"4:5532:18135":{"id":"4:5532:18135","crate_id":4,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"ÂÜúÂéÜÊñ∞Âπ¥\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tsch√º√ü\";\n\nassert_eq!(\"TSCH√úSS\", s.to_uppercase());\n```","links":{"`String`":"4:7487:248"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"4:7487:248","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12527:17281":{"id":"1:12527:17281","crate_id":1,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Gr√º√üe, J√ºrgen ‚ù§\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GR√º√üE, J√ºRGEN ‚ù§\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12446:3145":{"id":"1:12446:3145","crate_id":1,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('√©'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"1:41566:196","prim@char":"1:52078:449","self::pattern":"1:12106:6763"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41564:198","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12111:4778","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12408:17440":{"id":"1:12408:17440","crate_id":1,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji üßë‚Äçüî¨ (scientist) could be split so that the string only\nincludes üßë (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"‚ù§Ô∏èüß°üíõüíöüíôüíú\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"‚ù§Ô∏èüß°\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12454:16157":{"id":"1:12454:16157","crate_id":1,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"1:12106:6763","`DoubleEndedIterator`":"1:7518:126","prim@char":"1:52078:449","str::split_whitespace":"1:12432:13781","str::rsplit":"1:12460:16160"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Split","id":"1:43526:2844","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12111:4778","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:194:2309":{"id":"0:194:2309","crate_id":0,"name":"from_slice","span":{"filename":"src/lib.rs","begin":[1744,4],"end":[1769,5]},"visibility":"public","docs":"Copy the elements from a slice into a new `SmallVec`.\n\nFor slices of `Copy` types, this is more efficient than `SmallVec::from(slice)`.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["slice",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"A"},"trait":{"name":"","id":"0:328:1919","args":null}}}}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:509:1468":{"id":"0:509:1468","crate_id":0,"name":"size","span":{"filename":"src/lib.rs","begin":[2419,0],"end":[2423,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:238:823":{"id":"0:238:823","crate_id":0,"name":"index_mut","span":{"filename":"src/lib.rs","begin":[2041,4],"end":[2043,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["index",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"","id":"1:10196:244","args":null}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:160:2185":{"id":"0:160:2185","crate_id":0,"name":"remove","span":{"filename":"src/lib.rs","begin":[1353,4],"end":[1364,5]},"visibility":"public","docs":"Remove and return the element at position `index`, shifting all elements after it to the\nleft.\n\nPanics if `index` is out of bounds.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"A"},"trait":{"name":"","id":"0:328:1919","args":null}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:2833:2866-0:363:1893":{"id":"a:1:2833:2866-0:363:1893","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:2833:2866","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"CollectionAllocErr","id":"0:363:1893","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:173:2210":{"id":"0:173:2210","crate_id":0,"name":"into_boxed_slice","span":{"filename":"src/lib.rs","begin":[1498,4],"end":[1500,5]},"visibility":"public","docs":"Converts a `SmallVec` into a `Box<[T]>` without reallocating if the `SmallVec` has already spilled\nonto the heap.\n\nNote that this will drop any excess capacity.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Box","id":"4:276:1803","args":{"angle_bracketed":{"args":[{"type":{"slice":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"A"},"trait":{"name":"","id":"0:328:1919","args":null}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:490":{"id":"0:490","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[2419,0],"end":[2423,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Array","id":"0:328:1919","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"array":{"type":{"generic":"T"},"len":"24"}},"items":["0:493:168","0:494:1468"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:130:1936":{"id":"0:130:1936","crate_id":0,"name":"set_len","span":{"filename":"src/lib.rs","begin":[923,4],"end":[926,5]},"visibility":"public","docs":"Sets the length of a vector.\n\nThis will explicitly set the size of the vector, without actually\nmodifying its buffers, so it is up to the caller to ensure that the\nvector is actually the specified size.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["new_len",{"primitive":"usize"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:594:1468":{"id":"0:594:1468","crate_id":0,"name":"size","span":{"filename":"src/lib.rs","begin":[2419,0],"end":[2423,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:68":{"id":"0:68","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[367,0],"end":[367,57]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2793:252","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Array","id":"0:328:1919","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2793:252","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Drain","id":"0:57:1917","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:326:168":{"id":"0:326:168","crate_id":0,"name":"Item","span":{"filename":"src/lib.rs","begin":[2319,4],"end":[2319,32]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"borrowed_ref":{"lifetime":"'a","mutable":true,"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"A"},"trait":{"name":"Array","id":"0:328:1919","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}}},"b:1:2577-0:118:1854":{"id":"b:1:2577-0:118:1854","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2551:261","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2547:262","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"SmallVec","id":"0:118:1854","args":{"angle_bracketed":{"args":[{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2580:133","1:2581:1589"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:203:254":{"id":"0:203:254","crate_id":0,"name":"Target","span":{"filename":"src/lib.rs","begin":[1849,4],"end":[1849,28]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"slice":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"A"},"trait":{"name":"Array","id":"0:328:1919","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}},"a:1:8607:2966-0:118:1854":{"id":"a:1:8607:2966-0:118:1854","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:8607:2966","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"A"},"trait":{"name":"Array","id":"0:328:1919","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:8607:2966","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:8607:2966","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"SmallVec","id":"0:118:1854","args":{"angle_bracketed":{"args":[{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:256":{"id":"0:256","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[2122,0],"end":[2133,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(feature = \"may_dangle\"))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Array","id":"0:328:1919","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Drop","id":"1:3034:1929","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"SmallVec","id":"0:118:1854","args":{"angle_bracketed":{"args":[{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:258:632"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:329:168":{"id":"0:329:168","crate_id":0,"name":"Item","span":{"filename":"src/lib.rs","begin":[2328,4],"end":[2328,14]},"visibility":"default","docs":"The type of the array's elements.","links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":null}}},"1:12463:17447":{"id":"1:12463:17447","crate_id":1,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"1:12106:6763","str::split":"1:12454:16157","prim@char":"1:52078:449","`DoubleEndedIterator`":"1:7518:126","str::rsplit_terminator":"1:12466:17448"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitTerminator","id":"1:43576:4915","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12111:4778","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:7487:2374":{"id":"1:7487:2374","crate_id":1,"name":"IntoIter","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"I"}}}},"0:488:168":{"id":"0:488:168","crate_id":0,"name":"Item","span":{"filename":"src/lib.rs","begin":[2419,0],"end":[2423,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"0:179:2223":{"id":"0:179:2223","crate_id":0,"name":"dedup","span":{"filename":"src/lib.rs","begin":[1547,4],"end":[1552,5]},"visibility":"public","docs":"Removes consecutive duplicate elements.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[{"bound_predicate":{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"A"},"trait":{"name":"","id":"0:328:1919","args":null}}},"bounds":[{"trait_bound":{"trait":{"name":"PartialEq","id":"1:2325:205","args":{"angle_bracketed":{"args":[{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"A"},"trait":{"name":"","id":"0:328:1919","args":null}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:2793:252-0:281:2374":{"id":"a:1:2793:252-0:281:2374","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2793:252","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2793:252","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:281:2374","args":{"angle_bracketed":{"args":[{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:408:168":{"id":"0:408:168","crate_id":0,"name":"Item","span":{"filename":"src/lib.rs","begin":[2419,0],"end":[2423,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"0:253":{"id":"0:253","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[2100,0],"end":[2105,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Array","id":"0:328:1919","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"1:2618:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"SmallVec","id":"0:118:1854","args":{"angle_bracketed":{"args":[{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:255:60"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12466:17448":{"id":"1:12466:17448","crate_id":1,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"1:12106:6763","str::split":"1:12454:16157","prim@char":"1:52078:449","str::split_terminator":"1:12463:17447"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitTerminator","id":"1:43594:4916","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12111:4778","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12111:4778","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12126:6769","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12430:4936":{"id":"1:12430:4936","crate_id":1,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"yÃÜes\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'yÃÜ')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the previous character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:52078:449"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CharIndices","id":"1:43502:4913","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:420":{"id":"0:420","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[2419,0],"end":[2423,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Array","id":"0:328:1919","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"array":{"type":{"generic":"T"},"len":"10"}},"items":["0:423:168","0:424:1468"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:156:2174":{"id":"0:156:2174","crate_id":0,"name":"as_mut_slice","span":{"filename":"src/lib.rs","begin":[1326,4],"end":[1328,5]},"visibility":"public","docs":"Extracts a mutable slice of the entire vector.\n\nEquivalent to `&mut s[..]`.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"A"},"trait":{"name":"","id":"0:328:1919","args":null}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:398:168":{"id":"0:398:168","crate_id":0,"name":"Item","span":{"filename":"src/lib.rs","begin":[2419,0],"end":[2423,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"0:425":{"id":"0:425","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[2419,0],"end":[2423,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Array","id":"0:328:1919","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"array":{"type":{"generic":"T"},"len":"11"}},"items":["0:428:168","0:429:1468"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:604:1468":{"id":"0:604:1468","crate_id":0,"name":"size","span":{"filename":"src/lib.rs","begin":[2419,0],"end":[2423,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:189:2089":{"id":"0:189:2089","crate_id":0,"name":"from_raw_parts","span":{"filename":"src/lib.rs","begin":[1706,4],"end":[1718,5]},"visibility":"public","docs":"Creates a `SmallVec` directly from the raw components of another\n`SmallVec`.\n\n# Safety\n\nThis is highly unsafe, due to the number of invariants that aren't\nchecked:\n\n* `ptr` needs to have been previously allocated via `SmallVec` for its\n  spilled storage (at least, it's highly likely to be incorrect if it\n  wasn't).\n* `ptr`'s `A::Item` type needs to be the same size and alignment that\n  it was allocated with\n* `length` needs to be less than or equal to `capacity`.\n* `capacity` needs to be the capacity that the pointer was allocated\n  with.\n\nViolating these may cause problems like corrupting the allocator's\ninternal data structures.\n\nAdditionally, `capacity` must be greater than the amount of inline\nstorage `A` has; that is, the new `SmallVec` must need to spill over\ninto heap allocated storage. This condition is asserted against.\n\nThe ownership of `ptr` is effectively transferred to the\n`SmallVec` which may then deallocate, reallocate or change the\ncontents of memory pointed to by the pointer at will. Ensure\nthat nothing else uses the pointer after calling this\nfunction.\n\n# Examples\n\n```\n# #[macro_use] extern crate smallvec;\n# use smallvec::SmallVec;\nuse std::mem;\nuse std::ptr;\n\nfn main() {\n    let mut v: SmallVec<[_; 1]> = smallvec![1, 2, 3];\n\n    // Pull out the important parts of `v`.\n    let p = v.as_mut_ptr();\n    let len = v.len();\n    let cap = v.capacity();\n    let spilled = v.spilled();\n\n    unsafe {\n        // Forget all about `v`. The heap allocation that stored the\n        // three values won't be deallocated.\n        mem::forget(v);\n\n        // Overwrite memory with [4, 5, 6].\n        //\n        // This is only safe if `spilled` is true! Otherwise, we are\n        // writing into the old `SmallVec`'s inline storage on the\n        // stack.\n        assert!(spilled);\n        for i in 0..len {\n            ptr::write(p.add(i), 4 + i);\n        }\n\n        // Put everything back together into a SmallVec with a different\n        // amount of inline storage, but which is still less than `cap`.\n        let rebuilt = SmallVec::<[_; 2]>::from_raw_parts(p, len, cap);\n        assert_eq!(&*rebuilt, &[4, 5, 6]);\n    }\n}","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["ptr",{"raw_pointer":{"mutable":true,"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"A"},"trait":{"name":"","id":"0:328:1919","args":null}}}}}],["length",{"primitive":"usize"}],["capacity",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"SmallVec","id":"0:118:1854","args":{"angle_bracketed":{"args":[{"type":{"generic":"A"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:418:168":{"id":"0:418:168","crate_id":0,"name":"Item","span":{"filename":"src/lib.rs","begin":[2419,0],"end":[2423,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"0:390":{"id":"0:390","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[2419,0],"end":[2423,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Array","id":"0:328:1919","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"array":{"type":{"generic":"T"},"len":"4"}},"items":["0:393:168","0:394:1468"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:291:453":{"id":"0:291:453","crate_id":0,"name":"clone","span":{"filename":"src/lib.rs","begin":[2227,4],"end":[2229,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"IntoIter","id":"0:281:2374","args":{"angle_bracketed":{"args":[{"type":{"generic":"A"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:609:1468":{"id":"0:609:1468","crate_id":0,"name":"size","span":{"filename":"src/lib.rs","begin":[2419,0],"end":[2423,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:96:632":{"id":"0:96:632","crate_id":0,"name":"drop","span":{"filename":"src/lib.rs","begin":[405,4],"end":[426,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:395":{"id":"0:395","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[2419,0],"end":[2423,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Array","id":"0:328:1919","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"array":{"type":{"generic":"T"},"len":"5"}},"items":["0:398:168","0:399:1468"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:590":{"id":"0:590","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[2419,0],"end":[2423,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Array","id":"0:328:1919","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"array":{"type":{"generic":"T"},"len":"16384"}},"items":["0:593:168","0:594:1468"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:2586:1587":{"id":"1:2586:1587","crate_id":1,"name":"try_from","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["value",{"generic":"U"}]],"output":{"resolved_path":{"name":"Result","id":"1:41709:231","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"T"},"trait":{"name":"TryFrom","id":"1:2551:261","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:161:2188":{"id":"0:161:2188","crate_id":0,"name":"insert","span":{"filename":"src/lib.rs","begin":[1369,4],"end":[1391,5]},"visibility":"public","docs":"Insert an element at position `index`, shifting all elements after it to the right.\n\nPanics if `index > len`.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}],["element",{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"A"},"trait":{"name":"","id":"0:328:1919","args":null}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"4:5534:1807":{"id":"4:5534:1807","crate_id":4,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"4:7487:248"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"4:7487:248","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:459:1468":{"id":"0:459:1468","crate_id":0,"name":"size","span":{"filename":"src/lib.rs","begin":[2419,0],"end":[2423,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:503:168":{"id":"0:503:168","crate_id":0,"name":"Item","span":{"filename":"src/lib.rs","begin":[2419,0],"end":[2423,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"0:595":{"id":"0:595","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[2419,0],"end":[2423,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Array","id":"0:328:1919","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"array":{"type":{"generic":"T"},"len":"24576"}},"items":["0:598:168","0:599:1468"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12434:17445":{"id":"1:12434:17445","crate_id":1,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nNote that any carriage return (`\\r`) not immediately followed by a\nline feed (`\\n`) does not split a line. These carriage returns are\nthereby included in the produced lines.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\r\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\n// Trailing carriage return is included in the last line\nassert_eq!(Some(\"baz\\r\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line does not require any ending:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Lines","id":"1:43780:4921","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:8606:2967-0:281:2374":{"id":"a:1:8606:2967-0:281:2374","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"UnwindSafe","id":"1:8606:2967","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"A"},"trait":{"name":"Array","id":"0:328:1919","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:8607:2966","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:8606:2967","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:281:2374","args":{"angle_bracketed":{"args":[{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:229:743":{"id":"0:229:743","crate_id":0,"name":"from","span":{"filename":"src/lib.rs","begin":[2027,4],"end":[2029,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["array",{"generic":"A"}]],"output":{"resolved_path":{"name":"SmallVec","id":"0:118:1854","args":{"angle_bracketed":{"args":[{"type":{"generic":"A"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:493:168":{"id":"0:493:168","crate_id":0,"name":"Item","span":{"filename":"src/lib.rs","begin":[2419,0],"end":[2423,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"4:5536:17427":{"id":"4:5536:17427","crate_id":4,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Gr√º√üe, J√ºrgen ‚ù§\";\n\nassert_eq!(\"gr√º√üe, j√ºrgen ‚ù§\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"1:12528:17282"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"4:7487:248","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:155:1923":{"id":"0:155:1923","crate_id":0,"name":"as_slice","span":{"filename":"src/lib.rs","begin":[1319,4],"end":[1321,5]},"visibility":"public","docs":"Extracts a slice containing the entire vector.\n\nEquivalent to `&s[..]`.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"A"},"trait":{"name":"","id":"0:328:1919","args":null}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:513:168":{"id":"0:513:168","crate_id":0,"name":"Item","span":{"filename":"src/lib.rs","begin":[2419,0],"end":[2423,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"0:322":{"id":"0:322","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[2317,0],"end":[2323,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Array","id":"0:328:1919","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"1:7480:160","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"borrowed_ref":{"lifetime":"'a","mutable":true,"type":{"resolved_path":{"name":"SmallVec","id":"0:118:1854","args":{"angle_bracketed":{"args":[{"type":{"generic":"A"}}],"bindings":[]}}}}}},"items":["0:325:2374","0:326:168","0:327:837"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:449:1468":{"id":"0:449:1468","crate_id":0,"name":"size","span":{"filename":"src/lib.rs","begin":[2419,0],"end":[2423,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:4:680-0:281:2374":{"id":"b:4:680-0:281:2374","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2277:108","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"4:676:255","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:281:2374","args":{"angle_bracketed":{"args":[{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["4:682:4567","4:683:12132","4:684:12133"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:525":{"id":"0:525","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[2419,0],"end":[2423,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Array","id":"0:328:1919","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"array":{"type":{"generic":"T"},"len":"31"}},"items":["0:528:168","0:529:1468"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:49:743":{"id":"0:49:743","crate_id":0,"name":"from","span":{"filename":"src/lib.rs","begin":[317,4],"end":[319,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["_",{"resolved_path":{"name":"LayoutErr","id":"1:12983:1801","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2261-0:57:1917":{"id":"b:1:2261-0:57:1917","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2783:2755","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2255:100","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Drain","id":"0:57:1917","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:2263:1804"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:569:1468":{"id":"0:569:1468","crate_id":0,"name":"size","span":{"filename":"src/lib.rs","begin":[2419,0],"end":[2423,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12513:17459":{"id":"1:12513:17459","crate_id":1,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:52078:449","self::pattern":"1:12106:6763"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12111:4778","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12111:4778","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12126:6769","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3412-0:281:2374":{"id":"b:1:3412-0:281:2374","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:2783:2755","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3410:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:281:2374","args":{"angle_bracketed":{"args":[{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:3414:1602"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:8607:2966-0:281:2374":{"id":"a:1:8607:2966-0:281:2374","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:8607:2966","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"A"},"trait":{"name":"Array","id":"0:328:1919","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:8607:2966","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:8607:2966","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:281:2374","args":{"angle_bracketed":{"args":[{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:423:168":{"id":"0:423:168","crate_id":0,"name":"Item","span":{"filename":"src/lib.rs","begin":[2419,0],"end":[2423,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"0:235":{"id":"0:235","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[2040,0],"end":[2044,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Array","id":"0:328:1919","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"I","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:10196:244","args":{"angle_bracketed":{"args":[{"type":{"slice":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"A"},"trait":{"name":"","id":"0:328:1919","args":null}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"IndexMut","id":"1:3077:2361","args":{"angle_bracketed":{"args":[{"type":{"generic":"I"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"SmallVec","id":"0:118:1854","args":{"angle_bracketed":{"args":[{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:238:823"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:199:2322":{"id":"0:199:2322","crate_id":0,"name":"resize","span":{"filename":"src/lib.rs","begin":[1811,4],"end":[1819,5]},"visibility":"public","docs":"Resizes the vector so that its length is equal to `len`.\n\nIf `len` is less than the current length, the vector simply truncated.\n\nIf `len` is greater than the current length, `value` is appended to the\nvector until its length equals `len`.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["len",{"primitive":"usize"}],["value",{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"A"},"trait":{"name":"","id":"0:328:1919","args":null}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:554:1468":{"id":"0:554:1468","crate_id":0,"name":"size","span":{"filename":"src/lib.rs","begin":[2419,0],"end":[2423,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2582-0:57:1917":{"id":"b:1:2582-0:57:1917","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2541:157","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2551:261","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Drain","id":"0:57:1917","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:2585:133","1:2586:1587"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:281:2374":{"id":"0:281:2374","crate_id":0,"name":"IntoIter","span":{"filename":"src/lib.rs","begin":[2208,0],"end":[2212,1]},"visibility":"public","docs":"An iterator that consumes a `SmallVec` and yields its items by value.\n\nReturned from [`SmallVec::into_iter`][1].\n\n[1]: struct.SmallVec.html#method.into_iter","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Array","id":"0:328:1919","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"impls":["0:307","a:1:2793:252-0:281:2374","a:1:2833:2866-0:281:2374","a:1:8606:2967-0:281:2374","a:1:2776:242-0:281:2374","a:1:8607:2966-0:281:2374","b:1:7484-0:281:2374","b:1:2264-0:281:2374","b:1:2571-0:281:2374","b:1:2261-0:281:2374","b:1:2567-0:281:2374","b:1:2577-0:281:2374","b:1:3412-0:281:2374","b:1:2582-0:281:2374","b:4:680-0:281:2374","0:300","0:305","0:295","0:289","0:303","0:286","0:292"]}}},"1:12406:2061":{"id":"1:12406:2061","crate_id":1,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:272":{"id":"0:272","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[2182,0],"end":[2190,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Array","id":"0:328:1919","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"A"},"trait":{"name":"","id":"0:328:1919","args":null}}},"bounds":[{"trait_bound":{"trait":{"name":"Ord","id":"1:2361:199","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["max","min","clamp"],"trait":{"name":"Ord","id":"1:2361:199","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"SmallVec","id":"0:118:1854","args":{"angle_bracketed":{"args":[{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:274:460"],"negative":false,"synthetic":false,"blanket_impl":null}}},"4:683:12132":{"id":"4:683:12132","crate_id":4,"name":"to_owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:623:168":{"id":"0:623:168","crate_id":0,"name":"Item","span":{"filename":"src/lib.rs","begin":[2419,0],"end":[2423,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"0:71":{"id":"0:71","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[368,0],"end":[368,57]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:2776:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Array","id":"0:328:1919","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:2776:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Drain","id":"0:57:1917","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:216:1804":{"id":"0:216:1804","crate_id":0,"name":"borrow","span":{"filename":"src/lib.rs","begin":[1885,4],"end":[1887,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"A"},"trait":{"name":"","id":"0:328:1919","args":null}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2261-0:281:2374":{"id":"b:1:2261-0:281:2374","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2783:2755","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2255:100","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:281:2374","args":{"angle_bracketed":{"args":[{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2263:1804"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:12432:13781":{"id":"1:12432:13781","crate_id":1,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"1:12433:13770"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitWhitespace","id":"1:43800:4923","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12504:17458":{"id":"1:12504:17458","crate_id":1,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:52078:449","self::pattern":"1:12106:6763"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12111:4778","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12404":{"id":"1:12404","crate_id":1,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["1:12405:871","1:12406:2061","1:12407:17439","1:12408:17440","1:12410:17441","1:12413:16114","1:12414:17442","1:12415:341","1:12416:340","1:12417:2363","1:12419:3101","1:12421:3102","1:12423:3103","1:12425:17443","1:12426:17444","1:12427:2368","1:12428:16150","1:12429:4792","1:12430:4936","1:12431:4610","1:12432:13781","1:12433:13770","1:12434:17445","1:12435:17446","1:12436:13805","1:12437:2202","1:12440:16168","1:12443:16169","1:12446:3145","1:12450:3111","1:12454:16157","1:12457:13791","1:12460:16160","1:12463:17447","1:12466:17448","1:12469:16162","1:12472:16164","1:12475:16166","1:12478:16167","1:12481:2594","1:12484:17449","1:12487:17450","1:12490:17451","1:12493:17452","1:12495:17453","1:12497:17454","1:12499:17455","1:12500:17456","1:12501:17457","1:12504:17458","1:12507:16170","1:12510:16171","1:12513:17459","1:12516:17460","1:12519:17461","1:12522:17462","1:12524:17277","1:12525:17278","1:12526:17280","1:12527:17281","1:12528:17282","1:12529:17463","1:12531:6650","1:12532:17464"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:3412-0:57:1917":{"id":"b:1:3412-0:57:1917","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:2783:2755","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3410:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Drain","id":"0:57:1917","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:3414:1602"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:585":{"id":"0:585","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[2419,0],"end":[2423,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Array","id":"0:328:1919","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"array":{"type":{"generic":"T"},"len":"8192"}},"items":["0:588:168","0:589:1468"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:135:1913":{"id":"0:135:1913","crate_id":0,"name":"capacity","span":{"filename":"src/lib.rs","begin":[968,4],"end":[970,5]},"visibility":"public","docs":"The number of items the vector can hold without reallocating","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:435":{"id":"0:435","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[2419,0],"end":[2423,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Array","id":"0:328:1919","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"array":{"type":{"generic":"T"},"len":"13"}},"items":["0:438:168","0:439:1468"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:533:168":{"id":"0:533:168","crate_id":0,"name":"Item","span":{"filename":"src/lib.rs","begin":[2419,0],"end":[2423,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"0:544:1468":{"id":"0:544:1468","crate_id":0,"name":"size","span":{"filename":"src/lib.rs","begin":[2419,0],"end":[2423,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:469:1468":{"id":"0:469:1468","crate_id":0,"name":"size","span":{"filename":"src/lib.rs","begin":[2419,0],"end":[2423,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:148:2151":{"id":"0:148:2151","crate_id":0,"name":"reserve","span":{"filename":"src/lib.rs","begin":[1224,4],"end":[1226,5]},"visibility":"public","docs":"Reserve capacity for `additional` more elements to be inserted.\n\nMay reserve more space to avoid frequent reallocations.\n\nPanics if the capacity computation overflows `usize`.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["additional",{"primitive":"usize"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12435:17446":{"id":"1:12435:17446","crate_id":1,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\", suggestion =\n\"lines\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinesAny","id":"1:43790:4922","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12407:17439":{"id":"1:12407:17439","crate_id":1,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\nassert!(s.is_char_boundary(0));\n// start of `ËÄÅ`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `√∂`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `ËÄÅ`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:618:168":{"id":"0:618:168","crate_id":0,"name":"Item","span":{"filename":"src/lib.rs","begin":[2419,0],"end":[2423,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"0:157:2178":{"id":"0:157:2178","crate_id":0,"name":"swap_remove","span":{"filename":"src/lib.rs","begin":[1336,4],"end":[1341,5]},"visibility":"public","docs":"Remove the element at position `index`, replacing it with the last element.\n\nThis does not preserve ordering, but is O(1).\n\nPanics if `index` is out of bounds.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"A"},"trait":{"name":"","id":"0:328:1919","args":null}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:2266:2332":{"id":"1:2266:2332","crate_id":1,"name":"borrow_mut","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2577-0:363:1893":{"id":"b:1:2577-0:363:1893","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2551:261","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2547:262","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"CollectionAllocErr","id":"0:363:1893","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2580:133","1:2581:1589"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"4:682:4567":{"id":"4:682:4567","crate_id":4,"name":"Owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"0:369:717":{"id":"0:369:717","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[298,9],"end":[298,14]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"1:9506:137","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"1:9487:231","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:553:168":{"id":"0:553:168","crate_id":0,"name":"Item","span":{"filename":"src/lib.rs","begin":[2419,0],"end":[2423,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"0:279":{"id":"0:279","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[2201,0],"end":[2201,65]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Array","id":"0:328:1919","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"A"},"trait":{"name":"","id":"0:328:1919","args":null}}},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:2776:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:2776:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"SmallVec","id":"0:118:1854","args":{"angle_bracketed":{"args":[{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:275":{"id":"0:275","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[2192,0],"end":[2199,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Array","id":"0:328:1919","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"A"},"trait":{"name":"","id":"0:328:1919","args":null}}},"bounds":[{"trait_bound":{"trait":{"name":"Hash","id":"1:9747:148","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["hash_slice"],"trait":{"name":"Hash","id":"1:9747:148","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"SmallVec","id":"0:118:1854","args":{"angle_bracketed":{"args":[{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:277:780"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:399:1468":{"id":"0:399:1468","crate_id":0,"name":"size","span":{"filename":"src/lib.rs","begin":[2419,0],"end":[2423,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:196:1891":{"id":"0:196:1891","crate_id":0,"name":"extend_from_slice","span":{"filename":"src/lib.rs","begin":[1795,4],"end":[1798,5]},"visibility":"public","docs":"Copy elements from a slice and append them to the vector.\n\nFor slices of `Copy` types, this is more efficient than `extend`.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["slice",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"A"},"trait":{"name":"","id":"0:328:1919","args":null}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:277:780":{"id":"0:277:780","crate_id":0,"name":"hash","span":{"filename":"src/lib.rs","begin":[2196,4],"end":[2198,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["state",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"H"}}}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"H","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Hasher","id":"1:9755:152","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:470":{"id":"0:470","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[2419,0],"end":[2423,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Array","id":"0:328:1919","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"array":{"type":{"generic":"T"},"len":"20"}},"items":["0:473:168","0:474:1468"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:363:1893":{"id":"0:363:1893","crate_id":0,"name":"CollectionAllocErr","span":{"filename":"src/lib.rs","begin":[299,0],"end":[307,1]},"visibility":"public","docs":"Error type for APIs with fallible heap allocation","links":{},"attrs":[],"deprecation":null,"inner":{"enum":{"generics":{"params":[],"where_predicates":[]},"variants_stripped":false,"variants":["0:364:1895","0:366:1897"],"impls":["a:1:2793:252-0:363:1893","a:1:2833:2866-0:363:1893","a:1:8606:2967-0:363:1893","a:1:2776:242-0:363:1893","a:1:8607:2966-0:363:1893","b:1:2264-0:363:1893","b:1:2571-0:363:1893","b:1:2261-0:363:1893","b:1:2567-0:363:1893","b:1:2577-0:363:1893","b:1:3412-0:363:1893","b:1:2582-0:363:1893","b:4:5790-0:363:1893","0:368","0:48","0:46"]}}},"0:483:168":{"id":"0:483:168","crate_id":0,"name":"Item","span":{"filename":"src/lib.rs","begin":[2419,0],"end":[2423,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"a:1:2833:2866-0:281:2374":{"id":"a:1:2833:2866-0:281:2374","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"1:2833:2866","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:2833:2866","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:281:2374","args":{"angle_bracketed":{"args":[{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:475":{"id":"0:475","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[2419,0],"end":[2423,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Array","id":"0:328:1919","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"array":{"type":{"generic":"T"},"len":"21"}},"items":["0:478:168","0:479:1468"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:599:1468":{"id":"0:599:1468","crate_id":0,"name":"size","span":{"filename":"src/lib.rs","begin":[2419,0],"end":[2423,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2567-0:57:1917":{"id":"b:1:2567-0:57:1917","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2544:138","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2541:157","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Drain","id":"0:57:1917","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:2570:2327"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2261-0:118:1854":{"id":"b:1:2261-0:118:1854","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2783:2755","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2255:100","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"SmallVec","id":"0:118:1854","args":{"angle_bracketed":{"args":[{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2263:1804"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:126:1859":{"id":"0:126:1859","crate_id":0,"name":"from_vec","span":{"filename":"src/lib.rs","begin":[829,4],"end":[856,5]},"visibility":"public","docs":"Construct a new `SmallVec` from a `Vec<A::Item>`.\n\nElements will be copied to the inline buffer if vec.capacity() <= Self::inline_capacity().\n\n```rust\nuse smallvec::SmallVec;\n\nlet vec = vec![1, 2, 3, 4, 5];\nlet small_vec: SmallVec<[_; 3]> = SmallVec::from_vec(vec);\n\nassert_eq!(&*small_vec, &[1, 2, 3, 4, 5]);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["vec",{"resolved_path":{"name":"Vec","id":"4:6912:268","args":{"angle_bracketed":{"args":[{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"A"},"trait":{"name":"","id":"0:328:1919","args":null}}}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"SmallVec","id":"0:118:1854","args":{"angle_bracketed":{"args":[{"type":{"generic":"A"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12437:2202":{"id":"1:12437:2202","crate_id":1,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"1:52078:449","self::pattern":"1:12106:6763"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12111:4778","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12416:340":{"id":"1:12416:340","crate_id":1,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:52095:1611"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:267":{"id":"0:267","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[2170,0],"end":[2170,54]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Array","id":"0:328:1919","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"A"},"trait":{"name":"","id":"0:328:1919","args":null}}},"bounds":[{"trait_bound":{"trait":{"name":"Eq","id":"1:2330:130","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"1:2330:130","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"SmallVec","id":"0:118:1854","args":{"angle_bracketed":{"args":[{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:205":{"id":"0:205","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1859,0],"end":[1867,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Array","id":"0:328:1919","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"DerefMut","id":"1:3023:2331","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"SmallVec","id":"0:118:1854","args":{"angle_bracketed":{"args":[{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:207:596"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:393:168":{"id":"0:393:168","crate_id":0,"name":"Item","span":{"filename":"src/lib.rs","begin":[2419,0],"end":[2423,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"0:364:1895":{"id":"0:364:1895","crate_id":0,"name":"CapacityOverflow","span":{"filename":"src/lib.rs","begin":[301,4],"end":[301,20]},"visibility":"default","docs":"Overflow `usize::MAX` or other error during size computation","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"b:1:2264-0:363:1893":{"id":"b:1:2264-0:363:1893","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2783:2755","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2258:101","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"CollectionAllocErr","id":"0:363:1893","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2266:2332"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:565":{"id":"0:565","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[2419,0],"end":[2423,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Array","id":"0:328:1919","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"array":{"type":{"generic":"T"},"len":"1024"}},"items":["0:568:168","0:569:1468"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:433:168":{"id":"0:433:168","crate_id":0,"name":"Item","span":{"filename":"src/lib.rs","begin":[2419,0],"end":[2423,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"4:5524:18134":{"id":"4:5524:18134","crate_id":4,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Œ£\";\n\nassert_eq!(\"œÉ\", sigma.to_lowercase());\n\n// but at the end of a word, it's œÇ, not œÉ:\nlet odysseus = \"·ΩàŒîŒ•Œ£Œ£ŒïŒéŒ£\";\n\nassert_eq!(\"·ΩÄŒ¥œÖœÉœÉŒµœçœÇ\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"ÂÜúÂéÜÊñ∞Âπ¥\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"4:7487:248"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"4:7487:248","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:2833:2866-0:57:1917":{"id":"a:1:2833:2866-0:57:1917","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:2833:2866","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Drain","id":"0:57:1917","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:424:1468":{"id":"0:424:1468","crate_id":0,"name":"size","span":{"filename":"src/lib.rs","begin":[2419,0],"end":[2423,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:404:1468":{"id":"0:404:1468","crate_id":0,"name":"size","span":{"filename":"src/lib.rs","begin":[2419,0],"end":[2423,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:370":{"id":"0:370","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[2419,0],"end":[2423,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Array","id":"0:328:1919","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"array":{"type":{"generic":"T"},"len":"0"}},"items":["0:373:168","0:374:1468"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:593:168":{"id":"0:593:168","crate_id":0,"name":"Item","span":{"filename":"src/lib.rs","begin":[2419,0],"end":[2423,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"b:1:2264-0:281:2374":{"id":"b:1:2264-0:281:2374","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2783:2755","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2258:101","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:281:2374","args":{"angle_bracketed":{"args":[{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2266:2332"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:174:1989":{"id":"0:174:1989","crate_id":0,"name":"into_inner","span":{"filename":"src/lib.rs","begin":[1506,4],"end":[1517,5]},"visibility":"public","docs":"Convert the SmallVec into an `A` if possible. Otherwise return `Err(Self)`.\n\nThis method returns `Err(Self)` if the SmallVec is too short (and the `A` contains uninitialized elements),\nor if the SmallVec is too long (and all the elements were spilled to the heap).","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Result","id":"1:41709:231","args":{"angle_bracketed":{"args":[{"type":{"generic":"A"}},{"type":{"generic":"Self"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:494:1468":{"id":"0:494:1468","crate_id":0,"name":"size","span":{"filename":"src/lib.rs","begin":[2419,0],"end":[2423,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:320:168":{"id":"0:320:168","crate_id":0,"name":"Item","span":{"filename":"src/lib.rs","begin":[2311,4],"end":[2311,28]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"A"},"trait":{"name":"Array","id":"0:328:1919","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}}},"0:289":{"id":"0:289","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[2223,0],"end":[2230,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Array","id":"0:328:1919","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2277:108","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"A"},"trait":{"name":"","id":"0:328:1919","args":null}}},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2277:108","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2277:108","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:281:2374","args":{"angle_bracketed":{"args":[{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:291:453"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:197":{"id":"0:197","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1801,0],"end":[1846,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Array","id":"0:328:1919","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"A"},"trait":{"name":"","id":"0:328:1919","args":null}}},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2277:108","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"SmallVec","id":"0:118:1854","args":{"angle_bracketed":{"args":[{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:199:2322","0:200:1855"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:7484-0:281:2374":{"id":"b:1:7484-0:281:2374","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"1:7627:173","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"1:7480:160","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:281:2374","args":{"angle_bracketed":{"args":[{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:7486:168","1:7487:2374","1:7488:837"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"I"}}}},"0:385":{"id":"0:385","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[2419,0],"end":[2423,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Array","id":"0:328:1919","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"array":{"type":{"generic":"T"},"len":"3"}},"items":["0:388:168","0:389:1468"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:346:2435":{"id":"0:346:2435","crate_id":0,"name":"to_smallvec","span":{"filename":"src/lib.rs","begin":[2428,4],"end":[2428,41]},"visibility":"default","docs":"Construct a new `SmallVec` from a slice.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SmallVec","id":"0:118:1854","args":{"angle_bracketed":{"args":[{"type":{"generic":"A"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"0:159:2182":{"id":"0:159:2182","crate_id":0,"name":"clear","span":{"filename":"src/lib.rs","begin":[1345,4],"end":[1347,5]},"visibility":"public","docs":"Remove all elements from the vector.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:307":{"id":"0:307","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[2278,0],"end":[2290,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Array","id":"0:328:1919","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"IntoIter","id":"0:281:2374","args":{"angle_bracketed":{"args":[{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:309:1923","0:310:2174"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12507:16170":{"id":"1:12507:16170","crate_id":1,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:52078:449","self::pattern":"1:12106:6763"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["prefix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41564:198","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12111:4778","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12410:17441":{"id":"1:12410:17441","crate_id":1,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nIf `index` is greater than the length of the string, this returns the length of the string.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"‚ù§Ô∏èüß°üíõüíöüíôüíú\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"‚ù§Ô∏èüß°üíõ\");\n```","links":{"str::floor_char_boundary":"1:12408:17440"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:588:168":{"id":"0:588:168","crate_id":0,"name":"Item","span":{"filename":"src/lib.rs","begin":[2419,0],"end":[2423,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"0:234:822":{"id":"0:234:822","crate_id":0,"name":"index","span":{"filename":"src/lib.rs","begin":[2035,4],"end":[2037,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"","id":"1:10196:244","args":null}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:300":{"id":"0:300","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[2261,0],"end":[2273,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Array","id":"0:328:1919","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["try_rfold","rfind","nth_back","rfold","advance_back_by"],"trait":{"name":"DoubleEndedIterator","id":"1:7518:126","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:281:2374","args":{"angle_bracketed":{"args":[{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:302:1927"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:563:168":{"id":"0:563:168","crate_id":0,"name":"Item","span":{"filename":"src/lib.rs","begin":[2419,0],"end":[2423,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"0:315:837":{"id":"0:315:837","crate_id":0,"name":"into_iter","span":{"filename":"src/lib.rs","begin":[2295,4],"end":[2306,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"qualified_path":{"name":"IntoIter","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"1:7480:160","args":null}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:560":{"id":"0:560","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[2419,0],"end":[2423,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Array","id":"0:328:1919","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"array":{"type":{"generic":"T"},"len":"512"}},"items":["0:563:168","0:564:1468"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12481:2594":{"id":"1:12481:2594","crate_id":1,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::rmatches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"1:12106:6763","`DoubleEndedIterator`":"1:7518:126","prim@char":"1:52078:449","str::rmatches":"1:12484:17449"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Matches","id":"1:43730:4919","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12111:4778","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"4:5535:17426":{"id":"4:5535:17426","crate_id":4,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Gr√º√üe, J√ºrgen ‚ù§\";\n\nassert_eq!(\"GR√º√üE, J√ºRGEN ‚ù§\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"1:12527:17281"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"4:7487:248","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:201":{"id":"0:201","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1848,0],"end":[1857,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Array","id":"0:328:1919","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Deref","id":"1:3010:122","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"SmallVec","id":"0:118:1854","args":{"angle_bracketed":{"args":[{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:203:254","0:204:594"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:152:2159":{"id":"0:152:2159","crate_id":0,"name":"try_reserve_exact","span":{"filename":"src/lib.rs","begin":[1264,4],"end":[1273,5]},"visibility":"public","docs":"Reserve the minimum capacity for `additional` more elements to be inserted.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["additional",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Result","id":"1:41709:231","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}},{"type":{"resolved_path":{"name":"CollectionAllocErr","id":"0:363:1893","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:429:1468":{"id":"0:429:1468","crate_id":0,"name":"size","span":{"filename":"src/lib.rs","begin":[2419,0],"end":[2423,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:473:168":{"id":"0:473:168","crate_id":0,"name":"Item","span":{"filename":"src/lib.rs","begin":[2419,0],"end":[2423,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"0:48":{"id":"0:48","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[316,0],"end":[320,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[allow(deprecated)]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2544:138","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"LayoutError","id":"1:44537:2631","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"CollectionAllocErr","id":"0:363:1893","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:49:743"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:191:340":{"id":"0:191:340","crate_id":0,"name":"as_mut_ptr","span":{"filename":"src/lib.rs","begin":[1729,4],"end":[1734,5]},"visibility":"public","docs":"Returns a raw mutable pointer to the vector's buffer.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"A"},"trait":{"name":"","id":"0:328:1919","args":null}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2571-0:57:1917":{"id":"b:1:2571-0:57:1917","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2544:138","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Drain","id":"0:57:1917","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:2573:743"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:143:2123":{"id":"0:143:2123","crate_id":0,"name":"pop","span":{"filename":"src/lib.rs","begin":[1135,4],"end":[1146,5]},"visibility":"public","docs":"Remove an item from the end of the vector and return it, or None if empty.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41564:198","args":{"angle_bracketed":{"args":[{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"A"},"trait":{"name":"","id":"0:328:1919","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:598:168":{"id":"0:598:168","crate_id":0,"name":"Item","span":{"filename":"src/lib.rs","begin":[2419,0],"end":[2423,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"1:12499:17455":{"id":"1:12499:17455","crate_id":1,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  ◊¢◊ë◊®◊ô◊™\";\nassert!(Some('◊¢') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12516:17460":{"id":"1:12516:17460","crate_id":1,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:52078:449","self::pattern":"1:12106:6763"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12111:4778","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"4:5792:1564":{"id":"4:5792:1564","crate_id":4,"name":"to_string","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"4:7487:248","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:624:1468":{"id":"0:624:1468","crate_id":0,"name":"size","span":{"filename":"src/lib.rs","begin":[2419,0],"end":[2423,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12415:341":{"id":"1:12415:341","crate_id":1,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"1:12416:340","`u8`":"1:52095:1611"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:489:1468":{"id":"0:489:1468","crate_id":0,"name":"size","span":{"filename":"src/lib.rs","begin":[2419,0],"end":[2423,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:200:1855":{"id":"0:200:1855","crate_id":0,"name":"from_elem","span":{"filename":"src/lib.rs","begin":[1828,4],"end":[1845,5]},"visibility":"public","docs":"Creates a `SmallVec` with `n` copies of `elem`.\n```\nuse smallvec::SmallVec;\n\nlet v = SmallVec::<[char; 128]>::from_elem('d', 2);\nassert_eq!(v, SmallVec::from_buf(['d', 'd']));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["elem",{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"A"},"trait":{"name":"","id":"0:328:1919","args":null}}}],["n",{"primitive":"usize"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:214":{"id":"0:214","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1883,0],"end":[1888,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Array","id":"0:328:1919","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2255:100","args":{"angle_bracketed":{"args":[{"type":{"slice":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"A"},"trait":{"name":"Array","id":"0:328:1919","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"SmallVec","id":"0:118:1854","args":{"angle_bracketed":{"args":[{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:216:1804"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:147:2141":{"id":"0:147:2141","crate_id":0,"name":"try_grow","span":{"filename":"src/lib.rs","begin":[1178,4],"end":[1216,5]},"visibility":"public","docs":"Re-allocate to set the capacity to `max(new_cap, inline_size())`.\n\nPanics if `new_cap` is less than the vector's length","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["new_cap",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Result","id":"1:41709:231","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}},{"type":{"resolved_path":{"name":"CollectionAllocErr","id":"0:363:1893","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:294:632":{"id":"0:294:632","crate_id":0,"name":"drop","span":{"filename":"src/lib.rs","begin":[2233,4],"end":[2235,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12436:13805":{"id":"1:12436:13805","crate_id":1,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\n```\nlet text = \"Za≈º√≥≈Çƒá gƒô≈õlƒÖ ja≈∫≈Ñ\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EncodeUtf16","id":"1:43818:4791","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:303":{"id":"0:303","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[2275,0],"end":[2275,51]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Array","id":"0:328:1919","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["is_empty","len"],"trait":{"name":"ExactSizeIterator","id":"1:7571:1928","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:281:2374","args":{"angle_bracketed":{"args":[{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:434:1468":{"id":"0:434:1468","crate_id":0,"name":"size","span":{"filename":"src/lib.rs","begin":[2419,0],"end":[2423,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:46":{"id":"0:46","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[309,0],"end":[313,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Display","id":"1:9536:125","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"CollectionAllocErr","id":"0:363:1893","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:47:717"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:403:168":{"id":"0:403:168","crate_id":0,"name":"Item","span":{"filename":"src/lib.rs","begin":[2419,0],"end":[2423,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"1:12405:871":{"id":"1:12405:871","crate_id":1,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"∆íoo\".len(), 4); // fancy f!\nassert_eq!(\"∆íoo\".chars().count(), 3);\n```","links":{"prim@char":"1:52078:449"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12423:3103":{"id":"1:12423:3103","crate_id":1,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"üóª‚ààüåè\");\nunsafe {\n    assert_eq!(\"üóª\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"‚àà\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"üåè\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:10196:244","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:10196:244","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"1:12457:13791":{"id":"1:12457:13791","crate_id":1,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"1:52078:449","self::pattern":"1:12106:6763"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitInclusive","id":"1:11922:2860","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12111:4778","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12500:17456":{"id":"1:12500:17456","crate_id":1,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"◊¢◊ë◊®◊ô◊™  \";\nassert!(Some('◊™') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12425:17443":{"id":"1:12425:17443","crate_id":1,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\n\nunsafe {\n    assert_eq!(\"L√∂we ËÄÅËôé L√©opard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"1:52084:1505","str::slice_mut_unchecked":"1:12426:17444","crate::ops::Index":"1:3073:2360"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:630":{"id":"0:630","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[2419,0],"end":[2423,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Array","id":"0:328:1919","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"array":{"type":{"generic":"T"},"len":"1048576"}},"items":["0:633:168","0:634:1468"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:448:168":{"id":"0:448:168","crate_id":0,"name":"Item","span":{"filename":"src/lib.rs","begin":[2419,0],"end":[2423,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"1:7486:168":{"id":"1:7486:168","crate_id":1,"name":"Item","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"Iterator","id":"1:7627:173","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}},"0:319:2374":{"id":"0:319:2374","crate_id":0,"name":"IntoIter","span":{"filename":"src/lib.rs","begin":[2310,4],"end":[2310,45]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Iter","id":"1:10344:1922","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"A"},"trait":{"name":"Array","id":"0:328:1919","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}}}}},"1:12475:16166":{"id":"1:12475:16166","crate_id":1,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41564:198","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12111:4778","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12421:3102":{"id":"1:12421:3102","crate_id":1,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"üóª‚ààüåè\";\nunsafe {\n    assert_eq!(\"üóª\", v.get_unchecked(0..4));\n    assert_eq!(\"‚àà\", v.get_unchecked(4..7));\n    assert_eq!(\"üåè\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:10196:244","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:10196:244","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"1:12493:17452":{"id":"1:12493:17452","crate_id":1,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:540":{"id":"0:540","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[2419,0],"end":[2423,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Array","id":"0:328:1919","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"array":{"type":{"generic":"T"},"len":"64"}},"items":["0:543:168","0:544:1468"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:172:2205":{"id":"0:172:2205","crate_id":0,"name":"into_vec","span":{"filename":"src/lib.rs","begin":[1481,4],"end":[1492,5]},"visibility":"public","docs":"Convert a SmallVec to a Vec, without reallocating if the SmallVec has already spilled onto\nthe heap.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Vec","id":"4:6912:268","args":{"angle_bracketed":{"args":[{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"A"},"trait":{"name":"","id":"0:328:1919","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:124:1001":{"id":"0:124:1001","crate_id":0,"name":"new","span":{"filename":"src/lib.rs","begin":[783,4],"end":[794,5]},"visibility":"public","docs":"Construct an empty vector","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"SmallVec","id":"0:118:1854","args":{"angle_bracketed":{"args":[{"type":{"generic":"A"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:445":{"id":"0:445","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[2419,0],"end":[2423,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Array","id":"0:328:1919","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"array":{"type":{"generic":"T"},"len":"15"}},"items":["0:448:168","0:449:1468"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12469:16162":{"id":"1:12469:16162","crate_id":1,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"1:52078:449","self::pattern":"1:12106:6763","str::rsplitn":"1:12472:16164"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitN","id":"1:43630:2846","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12111:4778","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:584:1468":{"id":"0:584:1468","crate_id":0,"name":"size","span":{"filename":"src/lib.rs","begin":[2419,0],"end":[2423,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:620":{"id":"0:620","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[2419,0],"end":[2423,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Array","id":"0:328:1919","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"array":{"type":{"generic":"T"},"len":"393216"}},"items":["0:623:168","0:624:1468"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:213:1932":{"id":"0:213:1932","crate_id":0,"name":"as_mut","span":{"filename":"src/lib.rs","begin":[1878,4],"end":[1880,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"A"},"trait":{"name":"","id":"0:328:1919","args":null}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:2793:252-0:118:1854":{"id":"a:1:2793:252-0:118:1854","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2793:252","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2793:252","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"SmallVec","id":"0:118:1854","args":{"angle_bracketed":{"args":[{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:2833:2866-0:118:1854":{"id":"a:1:2833:2866-0:118:1854","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"1:2833:2866","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:2833:2866","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"SmallVec","id":"0:118:1854","args":{"angle_bracketed":{"args":[{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:313:2374":{"id":"0:313:2374","crate_id":0,"name":"IntoIter","span":{"filename":"src/lib.rs","begin":[2293,4],"end":[2293,32]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"IntoIter","id":"0:281:2374","args":{"angle_bracketed":{"args":[{"type":{"generic":"A"}}],"bindings":[]}}}}}}},"0:154:2169":{"id":"0:154:2169","crate_id":0,"name":"truncate","span":{"filename":"src/lib.rs","begin":[1304,4],"end":[1314,5]},"visibility":"public","docs":"Shorten the vector, keeping the first `len` elements and dropping the rest.\n\nIf `len` is greater than or equal to the vector's current length, this has no\neffect.\n\nThis does not re-allocate.  If you want the vector's capacity to shrink, call\n`shrink_to_fit` after truncating.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["len",{"primitive":"usize"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:250":{"id":"0:250","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[2091,0],"end":[2098,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Array","id":"0:328:1919","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"A"},"trait":{"name":"","id":"0:328:1919","args":null}}},"bounds":[{"trait_bound":{"trait":{"name":"fmt::Debug","id":"1:9531:116","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:9531:116","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"SmallVec","id":"0:118:1854","args":{"angle_bracketed":{"args":[{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:252:717"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12528:17282":{"id":"1:12528:17282","crate_id":1,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GR√ú√üE, J√úRGEN ‚ù§\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"gr√ú√üe, j√úrgen ‚ù§\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:2776:242-0:363:1893":{"id":"a:1:2776:242-0:363:1893","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:2776:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"CollectionAllocErr","id":"0:363:1893","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:64":{"id":"0:64","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[358,0],"end":[365,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[{"outlives":"'a"},{"trait_bound":{"trait":{"name":"Array","id":"0:328:1919","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"T"},"trait":{"name":"","id":"0:328:1919","args":null}}},"bounds":[{"trait_bound":{"trait":{"name":"fmt::Debug","id":"1:9531:116","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:9531:116","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Drain","id":"0:57:1917","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:67:717"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:474:1468":{"id":"0:474:1468","crate_id":0,"name":"size","span":{"filename":"src/lib.rs","begin":[2419,0],"end":[2423,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:625":{"id":"0:625","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[2419,0],"end":[2423,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Array","id":"0:328:1919","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"array":{"type":{"generic":"T"},"len":"524288"}},"items":["0:628:168","0:629:1468"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:530":{"id":"0:530","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[2419,0],"end":[2423,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Array","id":"0:328:1919","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"array":{"type":{"generic":"T"},"len":"32"}},"items":["0:533:168","0:534:1468"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:0:1849":{"id":"0:0:1849","crate_id":0,"name":"smallvec","span":{"filename":"src/lib.rs","begin":[7,0],"end":[2463,35]},"visibility":"public","docs":"Small vectors in various sizes. These store a certain number of elements inline, and fall back\nto the heap for larger allocations.  This can be a useful optimization for improving cache\nlocality and reducing allocator traffic for workloads that fit within the inline buffer.\n\n## `no_std` support\n\nBy default, `smallvec` does not depend on `std`.  However, the optional\n`write` feature implements the `std::io::Write` trait for vectors of `u8`.\nWhen this feature is enabled, `smallvec` depends on `std`.\n\n## Optional features\n\n### `serde`\n\nWhen this optional dependency is enabled, `SmallVec` implements the `serde::Serialize` and\n`serde::Deserialize` traits.\n\n### `write`\n\nWhen this feature is enabled, `SmallVec<[u8; _]>` implements the `std::io::Write` trait.\nThis feature is not compatible with `#![no_std]` programs.\n\n### `union`\n\n**This feature requires Rust 1.49.**\n\nWhen the `union` feature is enabled `smallvec` will track its state (inline or spilled)\nwithout the use of an enum tag, reducing the size of the `smallvec` by one machine word.\nThis means that there is potentially no space overhead compared to `Vec`.\nNote that `smallvec` can still be larger than `Vec` if the inline buffer is larger than two\nmachine words.\n\nTo use this feature add `features = [\"union\"]` in the `smallvec` section of Cargo.toml.\nNote that this feature requires Rust 1.49.\n\nTracking issue: [rust-lang/rust#55149](https://github.com/rust-lang/rust/issues/55149)\n\n### `const_generics`\n\n**This feature requires Rust 1.51.**\n\nWhen this feature is enabled, `SmallVec` works with any arrays of any size, not just a fixed\nlist of sizes.\n\n### `const_new`\n\n**This feature requires Rust 1.51.**\n\nThis feature exposes the functions [`SmallVec::new_const`], [`SmallVec::from_const`], and [`smallvec_inline`] which enables the `SmallVec` to be initialized from a const context.\nFor details, see the\n[Rust Reference](https://doc.rust-lang.org/reference/const_eval.html#const-functions).\n\n### `drain_filter`\n\n**This feature is unstable.** It may change to match the unstable `drain_filter` method in libstd.\n\nEnables the `drain_filter` method, which produces an iterator that calls a user-provided\nclosure to determine which elements of the vector to remove and yield from the iterator.\n\n### `drain_keep_rest`\n\n**This feature is unstable.** It may change to match the unstable `drain_keep_rest` method in libstd.\n\nEnables the `DrainFilter::keep_rest` method.\n\n### `specialization`\n\n**This feature is unstable and requires a nightly build of the Rust toolchain.**\n\nWhen this feature is enabled, `SmallVec::from(slice)` has improved performance for slices\nof `Copy` types.  (Without this feature, you can use `SmallVec::from_slice` to get optimal\nperformance for `Copy` types.)\n\nTracking issue: [rust-lang/rust#31844](https://github.com/rust-lang/rust/issues/31844)\n\n### `may_dangle`\n\n**This feature is unstable and requires a nightly build of the Rust toolchain.**\n\nThis feature makes the Rust compiler less strict about use of vectors that contain borrowed\nreferences. For details, see the\n[Rustonomicon](https://doc.rust-lang.org/1.42.0/nomicon/dropck.html#an-escape-hatch).\n\nTracking issue: [rust-lang/rust#34761](https://github.com/rust-lang/rust/issues/34761)","links":{},"attrs":["#![no_std]","#![deny(missing_docs)]"],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:363:1893","0:57:1917","0:118:1854","0:281:2374","0:328:1919","0:344:2433","0:38:1849"],"is_stripped":false}}},"0:299:1926":{"id":"0:299:1926","crate_id":0,"name":"size_hint","span":{"filename":"src/lib.rs","begin":[2255,4],"end":[2258,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"tuple":[{"primitive":"usize"},{"resolved_path":{"name":"Option","id":"1:41564:198","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"4:5516":{"id":"4:5516","crate_id":4,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["4:5517:18132","4:5518:2750","4:5521:18133","4:5524:18134","4:5532:18135","4:5533:18136","4:5534:1807","4:5535:17426","4:5536:17427"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:559:1468":{"id":"0:559:1468","crate_id":0,"name":"size","span":{"filename":"src/lib.rs","begin":[2419,0],"end":[2423,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:2570:2327":{"id":"1:2570:2327","crate_id":1,"name":"into","span":null,"visibility":"default","docs":"Calls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of\n<code>[From]&lt;T&gt; for U</code> chooses to do.","links":{"From":"1:2544:138"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"U"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:139:1964":{"id":"0:139:1964","crate_id":0,"name":"drain","span":{"filename":"src/lib.rs","begin":[1022,4],"end":[1056,5]},"visibility":"public","docs":"Creates a draining iterator that removes the specified range in the vector\nand yields the removed items.\n\nNote 1: The element range is removed even if the iterator is only\npartially consumed or not consumed at all.\n\nNote 2: It is unspecified how many elements are removed from the vector\nif the `Drain` value is leaked.\n\n# Panics\n\nPanics if the starting point is greater than the end point or if\nthe end point is greater than the length of the vector.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["range",{"generic":"R"}]],"output":{"resolved_path":{"name":"Drain","id":"0:57:1917","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"A"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"R"},"bounds":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3171:216","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:204:594":{"id":"0:204:594","crate_id":0,"name":"deref","span":{"filename":"src/lib.rs","begin":[1851,4],"end":[1856,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"A"},"trait":{"name":"","id":"0:328:1919","args":null}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2571-0:118:1854":{"id":"b:1:2571-0:118:1854","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2544:138","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"SmallVec","id":"0:118:1854","args":{"angle_bracketed":{"args":[{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2573:743"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:8606:2967-0:118:1854":{"id":"a:1:8606:2967-0:118:1854","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"UnwindSafe","id":"1:8606:2967","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"A"},"trait":{"name":"Array","id":"0:328:1919","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:8607:2966","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:8606:2967","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"SmallVec","id":"0:118:1854","args":{"angle_bracketed":{"args":[{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:543:168":{"id":"0:543:168","crate_id":0,"name":"Item","span":{"filename":"src/lib.rs","begin":[2419,0],"end":[2423,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"1:2580:133":{"id":"1:2580:133","crate_id":1,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"1:2551:261","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}}},"0:528:168":{"id":"0:528:168","crate_id":0,"name":"Item","span":{"filename":"src/lib.rs","begin":[2419,0],"end":[2423,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"0:195:2314":{"id":"0:195:2314","crate_id":0,"name":"insert_from_slice","span":{"filename":"src/lib.rs","begin":[1776,4],"end":[1789,5]},"visibility":"public","docs":"Copy elements from a slice into the vector at position `index`, shifting any following\nelements toward the back.\n\nFor slices of `Copy` types, this is more efficient than `insert`.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}],["slice",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"A"},"trait":{"name":"","id":"0:328:1919","args":null}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:440":{"id":"0:440","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[2419,0],"end":[2423,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Array","id":"0:328:1919","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"array":{"type":{"generic":"T"},"len":"14"}},"items":["0:443:168","0:444:1468"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:465":{"id":"0:465","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[2419,0],"end":[2423,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Array","id":"0:328:1919","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"array":{"type":{"generic":"T"},"len":"19"}},"items":["0:468:168","0:469:1468"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12484:17449":{"id":"1:12484:17449","crate_id":1,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"1:12106:6763","`DoubleEndedIterator`":"1:7518:126","prim@char":"1:52078:449","str::matches":"1:12481:2594"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatches","id":"1:43748:4920","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12111:4778","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12111:4778","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12126:6769","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:2263:1804":{"id":"1:2263:1804","crate_id":1,"name":"borrow","span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[rustc_diagnostic_item = \"noop_method_borrow\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:484:1468":{"id":"0:484:1468","crate_id":0,"name":"size","span":{"filename":"src/lib.rs","begin":[2419,0],"end":[2423,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:520":{"id":"0:520","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[2419,0],"end":[2423,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Array","id":"0:328:1919","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"array":{"type":{"generic":"T"},"len":"30"}},"items":["0:523:168","0:524:1468"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:233:203":{"id":"0:233:203","crate_id":0,"name":"Output","span":{"filename":"src/lib.rs","begin":[2033,4],"end":[2033,28]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:10196:244","args":{"angle_bracketed":{"args":[{"type":{"slice":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"A"},"trait":{"name":"Array","id":"0:328:1919","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}],"bindings":[]}}}}}}}},"0:93":{"id":"0:93","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[404,0],"end":[427,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[{"outlives":"'a"},{"trait_bound":{"trait":{"name":"Array","id":"0:328:1919","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Drop","id":"1:3034:1929","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Drain","id":"0:57:1917","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:96:632"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:2573:743":{"id":"1:2573:743","crate_id":1,"name":"from","span":null,"visibility":"default","docs":"Returns the argument unchanged.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["t",{"generic":"T"}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:78:1015":{"id":"0:78:1015","crate_id":0,"name":"next","span":{"filename":"src/lib.rs","begin":[374,4],"end":[378,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41564:198","args":{"angle_bracketed":{"args":[{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"T"},"trait":{"name":"","id":"0:328:1919","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2582-0:118:1854":{"id":"b:1:2582-0:118:1854","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2541:157","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2551:261","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"SmallVec","id":"0:118:1854","args":{"angle_bracketed":{"args":[{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2585:133","1:2586:1587"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:460":{"id":"0:460","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[2419,0],"end":[2423,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Array","id":"0:328:1919","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"array":{"type":{"generic":"T"},"len":"18"}},"items":["0:463:168","0:464:1468"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:438:168":{"id":"0:438:168","crate_id":0,"name":"Item","span":{"filename":"src/lib.rs","begin":[2419,0],"end":[2423,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"0:535":{"id":"0:535","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[2419,0],"end":[2423,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Array","id":"0:328:1919","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"array":{"type":{"generic":"T"},"len":"36"}},"items":["0:538:168","0:539:1468"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:7488:837":{"id":"1:7488:837","crate_id":1,"name":"into_iter","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"I"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:266:659":{"id":"0:266:659","crate_id":0,"name":"eq","span":{"filename":"src/lib.rs","begin":[2165,4],"end":[2167,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"SmallVec","id":"0:118:1854","args":{"angle_bracketed":{"args":[{"type":{"generic":"B"}}],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2264-0:57:1917":{"id":"b:1:2264-0:57:1917","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2783:2755","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2258:101","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Drain","id":"0:57:1917","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:2266:2332"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2264-0:118:1854":{"id":"b:1:2264-0:118:1854","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2783:2755","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2258:101","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"SmallVec","id":"0:118:1854","args":{"angle_bracketed":{"args":[{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2266:2332"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:430":{"id":"0:430","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[2419,0],"end":[2423,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Array","id":"0:328:1919","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"array":{"type":{"generic":"T"},"len":"12"}},"items":["0:433:168","0:434:1468"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:580":{"id":"0:580","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[2419,0],"end":[2423,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Array","id":"0:328:1919","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"array":{"type":{"generic":"T"},"len":"4096"}},"items":["0:583:168","0:584:1468"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:374:1468":{"id":"0:374:1468","crate_id":0,"name":"size","span":{"filename":"src/lib.rs","begin":[2419,0],"end":[2423,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:2581:1589":{"id":"1:2581:1589","crate_id":1,"name":"try_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Result","id":"1:41709:231","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"1:2551:261","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:600":{"id":"0:600","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[2419,0],"end":[2423,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Array","id":"0:328:1919","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"array":{"type":{"generic":"T"},"len":"32768"}},"items":["0:603:168","0:604:1468"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:84:1927":{"id":"0:84:1927","crate_id":0,"name":"next_back","span":{"filename":"src/lib.rs","begin":[388,4],"end":[392,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41564:198","args":{"angle_bracketed":{"args":[{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"T"},"trait":{"name":"","id":"0:328:1919","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:327:837":{"id":"0:327:837","crate_id":0,"name":"into_iter","span":{"filename":"src/lib.rs","begin":[2320,4],"end":[2322,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"qualified_path":{"name":"IntoIter","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"1:7480:160","args":null}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:330:1468":{"id":"0:330:1468","crate_id":0,"name":"size","span":{"filename":"src/lib.rs","begin":[2330,4],"end":[2330,23]},"visibility":"default","docs":"Returns the number of items the array can hold.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"1:12501:17457":{"id":"1:12501:17457","crate_id":1,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"1:52078:449","self::pattern":"1:12106:6763"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12111:4778","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12111:4778","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"1:12131:6768","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:605":{"id":"0:605","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[2419,0],"end":[2423,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Array","id":"0:328:1919","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"array":{"type":{"generic":"T"},"len":"65536"}},"items":["0:608:168","0:609:1468"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12427:2368":{"id":"1:12427:2368","crate_id":1,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\n```\nlet s = \"Per Martin-L√∂f\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-L√∂f\", last);\n```","links":{"str::split_at_mut":"1:12428:16150"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:208":{"id":"0:208","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1869,0],"end":[1874,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Array","id":"0:328:1919","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"AsRef","id":"1:2535:78","args":{"angle_bracketed":{"args":[{"type":{"slice":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"A"},"trait":{"name":"Array","id":"0:328:1919","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"SmallVec","id":"0:118:1854","args":{"angle_bracketed":{"args":[{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:210:342"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:570":{"id":"0:570","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[2419,0],"end":[2423,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Array","id":"0:328:1919","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"array":{"type":{"generic":"T"},"len":"1536"}},"items":["0:573:168","0:574:1468"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:388:168":{"id":"0:388:168","crate_id":0,"name":"Item","span":{"filename":"src/lib.rs","begin":[2419,0],"end":[2423,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"4:5518:2750":{"id":"4:5518:2750","crate_id":4,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"4:7487:248"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["from",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"4:7487:248","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12111:4778","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:38:1849":{"id":"0:38:1849","crate_id":0,"name":"smallvec","span":{"filename":"src/lib.rs","begin":[184,0],"end":[201,1]},"visibility":"public","docs":"Creates a [`SmallVec`] containing the arguments.\n\n`smallvec!` allows `SmallVec`s to be defined with the same syntax as array expressions.\nThere are two forms of this macro:\n\n- Create a [`SmallVec`] containing a given list of elements:\n\n```\n# #[macro_use] extern crate smallvec;\n# use smallvec::SmallVec;\n# fn main() {\nlet v: SmallVec<[_; 128]> = smallvec![1, 2, 3];\nassert_eq!(v[0], 1);\nassert_eq!(v[1], 2);\nassert_eq!(v[2], 3);\n# }\n```\n\n- Create a [`SmallVec`] from a given element and size:\n\n```\n# #[macro_use] extern crate smallvec;\n# use smallvec::SmallVec;\n# fn main() {\nlet v: SmallVec<[_; 0x8000]> = smallvec![1; 3];\nassert_eq!(v, SmallVec::from_buf([1, 1, 1]));\n# }\n```\n\nNote that unlike array expressions this syntax supports all elements\nwhich implement [`Clone`] and the number of elements doesn't have to be\na constant.\n\nThis will use `clone` to duplicate an expression, so one should be careful\nusing this with types having a nonstandard `Clone` implementation. For\nexample, `smallvec![Rc::new(1); 5]` will create a vector of five references\nto the same boxed integer value, not five references pointing to independently\nboxed integers.","links":{"`SmallVec`":"0:118:1854","`Clone`":"1:2277:108"},"attrs":["#[macro_export]"],"deprecation":null,"inner":{"macro":"macro_rules! smallvec {\n    (@one $x:expr) => { ... };\n    ($elem:expr; $n:expr) => { ... };\n    ($($x:expr),*$(,)*) => { ... };\n}"}},"0:321:837":{"id":"0:321:837","crate_id":0,"name":"into_iter","span":{"filename":"src/lib.rs","begin":[2312,4],"end":[2314,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"qualified_path":{"name":"IntoIter","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"1:7480:160","args":null}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:575":{"id":"0:575","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[2419,0],"end":[2423,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Array","id":"0:328:1919","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"array":{"type":{"generic":"T"},"len":"2048"}},"items":["0:578:168","0:579:1468"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:480":{"id":"0:480","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[2419,0],"end":[2423,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Array","id":"0:328:1919","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"array":{"type":{"generic":"T"},"len":"22"}},"items":["0:483:168","0:484:1468"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:128:2042":{"id":"0:128:2042","crate_id":0,"name":"from_buf_and_len","span":{"filename":"src/lib.rs","begin":[890,4],"end":[893,5]},"visibility":"public","docs":"Constructs a new `SmallVec` on the stack from an `A` without\ncopying elements. Also sets the length, which must be less or\nequal to the size of `buf`.\n\n```rust\nuse smallvec::SmallVec;\n\nlet buf = [1, 2, 3, 4, 5, 0, 0, 0];\nlet small_vec: SmallVec<_> = SmallVec::from_buf_and_len(buf, 5);\n\nassert_eq!(&*small_vec, &[1, 2, 3, 4, 5]);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["buf",{"generic":"A"}],["len",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"SmallVec","id":"0:118:1854","args":{"angle_bracketed":{"args":[{"type":{"generic":"A"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12532:17464":{"id":"1:12532:17464","crate_id":1,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"‚ù§\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"‚ù§\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"‚ù§\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"1:4571:17464"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeUnicode","id":"1:43843:4853","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:286":{"id":"0:286","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[2214,0],"end":[2221,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Array","id":"0:328:1919","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"A"},"trait":{"name":"","id":"0:328:1919","args":null}}},"bounds":[{"trait_bound":{"trait":{"name":"fmt::Debug","id":"1:9531:116","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:9531:116","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:281:2374","args":{"angle_bracketed":{"args":[{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:288:717"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:89:871":{"id":"0:89:871","crate_id":0,"name":"len","span":{"filename":"src/lib.rs","begin":[397,4],"end":[399,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:125:2022":{"id":"0:125:2022","crate_id":0,"name":"with_capacity","span":{"filename":"src/lib.rs","begin":[810,4],"end":[814,5]},"visibility":"public","docs":"Construct an empty vector with enough capacity pre-allocated to store at least `n`\nelements.\n\nWill create a heap allocation only if `n` is larger than the inline capacity.\n\n```\n# use smallvec::SmallVec;\n\nlet v: SmallVec<[u8; 3]> = SmallVec::with_capacity(100);\n\nassert!(v.is_empty());\nassert!(v.capacity() >= 100);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["n",{"primitive":"usize"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:498:168":{"id":"0:498:168","crate_id":0,"name":"Item","span":{"filename":"src/lib.rs","begin":[2419,0],"end":[2423,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"0:271:1099":{"id":"0:271:1099","crate_id":0,"name":"partial_cmp","span":{"filename":"src/lib.rs","begin":[2177,4],"end":[2179,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"SmallVec","id":"0:118:1854","args":{"angle_bracketed":{"args":[{"type":{"generic":"A"}}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41564:198","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"cmp::Ordering","id":"1:30807:200","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:2576:743":{"id":"1:2576:743","crate_id":1,"name":"from","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["t",{"primitive":"never"}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12428:16150":{"id":"1:12428:16150","crate_id":1,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\n```\nlet mut s = \"Per Martin-L√∂f\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-L√∂f\", last);\n}\nassert_eq!(\"PER Martin-L√∂f\", s);\n```","links":{"str::split_at":"1:12427:2368"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:515":{"id":"0:515","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[2419,0],"end":[2423,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Array","id":"0:328:1919","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"array":{"type":{"generic":"T"},"len":"29"}},"items":["0:518:168","0:519:1468"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:261:453":{"id":"0:261:453","crate_id":0,"name":"clone","span":{"filename":"src/lib.rs","begin":[2140,4],"end":[2142,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SmallVec","id":"0:118:1854","args":{"angle_bracketed":{"args":[{"type":{"generic":"A"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:629:1468":{"id":"0:629:1468","crate_id":0,"name":"size","span":{"filename":"src/lib.rs","begin":[2419,0],"end":[2423,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:505":{"id":"0:505","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[2419,0],"end":[2423,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Array","id":"0:328:1919","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"array":{"type":{"generic":"T"},"len":"27"}},"items":["0:508:168","0:509:1468"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:410":{"id":"0:410","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[2419,0],"end":[2423,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Array","id":"0:328:1919","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"array":{"type":{"generic":"T"},"len":"8"}},"items":["0:413:168","0:414:1468"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:2793:252-0:363:1893":{"id":"a:1:2793:252-0:363:1893","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2793:252","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"CollectionAllocErr","id":"0:363:1893","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:12431:4610":{"id":"1:12431:4610","crate_id":1,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"1:43512:4855","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:181:2224":{"id":"0:181:2224","crate_id":0,"name":"dedup_by","span":{"filename":"src/lib.rs","begin":[1555,4],"end":[1584,5]},"visibility":"public","docs":"Removes consecutive duplicate elements using the given equality relation.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["same_bucket",{"generic":"F"}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:3041:1944","args":{"parenthesized":{"inputs":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"A"},"trait":{"name":"","id":"0:328:1919","args":null}}}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"A"},"trait":{"name":"","id":"0:328:1919","args":null}}}}}],"output":{"primitive":"bool"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:288:717":{"id":"0:288:717","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[2218,4],"end":[2220,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:9506:137","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:9487:231","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3412-0:118:1854":{"id":"b:1:3412-0:118:1854","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:2783:2755","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3410:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"SmallVec","id":"0:118:1854","args":{"angle_bracketed":{"args":[{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:3414:1602"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}}},"paths":{"1:43304:2841":{"crate_id":1,"path":["core","slice","iter","Windows"],"kind":"struct"},"4:5325:4453":{"crate_id":4,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"1:2786:250":{"crate_id":1,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"1:41997:92":{"crate_id":1,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"1:30273:12373":{"crate_id":1,"path":["core","ptr","alignment","AlignmentEnum16"],"kind":"enum"},"4:2690:6008":{"crate_id":4,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"4:5:1679":{"crate_id":4,"path":["alloc","vec"],"kind":"macro"},"1:32031:2348":{"crate_id":1,"path":["core","error","tags","Value"],"kind":"struct"},"1:47575:5038":{"crate_id":1,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"4:1482:4578":{"crate_id":4,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"4:3735:4583":{"crate_id":4,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"1:3077:2361":{"crate_id":1,"path":["core","ops","index","IndexMut"],"kind":"trait"},"1:43910:6784":{"crate_id":1,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"1:22870:186":{"crate_id":1,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"1:2788:113":{"crate_id":1,"path":["core","marker","Copy"],"kind":"trait"},"1:46111:4985":{"crate_id":1,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"1:22804:188":{"crate_id":1,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"1:45872:4979":{"crate_id":1,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"1:47905:5050":{"crate_id":1,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"4:3212:4597":{"crate_id":4,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"1:12983:1801":{"crate_id":1,"path":["core","alloc","layout","LayoutErr"],"kind":"type_alias"},"4:6663:4453":{"crate_id":4,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"1:2629:133":{"crate_id":1,"path":["core","error","Error"],"kind":"trait"},"1:4137:4749":{"crate_id":1,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"1:2833:2866":{"crate_id":1,"path":["core","marker","Unpin"],"kind":"trait"},"1:22771:195":{"crate_id":1,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"1:40008:4746":{"crate_id":1,"path":["core","char","EscapeDefault"],"kind":"struct"},"4:7229:2374":{"crate_id":4,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"1:43313:2839":{"crate_id":1,"path":["core","slice","iter","Chunks"],"kind":"struct"},"4:822:4457":{"crate_id":4,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"1:52095:1611":{"crate_id":1,"path":["core","u8"],"kind":"primitive"},"1:42837:2679":{"crate_id":1,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"4:5788:256":{"crate_id":4,"path":["alloc","string","ToString"],"kind":"trait"},"1:47996:5055":{"crate_id":1,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"1:42876:4904":{"crate_id":1,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"1:7439:2704":{"crate_id":1,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"1:12177:6778":{"crate_id":1,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"1:41381:5950":{"crate_id":1,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"1:4045:106":{"crate_id":1,"path":["core","asserting","Capture"],"kind":"struct"},"1:52085:1592":{"crate_id":1,"path":["core","tuple"],"kind":"primitive"},"1:9197:717":{"crate_id":1,"path":["core","fmt"],"kind":"module"},"1:45564:4966":{"crate_id":1,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"1:10586:2849":{"crate_id":1,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"1:39228:220":{"crate_id":1,"path":["core","ops","range","RangeTo"],"kind":"struct"},"4:782:4455":{"crate_id":4,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"1:39333:4842":{"crate_id":1,"path":["core","any","TypeId"],"kind":"struct"},"1:39948:12382":{"crate_id":1,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"1:20920:14625":{"crate_id":1,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"4:1503:4580":{"crate_id":4,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"1:52092:795":{"crate_id":1,"path":["core","i32"],"kind":"primitive"},"1:2330:130":{"crate_id":1,"path":["core","cmp","Eq"],"kind":"trait"},"1:22233:4814":{"crate_id":1,"path":["core","num","diy_float","Fp"],"kind":"struct"},"1:40016:4854":{"crate_id":1,"path":["core","char","EscapeDebug"],"kind":"struct"},"1:7308:1807":{"crate_id":1,"path":["core","iter","sources","repeat","repeat"],"kind":"function"},"1:40761:2688":{"crate_id":1,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"1:45734:4973":{"crate_id":1,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"1:52096:1608":{"crate_id":1,"path":["core","u16"],"kind":"primitive"},"1:47783:5042":{"crate_id":1,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"0:366:1897":{"crate_id":0,"path":["smallvec","CollectionAllocErr","AllocErr"],"kind":"variant"},"1:1635:632":{"crate_id":1,"path":["core","mem","drop"],"kind":"function"},"4:6956:1962":{"crate_id":4,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"1:30331:12395":{"crate_id":1,"path":["core","ptr","alignment","AlignmentEnum32"],"kind":"enum"},"1:30807:200":{"crate_id":1,"path":["core","cmp","Ordering"],"kind":"enum"},"1:11871:4789":{"crate_id":1,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"1:41488:4885":{"crate_id":1,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"1:20905:14627":{"crate_id":1,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"1:20875:14409":{"crate_id":1,"path":["core","core_simd","swizzle","rotate_lanes_left","Rotate"],"kind":"struct"},"1:52088:689":{"crate_id":1,"path":["core","f32"],"kind":"primitive"},"1:7195:2687":{"crate_id":1,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"4:7237:4603":{"crate_id":4,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"4:1011:4453":{"crate_id":4,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"1:32027:4835":{"crate_id":1,"path":["core","error","private","Internal"],"kind":"struct"},"4:1273:4570":{"crate_id":4,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"1:21056:12298":{"crate_id":1,"path":["core","core_simd","cast","sealed","Sealed"],"kind":"trait"},"1:4463:3181":{"crate_id":1,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"4:2970:5309":{"crate_id":4,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"1:40082:104":{"crate_id":1,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"4:3800:2665":{"crate_id":4,"path":["alloc","collections","linked_list","ExtractIf"],"kind":"struct"},"1:43932:4927":{"crate_id":1,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"1:4801:418":{"crate_id":1,"path":["core","ffi","c_void"],"kind":"enum"},"0:118:1854":{"crate_id":0,"path":["smallvec","SmallVec"],"kind":"struct"},"1:40390:2729":{"crate_id":1,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"1:40322:2734":{"crate_id":1,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"1:46209:4989":{"crate_id":1,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"1:3326:2644":{"crate_id":1,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"1:2830:6637":{"crate_id":1,"path":["core","marker","Freeze"],"kind":"trait"},"1:22150:4806":{"crate_id":1,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"1:11887:4790":{"crate_id":1,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"4:3330:2665":{"crate_id":4,"path":["alloc","collections","btree","set","ExtractIf"],"kind":"struct"},"1:42596:14069":{"crate_id":1,"path":["core","fmt","rt","Flag"],"kind":"enum"},"1:21359:11836":{"crate_id":1,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"1:52094:792":{"crate_id":1,"path":["core","i128"],"kind":"primitive"},"1:42316:3169":{"crate_id":1,"path":["core","fmt","num","Binary"],"kind":"struct"},"1:2367:206":{"crate_id":1,"path":["core","cmp","PartialOrd"],"kind":"trait"},"1:10344:1922":{"crate_id":1,"path":["core","slice","iter","Iter"],"kind":"struct"},"1:41624:1922":{"crate_id":1,"path":["core","option","Iter"],"kind":"struct"},"1:22903:187":{"crate_id":1,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"1:47699:5040":{"crate_id":1,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"1:20922:14630":{"crate_id":1,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"1:39347:4844":{"crate_id":1,"path":["core","array","TryFromSliceError"],"kind":"struct"},"4:3238:4598":{"crate_id":4,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"0:57:1917":{"crate_id":0,"path":["smallvec","Drain"],"kind":"struct"},"4:1257:12100":{"crate_id":4,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"1:43424:2853":{"crate_id":1,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"1:4283:4751":{"crate_id":1,"path":["core","cell","BorrowError"],"kind":"struct"},"1:44456:232":{"crate_id":1,"path":["core","future","ResumeTy"],"kind":"struct"},"1:11187:2859":{"crate_id":1,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"1:4068:2637":{"crate_id":1,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"1:39272:221":{"crate_id":1,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"1:43576:4915":{"crate_id":1,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"1:45835:4977":{"crate_id":1,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"4:4032:4453":{"crate_id":4,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"1:2258:101":{"crate_id":1,"path":["core","borrow","BorrowMut"],"kind":"trait"},"1:15:1799":{"crate_id":1,"path":["core","write"],"kind":"macro"},"1:21712:11849":{"crate_id":1,"path":["core","core_simd","ord","SimdOrd"],"kind":"trait"},"1:45817:4976":{"crate_id":1,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"1:41640:2374":{"crate_id":1,"path":["core","option","IntoIter"],"kind":"struct"},"1:1923:2645":{"crate_id":1,"path":["core","ptr","unique","Unique"],"kind":"struct"},"1:44277:6033":{"crate_id":1,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"1:43526:2844":{"crate_id":1,"path":["core","str","iter","Split"],"kind":"struct"},"1:3274:14378":{"crate_id":1,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"1:21707:11841":{"crate_id":1,"path":["core","core_simd","ord","SimdPartialOrd"],"kind":"trait"},"1:10436:2860":{"crate_id":1,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"1:43502:4913":{"crate_id":1,"path":["core","str","iter","CharIndices"],"kind":"struct"},"4:5631:2329":{"crate_id":4,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"1:40754:4764":{"crate_id":1,"path":["core","iter","sources","from_coroutine","FromCoroutine"],"kind":"struct"},"1:43061:4905":{"crate_id":1,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"1:52090:797":{"crate_id":1,"path":["core","i8"],"kind":"primitive"},"1:43630:2846":{"crate_id":1,"path":["core","str","iter","SplitN"],"kind":"struct"},"1:21804:2837":{"crate_id":1,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"1:21357:12298":{"crate_id":1,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"1:42556:6017":{"crate_id":1,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"1:46017:4983":{"crate_id":1,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"4:6981:4482":{"crate_id":4,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"1:41802:87":{"crate_id":1,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"1:39184:215":{"crate_id":1,"path":["core","ops","range","Range"],"kind":"struct"},"1:4021:4747":{"crate_id":1,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"1:2784:2639":{"crate_id":1,"path":["core","marker","Unsize"],"kind":"trait"},"1:4848:852":{"crate_id":1,"path":["core","iter"],"kind":"module"},"1:44549:2630":{"crate_id":1,"path":["core","alloc","AllocError"],"kind":"struct"},"1:31991:6628":{"crate_id":1,"path":["core","convert","Infallible"],"kind":"enum"},"1:52089:691":{"crate_id":1,"path":["core","f64"],"kind":"primitive"},"1:46543:4996":{"crate_id":1,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"1:8607:2966":{"crate_id":1,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"4:1374:97":{"crate_id":4,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"1:41335:4771":{"crate_id":1,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"1:40568:2733":{"crate_id":1,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"1:42661:75":{"crate_id":1,"path":["core","fmt","Arguments"],"kind":"struct"},"1:40313:2724":{"crate_id":1,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"1:41524:4772":{"crate_id":1,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"1:21379:4802":{"crate_id":1,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"1:22837:185":{"crate_id":1,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"1:40544:2731":{"crate_id":1,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"1:32045:3179":{"crate_id":1,"path":["core","error","tags","Ref"],"kind":"struct"},"1:2845:2764":{"crate_id":1,"path":["core","ops","arith","Add"],"kind":"trait"},"4:7249:1917":{"crate_id":4,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"1:40000:4853":{"crate_id":1,"path":["core","char","EscapeUnicode"],"kind":"struct"},"1:2904:2775":{"crate_id":1,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"1:7627:173":{"crate_id":1,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"1:2541:157":{"crate_id":1,"path":["core","convert","Into"],"kind":"trait"},"4:5973:4475":{"crate_id":4,"path":["alloc","sync","Weak"],"kind":"struct"},"1:2836:2638":{"crate_id":1,"path":["core","marker","Tuple"],"kind":"trait"},"4:4985:4469":{"crate_id":4,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"1:52100:846":{"crate_id":1,"path":["core","isize"],"kind":"primitive"},"1:9487:231":{"crate_id":1,"path":["core","fmt","Result"],"kind":"type_alias"},"1:2535:78":{"crate_id":1,"path":["core","convert","AsRef"],"kind":"trait"},"1:30243:2756":{"crate_id":1,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"4:1776:2665":{"crate_id":4,"path":["alloc","collections","btree","map","ExtractIf"],"kind":"struct"},"1:30237:1810":{"crate_id":1,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"1:11666:6771":{"crate_id":1,"path":["core","str","converts","from_utf8"],"kind":"function"},"4:2141:4584":{"crate_id":4,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"1:1826:183":{"crate_id":1,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"1:11652:2834":{"crate_id":1,"path":["core","slice","GetManyMutError"],"kind":"struct"},"1:45694:4971":{"crate_id":1,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"1:44446:224":{"crate_id":1,"path":["core","future","ready","Ready"],"kind":"struct"},"1:2888:2771":{"crate_id":1,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"1:2547:262":{"crate_id":1,"path":["core","convert","TryInto"],"kind":"trait"},"1:43253:4906":{"crate_id":1,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"1:46163:4987":{"crate_id":1,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"1:9550:3173":{"crate_id":1,"path":["core","fmt","UpperExp"],"kind":"trait"},"1:2892:2773":{"crate_id":1,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"1:40272:2720":{"crate_id":1,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"1:4033:4748":{"crate_id":1,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"1:41777:200":{"crate_id":1,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"1:52076:400":{"crate_id":1,"path":["core","bool"],"kind":"primitive"},"4:261:4453":{"crate_id":4,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"4:1464:4576":{"crate_id":4,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"1:42829:4895":{"crate_id":1,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"1:4416:3180":{"crate_id":1,"path":["core","cell","RefMut"],"kind":"struct"},"4:4348:269":{"crate_id":4,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"1:9531:116":{"crate_id":1,"path":["core","fmt","Debug"],"kind":"trait"},"1:44499:4958":{"crate_id":1,"path":["core","task","wake","RawWaker"],"kind":"struct"},"1:42155:95":{"crate_id":1,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"1:25818:271":{"crate_id":1,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"1:42337:3171":{"crate_id":1,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"4:3142:98":{"crate_id":4,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"1:46187:4988":{"crate_id":1,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"1:22606:194":{"crate_id":1,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"1:40162:4488":{"crate_id":1,"path":["core","ffi","VaListImpl"],"kind":"struct"},"1:9747:148":{"crate_id":1,"path":["core","hash","Hash"],"kind":"trait"},"4:2131:4465":{"crate_id":4,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"1:42330:3170":{"crate_id":1,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"0:344:2433":{"crate_id":0,"path":["smallvec","ToSmallVec"],"kind":"trait"},"1:2325:205":{"crate_id":1,"path":["core","cmp","PartialEq"],"kind":"trait"},"1:21926:12298":{"crate_id":1,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"1:2880:2774":{"crate_id":1,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"1:4:1078":{"crate_id":1,"path":["core","panic"],"kind":"macro"},"1:32052:4837":{"crate_id":1,"path":["core","error","Source"],"kind":"struct"},"1:42323:3168":{"crate_id":1,"path":["core","fmt","num","Octal"],"kind":"struct"},"1:22705:193":{"crate_id":1,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"4:207:2648":{"crate_id":4,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"1:12751:209":{"crate_id":1,"path":["core","future","pending","Pending"],"kind":"struct"},"1:39988:4851":{"crate_id":1,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"1:43676:4917":{"crate_id":1,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"1:9548:3172":{"crate_id":1,"path":["core","fmt","LowerExp"],"kind":"trait"},"1:43512:4855":{"crate_id":1,"path":["core","str","iter","Bytes"],"kind":"struct"},"4:4426:4471":{"crate_id":4,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"1:21280:11839":{"crate_id":1,"path":["core","core_simd","elements","uint","SimdUint"],"kind":"trait"},"1:9753:148":{"crate_id":1,"path":["core","hash","macros","Hash"],"kind":"proc_derive"},"1:44261:6029":{"crate_id":1,"path":["core","str","IsWhitespace"],"kind":"struct"},"1:2872:2767":{"crate_id":1,"path":["core","ops","arith","Neg"],"kind":"trait"},"1:46284:4991":{"crate_id":1,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"4:4074:2378":{"crate_id":4,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"1:44269:6031":{"crate_id":1,"path":["core","str","IsNotEmpty"],"kind":"struct"},"1:47637:5039":{"crate_id":1,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"4:7571:2665":{"crate_id":4,"path":["alloc","vec","extract_if","ExtractIf"],"kind":"struct"},"4:1672:4453":{"crate_id":4,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"1:2498:12298":{"crate_id":1,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"1:47920:5051":{"crate_id":1,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"1:21928:11837":{"crate_id":1,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"1:9031:82":{"crate_id":1,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"1:22258:12383":{"crate_id":1,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"4:3178:4592":{"crate_id":4,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"1:0:530":{"crate_id":1,"path":["core"],"kind":"module"},"1:6809:2705":{"crate_id":1,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"1:41880:84":{"crate_id":1,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"4:7512:4613":{"crate_id":4,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"1:30835:3717":{"crate_id":1,"path":["core","cmp","Reverse"],"kind":"struct"},"4:4164:4469":{"crate_id":4,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"1:52099:1607":{"crate_id":1,"path":["core","u128"],"kind":"primitive"},"1:2551:261":{"crate_id":1,"path":["core","convert","TryFrom"],"kind":"trait"},"1:42621:69":{"crate_id":1,"path":["core","fmt","Alignment"],"kind":"enum"},"1:6028:2735":{"crate_id":1,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"4:685:115":{"crate_id":4,"path":["alloc","borrow","Cow"],"kind":"enum"},"1:44090:4940":{"crate_id":1,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"1:49859:11851":{"crate_id":1,"path":["core","core_simd","swizzle","Which"],"kind":"enum"},"1:46779:5000":{"crate_id":1,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"1:2876:2770":{"crate_id":1,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"1:12120:6770":{"crate_id":1,"path":["core","str","pattern","Searcher"],"kind":"trait"},"1:2171:2804":{"crate_id":1,"path":["core","ptr","from_exposed_addr"],"kind":"function"},"1:22044:4803":{"crate_id":1,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"1:21313:11834":{"crate_id":1,"path":["core","core_simd","eq","SimdPartialEq"],"kind":"trait"},"1:41465:12385":{"crate_id":1,"path":["core","net","parser","AddrKind"],"kind":"enum"},"1:3654:2374":{"crate_id":1,"path":["core","array","iter","IntoIter"],"kind":"struct"},"1:5569:2722":{"crate_id":1,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"1:43825:4854":{"crate_id":1,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"1:21058:11840":{"crate_id":1,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"1:41501:6713":{"crate_id":1,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"4:1514:215":{"crate_id":4,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"1:52103:13":{"crate_id":1,"path":["core","fn"],"kind":"primitive"},"1:40768:2690":{"crate_id":1,"path":["core","iter","sources","once","Once"],"kind":"struct"},"4:778:99":{"crate_id":4,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"1:44158:4795":{"crate_id":1,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"1:10669:2843":{"crate_id":1,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"1:3171:216":{"crate_id":1,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"1:2860:2765":{"crate_id":1,"path":["core","ops","arith","Div"],"kind":"trait"},"0:328:1919":{"crate_id":0,"path":["smallvec","Array"],"kind":"trait"},"1:46889:5003":{"crate_id":1,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"1:42858:4899":{"crate_id":1,"path":["core","hash","sip","State"],"kind":"struct"},"1:39936:4846":{"crate_id":1,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"1:22357:6499":{"crate_id":1,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"1:2838:110":{"crate_id":1,"path":["core","marker","ConstParamTy"],"kind":"trait"},"1:47958:5053":{"crate_id":1,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"1:2843:1059":{"crate_id":1,"path":["core","ops"],"kind":"module"},"1:1761:2821":{"crate_id":1,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"1:22241:4815":{"crate_id":1,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"1:40234:2708":{"crate_id":1,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"4:1288:4573":{"crate_id":4,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"1:11228:2089":{"crate_id":1,"path":["core","slice","raw","from_raw_parts"],"kind":"function"},"1:47879:5048":{"crate_id":1,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"1:43790:4922":{"crate_id":1,"path":["core","str","iter","LinesAny"],"kind":"struct"},"1:9506:137":{"crate_id":1,"path":["core","fmt","Formatter"],"kind":"struct"},"1:21365:11838":{"crate_id":1,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"1:43694:4918":{"crate_id":1,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"1:1642:2752":{"crate_id":1,"path":["core","mem","Discriminant"],"kind":"struct"},"1:48035:5056":{"crate_id":1,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"4:7587:2666":{"crate_id":4,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"1:30259:69":{"crate_id":1,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"4:5942:71":{"crate_id":4,"path":["alloc","sync","Arc"],"kind":"struct"},"1:44253:6027":{"crate_id":1,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"4:7299:4604":{"crate_id":4,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"1:9977:4498":{"crate_id":1,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"4:2461:5287":{"crate_id":4,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"1:40042:4858":{"crate_id":1,"path":["core","char","ToUppercase"],"kind":"struct"},"1:4211:3178":{"crate_id":1,"path":["core","cell","Cell"],"kind":"struct"},"1:12111:4778":{"crate_id":1,"path":["core","str","pattern","Pattern"],"kind":"trait"},"1:10196:244":{"crate_id":1,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"1:2855:2766":{"crate_id":1,"path":["core","ops","arith","Mul"],"kind":"trait"},"4:629:4566":{"crate_id":4,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"1:39520:12247":{"crate_id":1,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"1:40414:2714":{"crate_id":1,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"1:9488:2333":{"crate_id":1,"path":["core","fmt","Write"],"kind":"trait"},"4:6351:1679":{"crate_id":4,"path":["alloc","vec"],"kind":"module"},"1:39326:2790":{"crate_id":1,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"4:7375:2664":{"crate_id":4,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"4:6584:2374":{"crate_id":4,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"1:42566:69":{"crate_id":1,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"1:46233:4990":{"crate_id":1,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"1:44257:6028":{"crate_id":1,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"1:4352:4486":{"crate_id":1,"path":["core","cell","BorrowRef"],"kind":"struct"},"4:3669:4453":{"crate_id":4,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"1:45540:4965":{"crate_id":1,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"1:41632:2378":{"crate_id":1,"path":["core","option","IterMut"],"kind":"struct"},"1:41841:94":{"crate_id":1,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"1:41352:6712":{"crate_id":1,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"1:39067:2794":{"crate_id":1,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"1:2544:138":{"crate_id":1,"path":["core","convert","From"],"kind":"trait"},"1:43353:2857":{"crate_id":1,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"1:41958:85":{"crate_id":1,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"1:43648:2842":{"crate_id":1,"path":["core","str","iter","RSplitN"],"kind":"struct"},"1:3010:122":{"crate_id":1,"path":["core","ops","deref","Deref"],"kind":"trait"},"4:1411:1922":{"crate_id":4,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"1:7518:126":{"crate_id":1,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"1:47868:5047":{"crate_id":1,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"1:21241:2804":{"crate_id":1,"path":["core","core_simd","elements","mut_ptr","SimdMutPtr","from_exposed_addr"],"kind":"foreign_type"},"1:42612:73":{"crate_id":1,"path":["core","fmt","rt","Argument"],"kind":"struct"},"1:52078:449":{"crate_id":1,"path":["core","char"],"kind":"primitive"},"1:9538:3168":{"crate_id":1,"path":["core","fmt","Octal"],"kind":"trait"},"1:9536:125":{"crate_id":1,"path":["core","fmt","Display"],"kind":"trait"},"1:32139:4838":{"crate_id":1,"path":["core","marker","PhantomPinned"],"kind":"struct"},"1:21482:12298":{"crate_id":1,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"1:9036:89":{"crate_id":1,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"1:44249:6026":{"crate_id":1,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"4:1102:5332":{"crate_id":4,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"1:2303:460":{"crate_id":1,"path":["core","cmp"],"kind":"module"},"1:43809:4924":{"crate_id":1,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"1:2499:6460":{"crate_id":1,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"1:1738:2822":{"crate_id":1,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"4:3171:1922":{"crate_id":4,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"1:2783:2755":{"crate_id":1,"path":["core","marker","Sized"],"kind":"trait"},"1:1018:1806":{"crate_id":1,"path":["core","hint","unreachable_unchecked"],"kind":"function"},"1:3073:2360":{"crate_id":1,"path":["core","ops","index","Index"],"kind":"trait"},"4:7434:12394":{"crate_id":4,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"1:4362:3179":{"crate_id":1,"path":["core","cell","Ref"],"kind":"struct"},"1:39978:4850":{"crate_id":1,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"1:9544:3171":{"crate_id":1,"path":["core","fmt","UpperHex"],"kind":"trait"},"1:44281:5949":{"crate_id":1,"path":["core","time","Nanoseconds"],"kind":"struct"},"1:2909:2776":{"crate_id":1,"path":["core","ops","bit","BitOr"],"kind":"trait"},"1:10627:2846":{"crate_id":1,"path":["core","slice","iter","SplitN"],"kind":"struct"},"1:2776:242":{"crate_id":1,"path":["core","marker","Send"],"kind":"trait"},"1:2161:633":{"crate_id":1,"path":["core","ptr","drop_in_place"],"kind":"function"},"4:4846:222":{"crate_id":4,"path":["alloc","rc","Rc"],"kind":"struct"},"1:9994:4499":{"crate_id":1,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"1:40099:12394":{"crate_id":1,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"1:43780:4921":{"crate_id":1,"path":["core","str","iter","Lines"],"kind":"struct"},"1:39294:2079":{"crate_id":1,"path":["core","ops","range","Bound"],"kind":"enum"},"1:41692:3049":{"crate_id":1,"path":["core","panicking","AssertKind"],"kind":"enum"},"1:43392:2856":{"crate_id":1,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"1:3255:2791":{"crate_id":1,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"1:7255:2689":{"crate_id":1,"path":["core","iter","sources","once","once"],"kind":"function"},"1:40290:4868":{"crate_id":1,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"1:40023:6673":{"crate_id":1,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"1:40192:2706":{"crate_id":1,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"1:21094:11842":{"crate_id":1,"path":["core","core_simd","elements","const_ptr","SimdConstPtr"],"kind":"trait"},"1:43405:2852":{"crate_id":1,"path":["core","slice","iter","RChunks"],"kind":"struct"},"1:3234:2789":{"crate_id":1,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"4:895:1922":{"crate_id":4,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"1:9542:3170":{"crate_id":1,"path":["core","fmt","LowerHex"],"kind":"trait"},"1:21297:12298":{"crate_id":1,"path":["core","core_simd","elements","sealed","Sealed"],"kind":"trait"},"1:39250:219":{"crate_id":1,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"1:40035:4857":{"crate_id":1,"path":["core","char","ToLowercase"],"kind":"struct"},"1:12999:2629":{"crate_id":1,"path":["core","alloc","Allocator"],"kind":"trait"},"1:52101:1667":{"crate_id":1,"path":["core","usize"],"kind":"primitive"},"1:43947:4934":{"crate_id":1,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"1:41295:165":{"crate_id":1,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"1:4436:3182":{"crate_id":1,"path":["core","cell","UnsafeCell"],"kind":"struct"},"1:1672:1154":{"crate_id":1,"path":["core","ptr"],"kind":"module"},"1:40262:2719":{"crate_id":1,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"1:2173:2805":{"crate_id":1,"path":["core","ptr","from_exposed_addr_mut"],"kind":"function"},"4:676:255":{"crate_id":4,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"4:2243:5941":{"crate_id":4,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"4:7291:215":{"crate_id":4,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"1:3410:70":{"crate_id":1,"path":["core","any","Any"],"kind":"trait"},"1:41752:1922":{"crate_id":1,"path":["core","result","Iter"],"kind":"struct"},"1:12126:6769":{"crate_id":1,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"1:7976:14112":{"crate_id":1,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"1:45610:4968":{"crate_id":1,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"1:23416:241":{"crate_id":1,"path":["core","num","saturating","Saturating"],"kind":"struct"},"1:40374:2728":{"crate_id":1,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"1:43843:4853":{"crate_id":1,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"1:3261:2793":{"crate_id":1,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"1:43978:4938":{"crate_id":1,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"4:4194:4469":{"crate_id":4,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"1:39106:2643":{"crate_id":1,"path":["core","ops","coroutine","CoroutineState"],"kind":"enum"},"4:7328:2374":{"crate_id":4,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"1:44273:6032":{"crate_id":1,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"1:30203:1824":{"crate_id":1,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"1:40129:6684":{"crate_id":1,"path":["core","ffi","c_char"],"kind":"type_alias"},"4:3217:18740":{"crate_id":4,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"1:42036:86":{"crate_id":1,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"1:52102:1214":{"crate_id":1,"path":["core","reference"],"kind":"primitive"},"1:42868:4903":{"crate_id":1,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"1:7935:2701":{"crate_id":1,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"1:22639:191":{"crate_id":1,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"1:20890:14409":{"crate_id":1,"path":["core","core_simd","swizzle","rotate_lanes_right","Rotate"],"kind":"struct"},"1:47848:5045":{"crate_id":1,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"4:2170:5938":{"crate_id":4,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"1:9218:14075":{"crate_id":1,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"1:2793:252":{"crate_id":1,"path":["core","marker","Sync"],"kind":"trait"},"1:45632:4969":{"crate_id":1,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"1:10186:12298":{"crate_id":1,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"1:2798:1821":{"crate_id":1,"path":["core","marker","PhantomData"],"kind":"struct"},"1:20903:14629":{"crate_id":1,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"1:5627:2710":{"crate_id":1,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"1:40087:4863":{"crate_id":1,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"1:1549:4469":{"crate_id":1,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"1:2618:121":{"crate_id":1,"path":["core","default","Default"],"kind":"trait"},"1:9223:5947":{"crate_id":1,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"1:2948:2785":{"crate_id":1,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"1:3041:1944":{"crate_id":1,"path":["core","ops","function","FnMut"],"kind":"trait"},"4:3204:4593":{"crate_id":4,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"4:3581:1922":{"crate_id":4,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"1:2943:2784":{"crate_id":1,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"1:2939:2783":{"crate_id":1,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"1:40355:2726":{"crate_id":1,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"0:281:2374":{"crate_id":0,"path":["smallvec","IntoIter"],"kind":"struct"},"1:40243:2709":{"crate_id":1,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"4:6795:2329":{"crate_id":4,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"1:2931:2781":{"crate_id":1,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"1:1752:6011":{"crate_id":1,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"4:3568:177":{"crate_id":4,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"1:41682:2964":{"crate_id":1,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"1:4279:226":{"crate_id":1,"path":["core","cell","RefCell"],"kind":"struct"},"1:44245:6025":{"crate_id":1,"path":["core","str","LinesMap"],"kind":"struct"},"4:35:2646":{"crate_id":4,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"1:43414:2855":{"crate_id":1,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"1:44104:6785":{"crate_id":1,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"4:2959:4567":{"crate_id":4,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"2:234:231":{"crate_id":2,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"1:12332:116":{"crate_id":1,"path":["core","str","lossy","Debug"],"kind":"struct"},"1:46362:4993":{"crate_id":1,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"1:45854:4978":{"crate_id":1,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"1:1472:1809":{"crate_id":1,"path":["core","mem"],"kind":"module"},"1:12907:4508":{"crate_id":1,"path":["core","task","wake","Waker"],"kind":"struct"},"1:20862:3717":{"crate_id":1,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"4:7320:2374":{"crate_id":4,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"1:2919:2779":{"crate_id":1,"path":["core","ops","bit","Shl"],"kind":"trait"},"1:41649:2963":{"crate_id":1,"path":["core","panic","location","Location"],"kind":"struct"},"1:7476:139":{"crate_id":1,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"4:3183:18736":{"crate_id":4,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"1:47745:5041":{"crate_id":1,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"1:39927:4845":{"crate_id":1,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"4:276:1803":{"crate_id":4,"path":["alloc","boxed","Box"],"kind":"struct"},"1:22331:4828":{"crate_id":1,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"1:40304:2723":{"crate_id":1,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"1:43961:4937":{"crate_id":1,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"4:1118:5286":{"crate_id":4,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"1:2884:2772":{"crate_id":1,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"1:2670:4616":{"crate_id":1,"path":["core","error","Request"],"kind":"struct"},"1:40783:2693":{"crate_id":1,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"1:11636:2832":{"crate_id":1,"path":["core","slice","SlicePattern"],"kind":"trait"},"1:2841:2820":{"crate_id":1,"path":["core","marker","FnPtr"],"kind":"trait"},"4:2223:18826":{"crate_id":4,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"4:7403:105":{"crate_id":4,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"1:46465:4995":{"crate_id":1,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"1:10641:2842":{"crate_id":1,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"1:42584:114":{"crate_id":1,"path":["core","fmt","rt","Count"],"kind":"enum"},"1:43322:2840":{"crate_id":1,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"1:41318:4769":{"crate_id":1,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"1:21108:2804":{"crate_id":1,"path":["core","core_simd","elements","const_ptr","SimdConstPtr","from_exposed_addr"],"kind":"foreign_type"},"1:9755:152":{"crate_id":1,"path":["core","hash","Hasher"],"kind":"trait"},"1:2787:249":{"crate_id":1,"path":["core","marker","StructuralEq"],"kind":"trait"},"1:9795:2677":{"crate_id":1,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"1:22218:12371":{"crate_id":1,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"1:2850:2769":{"crate_id":1,"path":["core","ops","arith","Sub"],"kind":"trait"},"1:22182:4807":{"crate_id":1,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"0:363:1893":{"crate_id":0,"path":["smallvec","CollectionAllocErr"],"kind":"enum"},"1:52093:796":{"crate_id":1,"path":["core","i64"],"kind":"primitive"},"4:7220:2628":{"crate_id":4,"path":["alloc","alloc","Global"],"kind":"struct"},"4:2962:5307":{"crate_id":4,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"1:43496:4784":{"crate_id":1,"path":["core","str","iter","Chars"],"kind":"struct"},"4:878:4459":{"crate_id":4,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"4:3594:2378":{"crate_id":4,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"1:42194:4780":{"crate_id":1,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"1:44464:212":{"crate_id":1,"path":["core","task","poll","Poll"],"kind":"enum"},"1:40365:2727":{"crate_id":1,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"1:2897:2778":{"crate_id":1,"path":["core","ops","bit","Not"],"kind":"trait"},"1:44115:4943":{"crate_id":1,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"1:7489:2362":{"crate_id":1,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"1:46141:4986":{"crate_id":1,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"4:5369:12113":{"crate_id":4,"path":["alloc","slice","Concat"],"kind":"trait"},"1:10548:2848":{"crate_id":1,"path":["core","slice","iter","RSplit"],"kind":"struct"},"1:7571:1928":{"crate_id":1,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"1:12689:143":{"crate_id":1,"path":["core","future","future","Future"],"kind":"trait"},"1:41564:198":{"crate_id":1,"path":["core","option","Option"],"kind":"enum"},"1:10009:4503":{"crate_id":1,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"1:9546:211":{"crate_id":1,"path":["core","fmt","Pointer"],"kind":"trait"},"1:43470:4909":{"crate_id":1,"path":["core","str","error","Utf8Error"],"kind":"struct"},"1:39208:217":{"crate_id":1,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"1:41701:210":{"crate_id":1,"path":["core","pin","Pin"],"kind":"struct"},"0:364:1895":{"crate_id":0,"path":["smallvec","CollectionAllocErr","CapacityOverflow"],"kind":"variant"},"1:29988:6461":{"crate_id":1,"path":["core","num","FpCategory"],"kind":"enum"},"1:6206:2712":{"crate_id":1,"path":["core","iter","adapters","map_windows","MapWindows"],"kind":"struct"},"1:12106:6763":{"crate_id":1,"path":["core","str","pattern"],"kind":"module"},"1:46589:4997":{"crate_id":1,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"1:46825:5001":{"crate_id":1,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"1:40221:2717":{"crate_id":1,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"1:44537:2631":{"crate_id":1,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"4:5858:1917":{"crate_id":4,"path":["alloc","string","Drain"],"kind":"struct"},"1:3244:258":{"crate_id":1,"path":["core","ops","try_trait","Try"],"kind":"trait"},"1:22738:190":{"crate_id":1,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"1:40049:6674":{"crate_id":1,"path":["core","char","CaseMappingIter"],"kind":"enum"},"1:5421:4469":{"crate_id":1,"path":["core","iter","adapters","filter","next_chunk","Guard"],"kind":"struct"},"4:6098:4469":{"crate_id":4,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"1:44053:4794":{"crate_id":1,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"1:21463:11835":{"crate_id":1,"path":["core","core_simd","masks","to_bitmask","ToBitMask"],"kind":"trait"},"1:2255:100":{"crate_id":1,"path":["core","borrow","Borrow"],"kind":"trait"},"4:0:312":{"crate_id":4,"path":["alloc"],"kind":"module"},"1:45765:4974":{"crate_id":1,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"1:7939:2702":{"crate_id":1,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"1:22936:184":{"crate_id":1,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"1:21816:14412":{"crate_id":1,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"1:43434:2854":{"crate_id":1,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"1:2914:2777":{"crate_id":1,"path":["core","ops","bit","BitXor"],"kind":"trait"},"4:1426:2378":{"crate_id":4,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"1:6217:4494":{"crate_id":1,"path":["core","iter","adapters","map_windows","Buffer"],"kind":"struct"},"1:44325:4955":{"crate_id":1,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"1:40333:2725":{"crate_id":1,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"1:47387:5036":{"crate_id":1,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"4:2960:18443":{"crate_id":4,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"1:44026:4939":{"crate_id":1,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"4:2035:4582":{"crate_id":4,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"1:47943:5052":{"crate_id":1,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"1:41919:91":{"crate_id":1,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"1:46065:4984":{"crate_id":1,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"1:3023:2331":{"crate_id":1,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"1:52079:1627":{"crate_id":1,"path":["core","unit"],"kind":"primitive"},"4:1442:2374":{"crate_id":4,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"1:39964:4849":{"crate_id":1,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"4:7259:4462":{"crate_id":4,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"1:40810:2699":{"crate_id":1,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"1:45664:4970":{"crate_id":1,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"1:10655:2847":{"crate_id":1,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"1:52083:1473":{"crate_id":1,"path":["core","slice"],"kind":"primitive"},"4:7501:4612":{"crate_id":4,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"4:7387:12097":{"crate_id":4,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"2:0:474":{"crate_id":2,"path":["compiler_builtins"],"kind":"module"},"4:5994:5292":{"crate_id":4,"path":["alloc","sync","ArcInner"],"kind":"struct"},"1:2925:2780":{"crate_id":1,"path":["core","ops","bit","Shr"],"kind":"trait"},"1:43076:6024":{"crate_id":1,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"4:4363:4471":{"crate_id":4,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"1:4407:4487":{"crate_id":1,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"1:44265:6030":{"crate_id":1,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"1:43594:4916":{"crate_id":1,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"1:45995:4982":{"crate_id":1,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"1:3249:140":{"crate_id":1,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"1:42846:152":{"crate_id":1,"path":["core","hash","sip","Hasher"],"kind":"struct"},"1:6212:6013":{"crate_id":1,"path":["core","iter","adapters","map_windows","MapWindowsInner"],"kind":"struct"},"1:45795:4975":{"crate_id":1,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"4:1302:4574":{"crate_id":4,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"1:22295:12370":{"crate_id":1,"path":["core","num","fmt","Part"],"kind":"enum"},"1:47497:5037":{"crate_id":1,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"1:41709:231":{"crate_id":1,"path":["core","result","Result"],"kind":"enum"},"1:44337:6791":{"crate_id":1,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"1:6974:5334":{"crate_id":1,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"1:40115:4864":{"crate_id":1,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"1:40212:2707":{"crate_id":1,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"4:5135:4475":{"crate_id":4,"path":["alloc","rc","Weak"],"kind":"struct"},"1:11922:2860":{"crate_id":1,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"1:46385:4994":{"crate_id":1,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"1:40777:2692":{"crate_id":1,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"1:43818:4791":{"crate_id":1,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"1:43332:2850":{"crate_id":1,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"1:39153:2788":{"crate_id":1,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"1:10368:2378":{"crate_id":1,"path":["core","slice","iter","IterMut"],"kind":"struct"},"1:4822:15705":{"crate_id":1,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"1:52084:1505":{"crate_id":1,"path":["core","str"],"kind":"primitive"},"1:46331:4992":{"crate_id":1,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"4:7487:248":{"crate_id":4,"path":["alloc","string","String"],"kind":"struct"},"1:8606:2967":{"crate_id":1,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"1:40404:2730":{"crate_id":1,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"4:6511:4453":{"crate_id":4,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"1:32038:4836":{"crate_id":1,"path":["core","error","tags","MaybeSizedValue"],"kind":"struct"},"4:1492:4579":{"crate_id":4,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"1:52077:998":{"crate_id":1,"path":["core","never"],"kind":"primitive"},"1:22206:4812":{"crate_id":1,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"1:2935:2782":{"crate_id":1,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"4:6824:2671":{"crate_id":4,"path":["alloc","vec","in_place_drop","InPlaceDstBufDrop"],"kind":"struct"},"1:47894:5049":{"crate_id":1,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"1:12702:159":{"crate_id":1,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"1:47859:5046":{"crate_id":1,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"1:42821:2680":{"crate_id":1,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"1:22166:5942":{"crate_id":1,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"1:30437:12378":{"crate_id":1,"path":["core","ptr","alignment","AlignmentEnum64"],"kind":"enum"},"1:7443:2703":{"crate_id":1,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"1:4168:4750":{"crate_id":1,"path":["core","cell","once","OnceCell"],"kind":"struct"},"1:10475:2845":{"crate_id":1,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"1:40342:2711":{"crate_id":1,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"1:22345:4829":{"crate_id":1,"path":["core","num","error","ParseIntError"],"kind":"struct"},"1:21491:4802":{"crate_id":1,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"1:42639:133":{"crate_id":1,"path":["core","fmt","Error"],"kind":"struct"},"1:3519:1917":{"crate_id":1,"path":["core","array","drain","Drain"],"kind":"struct"},"4:6332:12126":{"crate_id":4,"path":["alloc","task","Wake"],"kind":"trait"},"1:46619:4998":{"crate_id":1,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"1:47839:5044":{"crate_id":1,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"1:43080:2865":{"crate_id":1,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"1:46855:5002":{"crate_id":1,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"1:45919:4980":{"crate_id":1,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"1:7932:1808":{"crate_id":1,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"4:2049:4583":{"crate_id":4,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"3:0:2613":{"crate_id":3,"path":["rustc_std_workspace_core"],"kind":"module"},"1:11848:4788":{"crate_id":1,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"0:0:1849":{"crate_id":0,"path":["smallvec"],"kind":"module"},"1:41543:4775":{"crate_id":1,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"1:52082:338":{"crate_id":1,"path":["core","array"],"kind":"primitive"},"4:2966:5308":{"crate_id":4,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"1:3289:2641":{"crate_id":1,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"1:52097:1609":{"crate_id":1,"path":["core","u32"],"kind":"primitive"},"1:42116:88":{"crate_id":1,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"1:44507:4960":{"crate_id":1,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"1:2992:2642":{"crate_id":1,"path":["core","ops","coroutine","Coroutine"],"kind":"trait"},"4:4234:1922":{"crate_id":4,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"1:43342:2851":{"crate_id":1,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"1:46701:4999":{"crate_id":1,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"1:9911:4496":{"crate_id":1,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"1:7025:2684":{"crate_id":1,"path":["core","iter","range","Step"],"kind":"trait"},"4:7283:2374":{"crate_id":4,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"4:4002:1917":{"crate_id":4,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"1:10393:2844":{"crate_id":1,"path":["core","slice","iter","Split"],"kind":"struct"},"1:44562:4963":{"crate_id":1,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"1:21489:11844":{"crate_id":1,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"1:21194:11848":{"crate_id":1,"path":["core","core_simd","elements","int","SimdInt"],"kind":"trait"},"1:4288:4752":{"crate_id":1,"path":["core","cell","BorrowMutError"],"kind":"struct"},"1:11154:2858":{"crate_id":1,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"1:47973:5054":{"crate_id":1,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"1:43379:2706":{"crate_id":1,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"1:3949:4469":{"crate_id":1,"path":["core","array","Guard"],"kind":"struct"},"1:40172:4865":{"crate_id":1,"path":["core","ffi","VaList"],"kind":"struct"},"1:8716:4778":{"crate_id":1,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"1:41768:2374":{"crate_id":1,"path":["core","result","IntoIter"],"kind":"struct"},"1:42075:93":{"crate_id":1,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"1:45965:4981":{"crate_id":1,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"1:21227:11843":{"crate_id":1,"path":["core","core_simd","elements","mut_ptr","SimdMutPtr"],"kind":"trait"},"1:22969:189":{"crate_id":1,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"1:22324:6014":{"crate_id":1,"path":["core","num","fmt","Formatted"],"kind":"struct"},"1:12131:6768":{"crate_id":1,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"4:1138:5333":{"crate_id":4,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"1:40281:2721":{"crate_id":1,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"1:45586:4967":{"crate_id":1,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"1:45716:4972":{"crate_id":1,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"4:6912:268":{"crate_id":4,"path":["alloc","vec","Vec"],"kind":"struct"},"1:12776:4799":{"crate_id":1,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"1:22097:4805":{"crate_id":1,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"1:21150:11847":{"crate_id":1,"path":["core","core_simd","elements","float","SimdFloat"],"kind":"trait"},"4:7476:4476":{"crate_id":4,"path":["alloc","rc","UniqueRc"],"kind":"struct"},"1:2361:199":{"crate_id":1,"path":["core","cmp","Ord"],"kind":"trait"},"4:5373:12114":{"crate_id":4,"path":["alloc","slice","Join"],"kind":"trait"},"1:2277:108":{"crate_id":1,"path":["core","clone","Clone"],"kind":"trait"},"1:52081:1115":{"crate_id":1,"path":["core","pointer"],"kind":"primitive"},"1:47821:5043":{"crate_id":1,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"1:5509:4469":{"crate_id":1,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"1:39168:218":{"crate_id":1,"path":["core","ops","range","RangeFull"],"kind":"struct"},"1:44300:127":{"crate_id":1,"path":["core","time","Duration"],"kind":"struct"},"1:44520:175":{"crate_id":1,"path":["core","alloc","layout","Layout"],"kind":"struct"},"1:52091:794":{"crate_id":1,"path":["core","i16"],"kind":"primitive"},"1:41760:2378":{"crate_id":1,"path":["core","result","IterMut"],"kind":"struct"},"1:21106:14161":{"crate_id":1,"path":["core","core_simd","elements","const_ptr","SimdConstPtr","with_addr"],"kind":"foreign_type"},"1:40554:2732":{"crate_id":1,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"4:6814:2670":{"crate_id":4,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"1:10513:2861":{"crate_id":1,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"1:47039:5004":{"crate_id":1,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"1:9790:2676":{"crate_id":1,"path":["core","hash","BuildHasher"],"kind":"trait"},"1:3038:2786":{"crate_id":1,"path":["core","ops","function","Fn"],"kind":"trait"},"4:7269:18739":{"crate_id":4,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"1:40792:2695":{"crate_id":1,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"1:12066:6498":{"crate_id":1,"path":["core","str","traits","FromStr"],"kind":"trait"},"1:6910:2716":{"crate_id":1,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"0:38:1849":{"crate_id":0,"path":["smallvec","smallvec"],"kind":"macro"},"1:40252:2718":{"crate_id":1,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"1:43484:4912":{"crate_id":1,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"1:43748:4920":{"crate_id":1,"path":["core","str","iter","RMatches"],"kind":"struct"},"1:22672:192":{"crate_id":1,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"1:43834:4746":{"crate_id":1,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"1:3034:1929":{"crate_id":1,"path":["core","ops","drop","Drop"],"kind":"trait"},"1:21458:12298":{"crate_id":1,"path":["core","core_simd","masks","to_bitmask","sealed","Sealed"],"kind":"trait"},"1:47245:5035":{"crate_id":1,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"1:9540:3169":{"crate_id":1,"path":["core","fmt","Binary"],"kind":"trait"},"1:43730:4919":{"crate_id":1,"path":["core","str","iter","Matches"],"kind":"struct"},"4:3720:4582":{"crate_id":4,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"1:44125:4947":{"crate_id":1,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"1:4640:6667":{"crate_id":1,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"1:40802:2697":{"crate_id":1,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"1:39921:4746":{"crate_id":1,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"1:12724:14243":{"crate_id":1,"path":["core","future","join","MaybeDone"],"kind":"enum"},"1:52098:1610":{"crate_id":1,"path":["core","u64"],"kind":"primitive"},"1:40068:4862":{"crate_id":1,"path":["core","char","TryFromCharError"],"kind":"struct"},"4:4393:4469":{"crate_id":4,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"1:9857:1473":{"crate_id":1,"path":["core","slice"],"kind":"module"},"1:3044:2787":{"crate_id":1,"path":["core","ops","function","FnOnce"],"kind":"trait"},"4:1523:4581":{"crate_id":4,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"4:6465:1917":{"crate_id":4,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"1:7480:160":{"crate_id":1,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"1:45520:4964":{"crate_id":1,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"4:7463:4611":{"crate_id":4,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"1:2538:77":{"crate_id":1,"path":["core","convert","AsMut"],"kind":"trait"},"1:41615:168":{"crate_id":1,"path":["core","option","Item"],"kind":"struct"},"1:8608:2965":{"crate_id":1,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"4:1473:4577":{"crate_id":4,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"1:43544:2848":{"crate_id":1,"path":["core","str","iter","RSplit"],"kind":"struct"},"4:7450:4608":{"crate_id":4,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"1:44138:4953":{"crate_id":1,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"1:2866:2768":{"crate_id":1,"path":["core","ops","arith","Rem"],"kind":"trait"},"1:43800:4923":{"crate_id":1,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"4:7420:4605":{"crate_id":4,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"1:11811:4785":{"crate_id":1,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"1:22279:12389":{"crate_id":1,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"1:12896:111":{"crate_id":1,"path":["core","task","wake","Context"],"kind":"struct"}},"external_crates":{"2":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":27}