{"root":"0:0:2160","crate_version":"2.0.0-alpha.3","includes_private":false,"index":{"0:375:719":{"id":"0:375:719","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[2099,4],"end":[2101,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"core::fmt::Formatter","id":"1:9852:141","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"core::fmt::Result","id":"1:9833:233","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:220:2136":{"id":"0:220:2136","crate_id":0,"name":"resize","span":{"filename":"src/lib.rs","begin":[1635,4],"end":[1642,5]},"visibility":"public","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["len",{"primitive":"usize"}],["value",{"generic":"T"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12823:2354":{"id":"1:12823:2354","crate_id":1,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::rmatches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"1:12443:6521","`DoubleEndedIterator`":"1:7826:128","prim@char":"1:53441:452","str::rmatches":"1:12826:16282"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Matches","id":"1:44106:4146","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12448:4003","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:146:1973":{"id":"0:146:1973","crate_id":0,"name":"from_buf_and_len_unchecked","span":{"filename":"src/lib.rs","begin":[796,4],"end":[803,5]},"visibility":"public","docs":"Constructs a new `SmallVec` on the stack from an A without copying elements. Also sets the length. The user is responsible for ensuring that `len <= A::size()`.\n\n# Examples\n\n```\nuse smallvec::SmallVec;\nuse std::mem::MaybeUninit;\n\nlet buf = [1, 2, 3, 4, 5, 0, 0, 0];\nlet small_vec = unsafe {\n    SmallVec::from_buf_and_len_unchecked(MaybeUninit::new(buf), 5)\n};\n\nassert_eq!(&*small_vec, &[1, 2, 3, 4, 5]);\n```\n\n# Safety\n\n`len <= N`, and all the elements in `buf[..len]` must be initialized","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["buf",{"resolved_path":{"name":"MaybeUninit","id":"1:30596:1811","args":{"angle_bracketed":{"args":[{"type":{"array":{"type":{"generic":"T"},"len":"N"}}}],"bindings":[]}}}}],["len",{"primitive":"usize"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:215:2130":{"id":"0:215:2130","crate_id":0,"name":"insert_from_slice","span":{"filename":"src/lib.rs","begin":[1599,4],"end":[1616,5]},"visibility":"public","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}],["slice",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"generic":"T"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:2428:2167":{"id":"1:2428:2167","crate_id":1,"name":"borrow_mut","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:141:1957":{"id":"0:141:1957","crate_id":0,"name":"from_vec","span":{"filename":"src/lib.rs","begin":[704,4],"end":[739,5]},"visibility":"public","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["vec",{"resolved_path":{"name":"Vec","id":"4:6960:270","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:325":{"id":"0:325","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[2021,0],"end":[2029,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"N","kind":{"const":{"type":{"primitive":"usize"},"default":null}}},{"name":"M","kind":{"const":{"type":{"primitive":"usize"},"default":null}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"PartialEq","id":"1:2486:208","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"1:2486:208","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"SmallVec","id":"0:56:1876","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}},{"const":{"type":{"primitive":"usize"},"expr":"M","value":null,"is_literal":false}}],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"SmallVec","id":"0:56:1876","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"const":{"type":{"primitive":"usize"},"expr":"N","value":null,"is_literal":false}}],"bindings":[]}}}},"items":["0:330:662"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:217":{"id":"0:217","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1633,0],"end":[1667,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2439:111","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"N","kind":{"const":{"type":{"primitive":"usize"},"default":null}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"SmallVec","id":"0:56:1876","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"const":{"type":{"primitive":"usize"},"expr":"N","value":null,"is_literal":false}}],"bindings":[]}}}},"items":["0:220:2136","0:221:2139"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12777:16271":{"id":"1:12777:16271","crate_id":1,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\", suggestion =\n\"lines\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinesAny","id":"1:44166:4149","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12761:15174":{"id":"1:12761:15174","crate_id":1,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"1:42004:198"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"1:42002:201","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:10530:246","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:10530:246","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12748:1985":{"id":"1:12748:1985","crate_id":1,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:42131:2660-0:56:1876":{"id":"a:1:42131:2660-0:56:1876","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"N","kind":{"const":{"type":{"primitive":"usize"},"default":null}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:42131:2660","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:42131:2660","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"SmallVec","id":"0:56:1876","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"const":{"type":{"primitive":"usize"},"expr":"N","value":null,"is_literal":false}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2741-0:68:1881":{"id":"b:1:2741-0:68:1881","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2700:160","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2710:264","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Drain","id":"0:68:1881","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"const":{"type":{"primitive":"usize"},"expr":"N","value":null,"is_literal":false}}],"bindings":[]}}}},"items":["1:2744:135","1:2745:1619"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2730-0:68:1881":{"id":"b:1:2730-0:68:1881","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2703:142","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Drain","id":"0:68:1881","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"const":{"type":{"primitive":"usize"},"expr":"N","value":null,"is_literal":false}}],"bindings":[]}}}},"items":["1:2732:746"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:2745:1619":{"id":"1:2745:1619","crate_id":1,"name":"try_from","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["value",{"generic":"U"}]],"output":{"resolved_path":{"name":"Result","id":"1:42149:233","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"T"},"trait":{"name":"TryFrom","id":"1:2710:264","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2423-0:104:1950":{"id":"b:1:2423-0:104:1950","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32419:2478","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2417:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:104:1950","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"const":{"type":{"primitive":"usize"},"expr":"N","value":null,"is_literal":false}}],"bindings":[]}}}},"items":["1:2425:1806"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2730-0:376:1826":{"id":"b:1:2730-0:376:1826","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2703:142","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"CollectionAllocErr","id":"0:376:1826","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2732:746"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:144:1961":{"id":"0:144:1961","crate_id":0,"name":"from_buf_and_len","span":{"filename":"src/lib.rs","begin":[752,4],"end":[774,5]},"visibility":"public","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["buf",{"array":{"type":{"generic":"T"},"len":"N"}}],["len",{"primitive":"usize"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12805:16276":{"id":"1:12805:16276","crate_id":1,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"1:12443:6521","str::split":"1:12796:16274","prim@char":"1:53441:452","`DoubleEndedIterator`":"1:7826:128","str::rsplit_terminator":"1:12808:16277"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitTerminator","id":"1:43952:4142","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12448:4003","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12852:16293":{"id":"1:12852:16293","crate_id":1,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:53441:452","self::pattern":"1:12443:6521"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["suffix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:42002:201","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12448:4003","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12448:4003","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12463:6527","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:81:1053":{"id":"0:81:1053","crate_id":0,"name":"next","span":{"filename":"src/lib.rs","begin":[315,4],"end":[321,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42002:201","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:264:635":{"id":"0:264:635","crate_id":0,"name":"drop","span":{"filename":"src/lib.rs","begin":[1830,4],"end":[1850,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:142:1959":{"id":"0:142:1959","crate_id":0,"name":"from_buf","span":{"filename":"src/lib.rs","begin":[742,4],"end":[749,5]},"visibility":"public","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["buf",{"array":{"type":{"generic":"T"},"len":"N"}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:366:719":{"id":"0:366:719","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[2087,4],"end":[2089,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"core::fmt::Formatter","id":"1:9852:141","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"core::fmt::Result","id":"1:9833:233","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3495-0:56:1876":{"id":"b:1:3495-0:56:1876","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:32419:2478","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3493:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"SmallVec","id":"0:56:1876","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"const":{"type":{"primitive":"usize"},"expr":"N","value":null,"is_literal":false}}],"bindings":[]}}}},"items":["1:3497:1634"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:125":{"id":"0:125","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[657,0],"end":[675,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"N","kind":{"const":{"type":{"primitive":"usize"},"default":null}}}],"where_predicates":[]},"provided_trait_methods":["nth_back","rfold","advance_back_by","try_rfold","rfind"],"trait":{"name":"DoubleEndedIterator","id":"1:7826:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:104:1950","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"const":{"type":{"primitive":"usize"},"expr":"N","value":null,"is_literal":false}}],"bindings":[]}}}},"items":["0:128:1888"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12768:16267":{"id":"1:12768:16267","crate_id":1,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"1:53447:1538","crate::ops::IndexMut":"1:3161:2419","str::slice_unchecked":"1:12767:16266"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"4:5553:2137":{"id":"4:5553:2137","crate_id":4,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"4:7535:250"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"4:7535:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12871:16303":{"id":"1:12871:16303","crate_id":1,"name":"trim_ascii_start","span":null,"visibility":"public","docs":"Returns a string slice with leading ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\" \\t \\u{3000}hello world\\n\".trim_ascii_start(), \"\\u{3000}hello world\\n\");\nassert_eq!(\"  \".trim_ascii_start(), \"\");\nassert_eq!(\"\".trim_ascii_start(), \"\");\n```","links":{"u8::is_ascii_whitespace":"1:895:19466"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:211":{"id":"0:211","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1575,0],"end":[1631,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Copy","id":"1:2943:116","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"N","kind":{"const":{"type":{"primitive":"usize"},"default":null}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"SmallVec","id":"0:56:1876","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"const":{"type":{"primitive":"usize"},"expr":"N","value":null,"is_literal":false}}],"bindings":[]}}}},"items":["0:214:2129","0:215:2130","0:216:2134"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2426-0:104:1950":{"id":"b:1:2426-0:104:1950","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32419:2478","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2420:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:104:1950","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"const":{"type":{"primitive":"usize"},"expr":"N","value":null,"is_literal":false}}],"bindings":[]}}}},"items":["1:2428:2167"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:99":{"id":"0:99","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[348,0],"end":[374,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[{"outlives":"'a"}],"default":null,"synthetic":false}}},{"name":"N","kind":{"const":{"type":{"primitive":"usize"},"default":null}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Drop","id":"1:3122:1891","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Drain","id":"0:68:1881","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"const":{"type":{"primitive":"usize"},"expr":"N","value":null,"is_literal":false}}],"bindings":[]}}}},"items":["0:103:635"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:303:2160":{"id":"0:303:2160","crate_id":0,"name":"smallvec","span":{"filename":"src/lib.rs","begin":[1954,0],"end":[1971,1]},"visibility":"public","docs":null,"links":{},"attrs":["#[macro_export]"],"deprecation":null,"inner":{"macro":"macro_rules! smallvec {\n    (@one $x:expr) => { ... };\n    ($elem:expr; $n:expr) => { ... };\n    ($($x:expr),*$(,)?) => { ... };\n}"}},"0:122:171":{"id":"0:122:171","crate_id":0,"name":"Item","span":{"filename":"src/lib.rs","begin":[633,4],"end":[633,18]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"0:124:1887":{"id":"0:124:1887","crate_id":0,"name":"size_hint","span":{"filename":"src/lib.rs","begin":[651,4],"end":[654,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"tuple":[{"primitive":"usize"},{"resolved_path":{"name":"Option","id":"1:42002:201","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:150:1899":{"id":"0:150:1899","crate_id":0,"name":"set_len","span":{"filename":"src/lib.rs","begin":[835,4],"end":[839,5]},"visibility":"public","docs":"Sets the length of a vector.\n\nThis will explicitly set the size of the vector, without actually modifying its buffers, so\nit is up to the caller to ensure that the vector is actually the specified size.\n\n# Safety\n\n`new_len <= self.capacity()` must be true, and all the elements in the range `..self.len`\nmust be initialized.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["new_len",{"primitive":"usize"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"1:12814:16279":{"id":"1:12814:16279","crate_id":1,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"1:53441:452","str::splitn":"1:12811:16278","self::pattern":"1:12443:6521"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitN","id":"1:44024:3020","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12448:4003","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12448:4003","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12463:6527","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:32418:244-0:376:1826":{"id":"a:1:32418:244-0:376:1826","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:32418:244","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"CollectionAllocErr","id":"0:376:1826","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:42130:2661-0:104:1950":{"id":"a:1:42130:2661-0:104:1950","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"N","kind":{"const":{"type":{"primitive":"usize"},"default":null}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"UnwindSafe","id":"1:42130:2661","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:42131:2660","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:42130:2661","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:104:1950","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"const":{"type":{"primitive":"usize"},"expr":"N","value":null,"is_literal":false}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"4:690:11891":{"id":"4:690:11891","crate_id":4,"name":"to_owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12774:14403":{"id":"1:12774:14403","crate_id":1,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"1:12775:14408"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitWhitespace","id":"1:44176:4150","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3495-0:104:1950":{"id":"b:1:3495-0:104:1950","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:32419:2478","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3493:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:104:1950","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"const":{"type":{"primitive":"usize"},"expr":"N","value":null,"is_literal":false}}],"bindings":[]}}}},"items":["1:3497:1634"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:2732:746":{"id":"1:2732:746","crate_id":1,"name":"from","span":null,"visibility":"default","docs":"Returns the argument unchanged.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["t",{"generic":"T"}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:27:1839":{"id":"0:27:1839","crate_id":0,"name":"RawSmallVec","span":{"filename":"src/lib.rs","begin":[116,0],"end":[119,1]},"visibility":"public","docs":"Either a stack array with `length <= N` or a heap array\nwhose pointer and capacity are stored here.\n\nWe store a `NonNull<T>` instead of a `*mut T`, so that\nniche-optimization can be performed and the type is covariant\nwith respect to `T`.","links":{},"attrs":["#[repr(C)]"],"deprecation":null,"inner":{"union":{"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"N","kind":{"const":{"type":{"primitive":"usize"},"default":null}}}],"where_predicates":[]},"fields_stripped":true,"fields":[],"impls":["a:1:32418:244-0:27:1839","a:1:32500:2479-0:27:1839","a:1:42130:2661-0:27:1839","a:1:42131:2660-0:27:1839","a:1:2948:254-0:27:1839","b:1:2426-0:27:1839","b:1:2741-0:27:1839","b:1:2726-0:27:1839","b:1:2736-0:27:1839","b:1:3495-0:27:1839","b:1:2730-0:27:1839","b:1:2423-0:27:1839"]}}},"1:2425:1806":{"id":"1:2425:1806","crate_id":1,"name":"borrow","span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[rustc_diagnostic_item = \"noop_method_borrow\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:154:1849":{"id":"0:154:1849","crate_id":0,"name":"capacity","span":{"filename":"src/lib.rs","begin":[862,4],"end":[869,5]},"visibility":"public","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:196:2078":{"id":"0:196:2078","crate_id":0,"name":"dedup_by_key","span":{"filename":"src/lib.rs","begin":[1398,4],"end":[1404,5]},"visibility":"public","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["key",{"generic":"F"}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:3129:139","args":{"parenthesized":{"inputs":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}}],"output":{"generic":"K"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"PartialEq","id":"1:2486:208","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:192:2073":{"id":"0:192:2073","crate_id":0,"name":"retain_mut","span":{"filename":"src/lib.rs","begin":[1385,4],"end":[1387,5]},"visibility":"public","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["f",{"generic":"F"}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:3129:139","args":{"parenthesized":{"inputs":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}}],"output":{"primitive":"bool"}}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2726-0:56:1876":{"id":"b:1:2726-0:56:1876","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2703:142","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2700:160","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"SmallVec","id":"0:56:1876","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"const":{"type":{"primitive":"usize"},"expr":"N","value":null,"is_literal":false}}],"bindings":[]}}}},"items":["1:2729:2838"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:305":{"id":"0:305","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1986,0],"end":[2003,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"N","kind":{"const":{"type":{"primitive":"usize"},"default":null}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"1:7788:163","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"SmallVec","id":"0:56:1876","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"const":{"type":{"primitive":"usize"},"expr":"N","value":null,"is_literal":false}}],"bindings":[]}}}},"items":["0:308:1950","0:309:171","0:310:841"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:337:1136":{"id":"0:337:1136","crate_id":0,"name":"partial_cmp","span":{"filename":"src/lib.rs","begin":[2037,4],"end":[2039,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"SmallVec","id":"0:56:1876","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"const":{"type":{"primitive":"usize"},"expr":"N","value":null,"is_literal":false}}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42002:201","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"core::cmp::Ordering","id":"1:31164:203","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2423-0:68:1881":{"id":"b:1:2423-0:68:1881","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32419:2478","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2417:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Drain","id":"0:68:1881","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"const":{"type":{"primitive":"usize"},"expr":"N","value":null,"is_literal":false}}],"bindings":[]}}}},"items":["1:2425:1806"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:56:1876":{"id":"0:56:1876","crate_id":0,"name":"SmallVec","span":{"filename":"src/lib.rs","begin":[283,0],"end":[287,1]},"visibility":"public","docs":null,"links":{},"attrs":["#[repr(C)]"],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"N","kind":{"const":{"type":{"primitive":"usize"},"default":null}}}],"where_predicates":[]},"impls":["0:135","0:211","0:217","a:1:32500:2479-0:56:1876","a:1:42130:2661-0:56:1876","a:1:42131:2660-0:56:1876","b:1:2426-0:56:1876","b:1:2741-0:56:1876","b:1:2726-0:56:1876","b:1:2736-0:56:1876","b:1:3495-0:56:1876","b:1:2730-0:56:1876","b:1:2423-0:56:1876","b:4:687-0:56:1876","0:290","0:207","0:65","0:311","0:270","0:318","0:331","0:359","0:363","0:257","0:347","0:294","0:355","0:342","0:279","0:305","0:62","0:246","0:274","0:265","0:334","0:284","0:338","0:325","0:351"]}}},"0:88:1888":{"id":"0:88:1888","crate_id":0,"name":"next_back","span":{"filename":"src/lib.rs","begin":[331,4],"end":[336,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42002:201","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:347":{"id":"0:347","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[2058,0],"end":[2063,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"N","kind":{"const":{"type":{"primitive":"usize"},"default":null}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2417:103","args":{"angle_bracketed":{"args":[{"type":{"slice":{"generic":"T"}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"SmallVec","id":"0:56:1876","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"const":{"type":{"primitive":"usize"},"expr":"N","value":null,"is_literal":false}}],"bindings":[]}}}},"items":["0:350:1806"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12864:16297":{"id":"1:12864:16297","crate_id":1,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"1:12404:134","`FromStr`":"1:12403:6242"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"1:42149:233","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"FromStr","id":"1:12403:6242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"1:12403:6242","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:90":{"id":"0:90","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[339,0],"end":[344,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"N","kind":{"const":{"type":{"primitive":"usize"},"default":null}}}],"where_predicates":[]},"provided_trait_methods":["is_empty","len"],"trait":{"name":"ExactSizeIterator","id":"1:7879:1889","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Drain","id":"0:68:1881","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"const":{"type":{"primitive":"usize"},"expr":"N","value":null,"is_literal":false}}],"bindings":[]}}}},"items":["0:94:875"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:7796:841":{"id":"1:7796:841","crate_id":1,"name":"into_iter","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"I"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"4:5536:17005":{"id":"4:5536:17005","crate_id":4,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"4:281:1805","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"4:281:1805","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:202:2087":{"id":"0:202:2087","crate_id":0,"name":"resize_with","span":{"filename":"src/lib.rs","begin":[1438,4],"end":[1453,5]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["new_len",{"primitive":"usize"}],["f",{"generic":"F"}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:3129:139","args":{"parenthesized":{"inputs":[],"output":{"generic":"T"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:376:1826":{"id":"0:376:1826","crate_id":0,"name":"CollectionAllocErr","span":{"filename":"src/lib.rs","begin":[94,0],"end":[102,1]},"visibility":"public","docs":"Error type for APIs with fallible heap allocation","links":{},"attrs":[],"deprecation":null,"inner":{"enum":{"generics":{"params":[],"where_predicates":[]},"variants_stripped":false,"variants":["0:377:1828","0:379:1830"],"impls":["a:1:32418:244-0:376:1826","a:1:32500:2479-0:376:1826","a:1:42130:2661-0:376:1826","a:1:42131:2660-0:376:1826","a:1:2948:254-0:376:1826","b:1:2426-0:376:1826","b:1:2741-0:376:1826","b:1:2726-0:376:1826","b:1:2736-0:376:1826","b:1:3495-0:376:1826","b:1:2730-0:376:1826","b:1:2423-0:376:1826","b:4:5809-0:376:1826","0:25","0:381"]}}},"0:341:463":{"id":"0:341:463","crate_id":0,"name":"cmp","span":{"filename":"src/lib.rs","begin":[2047,4],"end":[2049,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"SmallVec","id":"0:56:1876","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"const":{"type":{"primitive":"usize"},"expr":"N","value":null,"is_literal":false}}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"core::cmp::Ordering","id":"1:31164:203","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:246":{"id":"0:246","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1755,0],"end":[1760,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"N","kind":{"const":{"type":{"primitive":"usize"},"default":null}}}],"where_predicates":[]},"provided_trait_methods":["extend_one","extend_reserve"],"trait":{"name":"Extend","id":"1:7797:2148","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"SmallVec","id":"0:56:1876","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"const":{"type":{"primitive":"usize"},"expr":"N","value":null,"is_literal":false}}],"bindings":[]}}}},"items":["0:249:2061"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:270":{"id":"0:270","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1861,0],"end":[1866,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"N","kind":{"const":{"type":{"primitive":"usize"},"default":null}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"DerefMut","id":"1:3111:2150","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"SmallVec","id":"0:56:1876","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"const":{"type":{"primitive":"usize"},"expr":"N","value":null,"is_literal":false}}],"bindings":[]}}}},"items":["0:273:599"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:322:1950":{"id":"0:322:1950","crate_id":0,"name":"IntoIter","span":{"filename":"src/lib.rs","begin":[2014,4],"end":[2014,48]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"IterMut","id":"1:10700:2164","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}}}}},"0:379:1830":{"id":"0:379:1830","crate_id":0,"name":"AllocErr","span":{"filename":"src/lib.rs","begin":[98,4],"end":[101,5]},"visibility":"default","docs":"The allocator return an error","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":{"struct":{"fields":["0:380:1832"],"fields_stripped":false}},"discriminant":null}}},"b:1:3495-0:68:1881":{"id":"b:1:3495-0:68:1881","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:32419:2478","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3493:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Drain","id":"0:68:1881","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"const":{"type":{"primitive":"usize"},"expr":"N","value":null,"is_literal":false}}],"bindings":[]}}}},"items":["1:3497:1634"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:334":{"id":"0:334","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[2032,0],"end":[2040,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"N","kind":{"const":{"type":{"primitive":"usize"},"default":null}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"PartialOrd","id":"1:2528:209","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["le","lt","gt","ge"],"trait":{"name":"PartialOrd","id":"1:2528:209","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"SmallVec","id":"0:56:1876","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"const":{"type":{"primitive":"usize"},"expr":"N","value":null,"is_literal":false}}],"bindings":[]}}}},"items":["0:337:1136"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:177:2058":{"id":"0:177:2058","crate_id":0,"name":"insert","span":{"filename":"src/lib.rs","begin":[1246,4],"end":[1262,5]},"visibility":"public","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}],["value",{"generic":"T"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:342":{"id":"0:342","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[2052,0],"end":[2056,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Hash","id":"1:10093:150","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"N","kind":{"const":{"type":{"primitive":"usize"},"default":null}}}],"where_predicates":[]},"provided_trait_methods":["hash_slice"],"trait":{"name":"Hash","id":"1:10093:150","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"SmallVec","id":"0:56:1876","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"const":{"type":{"primitive":"usize"},"expr":"N","value":null,"is_literal":false}}],"bindings":[]}}}},"items":["0:345:783"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:4:5809-0:376:1826":{"id":"b:4:5809-0:376:1826","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"1:9882:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:32419:2478","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"ToString","id":"4:5807:258","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"CollectionAllocErr","id":"0:376:1826","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["4:5811:1596"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:12858:16295":{"id":"1:12858:16295","crate_id":1,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:53441:452","self::pattern":"1:12443:6521"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12448:4003","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:279":{"id":"0:279","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1907,0],"end":[1911,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(feature = \"specialization\"))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2439:111","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"N","kind":{"const":{"type":{"primitive":"usize"},"default":null}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2703:142","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"slice":{"generic":"T"}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"SmallVec","id":"0:56:1876","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"const":{"type":{"primitive":"usize"},"expr":"N","value":null,"is_literal":false}}],"bindings":[]}}}},"items":["0:283:746"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12779:15476":{"id":"1:12779:15476","crate_id":1,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"1:53441:452","self::pattern":"1:12443:6521"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12448:4003","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:382:719":{"id":"0:382:719","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[93,9],"end":[93,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"1:9852:141","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"1:9833:233","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:172:1920":{"id":"0:172:1920","crate_id":0,"name":"as_slice","span":{"filename":"src/lib.rs","begin":[1183,4],"end":[1188,5]},"visibility":"public","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"generic":"T"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:164:1956":{"id":"0:164:1956","crate_id":0,"name":"grow","span":{"filename":"src/lib.rs","begin":[1041,4],"end":[1043,5]},"visibility":"public","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["new_capacity",{"primitive":"usize"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:167:2046":{"id":"0:167:2046","crate_id":0,"name":"try_reserve","span":{"filename":"src/lib.rs","begin":[1101,4],"end":[1112,5]},"visibility":"public","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["additional",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Result","id":"1:42149:233","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}},{"type":{"resolved_path":{"name":"CollectionAllocErr","id":"0:376:1826","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:359":{"id":"0:359","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[2079,0],"end":[2084,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"N","kind":{"const":{"type":{"primitive":"usize"},"default":null}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"AsMut","id":"1:2697:77","args":{"angle_bracketed":{"args":[{"type":{"slice":{"generic":"T"}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"SmallVec","id":"0:56:1876","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"const":{"type":{"primitive":"usize"},"expr":"N","value":null,"is_literal":false}}],"bindings":[]}}}},"items":["0:362:1894"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:310:841":{"id":"0:310:841","crate_id":0,"name":"into_iter","span":{"filename":"src/lib.rs","begin":[1989,4],"end":[2002,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"qualified_path":{"name":"IntoIter","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"1:7788:163","args":null}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:221:2139":{"id":"0:221:2139","crate_id":0,"name":"from_elem","span":{"filename":"src/lib.rs","begin":[1645,4],"end":[1666,5]},"visibility":"public","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["elem",{"generic":"T"}],["n",{"primitive":"usize"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:7794:171":{"id":"1:7794:171","crate_id":1,"name":"Item","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"Iterator","id":"1:7935:176","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}},"b:1:2730-0:27:1839":{"id":"b:1:2730-0:27:1839","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2703:142","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RawSmallVec","id":"0:27:1839","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"const":{"type":{"primitive":"usize"},"expr":"N","value":null,"is_literal":false}}],"bindings":[]}}}},"items":["1:2732:746"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:12855:16294":{"id":"1:12855:16294","crate_id":1,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:53441:452","self::pattern":"1:12443:6521"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12448:4003","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12448:4003","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12463:6527","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:284":{"id":"0:284","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1912,0],"end":[1916,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2439:111","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"N","kind":{"const":{"type":{"primitive":"usize"},"default":null}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2703:142","args":{"angle_bracketed":{"args":[{"type":{"array":{"type":{"generic":"T"},"len":"N"}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"SmallVec","id":"0:56:1876","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"const":{"type":{"primitive":"usize"},"expr":"N","value":null,"is_literal":false}}],"bindings":[]}}}},"items":["0:288:746"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12841:16288":{"id":"1:12841:16288","crate_id":1,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:65":{"id":"0:65","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[290,0],"end":[290,63]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2948:254","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"N","kind":{"const":{"type":{"primitive":"usize"},"default":null}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2948:254","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"SmallVec","id":"0:56:1876","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"const":{"type":{"primitive":"usize"},"expr":"N","value":null,"is_literal":false}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:94:875":{"id":"0:94:875","crate_id":0,"name":"len","span":{"filename":"src/lib.rs","begin":[341,4],"end":[343,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:4:687-0:56:1876":{"id":"b:4:687-0:56:1876","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2439:111","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"4:683:257","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"SmallVec","id":"0:56:1876","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"const":{"type":{"primitive":"usize"},"expr":"N","value":null,"is_literal":false}}],"bindings":[]}}}},"items":["4:689:3789","4:690:11891","4:691:11892"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:32500:2479-0:104:1950":{"id":"a:1:32500:2479-0:104:1950","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"N","kind":{"const":{"type":{"primitive":"usize"},"default":null}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"1:32500:2479","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32500:2479","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:104:1950","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"const":{"type":{"primitive":"usize"},"expr":"N","value":null,"is_literal":false}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:2729:2838":{"id":"1:2729:2838","crate_id":1,"name":"into","span":null,"visibility":"default","docs":"Calls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of\n<code>[From]&lt;T&gt; for U</code> chooses to do.","links":{"From":"1:2703:142"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"U"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:317:841":{"id":"0:317:841","crate_id":0,"name":"into_iter","span":{"filename":"src/lib.rs","begin":[2008,4],"end":[2010,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"qualified_path":{"name":"IntoIter","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"1:7788:163","args":null}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:257":{"id":"0:257","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1807,0],"end":[1827,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(feature = \"may_dangle\"))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"N","kind":{"const":{"type":{"primitive":"usize"},"default":null}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Drop","id":"1:3122:1891","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"SmallVec","id":"0:56:1876","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"const":{"type":{"primitive":"usize"},"expr":"N","value":null,"is_literal":false}}],"bindings":[]}}}},"items":["0:260:635"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:315:1950":{"id":"0:315:1950","crate_id":0,"name":"IntoIter","span":{"filename":"src/lib.rs","begin":[2006,4],"end":[2006,45]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Iter","id":"1:10676:1885","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}}}}},"0:140:1954":{"id":"0:140:1954","crate_id":0,"name":"with_capacity","span":{"filename":"src/lib.rs","begin":[695,4],"end":[701,5]},"visibility":"public","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["capacity",{"primitive":"usize"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:155:1986":{"id":"0:155:1986","crate_id":0,"name":"spilled","span":{"filename":"src/lib.rs","begin":[872,4],"end":[874,5]},"visibility":"public","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:151:1955":{"id":"0:151:1955","crate_id":0,"name":"inline_size","span":{"filename":"src/lib.rs","begin":[842,4],"end":[848,5]},"visibility":"public","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:103:635":{"id":"0:103:635","crate_id":0,"name":"drop","span":{"filename":"src/lib.rs","begin":[349,4],"end":[373,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:2948:254-0:27:1839":{"id":"a:1:2948:254-0:27:1839","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"N","kind":{"const":{"type":{"primitive":"usize"},"default":null}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2948:254","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawSmallVec","id":"0:27:1839","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"const":{"type":{"primitive":"usize"},"expr":"N","value":null,"is_literal":false}}],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"1:2740:1621":{"id":"1:2740:1621","crate_id":1,"name":"try_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Result","id":"1:42149:233","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"1:2710:264","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:84":{"id":"0:84","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[329,0],"end":[337,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[{"outlives":"'a"}],"default":null,"synthetic":false}}},{"name":"N","kind":{"const":{"type":{"primitive":"usize"},"default":null}}}],"where_predicates":[]},"provided_trait_methods":["nth_back","rfold","advance_back_by","try_rfold","rfind"],"trait":{"name":"DoubleEndedIterator","id":"1:7826:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Drain","id":"0:68:1881","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"const":{"type":{"primitive":"usize"},"expr":"N","value":null,"is_literal":false}}],"bindings":[]}}}},"items":["0:88:1888"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2741-0:376:1826":{"id":"b:1:2741-0:376:1826","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2700:160","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2710:264","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"CollectionAllocErr","id":"0:376:1826","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2744:135","1:2745:1619"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:156:1927":{"id":"0:156:1927","crate_id":0,"name":"drain","span":{"filename":"src/lib.rs","begin":[876,4],"end":[913,5]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["range",{"generic":"R"}]],"output":{"resolved_path":{"name":"Drain","id":"0:68:1881","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"T"}},{"const":{"type":{"primitive":"usize"},"expr":"N","value":null,"is_literal":false}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"R"},"bounds":[{"trait_bound":{"trait":{"name":"core::ops::RangeBounds","id":"1:3254:218","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:166:2031":{"id":"0:166:2031","crate_id":0,"name":"reserve","span":{"filename":"src/lib.rs","begin":[1087,4],"end":[1098,5]},"visibility":"public","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["additional",{"primitive":"usize"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12849:16292":{"id":"1:12849:16292","crate_id":1,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:53441:452","self::pattern":"1:12443:6521"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["prefix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:42002:201","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12448:4003","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:42130:2661-0:68:1881":{"id":"a:1:42130:2661-0:68:1881","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"N","kind":{"const":{"type":{"primitive":"usize"},"default":null}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:42131:2660","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:42130:2661","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Drain","id":"0:68:1881","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"const":{"type":{"primitive":"usize"},"expr":"N","value":null,"is_literal":false}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:12769:16268":{"id":"1:12769:16268","crate_id":1,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_mut":"1:12770:16269"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:290":{"id":"0:290","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1917,0],"end":[1921,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2439:111","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"N","kind":{"const":{"type":{"primitive":"usize"},"default":null}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2703:142","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Vec","id":"4:6960:270","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"SmallVec","id":"0:56:1876","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"const":{"type":{"primitive":"usize"},"expr":"N","value":null,"is_literal":false}}],"bindings":[]}}}},"items":["0:293:746"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:358:341":{"id":"0:358:341","crate_id":0,"name":"as_ref","span":{"filename":"src/lib.rs","begin":[2074,4],"end":[2076,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"generic":"T"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:2744:135":{"id":"1:2744:135","crate_id":1,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Infallible","id":"1:32348:6387","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"b:1:2426-0:376:1826":{"id":"b:1:2426-0:376:1826","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32419:2478","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2420:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"CollectionAllocErr","id":"0:376:1826","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2428:2167"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:32418:244-0:104:1950":{"id":"a:1:32418:244-0:104:1950","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"N","kind":{"const":{"type":{"primitive":"usize"},"default":null}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:32418:244","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:104:1950","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"const":{"type":{"primitive":"usize"},"expr":"N","value":null,"is_literal":false}}],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"4:5552:17009":{"id":"4:5552:17009","crate_id":4,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"4:281:1805","`String`":"4:7535:250"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"4:281:1805","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"4:7535:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2736-0:376:1826":{"id":"b:1:2736-0:376:1826","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2710:264","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2706:265","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"CollectionAllocErr","id":"0:376:1826","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2739:135","1:2740:1621"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:118:1953":{"id":"0:118:1953","crate_id":0,"name":"as_mut_slice","span":{"filename":"src/lib.rs","begin":[620,4],"end":[629,5]},"visibility":"public","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"generic":"T"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12776:16270":{"id":"1:12776:16270","crate_id":1,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nNote that any carriage return (`\\r`) not immediately followed by a\nline feed (`\\n`) does not split a line. These carriage returns are\nthereby included in the produced lines.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\r\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\n// Trailing carriage return is included in the last line\nassert_eq!(Some(\"baz\\r\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line does not require any ending:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Lines","id":"1:44156:4148","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:3497:1634":{"id":"1:3497:1634","crate_id":1,"name":"type_id","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"TypeId","id":"1:39762:4066","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2726-0:376:1826":{"id":"b:1:2726-0:376:1826","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2703:142","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2700:160","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"CollectionAllocErr","id":"0:376:1826","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2729:2838"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:269:597":{"id":"0:269:597","crate_id":0,"name":"deref","span":{"filename":"src/lib.rs","begin":[1857,4],"end":[1859,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Target","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"1:3098:124","args":null}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:210:60":{"id":"0:210:60","crate_id":0,"name":"default","span":{"filename":"src/lib.rs","begin":[1570,4],"end":[1572,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:42130:2661-0:376:1826":{"id":"a:1:42130:2661-0:376:1826","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:42130:2661","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"CollectionAllocErr","id":"0:376:1826","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2736-0:27:1839":{"id":"b:1:2736-0:27:1839","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2710:264","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2706:265","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RawSmallVec","id":"0:27:1839","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"const":{"type":{"primitive":"usize"},"expr":"N","value":null,"is_literal":false}}],"bindings":[]}}}},"items":["1:2739:135","1:2740:1621"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:299":{"id":"0:299","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1946,0],"end":[1951,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2439:111","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"N","kind":{"const":{"type":{"primitive":"usize"},"default":null}}}],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2439:111","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:104:1950","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"const":{"type":{"primitive":"usize"},"expr":"N","value":null,"is_literal":false}}],"bindings":[]}}}},"items":["0:302:456"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:194:2074":{"id":"0:194:2074","crate_id":0,"name":"dedup","span":{"filename":"src/lib.rs","begin":[1390,4],"end":[1395,5]},"visibility":"public","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"PartialEq","id":"1:2486:208","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12755:16264":{"id":"1:12755:16264","crate_id":1,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"1:11998:6529"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12785:16273":{"id":"1:12785:16273","crate_id":1,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"1:53441:452","self::pattern":"1:12443:6521"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12448:4003","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12448:4003","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12463:6527","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:176:2057":{"id":"0:176:2057","crate_id":0,"name":"remove","span":{"filename":"src/lib.rs","begin":[1229,4],"end":[1243,5]},"visibility":"public","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:308:1950":{"id":"0:308:1950","crate_id":0,"name":"IntoIter","span":{"filename":"src/lib.rs","begin":[1987,4],"end":[1987,35]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"IntoIter","id":"0:104:1950","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"const":{"type":{"primitive":"usize"},"expr":"N","value":null,"is_literal":false}}],"bindings":[]}}}}}}},"1:7795:1950":{"id":"1:7795:1950","crate_id":1,"name":"IntoIter","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"I"}}}},"b:1:2741-0:104:1950":{"id":"b:1:2741-0:104:1950","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2700:160","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2710:264","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:104:1950","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"const":{"type":{"primitive":"usize"},"expr":"N","value":null,"is_literal":false}}],"bindings":[]}}}},"items":["1:2744:135","1:2745:1619"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2741-0:27:1839":{"id":"b:1:2741-0:27:1839","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2700:160","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2710:264","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RawSmallVec","id":"0:27:1839","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"const":{"type":{"primitive":"usize"},"expr":"N","value":null,"is_literal":false}}],"bindings":[]}}}},"items":["1:2744:135","1:2745:1619"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:370:719":{"id":"0:370:719","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[2093,4],"end":[2095,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"core::fmt::Formatter","id":"1:9852:141","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"core::fmt::Result","id":"1:9833:233","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:214:2129":{"id":"0:214:2129","crate_id":0,"name":"from_slice","span":{"filename":"src/lib.rs","begin":[1577,4],"end":[1596,5]},"visibility":"public","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["slice",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"generic":"T"}}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12832:16284":{"id":"1:12832:16284","crate_id":1,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"1:12443:6521","`DoubleEndedIterator`":"1:7826:128","prim@char":"1:53441:452","str::match_indices":"1:12829:16283"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatchIndices","id":"1:44070:4145","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12448:4003","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12448:4003","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12463:6527","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:32418:244-0:27:1839":{"id":"a:1:32418:244-0:27:1839","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"N","kind":{"const":{"type":{"primitive":"usize"},"default":null}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:32418:244","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawSmallVec","id":"0:27:1839","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"const":{"type":{"primitive":"usize"},"expr":"N","value":null,"is_literal":false}}],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"0:80:171":{"id":"0:80:171","crate_id":0,"name":"Item","span":{"filename":"src/lib.rs","begin":[312,4],"end":[312,18]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"1:12782:16272":{"id":"1:12782:16272","crate_id":1,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"prim@char":"1:53441:452","self::pattern":"1:12443:6521"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12448:4003","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12758:1896":{"id":"1:12758:1896","crate_id":1,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:53458:1643"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2730-0:56:1876":{"id":"b:1:2730-0:56:1876","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2703:142","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"SmallVec","id":"0:56:1876","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"const":{"type":{"primitive":"usize"},"expr":"N","value":null,"is_literal":false}}],"bindings":[]}}}},"items":["1:2732:746"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:190:2071":{"id":"0:190:2071","crate_id":0,"name":"retain","span":{"filename":"src/lib.rs","begin":[1366,4],"end":[1382,5]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["f",{"generic":"F"}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:3129:139","args":{"parenthesized":{"inputs":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}}],"output":{"primitive":"bool"}}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:302:456":{"id":"0:302:456","crate_id":0,"name":"clone","span":{"filename":"src/lib.rs","begin":[1948,4],"end":[1950,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"IntoIter","id":"0:104:1950","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"const":{"type":{"primitive":"usize"},"expr":"N","value":null,"is_literal":false}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2423-0:376:1826":{"id":"b:1:2423-0:376:1826","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32419:2478","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2417:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"CollectionAllocErr","id":"0:376:1826","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2425:1806"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:249:2061":{"id":"0:249:2061","crate_id":0,"name":"extend","span":{"filename":"src/lib.rs","begin":[1757,4],"end":[1759,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["iterable",{"generic":"I"}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"1:7788:163","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"generic":"T"}}}}]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12778:14419":{"id":"1:12778:14419","crate_id":1,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EncodeUtf16","id":"1:44194:4017","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:42130:2661-0:27:1839":{"id":"a:1:42130:2661-0:27:1839","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"N","kind":{"const":{"type":{"primitive":"usize"},"default":null}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"UnwindSafe","id":"1:42130:2661","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:42131:2660","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:42130:2661","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawSmallVec","id":"0:27:1839","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"const":{"type":{"primitive":"usize"},"expr":"N","value":null,"is_literal":false}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:159:2030":{"id":"0:159:2030","crate_id":0,"name":"push","span":{"filename":"src/lib.rs","begin":[981,4],"end":[992,5]},"visibility":"public","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["value",{"generic":"T"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12746":{"id":"1:12746","crate_id":1,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["1:12747:875","1:12748:1985","1:12749:16261","1:12750:16262","1:12752:16263","1:12755:16264","1:12756:16265","1:12757:340","1:12758:1896","1:12759:15173","1:12761:15174","1:12763:2158","1:12765:15175","1:12767:16266","1:12768:16267","1:12769:16268","1:12770:16269","1:12771:4018","1:12772:4163","1:12773:3833","1:12774:14403","1:12775:14408","1:12776:16270","1:12777:16271","1:12778:14419","1:12779:15476","1:12782:16272","1:12785:16273","1:12788:2875","1:12792:2843","1:12796:16274","1:12799:14404","1:12802:16275","1:12805:16276","1:12808:16277","1:12811:16278","1:12814:16279","1:12817:16280","1:12820:16281","1:12823:2354","1:12826:16282","1:12829:16283","1:12832:16284","1:12835:16285","1:12837:16286","1:12839:16287","1:12841:16288","1:12842:16289","1:12843:16290","1:12846:16291","1:12849:16292","1:12852:16293","1:12855:16294","1:12858:16295","1:12861:16296","1:12864:16297","1:12866:16298","1:12867:16299","1:12868:16300","1:12869:16301","1:12870:16302","1:12871:16303","1:12872:16304","1:12873:16305","1:12874:16306","1:12876:6405","1:12877:16307"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:169:2048":{"id":"0:169:2048","crate_id":0,"name":"try_reserve_exact","span":{"filename":"src/lib.rs","begin":[1128,4],"end":[1138,5]},"visibility":"public","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["additional",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Result","id":"1:42149:233","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}},{"type":{"resolved_path":{"name":"CollectionAllocErr","id":"0:376:1826","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2423-0:27:1839":{"id":"b:1:2423-0:27:1839","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32419:2478","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2417:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RawSmallVec","id":"0:27:1839","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"const":{"type":{"primitive":"usize"},"expr":"N","value":null,"is_literal":false}}],"bindings":[]}}}},"items":["1:2425:1806"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:345:783":{"id":"0:345:783","crate_id":0,"name":"hash","span":{"filename":"src/lib.rs","begin":[2053,4],"end":[2055,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["state",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"H"}}}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"H","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Hasher","id":"1:10101:154","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:185:2068":{"id":"0:185:2068","crate_id":0,"name":"into_vec","span":{"filename":"src/lib.rs","begin":[1315,4],"end":[1342,5]},"visibility":"public","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Vec","id":"4:6960:270","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:139:1039":{"id":"0:139:1039","crate_id":0,"name":"new","span":{"filename":"src/lib.rs","begin":[686,4],"end":[692,5]},"visibility":"public","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"SmallVec","id":"0:56:1876","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"const":{"type":{"primitive":"usize"},"expr":"N","value":null,"is_literal":false}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:297:456":{"id":"0:297:456","crate_id":0,"name":"clone","span":{"filename":"src/lib.rs","begin":[1925,4],"end":[1927,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SmallVec","id":"0:56:1876","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"const":{"type":{"primitive":"usize"},"expr":"N","value":null,"is_literal":false}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:117:1920":{"id":"0:117:1920","crate_id":0,"name":"as_slice","span":{"filename":"src/lib.rs","begin":[607,4],"end":[617,5]},"visibility":"public","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"generic":"T"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12749:16261":{"id":"1:12749:16261","crate_id":1,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:377:1828":{"id":"0:377:1828","crate_id":0,"name":"CapacityOverflow","span":{"filename":"src/lib.rs","begin":[96,4],"end":[96,20]},"visibility":"default","docs":"Overflow `usize::MAX` or other error during size computation","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"0:168:2047":{"id":"0:168:2047","crate_id":0,"name":"reserve_exact","span":{"filename":"src/lib.rs","begin":[1115,4],"end":[1125,5]},"visibility":"public","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["additional",{"primitive":"usize"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:277:749":{"id":"0:277:749","crate_id":0,"name":"from_iter","span":{"filename":"src/lib.rs","begin":[1870,4],"end":[1874,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["iterable",{"generic":"I"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"1:7788:163","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"generic":"T"}}}}]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12747:875":{"id":"1:12747:875","crate_id":1,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"1:53441:452"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12763:2158":{"id":"1:12763:2158","crate_id":1,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:10530:246","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:10530:246","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3495-0:27:1839":{"id":"b:1:3495-0:27:1839","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:32419:2478","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3493:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawSmallVec","id":"0:27:1839","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"const":{"type":{"primitive":"usize"},"expr":"N","value":null,"is_literal":false}}],"bindings":[]}}}},"items":["1:3497:1634"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:323:171":{"id":"0:323:171","crate_id":0,"name":"Item","span":{"filename":"src/lib.rs","begin":[2015,4],"end":[2015,26]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"borrowed_ref":{"lifetime":"'a","mutable":true,"type":{"generic":"T"}}}}}},"1:12877:16307":{"id":"1:12877:16307","crate_id":1,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"1:4668:16307"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeUnicode","id":"1:44219:4077","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:381":{"id":"0:381","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[93,9],"end":[93,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:9877:118","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"CollectionAllocErr","id":"0:376:1826","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:382:719"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:135":{"id":"0:135","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[679,0],"end":[1566,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"N","kind":{"const":{"type":{"primitive":"usize"},"default":null}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"SmallVec","id":"0:56:1876","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"const":{"type":{"primitive":"usize"},"expr":"N","value":null,"is_literal":false}}],"bindings":[]}}}},"items":["0:139:1039","0:140:1954","0:141:1957","0:142:1959","0:144:1961","0:146:1973","0:150:1899","0:151:1955","0:152:875","0:153:1985","0:154:1849","0:155:1986","0:156:1927","0:159:2030","0:161:2033","0:162:2034","0:164:1956","0:165:2038","0:166:2031","0:167:2046","0:168:2047","0:169:2048","0:170:2049","0:171:2050","0:172:1920","0:173:1953","0:174:2051","0:175:2056","0:176:2057","0:177:2058","0:181:2066","0:183:340","0:184:1896","0:185:2068","0:186:2069","0:187:2070","0:190:2071","0:192:2073","0:194:2074","0:196:2078","0:200:2075","0:202:2087","0:204:1952"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:3495-0:376:1826":{"id":"b:1:3495-0:376:1826","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:32419:2478","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3493:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"CollectionAllocErr","id":"0:376:1826","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3497:1634"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:42130:2661-0:56:1876":{"id":"a:1:42130:2661-0:56:1876","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"N","kind":{"const":{"type":{"primitive":"usize"},"default":null}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"UnwindSafe","id":"1:42130:2661","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:42131:2660","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:42130:2661","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"SmallVec","id":"0:56:1876","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"const":{"type":{"primitive":"usize"},"expr":"N","value":null,"is_literal":false}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:119":{"id":"0:119","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[632,0],"end":[655,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"N","kind":{"const":{"type":{"primitive":"usize"},"default":null}}}],"where_predicates":[]},"provided_trait_methods":["ne","try_find","try_for_each","try_collect","scan","intersperse_with","advance_by","max","is_sorted_by_key","product","rev","position","ge","fold","collect_into","flat_map","filter_map","nth","min","__iterator_get_unchecked","fuse","any","cmp_by","unzip","rposition","reduce","all","partition","partial_cmp","flatten","cloned","peekable","for_each","step_by","count","le","lt","partial_cmp_by","copied","max_by_key","try_reduce","partition_in_place","map_windows","collect","skip_while","chain","size_hint","eq","eq_by","cycle","last","max_by","find","is_partitioned","inspect","take_while","zip","skip","take","enumerate","is_sorted","array_chunks","min_by_key","find_map","try_fold","by_ref","filter","map_while","intersperse","next_chunk","map","cmp","gt","sum","is_sorted_by","min_by"],"trait":{"name":"Iterator","id":"1:7935:176","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:104:1950","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"const":{"type":{"primitive":"usize"},"expr":"N","value":null,"is_literal":false}}],"bindings":[]}}}},"items":["0:122:171","0:123:1053","0:124:1887"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:183:340":{"id":"0:183:340","crate_id":0,"name":"as_ptr","span":{"filename":"src/lib.rs","begin":[1295,4],"end":[1302,5]},"visibility":"public","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12757:340":{"id":"1:12757:340","crate_id":1,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"1:12758:1896","`u8`":"1:53458:1643"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12802:16275":{"id":"1:12802:16275","crate_id":1,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"1:12443:6521","`DoubleEndedIterator`":"1:7826:128","prim@char":"1:53441:452","str::split":"1:12796:16274"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplit","id":"1:43920:3026","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12448:4003","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12448:4003","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12463:6527","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12872:16304":{"id":"1:12872:16304","crate_id":1,"name":"trim_ascii_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\"\\r hello world\\u{3000}\\n \".trim_ascii_end(), \"\\r hello world\\u{3000}\");\nassert_eq!(\"  \".trim_ascii_end(), \"\");\nassert_eq!(\"\".trim_ascii_end(), \"\");\n```","links":{"u8::is_ascii_whitespace":"1:895:19466"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12773:3833":{"id":"1:12773:3833","crate_id":1,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"1:43888:4079","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:68:1881":{"id":"0:68:1881","crate_id":0,"name":"Drain","span":{"filename":"src/lib.rs","begin":[297,0],"end":[309,1]},"visibility":"public","docs":"An iterator that removes the items from a `SmallVec` and yields them by value.\n\nReturned from [`SmallVec::drain`][1].\n\n[1]: struct.SmallVec.html#method.drain","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[{"outlives":"'a"}],"default":null,"synthetic":false}}},{"name":"N","kind":{"const":{"type":{"primitive":"usize"},"default":null}}}],"where_predicates":[]},"impls":["a:1:32418:244-0:68:1881","a:1:32500:2479-0:68:1881","a:1:42130:2661-0:68:1881","a:1:42131:2660-0:68:1881","a:1:2948:254-0:68:1881","b:1:2426-0:68:1881","b:1:2741-0:68:1881","b:1:2726-0:68:1881","b:1:2736-0:68:1881","b:1:3495-0:68:1881","b:1:7792-0:68:1881","b:1:2730-0:68:1881","b:1:2423-0:68:1881","0:99","0:90","0:84","0:95","0:371","0:76"]}}},"1:12835:16285":{"id":"1:12835:16285","crate_id":1,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12752:16263":{"id":"1:12752:16263","crate_id":1,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nIf `index` is greater than the length of the string, this returns the length of the string.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"1:12750:16262"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2736-0:68:1881":{"id":"b:1:2736-0:68:1881","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2710:264","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2706:265","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Drain","id":"0:68:1881","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"const":{"type":{"primitive":"usize"},"expr":"N","value":null,"is_literal":false}}],"bindings":[]}}}},"items":["1:2739:135","1:2740:1621"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:132":{"id":"0:132","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[677,0],"end":[677,71]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"N","kind":{"const":{"type":{"primitive":"usize"},"default":null}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"FusedIterator","id":"1:8243:1890","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:104:1950","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"const":{"type":{"primitive":"usize"},"expr":"N","value":null,"is_literal":false}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:186:2069":{"id":"0:186:2069","crate_id":0,"name":"into_boxed_slice","span":{"filename":"src/lib.rs","begin":[1345,4],"end":[1347,5]},"visibility":"public","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Box","id":"4:281:1805","args":{"angle_bracketed":{"args":[{"type":{"slice":{"generic":"T"}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12775:14408":{"id":"1:12775:14408","crate_id":1,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"1:12774:14403"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitAsciiWhitespace","id":"1:44185:4151","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"4:5551:17008":{"id":"4:5551:17008","crate_id":4,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"4:7535:250"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"4:7535:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:187:2070":{"id":"0:187:2070","crate_id":0,"name":"into_inner","span":{"filename":"src/lib.rs","begin":[1350,4],"end":[1364,5]},"visibility":"public","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Result","id":"1:42149:233","args":{"angle_bracketed":{"args":[{"type":{"array":{"type":{"generic":"T"},"len":"N"}}},{"type":{"generic":"Self"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:25":{"id":"0:25","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[103,0],"end":[107,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Display","id":"1:9882:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"CollectionAllocErr","id":"0:376:1826","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:26:719"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2736-0:56:1876":{"id":"b:1:2736-0:56:1876","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2710:264","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2706:265","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"SmallVec","id":"0:56:1876","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"const":{"type":{"primitive":"usize"},"expr":"N","value":null,"is_literal":false}}],"bindings":[]}}}},"items":["1:2739:135","1:2740:1621"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:331":{"id":"0:331","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[2030,0],"end":[2030,60]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"N","kind":{"const":{"type":{"primitive":"usize"},"default":null}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Eq","id":"1:2491:132","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"1:2491:132","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"SmallVec","id":"0:56:1876","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"const":{"type":{"primitive":"usize"},"expr":"N","value":null,"is_literal":false}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:42131:2660-0:68:1881":{"id":"a:1:42131:2660-0:68:1881","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"N","kind":{"const":{"type":{"primitive":"usize"},"default":null}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:42131:2660","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:42131:2660","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Drain","id":"0:68:1881","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"const":{"type":{"primitive":"usize"},"expr":"N","value":null,"is_literal":false}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:7792-0:104:1950":{"id":"b:1:7792-0:104:1950","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"1:7935:176","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"1:7788:163","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:104:1950","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"const":{"type":{"primitive":"usize"},"expr":"N","value":null,"is_literal":false}}],"bindings":[]}}}},"items":["1:7794:171","1:7795:1950","1:7796:841"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"I"}}}},"b:1:2726-0:27:1839":{"id":"b:1:2726-0:27:1839","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2703:142","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2700:160","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RawSmallVec","id":"0:27:1839","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"const":{"type":{"primitive":"usize"},"expr":"N","value":null,"is_literal":false}}],"bindings":[]}}}},"items":["1:2729:2838"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:316:171":{"id":"0:316:171","crate_id":0,"name":"Item","span":{"filename":"src/lib.rs","begin":[2007,4],"end":[2007,22]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"T"}}}}}},"0:311":{"id":"0:311","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[2005,0],"end":[2011,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"N","kind":{"const":{"type":{"primitive":"usize"},"default":null}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"1:7788:163","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"resolved_path":{"name":"SmallVec","id":"0:56:1876","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"const":{"type":{"primitive":"usize"},"expr":"N","value":null,"is_literal":false}}],"bindings":[]}}}}}},"items":["0:315:1950","0:316:171","0:317:841"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12861:16296":{"id":"1:12861:16296","crate_id":1,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:53441:452","self::pattern":"1:12443:6521"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12448:4003","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12448:4003","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12463:6527","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"4:689:3789":{"id":"4:689:3789","crate_id":4,"name":"Owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"0:293:746":{"id":"0:293:746","crate_id":0,"name":"from","span":{"filename":"src/lib.rs","begin":[1918,4],"end":[1920,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["array",{"resolved_path":{"name":"Vec","id":"4:6960:270","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12839:16287":{"id":"1:12839:16287","crate_id":1,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12867:16299":{"id":"1:12867:16299","crate_id":1,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"1:39949:11896","Self::is_ascii":"1:12866:16298"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42002:201","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"AsciiChar","id":"1:39949:11896","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:330:662":{"id":"0:330:662","crate_id":0,"name":"eq","span":{"filename":"src/lib.rs","begin":[2026,4],"end":[2028,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"SmallVec","id":"0:56:1876","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}},{"const":{"type":{"primitive":"usize"},"expr":"M","value":null,"is_literal":false}}],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:273:599":{"id":"0:273:599","crate_id":0,"name":"deref_mut","span":{"filename":"src/lib.rs","begin":[1863,4],"end":[1865,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Target","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"1:3098:124","args":null}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12772:4163":{"id":"1:12772:4163","crate_id":1,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the previous character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:53441:452"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CharIndices","id":"1:43878:4140","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:318":{"id":"0:318","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[2013,0],"end":[2019,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"N","kind":{"const":{"type":{"primitive":"usize"},"default":null}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"1:7788:163","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"borrowed_ref":{"lifetime":"'a","mutable":true,"type":{"resolved_path":{"name":"SmallVec","id":"0:56:1876","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"const":{"type":{"primitive":"usize"},"expr":"N","value":null,"is_literal":false}}],"bindings":[]}}}}}},"items":["0:322:1950","0:323:171","0:324:841"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:153:1985":{"id":"0:153:1985","crate_id":0,"name":"is_empty","span":{"filename":"src/lib.rs","begin":[857,4],"end":[859,5]},"visibility":"public","docs":null,"links":{},"attrs":["#[must_use]","#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2726-0:68:1881":{"id":"b:1:2726-0:68:1881","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2703:142","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2700:160","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Drain","id":"0:68:1881","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"const":{"type":{"primitive":"usize"},"expr":"N","value":null,"is_literal":false}}],"bindings":[]}}}},"items":["1:2729:2838"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:128:1888":{"id":"0:128:1888","crate_id":0,"name":"next_back","span":{"filename":"src/lib.rs","begin":[659,4],"end":[674,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42002:201","args":{"angle_bracketed":{"args":[{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"1:7935:176","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:123:1053":{"id":"0:123:1053","crate_id":0,"name":"next","span":{"filename":"src/lib.rs","begin":[636,4],"end":[648,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42002:201","args":{"angle_bracketed":{"args":[{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"1:7935:176","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2426-0:27:1839":{"id":"b:1:2426-0:27:1839","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32419:2478","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2420:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RawSmallVec","id":"0:27:1839","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"const":{"type":{"primitive":"usize"},"expr":"N","value":null,"is_literal":false}}],"bindings":[]}}}},"items":["1:2428:2167"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:12820:16281":{"id":"1:12820:16281","crate_id":1,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:42002:201","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12448:4003","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12448:4003","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12463:6527","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:32500:2479-0:27:1839":{"id":"a:1:32500:2479-0:27:1839","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"N","kind":{"const":{"type":{"primitive":"usize"},"default":null}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"1:32500:2479","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32500:2479","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawSmallVec","id":"0:27:1839","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"const":{"type":{"primitive":"usize"},"expr":"N","value":null,"is_literal":false}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:12799:14404":{"id":"1:12799:14404","crate_id":1,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"1:53441:452","self::pattern":"1:12443:6521"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitInclusive","id":"1:12259:3039","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12448:4003","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12837:16286":{"id":"1:12837:16286","crate_id":1,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:32500:2479-0:376:1826":{"id":"a:1:32500:2479-0:376:1826","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32500:2479","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"CollectionAllocErr","id":"0:376:1826","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:129":{"id":"0:129","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[676,0],"end":[676,63]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"N","kind":{"const":{"type":{"primitive":"usize"},"default":null}}}],"where_predicates":[]},"provided_trait_methods":["is_empty","len"],"trait":{"name":"ExactSizeIterator","id":"1:7879:1889","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:104:1950","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"const":{"type":{"primitive":"usize"},"expr":"N","value":null,"is_literal":false}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:216:2134":{"id":"0:216:2134","crate_id":0,"name":"extend_from_slice","span":{"filename":"src/lib.rs","begin":[1619,4],"end":[1630,5]},"visibility":"public","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["slice",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"generic":"T"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:288:746":{"id":"0:288:746","crate_id":0,"name":"from","span":{"filename":"src/lib.rs","begin":[1913,4],"end":[1915,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["array",{"array":{"type":{"generic":"T"},"len":"N"}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:95":{"id":"0:95","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[346,0],"end":[346,76]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"N","kind":{"const":{"type":{"primitive":"usize"},"default":null}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"FusedIterator","id":"1:8243:1890","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Drain","id":"0:68:1881","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"const":{"type":{"primitive":"usize"},"expr":"N","value":null,"is_literal":false}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:152:875":{"id":"0:152:875","crate_id":0,"name":"len","span":{"filename":"src/lib.rs","begin":[851,4],"end":[853,5]},"visibility":"public","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12756:16265":{"id":"1:12756:16265","crate_id":1,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"1:12750:16262":{"id":"1:12750:16262","crate_id":1,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:32500:2479-0:68:1881":{"id":"a:1:32500:2479-0:68:1881","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"N","kind":{"const":{"type":{"primitive":"usize"},"default":null}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32500:2479","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Drain","id":"0:68:1881","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"const":{"type":{"primitive":"usize"},"expr":"N","value":null,"is_literal":false}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:32418:244-0:68:1881":{"id":"a:1:32418:244-0:68:1881","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"N","kind":{"const":{"type":{"primitive":"usize"},"default":null}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:32418:244","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Drain","id":"0:68:1881","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"const":{"type":{"primitive":"usize"},"expr":"N","value":null,"is_literal":false}}],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"0:200:2075":{"id":"0:200:2075","crate_id":0,"name":"dedup_by","span":{"filename":"src/lib.rs","begin":[1407,4],"end":[1436,5]},"visibility":"public","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["same_bucket",{"generic":"F"}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:3129:139","args":{"parenthesized":{"inputs":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}}],"output":{"primitive":"bool"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:174:2051":{"id":"0:174:2051","crate_id":0,"name":"swap_remove","span":{"filename":"src/lib.rs","begin":[1199,4],"end":[1221,5]},"visibility":"public","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:309:171":{"id":"0:309:171","crate_id":0,"name":"Item","span":{"filename":"src/lib.rs","begin":[1988,4],"end":[1988,18]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"1:12817:16280":{"id":"1:12817:16280","crate_id":1,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:42002:201","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12448:4003","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:350:1806":{"id":"0:350:1806","crate_id":0,"name":"borrow","span":{"filename":"src/lib.rs","begin":[2060,4],"end":[2062,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"generic":"T"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2741-0:56:1876":{"id":"b:1:2741-0:56:1876","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2700:160","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2710:264","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"SmallVec","id":"0:56:1876","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"const":{"type":{"primitive":"usize"},"expr":"N","value":null,"is_literal":false}}],"bindings":[]}}}},"items":["1:2744:135","1:2745:1619"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:12843:16290":{"id":"1:12843:16290","crate_id":1,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"1:53441:452","self::pattern":"1:12443:6521"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12448:4003","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12448:4003","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"1:12468:6526","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:260:635":{"id":"0:260:635","crate_id":0,"name":"drop","span":{"filename":"src/lib.rs","begin":[1808,4],"end":[1826,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:362:1894":{"id":"0:362:1894","crate_id":0,"name":"as_mut","span":{"filename":"src/lib.rs","begin":[2081,4],"end":[2083,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"generic":"T"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:26:719":{"id":"0:26:719","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[104,4],"end":[106,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"core::fmt::Formatter","id":"1:9852:141","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"core::fmt::Result","id":"1:9833:233","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:351":{"id":"0:351","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[2065,0],"end":[2070,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"N","kind":{"const":{"type":{"primitive":"usize"},"default":null}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2420:104","args":{"angle_bracketed":{"args":[{"type":{"slice":{"generic":"T"}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"SmallVec","id":"0:56:1876","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"const":{"type":{"primitive":"usize"},"expr":"N","value":null,"is_literal":false}}],"bindings":[]}}}},"items":["0:354:2167"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:42131:2660-0:27:1839":{"id":"a:1:42131:2660-0:27:1839","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"N","kind":{"const":{"type":{"primitive":"usize"},"default":null}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:42131:2660","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:42131:2660","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawSmallVec","id":"0:27:1839","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"const":{"type":{"primitive":"usize"},"expr":"N","value":null,"is_literal":false}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"4:5811:1596":{"id":"4:5811:1596","crate_id":4,"name":"to_string","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"4:7535:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"4:691:11892":{"id":"4:691:11892","crate_id":4,"name":"clone_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["target",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12829:16283":{"id":"1:12829:16283","crate_id":1,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"1:12443:6521","`DoubleEndedIterator`":"1:7826:128","prim@char":"1:53441:452","str::rmatch_indices":"1:12832:16284"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"MatchIndices","id":"1:44052:4144","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12448:4003","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:83:1887":{"id":"0:83:1887","crate_id":0,"name":"size_hint","span":{"filename":"src/lib.rs","begin":[324,4],"end":[326,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"tuple":[{"primitive":"usize"},{"resolved_path":{"name":"Option","id":"1:42002:201","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:4:687-0:104:1950":{"id":"b:4:687-0:104:1950","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2439:111","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"4:683:257","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:104:1950","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"const":{"type":{"primitive":"usize"},"expr":"N","value":null,"is_literal":false}}],"bindings":[]}}}},"items":["4:689:3789","4:690:11891","4:691:11892"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:298:458":{"id":"0:298:458","crate_id":0,"name":"clone_from","span":{"filename":"src/lib.rs","begin":[1929,4],"end":[1943,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["source",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:32500:2479-0:56:1876":{"id":"a:1:32500:2479-0:56:1876","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"N","kind":{"const":{"type":{"primitive":"usize"},"default":null}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"1:32500:2479","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32500:2479","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"SmallVec","id":"0:56:1876","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"const":{"type":{"primitive":"usize"},"expr":"N","value":null,"is_literal":false}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:62":{"id":"0:62","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[289,0],"end":[289,63]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:32418:244","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"N","kind":{"const":{"type":{"primitive":"usize"},"default":null}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:32418:244","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"SmallVec","id":"0:56:1876","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"const":{"type":{"primitive":"usize"},"expr":"N","value":null,"is_literal":false}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12792:2843":{"id":"1:12792:2843","crate_id":1,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"1:42004:198","prim@char":"1:53441:452","self::pattern":"1:12443:6521"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:42002:201","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12448:4003","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12448:4003","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12463:6527","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12765:15175":{"id":"1:12765:15175","crate_id":1,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:10530:246","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:10530:246","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:268:256":{"id":"0:268:256","crate_id":0,"name":"Target","span":{"filename":"src/lib.rs","begin":[1854,4],"end":[1854,22]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"slice":{"generic":"T"}}}}},"1:12873:16305":{"id":"1:12873:16305","crate_id":1,"name":"trim_ascii","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing ASCII whitespace\nremoved.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\"\\r hello world\\n \".trim_ascii(), \"hello world\");\nassert_eq!(\"  \".trim_ascii(), \"\");\nassert_eq!(\"\".trim_ascii(), \"\");\n```","links":{"u8::is_ascii_whitespace":"1:895:19466"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2426-0:56:1876":{"id":"b:1:2426-0:56:1876","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32419:2478","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2420:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"SmallVec","id":"0:56:1876","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"const":{"type":{"primitive":"usize"},"expr":"N","value":null,"is_literal":false}}],"bindings":[]}}}},"items":["1:2428:2167"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:12808:16277":{"id":"1:12808:16277","crate_id":1,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"1:12443:6521","str::split":"1:12796:16274","prim@char":"1:53441:452","str::split_terminator":"1:12805:16276"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitTerminator","id":"1:43970:4143","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12448:4003","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12448:4003","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12463:6527","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:363":{"id":"0:363","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[2086,0],"end":[2090,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Debug","id":"1:9877:118","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"N","kind":{"const":{"type":{"primitive":"usize"},"default":null}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:9877:118","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"SmallVec","id":"0:56:1876","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"const":{"type":{"primitive":"usize"},"expr":"N","value":null,"is_literal":false}}],"bindings":[]}}}},"items":["0:366:719"],"negative":false,"synthetic":false,"blanket_impl":null}}},"4:5537:2490":{"id":"4:5537:2490","crate_id":4,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"4:7535:250"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["from",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"4:7535:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12448:4003","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:274":{"id":"0:274","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1868,0],"end":[1875,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"N","kind":{"const":{"type":{"primitive":"usize"},"default":null}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"FromIterator","id":"1:7784:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"SmallVec","id":"0:56:1876","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"const":{"type":{"primitive":"usize"},"expr":"N","value":null,"is_literal":false}}],"bindings":[]}}}},"items":["0:277:749"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12874:16306":{"id":"1:12874:16306","crate_id":1,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"1:4670:16306"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDebug","id":"1:44201:4078","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"4:5543:17007":{"id":"4:5543:17007","crate_id":4,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"4:7535:250"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"4:7535:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:0:2160":{"id":"0:0:2160","crate_id":0,"name":"smallvec","span":{"filename":"src/lib.rs","begin":[7,0],"end":[2184,1]},"visibility":"public","docs":"Small vectors in various sizes. These store a certain number of elements inline, and fall back\nto the heap for larger allocations.  This can be a useful optimization for improving cache\nlocality and reducing allocator traffic for workloads that fit within the inline buffer.\n\n## `no_std` support\n\nBy default, `smallvec` does not depend on `std`.  However, the optional\n`write` feature implements the `std::io::Write` trait for vectors of `u8`.\nWhen this feature is enabled, `smallvec` depends on `std`.\n\n## Optional features\n\n### `serde`\n\nWhen this optional dependency is enabled, `SmallVec` implements the `serde::Serialize` and\n`serde::Deserialize` traits.\n\n### `write`\n\nWhen this feature is enabled, `SmallVec<u8, _>` implements the `std::io::Write` trait.\nThis feature is not compatible with `#![no_std]` programs.\n\n### `specialization`\n\n**This feature is unstable and requires a nightly build of the Rust toolchain.**\n\nWhen this feature is enabled, `SmallVec::from(slice)` has improved performance for slices\nof `Copy` types.  (Without this feature, you can use `SmallVec::from_slice` to get optimal\nperformance for `Copy` types.)\n\nTracking issue: [rust-lang/rust#31844](https://github.com/rust-lang/rust/issues/31844)\n\n### `may_dangle`\n\n**This feature is unstable and requires a nightly build of the Rust toolchain.**\n\nThis feature makes the Rust compiler less strict about use of vectors that contain borrowed\nreferences. For details, see the\n[Rustonomicon](https://doc.rust-lang.org/1.42.0/nomicon/dropck.html#an-escape-hatch).\n\nTracking issue: [rust-lang/rust#34761](https://github.com/rust-lang/rust/issues/34761)","links":{},"attrs":["#![no_std]"],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:376:1826","0:27:1839","0:56:1876","0:68:1881","0:104:1950","0:303:2160","0:304:2163"],"is_stripped":false}}},"0:204:1952":{"id":"0:204:1952","crate_id":0,"name":"from_raw_parts","span":{"filename":"src/lib.rs","begin":[1511,4],"end":[1526,5]},"visibility":"public","docs":"Creates a `SmallVec` directly from the raw components of another `SmallVec`.\n\n# Safety\n\nThis is highly unsafe, due to the number of invariants that aren’t checked:\n\n- `ptr` needs to have been previously allocated via `SmallVec` from its spilled storage (at least, it’s highly likely to be incorrect if it wasn’t).\n- `ptr`’s `A::Item` type needs to be the same size and alignment that it was allocated with\n- `length` needs to be less than or equal to `capacity`.\n- `capacity` needs to be the capacity that the pointer was allocated with.\n\nViolating these may cause problems like corrupting the allocator’s internal data structures.\n\nAdditionally, `capacity` must be greater than the amount of inline storage `A` has; that is, the new `SmallVec` must need to spill over into heap allocated storage. This condition is asserted against.\n\nThe ownership of `ptr` is effectively transferred to the `SmallVec` which may then deallocate, reallocate or change the contents of memory pointed to by the pointer at will. Ensure that nothing else uses the pointer after calling this function.\n\n# Examples\n\n```\nuse std::mem;\nuse std::ptr;\nuse smallvec::{SmallVec, smallvec};\n\nfn main() {\n    let mut v: SmallVec<_, 1> = smallvec![1, 2, 3];\n\n    // Pull out the important parts of `v`.\n    let p = v.as_mut_ptr();\n    let len = v.len();\n    let cap = v.capacity();\n    let spilled = v.spilled();\n\n    unsafe {\n        // Forget all about `v`. The heap allocation that stored the\n        // three values won't be deallocated.\n        mem::forget(v);\n\n        // Overwrite memory with [4, 5, 6].\n        //\n        // This is only safe if `spilled` is true! Otherwise, we are\n        // writing into the old `SmallVec`'s inline storage on the\n        // stack.\n        assert!(spilled);\n        for i in 0..len {\n            ptr::write(p.add(i), 4 + i);\n        }\n\n        // Put everything back together into a SmallVec with a different\n        // amount of inline storage, but which is still less than `cap`.\n        let rebuilt = SmallVec::<_, 2>::from_raw_parts(p, len, cap);\n        assert_eq!(&*rebuilt, &[4, 5, 6]);\n    }\n}\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["ptr",{"raw_pointer":{"mutable":true,"type":{"generic":"T"}}}],["length",{"primitive":"usize"}],["capacity",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"SmallVec","id":"0:56:1876","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"const":{"type":{"primitive":"usize"},"expr":"N","value":null,"is_literal":false}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"1:2739:135":{"id":"1:2739:135","crate_id":1,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"1:2710:264","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}}},"a:1:42131:2660-0:376:1826":{"id":"a:1:42131:2660-0:376:1826","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:42131:2660","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"CollectionAllocErr","id":"0:376:1826","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:161:2033":{"id":"0:161:2033","crate_id":0,"name":"pop","span":{"filename":"src/lib.rs","begin":[1008,4],"end":[1020,5]},"visibility":"public","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42002:201","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2736-0:104:1950":{"id":"b:1:2736-0:104:1950","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2710:264","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2706:265","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:104:1950","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"const":{"type":{"primitive":"usize"},"expr":"N","value":null,"is_literal":false}}],"bindings":[]}}}},"items":["1:2739:135","1:2740:1621"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:261":{"id":"0:261","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1829,0],"end":[1851,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"N","kind":{"const":{"type":{"primitive":"usize"},"default":null}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Drop","id":"1:3122:1891","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:104:1950","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"const":{"type":{"primitive":"usize"},"expr":"N","value":null,"is_literal":false}}],"bindings":[]}}}},"items":["0:264:635"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2730-0:104:1950":{"id":"b:1:2730-0:104:1950","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2703:142","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:104:1950","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"const":{"type":{"primitive":"usize"},"expr":"N","value":null,"is_literal":false}}],"bindings":[]}}}},"items":["1:2732:746"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:371":{"id":"0:371","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[2098,0],"end":[2102,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Debug","id":"1:9877:118","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"N","kind":{"const":{"type":{"primitive":"usize"},"default":null}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:9877:118","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Drain","id":"0:68:1881","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"const":{"type":{"primitive":"usize"},"expr":"N","value":null,"is_literal":false}}],"bindings":[]}}}},"items":["0:375:719"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:162:2034":{"id":"0:162:2034","crate_id":0,"name":"append","span":{"filename":"src/lib.rs","begin":[1023,4],"end":[1038,5]},"visibility":"public","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"SmallVec","id":"0:56:1876","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"const":{"type":{"primitive":"usize"},"expr":"M","value":null,"is_literal":false}}],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"M","kind":{"const":{"type":{"primitive":"usize"},"default":null}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12759:15173":{"id":"1:12759:15173","crate_id":1,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"1:42004:198"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"1:42002:201","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:10530:246","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:10530:246","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:170:2049":{"id":"0:170:2049","crate_id":0,"name":"shrink_to_fit","span":{"filename":"src/lib.rs","begin":[1141,4],"end":[1164,5]},"visibility":"public","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:355":{"id":"0:355","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[2072,0],"end":[2077,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"N","kind":{"const":{"type":{"primitive":"usize"},"default":null}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"AsRef","id":"1:2694:78","args":{"angle_bracketed":{"args":[{"type":{"slice":{"generic":"T"}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"SmallVec","id":"0:56:1876","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"const":{"type":{"primitive":"usize"},"expr":"N","value":null,"is_literal":false}}],"bindings":[]}}}},"items":["0:358:341"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12870:16302":{"id":"1:12870:16302","crate_id":1,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12869:16301":{"id":"1:12869:16301","crate_id":1,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"4:5540:17006":{"id":"4:5540:17006","crate_id":4,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"4:7535:250"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["count",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"4:7535:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12448:4003","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:42131:2660-0:104:1950":{"id":"a:1:42131:2660-0:104:1950","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"N","kind":{"const":{"type":{"primitive":"usize"},"default":null}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:42131:2660","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:42131:2660","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:104:1950","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"const":{"type":{"primitive":"usize"},"expr":"N","value":null,"is_literal":false}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2426-0:68:1881":{"id":"b:1:2426-0:68:1881","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32419:2478","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2420:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Drain","id":"0:68:1881","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"const":{"type":{"primitive":"usize"},"expr":"N","value":null,"is_literal":false}}],"bindings":[]}}}},"items":["1:2428:2167"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:12846:16291":{"id":"1:12846:16291","crate_id":1,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:53441:452","self::pattern":"1:12443:6521"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12448:4003","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:173:1953":{"id":"0:173:1953","crate_id":0,"name":"as_mut_slice","span":{"filename":"src/lib.rs","begin":[1191,4],"end":[1196,5]},"visibility":"public","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"generic":"T"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2726-0:104:1950":{"id":"b:1:2726-0:104:1950","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2703:142","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2700:160","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:104:1950","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"const":{"type":{"primitive":"usize"},"expr":"N","value":null,"is_literal":false}}],"bindings":[]}}}},"items":["1:2729:2838"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:2948:254-0:68:1881":{"id":"a:1:2948:254-0:68:1881","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"N","kind":{"const":{"type":{"primitive":"usize"},"default":null}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2948:254","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Drain","id":"0:68:1881","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"const":{"type":{"primitive":"usize"},"expr":"N","value":null,"is_literal":false}}],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"1:12788:2875":{"id":"1:12788:2875","crate_id":1,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"1:42004:198","prim@char":"1:53441:452","self::pattern":"1:12443:6521"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:42002:201","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12448:4003","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12811:16278":{"id":"1:12811:16278","crate_id":1,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"1:53441:452","self::pattern":"1:12443:6521","str::rsplitn":"1:12814:16279"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitN","id":"1:44006:3024","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12448:4003","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"4:5554:17010":{"id":"4:5554:17010","crate_id":4,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"1:12869:16301"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"4:7535:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:165:2038":{"id":"0:165:2038","crate_id":0,"name":"try_grow","span":{"filename":"src/lib.rs","begin":[1046,4],"end":[1084,5]},"visibility":"public","docs":null,"links":{},"attrs":["#[cold]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["new_capacity",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Result","id":"1:42149:233","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}},{"type":{"resolved_path":{"name":"CollectionAllocErr","id":"0:376:1826","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12842:16289":{"id":"1:12842:16289","crate_id":1,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:184:1896":{"id":"0:184:1896","crate_id":0,"name":"as_mut_ptr","span":{"filename":"src/lib.rs","begin":[1305,4],"end":[1312,5]},"visibility":"public","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12866:16298":{"id":"1:12866:16298","crate_id":1,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12868:16300":{"id":"1:12868:16300","crate_id":1,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:7792-0:68:1881":{"id":"b:1:7792-0:68:1881","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"1:7935:176","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"1:7788:163","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Drain","id":"0:68:1881","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"const":{"type":{"primitive":"usize"},"expr":"N","value":null,"is_literal":false}}],"bindings":[]}}}},"items":["1:7794:171","1:7795:1950","1:7796:841"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"I"}}}},"0:294":{"id":"0:294","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1923,0],"end":[1944,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2439:111","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"N","kind":{"const":{"type":{"primitive":"usize"},"default":null}}}],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2439:111","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"SmallVec","id":"0:56:1876","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"const":{"type":{"primitive":"usize"},"expr":"N","value":null,"is_literal":false}}],"bindings":[]}}}},"items":["0:297:456","0:298:458"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:367":{"id":"0:367","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[2092,0],"end":[2096,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Debug","id":"1:9877:118","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"N","kind":{"const":{"type":{"primitive":"usize"},"default":null}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:9877:118","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:104:1950","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"const":{"type":{"primitive":"usize"},"expr":"N","value":null,"is_literal":false}}],"bindings":[]}}}},"items":["0:370:719"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:104:1950":{"id":"0:104:1950","crate_id":0,"name":"IntoIter","span":{"filename":"src/lib.rs","begin":[566,0],"end":[576,1]},"visibility":"public","docs":"An iterator that consumes a `SmallVec` and yields its items by value.\n\nReturned from [`SmallVec::into_iter`][1].\n\n[1]: struct.SmallVec.html#method.into_iter","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"N","kind":{"const":{"type":{"primitive":"usize"},"default":null}}}],"where_predicates":[]},"impls":["0:111","a:1:32418:244-0:104:1950","a:1:32500:2479-0:104:1950","a:1:42130:2661-0:104:1950","a:1:42131:2660-0:104:1950","a:1:2948:254-0:104:1950","b:1:2426-0:104:1950","b:1:2741-0:104:1950","b:1:2726-0:104:1950","b:1:2736-0:104:1950","b:1:3495-0:104:1950","b:1:7792-0:104:1950","b:1:2730-0:104:1950","b:1:2423-0:104:1950","b:4:687-0:104:1950","0:261","0:367","0:299","0:125","0:119","0:132","0:129"]}}},"0:304:2163":{"id":"0:304:2163","crate_id":0,"name":"smallvec_inline","span":{"filename":"src/lib.rs","begin":[1974,0],"end":[1984,1]},"visibility":"public","docs":null,"links":{},"attrs":["#[macro_export]"],"deprecation":null,"inner":{"macro":"macro_rules! smallvec_inline {\n    (@one $x:expr) => { ... };\n    ($elem:expr; $n:expr) => { ... };\n    ($($x:expr),+ $(,)?) => { ... };\n}"}},"1:12767:16266":{"id":"1:12767:16266","crate_id":1,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"1:53447:1538","str::slice_mut_unchecked":"1:12768:16267","crate::ops::Index":"1:39580:2418"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:380:1832":{"id":"0:380:1832","crate_id":0,"name":"layout","span":{"filename":"src/lib.rs","begin":[100,8],"end":[100,22]},"visibility":"default","docs":"The layout that was passed to the allocator","links":{},"attrs":[],"deprecation":null,"inner":{"struct_field":{"resolved_path":{"name":"alloc::alloc::Layout","id":"1:44895:178","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"0:181:2066":{"id":"0:181:2066","crate_id":0,"name":"insert_many","span":{"filename":"src/lib.rs","begin":[1290,4],"end":[1292,5]},"visibility":"public","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}],["iterable",{"generic":"I"}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"1:7788:163","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"generic":"T"}}}}]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12770:16269":{"id":"1:12770:16269","crate_id":1,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"1:12769:16268"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12796:16274":{"id":"1:12796:16274","crate_id":1,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"1:12443:6521","`DoubleEndedIterator`":"1:7826:128","prim@char":"1:53441:452","str::split_whitespace":"1:12774:14403","str::rsplit":"1:12802:16275"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Split","id":"1:43902:3022","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12448:4003","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:76":{"id":"0:76","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[311,0],"end":[327,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[{"outlives":"'a"}],"default":null,"synthetic":false}}},{"name":"N","kind":{"const":{"type":{"primitive":"usize"},"default":null}}}],"where_predicates":[]},"provided_trait_methods":["ne","try_find","try_for_each","try_collect","scan","intersperse_with","advance_by","max","is_sorted_by_key","product","rev","position","ge","fold","collect_into","flat_map","filter_map","nth","min","__iterator_get_unchecked","fuse","any","cmp_by","unzip","rposition","reduce","all","partition","partial_cmp","flatten","cloned","peekable","for_each","step_by","count","le","lt","partial_cmp_by","copied","max_by_key","try_reduce","partition_in_place","map_windows","collect","skip_while","chain","size_hint","eq","eq_by","cycle","last","max_by","find","is_partitioned","inspect","take_while","zip","skip","take","enumerate","is_sorted","array_chunks","min_by_key","find_map","try_fold","by_ref","filter","map_while","intersperse","next_chunk","map","cmp","gt","sum","is_sorted_by","min_by"],"trait":{"name":"Iterator","id":"1:7935:176","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Drain","id":"0:68:1881","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"const":{"type":{"primitive":"usize"},"expr":"N","value":null,"is_literal":false}}],"bindings":[]}}}},"items":["0:80:171","0:81:1053","0:83:1887"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12771:4018":{"id":"1:12771:4018","crate_id":1,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:53441:452"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chars","id":"1:43872:4010","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12826:16282":{"id":"1:12826:16282","crate_id":1,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"1:12443:6521","`DoubleEndedIterator`":"1:7826:128","prim@char":"1:53441:452","str::matches":"1:12823:2354"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatches","id":"1:44124:4147","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12448:4003","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12448:4003","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12463:6527","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:324:841":{"id":"0:324:841","crate_id":0,"name":"into_iter","span":{"filename":"src/lib.rs","begin":[2016,4],"end":[2018,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"qualified_path":{"name":"IntoIter","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"1:7788:163","args":null}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2423-0:56:1876":{"id":"b:1:2423-0:56:1876","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32419:2478","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2417:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"SmallVec","id":"0:56:1876","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"const":{"type":{"primitive":"usize"},"expr":"N","value":null,"is_literal":false}}],"bindings":[]}}}},"items":["1:2425:1806"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:265":{"id":"0:265","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1853,0],"end":[1860,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"N","kind":{"const":{"type":{"primitive":"usize"},"default":null}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Deref","id":"1:3098:124","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"SmallVec","id":"0:56:1876","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"const":{"type":{"primitive":"usize"},"expr":"N","value":null,"is_literal":false}}],"bindings":[]}}}},"items":["0:268:256","0:269:597"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:2948:254-0:104:1950":{"id":"a:1:2948:254-0:104:1950","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"N","kind":{"const":{"type":{"primitive":"usize"},"default":null}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2948:254","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:104:1950","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"const":{"type":{"primitive":"usize"},"expr":"N","value":null,"is_literal":false}}],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"0:175:2056":{"id":"0:175:2056","crate_id":0,"name":"clear","span":{"filename":"src/lib.rs","begin":[1224,4],"end":[1226,5]},"visibility":"public","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"4:5555:17011":{"id":"4:5555:17011","crate_id":4,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"1:12870:16302"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"4:7535:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:171:2050":{"id":"0:171:2050","crate_id":0,"name":"truncate","span":{"filename":"src/lib.rs","begin":[1167,4],"end":[1180,5]},"visibility":"public","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["len",{"primitive":"usize"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:207":{"id":"0:207","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1568,0],"end":[1573,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"N","kind":{"const":{"type":{"primitive":"usize"},"default":null}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"1:2777:123","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"SmallVec","id":"0:56:1876","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"const":{"type":{"primitive":"usize"},"expr":"N","value":null,"is_literal":false}}],"bindings":[]}}}},"items":["0:210:60"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:111":{"id":"0:111","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[578,0],"end":[630,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"N","kind":{"const":{"type":{"primitive":"usize"},"default":null}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"IntoIter","id":"0:104:1950","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"const":{"type":{"primitive":"usize"},"expr":"N","value":null,"is_literal":false}}],"bindings":[]}}}},"items":["0:117:1920","0:118:1953"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12876:6405":{"id":"1:12876:6405","crate_id":1,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"1:4671:6405"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDefault","id":"1:44210:3970","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:283:746":{"id":"0:283:746","crate_id":0,"name":"from","span":{"filename":"src/lib.rs","begin":[1908,4],"end":[1910,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["slice",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"slice":{"generic":"T"}}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:338":{"id":"0:338","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[2042,0],"end":[2050,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"N","kind":{"const":{"type":{"primitive":"usize"},"default":null}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Ord","id":"1:2522:202","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["min","clamp","max"],"trait":{"name":"Ord","id":"1:2522:202","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"SmallVec","id":"0:56:1876","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"const":{"type":{"primitive":"usize"},"expr":"N","value":null,"is_literal":false}}],"bindings":[]}}}},"items":["0:341:463"],"negative":false,"synthetic":false,"blanket_impl":null}}},"4:5535":{"id":"4:5535","crate_id":4,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["4:5536:17005","4:5537:2490","4:5540:17006","4:5543:17007","4:5551:17008","4:5552:17009","4:5553:2137","4:5554:17010","4:5555:17011"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:354:2167":{"id":"0:354:2167","crate_id":0,"name":"borrow_mut","span":{"filename":"src/lib.rs","begin":[2067,4],"end":[2069,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"generic":"T"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:2948:254-0:376:1826":{"id":"a:1:2948:254-0:376:1826","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2948:254","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"CollectionAllocErr","id":"0:376:1826","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}}},"paths":{"4:1477:3798":{"crate_id":4,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"1:44924:2396":{"crate_id":1,"path":["core","alloc","AllocError"],"kind":"struct"},"1:5876:3128":{"crate_id":1,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"1:21250:14775":{"crate_id":1,"path":["core","core_simd","swizzle","resize","Resize"],"kind":"struct"},"1:43705:3017":{"crate_id":1,"path":["core","slice","iter","Chunks"],"kind":"struct"},"4:0:314":{"crate_id":4,"path":["alloc"],"kind":"module"},"1:44633:4749":{"crate_id":1,"path":["core","str","IsWhitespace"],"kind":"struct"},"1:44497:4174":{"crate_id":1,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"1:1607:529":{"crate_id":1,"path":["core","intrinsics","copy"],"kind":"function"},"1:3111:2150":{"crate_id":1,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"1:42053:171":{"crate_id":1,"path":["core","option","Item"],"kind":"struct"},"1:9882:127":{"crate_id":1,"path":["core","fmt","Display"],"kind":"trait"},"1:11968:3010":{"crate_id":1,"path":["core","slice","SlicePattern"],"kind":"trait"},"1:44333:4164":{"crate_id":1,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"1:46109:4200":{"crate_id":1,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"1:53453:800":{"crate_id":1,"path":["core","i8"],"kind":"primitive"},"1:48243:4296":{"crate_id":1,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"1:6494:3714":{"crate_id":1,"path":["core","iter","adapters","map_windows","Buffer"],"kind":"struct"},"1:43724:3028":{"crate_id":1,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"4:6013:4848":{"crate_id":4,"path":["alloc","sync","ArcInner"],"kind":"struct"},"1:21447:11592":{"crate_id":1,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"1:38281:2547":{"crate_id":1,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"1:44176:4150":{"crate_id":1,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"1:21851:11894":{"crate_id":1,"path":["core","core_simd","to_bytes","sealed","Sealed"],"kind":"trait"},"1:12403:6242":{"crate_id":1,"path":["core","str","traits","FromStr"],"kind":"trait"},"1:40812:3146":{"crate_id":1,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"1:40439:3970":{"crate_id":1,"path":["core","char","EscapeDefault"],"kind":"struct"},"1:47762:4285":{"crate_id":1,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"1:2658:6204":{"crate_id":1,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"1:43245:4122":{"crate_id":1,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"1:44672:129":{"crate_id":1,"path":["core","time","Duration"],"kind":"struct"},"1:13044:162":{"crate_id":1,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"1:48158:4291":{"crate_id":1,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"1:43237:2472":{"crate_id":1,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"1:4102:3971":{"crate_id":1,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"4:1131:4845":{"crate_id":4,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"1:48074:4289":{"crate_id":1,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"1:9834:2191":{"crate_id":1,"path":["core","fmt","Write"],"kind":"trait"},"1:43496:3044":{"crate_id":1,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"4:2983:4847":{"crate_id":4,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"1:7217:3134":{"crate_id":1,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"1:48410:4305":{"crate_id":1,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"1:44304:4154":{"crate_id":1,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"4:886:3673":{"crate_id":4,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"1:8243:1890":{"crate_id":1,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"3:0:2373":{"crate_id":3,"path":["rustc_std_workspace_core"],"kind":"module"},"1:41926:4110":{"crate_id":1,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"1:46170:4202":{"crate_id":1,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"1:53447:1538":{"crate_id":1,"path":["core","str"],"kind":"primitive"},"1:23467:189":{"crate_id":1,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"1:1747:1501":{"crate_id":1,"path":["core","mem","size_of"],"kind":"function"},"1:40681:3127":{"crate_id":1,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"1:22091:11679":{"crate_id":1,"path":["core","core_simd","simd","num","float","SimdFloat"],"kind":"trait"},"1:44156:4148":{"crate_id":1,"path":["core","str","iter","Lines"],"kind":"struct"},"1:32419:2478":{"crate_id":1,"path":["core","marker","Sized"],"kind":"trait"},"1:32388:2182":{"crate_id":1,"path":["core","error","tags","Value"],"kind":"struct"},"4:1527:217":{"crate_id":4,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"1:4168:6406":{"crate_id":1,"path":["core","async_iter","async_iter","IntoAsyncIterator"],"kind":"trait"},"4:7376:1950":{"crate_id":4,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"4:1536:3803":{"crate_id":4,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"1:21238:14772":{"crate_id":1,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"1:22677:11918":{"crate_id":1,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"0:27:1839":{"crate_id":0,"path":["smallvec","RawSmallVec"],"kind":"union"},"1:42556:91":{"crate_id":1,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"1:41819:4736":{"crate_id":1,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"1:9354:92":{"crate_id":1,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"1:42070:2164":{"crate_id":1,"path":["core","option","IterMut"],"kind":"struct"},"1:40419:4075":{"crate_id":1,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"4:790:3669":{"crate_id":4,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"4:3607:2164":{"crate_id":4,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"0:56:1876":{"crate_id":0,"path":["smallvec","SmallVec"],"kind":"struct"},"1:53463:850":{"crate_id":1,"path":["core","isize"],"kind":"primitive"},"1:41733:168":{"crate_id":1,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"1:22743:4054":{"crate_id":1,"path":["core","num","error","ParseIntError"],"kind":"struct"},"1:4533:2459":{"crate_id":1,"path":["core","cell","UnsafeCell"],"kind":"struct"},"1:44006:3024":{"crate_id":1,"path":["core","str","iter","SplitN"],"kind":"struct"},"1:22604:4037":{"crate_id":1,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"1:4234:3973":{"crate_id":1,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"1:4560:2458":{"crate_id":1,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"1:45895:4191":{"crate_id":1,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"4:5344:2142":{"crate_id":4,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"1:9880:118":{"crate_id":1,"path":["core","fmt","macros","Debug"],"kind":"proc_derive"},"1:43734:3029":{"crate_id":1,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"1:2486:208":{"crate_id":1,"path":["core","cmp","PartialEq"],"kind":"trait"},"1:6299:3153":{"crate_id":1,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"1:46918:4244":{"crate_id":1,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"1:38915:2549":{"crate_id":1,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"4:7285:3826":{"crate_id":4,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"1:40672:3126":{"crate_id":1,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"1:22920:193":{"crate_id":1,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"1:46486:4218":{"crate_id":1,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"1:46091:4199":{"crate_id":1,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"1:3409:2392":{"crate_id":1,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"1:39949:11896":{"crate_id":1,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"1:23305:191":{"crate_id":1,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"1:47872:4286":{"crate_id":1,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"1:43077:2454":{"crate_id":1,"path":["core","fmt","Arguments"],"kind":"struct"},"1:32402:2456":{"crate_id":1,"path":["core","error","tags","Ref"],"kind":"struct"},"1:13066:14597":{"crate_id":1,"path":["core","future","join","MaybeDone"],"kind":"enum"},"1:33293:2532":{"crate_id":1,"path":["core","ops","arith","Rem"],"kind":"trait"},"1:23761:243":{"crate_id":1,"path":["core","num","saturating","Saturating"],"kind":"struct"},"1:39494:2556":{"crate_id":1,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"1:10329:3720":{"crate_id":1,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"4:3217:3816":{"crate_id":4,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"1:53448:1624":{"crate_id":1,"path":["core","tuple"],"kind":"primitive"},"1:12224:4016":{"crate_id":1,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"1:10093:150":{"crate_id":1,"path":["core","hash","Hash"],"kind":"trait"},"1:3098:124":{"crate_id":1,"path":["core","ops","deref","Deref"],"kind":"trait"},"1:46392:4216":{"crate_id":1,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"1:33107:2529":{"crate_id":1,"path":["core","ops","arith","Div"],"kind":"trait"},"1:3332:144":{"crate_id":1,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"1:39776:4068":{"crate_id":1,"path":["core","array","TryFromSliceError"],"kind":"struct"},"4:3753:3806":{"crate_id":4,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"1:46964:4245":{"crate_id":1,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"1:40379:11921":{"crate_id":1,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"1:40742:3141":{"crate_id":1,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"1:5763:3140":{"crate_id":1,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"1:44641:4751":{"crate_id":1,"path":["core","str","IsNotEmpty"],"kind":"struct"},"4:7029:3702":{"crate_id":4,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"1:9886:2444":{"crate_id":1,"path":["core","fmt","Binary"],"kind":"trait"},"1:44617:4745":{"crate_id":1,"path":["core","str","LinesMap"],"kind":"struct"},"4:1301:3795":{"crate_id":4,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"4:683:257":{"crate_id":4,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"4:2144:3682":{"crate_id":4,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"1:3493:71":{"crate_id":1,"path":["core","any","Any"],"kind":"trait"},"1:9890:2446":{"crate_id":1,"path":["core","fmt","UpperHex"],"kind":"trait"},"4:4020:1881":{"crate_id":4,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"1:21236:14785":{"crate_id":1,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"1:48280:4299":{"crate_id":1,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"1:3602:1881":{"crate_id":1,"path":["core","array","drain","Drain"],"kind":"struct"},"1:12208:4015":{"crate_id":1,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"1:2439:111":{"crate_id":1,"path":["core","clone","Clone"],"kind":"trait"},"1:2941:2387":{"crate_id":1,"path":["core","marker","Unsize"],"kind":"trait"},"1:7784:143":{"crate_id":1,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"4:4366:271":{"crate_id":4,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"1:4513:2457":{"crate_id":1,"path":["core","cell","RefMut"],"kind":"struct"},"1:7797:2148":{"crate_id":1,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"1:46760:4227":{"crate_id":1,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"1:53456:799":{"crate_id":1,"path":["core","i64"],"kind":"primitive"},"1:4126:108":{"crate_id":1,"path":["core","asserting","Capture"],"kind":"struct"},"1:21893:14783":{"crate_id":1,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"1:42120:2658":{"crate_id":1,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"1:12468:6526":{"crate_id":1,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"1:10141:2469":{"crate_id":1,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"1:47264:4251":{"crate_id":1,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"4:786:102":{"crate_id":4,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"1:21182:3454":{"crate_id":1,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"4:1516:3802":{"crate_id":4,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"4:7423:2420":{"crate_id":4,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"1:9894:2447":{"crate_id":1,"path":["core","fmt","LowerExp"],"kind":"trait"},"1:46140:4201":{"crate_id":1,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"1:2522:202":{"crate_id":1,"path":["core","cmp","Ord"],"kind":"trait"},"4:7635:2422":{"crate_id":4,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"1:44487:4170":{"crate_id":1,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"1:32500:2479":{"crate_id":1,"path":["core","marker","Unpin"],"kind":"trait"},"1:44895:178":{"crate_id":1,"path":["core","alloc","layout","Layout"],"kind":"struct"},"1:10987:3025":{"crate_id":1,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"1:32418:244":{"crate_id":1,"path":["core","marker","Send"],"kind":"trait"},"1:12514:6536":{"crate_id":1,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"1:6483:3130":{"crate_id":1,"path":["core","iter","adapters","map_windows","MapWindows"],"kind":"struct"},"1:42359:94":{"crate_id":1,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"4:3191:3815":{"crate_id":4,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"1:10676:1885":{"crate_id":1,"path":["core","slice","iter","Iter"],"kind":"struct"},"1:3080:2390":{"crate_id":1,"path":["core","ops","coroutine","Coroutine"],"kind":"trait"},"1:44106:4146":{"crate_id":1,"path":["core","str","iter","Matches"],"kind":"struct"},"1:2323:636":{"crate_id":1,"path":["core","ptr","drop_in_place"],"kind":"function"},"1:46007:4196":{"crate_id":1,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"1:12148:4011":{"crate_id":1,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"4:5:1709":{"crate_id":4,"path":["alloc","vec"],"kind":"macro"},"1:2333:2505":{"crate_id":1,"path":["core","ptr","from_exposed_addr"],"kind":"function"},"4:6530:2142":{"crate_id":4,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"1:1602:531":{"crate_id":1,"path":["core","intrinsics","copy_nonoverlapping"],"kind":"function"},"1:42595:98":{"crate_id":1,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"1:21564:11894":{"crate_id":1,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"1:43745:3036":{"crate_id":1,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"1:41773:3996":{"crate_id":1,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"1:2985:2475":{"crate_id":1,"path":["core","marker","Freeze"],"kind":"trait"},"4:3230:16029":{"crate_id":4,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"1:43771:3034":{"crate_id":1,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"1:44621:4746":{"crate_id":1,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"1:34073:2540":{"crate_id":1,"path":["core","ops","bit","BitOr"],"kind":"trait"},"4:2972:3789":{"crate_id":4,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"1:40700:3137":{"crate_id":1,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"1:2829:3839":{"crate_id":1,"path":["core","error","Request"],"kind":"struct"},"1:9681:2466":{"crate_id":1,"path":["core","fmt","builders","FormatterFn"],"kind":"struct"},"4:7317:16026":{"crate_id":4,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"1:0:534":{"crate_id":1,"path":["core"],"kind":"module"},"1:32384:4060":{"crate_id":1,"path":["core","error","private","Internal"],"kind":"struct"},"4:1286:3792":{"crate_id":4,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"1:22313:11894":{"crate_id":1,"path":["core","core_simd","simd","ptr","sealed","Sealed"],"kind":"trait"},"1:53441:452":{"crate_id":1,"path":["core","char"],"kind":"primitive"},"1:33645:2536":{"crate_id":1,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"4:7277:1950":{"crate_id":4,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"4:7268:2398":{"crate_id":4,"path":["alloc","alloc","Global"],"kind":"struct"},"1:22226:12578":{"crate_id":1,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_addr"],"kind":"foreign_type"},"1:53458:1643":{"crate_id":1,"path":["core","u8"],"kind":"primitive"},"1:21445:11894":{"crate_id":1,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"2:234:233":{"crate_id":2,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"1:42437:95":{"crate_id":1,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"1:22214:11682":{"crate_id":1,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr"],"kind":"trait"},"1:43253:2471":{"crate_id":1,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"1:44124:4147":{"crate_id":1,"path":["core","str","iter","RMatches"],"kind":"struct"},"1:41221:3112":{"crate_id":1,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"1:45961:4194":{"crate_id":1,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"4:6484:1881":{"crate_id":4,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"1:36295:2544":{"crate_id":1,"path":["core","ops","bit","Shr"],"kind":"trait"},"1:53454:797":{"crate_id":1,"path":["core","i16"],"kind":"primitive"},"1:2992:2477":{"crate_id":1,"path":["core","marker","FnPtr"],"kind":"trait"},"4:7482:11925":{"crate_id":4,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"1:44350:4165":{"crate_id":1,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"1:10312:3719":{"crate_id":1,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"1:38336:2548":{"crate_id":1,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"1:23151:192":{"crate_id":1,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"1:30688:11928":{"crate_id":1,"path":["core","ptr","alignment","AlignmentEnum32"],"kind":"enum"},"1:53455:798":{"crate_id":1,"path":["core","i32"],"kind":"primitive"},"1:2528:209":{"crate_id":1,"path":["core","cmp","PartialOrd"],"kind":"trait"},"1:42982:2453":{"crate_id":1,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"4:1495:3800":{"crate_id":4,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"1:46584:4222":{"crate_id":1,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"1:40530:11925":{"crate_id":1,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"1:41240:3116":{"crate_id":1,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"1:46192:4203":{"crate_id":1,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"1:13093:212":{"crate_id":1,"path":["core","future","pending","Pending"],"kind":"struct"},"1:42130:2661":{"crate_id":1,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"1:44070:4145":{"crate_id":1,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"1:43028:74":{"crate_id":1,"path":["core","fmt","rt","Argument"],"kind":"struct"},"1:12443:6521":{"crate_id":1,"path":["core","str","pattern"],"kind":"module"},"1:3011:2531":{"crate_id":1,"path":["core","ops","arith","Neg"],"kind":"trait"},"1:44625:4747":{"crate_id":1,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"1:53457:795":{"crate_id":1,"path":["core","i128"],"kind":"primitive"},"1:41981:4000":{"crate_id":1,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"1:40499:4086":{"crate_id":1,"path":["core","char","TryFromCharError"],"kind":"struct"},"1:44839:214":{"crate_id":1,"path":["core","task","poll","Poll"],"kind":"enum"},"1:41756:3994":{"crate_id":1,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"1:10530:246":{"crate_id":1,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"1:44052:4144":{"crate_id":1,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"1:4376:228":{"crate_id":1,"path":["core","cell","RefCell"],"kind":"struct"},"1:2694:78":{"crate_id":1,"path":["core","convert","AsRef"],"kind":"trait"},"4:281:1805":{"crate_id":4,"path":["alloc","boxed","Box"],"kind":"struct"},"1:46210:4204":{"crate_id":1,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"1:44530:4021":{"crate_id":1,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"1:3021:2542":{"crate_id":1,"path":["core","ops","bit","Not"],"kind":"trait"},"1:2706:265":{"crate_id":1,"path":["core","convert","TryInto"],"kind":"trait"},"1:22495:4030":{"crate_id":1,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"4:3594:1885":{"crate_id":4,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"1:40982:3149":{"crate_id":1,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"1:3338:2553":{"crate_id":1,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"4:7468:3828":{"crate_id":4,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"1:46247:4206":{"crate_id":1,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"1:3372:2389":{"crate_id":1,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"4:2703:4722":{"crate_id":4,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"1:10344:3724":{"crate_id":1,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"1:42732:2444":{"crate_id":1,"path":["core","fmt","num","Binary"],"kind":"struct"},"1:44201:4078":{"crate_id":1,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"1:22548:4031":{"crate_id":1,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"1:10246:3717":{"crate_id":1,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"1:44282:6542":{"crate_id":1,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"1:22268:11683":{"crate_id":1,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr"],"kind":"trait"},"1:53439:402":{"crate_id":1,"path":["core","bool"],"kind":"primitive"},"1:22616:11927":{"crate_id":1,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"1:1691:3687":{"crate_id":1,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"1:32348:6387":{"crate_id":1,"path":["core","convert","Infallible"],"kind":"enum"},"1:2948:254":{"crate_id":1,"path":["core","marker","Sync"],"kind":"trait"},"1:22580:4032":{"crate_id":1,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"1:22656:11902":{"crate_id":1,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"4:2256:4717":{"crate_id":4,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"4:7511:3834":{"crate_id":4,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"1:40728:4093":{"crate_id":1,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"1:40473:4082":{"crate_id":1,"path":["core","char","ToUppercase"],"kind":"struct"},"4:830:3671":{"crate_id":4,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"4:3738:3804":{"crate_id":4,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"1:42739:2443":{"crate_id":1,"path":["core","fmt","num","Octal"],"kind":"struct"},"1:42972:4737":{"crate_id":1,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"1:39755:2552":{"crate_id":1,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"1:42217:203":{"crate_id":1,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"1:44194:4017":{"crate_id":1,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"1:47200:4249":{"crate_id":1,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"1:42634:4006":{"crate_id":1,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"1:42087:2657":{"crate_id":1,"path":["core","panic","location","Location"],"kind":"struct"},"1:43784:3035":{"crate_id":1,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"1:48333:4302":{"crate_id":1,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"1:2420:104":{"crate_id":1,"path":["core","borrow","BorrowMut"],"kind":"trait"},"4:5961:72":{"crate_id":4,"path":["alloc","sync","Arc"],"kind":"struct"},"1:39762:4066":{"crate_id":1,"path":["core","any","TypeId"],"kind":"struct"},"1:46370:4215":{"crate_id":1,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"4:7451:3691":{"crate_id":4,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"1:39584:2550":{"crate_id":1,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"1:44653:4754":{"crate_id":1,"path":["core","time","Nanoseconds"],"kind":"struct"},"4:3343:2421":{"crate_id":4,"path":["alloc","collections","btree","set","ExtractIf"],"kind":"struct"},"4:7368:1950":{"crate_id":4,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"4:7297:1881":{"crate_id":4,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"1:10768:3039":{"crate_id":1,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"1:21466:4027":{"crate_id":1,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"1:41248:3118":{"crate_id":1,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"1:32533:113":{"crate_id":1,"path":["core","marker","ConstParamTy"],"kind":"trait"},"1:46608:4223":{"crate_id":1,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"1:3129:139":{"crate_id":1,"path":["core","ops","function","FnMut"],"kind":"trait"},"4:2183:4711":{"crate_id":4,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"1:40356:4069":{"crate_id":1,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"1:10725:3022":{"crate_id":1,"path":["core","slice","iter","Split"],"kind":"struct"},"1:53462:1639":{"crate_id":1,"path":["core","u128"],"kind":"primitive"},"1:33704:2535":{"crate_id":1,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"1:40454:6429":{"crate_id":1,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"1:40623:4090":{"crate_id":1,"path":["core","io","borrowed_buf","BorrowedCursor"],"kind":"struct"},"1:42242:90":{"crate_id":1,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"1:7751:3123":{"crate_id":1,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"4:6872:2428":{"crate_id":4,"path":["alloc","vec","in_place_drop","InPlaceDstBufDrop"],"kind":"struct"},"1:53440:1035":{"crate_id":1,"path":["core","never"],"kind":"primitive"},"4:4381:3689":{"crate_id":4,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"4:3184:1885":{"crate_id":4,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"1:22843:196":{"crate_id":1,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"1:22722:4733":{"crate_id":1,"path":["core","num","fmt","Formatted"],"kind":"struct"},"4:6605:1950":{"crate_id":4,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"1:53459:1640":{"crate_id":1,"path":["core","u16"],"kind":"primitive"},"1:53442:1659":{"crate_id":1,"path":["core","unit"],"kind":"primitive"},"1:40780:3129":{"crate_id":1,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"1:7563:3108":{"crate_id":1,"path":["core","iter","sources","once","once"],"kind":"function"},"1:44637:4750":{"crate_id":1,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"1:42192:1885":{"crate_id":1,"path":["core","result","Iter"],"kind":"struct"},"1:9536:14968":{"crate_id":1,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"4:2048:3804":{"crate_id":4,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"1:40659:3135":{"crate_id":1,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"4:1789:2421":{"crate_id":4,"path":["alloc","collections","btree","map","ExtractIf"],"kind":"struct"},"1:4385:3976":{"crate_id":1,"path":["core","cell","BorrowMutError"],"kind":"struct"},"4:3687:2142":{"crate_id":4,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"1:21192:14776":{"crate_id":1,"path":["core","core_simd","swizzle","rotate_elements_left","Rotate"],"kind":"struct"},"1:3327:261":{"crate_id":1,"path":["core","ops","try_trait","Try"],"kind":"trait"},"1:22282:2505":{"crate_id":1,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr","from_exposed_addr"],"kind":"foreign_type"},"1:11984:3012":{"crate_id":1,"path":["core","slice","GetManyMutError"],"kind":"struct"},"4:4865:224":{"crate_id":4,"path":["alloc","rc","Rc"],"kind":"struct"},"1:43952:4142":{"crate_id":1,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"0:304:2163":{"crate_id":0,"path":["smallvec","smallvec_inline"],"kind":"macro"},"4:3155:101":{"crate_id":4,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"4:2975:4714":{"crate_id":4,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"1:1784:2492":{"crate_id":1,"path":["core","mem","Discriminant"],"kind":"struct"},"4:5877:1881":{"crate_id":4,"path":["alloc","string","Drain"],"kind":"struct"},"1:48348:4303":{"crate_id":1,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"1:40690:3136":{"crate_id":1,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"1:2700:160":{"crate_id":1,"path":["core","convert","Into"],"kind":"trait"},"4:5992:3694":{"crate_id":4,"path":["alloc","sync","Weak"],"kind":"struct"},"1:44210:3970":{"crate_id":1,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"1:22003:11894":{"crate_id":1,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"1:45985:4195":{"crate_id":1,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"1:33527:2534":{"crate_id":1,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"1:53445:339":{"crate_id":1,"path":["core","array"],"kind":"primitive"},"1:40447:4078":{"crate_id":1,"path":["core","char","EscapeDebug"],"kind":"struct"},"1:44697:4182":{"crate_id":1,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"1:21392:11894":{"crate_id":1,"path":["core","core_simd","cast","sealed","Sealed"],"kind":"trait"},"1:46659:4224":{"crate_id":1,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"1:44874:4185":{"crate_id":1,"path":["core","task","wake","RawWaker"],"kind":"struct"},"1:31164:203":{"crate_id":1,"path":["core","cmp","Ordering"],"kind":"enum"},"1:22136:11680":{"crate_id":1,"path":["core","core_simd","simd","num","int","SimdInt"],"kind":"trait"},"1:40793:3144":{"crate_id":1,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"1:40719:3139":{"crate_id":1,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"1:3344:2555":{"crate_id":1,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"1:42398:88":{"crate_id":1,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"4:1505:3801":{"crate_id":4,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"1:46840:4228":{"crate_id":1,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"1:34419:2543":{"crate_id":1,"path":["core","ops","bit","Shl"],"kind":"trait"},"1:22199:11894":{"crate_id":1,"path":["core","core_simd","simd","num","sealed","Sealed"],"kind":"trait"},"1:42746:2445":{"crate_id":1,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"1:7788:163":{"crate_id":1,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"4:2474:4718":{"crate_id":4,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"4:6960:270":{"crate_id":4,"path":["alloc","vec","Vec"],"kind":"struct"},"1:22997:194":{"crate_id":1,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"4:4050:2142":{"crate_id":4,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"1:40803:3145":{"crate_id":1,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"1:43872:4010":{"crate_id":1,"path":["core","str","iter","Chars"],"kind":"struct"},"1:53446:1505":{"crate_id":1,"path":["core","slice"],"kind":"primitive"},"1:10101:154":{"crate_id":1,"path":["core","hash","Hasher"],"kind":"trait"},"1:13339:2397":{"crate_id":1,"path":["core","alloc","Allocator"],"kind":"trait"},"1:2777:123":{"crate_id":1,"path":["core","default","Default"],"kind":"trait"},"1:43816:3031":{"crate_id":1,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"1:3736:1950":{"crate_id":1,"path":["core","array","iter","IntoIter"],"kind":"struct"},"1:4737:6423":{"crate_id":1,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"1:3357:15257":{"crate_id":1,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"4:3581:180":{"crate_id":4,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"4:5004:3687":{"crate_id":4,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"4:4212:3687":{"crate_id":4,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"1:32409:4062":{"crate_id":1,"path":["core","error","Source"],"kind":"struct"},"1:2415:1813":{"crate_id":1,"path":["core","ptr","addr_of_mut"],"kind":"macro"},"1:40350:3970":{"crate_id":1,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"1:2710:264":{"crate_id":1,"path":["core","convert","TryFrom"],"kind":"trait"},"1:22755:6244":{"crate_id":1,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"4:3818:2421":{"crate_id":4,"path":["alloc","collections","linked_list","ExtractIf"],"kind":"struct"},"1:38171:2545":{"crate_id":1,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"1:21881:3015":{"crate_id":1,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"1:21453:11595":{"crate_id":1,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"1:40560:6440":{"crate_id":1,"path":["core","ffi","c_char"],"kind":"type_alias"},"1:44024:3020":{"crate_id":1,"path":["core","str","iter","RSplitN"],"kind":"struct"},"4:1315:3796":{"crate_id":4,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"1:2491:132":{"crate_id":1,"path":["core","cmp","Eq"],"kind":"trait"},"1:21394:11596":{"crate_id":1,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"1:41790:6469":{"crate_id":1,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"4:5650:2426":{"crate_id":4,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"1:11486:3037":{"crate_id":1,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"1:43714:3018":{"crate_id":1,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"1:2943:116":{"crate_id":1,"path":["core","marker","Copy"],"kind":"trait"},"1:7935:176":{"crate_id":1,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"1:40630:3034":{"crate_id":1,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"1:42515:96":{"crate_id":1,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"1:46562:4221":{"crate_id":1,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"1:13235:114":{"crate_id":1,"path":["core","task","wake","Context"],"kind":"struct"},"1:42281:97":{"crate_id":1,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"0:303:2160":{"crate_id":0,"path":["smallvec","smallvec"],"kind":"macro"},"1:30618:2453":{"crate_id":1,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"1:22693:11934":{"crate_id":1,"path":["core","num","fmt","Part"],"kind":"enum"},"1:32420:252":{"crate_id":1,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"1:11519:3038":{"crate_id":1,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"4:7498:3831":{"crate_id":4,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"1:22175:11681":{"crate_id":1,"path":["core","core_simd","simd","num","uint","SimdUint"],"kind":"trait"},"1:4919:12268":{"crate_id":1,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"1:40992:3150":{"crate_id":1,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"1:7826:128":{"crate_id":1,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"1:7747:3124":{"crate_id":1,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"1:23386:188":{"crate_id":1,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"1:23710:4058":{"crate_id":1,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"1:44185:4151":{"crate_id":1,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"4:1424:1885":{"crate_id":4,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"4:2236:16066":{"crate_id":4,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"1:39679:221":{"crate_id":1,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"1:48214:4293":{"crate_id":1,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"1:21204:14776":{"crate_id":1,"path":["core","core_simd","swizzle","rotate_elements_right","Rotate"],"kind":"struct"},"1:40395:4073":{"crate_id":1,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"1:43920:3026":{"crate_id":1,"path":["core","str","iter","RSplit"],"kind":"struct"},"1:40852:3132":{"crate_id":1,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"1:41962:3997":{"crate_id":1,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"1:40842:3148":{"crate_id":1,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"4:1115:4971":{"crate_id":4,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"1:43000:14765":{"crate_id":1,"path":["core","fmt","rt","Count"],"kind":"enum"},"1:8246:3121":{"crate_id":1,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"4:903:1885":{"crate_id":4,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"1:42141:2393":{"crate_id":1,"path":["core","pin","Pin"],"kind":"struct"},"1:39657:222":{"crate_id":1,"path":["core","ops","range","RangeTo"],"kind":"struct"},"4:5388:11872":{"crate_id":4,"path":["alloc","slice","Concat"],"kind":"trait"},"1:30562:1810":{"crate_id":1,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"1:53465:1248":{"crate_id":1,"path":["core","reference"],"kind":"primitive"},"1:39580:2418":{"crate_id":1,"path":["core","ops","index","Index"],"kind":"trait"},"1:12448:4003":{"crate_id":1,"path":["core","str","pattern","Pattern"],"kind":"trait"},"1:30602:2494":{"crate_id":1,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"4:692:117":{"crate_id":4,"path":["alloc","borrow","Cow"],"kind":"enum"},"4:7619:2421":{"crate_id":4,"path":["alloc","vec","extract_if","ExtractIf"],"kind":"struct"},"0:376:1826":{"crate_id":0,"path":["smallvec","CollectionAllocErr"],"kind":"enum"},"4:212:2401":{"crate_id":4,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"1:40367:4070":{"crate_id":1,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"1:46706:4225":{"crate_id":1,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"1:43797:3030":{"crate_id":1,"path":["core","slice","iter","RChunks"],"kind":"struct"},"1:44645:4752":{"crate_id":1,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"1:45915:4192":{"crate_id":1,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"1:43037:2453":{"crate_id":1,"path":["core","fmt","Alignment"],"kind":"enum"},"1:40466:4081":{"crate_id":1,"path":["core","char","ToLowercase"],"kind":"struct"},"0:379:1830":{"crate_id":0,"path":["smallvec","CollectionAllocErr","AllocErr"],"kind":"variant"},"1:22357:11675":{"crate_id":1,"path":["core","core_simd","simd","cmp","ord","SimdPartialOrd"],"kind":"trait"},"1:10918:3027":{"crate_id":1,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"1:21575:4027":{"crate_id":1,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"1:30596:1811":{"crate_id":1,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"1:32531:2386":{"crate_id":1,"path":["core","marker","Tuple"],"kind":"trait"},"1:40650:3125":{"crate_id":1,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"1:13118:4025":{"crate_id":1,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"4:7331:1950":{"crate_id":4,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"1:48223:4294":{"crate_id":1,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"1:42062:1885":{"crate_id":1,"path":["core","option","Iter"],"kind":"struct"},"1:6489:4727":{"crate_id":1,"path":["core","iter","adapters","map_windows","MapWindowsInner"],"kind":"struct"},"1:7281:4973":{"crate_id":1,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"1:42078:1950":{"crate_id":1,"path":["core","option","IntoIter"],"kind":"struct"},"1:53461:1642":{"crate_id":1,"path":["core","u64"],"kind":"primitive"},"1:43012:14762":{"crate_id":1,"path":["core","fmt","rt","Flag"],"kind":"enum"},"1:7503:3106":{"crate_id":1,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"1:21221:14782":{"crate_id":1,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"1:22362:11673":{"crate_id":1,"path":["core","core_simd","simd","cmp","ord","SimdOrd"],"kind":"trait"},"1:53444:1152":{"crate_id":1,"path":["core","pointer"],"kind":"primitive"},"1:40431:4077":{"crate_id":1,"path":["core","char","EscapeUnicode"],"kind":"struct"},"1:2703:142":{"crate_id":1,"path":["core","convert","From"],"kind":"trait"},"1:4114:3972":{"crate_id":1,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"1:33586:2538":{"crate_id":1,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"1:22564:4728":{"crate_id":1,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"1:44219:4077":{"crate_id":1,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"4:1685:2142":{"crate_id":4,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"1:1757:1809":{"crate_id":1,"path":["core","mem","align_of"],"kind":"function"},"1:2414:1812":{"crate_id":1,"path":["core","ptr","addr_of"],"kind":"macro"},"1:32445:251":{"crate_id":1,"path":["core","marker","StructuralEq"],"kind":"trait"},"1:10520:11894":{"crate_id":1,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"1:41215:3111":{"crate_id":1,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"1:46516:4219":{"crate_id":1,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"1:46229:4205":{"crate_id":1,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"1:4265:3974":{"crate_id":1,"path":["core","cell","once","OnceCell"],"kind":"struct"},"1:26163:273":{"crate_id":1,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"4:1270:11859":{"crate_id":4,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"1:48196:4292":{"crate_id":1,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"1:10880:3026":{"crate_id":1,"path":["core","slice","iter","RSplit"],"kind":"struct"},"4:5392:11873":{"crate_id":4,"path":["alloc","slice","Join"],"kind":"trait"},"1:2996:2528":{"crate_id":1,"path":["core","ops","arith","Add"],"kind":"trait"},"1:46340:4214":{"crate_id":1,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"1:7879:1889":{"crate_id":1,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"1:43696:3019":{"crate_id":1,"path":["core","slice","iter","Windows"],"kind":"struct"},"1:12259:3039":{"crate_id":1,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"1:44476:6543":{"crate_id":1,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"1:45939:4193":{"crate_id":1,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"1:40751:3142":{"crate_id":1,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"1:48012:4288":{"crate_id":1,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"1:53451:693":{"crate_id":1,"path":["core","f32"],"kind":"primitive"},"1:9888:2445":{"crate_id":1,"path":["core","fmt","LowerHex"],"kind":"trait"},"1:41939:6470":{"crate_id":1,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"4:6117:3687":{"crate_id":4,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"1:44831:234":{"crate_id":1,"path":["core","future","ResumeTy"],"kind":"struct"},"1:46538:4220":{"crate_id":1,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"1:48254:4297":{"crate_id":1,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"1:4:1115":{"crate_id":1,"path":["core","panic"],"kind":"macro"},"1:53460:1641":{"crate_id":1,"path":["core","u32"],"kind":"primitive"},"1:3126:138":{"crate_id":1,"path":["core","ops","function","Fn"],"kind":"trait"},"1:1777:635":{"crate_id":1,"path":["core","mem","drop"],"kind":"function"},"1:46440:4217":{"crate_id":1,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"1:53464:1698":{"crate_id":1,"path":["core","usize"],"kind":"primitive"},"1:43055:135":{"crate_id":1,"path":["core","fmt","Error"],"kind":"struct"},"1:48269:4298":{"crate_id":1,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"1:1814:1189":{"crate_id":1,"path":["core","ptr"],"kind":"module"},"1:43262:154":{"crate_id":1,"path":["core","hash","sip","Hasher"],"kind":"struct"},"1:43888:4079":{"crate_id":1,"path":["core","str","iter","Bytes"],"kind":"struct"},"2:0:479":{"crate_id":2,"path":["compiler_builtins"],"kind":"module"},"1:3161:2419":{"crate_id":1,"path":["core","ops","index","IndexMut"],"kind":"trait"},"1:2417:103":{"crate_id":1,"path":["core","borrow","Borrow"],"kind":"trait"},"1:40710:3138":{"crate_id":1,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"1:2953:1807":{"crate_id":1,"path":["core","marker","PhantomData"],"kind":"struct"},"1:46069:4198":{"crate_id":1,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"1:4308:2455":{"crate_id":1,"path":["core","cell","Cell"],"kind":"struct"},"1:9892:213":{"crate_id":1,"path":["core","fmt","Pointer"],"kind":"trait"},"1:41006:3151":{"crate_id":1,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"4:266:2142":{"crate_id":4,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"1:40513:107":{"crate_id":1,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"1:33763:2537":{"crate_id":1,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"1:44398:4166":{"crate_id":1,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"4:5807:258":{"crate_id":4,"path":["alloc","string","ToString"],"kind":"trait"},"1:44882:4187":{"crate_id":1,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"1:4030:3687":{"crate_id":1,"path":["core","array","Guard"],"kind":"struct"},"4:2973:16022":{"crate_id":4,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"1:43806:3033":{"crate_id":1,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"1:40409:4074":{"crate_id":1,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"1:10845:3040":{"crate_id":1,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"1:4898:420":{"crate_id":1,"path":["core","ffi","c_void"],"kind":"enum"},"1:48318:4301":{"crate_id":1,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"1:47230:4250":{"crate_id":1,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"1:47620:4284":{"crate_id":1,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"4:7347:3827":{"crate_id":4,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"1:30794:11922":{"crate_id":1,"path":["core","ptr","alignment","AlignmentEnum64"],"kind":"enum"},"1:11998:6529":{"crate_id":1,"path":["core","str","converts","from_utf8"],"kind":"function"},"1:39637:219":{"crate_id":1,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"1:3122:1891":{"crate_id":1,"path":["core","ops","drop","Drop"],"kind":"trait"},"1:44649:4753":{"crate_id":1,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"1:9852:141":{"crate_id":1,"path":["core","fmt","Formatter"],"kind":"struct"},"0:377:1828":{"crate_id":0,"path":["smallvec","CollectionAllocErr","CapacityOverflow"],"kind":"variant"},"1:43492:4744":{"crate_id":1,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"1:2335:2506":{"crate_id":1,"path":["core","ptr","from_exposed_addr_mut"],"kind":"function"},"1:10136:2468":{"crate_id":1,"path":["core","hash","BuildHasher"],"kind":"trait"},"4:6370:1709":{"crate_id":4,"path":["alloc","vec"],"kind":"module"},"1:48120:4290":{"crate_id":1,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"4:1455:1950":{"crate_id":4,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"1:42131:2660":{"crate_id":1,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"1:42132:2905":{"crate_id":1,"path":["core","panicking","AssertKind"],"kind":"enum"},"1:10099:150":{"crate_id":1,"path":["core","hash","macros","Hash"],"kind":"proc_derive"},"1:47950:4287":{"crate_id":1,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"1:10973:3020":{"crate_id":1,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"0:68:1881":{"crate_id":0,"path":["smallvec","Drain"],"kind":"struct"},"1:38226:2546":{"crate_id":1,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"1:41903:11910":{"crate_id":1,"path":["core","net","parser","AddrKind"],"kind":"enum"},"4:3225:3820":{"crate_id":4,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"1:40828:3147":{"crate_id":1,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"1:39613:217":{"crate_id":1,"path":["core","ops","range","Range"],"kind":"struct"},"1:46994:4246":{"crate_id":1,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"4:6687:2142":{"crate_id":4,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"1:32921:2530":{"crate_id":1,"path":["core","ops","arith","Mul"],"kind":"trait"},"4:7560:3836":{"crate_id":4,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"1:43284:4130":{"crate_id":1,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"1:48295:4300":{"crate_id":1,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"1:23228:197":{"crate_id":1,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"1:5687:3687":{"crate_id":1,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"1:11560:1952":{"crate_id":1,"path":["core","slice","raw","from_raw_parts"],"kind":"function"},"1:32395:4061":{"crate_id":1,"path":["core","error","tags","MaybeSizedValue"],"kind":"struct"},"1:48234:4295":{"crate_id":1,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"1:22639:4040":{"crate_id":1,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"1:43477:4132":{"crate_id":1,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"1:3317:2551":{"crate_id":1,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"1:32501:2480":{"crate_id":1,"path":["core","marker","PhantomPinned"],"kind":"struct"},"1:12457:6528":{"crate_id":1,"path":["core","str","pattern","Searcher"],"kind":"trait"},"4:7524:3695":{"crate_id":4,"path":["alloc","rc","UniqueRc"],"kind":"struct"},"4:2979:4846":{"crate_id":4,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"1:21219:14780":{"crate_id":1,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"1:41192:3989":{"crate_id":1,"path":["core","iter","sources","from_coroutine","FromCoroutine"],"kind":"struct"},"1:40771:3143":{"crate_id":1,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"1:42200:2164":{"crate_id":1,"path":["core","result","IterMut"],"kind":"struct"},"4:4252:1885":{"crate_id":4,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"1:40480:6430":{"crate_id":1,"path":["core","char","CaseMappingIter"],"kind":"enum"},"1:9884:2443":{"crate_id":1,"path":["core","fmt","Octal"],"kind":"trait"},"1:23548:190":{"crate_id":1,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"4:7004:1925":{"crate_id":4,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"1:11001:3021":{"crate_id":1,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"1:2092:2394":{"crate_id":1,"path":["core","ptr","unique","Unique"],"kind":"struct"},"1:39701:223":{"crate_id":1,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"4:4092:2164":{"crate_id":4,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"1:53452:695":{"crate_id":1,"path":["core","f64"],"kind":"primitive"},"1:43826:3032":{"crate_id":1,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"1:4957:3979":{"crate_id":1,"path":["core","io","borrowed_buf","BorrowedBuf"],"kind":"struct"},"1:9349:85":{"crate_id":1,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"1:2657:11894":{"crate_id":1,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"1:41230:3114":{"crate_id":1,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"1:40593:3708":{"crate_id":1,"path":["core","ffi","VaListImpl"],"kind":"struct"},"1:34246:2541":{"crate_id":1,"path":["core","ops","bit","BitXor"],"kind":"trait"},"1:8290:14966":{"crate_id":1,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"1:22228:2505":{"crate_id":1,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","from_exposed_addr"],"kind":"foreign_type"},"1:46039:4197":{"crate_id":1,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"1:47414:4252":{"crate_id":1,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"1:5592:3687":{"crate_id":1,"path":["core","iter","adapters","filter","next_chunk","Guard"],"kind":"struct"},"1:15:1802":{"crate_id":1,"path":["core","write"],"kind":"macro"},"1:42476:89":{"crate_id":1,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"1:31192:3454":{"crate_id":1,"path":["core","cmp","Reverse"],"kind":"struct"},"1:10700:2164":{"crate_id":1,"path":["core","slice","iter","IterMut"],"kind":"struct"},"1:44629:4748":{"crate_id":1,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"1:43645:4133":{"crate_id":1,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"1:43878:4140":{"crate_id":1,"path":["core","str","iter","CharIndices"],"kind":"struct"},"1:12463:6527":{"crate_id":1,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"1:23629:187":{"crate_id":1,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"4:7549:3835":{"crate_id":4,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"1:44709:6549":{"crate_id":1,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"1:22005:11594":{"crate_id":1,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"1:39533:2391":{"crate_id":1,"path":["core","ops","coroutine","CoroutineState"],"kind":"enum"},"1:30333:6205":{"crate_id":1,"path":["core","num","FpCategory"],"kind":"enum"},"1:4998:856":{"crate_id":1,"path":["core","iter"],"kind":"module"},"1:8921:2659":{"crate_id":1,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"1:12185:4014":{"crate_id":1,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"1:43860:4139":{"crate_id":1,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"1:4149:2385":{"crate_id":1,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"1:8252:3122":{"crate_id":1,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"4:2062:3806":{"crate_id":4,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"1:7333:3103":{"crate_id":1,"path":["core","iter","range","Step"],"kind":"trait"},"1:44425:4020":{"crate_id":1,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"1:44510:4180":{"crate_id":1,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"1:44319:4161":{"crate_id":1,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"1:4380:3975":{"crate_id":1,"path":["core","cell","BorrowError"],"kind":"struct"},"1:22729:4053":{"crate_id":1,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"1:42149:233":{"crate_id":1,"path":["core","result","Result"],"kind":"enum"},"4:7535:250":{"crate_id":4,"path":["alloc","string","String"],"kind":"struct"},"1:40603:4089":{"crate_id":1,"path":["core","ffi","VaList"],"kind":"struct"},"1:1896:4725":{"crate_id":1,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"1:22328:11674":{"crate_id":1,"path":["core","core_simd","simd","cmp","eq","SimdPartialEq"],"kind":"trait"},"1:42753:2446":{"crate_id":1,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"1:12674:118":{"crate_id":1,"path":["core","str","lossy","Debug"],"kind":"struct"},"1:40518:4087":{"crate_id":1,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"1:1882:2520":{"crate_id":1,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"1:30630:11907":{"crate_id":1,"path":["core","ptr","alignment","AlignmentEnum16"],"kind":"enum"},"1:41206:3109":{"crate_id":1,"path":["core","iter","sources","once","Once"],"kind":"struct"},"1:43970:4143":{"crate_id":1,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"1:7111:2851":{"crate_id":1,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"0:0:2160":{"crate_id":0,"path":["smallvec"],"kind":"module"},"4:4411:3687":{"crate_id":4,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"1:44821:226":{"crate_id":1,"path":["core","future","ready","Ready"],"kind":"struct"},"1:46737:4226":{"crate_id":1,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"1:10959:3024":{"crate_id":1,"path":["core","slice","iter","SplitN"],"kind":"struct"},"1:9896:2448":{"crate_id":1,"path":["core","fmt","UpperExp"],"kind":"trait"},"4:1151:4972":{"crate_id":4,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"1:21856:11598":{"crate_id":1,"path":["core","core_simd","to_bytes","ToBytes"],"kind":"trait"},"1:53466:13":{"crate_id":1,"path":["core","fn"],"kind":"primitive"},"4:6843:2426":{"crate_id":4,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"4:1024:2142":{"crate_id":4,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"1:4459:2456":{"crate_id":1,"path":["core","cell","Ref"],"kind":"struct"},"1:3254:218":{"crate_id":1,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"1:4504:3707":{"crate_id":1,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"1:44818:147":{"crate_id":1,"path":["core","future","future","Future"],"kind":"trait"},"1:3132:140":{"crate_id":1,"path":["core","ops","function","FnOnce"],"kind":"trait"},"1:48371:4304":{"crate_id":1,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"1:40760:3152":{"crate_id":1,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"1:39597:220":{"crate_id":1,"path":["core","ops","range","RangeFull"],"kind":"struct"},"1:9877:118":{"crate_id":1,"path":["core","fmt","Debug"],"kind":"trait"},"1:2697:77":{"crate_id":1,"path":["core","convert","AsMut"],"kind":"trait"},"1:41199:3107":{"crate_id":1,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"1:44912:2440":{"crate_id":1,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"4:7435:11856":{"crate_id":4,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"4:2154:3807":{"crate_id":4,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"1:22631:4039":{"crate_id":1,"path":["core","num","diy_float","Fp"],"kind":"struct"},"1:47154:4248":{"crate_id":1,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"1:44166:4149":{"crate_id":1,"path":["core","str","iter","LinesAny"],"kind":"struct"},"4:1486:3799":{"crate_id":4,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"1:44937:4190":{"crate_id":1,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"4:7339:217":{"crate_id":4,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"4:3251:3821":{"crate_id":4,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"1:42002:201":{"crate_id":1,"path":["core","option","Option"],"kind":"enum"},"4:1439:2164":{"crate_id":4,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"1:9833:233":{"crate_id":1,"path":["core","fmt","Result"],"kind":"type_alias"},"4:4182:3687":{"crate_id":4,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"0:104:1950":{"crate_id":0,"path":["smallvec","IntoIter"],"kind":"struct"},"1:43846:4136":{"crate_id":1,"path":["core","str","error","Utf8Error"],"kind":"struct"},"1:43902:3022":{"crate_id":1,"path":["core","str","iter","Split"],"kind":"struct"},"4:7307:3677":{"crate_id":4,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"4:634:3788":{"crate_id":4,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"4:3196:16030":{"crate_id":4,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"4:40:2399":{"crate_id":4,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"1:3001:2533":{"crate_id":1,"path":["core","ops","arith","Sub"],"kind":"trait"},"1:47076:4247":{"crate_id":1,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"1:43274:4126":{"crate_id":1,"path":["core","hash","sip","State"],"kind":"struct"},"4:6351:11885":{"crate_id":4,"path":["alloc","task","Wake"],"kind":"trait"},"1:40546:4088":{"crate_id":1,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"1:46294:4207":{"crate_id":1,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"1:21573:11593":{"crate_id":1,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"1:44462:4167":{"crate_id":1,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"1:9541:5092":{"crate_id":1,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"1:43292:4131":{"crate_id":1,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"4:1387:100":{"crate_id":4,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"1:39723:1990":{"crate_id":1,"path":["core","ops","range","Bound"],"kind":"enum"},"1:1905:2519":{"crate_id":1,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"1:4449:3706":{"crate_id":1,"path":["core","cell","BorrowRef"],"kind":"struct"},"1:9032:4003":{"crate_id":1,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"1:13246:3729":{"crate_id":1,"path":["core","task","wake","Waker"],"kind":"struct"},"1:2788:135":{"crate_id":1,"path":["core","error","Error"],"kind":"trait"},"1:33900:2539":{"crate_id":1,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"1:42320:87":{"crate_id":1,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"1:1972:186":{"crate_id":1,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"4:5154:3694":{"crate_id":4,"path":["alloc","rc","Weak"],"kind":"struct"},"1:10807:3023":{"crate_id":1,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"1:22442:4028":{"crate_id":1,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"1:42208:1950":{"crate_id":1,"path":["core","result","IntoIter"],"kind":"struct"},"4:6862:2427":{"crate_id":4,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"4:4444:3689":{"crate_id":4,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"1:23074:195":{"crate_id":1,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"}},"external_crates":{"2":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":28}