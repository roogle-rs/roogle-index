{"root":"0:0:2360","crate_version":"2.0.0-alpha.5","includes_private":false,"index":{"0:186:2268":{"id":"0:186:2268","crate_id":0,"name":"into_vec","span":{"filename":"src/lib.rs","begin":[1281,4],"end":[1308,5]},"visibility":"public","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Vec","id":"4:7048:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:364:2095":{"id":"0:364:2095","crate_id":0,"name":"as_mut","span":{"filename":"src/lib.rs","begin":[2063,4],"end":[2065,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"generic":"T"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:360:335":{"id":"0:360:335","crate_id":0,"name":"as_ref","span":{"filename":"src/lib.rs","begin":[2056,4],"end":[2058,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"generic":"T"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:178:2258":{"id":"0:178:2258","crate_id":0,"name":"insert","span":{"filename":"src/lib.rs","begin":[1212,4],"end":[1228,5]},"visibility":"public","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}],["value",{"generic":"T"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:320":{"id":"0:320","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1995,0],"end":[2001,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"N","kind":{"const":{"type":{"primitive":"usize"},"default":null}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"1:8163:164","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"borrowed_ref":{"lifetime":"'a","mutable":true,"type":{"resolved_path":{"name":"SmallVec","id":"0:56:2078","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"const":{"type":{"primitive":"usize"},"expr":"N","value":null,"is_literal":false}}],"bindings":[]}}}}}},"items":["0:324:2124","0:325:172","0:326:940"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:212":{"id":"0:212","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1541,0],"end":[1597,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Copy","id":"1:3098:117","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"N","kind":{"const":{"type":{"primitive":"usize"},"default":null}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"SmallVec","id":"0:56:2078","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"const":{"type":{"primitive":"usize"},"expr":"N","value":null,"is_literal":false}}],"bindings":[]}}}},"items":["0:215:2329","0:216:2330","0:217:2334"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:68:2083":{"id":"0:68:2083","crate_id":0,"name":"Drain","span":{"filename":"src/lib.rs","begin":[304,0],"end":[316,1]},"visibility":"public","docs":"An iterator that removes the items from a `SmallVec` and yields them by value.\n\nReturned from [`SmallVec::drain`][1].\n\n[1]: struct.SmallVec.html#method.drain","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[{"outlives":"'a"}],"default":null,"synthetic":false}}},{"name":"N","kind":{"const":{"type":{"primitive":"usize"},"default":null}}}],"where_predicates":[]},"impls":["a:1:3103:246-0:68:2083","a:1:32014:236-0:68:2083","a:1:41675:2868-0:68:2083","a:1:41674:2869-0:68:2083","a:1:32073:2684-0:68:2083","a:1:3138:2680-0:68:2083","b:1:2895-0:68:2083","b:1:2884-0:68:2083","b:1:2610-0:68:2083","b:1:8167-0:68:2083","b:1:2607-0:68:2083","b:1:2880-0:68:2083","b:1:3719-0:68:2083","b:1:2890-0:68:2083","0:95","0:90","0:373","0:99","0:84","0:76"]}}},"1:13227:16059":{"id":"1:13227:16059","crate_id":1,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns the substring after the prefix,\nwrapped in `Some`. Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:52173:458","self::pattern":"1:12812:6717"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["prefix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41580:193","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12818:4241","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:2612:2367":{"id":"1:2612:2367","crate_id":1,"name":"borrow_mut","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:185:2097":{"id":"0:185:2097","crate_id":0,"name":"as_mut_ptr","span":{"filename":"src/lib.rs","begin":[1271,4],"end":[1278,5]},"visibility":"public","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:122:172":{"id":"0:122:172","crate_id":0,"name":"Item","span":{"filename":"src/lib.rs","begin":[550,4],"end":[550,18]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"0:157:2183":{"id":"0:157:2183","crate_id":0,"name":"drain","span":{"filename":"src/lib.rs","begin":[835,4],"end":[872,5]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["range",{"generic":"R"}]],"output":{"resolved_path":{"name":"Drain","id":"0:68:2083","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"T"}},{"const":{"type":{"primitive":"usize"},"expr":"N","value":null,"is_literal":false}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"R"},"bounds":[{"trait_bound":{"trait":{"name":"core::ops::RangeBounds","id":"1:3473:210","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13146:16034":{"id":"1:13146:16034","crate_id":1,"name":"split_at_checked","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that’s not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut_checked`]\nmethod.\n\n[`split_at_mut_checked`]: str::split_at_mut_checked\n\n# Examples\n\n```\n#![feature(split_at_checked)]\n\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at_checked(3).unwrap();\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n\nassert_eq!(None, s.split_at_checked(13));  // Inside “ö”\nassert_eq!(None, s.split_at_checked(16));  // Beyond the string length\n```","links":{"str::split_at_mut_checked":"1:13147:16035"},"attrs":["#[must_use]","#[unstable(feature = \"split_at_checked\", reason = \"new API\", issue =\n\"119128\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"1:41580:193","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"4:5605:2694":{"id":"4:5605:2694","crate_id":4,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"4:7632:242"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["from",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"4:7632:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12818:4241","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13207:16050":{"id":"1:13207:16050","crate_id":1,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"1:12812:6717","`DoubleEndedIterator`":"1:8201:129","prim@char":"1:52173:458","str::rmatch_indices":"1:13210:16051"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"MatchIndices","id":"1:43612:4394","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12818:4241","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:3138:2680-0:104:2124":{"id":"a:1:3138:2680-0:104:2124","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"N","kind":{"const":{"type":{"primitive":"usize"},"default":null}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Freeze","id":"1:3138:2680","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"1:3138:2680","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:104:2124","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"const":{"type":{"primitive":"usize"},"expr":"N","value":null,"is_literal":false}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:247":{"id":"0:247","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1721,0],"end":[1726,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"N","kind":{"const":{"type":{"primitive":"usize"},"default":null}}}],"where_predicates":[]},"provided_trait_methods":["extend_reserve","extend_one"],"trait":{"name":"Extend","id":"1:8172:2348","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"SmallVec","id":"0:56:2078","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"const":{"type":{"primitive":"usize"},"expr":"N","value":null,"is_literal":false}}],"bindings":[]}}}},"items":["0:250:2261"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:2898:136":{"id":"1:2898:136","crate_id":1,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Infallible","id":"1:31938:6593","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"0:187:2269":{"id":"0:187:2269","crate_id":0,"name":"into_boxed_slice","span":{"filename":"src/lib.rs","begin":[1311,4],"end":[1313,5]},"visibility":"public","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Box","id":"4:295:2007","args":{"angle_bracketed":{"args":[{"type":{"slice":{"generic":"T"}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2890-0:27:2041":{"id":"b:1:2890-0:27:2041","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2864:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2860:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RawSmallVec","id":"0:27:2041","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"const":{"type":{"primitive":"usize"},"expr":"N","value":null,"is_literal":false}}],"bindings":[]}}}},"items":["1:2893:136","1:2894:1786"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:353":{"id":"0:353","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[2047,0],"end":[2052,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"N","kind":{"const":{"type":{"primitive":"usize"},"default":null}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2604:103","args":{"angle_bracketed":{"args":[{"type":{"slice":{"generic":"T"}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"SmallVec","id":"0:56:2078","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"const":{"type":{"primitive":"usize"},"expr":"N","value":null,"is_literal":false}}],"bindings":[]}}}},"items":["0:356:2367"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:325:172":{"id":"0:325:172","crate_id":0,"name":"Item","span":{"filename":"src/lib.rs","begin":[1997,4],"end":[1997,26]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"borrowed_ref":{"lifetime":"'a","mutable":true,"type":{"generic":"T"}}}}}},"1:13142:16030":{"id":"1:13142:16030","crate_id":1,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"1:52179:1700","str::slice_mut_unchecked":"1:13143:16031","crate::ops::Index":"1:39146:2624"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"1:13156:13655":{"id":"1:13156:13655","crate_id":1,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EncodeUtf16","id":"1:43754:4256","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:125":{"id":"0:125","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[574,0],"end":[592,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"N","kind":{"const":{"type":{"primitive":"usize"},"default":null}}}],"where_predicates":[]},"provided_trait_methods":["rfold","advance_back_by","try_rfold","rfind","nth_back"],"trait":{"name":"DoubleEndedIterator","id":"1:8201:129","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:104:2124","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"const":{"type":{"primitive":"usize"},"expr":"N","value":null,"is_literal":false}}],"bindings":[]}}}},"items":["0:128:2090"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:13136:15468":{"id":"1:13136:15468","crate_id":1,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"1:41582:190"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"1:41580:193","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:10903:238","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:10903:238","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2610-0:56:2078":{"id":"b:1:2610-0:56:2078","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32015:2683","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2604:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"SmallVec","id":"0:56:2078","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"const":{"type":{"primitive":"usize"},"expr":"N","value":null,"is_literal":false}}],"bindings":[]}}}},"items":["1:2612:2367"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"4:731:12094":{"id":"4:731:12094","crate_id":4,"name":"clone_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["target",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:154:2051":{"id":"0:154:2051","crate_id":0,"name":"capacity","span":{"filename":"src/lib.rs","begin":[779,4],"end":[786,5]},"visibility":"public","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:173:2115":{"id":"0:173:2115","crate_id":0,"name":"as_slice","span":{"filename":"src/lib.rs","begin":[1149,4],"end":[1154,5]},"visibility":"public","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"generic":"T"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:146:2150":{"id":"0:146:2150","crate_id":0,"name":"from_buf_and_len_unchecked","span":{"filename":"src/lib.rs","begin":[713,4],"end":[720,5]},"visibility":"public","docs":"Constructs a new `SmallVec` on the stack from an A without copying elements. Also sets the length. The user is responsible for ensuring that `len <= A::size()`.\n\n# Examples\n\n```\nuse smallvec::SmallVec;\nuse std::mem::MaybeUninit;\n\nlet buf = [1, 2, 3, 4, 5, 0, 0, 0];\nlet small_vec = unsafe {\n    SmallVec::from_buf_and_len_unchecked(MaybeUninit::new(buf), 5)\n};\n\nassert_eq!(&*small_vec, &[1, 2, 3, 4, 5]);\n```\n\n# Safety\n\n`len <= N`, and all the elements in `buf[..len]` must be initialized","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["buf",{"resolved_path":{"name":"MaybeUninit","id":"1:30453:2013","args":{"angle_bracketed":{"args":[{"type":{"array":{"type":{"generic":"T"},"len":"N"}}}],"bindings":[]}}}}],["len",{"primitive":"usize"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:269:248":{"id":"0:269:248","crate_id":0,"name":"Target","span":{"filename":"src/lib.rs","begin":[1820,4],"end":[1820,22]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"slice":{"generic":"T"}}}}},"0:99":{"id":"0:99","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[355,0],"end":[381,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[{"outlives":"'a"}],"default":null,"synthetic":false}}},{"name":"N","kind":{"const":{"type":{"primitive":"usize"},"default":null}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Drop","id":"1:3340:2092","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Drain","id":"0:68:2083","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"const":{"type":{"primitive":"usize"},"expr":"N","value":null,"is_literal":false}}],"bindings":[]}}}},"items":["0:103:658"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:324:2124":{"id":"0:324:2124","crate_id":0,"name":"IntoIter","span":{"filename":"src/lib.rs","begin":[1996,4],"end":[1996,48]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"IterMut","id":"1:11072:2364","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}}}}},"a:1:3138:2680-0:27:2041":{"id":"a:1:3138:2680-0:27:2041","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"N","kind":{"const":{"type":{"primitive":"usize"},"default":null}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Freeze","id":"1:3138:2680","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"1:3138:2680","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawSmallVec","id":"0:27:2041","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"const":{"type":{"primitive":"usize"},"expr":"N","value":null,"is_literal":false}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:368:787":{"id":"0:368:787","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[2069,4],"end":[2071,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"core::fmt::Formatter","id":"1:10218:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"core::fmt::Result","id":"1:10199:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:151:2130":{"id":"0:151:2130","crate_id":0,"name":"inline_size","span":{"filename":"src/lib.rs","begin":[759,4],"end":[765,5]},"visibility":"public","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"4:5623:16803":{"id":"4:5623:16803","crate_id":4,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"1:13248:16069"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"4:7632:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:365":{"id":"0:365","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[2068,0],"end":[2072,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Debug","id":"1:10244:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"N","kind":{"const":{"type":{"primitive":"usize"},"default":null}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:10244:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"SmallVec","id":"0:56:2078","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"const":{"type":{"primitive":"usize"},"expr":"N","value":null,"is_literal":false}}],"bindings":[]}}}},"items":["0:368:787"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:169:2247":{"id":"0:169:2247","crate_id":0,"name":"reserve_exact","span":{"filename":"src/lib.rs","begin":[1081,4],"end":[1091,5]},"visibility":"public","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["additional",{"primitive":"usize"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2610-0:378:2028":{"id":"b:1:2610-0:378:2028","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32015:2683","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2604:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"CollectionAllocErr","id":"0:378:2028","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2612:2367"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:311:172":{"id":"0:311:172","crate_id":0,"name":"Item","span":{"filename":"src/lib.rs","begin":[1970,4],"end":[1970,18]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"0:369":{"id":"0:369","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[2074,0],"end":[2078,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Debug","id":"1:10244:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"N","kind":{"const":{"type":{"primitive":"usize"},"default":null}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:10244:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:104:2124","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"const":{"type":{"primitive":"usize"},"expr":"N","value":null,"is_literal":false}}],"bindings":[]}}}},"items":["0:372:787"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2607-0:378:2028":{"id":"b:1:2607-0:378:2028","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32015:2683","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2601:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"CollectionAllocErr","id":"0:378:2028","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2609:2008"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:284:817":{"id":"0:284:817","crate_id":0,"name":"from","span":{"filename":"src/lib.rs","begin":[1874,4],"end":[1876,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["slice",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"slice":{"generic":"T"}}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:270:617":{"id":"0:270:617","crate_id":0,"name":"deref","span":{"filename":"src/lib.rs","begin":[1823,4],"end":[1825,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Target","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"1:3311:124","args":null}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13239:16063":{"id":"1:13239:16063","crate_id":1,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:52173:458","self::pattern":"1:12812:6717"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12818:4241","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12818:4241","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12833:6723","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"4:5620:16801":{"id":"4:5620:16801","crate_id":4,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"4:295:2007","`String`":"4:7632:242"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"4:295:2007","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"4:7632:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:3138:2680-0:68:2083":{"id":"a:1:3138:2680-0:68:2083","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"N","kind":{"const":{"type":{"primitive":"usize"},"default":null}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"1:3138:2680","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Drain","id":"0:68:2083","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"const":{"type":{"primitive":"usize"},"expr":"N","value":null,"is_literal":false}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:318:172":{"id":"0:318:172","crate_id":0,"name":"Item","span":{"filename":"src/lib.rs","begin":[1989,4],"end":[1989,22]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"T"}}}}}},"1:13150:4413":{"id":"1:13150:4413","crate_id":1,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the previous character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:52173:458"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CharIndices","id":"1:43438:4390","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:3138:2680-0:56:2078":{"id":"a:1:3138:2680-0:56:2078","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"N","kind":{"const":{"type":{"primitive":"usize"},"default":null}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Freeze","id":"1:3138:2680","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"1:3138:2680","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"SmallVec","id":"0:56:2078","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"const":{"type":{"primitive":"usize"},"expr":"N","value":null,"is_literal":false}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:8169:172":{"id":"1:8169:172","crate_id":1,"name":"Item","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"Iterator","id":"1:8309:177","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}},"0:378:2028":{"id":"0:378:2028","crate_id":0,"name":"CollectionAllocErr","span":{"filename":"src/lib.rs","begin":[101,0],"end":[109,1]},"visibility":"public","docs":"Error type for APIs with fallible heap allocation","links":{},"attrs":[],"deprecation":null,"inner":{"enum":{"generics":{"params":[],"where_predicates":[]},"variants_stripped":false,"variants":["0:379:2030","0:381:2032"],"impls":["a:1:3103:246-0:378:2028","a:1:32014:236-0:378:2028","a:1:41675:2868-0:378:2028","a:1:41674:2869-0:378:2028","a:1:32073:2684-0:378:2028","a:1:3138:2680-0:378:2028","b:1:2895-0:378:2028","b:1:2884-0:378:2028","b:1:2610-0:378:2028","b:1:2607-0:378:2028","b:1:2880-0:378:2028","b:1:3719-0:378:2028","b:1:2890-0:378:2028","b:4:5854-0:378:2028","0:383","0:25"]}}},"1:13138:2358":{"id":"1:13138:2358","crate_id":1,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:10903:238","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:10903:238","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:295:817":{"id":"0:295:817","crate_id":0,"name":"from","span":{"filename":"src/lib.rs","begin":[1900,4],"end":[1902,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["array",{"resolved_path":{"name":"Vec","id":"4:7048:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:221:2336":{"id":"0:221:2336","crate_id":0,"name":"resize","span":{"filename":"src/lib.rs","begin":[1601,4],"end":[1608,5]},"visibility":"public","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["len",{"primitive":"usize"}],["value",{"generic":"T"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2884-0:68:2083":{"id":"b:1:2884-0:68:2083","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2857:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Drain","id":"0:68:2083","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"const":{"type":{"primitive":"usize"},"expr":"N","value":null,"is_literal":false}}],"bindings":[]}}}},"items":["1:2886:817"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:13254:6612":{"id":"1:13254:6612","crate_id":1,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"1:4899:6612"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDefault","id":"1:43770:4207","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"4:730:12093":{"id":"4:730:12093","crate_id":4,"name":"to_owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:201:2275":{"id":"0:201:2275","crate_id":0,"name":"dedup_by","span":{"filename":"src/lib.rs","begin":[1373,4],"end":[1402,5]},"visibility":"public","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["same_bucket",{"generic":"F"}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:3347:140","args":{"parenthesized":{"inputs":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}}],"output":{"primitive":"bool"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2610-0:104:2124":{"id":"b:1:2610-0:104:2124","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32015:2683","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2604:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:104:2124","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"const":{"type":{"primitive":"usize"},"expr":"N","value":null,"is_literal":false}}],"bindings":[]}}}},"items":["1:2612:2367"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:13125:16026":{"id":"1:13125:16026","crate_id":1,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2607-0:104:2124":{"id":"b:1:2607-0:104:2124","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32015:2683","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2601:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:104:2124","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"const":{"type":{"primitive":"usize"},"expr":"N","value":null,"is_literal":false}}],"bindings":[]}}}},"items":["1:2609:2008"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2884-0:56:2078":{"id":"b:1:2884-0:56:2078","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2857:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"SmallVec","id":"0:56:2078","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"const":{"type":{"primitive":"usize"},"expr":"N","value":null,"is_literal":false}}],"bindings":[]}}}},"items":["1:2886:817"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:90":{"id":"0:90","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[346,0],"end":[351,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"N","kind":{"const":{"type":{"primitive":"usize"},"default":null}}}],"where_predicates":[]},"provided_trait_methods":["len","is_empty"],"trait":{"name":"ExactSizeIterator","id":"1:8254:2091","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Drain","id":"0:68:2083","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"const":{"type":{"primitive":"usize"},"expr":"N","value":null,"is_literal":false}}],"bindings":[]}}}},"items":["0:94:981"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:167:2232":{"id":"0:167:2232","crate_id":0,"name":"reserve","span":{"filename":"src/lib.rs","begin":[1053,4],"end":[1064,5]},"visibility":"public","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["additional",{"primitive":"usize"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:80:172":{"id":"0:80:172","crate_id":0,"name":"Item","span":{"filename":"src/lib.rs","begin":[319,4],"end":[319,18]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"0:357":{"id":"0:357","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[2054,0],"end":[2059,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"N","kind":{"const":{"type":{"primitive":"usize"},"default":null}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"AsRef","id":"1:2848:77","args":{"angle_bracketed":{"args":[{"type":{"slice":{"generic":"T"}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"SmallVec","id":"0:56:2078","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"const":{"type":{"primitive":"usize"},"expr":"N","value":null,"is_literal":false}}],"bindings":[]}}}},"items":["0:360:335"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2890-0:378:2028":{"id":"b:1:2890-0:378:2028","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2864:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2860:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"CollectionAllocErr","id":"0:378:2028","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2893:136","1:2894:1786"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:13177:13648":{"id":"1:13177:13648","crate_id":1,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"1:52173:458","self::pattern":"1:12812:6717"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitInclusive","id":"1:12628:3270","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12818:4241","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13198:16048":{"id":"1:13198:16048","crate_id":1,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41580:193","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12818:4241","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12818:4241","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12833:6723","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13121":{"id":"1:13121","crate_id":1,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["1:13122:981","1:13123:2163","1:13124:16025","1:13125:16026","1:13127:16027","1:13130:16028","1:13131:16029","1:13132:334","1:13133:2097","1:13134:15467","1:13136:15468","1:13138:2358","1:13140:15469","1:13142:16030","1:13143:16031","1:13144:16032","1:13145:16033","1:13146:16034","1:13147:16035","1:13149:4257","1:13150:4413","1:13151:4070","1:13152:13682","1:13153:13674","1:13154:16037","1:13155:16038","1:13156:13655","1:13157:14222","1:13160:16039","1:13163:16040","1:13166:3102","1:13170:3070","1:13174:16041","1:13177:13648","1:13180:16042","1:13183:16043","1:13186:16044","1:13189:16045","1:13192:16046","1:13195:16047","1:13198:16048","1:13201:2555","1:13204:16049","1:13207:16050","1:13210:16051","1:13213:16052","1:13215:16053","1:13217:16054","1:13219:16055","1:13220:16056","1:13221:16057","1:13224:16058","1:13227:16059","1:13230:16060","1:13233:16061","1:13236:16062","1:13239:16063","1:13242:16064","1:13244:16065","1:13245:16066","1:13246:16067","1:13247:16068","1:13248:16069","1:13249:16070","1:13250:16071","1:13251:16072","1:13252:16073","1:13254:6612","1:13255:16074"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:13140:15469":{"id":"1:13140:15469","crate_id":1,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:10903:238","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:10903:238","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:41675:2868-0:104:2124":{"id":"a:1:41675:2868-0:104:2124","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"N","kind":{"const":{"type":{"primitive":"usize"},"default":null}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:41675:2868","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:41675:2868","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:104:2124","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"const":{"type":{"primitive":"usize"},"expr":"N","value":null,"is_literal":false}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:13134:15467":{"id":"1:13134:15467","crate_id":1,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"1:41582:190"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"1:41580:193","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:10903:238","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:10903:238","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:188:2270":{"id":"0:188:2270","crate_id":0,"name":"into_inner","span":{"filename":"src/lib.rs","begin":[1316,4],"end":[1330,5]},"visibility":"public","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Result","id":"1:41713:225","args":{"angle_bracketed":{"args":[{"type":{"array":{"type":{"generic":"T"},"len":"N"}}},{"type":{"generic":"Self"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13230:16060":{"id":"1:13230:16060","crate_id":1,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:52173:458","self::pattern":"1:12812:6717"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["suffix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41580:193","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12818:4241","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12818:4241","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12833:6723","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:2893:136":{"id":"1:2893:136","crate_id":1,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"1:2864:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}}},"b:1:2610-0:27:2041":{"id":"b:1:2610-0:27:2041","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32015:2683","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2604:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RawSmallVec","id":"0:27:2041","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"const":{"type":{"primitive":"usize"},"expr":"N","value":null,"is_literal":false}}],"bindings":[]}}}},"items":["1:2612:2367"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:13252:16073":{"id":"1:13252:16073","crate_id":1,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"1:4898:16073"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDebug","id":"1:43761:4330","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3719-0:27:2041":{"id":"b:1:3719-0:27:2041","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:32015:2683","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3717:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawSmallVec","id":"0:27:2041","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"const":{"type":{"primitive":"usize"},"expr":"N","value":null,"is_literal":false}}],"bindings":[]}}}},"items":["1:3721:1799"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:163:2235":{"id":"0:163:2235","crate_id":0,"name":"append","span":{"filename":"src/lib.rs","begin":[988,4],"end":[1004,5]},"visibility":"public","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"SmallVec","id":"0:56:2078","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"const":{"type":{"primitive":"usize"},"expr":"M","value":null,"is_literal":false}}],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"M","kind":{"const":{"type":{"primitive":"usize"},"default":null}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:275":{"id":"0:275","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1834,0],"end":[1841,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"N","kind":{"const":{"type":{"primitive":"usize"},"default":null}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"FromIterator","id":"1:8159:144","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"SmallVec","id":"0:56:2078","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"const":{"type":{"primitive":"usize"},"expr":"N","value":null,"is_literal":false}}],"bindings":[]}}}},"items":["0:278:820"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:32073:2684-0:68:2083":{"id":"a:1:32073:2684-0:68:2083","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"N","kind":{"const":{"type":{"primitive":"usize"},"default":null}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32073:2684","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Drain","id":"0:68:2083","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"const":{"type":{"primitive":"usize"},"expr":"N","value":null,"is_literal":false}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:13186:16044":{"id":"1:13186:16044","crate_id":1,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"1:12812:6717","str::split":"1:13174:16041","prim@char":"1:52173:458","str::split_terminator":"1:13183:16043"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitTerminator","id":"1:43530:4393","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12818:4241","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12818:4241","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12833:6723","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:349":{"id":"0:349","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[2040,0],"end":[2045,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"N","kind":{"const":{"type":{"primitive":"usize"},"default":null}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2601:102","args":{"angle_bracketed":{"args":[{"type":{"slice":{"generic":"T"}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"SmallVec","id":"0:56:2078","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"const":{"type":{"primitive":"usize"},"expr":"N","value":null,"is_literal":false}}],"bindings":[]}}}},"items":["0:352:2008"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2895-0:27:2041":{"id":"b:1:2895-0:27:2041","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2854:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2864:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RawSmallVec","id":"0:27:2041","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"const":{"type":{"primitive":"usize"},"expr":"N","value":null,"is_literal":false}}],"bindings":[]}}}},"items":["1:2898:136","1:2899:1784"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:65":{"id":"0:65","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[297,0],"end":[297,63]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:3103:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"N","kind":{"const":{"type":{"primitive":"usize"},"default":null}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:3103:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"SmallVec","id":"0:56:2078","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"const":{"type":{"primitive":"usize"},"expr":"N","value":null,"is_literal":false}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:13248:16069":{"id":"1:13248:16069","crate_id":1,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:343:469":{"id":"0:343:469","crate_id":0,"name":"cmp","span":{"filename":"src/lib.rs","begin":[2029,4],"end":[2031,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"SmallVec","id":"0:56:2078","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"const":{"type":{"primitive":"usize"},"expr":"N","value":null,"is_literal":false}}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"core::cmp::Ordering","id":"1:30832:195","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2880-0:56:2078":{"id":"b:1:2880-0:56:2078","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2857:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2854:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"SmallVec","id":"0:56:2078","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"const":{"type":{"primitive":"usize"},"expr":"N","value":null,"is_literal":false}}],"bindings":[]}}}},"items":["1:2883:3065"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:340":{"id":"0:340","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[2024,0],"end":[2032,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"N","kind":{"const":{"type":{"primitive":"usize"},"default":null}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Ord","id":"1:2693:194","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clamp","max","min"],"trait":{"name":"Ord","id":"1:2693:194","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"SmallVec","id":"0:56:2078","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"const":{"type":{"primitive":"usize"},"expr":"N","value":null,"is_literal":false}}],"bindings":[]}}}},"items":["0:343:469"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:326:940":{"id":"0:326:940","crate_id":0,"name":"into_iter","span":{"filename":"src/lib.rs","begin":[1998,4],"end":[2000,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"qualified_path":{"name":"IntoIter","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"1:8163:164","args":null}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:175:2251":{"id":"0:175:2251","crate_id":0,"name":"swap_remove","span":{"filename":"src/lib.rs","begin":[1165,4],"end":[1187,5]},"visibility":"public","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:222:2339":{"id":"0:222:2339","crate_id":0,"name":"from_elem","span":{"filename":"src/lib.rs","begin":[1611,4],"end":[1632,5]},"visibility":"public","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["elem",{"generic":"T"}],["n",{"primitive":"usize"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:32073:2684-0:104:2124":{"id":"a:1:32073:2684-0:104:2124","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"N","kind":{"const":{"type":{"primitive":"usize"},"default":null}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"1:32073:2684","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32073:2684","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:104:2124","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"const":{"type":{"primitive":"usize"},"expr":"N","value":null,"is_literal":false}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:13123:2163":{"id":"1:13123:2163","crate_id":1,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:84":{"id":"0:84","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[336,0],"end":[344,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[{"outlives":"'a"}],"default":null,"synthetic":false}}},{"name":"N","kind":{"const":{"type":{"primitive":"usize"},"default":null}}}],"where_predicates":[]},"provided_trait_methods":["rfold","advance_back_by","try_rfold","rfind","nth_back"],"trait":{"name":"DoubleEndedIterator","id":"1:8201:129","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Drain","id":"0:68:2083","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"const":{"type":{"primitive":"usize"},"expr":"N","value":null,"is_literal":false}}],"bindings":[]}}}},"items":["0:88:2090"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:13180:16042":{"id":"1:13180:16042","crate_id":1,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"1:12812:6717","`DoubleEndedIterator`":"1:8201:129","prim@char":"1:52173:458","str::split":"1:13174:16041"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplit","id":"1:43480:3257","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12818:4241","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12818:4241","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12833:6723","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"4:5856:1759":{"id":"4:5856:1759","crate_id":4,"name":"to_string","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"4:7632:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13247:16068":{"id":"1:13247:16068","crate_id":1,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:310:2124":{"id":"0:310:2124","crate_id":0,"name":"IntoIter","span":{"filename":"src/lib.rs","begin":[1969,4],"end":[1969,35]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"IntoIter","id":"0:104:2124","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"const":{"type":{"primitive":"usize"},"expr":"N","value":null,"is_literal":false}}],"bindings":[]}}}}}}},"a:1:41674:2869-0:27:2041":{"id":"a:1:41674:2869-0:27:2041","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"N","kind":{"const":{"type":{"primitive":"usize"},"default":null}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:41675:2868","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"UnwindSafe","id":"1:41674:2869","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:41674:2869","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawSmallVec","id":"0:27:2041","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"const":{"type":{"primitive":"usize"},"expr":"N","value":null,"is_literal":false}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:41674:2869-0:56:2078":{"id":"a:1:41674:2869-0:56:2078","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"N","kind":{"const":{"type":{"primitive":"usize"},"default":null}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"UnwindSafe","id":"1:41674:2869","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:41675:2868","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:41674:2869","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"SmallVec","id":"0:56:2078","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"const":{"type":{"primitive":"usize"},"expr":"N","value":null,"is_literal":false}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:356:2367":{"id":"0:356:2367","crate_id":0,"name":"borrow_mut","span":{"filename":"src/lib.rs","begin":[2049,4],"end":[2051,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"generic":"T"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:128:2090":{"id":"0:128:2090","crate_id":0,"name":"next_back","span":{"filename":"src/lib.rs","begin":[576,4],"end":[591,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41580:193","args":{"angle_bracketed":{"args":[{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"1:8309:177","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:262":{"id":"0:262","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1795,0],"end":[1817,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"N","kind":{"const":{"type":{"primitive":"usize"},"default":null}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Drop","id":"1:3340:2092","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:104:2124","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"const":{"type":{"primitive":"usize"},"expr":"N","value":null,"is_literal":false}}],"bindings":[]}}}},"items":["0:265:658"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:13133:2097":{"id":"1:13133:2097","crate_id":1,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:52190:1829"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"4:5608:16798":{"id":"4:5608:16798","crate_id":4,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"4:7632:242"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["count",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"4:7632:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12818:4241","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:312:940":{"id":"0:312:940","crate_id":0,"name":"into_iter","span":{"filename":"src/lib.rs","begin":[1971,4],"end":[1984,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"qualified_path":{"name":"IntoIter","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"1:8163:164","args":null}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13151:4070":{"id":"1:13151:4070","crate_id":1,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"1:43448:4331","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:150:2100":{"id":"0:150:2100","crate_id":0,"name":"set_len","span":{"filename":"src/lib.rs","begin":[752,4],"end":[756,5]},"visibility":"public","docs":"Sets the length of a vector.\n\nThis will explicitly set the size of the vector, without actually modifying its buffers, so\nit is up to the caller to ensure that the vector is actually the specified size.\n\n# Safety\n\n`new_len <= self.capacity()` must be true, and all the elements in the range `..self.len`\nmust be initialized.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["new_len",{"primitive":"usize"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:193:2273":{"id":"0:193:2273","crate_id":0,"name":"retain_mut","span":{"filename":"src/lib.rs","begin":[1351,4],"end":[1353,5]},"visibility":"public","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["f",{"generic":"F"}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:3347:140","args":{"parenthesized":{"inputs":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}}],"output":{"primitive":"bool"}}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:304:462":{"id":"0:304:462","crate_id":0,"name":"clone","span":{"filename":"src/lib.rs","begin":[1930,4],"end":[1932,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"IntoIter","id":"0:104:2124","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"const":{"type":{"primitive":"usize"},"expr":"N","value":null,"is_literal":false}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13147:16035":{"id":"1:13147:16035","crate_id":1,"name":"split_at_mut_checked","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that’s not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at_checked`] method.\n\n[`split_at_checked`]: str::split_at_checked\n\n# Examples\n\n```\n#![feature(split_at_checked)]\n\nlet mut s = \"Per Martin-Löf\".to_string();\nif let Some((first, last)) = s.split_at_mut_checked(3) {\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n\nassert_eq!(None, s.split_at_mut_checked(13));  // Inside “ö”\nassert_eq!(None, s.split_at_mut_checked(16));  // Beyond the string length\n```","links":{"str::split_at_checked":"1:13146:16034"},"attrs":["#[must_use]","#[unstable(feature = \"split_at_checked\", reason = \"new API\", issue =\n\"119128\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"1:41580:193","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2880-0:378:2028":{"id":"b:1:2880-0:378:2028","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2857:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2854:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"CollectionAllocErr","id":"0:378:2028","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2883:3065"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2607-0:68:2083":{"id":"b:1:2607-0:68:2083","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32015:2683","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2601:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Drain","id":"0:68:2083","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"const":{"type":{"primitive":"usize"},"expr":"N","value":null,"is_literal":false}}],"bindings":[]}}}},"items":["1:2609:2008"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:104:2124":{"id":"0:104:2124","crate_id":0,"name":"IntoIter","span":{"filename":"src/lib.rs","begin":[483,0],"end":[493,1]},"visibility":"public","docs":"An iterator that consumes a `SmallVec` and yields its items by value.\n\nReturned from [`SmallVec::into_iter`][1].\n\n[1]: struct.SmallVec.html#method.into_iter","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"N","kind":{"const":{"type":{"primitive":"usize"},"default":null}}}],"where_predicates":[]},"impls":["0:111","a:1:3103:246-0:104:2124","a:1:32014:236-0:104:2124","a:1:41675:2868-0:104:2124","a:1:41674:2869-0:104:2124","a:1:32073:2684-0:104:2124","a:1:3138:2680-0:104:2124","b:1:2895-0:104:2124","b:1:2884-0:104:2124","b:1:2610-0:104:2124","b:1:8167-0:104:2124","b:1:2607-0:104:2124","b:1:2880-0:104:2124","b:1:3719-0:104:2124","b:1:2890-0:104:2124","b:4:727-0:104:2124","0:132","0:262","0:129","0:369","0:301","0:125","0:119"]}}},"0:271":{"id":"0:271","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1827,0],"end":[1832,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"N","kind":{"const":{"type":{"primitive":"usize"},"default":null}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"DerefMut","id":"1:3324:2350","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"SmallVec","id":"0:56:2078","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"const":{"type":{"primitive":"usize"},"expr":"N","value":null,"is_literal":false}}],"bindings":[]}}}},"items":["0:274:619"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:218":{"id":"0:218","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1599,0],"end":[1633,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2623:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"N","kind":{"const":{"type":{"primitive":"usize"},"default":null}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"SmallVec","id":"0:56:2078","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"const":{"type":{"primitive":"usize"},"expr":"N","value":null,"is_literal":false}}],"bindings":[]}}}},"items":["0:221:2336","0:222:2339"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:216:2330":{"id":"0:216:2330","crate_id":0,"name":"insert_from_slice","span":{"filename":"src/lib.rs","begin":[1565,4],"end":[1582,5]},"visibility":"public","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}],["slice",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"generic":"T"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:300:464":{"id":"0:300:464","crate_id":0,"name":"clone_from","span":{"filename":"src/lib.rs","begin":[1911,4],"end":[1925,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["source",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:319:940":{"id":"0:319:940","crate_id":0,"name":"into_iter","span":{"filename":"src/lib.rs","begin":[1990,4],"end":[1992,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"qualified_path":{"name":"IntoIter","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"1:8163:164","args":null}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3719-0:68:2083":{"id":"b:1:3719-0:68:2083","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:32015:2683","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3717:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Drain","id":"0:68:2083","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"const":{"type":{"primitive":"usize"},"expr":"N","value":null,"is_literal":false}}],"bindings":[]}}}},"items":["1:3721:1799"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:292":{"id":"0:292","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1899,0],"end":[1903,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"N","kind":{"const":{"type":{"primitive":"usize"},"default":null}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2857:143","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Vec","id":"4:7048:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"SmallVec","id":"0:56:2078","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"const":{"type":{"primitive":"usize"},"expr":"N","value":null,"is_literal":false}}],"bindings":[]}}}},"items":["0:295:817"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:307":{"id":"0:307","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1968,0],"end":[1985,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"N","kind":{"const":{"type":{"primitive":"usize"},"default":null}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"1:8163:164","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"SmallVec","id":"0:56:2078","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"const":{"type":{"primitive":"usize"},"expr":"N","value":null,"is_literal":false}}],"bindings":[]}}}},"items":["0:310:2124","0:311:172","0:312:940"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:327":{"id":"0:327","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[2003,0],"end":[2011,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"N","kind":{"const":{"type":{"primitive":"usize"},"default":null}}},{"name":"M","kind":{"const":{"type":{"primitive":"usize"},"default":null}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"PartialEq","id":"1:2657:200","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"1:2657:200","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"SmallVec","id":"0:56:2078","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}},{"const":{"type":{"primitive":"usize"},"expr":"M","value":null,"is_literal":false}}],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"SmallVec","id":"0:56:2078","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"const":{"type":{"primitive":"usize"},"expr":"N","value":null,"is_literal":false}}],"bindings":[]}}}},"items":["0:332:685"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:4:727-0:104:2124":{"id":"b:4:727-0:104:2124","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2623:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"4:723:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:104:2124","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"const":{"type":{"primitive":"usize"},"expr":"N","value":null,"is_literal":false}}],"bindings":[]}}}},"items":["4:729:4024","4:730:12093","4:731:12094"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:280":{"id":"0:280","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1873,0],"end":[1877,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(feature = \"specialization\"))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2623:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"N","kind":{"const":{"type":{"primitive":"usize"},"default":null}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2857:143","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"slice":{"generic":"T"}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"SmallVec","id":"0:56:2078","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"const":{"type":{"primitive":"usize"},"expr":"N","value":null,"is_literal":false}}],"bindings":[]}}}},"items":["0:284:817"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:182:2266":{"id":"0:182:2266","crate_id":0,"name":"insert_many","span":{"filename":"src/lib.rs","begin":[1256,4],"end":[1258,5]},"visibility":"public","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}],["iterable",{"generic":"I"}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"1:8163:164","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"generic":"T"}}}}]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13233:16061":{"id":"1:13233:16061","crate_id":1,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:52173:458","self::pattern":"1:12812:6717"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12818:4241","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12818:4241","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12833:6723","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2880-0:104:2124":{"id":"b:1:2880-0:104:2124","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2857:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2854:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:104:2124","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"const":{"type":{"primitive":"usize"},"expr":"N","value":null,"is_literal":false}}],"bindings":[]}}}},"items":["1:2883:3065"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:41675:2868-0:27:2041":{"id":"a:1:41675:2868-0:27:2041","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"N","kind":{"const":{"type":{"primitive":"usize"},"default":null}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:41675:2868","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:41675:2868","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawSmallVec","id":"0:27:2041","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"const":{"type":{"primitive":"usize"},"expr":"N","value":null,"is_literal":false}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:217:2334":{"id":"0:217:2334","crate_id":0,"name":"extend_from_slice","span":{"filename":"src/lib.rs","begin":[1585,4],"end":[1596,5]},"visibility":"public","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["slice",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"generic":"T"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:3103:246-0:378:2028":{"id":"a:1:3103:246-0:378:2028","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:3103:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"CollectionAllocErr","id":"0:378:2028","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:4:5854-0:378:2028":{"id":"b:4:5854-0:378:2028","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"1:10249:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:32015:2683","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"ToString","id":"4:5852:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"CollectionAllocErr","id":"0:378:2028","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["4:5856:1759"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:41675:2868-0:68:2083":{"id":"a:1:41675:2868-0:68:2083","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"N","kind":{"const":{"type":{"primitive":"usize"},"default":null}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:41675:2868","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:41675:2868","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Drain","id":"0:68:2083","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"const":{"type":{"primitive":"usize"},"expr":"N","value":null,"is_literal":false}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:32014:236-0:68:2083":{"id":"a:1:32014:236-0:68:2083","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"N","kind":{"const":{"type":{"primitive":"usize"},"default":null}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:32014:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Drain","id":"0:68:2083","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"const":{"type":{"primitive":"usize"},"expr":"N","value":null,"is_literal":false}}],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"1:2894:1786":{"id":"1:2894:1786","crate_id":1,"name":"try_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Result","id":"1:41713:225","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"1:2864:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"4:5611:16799":{"id":"4:5611:16799","crate_id":4,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"4:7632:242"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"4:7632:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:4:727-0:56:2078":{"id":"b:4:727-0:56:2078","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2623:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"4:723:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"SmallVec","id":"0:56:2078","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"const":{"type":{"primitive":"usize"},"expr":"N","value":null,"is_literal":false}}],"bindings":[]}}}},"items":["4:729:4024","4:730:12093","4:731:12094"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2890-0:56:2078":{"id":"b:1:2890-0:56:2078","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2864:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2860:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"SmallVec","id":"0:56:2078","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"const":{"type":{"primitive":"usize"},"expr":"N","value":null,"is_literal":false}}],"bindings":[]}}}},"items":["1:2893:136","1:2894:1786"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:8167-0:68:2083":{"id":"b:1:8167-0:68:2083","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"1:8309:177","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"1:8163:164","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Drain","id":"0:68:2083","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"const":{"type":{"primitive":"usize"},"expr":"N","value":null,"is_literal":false}}],"bindings":[]}}}},"items":["1:8169:172","1:8170:2124","1:8171:940"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"I"}}}},"0:373":{"id":"0:373","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[2080,0],"end":[2084,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Debug","id":"1:10244:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"N","kind":{"const":{"type":{"primitive":"usize"},"default":null}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:10244:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Drain","id":"0:68:2083","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"const":{"type":{"primitive":"usize"},"expr":"N","value":null,"is_literal":false}}],"bindings":[]}}}},"items":["0:377:787"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:27:2041":{"id":"0:27:2041","crate_id":0,"name":"RawSmallVec","span":{"filename":"src/lib.rs","begin":[123,0],"end":[126,1]},"visibility":"public","docs":"Either a stack array with `length <= N` or a heap array\nwhose pointer and capacity are stored here.\n\nWe store a `NonNull<T>` instead of a `*mut T`, so that\nniche-optimization can be performed and the type is covariant\nwith respect to `T`.","links":{},"attrs":["#[repr(C)]"],"deprecation":null,"inner":{"union":{"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"N","kind":{"const":{"type":{"primitive":"usize"},"default":null}}}],"where_predicates":[]},"fields_stripped":true,"fields":[],"impls":["a:1:3103:246-0:27:2041","a:1:32014:236-0:27:2041","a:1:41675:2868-0:27:2041","a:1:41674:2869-0:27:2041","a:1:32073:2684-0:27:2041","a:1:3138:2680-0:27:2041","b:1:2895-0:27:2041","b:1:2884-0:27:2041","b:1:2610-0:27:2041","b:1:2607-0:27:2041","b:1:2880-0:27:2041","b:1:3719-0:27:2041","b:1:2890-0:27:2041"]}}},"0:171:2249":{"id":"0:171:2249","crate_id":0,"name":"shrink_to_fit","span":{"filename":"src/lib.rs","begin":[1107,4],"end":[1130,5]},"visibility":"public","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2895-0:56:2078":{"id":"b:1:2895-0:56:2078","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2854:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2864:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"SmallVec","id":"0:56:2078","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"const":{"type":{"primitive":"usize"},"expr":"N","value":null,"is_literal":false}}],"bindings":[]}}}},"items":["1:2898:136","1:2899:1784"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:0:2360":{"id":"0:0:2360","crate_id":0,"name":"smallvec","span":{"filename":"src/lib.rs","begin":[7,0],"end":[2166,1]},"visibility":"public","docs":"Small vectors in various sizes. These store a certain number of elements inline, and fall back\nto the heap for larger allocations.  This can be a useful optimization for improving cache\nlocality and reducing allocator traffic for workloads that fit within the inline buffer.\n\n## `no_std` support\n\nBy default, `smallvec` does not depend on `std`.  However, the optional\n`write` feature implements the `std::io::Write` trait for vectors of `u8`.\nWhen this feature is enabled, `smallvec` depends on `std`.\n\n## Optional features\n\n### `serde`\n\nWhen this optional dependency is enabled, `SmallVec` implements the `serde::Serialize` and\n`serde::Deserialize` traits.\n\n### `write`\n\nWhen this feature is enabled, `SmallVec<u8, _>` implements the `std::io::Write` trait.\nThis feature is not compatible with `#![no_std]` programs.\n\n### `extract_if`\n\n**This feature is unstable.** It may change to match the unstable `extract_if` method in libstd.\n\nEnables the `extract_if` method, which produces an iterator that calls a user-provided\nclosure to determine which elements of the vector to remove and yield from the iterator.\n\n### `specialization`\n\n**This feature is unstable and requires a nightly build of the Rust toolchain.**\n\nWhen this feature is enabled, `SmallVec::from(slice)` has improved performance for slices\nof `Copy` types.  (Without this feature, you can use `SmallVec::from_slice` to get optimal\nperformance for `Copy` types.)\n\nTracking issue: [rust-lang/rust#31844](https://github.com/rust-lang/rust/issues/31844)\n\n### `may_dangle`\n\n**This feature is unstable and requires a nightly build of the Rust toolchain.**\n\nThis feature makes the Rust compiler less strict about use of vectors that contain borrowed\nreferences. For details, see the\n[Rustonomicon](https://doc.rust-lang.org/1.42.0/nomicon/dropck.html#an-escape-hatch).\n\nTracking issue: [rust-lang/rust#34761](https://github.com/rust-lang/rust/issues/34761)","links":{},"attrs":["#![no_std]"],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:378:2028","0:27:2041","0:56:2078","0:68:2083","0:104:2124","0:305:2360","0:306:2363"],"is_stripped":false}}},"1:13236:16062":{"id":"1:13236:16062","crate_id":1,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:52173:458","self::pattern":"1:12812:6717"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12818:4241","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:41674:2869-0:378:2028":{"id":"a:1:41674:2869-0:378:2028","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:41674:2869","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"CollectionAllocErr","id":"0:378:2028","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:336":{"id":"0:336","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[2014,0],"end":[2022,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"N","kind":{"const":{"type":{"primitive":"usize"},"default":null}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"PartialOrd","id":"1:2699:201","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["lt","le","ge","gt"],"trait":{"name":"PartialOrd","id":"1:2699:201","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"SmallVec","id":"0:56:2078","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"const":{"type":{"primitive":"usize"},"expr":"N","value":null,"is_literal":false}}],"bindings":[]}}}},"items":["0:339:1278"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:305:2360":{"id":"0:305:2360","crate_id":0,"name":"smallvec","span":{"filename":"src/lib.rs","begin":[1936,0],"end":[1953,1]},"visibility":"public","docs":null,"links":{},"attrs":["#[macro_export]"],"deprecation":null,"inner":{"macro":"macro_rules! smallvec {\n    (@one $x:expr) => { ... };\n    ($elem:expr; $n:expr) => { ... };\n    ($($x:expr),*$(,)?) => { ... };\n}"}},"1:13124:16025":{"id":"1:13124:16025","crate_id":1,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:352:2008":{"id":"0:352:2008","crate_id":0,"name":"borrow","span":{"filename":"src/lib.rs","begin":[2042,4],"end":[2044,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"generic":"T"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13217:16054":{"id":"1:13217:16054","crate_id":1,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13153:13674":{"id":"1:13153:13674","crate_id":1,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"1:13152:13682"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitAsciiWhitespace","id":"1:43745:4401","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13144:16032":{"id":"1:13144:16032","crate_id":1,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_checked`](str::split_at_checked).\n\n# Examples\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_checked":"1:13146:16034","str::split_at_mut":"1:13145:16033"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:140:2128":{"id":"0:140:2128","crate_id":0,"name":"with_capacity","span":{"filename":"src/lib.rs","begin":[612,4],"end":[618,5]},"visibility":"public","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["capacity",{"primitive":"usize"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:379:2030":{"id":"0:379:2030","crate_id":0,"name":"CapacityOverflow","span":{"filename":"src/lib.rs","begin":[103,4],"end":[103,20]},"visibility":"default","docs":"Overflow `usize::MAX` or other error during size computation","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"0:333":{"id":"0:333","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[2012,0],"end":[2012,60]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"N","kind":{"const":{"type":{"primitive":"usize"},"default":null}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Eq","id":"1:2662:133","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"1:2662:133","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"SmallVec","id":"0:56:2078","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"const":{"type":{"primitive":"usize"},"expr":"N","value":null,"is_literal":false}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:339:1278":{"id":"0:339:1278","crate_id":0,"name":"partial_cmp","span":{"filename":"src/lib.rs","begin":[2019,4],"end":[2021,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"SmallVec","id":"0:56:2078","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"const":{"type":{"primitive":"usize"},"expr":"N","value":null,"is_literal":false}}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41580:193","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"core::cmp::Ordering","id":"1:30832:195","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:317:2124":{"id":"0:317:2124","crate_id":0,"name":"IntoIter","span":{"filename":"src/lib.rs","begin":[1988,4],"end":[1988,45]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Iter","id":"1:11048:2087","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}}}}},"0:174:2127":{"id":"0:174:2127","crate_id":0,"name":"as_mut_slice","span":{"filename":"src/lib.rs","begin":[1157,4],"end":[1162,5]},"visibility":"public","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"generic":"T"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:156:2180":{"id":"0:156:2180","crate_id":0,"name":"split_off","span":{"filename":"src/lib.rs","begin":[818,4],"end":[833,5]},"visibility":"public","docs":"Splits the collection into two at the given index.\n\nReturns a newly allocated vector containing the elements in the range\n`[at, len)`. After the call, the original vector will be left containing\nthe elements `[0, at)` with its previous capacity unchanged.\n\n- If you want to take ownership of the entire contents and capacity of\n  the vector, see [`mem::take`] or [`mem::replace`].\n- If you don't need the returned vector at all, see [`SmallVec::truncate`].\n- If you want to take ownership of an arbitrary subslice, or you don't\n  necessarily want to store the removed items in a vector, see [`SmallVec::drain`].\n\n# Panics\n\nPanics if `at > len`.\n\n# Examples\n\n```\nlet mut vec = vec![1, 2, 3];\nlet vec2 = vec.split_off(1);\nassert_eq!(vec, [1]);\nassert_eq!(vec2, [2, 3]);\n```","links":{"`SmallVec::truncate`":"0:172:2250","`SmallVec::drain`":"0:157:2183"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["at",{"primitive":"usize"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:278:820":{"id":"0:278:820","crate_id":0,"name":"from_iter","span":{"filename":"src/lib.rs","begin":[1836,4],"end":[1840,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["iterable",{"generic":"I"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"1:8163:164","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"generic":"T"}}}}]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13166:3102":{"id":"1:13166:3102","crate_id":1,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"1:41582:190","prim@char":"1:52173:458","self::pattern":"1:12812:6717"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41580:193","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12818:4241","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"4:5604:16797":{"id":"4:5604:16797","crate_id":4,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"4:295:2007","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"4:295:2007","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:313":{"id":"0:313","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1987,0],"end":[1993,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"N","kind":{"const":{"type":{"primitive":"usize"},"default":null}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"1:8163:164","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"resolved_path":{"name":"SmallVec","id":"0:56:2078","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"const":{"type":{"primitive":"usize"},"expr":"N","value":null,"is_literal":false}}],"bindings":[]}}}}}},"items":["0:317:2124","0:318:172","0:319:940"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:135":{"id":"0:135","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[596,0],"end":[1532,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"N","kind":{"const":{"type":{"primitive":"usize"},"default":null}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"SmallVec","id":"0:56:2078","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"const":{"type":{"primitive":"usize"},"expr":"N","value":null,"is_literal":false}}],"bindings":[]}}}},"items":["0:139:1161","0:140:2128","0:141:2132","0:142:2134","0:144:2136","0:146:2150","0:150:2100","0:151:2130","0:152:981","0:153:2163","0:154:2051","0:155:2164","0:156:2180","0:157:2183","0:160:2231","0:162:2234","0:163:2235","0:165:2131","0:166:2238","0:167:2232","0:168:2246","0:169:2247","0:170:2248","0:171:2249","0:172:2250","0:173:2115","0:174:2127","0:175:2251","0:176:2256","0:177:2257","0:178:2258","0:182:2266","0:184:334","0:185:2097","0:186:2268","0:187:2269","0:188:2270","0:191:2271","0:193:2273","0:195:2274","0:197:2278","0:201:2275","0:203:2287","0:205:2126"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:13130:16028":{"id":"1:13130:16028","crate_id":1,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"1:12360:6725"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:119":{"id":"0:119","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[549,0],"end":[572,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"N","kind":{"const":{"type":{"primitive":"usize"},"default":null}}}],"where_predicates":[]},"provided_trait_methods":["is_sorted","array_chunks","min_by_key","find_map","try_fold","fuse","by_ref","gt","map_while","intersperse","ge","next_chunk","skip","all","cloned","sum","is_sorted_by","min_by","try_find","try_for_each","try_collect","map","scan","intersperse_with","any","advance_by","max","collect","is_sorted_by_key","for_each","product","rev","eq","position","fold","collect_into","flat_map","last","filter_map","nth","min","count","ne","cmp_by","__iterator_get_unchecked","unzip","take","rposition","reduce","enumerate","partition","flatten","peekable","step_by","partial_cmp","partial_cmp_by","size_hint","copied","max_by_key","try_reduce","partition_in_place","le","map_windows","skip_while","chain","lt","filter","eq_by","cycle","max_by","find","is_partitioned","cmp","inspect","take_while","zip"],"trait":{"name":"Iterator","id":"1:8309:177","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:104:2124","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"const":{"type":{"primitive":"usize"},"expr":"N","value":null,"is_literal":false}}],"bindings":[]}}}},"items":["0:122:172","0:123:1175","0:124:2089"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2607-0:27:2041":{"id":"b:1:2607-0:27:2041","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32015:2683","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2601:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RawSmallVec","id":"0:27:2041","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"const":{"type":{"primitive":"usize"},"expr":"N","value":null,"is_literal":false}}],"bindings":[]}}}},"items":["1:2609:2008"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:26:787":{"id":"0:26:787","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[111,4],"end":[113,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"core::fmt::Formatter","id":"1:10218:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"core::fmt::Result","id":"1:10199:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2895-0:378:2028":{"id":"b:1:2895-0:378:2028","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2854:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2864:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"CollectionAllocErr","id":"0:378:2028","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2898:136","1:2899:1784"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:13127:16027":{"id":"1:13127:16027","crate_id":1,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nIf `index` is greater than the length of the string, this returns the length of the string.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"1:13125:16026"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:83:2089":{"id":"0:83:2089","crate_id":0,"name":"size_hint","span":{"filename":"src/lib.rs","begin":[331,4],"end":[333,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"tuple":[{"primitive":"usize"},{"resolved_path":{"name":"Option","id":"1:41580:193","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13221:16057":{"id":"1:13221:16057","crate_id":1,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"1:52173:458","self::pattern":"1:12812:6717"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12818:4241","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12818:4241","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"1:12838:6722","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13242:16064":{"id":"1:13242:16064","crate_id":1,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"1:12773:135","`FromStr`":"1:12772:6437"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"1:41713:225","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"FromStr","id":"1:12772:6437","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"1:12772:6437","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:132":{"id":"0:132","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[594,0],"end":[594,71]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"N","kind":{"const":{"type":{"primitive":"usize"},"default":null}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"FusedIterator","id":"1:8618:148","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:104:2124","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"const":{"type":{"primitive":"usize"},"expr":"N","value":null,"is_literal":false}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:32014:236-0:378:2028":{"id":"a:1:32014:236-0:378:2028","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:32014:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"CollectionAllocErr","id":"0:378:2028","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:3103:246-0:27:2041":{"id":"a:1:3103:246-0:27:2041","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"N","kind":{"const":{"type":{"primitive":"usize"},"default":null}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:3103:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawSmallVec","id":"0:27:2041","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"const":{"type":{"primitive":"usize"},"expr":"N","value":null,"is_literal":false}}],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"0:195:2274":{"id":"0:195:2274","crate_id":0,"name":"dedup","span":{"filename":"src/lib.rs","begin":[1356,4],"end":[1361,5]},"visibility":"public","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"PartialEq","id":"1:2657:200","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:384:787":{"id":"0:384:787","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[100,9],"end":[100,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"1:10218:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"1:10199:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:382:2034":{"id":"0:382:2034","crate_id":0,"name":"layout","span":{"filename":"src/lib.rs","begin":[107,8],"end":[107,22]},"visibility":"default","docs":"The layout that was passed to the allocator","links":{},"attrs":[],"deprecation":null,"inner":{"struct_field":{"resolved_path":{"name":"alloc::alloc::Layout","id":"1:44473:179","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"0:25":{"id":"0:25","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[110,0],"end":[114,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Display","id":"1:10249:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"CollectionAllocErr","id":"0:378:2028","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:26:787"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:141:2132":{"id":"0:141:2132","crate_id":0,"name":"from_vec","span":{"filename":"src/lib.rs","begin":[621,4],"end":[656,5]},"visibility":"public","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["vec",{"resolved_path":{"name":"Vec","id":"4:7048:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13245:16066":{"id":"1:13245:16066","crate_id":1,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"1:39501:6594","Self::is_ascii":"1:13244:16065"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41580:193","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"AsciiChar","id":"1:39501:6594","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:172:2250":{"id":"0:172:2250","crate_id":0,"name":"truncate","span":{"filename":"src/lib.rs","begin":[1133,4],"end":[1146,5]},"visibility":"public","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["len",{"primitive":"usize"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:301":{"id":"0:301","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1928,0],"end":[1933,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2623:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"N","kind":{"const":{"type":{"primitive":"usize"},"default":null}}}],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2623:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:104:2124","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"const":{"type":{"primitive":"usize"},"expr":"N","value":null,"is_literal":false}}],"bindings":[]}}}},"items":["0:304:462"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:8167-0:104:2124":{"id":"b:1:8167-0:104:2124","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"1:8309:177","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"1:8163:164","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:104:2124","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"const":{"type":{"primitive":"usize"},"expr":"N","value":null,"is_literal":false}}],"bindings":[]}}}},"items":["1:8169:172","1:8170:2124","1:8171:940"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"I"}}}},"a:1:41674:2869-0:104:2124":{"id":"a:1:41674:2869-0:104:2124","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"N","kind":{"const":{"type":{"primitive":"usize"},"default":null}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"UnwindSafe","id":"1:41674:2869","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:41675:2868","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:41674:2869","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:104:2124","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"const":{"type":{"primitive":"usize"},"expr":"N","value":null,"is_literal":false}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:41675:2868-0:378:2028":{"id":"a:1:41675:2868-0:378:2028","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:41675:2868","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"CollectionAllocErr","id":"0:378:2028","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2884-0:378:2028":{"id":"b:1:2884-0:378:2028","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2857:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"CollectionAllocErr","id":"0:378:2028","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2886:817"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:13163:16040":{"id":"1:13163:16040","crate_id":1,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"1:52173:458","self::pattern":"1:12812:6717"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12818:4241","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12818:4241","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12833:6723","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13244:16065":{"id":"1:13244:16065","crate_id":1,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13154:16037":{"id":"1:13154:16037","crate_id":1,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nNote that any carriage return (`\\r`) not immediately followed by a\nline feed (`\\n`) does not split a line. These carriage returns are\nthereby included in the produced lines.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\r\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\n// Trailing carriage return is included in the last line\nassert_eq!(Some(\"baz\\r\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line does not require any ending:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Lines","id":"1:43716:4398","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:3103:246-0:104:2124":{"id":"a:1:3103:246-0:104:2124","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"N","kind":{"const":{"type":{"primitive":"usize"},"default":null}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:3103:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:104:2124","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"const":{"type":{"primitive":"usize"},"expr":"N","value":null,"is_literal":false}}],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"1:2886:817":{"id":"1:2886:817","crate_id":1,"name":"from","span":null,"visibility":"default","docs":"Returns the argument unchanged.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["t",{"generic":"T"}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:168:2246":{"id":"0:168:2246","crate_id":0,"name":"try_reserve","span":{"filename":"src/lib.rs","begin":[1067,4],"end":[1078,5]},"visibility":"public","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["additional",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Result","id":"1:41713:225","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}},{"type":{"resolved_path":{"name":"CollectionAllocErr","id":"0:378:2028","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:144:2136":{"id":"0:144:2136","crate_id":0,"name":"from_buf_and_len","span":{"filename":"src/lib.rs","begin":[669,4],"end":[691,5]},"visibility":"public","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["buf",{"array":{"type":{"generic":"T"},"len":"N"}}],["len",{"primitive":"usize"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13250:16071":{"id":"1:13250:16071","crate_id":1,"name":"trim_ascii_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\"\\r hello world\\u{3000}\\n \".trim_ascii_end(), \"\\r hello world\\u{3000}\");\nassert_eq!(\"  \".trim_ascii_end(), \"\");\nassert_eq!(\"\".trim_ascii_end(), \"\");\n```","links":{"u8::is_ascii_whitespace":"1:974:22261"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13201:2555":{"id":"1:13201:2555","crate_id":1,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::rmatches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"1:12812:6717","`DoubleEndedIterator`":"1:8201:129","prim@char":"1:52173:458","str::rmatches":"1:13204:16049"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Matches","id":"1:43666:4396","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12818:4241","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:123:1175":{"id":"0:123:1175","crate_id":0,"name":"next","span":{"filename":"src/lib.rs","begin":[553,4],"end":[565,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41580:193","args":{"angle_bracketed":{"args":[{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"1:8309:177","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:124:2089":{"id":"0:124:2089","crate_id":0,"name":"size_hint","span":{"filename":"src/lib.rs","begin":[568,4],"end":[571,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"tuple":[{"primitive":"usize"},{"resolved_path":{"name":"Option","id":"1:41580:193","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13174:16041":{"id":"1:13174:16041","crate_id":1,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"1:12812:6717","`DoubleEndedIterator`":"1:8201:129","prim@char":"1:52173:458","str::split_whitespace":"1:13152:13682","str::rsplit":"1:13180:16042"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Split","id":"1:43462:3253","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12818:4241","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:166:2238":{"id":"0:166:2238","crate_id":0,"name":"try_grow","span":{"filename":"src/lib.rs","begin":[1012,4],"end":[1050,5]},"visibility":"public","docs":null,"links":{},"attrs":["#[cold]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["new_capacity",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Result","id":"1:41713:225","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}},{"type":{"resolved_path":{"name":"CollectionAllocErr","id":"0:378:2028","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:56:2078":{"id":"0:56:2078","crate_id":0,"name":"SmallVec","span":{"filename":"src/lib.rs","begin":[290,0],"end":[294,1]},"visibility":"public","docs":null,"links":{},"attrs":["#[repr(C)]"],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"N","kind":{"const":{"type":{"primitive":"usize"},"default":null}}}],"where_predicates":[]},"impls":["0:135","0:212","0:218","a:1:41675:2868-0:56:2078","a:1:41674:2869-0:56:2078","a:1:32073:2684-0:56:2078","a:1:3138:2680-0:56:2078","b:1:2895-0:56:2078","b:1:2884-0:56:2078","b:1:2610-0:56:2078","b:1:2607-0:56:2078","b:1:2880-0:56:2078","b:1:3719-0:56:2078","b:1:2890-0:56:2078","b:4:727-0:56:2078","0:258","0:333","0:307","0:357","0:296","0:292","0:247","0:271","0:340","0:336","0:327","0:313","0:275","0:365","0:353","0:62","0:65","0:349","0:320","0:285","0:361","0:208","0:280","0:344","0:266"]}}},"0:129":{"id":"0:129","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[593,0],"end":[593,63]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"N","kind":{"const":{"type":{"primitive":"usize"},"default":null}}}],"where_predicates":[]},"provided_trait_methods":["len","is_empty"],"trait":{"name":"ExactSizeIterator","id":"1:8254:2091","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:104:2124","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"const":{"type":{"primitive":"usize"},"expr":"N","value":null,"is_literal":false}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:13183:16043":{"id":"1:13183:16043","crate_id":1,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"1:12812:6717","str::split":"1:13174:16041","prim@char":"1:52173:458","`DoubleEndedIterator`":"1:8201:129","str::rsplit_terminator":"1:13186:16044"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitTerminator","id":"1:43512:4392","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12818:4241","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13195:16047":{"id":"1:13195:16047","crate_id":1,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41580:193","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12818:4241","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:381:2032":{"id":"0:381:2032","crate_id":0,"name":"AllocErr","span":{"filename":"src/lib.rs","begin":[105,4],"end":[108,5]},"visibility":"default","docs":"The allocator return an error","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":{"struct":{"fields":["0:382:2034"],"fields_stripped":false}},"discriminant":null}}},"0:95":{"id":"0:95","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[353,0],"end":[353,76]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"N","kind":{"const":{"type":{"primitive":"usize"},"default":null}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"FusedIterator","id":"1:8618:148","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Drain","id":"0:68:2083","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"const":{"type":{"primitive":"usize"},"expr":"N","value":null,"is_literal":false}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:153:2163":{"id":"0:153:2163","crate_id":0,"name":"is_empty","span":{"filename":"src/lib.rs","begin":[774,4],"end":[776,5]},"visibility":"public","docs":null,"links":{},"attrs":["#[must_use]","#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2890-0:104:2124":{"id":"b:1:2890-0:104:2124","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2864:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2860:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:104:2124","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"const":{"type":{"primitive":"usize"},"expr":"N","value":null,"is_literal":false}}],"bindings":[]}}}},"items":["1:2893:136","1:2894:1786"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:2899:1784":{"id":"1:2899:1784","crate_id":1,"name":"try_from","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["value",{"generic":"U"}]],"output":{"resolved_path":{"name":"Result","id":"1:41713:225","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"T"},"trait":{"name":"TryFrom","id":"1:2864:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:162:2234":{"id":"0:162:2234","crate_id":0,"name":"pop","span":{"filename":"src/lib.rs","begin":[973,4],"end":[985,5]},"visibility":"public","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41580:193","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13189:16045":{"id":"1:13189:16045","crate_id":1,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"1:52173:458","self::pattern":"1:12812:6717","str::rsplitn":"1:13192:16046"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitN","id":"1:43566:3255","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12818:4241","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:361":{"id":"0:361","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[2061,0],"end":[2066,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"N","kind":{"const":{"type":{"primitive":"usize"},"default":null}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"AsMut","id":"1:2851:76","args":{"angle_bracketed":{"args":[{"type":{"slice":{"generic":"T"}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"SmallVec","id":"0:56:2078","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"const":{"type":{"primitive":"usize"},"expr":"N","value":null,"is_literal":false}}],"bindings":[]}}}},"items":["0:364:2095"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:81:1175":{"id":"0:81:1175","crate_id":0,"name":"next","span":{"filename":"src/lib.rs","begin":[322,4],"end":[328,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41580:193","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:203:2287":{"id":"0:203:2287","crate_id":0,"name":"resize_with","span":{"filename":"src/lib.rs","begin":[1404,4],"end":[1419,5]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["new_len",{"primitive":"usize"}],["f",{"generic":"F"}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:3347:140","args":{"parenthesized":{"inputs":[],"output":{"generic":"T"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:32073:2684-0:27:2041":{"id":"a:1:32073:2684-0:27:2041","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"N","kind":{"const":{"type":{"primitive":"usize"},"default":null}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"1:32073:2684","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32073:2684","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawSmallVec","id":"0:27:2041","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"const":{"type":{"primitive":"usize"},"expr":"N","value":null,"is_literal":false}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:250:2261":{"id":"0:250:2261","crate_id":0,"name":"extend","span":{"filename":"src/lib.rs","begin":[1723,4],"end":[1725,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["iterable",{"generic":"I"}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"1:8163:164","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"generic":"T"}}}}]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:290:817":{"id":"0:290:817","crate_id":0,"name":"from","span":{"filename":"src/lib.rs","begin":[1880,4],"end":[1897,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["array",{"array":{"type":{"generic":"T"},"len":"M"}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2884-0:27:2041":{"id":"b:1:2884-0:27:2041","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2857:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RawSmallVec","id":"0:27:2041","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"const":{"type":{"primitive":"usize"},"expr":"N","value":null,"is_literal":false}}],"bindings":[]}}}},"items":["1:2886:817"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:13160:16039":{"id":"1:13160:16039","crate_id":1,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, in which case this function will return true if\nthe `&str` is a prefix of this string slice.\n\nThe [pattern] can also be a [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\nThese will only be checked against the first character of this string slice.\nLook at the second example below regarding behavior for slices of [`char`]s.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```\n\n```\nlet bananas = \"bananas\";\n\n// Note that both of these assert successfully.\nassert!(bananas.starts_with(&['b', 'a', 'n', 'a']));\nassert!(bananas.starts_with(&['a', 'b', 'c', 'd']));\n```","links":{"prim@char":"1:52173:458","self::pattern":"1:12812:6717"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12818:4241","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13255:16074":{"id":"1:13255:16074","crate_id":1,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"1:4896:16074"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeUnicode","id":"1:43779:4329","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:32073:2684-0:378:2028":{"id":"a:1:32073:2684-0:378:2028","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32073:2684","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"CollectionAllocErr","id":"0:378:2028","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:261:658":{"id":"0:261:658","crate_id":0,"name":"drop","span":{"filename":"src/lib.rs","begin":[1774,4],"end":[1792,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:265:658":{"id":"0:265:658","crate_id":0,"name":"drop","span":{"filename":"src/lib.rs","begin":[1796,4],"end":[1816,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:372:787":{"id":"0:372:787","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[2075,4],"end":[2077,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"core::fmt::Formatter","id":"1:10218:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"core::fmt::Result","id":"1:10199:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13224:16058":{"id":"1:13224:16058","crate_id":1,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:52173:458","self::pattern":"1:12812:6717"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12818:4241","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:344":{"id":"0:344","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[2034,0],"end":[2038,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Hash","id":"1:10460:152","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"N","kind":{"const":{"type":{"primitive":"usize"},"default":null}}}],"where_predicates":[]},"provided_trait_methods":["hash_slice"],"trait":{"name":"Hash","id":"1:10460:152","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"SmallVec","id":"0:56:2078","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"const":{"type":{"primitive":"usize"},"expr":"N","value":null,"is_literal":false}}],"bindings":[]}}}},"items":["0:347:857"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:62":{"id":"0:62","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[296,0],"end":[296,63]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:32014:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"N","kind":{"const":{"type":{"primitive":"usize"},"default":null}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:32014:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"SmallVec","id":"0:56:2078","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"const":{"type":{"primitive":"usize"},"expr":"N","value":null,"is_literal":false}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:94:981":{"id":"0:94:981","crate_id":0,"name":"len","span":{"filename":"src/lib.rs","begin":[348,4],"end":[350,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:152:981":{"id":"0:152:981","crate_id":0,"name":"len","span":{"filename":"src/lib.rs","begin":[768,4],"end":[770,5]},"visibility":"public","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13149:4257":{"id":"1:13149:4257","crate_id":1,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:52173:458"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chars","id":"1:43432:4249","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2607-0:56:2078":{"id":"b:1:2607-0:56:2078","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32015:2683","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2601:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"SmallVec","id":"0:56:2078","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"const":{"type":{"primitive":"usize"},"expr":"N","value":null,"is_literal":false}}],"bindings":[]}}}},"items":["1:2609:2008"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:8170:2124":{"id":"1:8170:2124","crate_id":1,"name":"IntoIter","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"I"}}}},"0:383":{"id":"0:383","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[100,9],"end":[100,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:10244:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"CollectionAllocErr","id":"0:378:2028","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:384:787"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:32014:236-0:27:2041":{"id":"a:1:32014:236-0:27:2041","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"N","kind":{"const":{"type":{"primitive":"usize"},"default":null}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:32014:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawSmallVec","id":"0:27:2041","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"const":{"type":{"primitive":"usize"},"expr":"N","value":null,"is_literal":false}}],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"0:142:2134":{"id":"0:142:2134","crate_id":0,"name":"from_buf","span":{"filename":"src/lib.rs","begin":[659,4],"end":[666,5]},"visibility":"public","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["buf",{"array":{"type":{"generic":"T"},"len":"N"}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:274:619":{"id":"0:274:619","crate_id":0,"name":"deref_mut","span":{"filename":"src/lib.rs","begin":[1829,4],"end":[1831,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Target","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"1:3311:124","args":null}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:258":{"id":"0:258","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1773,0],"end":[1793,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(feature = \"may_dangle\"))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"N","kind":{"const":{"type":{"primitive":"usize"},"default":null}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Drop","id":"1:3340:2092","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"SmallVec","id":"0:56:2078","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"const":{"type":{"primitive":"usize"},"expr":"N","value":null,"is_literal":false}}],"bindings":[]}}}},"items":["0:261:658"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:13204:16049":{"id":"1:13204:16049","crate_id":1,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"1:12812:6717","`DoubleEndedIterator`":"1:8201:129","prim@char":"1:52173:458","str::matches":"1:13201:2555"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatches","id":"1:43684:4397","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12818:4241","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12818:4241","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12833:6723","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:165:2131":{"id":"0:165:2131","crate_id":0,"name":"grow","span":{"filename":"src/lib.rs","begin":[1007,4],"end":[1009,5]},"visibility":"public","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["new_capacity",{"primitive":"usize"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:266":{"id":"0:266","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1819,0],"end":[1826,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"N","kind":{"const":{"type":{"primitive":"usize"},"default":null}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Deref","id":"1:3311:124","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"SmallVec","id":"0:56:2078","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"const":{"type":{"primitive":"usize"},"expr":"N","value":null,"is_literal":false}}],"bindings":[]}}}},"items":["0:269:248","0:270:617"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:13131:16029":{"id":"1:13131:16029","crate_id":1,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"1:13122:981":{"id":"1:13122:981","crate_id":1,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"1:52173:458"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13145:16033":{"id":"1:13145:16033","crate_id":1,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_mut_checked`](str::split_at_mut_checked).\n\n# Examples\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"1:13144:16032","str::split_at_mut_checked":"1:13147:16035"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:184:334":{"id":"0:184:334","crate_id":0,"name":"as_ptr","span":{"filename":"src/lib.rs","begin":[1261,4],"end":[1268,5]},"visibility":"public","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:170:2248":{"id":"0:170:2248","crate_id":0,"name":"try_reserve_exact","span":{"filename":"src/lib.rs","begin":[1094,4],"end":[1104,5]},"visibility":"public","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["additional",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Result","id":"1:41713:225","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}},{"type":{"resolved_path":{"name":"CollectionAllocErr","id":"0:378:2028","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13155:16038":{"id":"1:13155:16038","crate_id":1,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\", suggestion =\n\"lines\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinesAny","id":"1:43726:4399","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13157:14222":{"id":"1:13157:14222","crate_id":1,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"1:52173:458","self::pattern":"1:12812:6717"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12818:4241","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13210:16051":{"id":"1:13210:16051","crate_id":1,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"1:12812:6717","`DoubleEndedIterator`":"1:8201:129","prim@char":"1:52173:458","str::match_indices":"1:13207:16050"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatchIndices","id":"1:43630:4395","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12818:4241","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12818:4241","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12833:6723","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:285":{"id":"0:285","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1879,0],"end":[1898,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"N","kind":{"const":{"type":{"primitive":"usize"},"default":null}}},{"name":"M","kind":{"const":{"type":{"primitive":"usize"},"default":null}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2857:143","args":{"angle_bracketed":{"args":[{"type":{"array":{"type":{"generic":"T"},"len":"M"}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"SmallVec","id":"0:56:2078","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"const":{"type":{"primitive":"usize"},"expr":"N","value":null,"is_literal":false}}],"bindings":[]}}}},"items":["0:290:817"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:8171:940":{"id":"1:8171:940","crate_id":1,"name":"into_iter","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"I"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:191:2271":{"id":"0:191:2271","crate_id":0,"name":"retain","span":{"filename":"src/lib.rs","begin":[1332,4],"end":[1348,5]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["f",{"generic":"F"}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:3347:140","args":{"parenthesized":{"inputs":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}}],"output":{"primitive":"bool"}}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:118:2127":{"id":"0:118:2127","crate_id":0,"name":"as_mut_slice","span":{"filename":"src/lib.rs","begin":[537,4],"end":[546,5]},"visibility":"public","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"generic":"T"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13132:334":{"id":"1:13132:334","crate_id":1,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"1:13133:2097","`u8`":"1:52190:1829"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13143:16031":{"id":"1:13143:16031","crate_id":1,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"1:52179:1700","crate::ops::IndexMut":"1:3379:2625","str::slice_unchecked":"1:13142:16030"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2880-0:68:2083":{"id":"b:1:2880-0:68:2083","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2857:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2854:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Drain","id":"0:68:2083","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"const":{"type":{"primitive":"usize"},"expr":"N","value":null,"is_literal":false}}],"bindings":[]}}}},"items":["1:2883:3065"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:41675:2868-0:56:2078":{"id":"a:1:41675:2868-0:56:2078","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"N","kind":{"const":{"type":{"primitive":"usize"},"default":null}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:41675:2868","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:41675:2868","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"SmallVec","id":"0:56:2078","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"const":{"type":{"primitive":"usize"},"expr":"N","value":null,"is_literal":false}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"4:5622:16802":{"id":"4:5622:16802","crate_id":4,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"1:13247:16068"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"4:7632:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:306:2363":{"id":"0:306:2363","crate_id":0,"name":"smallvec_inline","span":{"filename":"src/lib.rs","begin":[1956,0],"end":[1966,1]},"visibility":"public","docs":null,"links":{},"attrs":["#[macro_export]"],"deprecation":null,"inner":{"macro":"macro_rules! smallvec_inline {\n    (@one $x:expr) => { ... };\n    ($elem:expr; $n:expr) => { ... };\n    ($($x:expr),+ $(,)?) => { ... };\n}"}},"1:3721:1799":{"id":"1:3721:1799","crate_id":1,"name":"type_id","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"TypeId","id":"1:39315:4318","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:347:857":{"id":"0:347:857","crate_id":0,"name":"hash","span":{"filename":"src/lib.rs","begin":[2035,4],"end":[2037,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["state",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"H"}}}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"H","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Hasher","id":"1:10468:156","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:32073:2684-0:56:2078":{"id":"a:1:32073:2684-0:56:2078","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"N","kind":{"const":{"type":{"primitive":"usize"},"default":null}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"1:32073:2684","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32073:2684","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"SmallVec","id":"0:56:2078","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"const":{"type":{"primitive":"usize"},"expr":"N","value":null,"is_literal":false}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2895-0:68:2083":{"id":"b:1:2895-0:68:2083","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2854:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2864:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Drain","id":"0:68:2083","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"const":{"type":{"primitive":"usize"},"expr":"N","value":null,"is_literal":false}}],"bindings":[]}}}},"items":["1:2898:136","1:2899:1784"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:41674:2869-0:68:2083":{"id":"a:1:41674:2869-0:68:2083","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"N","kind":{"const":{"type":{"primitive":"usize"},"default":null}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:41675:2868","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:41674:2869","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Drain","id":"0:68:2083","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"const":{"type":{"primitive":"usize"},"expr":"N","value":null,"is_literal":false}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:13215:16053":{"id":"1:13215:16053","crate_id":1,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13213:16052":{"id":"1:13213:16052","crate_id":1,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:117:2115":{"id":"0:117:2115","crate_id":0,"name":"as_slice","span":{"filename":"src/lib.rs","begin":[524,4],"end":[534,5]},"visibility":"public","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"generic":"T"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:208":{"id":"0:208","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1534,0],"end":[1539,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"N","kind":{"const":{"type":{"primitive":"usize"},"default":null}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"1:2932:123","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"SmallVec","id":"0:56:2078","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"const":{"type":{"primitive":"usize"},"expr":"N","value":null,"is_literal":false}}],"bindings":[]}}}},"items":["0:211:60"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2884-0:104:2124":{"id":"b:1:2884-0:104:2124","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2857:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:104:2124","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"const":{"type":{"primitive":"usize"},"expr":"N","value":null,"is_literal":false}}],"bindings":[]}}}},"items":["1:2886:817"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:3719-0:104:2124":{"id":"b:1:3719-0:104:2124","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:32015:2683","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3717:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:104:2124","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"const":{"type":{"primitive":"usize"},"expr":"N","value":null,"is_literal":false}}],"bindings":[]}}}},"items":["1:3721:1799"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:13251:16072":{"id":"1:13251:16072","crate_id":1,"name":"trim_ascii","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing ASCII whitespace\nremoved.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\"\\r hello world\\n \".trim_ascii(), \"hello world\");\nassert_eq!(\"  \".trim_ascii(), \"\");\nassert_eq!(\"\".trim_ascii(), \"\");\n```","links":{"u8::is_ascii_whitespace":"1:974:22261"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"4:5603":{"id":"4:5603","crate_id":4,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["4:5604:16797","4:5605:2694","4:5608:16798","4:5611:16799","4:5619:16800","4:5620:16801","4:5621:2337","4:5622:16802","4:5623:16803"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:103:658":{"id":"0:103:658","crate_id":0,"name":"drop","span":{"filename":"src/lib.rs","begin":[356,4],"end":[380,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:215:2329":{"id":"0:215:2329","crate_id":0,"name":"from_slice","span":{"filename":"src/lib.rs","begin":[1543,4],"end":[1562,5]},"visibility":"public","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["slice",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"generic":"T"}}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:176:2256":{"id":"0:176:2256","crate_id":0,"name":"clear","span":{"filename":"src/lib.rs","begin":[1190,4],"end":[1192,5]},"visibility":"public","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:155:2164":{"id":"0:155:2164","crate_id":0,"name":"spilled","span":{"filename":"src/lib.rs","begin":[789,4],"end":[791,5]},"visibility":"public","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13246:16067":{"id":"1:13246:16067","crate_id":1,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:177:2257":{"id":"0:177:2257","crate_id":0,"name":"remove","span":{"filename":"src/lib.rs","begin":[1195,4],"end":[1209,5]},"visibility":"public","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:197:2278":{"id":"0:197:2278","crate_id":0,"name":"dedup_by_key","span":{"filename":"src/lib.rs","begin":[1364,4],"end":[1370,5]},"visibility":"public","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["key",{"generic":"F"}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:3347:140","args":{"parenthesized":{"inputs":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}}],"output":{"generic":"K"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"PartialEq","id":"1:2657:200","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13249:16070":{"id":"1:13249:16070","crate_id":1,"name":"trim_ascii_start","span":null,"visibility":"public","docs":"Returns a string slice with leading ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\" \\t \\u{3000}hello world\\n\".trim_ascii_start(), \"\\u{3000}hello world\\n\");\nassert_eq!(\"  \".trim_ascii_start(), \"\");\nassert_eq!(\"\".trim_ascii_start(), \"\");\n```","links":{"u8::is_ascii_whitespace":"1:974:22261"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:88:2090":{"id":"0:88:2090","crate_id":0,"name":"next_back","span":{"filename":"src/lib.rs","begin":[338,4],"end":[343,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41580:193","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"4:5619:16800":{"id":"4:5619:16800","crate_id":4,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"4:7632:242"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"4:7632:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:2883:3065":{"id":"1:2883:3065","crate_id":1,"name":"into","span":null,"visibility":"default","docs":"Calls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of\n<code>[From]&lt;T&gt; for U</code> chooses to do.","links":{"From":"1:2857:143"},"attrs":["#[track_caller]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"U"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2890-0:68:2083":{"id":"b:1:2890-0:68:2083","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2864:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2860:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Drain","id":"0:68:2083","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"const":{"type":{"primitive":"usize"},"expr":"N","value":null,"is_literal":false}}],"bindings":[]}}}},"items":["1:2893:136","1:2894:1786"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:377:787":{"id":"0:377:787","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[2081,4],"end":[2083,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"core::fmt::Formatter","id":"1:10218:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"core::fmt::Result","id":"1:10199:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:160:2231":{"id":"0:160:2231","crate_id":0,"name":"push","span":{"filename":"src/lib.rs","begin":[946,4],"end":[957,5]},"visibility":"public","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["value",{"generic":"T"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13220:16056":{"id":"1:13220:16056","crate_id":1,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:211:60":{"id":"0:211:60","crate_id":0,"name":"default","span":{"filename":"src/lib.rs","begin":[1536,4],"end":[1538,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:76":{"id":"0:76","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[318,0],"end":[334,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[{"outlives":"'a"}],"default":null,"synthetic":false}}},{"name":"N","kind":{"const":{"type":{"primitive":"usize"},"default":null}}}],"where_predicates":[]},"provided_trait_methods":["is_sorted","array_chunks","min_by_key","find_map","try_fold","fuse","by_ref","gt","map_while","intersperse","ge","next_chunk","skip","all","cloned","sum","is_sorted_by","min_by","try_find","try_for_each","try_collect","map","scan","intersperse_with","any","advance_by","max","collect","is_sorted_by_key","for_each","product","rev","eq","position","fold","collect_into","flat_map","last","filter_map","nth","min","count","ne","cmp_by","__iterator_get_unchecked","unzip","take","rposition","reduce","enumerate","partition","flatten","peekable","step_by","partial_cmp","partial_cmp_by","size_hint","copied","max_by_key","try_reduce","partition_in_place","le","map_windows","skip_while","chain","lt","filter","eq_by","cycle","max_by","find","is_partitioned","cmp","inspect","take_while","zip"],"trait":{"name":"Iterator","id":"1:8309:177","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Drain","id":"0:68:2083","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"const":{"type":{"primitive":"usize"},"expr":"N","value":null,"is_literal":false}}],"bindings":[]}}}},"items":["0:80:172","0:81:1175","0:83:2089"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:13219:16055":{"id":"1:13219:16055","crate_id":1,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"4:729:4024":{"id":"4:729:4024","crate_id":4,"name":"Owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"1:13192:16046":{"id":"1:13192:16046","crate_id":1,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"1:52173:458","str::splitn":"1:13189:16045","self::pattern":"1:12812:6717"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitN","id":"1:43584:3251","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12818:4241","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12818:4241","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12833:6723","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2880-0:27:2041":{"id":"b:1:2880-0:27:2041","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2857:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2854:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RawSmallVec","id":"0:27:2041","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"const":{"type":{"primitive":"usize"},"expr":"N","value":null,"is_literal":false}}],"bindings":[]}}}},"items":["1:2883:3065"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:2609:2008":{"id":"1:2609:2008","crate_id":1,"name":"borrow","span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[rustc_diagnostic_item = \"noop_method_borrow\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:3138:2680-0:378:2028":{"id":"a:1:3138:2680-0:378:2028","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"1:3138:2680","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"CollectionAllocErr","id":"0:378:2028","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:139:1161":{"id":"0:139:1161","crate_id":0,"name":"new","span":{"filename":"src/lib.rs","begin":[603,4],"end":[609,5]},"visibility":"public","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"SmallVec","id":"0:56:2078","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"const":{"type":{"primitive":"usize"},"expr":"N","value":null,"is_literal":false}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2610-0:68:2083":{"id":"b:1:2610-0:68:2083","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32015:2683","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2604:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Drain","id":"0:68:2083","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"const":{"type":{"primitive":"usize"},"expr":"N","value":null,"is_literal":false}}],"bindings":[]}}}},"items":["1:2612:2367"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:332:685":{"id":"0:332:685","crate_id":0,"name":"eq","span":{"filename":"src/lib.rs","begin":[2008,4],"end":[2010,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"SmallVec","id":"0:56:2078","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}},{"const":{"type":{"primitive":"usize"},"expr":"M","value":null,"is_literal":false}}],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13170:3070":{"id":"1:13170:3070","crate_id":1,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"1:41582:190","prim@char":"1:52173:458","self::pattern":"1:12812:6717"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41580:193","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12818:4241","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12818:4241","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12833:6723","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"4:5621:2337":{"id":"4:5621:2337","crate_id":4,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"4:7632:242"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"4:7632:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:111":{"id":"0:111","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[495,0],"end":[547,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"N","kind":{"const":{"type":{"primitive":"usize"},"default":null}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"IntoIter","id":"0:104:2124","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"const":{"type":{"primitive":"usize"},"expr":"N","value":null,"is_literal":false}}],"bindings":[]}}}},"items":["0:117:2115","0:118:2127"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2895-0:104:2124":{"id":"b:1:2895-0:104:2124","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2854:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2864:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:104:2124","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"const":{"type":{"primitive":"usize"},"expr":"N","value":null,"is_literal":false}}],"bindings":[]}}}},"items":["1:2898:136","1:2899:1784"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:299:462":{"id":"0:299:462","crate_id":0,"name":"clone","span":{"filename":"src/lib.rs","begin":[1907,4],"end":[1909,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SmallVec","id":"0:56:2078","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"const":{"type":{"primitive":"usize"},"expr":"N","value":null,"is_literal":false}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:3103:246-0:68:2083":{"id":"a:1:3103:246-0:68:2083","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"N","kind":{"const":{"type":{"primitive":"usize"},"default":null}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:3103:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Drain","id":"0:68:2083","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"const":{"type":{"primitive":"usize"},"expr":"N","value":null,"is_literal":false}}],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"1:13152:13682":{"id":"1:13152:13682","crate_id":1,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"1:13153:13674"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitWhitespace","id":"1:43736:4400","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:32014:236-0:104:2124":{"id":"a:1:32014:236-0:104:2124","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"N","kind":{"const":{"type":{"primitive":"usize"},"default":null}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:32014:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:104:2124","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"const":{"type":{"primitive":"usize"},"expr":"N","value":null,"is_literal":false}}],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"0:205:2126":{"id":"0:205:2126","crate_id":0,"name":"from_raw_parts","span":{"filename":"src/lib.rs","begin":[1477,4],"end":[1492,5]},"visibility":"public","docs":"Creates a `SmallVec` directly from the raw components of another `SmallVec`.\n\n# Safety\n\nThis is highly unsafe, due to the number of invariants that aren’t checked:\n\n- `ptr` needs to have been previously allocated via `SmallVec` from its spilled storage (at least, it’s highly likely to be incorrect if it wasn’t).\n- `ptr`’s `A::Item` type needs to be the same size and alignment that it was allocated with\n- `length` needs to be less than or equal to `capacity`.\n- `capacity` needs to be the capacity that the pointer was allocated with.\n\nViolating these may cause problems like corrupting the allocator’s internal data structures.\n\nAdditionally, `capacity` must be greater than the amount of inline storage `A` has; that is, the new `SmallVec` must need to spill over into heap allocated storage. This condition is asserted against.\n\nThe ownership of `ptr` is effectively transferred to the `SmallVec` which may then deallocate, reallocate or change the contents of memory pointed to by the pointer at will. Ensure that nothing else uses the pointer after calling this function.\n\n# Examples\n\n```\nuse std::mem;\nuse std::ptr;\nuse smallvec::{SmallVec, smallvec};\n\nfn main() {\n    let mut v: SmallVec<_, 1> = smallvec![1, 2, 3];\n\n    // Pull out the important parts of `v`.\n    let p = v.as_mut_ptr();\n    let len = v.len();\n    let cap = v.capacity();\n    let spilled = v.spilled();\n\n    unsafe {\n        // Forget all about `v`. The heap allocation that stored the\n        // three values won't be deallocated.\n        mem::forget(v);\n\n        // Overwrite memory with [4, 5, 6].\n        //\n        // This is only safe if `spilled` is true! Otherwise, we are\n        // writing into the old `SmallVec`'s inline storage on the\n        // stack.\n        assert!(spilled);\n        for i in 0..len {\n            ptr::write(p.add(i), 4 + i);\n        }\n\n        // Put everything back together into a SmallVec with a different\n        // amount of inline storage, but which is still less than `cap`.\n        let rebuilt = SmallVec::<_, 2>::from_raw_parts(p, len, cap);\n        assert_eq!(&*rebuilt, &[4, 5, 6]);\n    }\n}\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["ptr",{"raw_pointer":{"mutable":true,"type":{"generic":"T"}}}],["length",{"primitive":"usize"}],["capacity",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"SmallVec","id":"0:56:2078","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"const":{"type":{"primitive":"usize"},"expr":"N","value":null,"is_literal":false}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3719-0:56:2078":{"id":"b:1:3719-0:56:2078","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:32015:2683","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3717:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"SmallVec","id":"0:56:2078","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"const":{"type":{"primitive":"usize"},"expr":"N","value":null,"is_literal":false}}],"bindings":[]}}}},"items":["1:3721:1799"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:296":{"id":"0:296","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1905,0],"end":[1926,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2623:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"N","kind":{"const":{"type":{"primitive":"usize"},"default":null}}}],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2623:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"SmallVec","id":"0:56:2078","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"const":{"type":{"primitive":"usize"},"expr":"N","value":null,"is_literal":false}}],"bindings":[]}}}},"items":["0:299:462","0:300:464"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:3719-0:378:2028":{"id":"b:1:3719-0:378:2028","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:32015:2683","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3717:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"CollectionAllocErr","id":"0:378:2028","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3721:1799"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}}},"paths":{"1:42810:2676":{"crate_id":1,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"4:6957:2633":{"crate_id":4,"path":["alloc","vec","in_place_drop","InPlaceDstDataSrcBufDrop"],"kind":"struct"},"1:46250:4549":{"crate_id":1,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"1:43360:3261":{"crate_id":1,"path":["core","slice","iter","RChunks"],"kind":"struct"},"1:4535:2660":{"crate_id":1,"path":["core","cell","Cell"],"kind":"struct"},"1:41705:2599":{"crate_id":1,"path":["core","pin","Pin"],"kind":"struct"},"4:6164:3917":{"crate_id":4,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"4:7480:2124":{"crate_id":4,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"4:7553:3921":{"crate_id":4,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"4:3027:18908":{"crate_id":4,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"4:218:2607":{"crate_id":4,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"0:68:2083":{"crate_id":0,"path":["smallvec","Drain"],"kind":"struct"},"1:41664:2866":{"crate_id":1,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"4:7412:4063":{"crate_id":4,"path":["alloc","collections","btree","map","UnorderedKeyError"],"kind":"struct"},"4:2089:4039":{"crate_id":4,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"1:3536:2754":{"crate_id":1,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"1:12360:6725":{"crate_id":1,"path":["core","str","converts","from_utf8"],"kind":"function"},"4:2236:4869":{"crate_id":4,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"1:40144:4338":{"crate_id":1,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"1:41508:4360":{"crate_id":1,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"1:40310:3370":{"crate_id":1,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"1:9902:14960":{"crate_id":1,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"1:37908:2751":{"crate_id":1,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"1:9907:5239":{"crate_id":1,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"1:45376:4444":{"crate_id":1,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"1:40100:4336":{"crate_id":1,"path":["core","char","TryFromCharError"],"kind":"struct"},"1:52194:1805":{"crate_id":1,"path":["core","u128"],"kind":"primitive"},"1:3293:2595":{"crate_id":1,"path":["core","ops","coroutine","Coroutine"],"kind":"trait"},"4:7363:2604":{"crate_id":4,"path":["alloc","alloc","Global"],"kind":"struct"},"1:22297:11881":{"crate_id":1,"path":["core","core_simd","simd","num","uint","SimdUint"],"kind":"trait"},"1:32016:243":{"crate_id":1,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"1:45765:4482":{"crate_id":1,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"1:43259:3250":{"crate_id":1,"path":["core","slice","iter","Windows"],"kind":"struct"},"1:3591:2594":{"crate_id":1,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"1:41486:14129":{"crate_id":1,"path":["core","net","parser","AddrKind"],"kind":"enum"},"4:3872:2105":{"crate_id":4,"path":["alloc","collections","linked_list","ExtractIf"],"kind":"struct"},"1:8159:144":{"crate_id":1,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"4:830:3899":{"crate_id":4,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"1:8201:129":{"crate_id":1,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"1:22837:4294":{"crate_id":1,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"1:42292:2649":{"crate_id":1,"path":["core","fmt","num","Binary"],"kind":"struct"},"1:42532:4895":{"crate_id":1,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"1:39989:4329":{"crate_id":1,"path":["core","char","EscapeUnicode"],"kind":"struct"},"1:43277:3249":{"crate_id":1,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"4:3397:2105":{"crate_id":4,"path":["alloc","collections","btree","set","ExtractIf"],"kind":"struct"},"4:3661:2364":{"crate_id":4,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"1:2827:12229":{"crate_id":1,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"1:5201:4216":{"crate_id":1,"path":["core","io","borrowed_buf","BorrowedBuf"],"kind":"struct"},"1:22259:11880":{"crate_id":1,"path":["core","core_simd","simd","num","int","SimdInt"],"kind":"trait"},"1:43630:4395":{"crate_id":1,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"1:43959:4417":{"crate_id":1,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"1:33645:2743":{"crate_id":1,"path":["core","ops","bit","BitOr"],"kind":"trait"},"1:45913:4490":{"crate_id":1,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"1:22002:12184":{"crate_id":1,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"1:3551:145":{"crate_id":1,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"4:1171:5004":{"crate_id":4,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"1:31984:2382":{"crate_id":1,"path":["core","error","tags","Value"],"kind":"struct"},"1:1966:1338":{"crate_id":1,"path":["core","ptr"],"kind":"module"},"1:46417:4552":{"crate_id":1,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"1:46152:4515":{"crate_id":1,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"1:40281:3367":{"crate_id":1,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"1:43334:3265":{"crate_id":1,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"1:41841:96":{"crate_id":1,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"1:52197:1398":{"crate_id":1,"path":["core","reference"],"kind":"primitive"},"1:44373:149":{"crate_id":1,"path":["core","future","future","Future"],"kind":"trait"},"4:5922:2083":{"crate_id":4,"path":["alloc","string","Drain"],"kind":"struct"},"1:8122:3355":{"crate_id":1,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"1:1936:2696":{"crate_id":1,"path":["core","mem","Discriminant"],"kind":"struct"},"1:40808:3343":{"crate_id":1,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"1:3347:140":{"crate_id":1,"path":["core","ops","function","FnMut"],"kind":"trait"},"1:42831:4376":{"crate_id":1,"path":["core","hash","sip","State"],"kind":"struct"},"1:41958:87":{"crate_id":1,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"4:826:101":{"crate_id":4,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"1:22996:4306":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroI16Inner"],"kind":"struct"},"1:11179:3254":{"crate_id":1,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"1:11097:3253":{"crate_id":1,"path":["core","slice","iter","Split"],"kind":"struct"},"4:4438:3919":{"crate_id":4,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"1:37798:2749":{"crate_id":1,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"1:3154:2736":{"crate_id":1,"path":["core","ops","arith","Sub"],"kind":"trait"},"1:45662:4477":{"crate_id":1,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"1:44212:4912":{"crate_id":1,"path":["core","time","Nanoseconds"],"kind":"struct"},"1:3164:2734":{"crate_id":1,"path":["core","ops","arith","Neg"],"kind":"trait"},"1:3340:2092":{"crate_id":1,"path":["core","ops","drop","Drop"],"kind":"trait"},"1:42613:136":{"crate_id":1,"path":["core","fmt","Error"],"kind":"struct"},"1:2699:201":{"crate_id":1,"path":["core","cmp","PartialOrd"],"kind":"trait"},"1:22803:13821":{"crate_id":1,"path":["core","num","fmt","Part"],"kind":"enum"},"1:44390:226":{"crate_id":1,"path":["core","future","ResumeTy"],"kind":"struct"},"1:7706:3334":{"crate_id":1,"path":["core","iter","range","Step"],"kind":"trait"},"1:40319:4343":{"crate_id":1,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"1:52183:724":{"crate_id":1,"path":["core","f32"],"kind":"primitive"},"1:46592:4561":{"crate_id":1,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"4:5409:2342":{"crate_id":4,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"1:39102:2596":{"crate_id":1,"path":["core","ops","coroutine","CoroutineState"],"kind":"enum"},"1:3324:2350":{"crate_id":1,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"1:4678:3940":{"crate_id":1,"path":["core","cell","BorrowRef"],"kind":"struct"},"4:926:3903":{"crate_id":4,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"1:32005:4314":{"crate_id":1,"path":["core","error","Source"],"kind":"struct"},"4:1428:99":{"crate_id":4,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"1:39328:4320":{"crate_id":1,"path":["core","array","TryFromSliceError"],"kind":"struct"},"4:4074:2083":{"crate_id":4,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"1:46618:4563":{"crate_id":1,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"1:44230:130":{"crate_id":1,"path":["core","time","Duration"],"kind":"struct"},"1:45633:4468":{"crate_id":1,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"1:44398:206":{"crate_id":1,"path":["core","task","poll","Poll"],"kind":"enum"},"1:732:189":{"crate_id":1,"path":["core","num","nonzero","NonZero"],"kind":"struct"},"1:11048:2087":{"crate_id":1,"path":["core","slice","iter","Iter"],"kind":"struct"},"4:723:249":{"crate_id":4,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"1:10466:152":{"crate_id":1,"path":["core","hash","macros","Hash"],"kind":"proc_derive"},"4:5852:250":{"crate_id":4,"path":["alloc","string","ToString"],"kind":"trait"},"1:44473:179":{"crate_id":1,"path":["core","alloc","layout","Layout"],"kind":"struct"},"4:3238:2087":{"crate_id":4,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"1:45604:4466":{"crate_id":1,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"1:43726:4399":{"crate_id":1,"path":["core","str","iter","LinesAny"],"kind":"struct"},"4:4925:216":{"crate_id":4,"path":["alloc","rc","Rc"],"kind":"struct"},"1:3546:253":{"crate_id":1,"path":["core","ops","try_trait","Try"],"kind":"trait"},"1:21564:12229":{"crate_id":1,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"1:40827:3347":{"crate_id":1,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"1:2503:2712":{"crate_id":1,"path":["core","ptr","with_exposed_provenance_mut"],"kind":"function"},"4:0:307":{"crate_id":4,"path":["alloc"],"kind":"module"},"1:52178:1666":{"crate_id":1,"path":["core","slice"],"kind":"primitive"},"1:3344:139":{"crate_id":1,"path":["core","ops","function","Fn"],"kind":"trait"},"1:6031:3371":{"crate_id":1,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"1:22985:4305":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroI8Inner"],"kind":"struct"},"1:3473:210":{"crate_id":1,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"1:4251:3917":{"crate_id":1,"path":["core","array","Guard"],"kind":"struct"},"1:40129:6660":{"crate_id":1,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"1:39163:212":{"crate_id":1,"path":["core","ops","range","RangeFull"],"kind":"struct"},"1:43287:3259":{"crate_id":1,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"4:6402:12085":{"crate_id":4,"path":["alloc","task","Wake"],"kind":"trait"},"1:52173:458":{"crate_id":1,"path":["core","char"],"kind":"primitive"},"1:40184:3942":{"crate_id":1,"path":["core","ffi","VaListImpl"],"kind":"struct"},"1:39978:4327":{"crate_id":1,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"1:39940:13830":{"crate_id":1,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"1:3096:2589":{"crate_id":1,"path":["core","marker","Unsize"],"kind":"trait"},"1:39308:2755":{"crate_id":1,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"1:43844:6738":{"crate_id":1,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"4:1496:2124":{"crate_id":4,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"4:870:3901":{"crate_id":4,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"1:38487:2752":{"crate_id":1,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"1:31998:2661":{"crate_id":1,"path":["core","error","tags","Ref"],"kind":"struct"},"4:7436:2124":{"crate_id":4,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"1:22730:14128":{"crate_id":1,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"1:12574:4254":{"crate_id":1,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"1:41633:2865":{"crate_id":1,"path":["core","panic","location","Location"],"kind":"struct"},"1:22768:13809":{"crate_id":1,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"4:1465:2087":{"crate_id":4,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"1:22402:2711":{"crate_id":1,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr","with_exposed_provenance"],"kind":"function"},"1:2030:2723":{"crate_id":1,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"4:2526:4876":{"crate_id":4,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"1:40372:3360":{"crate_id":1,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"1:42036:88":{"crate_id":1,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"1:22215:11879":{"crate_id":1,"path":["core","core_simd","simd","num","float","SimdFloat"],"kind":"trait"},"1:39238:213":{"crate_id":1,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"0:104:2124":{"crate_id":0,"path":["smallvec","IntoIter"],"kind":"struct"},"1:40156:4331":{"crate_id":1,"path":["core","ffi","c_str","Bytes"],"kind":"struct"},"4:3648:2087":{"crate_id":4,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"4:6440:1906":{"crate_id":4,"path":["alloc","vec"],"kind":"module"},"1:40085:4334":{"crate_id":1,"path":["core","char","ToUppercase"],"kind":"struct"},"1:43612:4394":{"crate_id":1,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"1:30204:6398":{"crate_id":1,"path":["core","num","FpCategory"],"kind":"enum"},"1:41713:225":{"crate_id":1,"path":["core","result","Result"],"kind":"enum"},"1:10244:119":{"crate_id":1,"path":["core","fmt","Debug"],"kind":"trait"},"4:3807:4041":{"crate_id":4,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"1:43911:4415":{"crate_id":1,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"1:2623:112":{"crate_id":1,"path":["core","clone","Clone"],"kind":"trait"},"4:6060:5007":{"crate_id":4,"path":["alloc","sync","ArcInner"],"kind":"struct"},"4:5717:2631":{"crate_id":4,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"1:43208:4383":{"crate_id":1,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"4:2197:3912":{"crate_id":4,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"4:7527:2626":{"crate_id":4,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"1:12772:6437":{"crate_id":1,"path":["core","str","traits","FromStr"],"kind":"trait"},"1:41624:2124":{"crate_id":1,"path":["core","option","IntoIter"],"kind":"struct"},"4:6600:2342":{"crate_id":4,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"1:43761:4330":{"crate_id":1,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"1:42542:2658":{"crate_id":1,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"1:44180:4904":{"crate_id":1,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"1:12827:6724":{"crate_id":1,"path":["core","str","pattern","Searcher"],"kind":"trait"},"1:43379:3262":{"crate_id":1,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"1:10903:238":{"crate_id":1,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"1:22752:4281":{"crate_id":1,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"1:21479:12189":{"crate_id":1,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"0:305:2360":{"crate_id":0,"path":["smallvec","smallvec"],"kind":"macro"},"1:2943:136":{"crate_id":1,"path":["core","error","Error"],"kind":"trait"},"4:3792:4039":{"crate_id":4,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"1:41769:2124":{"crate_id":1,"path":["core","result","IntoIter"],"kind":"struct"},"1:33099:2737":{"crate_id":1,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"4:7655:4073":{"crate_id":4,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"4:4239:3917":{"crate_id":4,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"1:13670:3965":{"crate_id":1,"path":["core","task","wake","LocalWaker"],"kind":"struct"},"1:44500:2602":{"crate_id":1,"path":["core","alloc","AllocError"],"kind":"struct"},"1:21425:3693":{"crate_id":1,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"1:32014:236":{"crate_id":1,"path":["core","marker","Send"],"kind":"trait"},"1:44376:163":{"crate_id":1,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"1:12328:3240":{"crate_id":1,"path":["core","slice","SlicePattern"],"kind":"trait"},"1:46525:4556":{"crate_id":1,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"1:39066:2759":{"crate_id":1,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"1:40214:4340":{"crate_id":1,"path":["core","io","borrowed_buf","BorrowedCursor"],"kind":"struct"},"1:22830:4891":{"crate_id":1,"path":["core","num","fmt","Formatted"],"kind":"struct"},"4:7452:4064":{"crate_id":4,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"1:8665:14925":{"crate_id":1,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"1:45875:4488":{"crate_id":1,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"4:6554:2083":{"crate_id":4,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"1:39146:2624":{"crate_id":1,"path":["core","ops","index","Index"],"kind":"trait"},"1:42596:2658":{"crate_id":1,"path":["core","fmt","Alignment"],"kind":"enum"},"1:21692:4268":{"crate_id":1,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"1:4733:3941":{"crate_id":1,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"1:22919:4299":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroU8Inner"],"kind":"struct"},"1:22665:4272":{"crate_id":1,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"1:32865:2735":{"crate_id":1,"path":["core","ops","arith","Rem"],"kind":"trait"},"3:0:2574":{"crate_id":3,"path":["rustc_std_workspace_core"],"kind":"module"},"4:6007:71":{"crate_id":4,"path":["alloc","sync","Arc"],"kind":"struct"},"1:2119:188":{"crate_id":1,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"1:2860:257":{"crate_id":1,"path":["core","convert","TryInto"],"kind":"trait"},"4:7645:4072":{"crate_id":4,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"1:52172:1157":{"crate_id":1,"path":["core","never"],"kind":"primitive"},"1:13650:3963":{"crate_id":1,"path":["core","task","wake","Waker"],"kind":"struct"},"1:10468:156":{"crate_id":1,"path":["core","hash","Hasher"],"kind":"trait"},"4:7569:4065":{"crate_id":4,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"1:21572:11795":{"crate_id":1,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"1:13762:2603":{"crate_id":1,"path":["core","alloc","Allocator"],"kind":"trait"},"1:40404:3377":{"crate_id":1,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"1:42802:4372":{"crate_id":1,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"1:3557:2756":{"crate_id":1,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"1:4375:2587":{"crate_id":1,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"1:10251:2648":{"crate_id":1,"path":["core","fmt","Octal"],"kind":"trait"},"4:6763:2342":{"crate_id":4,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"1:43034:4382":{"crate_id":1,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"4:3284:18848":{"crate_id":4,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"1:30421:2012":{"crate_id":1,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"1:44463:4442":{"crate_id":1,"path":["core","task","wake","ContextBuilder"],"kind":"struct"},"1:44188:4906":{"crate_id":1,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"1:2851:76":{"crate_id":1,"path":["core","convert","AsMut"],"kind":"trait"},"4:1557:4037":{"crate_id":4,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"1:52176:1295":{"crate_id":1,"path":["core","pointer"],"kind":"primitive"},"1:42849:4381":{"crate_id":1,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"1:41599:172":{"crate_id":1,"path":["core","option","Item"],"kind":"struct"},"1:45491:4459":{"crate_id":1,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"1:41880:86":{"crate_id":1,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"1:43389:3263":{"crate_id":1,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"1:21464:12180":{"crate_id":1,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"1:40005:4330":{"crate_id":1,"path":["core","char","EscapeDebug"],"kind":"struct"},"1:41675:2868":{"crate_id":1,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"1:46563:4558":{"crate_id":1,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"1:21435:12187":{"crate_id":1,"path":["core","core_simd","swizzle","rotate_elements_left","Rotate"],"kind":"struct"},"0:56:2078":{"crate_id":0,"path":["smallvec","SmallVec"],"kind":"struct"},"1:40051:4333":{"crate_id":1,"path":["core","char","ToLowercase"],"kind":"struct"},"4:1527:4034":{"crate_id":4,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"1:8621:3352":{"crate_id":1,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"1:729:6438":{"crate_id":1,"path":["core","num","nonzero","ZeroablePrimitive"],"kind":"trait"},"1:3563:2758":{"crate_id":1,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"4:7730:2627":{"crate_id":4,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"1:33276:2738":{"crate_id":1,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"1:43268:3248":{"crate_id":1,"path":["core","slice","iter","Chunks"],"kind":"struct"},"1:8309:177":{"crate_id":1,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"1:4461:4210":{"crate_id":1,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"1:8126:3354":{"crate_id":1,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"1:40444:3363":{"crate_id":1,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"1:40579:3381":{"crate_id":1,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"4:1480:2364":{"crate_id":4,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"1:44200:4909":{"crate_id":1,"path":["core","str","IsNotEmpty"],"kind":"struct"},"1:22963:4303":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroU128Inner"],"kind":"struct"},"1:46644:4565":{"crate_id":1,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"1:3311:124":{"crate_id":1,"path":["core","ops","deref","Deref"],"kind":"trait"},"1:25892:266":{"crate_id":1,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"4:40:2605":{"crate_id":4,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"1:52185:894":{"crate_id":1,"path":["core","i8"],"kind":"primitive"},"1:40263:3357":{"crate_id":1,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"1:22121:12229":{"crate_id":1,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"1:22388:11883":{"crate_id":1,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr"],"kind":"trait"},"1:41919:93":{"crate_id":1,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"1:43566:3255":{"crate_id":1,"path":["core","str","iter","SplitN"],"kind":"struct"},"1:6145:3359":{"crate_id":1,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"4:7119:3936":{"crate_id":4,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"1:40793:3340":{"crate_id":1,"path":["core","iter","sources","once","Once"],"kind":"struct"},"1:23492:235":{"crate_id":1,"path":["core","num","saturating","Saturating"],"kind":"struct"},"1:22559:4269":{"crate_id":1,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"4:3635:181":{"crate_id":4,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"1:40786:3338":{"crate_id":1,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"1:40802:3342":{"crate_id":1,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"1:2984:4076":{"crate_id":1,"path":["core","error","Request"],"kind":"struct"},"1:45782:4483":{"crate_id":1,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"1:15:2004":{"crate_id":1,"path":["core","write"],"kind":"macro"},"1:43584:3251":{"crate_id":1,"path":["core","str","iter","RSplitN"],"kind":"struct"},"1:2501:2711":{"crate_id":1,"path":["core","ptr","with_exposed_provenance"],"kind":"function"},"1:40118:4337":{"crate_id":1,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"1:46475:4554":{"crate_id":1,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"1:46002:4509":{"crate_id":1,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"1:9288:2867":{"crate_id":1,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"4:5217:3924":{"crate_id":4,"path":["alloc","rc","Weak"],"kind":"struct"},"1:1740:545":{"crate_id":1,"path":["core","intrinsics","copy_nonoverlapping"],"kind":"function"},"1:6654:3384":{"crate_id":1,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"1:41580:193":{"crate_id":1,"path":["core","option","Option"],"kind":"enum"},"1:42634:2659":{"crate_id":1,"path":["core","fmt","Arguments"],"kind":"struct"},"1:43530:4393":{"crate_id":1,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"1:23007:4307":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroI32Inner"],"kind":"struct"},"1:44431:4437":{"crate_id":1,"path":["core","task","wake","RawWaker"],"kind":"struct"},"1:46682:4573":{"crate_id":1,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"1:33472:2742":{"crate_id":1,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"1:41616:2364":{"crate_id":1,"path":["core","option","IterMut"],"kind":"struct"},"1:35867:2747":{"crate_id":1,"path":["core","ops","bit","Shr"],"kind":"trait"},"4:7597:4068":{"crate_id":4,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"1:40250:3366":{"crate_id":1,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"1:52190:1829":{"crate_id":1,"path":["core","u8"],"kind":"primitive"},"1:46720:4575":{"crate_id":1,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"1:40291:3368":{"crate_id":1,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"4:1830:2105":{"crate_id":4,"path":["alloc","collections","btree","map","ExtractIf"],"kind":"struct"},"1:39929:4322":{"crate_id":1,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"1:41753:2087":{"crate_id":1,"path":["core","result","Iter"],"kind":"struct"},"4:1311:12059":{"crate_id":4,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"1:9720:91":{"crate_id":1,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"4:3305:4057":{"crate_id":4,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"1:52177:333":{"crate_id":1,"path":["core","array"],"kind":"primitive"},"1:43770:4207":{"crate_id":1,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"4:5453:12072":{"crate_id":4,"path":["alloc","slice","Concat"],"kind":"trait"},"4:7392:2083":{"crate_id":4,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"1:43865:4404":{"crate_id":1,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"1:2864:256":{"crate_id":1,"path":["core","convert","TryFrom"],"kind":"trait"},"1:3379:2625":{"crate_id":1,"path":["core","ops","index","IndexMut"],"kind":"trait"},"1:4614:4213":{"crate_id":1,"path":["core","cell","BorrowMutError"],"kind":"struct"},"0:306:2363":{"crate_id":0,"path":["smallvec","smallvec_inline"],"kind":"macro"},"1:45797:4484":{"crate_id":1,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"1:2828:6397":{"crate_id":1,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"1:39178:209":{"crate_id":1,"path":["core","ops","range","Range"],"kind":"struct"},"1:13450:14467":{"crate_id":1,"path":["core","future","join","MaybeDone"],"kind":"enum"},"1:32493:2733":{"crate_id":1,"path":["core","ops","arith","Mul"],"kind":"trait"},"1:30859:3693":{"crate_id":1,"path":["core","cmp","Reverse"],"kind":"struct"},"1:43408:4386":{"crate_id":1,"path":["core","str","error","Utf8Error"],"kind":"struct"},"1:4328:4208":{"crate_id":1,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"1:52188:888":{"crate_id":1,"path":["core","i64"],"kind":"primitive"},"1:22744:4280":{"crate_id":1,"path":["core","num","diy_float","Fp"],"kind":"struct"},"4:7538:12056":{"crate_id":4,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"1:37853:2750":{"crate_id":1,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"1:44058:4425":{"crate_id":1,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"1:4789:2663":{"crate_id":1,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"1:7655:5119":{"crate_id":1,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"4:4104:2342":{"crate_id":4,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"1:40351:3383":{"crate_id":1,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"1:30474:2658":{"crate_id":1,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"1:46114:4513":{"crate_id":1,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"4:4309:2087":{"crate_id":4,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"1:46446:4553":{"crate_id":1,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"1:2604:103":{"crate_id":1,"path":["core","borrow","BorrowMut"],"kind":"trait"},"1:10259:205":{"crate_id":1,"path":["core","fmt","Pointer"],"kind":"trait"},"1:10218:142":{"crate_id":1,"path":["core","fmt","Formatter"],"kind":"struct"},"1:42313:2651":{"crate_id":1,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"4:1577:4038":{"crate_id":4,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"1:5142:423":{"crate_id":1,"path":["core","ffi","c_void"],"kind":"enum"},"1:4352:109":{"crate_id":1,"path":["core","asserting","Capture"],"kind":"struct"},"1:13046:119":{"crate_id":1,"path":["core","str","lossy","Debug"],"kind":"struct"},"1:44512:4443":{"crate_id":1,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"1:22347:14511":{"crate_id":1,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_addr"],"kind":"function"},"1:3957:2124":{"crate_id":1,"path":["core","array","iter","IntoIter"],"kind":"struct"},"1:40385:3375":{"crate_id":1,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"1:30832:195":{"crate_id":1,"path":["core","cmp","Ordering"],"kind":"enum"},"4:295:2007":{"crate_id":4,"path":["alloc","boxed","Box"],"kind":"struct"},"1:3329:2597":{"crate_id":1,"path":["core","ops","deref","DerefPure"],"kind":"trait"},"1:21963:12229":{"crate_id":1,"path":["core","core_simd","to_bytes","sealed","Sealed"],"kind":"trait"},"1:12590:4255":{"crate_id":1,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"1:21462:12183":{"crate_id":1,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"1:2932:123":{"crate_id":1,"path":["core","default","Default"],"kind":"trait"},"1:10460:152":{"crate_id":1,"path":["core","hash","Hash"],"kind":"trait"},"1:52196:1890":{"crate_id":1,"path":["core","usize"],"kind":"primitive"},"1:12833:6723":{"crate_id":1,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"4:7472:2124":{"crate_id":4,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"1:52174:1851":{"crate_id":1,"path":["core","unit"],"kind":"primitive"},"4:2309:4875":{"crate_id":4,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"1:13502:4264":{"crate_id":1,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"1:8172:2348":{"crate_id":1,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"1:22952:4302":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroU64Inner"],"kind":"struct"},"1:45508:4460":{"crate_id":1,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"1:43736:4400":{"crate_id":1,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"1:39955:4325":{"crate_id":1,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"4:4149:2364":{"crate_id":4,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"1:5858:3917":{"crate_id":1,"path":["core","iter","adapters","filter","next_chunk","Guard"],"kind":"struct"},"1:44037:6739":{"crate_id":1,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"4:3029:4872":{"crate_id":4,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"4:671:4023":{"crate_id":4,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"1:31991:4313":{"crate_id":1,"path":["core","error","tags","MaybeSizedValue"],"kind":"struct"},"4:1726:2342":{"crate_id":4,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"1:4762:2664":{"crate_id":1,"path":["core","cell","UnsafeCell"],"kind":"struct"},"4:3271:4052":{"crate_id":4,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"1:22447:11874":{"crate_id":1,"path":["core","core_simd","simd","cmp","eq","SimdPartialEq"],"kind":"trait"},"1:32015:2683":{"crate_id":1,"path":["core","marker","Sized"],"kind":"trait"},"1:52195:950":{"crate_id":1,"path":["core","isize"],"kind":"primitive"},"1:46572:4559":{"crate_id":1,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"1:43421:4389":{"crate_id":1,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"1:42794:2677":{"crate_id":1,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"1:43448:4331":{"crate_id":1,"path":["core","str","iter","Bytes"],"kind":"struct"},"1:43754:4256":{"crate_id":1,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"1:46759:4591":{"crate_id":1,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"1:43053:3276":{"crate_id":1,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"1:11290:3258":{"crate_id":1,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"1:4492:4211":{"crate_id":1,"path":["core","cell","once","OnceCell"],"kind":"struct"},"1:44265:6749":{"crate_id":1,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"1:2487:659":{"crate_id":1,"path":["core","ptr","drop_in_place"],"kind":"function"},"1:4609:4212":{"crate_id":1,"path":["core","cell","BorrowError"],"kind":"struct"},"1:9399:4241":{"crate_id":1,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"1:4340:4209":{"crate_id":1,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"1:21447:12187":{"crate_id":1,"path":["core","core_simd","swizzle","rotate_elements_right","Rotate"],"kind":"struct"},"4:7632:242":{"crate_id":4,"path":["alloc","string","String"],"kind":"struct"},"1:43779:4329":{"crate_id":1,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"1:22475:11875":{"crate_id":1,"path":["core","core_simd","simd","cmp","ord","SimdPartialOrd"],"kind":"trait"},"1:40221:3265":{"crate_id":1,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"1:40301:3369":{"crate_id":1,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"1:41402:4894":{"crate_id":1,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"1:3145:2682":{"crate_id":1,"path":["core","marker","FnPtr"],"kind":"trait"},"1:10253:2649":{"crate_id":1,"path":["core","fmt","Binary"],"kind":"trait"},"4:7094:3933":{"crate_id":4,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"1:11373:3252":{"crate_id":1,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"4:2207:4043":{"crate_id":4,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"1:22930:4300":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroU16Inner"],"kind":"struct"},"1:41320:169":{"crate_id":1,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"1:44208:4911":{"crate_id":1,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"1:11891:3269":{"crate_id":1,"path":["core","slice","iter","ChunkByMut"],"kind":"struct"},"1:39278:2187":{"crate_id":1,"path":["core","ops","range","Bound"],"kind":"enum"},"1:32103:2588":{"crate_id":1,"path":["core","marker","Tuple"],"kind":"trait"},"1:0:550":{"crate_id":1,"path":["core"],"kind":"module"},"1:52187:882":{"crate_id":1,"path":["core","i32"],"kind":"primitive"},"1:41778:195":{"crate_id":1,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"1:4688:2661":{"crate_id":1,"path":["core","cell","Ref"],"kind":"struct"},"1:21481:12191":{"crate_id":1,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"1:42841:4380":{"crate_id":1,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"1:10893:12229":{"crate_id":1,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"1:22123:11794":{"crate_id":1,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"1:12514:4250":{"crate_id":1,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"1:23029:4309":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroI128Inner"],"kind":"struct"},"1:44184:4905":{"crate_id":1,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"1:52180:1789":{"crate_id":1,"path":["core","tuple"],"kind":"primitive"},"4:3209:100":{"crate_id":4,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"1:33991:2746":{"crate_id":1,"path":["core","ops","bit","Shl"],"kind":"trait"},"1:31938:6593":{"crate_id":1,"path":["core","convert","Infallible"],"kind":"enum"},"1:21513:11796":{"crate_id":1,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"1:44176:4903":{"crate_id":1,"path":["core","str","LinesMap"],"kind":"struct"},"0:378:2028":{"crate_id":0,"path":["smallvec","CollectionAllocErr"],"kind":"enum"},"4:1546:4036":{"crate_id":4,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"1:30459:2698":{"crate_id":1,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"1:22850:4295":{"crate_id":1,"path":["core","num","error","ParseIntError"],"kind":"struct"},"4:2289:18527":{"crate_id":4,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"1:42559:13825":{"crate_id":1,"path":["core","fmt","rt","Count"],"kind":"enum"},"1:44071:4431":{"crate_id":1,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"1:8163:164":{"crate_id":1,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"1:46023:4510":{"crate_id":1,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"1:40194:4339":{"crate_id":1,"path":["core","ffi","VaList"],"kind":"struct"},"1:39919:4321":{"crate_id":1,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"1:39501:6594":{"crate_id":1,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"1:11331:3255":{"crate_id":1,"path":["core","slice","iter","SplitN"],"kind":"struct"},"1:7938:3339":{"crate_id":1,"path":["core","iter","sources","once","once"],"kind":"function"},"1:45896:4489":{"crate_id":1,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"1:3108:2009":{"crate_id":1,"path":["core","marker","PhantomData"],"kind":"struct"},"1:3184:2593":{"crate_id":1,"path":["core","ops","async_function","AsyncFnOnce"],"kind":"trait"},"1:45715:4480":{"crate_id":1,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"1:46327:4550":{"crate_id":1,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"1:3350:141":{"crate_id":1,"path":["core","ops","function","FnOnce"],"kind":"trait"},"1:12628:3270":{"crate_id":1,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"1:1911:2011":{"crate_id":1,"path":["core","mem","align_of"],"kind":"function"},"1:21680:12229":{"crate_id":1,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"1:33818:2744":{"crate_id":1,"path":["core","ops","bit","BitXor"],"kind":"trait"},"1:44204:4910":{"crate_id":1,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"1:46603:4562":{"crate_id":1,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"1:33158:2741":{"crate_id":1,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"1:43894:4414":{"crate_id":1,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"1:45846:4487":{"crate_id":1,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"1:30485:13815":{"crate_id":1,"path":["core","ptr","alignment","AlignmentEnum"],"kind":"enum"},"1:22861:6451":{"crate_id":1,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"1:4742:2662":{"crate_id":1,"path":["core","cell","RefMut"],"kind":"struct"},"1:40779:4227":{"crate_id":1,"path":["core","iter","sources","from_coroutine","FromCoroutine"],"kind":"struct"},"1:41542:4235":{"crate_id":1,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"1:44196:4908":{"crate_id":1,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"1:41608:2087":{"crate_id":1,"path":["core","option","Iter"],"kind":"struct"},"1:32074:2685":{"crate_id":1,"path":["core","marker","PhantomPinned"],"kind":"struct"},"1:41997:94":{"crate_id":1,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"4:7621:3925":{"crate_id":4,"path":["alloc","rc","UniqueRc"],"kind":"struct"},"1:45829:4486":{"crate_id":1,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"1:40593:3382":{"crate_id":1,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"1:39968:4326":{"crate_id":1,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"1:52184:740":{"crate_id":1,"path":["core","f64"],"kind":"primitive"},"4:1536:4035":{"crate_id":4,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"1:43369:3264":{"crate_id":1,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"4:3250:18849":{"crate_id":4,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"1:52171:405":{"crate_id":1,"path":["core","bool"],"kind":"primitive"},"1:3234:2745":{"crate_id":1,"path":["core","ops","bit","Not"],"kind":"trait"},"1:45537:4462":{"crate_id":1,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"1:2240:2600":{"crate_id":1,"path":["core","ptr","unique","Unique"],"kind":"struct"},"1:4394:6613":{"crate_id":1,"path":["core","async_iter","async_iter","IntoAsyncIterator"],"kind":"trait"},"1:37743:2748":{"crate_id":1,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"1:46546:4557":{"crate_id":1,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"1:2693:194":{"crate_id":1,"path":["core","cmp","Ord"],"kind":"trait"},"1:12551:4253":{"crate_id":1,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"1:39150:2753":{"crate_id":1,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"1:11345:3251":{"crate_id":1,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"1:10247:119":{"crate_id":1,"path":["core","fmt","macros","Debug"],"kind":"proc_derive"},"1:21566:11792":{"crate_id":1,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"1:4605:220":{"crate_id":1,"path":["core","cell","RefCell"],"kind":"struct"},"1:44192:4907":{"crate_id":1,"path":["core","str","IsWhitespace"],"kind":"struct"},"2:234:225":{"crate_id":2,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"4:1155:5117":{"crate_id":4,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"1:43347:3266":{"crate_id":1,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"1:22882:12229":{"crate_id":1,"path":["core","num","nonzero","private","Sealed"],"kind":"trait"},"1:42306:2650":{"crate_id":1,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"1:3179:2592":{"crate_id":1,"path":["core","ops","async_function","AsyncFnMut"],"kind":"trait"},"1:42571:13832":{"crate_id":1,"path":["core","fmt","rt","Flag"],"kind":"enum"},"1:2854:162":{"crate_id":1,"path":["core","convert","Into"],"kind":"trait"},"1:10199:225":{"crate_id":1,"path":["core","fmt","Result"],"kind":"type_alias"},"1:22321:12229":{"crate_id":1,"path":["core","core_simd","simd","num","sealed","Sealed"],"kind":"trait"},"1:11858:3268":{"crate_id":1,"path":["core","slice","iter","ChunkBy"],"kind":"struct"},"1:43438:4390":{"crate_id":1,"path":["core","str","iter","CharIndices"],"kind":"struct"},"1:5243:961":{"crate_id":1,"path":["core","iter"],"kind":"module"},"4:6681:2124":{"crate_id":4,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"1:39315:4318":{"crate_id":1,"path":["core","any","TypeId"],"kind":"struct"},"4:3245:4051":{"crate_id":4,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"1:43986:4259":{"crate_id":1,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"1:40272:3358":{"crate_id":1,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"1:3138:2680":{"crate_id":1,"path":["core","marker","Freeze"],"kind":"trait"},"4:1191:5118":{"crate_id":4,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"1:30453:2013":{"crate_id":1,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"1:45438:4452":{"crate_id":1,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"1:42299:2648":{"crate_id":1,"path":["core","fmt","num","Octal"],"kind":"struct"},"1:10700:3954":{"crate_id":1,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"1:39913:4207":{"crate_id":1,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"4:7444:209":{"crate_id":4,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"4:3741:2342":{"crate_id":4,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"1:3628:2598":{"crate_id":1,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"4:7582:6660":{"crate_id":4,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"1:33217:2739":{"crate_id":1,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"1:42194:4245":{"crate_id":1,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"1:3098:117":{"crate_id":1,"path":["core","marker","Copy"],"kind":"trait"},"2:0:492":{"crate_id":2,"path":["compiler_builtins"],"kind":"module"},"1:45558:4463":{"crate_id":1,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"1:13477:204":{"crate_id":1,"path":["core","future","pending","Pending"],"kind":"struct"},"1:7485:3078":{"crate_id":1,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"1:40092:4335":{"crate_id":1,"path":["core","char","CaseMappingIter"],"kind":"struct"},"1:2662:133":{"crate_id":1,"path":["core","cmp","Eq"],"kind":"trait"},"1:52191:1811":{"crate_id":1,"path":["core","u16"],"kind":"primitive"},"1:46372:4551":{"crate_id":1,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"1:12886:6732":{"crate_id":1,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"1:8627:3353":{"crate_id":1,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"1:46085:4512":{"crate_id":1,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"1:44452:14158":{"crate_id":1,"path":["core","task","wake","ExtData"],"kind":"enum"},"4:2103:4041":{"crate_id":4,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"1:43432:4249":{"crate_id":1,"path":["core","str","iter","Chars"],"kind":"struct"},"0:27:2041":{"crate_id":0,"path":["smallvec","RawSmallVec"],"kind":"union"},"0:0:2360":{"crate_id":0,"path":["smallvec"],"kind":"module"},"1:3103:246":{"crate_id":1,"path":["core","marker","Sync"],"kind":"trait"},"1:3824:2083":{"crate_id":1,"path":["core","array","drain","Drain"],"kind":"struct"},"1:21968:11798":{"crate_id":1,"path":["core","core_simd","to_bytes","ToBytes"],"kind":"trait"},"1:1745:543":{"crate_id":1,"path":["core","intrinsics","copy"],"kind":"function"},"1:39258:215":{"crate_id":1,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"1:4:1239":{"crate_id":1,"path":["core","panic"],"kind":"macro"},"1:40241:3356":{"crate_id":1,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"1:4969:6630":{"crate_id":1,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"4:7380:4062":{"crate_id":4,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"4:5064:3917":{"crate_id":4,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"1:52186:876":{"crate_id":1,"path":["core","i16"],"kind":"primitive"},"0:379:2030":{"crate_id":0,"path":["smallvec","CollectionAllocErr","CapacityOverflow"],"kind":"variant"},"1:41520:6667":{"crate_id":1,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"1:22433:12229":{"crate_id":1,"path":["core","core_simd","simd","ptr","sealed","Sealed"],"kind":"trait"},"1:45683:4478":{"crate_id":1,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"4:7048:263":{"crate_id":4,"path":["alloc","vec","Vec"],"kind":"struct"},"1:11217:3271":{"crate_id":1,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"1:10249:128":{"crate_id":1,"path":["core","fmt","Display"],"kind":"trait"},"1:39200:211":{"crate_id":1,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"1:45575:4464":{"crate_id":1,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"1:1929:658":{"crate_id":1,"path":["core","mem","drop"],"kind":"function"},"1:40569:3380":{"crate_id":1,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"1:8618:148":{"crate_id":1,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"1:12812:6717":{"crate_id":1,"path":["core","str","pattern"],"kind":"module"},"1:45928:4491":{"crate_id":1,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"1:11932:2126":{"crate_id":1,"path":["core","slice","raw","from_raw_parts"],"kind":"function"},"4:3279:4056":{"crate_id":4,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"1:45406:4448":{"crate_id":1,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"1:40166:6646":{"crate_id":1,"path":["core","ffi","c_char"],"kind":"type_alias"},"4:1327:4027":{"crate_id":4,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"1:10257:2651":{"crate_id":1,"path":["core","fmt","UpperHex"],"kind":"trait"},"1:10508:2674":{"crate_id":1,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"4:3033:5005":{"crate_id":4,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"1:43684:4397":{"crate_id":1,"path":["core","str","iter","RMatches"],"kind":"struct"},"1:40113:106":{"crate_id":1,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"1:42819:156":{"crate_id":1,"path":["core","hash","sip","Hasher"],"kind":"struct"},"1:45814:4485":{"crate_id":1,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"1:22480:11873":{"crate_id":1,"path":["core","core_simd","simd","cmp","ord","SimdOrd"],"kind":"trait"},"1:2044:4883":{"crate_id":1,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"1:10715:3958":{"crate_id":1,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"1:46040:4511":{"crate_id":1,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"1:43666:4396":{"crate_id":1,"path":["core","str","iter","Matches"],"kind":"struct"},"1:2053:2722":{"crate_id":1,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"1:52198:13":{"crate_id":1,"path":["core","fn"],"kind":"primitive"},"1:9715:84":{"crate_id":1,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"1:40395:3376":{"crate_id":1,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"1:32679:2732":{"crate_id":1,"path":["core","ops","arith","Div"],"kind":"trait"},"1:32073:2684":{"crate_id":1,"path":["core","marker","Unpin"],"kind":"trait"},"1:43462:3253":{"crate_id":1,"path":["core","str","iter","Split"],"kind":"struct"},"1:2848:77":{"crate_id":1,"path":["core","convert","AsRef"],"kind":"trait"},"4:1342:4030":{"crate_id":4,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"1:43480:3257":{"crate_id":1,"path":["core","str","iter","RSplit"],"kind":"struct"},"1:45744:4481":{"crate_id":1,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"1:21511:12229":{"crate_id":1,"path":["core","core_simd","cast","sealed","Sealed"],"kind":"trait"},"1:22612:4271":{"crate_id":1,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"1:45455:4453":{"crate_id":1,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"1:10683:3953":{"crate_id":1,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"4:6421:12087":{"crate_id":4,"path":["alloc","task","LocalWake"],"kind":"trait"},"4:4502:3919":{"crate_id":4,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"1:8254:2091":{"crate_id":1,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"1:22349:2711":{"crate_id":1,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_exposed_provenance"],"kind":"function"},"1:10263:2653":{"crate_id":1,"path":["core","fmt","UpperExp"],"kind":"trait"},"1:6843:3361":{"crate_id":1,"path":["core","iter","adapters","map_windows","MapWindows"],"kind":"struct"},"1:10617:3951":{"crate_id":1,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"1:2583:2014":{"crate_id":1,"path":["core","ptr","addr_of"],"kind":"macro"},"1:10255:2650":{"crate_id":1,"path":["core","fmt","LowerHex"],"kind":"trait"},"1:13627:115":{"crate_id":1,"path":["core","task","wake","Context"],"kind":"struct"},"1:42587:73":{"crate_id":1,"path":["core","fmt","rt","Argument"],"kind":"struct"},"1:45590:4465":{"crate_id":1,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"1:10503:2673":{"crate_id":1,"path":["core","hash","BuildHasher"],"kind":"trait"},"1:5954:3917":{"crate_id":1,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"0:381:2032":{"crate_id":0,"path":["smallvec","CollectionAllocErr","AllocErr"],"kind":"variant"},"4:1568:209":{"crate_id":4,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"1:46583:4560":{"crate_id":1,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"1:44254:4434":{"crate_id":1,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"1:44439:4439":{"crate_id":1,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"1:52179:1700":{"crate_id":1,"path":["core","str"],"kind":"primitive"},"1:43716:4398":{"crate_id":1,"path":["core","str","iter","Lines"],"kind":"struct"},"4:7609:4071":{"crate_id":4,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"1:2601:102":{"crate_id":1,"path":["core","borrow","Borrow"],"kind":"trait"},"1:6849:4885":{"crate_id":1,"path":["core","iter","adapters","map_windows","MapWindowsInner"],"kind":"struct"},"1:45391:4447":{"crate_id":1,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"1:22696:4273":{"crate_id":1,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"1:21690:11793":{"crate_id":1,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"1:44048:4421":{"crate_id":1,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"1:44380:218":{"crate_id":1,"path":["core","future","ready","Ready"],"kind":"struct"},"1:41802:89":{"crate_id":1,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"1:22941:4301":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroU32Inner"],"kind":"struct"},"1:45700:4479":{"crate_id":1,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"1:11140:3270":{"crate_id":1,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"1:3176:2591":{"crate_id":1,"path":["core","ops","async_function","AsyncFn"],"kind":"trait"},"1:10047:2671":{"crate_id":1,"path":["core","fmt","builders","FormatterFn"],"kind":"struct"},"4:732:118":{"crate_id":4,"path":["alloc","borrow","Cow"],"kind":"enum"},"1:46173:4516":{"crate_id":1,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"4:7402:3907":{"crate_id":4,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"4:2757:4880":{"crate_id":4,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"1:3149:2731":{"crate_id":1,"path":["core","ops","arith","Add"],"kind":"trait"},"1:33335:2740":{"crate_id":1,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"4:5457:12073":{"crate_id":4,"path":["alloc","slice","Join"],"kind":"trait"},"1:43308:3267":{"crate_id":1,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"1:46629:4564":{"crate_id":1,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"1:22974:4304":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroUsizeInner"],"kind":"struct"},"1:45423:4451":{"crate_id":1,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"1:41674:2869":{"crate_id":1,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"4:7422:18531":{"crate_id":4,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"1:22680:4886":{"crate_id":1,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"1:40835:3349":{"crate_id":1,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"1:42075:95":{"crate_id":1,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"1:39218:214":{"crate_id":1,"path":["core","ops","range","RangeTo"],"kind":"struct"},"1:45470:4454":{"crate_id":1,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"1:21584:4268":{"crate_id":1,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"1:52189:869":{"crate_id":1,"path":["core","i128"],"kind":"primitive"},"1:5163:13701":{"crate_id":1,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"4:4423:264":{"crate_id":4,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"4:7372:2124":{"crate_id":4,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"1:7878:3337":{"crate_id":1,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"1:43297:3260":{"crate_id":1,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"1:23040:4310":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroIsizeInner"],"kind":"struct"},"1:41358:4234":{"crate_id":1,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"1:6854:3948":{"crate_id":1,"path":["core","iter","adapters","map_windows","Buffer"],"kind":"struct"},"1:52193:1823":{"crate_id":1,"path":["core","u64"],"kind":"primitive"},"4:2114:4042":{"crate_id":4,"path":["alloc","collections","btree","map","CursorMutKey"],"kind":"struct"},"1:43880:4411":{"crate_id":1,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"4:3026:4024":{"crate_id":4,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"1:1901:1662":{"crate_id":1,"path":["core","mem","size_of"],"kind":"function"},"4:5:1906":{"crate_id":4,"path":["alloc","vec"],"kind":"macro"},"4:6947:2632":{"crate_id":4,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"4:6924:2631":{"crate_id":4,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"1:43745:4401":{"crate_id":1,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"1:11252:3257":{"crate_id":1,"path":["core","slice","iter","RSplit"],"kind":"struct"},"1:45523:4461":{"crate_id":1,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"1:2857:143":{"crate_id":1,"path":["core","convert","From"],"kind":"trait"},"1:42155:97":{"crate_id":1,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"1:3576:14104":{"crate_id":1,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"1:7590:3364":{"crate_id":1,"path":["core","iter","adapters","zip","TrustedRandomAccess"],"kind":"trait"},"4:4269:3917":{"crate_id":4,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"1:21990:3245":{"crate_id":1,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"1:41761:2364":{"crate_id":1,"path":["core","result","IterMut"],"kind":"struct"},"4:3037:5006":{"crate_id":4,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"4:943:2087":{"crate_id":4,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"1:40342:3373":{"crate_id":1,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"1:10200:2391":{"crate_id":1,"path":["core","fmt","Write"],"kind":"trait"},"1:21493:12192":{"crate_id":1,"path":["core","core_simd","swizzle","resize","Resize"],"kind":"struct"},"1:1853:3917":{"crate_id":1,"path":["core","mem","maybe_uninit","Guard"],"kind":"struct"},"1:44023:4418":{"crate_id":1,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"1:3717:70":{"crate_id":1,"path":["core","any","Any"],"kind":"trait"},"1:43049:4902":{"crate_id":1,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"1:46135:4514":{"crate_id":1,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"4:1064:2342":{"crate_id":4,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"1:10261:2652":{"crate_id":1,"path":["core","fmt","LowerExp"],"kind":"trait"},"1:44089:4260":{"crate_id":1,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"1:41374:6666":{"crate_id":1,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"1:23018:4308":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroI64Inner"],"kind":"struct"},"1:12344:3242":{"crate_id":1,"path":["core","slice","GetManyMutError"],"kind":"struct"},"1:31980:4312":{"crate_id":1,"path":["core","error","private","Internal"],"kind":"struct"},"1:11359:3256":{"crate_id":1,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"1:32105:114":{"crate_id":1,"path":["core","marker","ConstParamTy"],"kind":"trait"},"1:7591:3365":{"crate_id":1,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"1:40012:6636":{"crate_id":1,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"1:12818:4241":{"crate_id":1,"path":["core","str","pattern","Pattern"],"kind":"trait"},"1:46697:4574":{"crate_id":1,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"4:1356:4031":{"crate_id":4,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"1:40420:3378":{"crate_id":1,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"1:22335:11882":{"crate_id":1,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr"],"kind":"trait"},"4:280:2342":{"crate_id":4,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"1:2584:2015":{"crate_id":1,"path":["core","ptr","addr_of_mut"],"kind":"macro"},"1:43512:4392":{"crate_id":1,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"1:12838:6722":{"crate_id":1,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"4:1518:4033":{"crate_id":4,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"1:46504:4555":{"crate_id":1,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"4:6039:3924":{"crate_id":4,"path":["alloc","sync","Weak"],"kind":"struct"},"1:11072:2364":{"crate_id":1,"path":["core","slice","iter","IterMut"],"kind":"struct"},"1:41560:4238":{"crate_id":1,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"1:40363:3374":{"crate_id":1,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"1:46667:4572":{"crate_id":1,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"4:7714:2105":{"crate_id":4,"path":["alloc","vec","extract_if","ExtractIf"],"kind":"struct"},"1:45619:4467":{"crate_id":1,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"1:40434:3379":{"crate_id":1,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"1:45973:4508":{"crate_id":1,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"1:40333:3372":{"crate_id":1,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"1:22719:4278":{"crate_id":1,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"1:42116:90":{"crate_id":1,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"1:40817:3345":{"crate_id":1,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"1:2657:200":{"crate_id":1,"path":["core","cmp","PartialEq"],"kind":"trait"},"1:41342:4232":{"crate_id":1,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"1:44489:2645":{"crate_id":1,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"1:41696:3133":{"crate_id":1,"path":["core","panicking","AssertKind"],"kind":"enum"},"1:22788:13826":{"crate_id":1,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"1:52192:1817":{"crate_id":1,"path":["core","u32"],"kind":"primitive"},"4:4468:3917":{"crate_id":4,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"1:39997:4207":{"crate_id":1,"path":["core","char","EscapeDefault"],"kind":"struct"}},"external_crates":{"2":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":28}