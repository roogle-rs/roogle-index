{"root":"0:0:2760","crate_version":"2.0.0-alpha.7","includes_private":false,"index":{"1:13745:15808":{"id":"1:13745:15808","crate_id":1,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"1:42594:203"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"1:42592:206","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:11552:252","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:11552:252","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:137:1212":{"id":"0:137:1212","crate_id":0,"name":"new","span":{"filename":"src/lib.rs","begin":[611,4],"end":[617,5]},"visibility":"public","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"SmallVec","id":"0:54:2482","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"const":{"expr":"N","value":null,"is_literal":false}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13767:12716":{"id":"1:13767:12716","crate_id":1,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EncodeUtf16","id":"1:44884:4689","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13733:1027":{"id":"1:13733:1027","crate_id":1,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"1:53521:492"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:26:830":{"id":"0:26:830","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[115,4],"end":[117,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"core::fmt::Formatter","id":"1:10613:156","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"core::fmt::Result","id":"1:10594:238","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2787-0:27:2445":{"id":"b:1:2787-0:27:2445","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32804:251","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2781:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RawSmallVec","id":"0:27:2445","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"const":{"expr":"N","value":null,"is_literal":false}}],"bindings":[]}}}},"items":["1:2789:2767"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:243:2662":{"id":"0:243:2662","crate_id":0,"name":"extend","span":{"filename":"src/lib.rs","begin":[1732,4],"end":[1734,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["iterable",{"generic":"I"}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"1:8319:177","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"generic":"T"}}}}]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:74":{"id":"0:74","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[326,0],"end":[342,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[{"outlives":"'a"}],"default":null,"synthetic":false}}},{"name":"N","kind":{"const":{"type":{"primitive":"usize"},"default":null}}}],"where_predicates":[]},"provided_trait_methods":["sum","size_hint","map","try_find","min_by","try_for_each","try_collect","scan","intersperse_with","advance_by","min","is_sorted_by_key","all","product","rev","position","take","fold","collect_into","flat_map","filter_map","last","nth","any","__iterator_get_unchecked","cmp_by","le","unzip","rposition","reduce","partial_cmp","partition","enumerate","flatten","lt","peekable","ge","step_by","partial_cmp_by","gt","copied","max_by_key","try_reduce","partition_in_place","map_windows","skip_while","chain","count","filter","skip","for_each","cycle","max_by","cmp","find","eq_by","is_partitioned","inspect","take_while","zip","is_sorted","cloned","array_chunks","min_by_key","find_map","try_fold","by_ref","fuse","map_while","ne","intersperse","next_chunk","eq","max","is_sorted_by","collect"],"trait":{"name":"Iterator","id":"1:8495:190","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Drain","id":"0:66:2487","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"const":{"expr":"N","value":null,"is_literal":false}}],"bindings":[]}}}},"items":["0:78:185","0:79:1226","0:81:2493"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:13844:16773":{"id":"1:13844:16773","crate_id":1,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:304":{"id":"0:304","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1996,0],"end":[2002,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"N","kind":{"const":{"type":{"primitive":"usize"},"default":null}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"1:8319:177","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"resolved_path":{"name":"SmallVec","id":"0:54:2482","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"const":{"expr":"N","value":null,"is_literal":false}}],"bindings":[]}}}}}},"items":["0:308:2526","0:309:185","0:310:985"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:13757:16740":{"id":"1:13757:16740","crate_id":1,"name":"split_at_checked","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that’s not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut_checked`]\nmethod.\n\n[`split_at_mut_checked`]: str::split_at_mut_checked\n\n# Examples\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at_checked(3).unwrap();\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n\nassert_eq!(None, s.split_at_checked(13));  // Inside “ö”\nassert_eq!(None, s.split_at_checked(16));  // Beyond the string length\n```","links":{"str::split_at_mut_checked":"1:13758:16741"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"1:42592:206","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:183:2671":{"id":"0:183:2671","crate_id":0,"name":"into_inner","span":{"filename":"src/lib.rs","begin":[1325,4],"end":[1339,5]},"visibility":"public","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Result","id":"1:42860:238","args":{"angle_bracketed":{"args":[{"type":{"array":{"type":{"generic":"T"},"len":"N"}}},{"type":{"generic":"Self"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13827:16765":{"id":"1:13827:16765","crate_id":1,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns the substring after the prefix,\nwrapped in `Some`. Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:53521:492","self::pattern":"1:13426:7148"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["prefix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:42592:206","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13432:4674","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3959-0:102:2526":{"id":"b:1:3959-0:102:2526","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:32804:251","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3957:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:102:2526","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"const":{"expr":"N","value":null,"is_literal":false}}],"bindings":[]}}}},"items":["1:3961:1870"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:42688:3273-0:102:2526":{"id":"a:1:42688:3273-0:102:2526","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"N","kind":{"const":{"type":{"primitive":"usize"},"default":null}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"UnwindSafe","id":"1:42688:3273","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:42689:3272","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:42688:3273","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:102:2526","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"const":{"expr":"N","value":null,"is_literal":false}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:295:496":{"id":"0:295:496","crate_id":0,"name":"clone","span":{"filename":"src/lib.rs","begin":[1939,4],"end":[1941,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"IntoIter","id":"0:102:2526","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"const":{"expr":"N","value":null,"is_literal":false}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:133":{"id":"0:133","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[604,0],"end":[1541,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"N","kind":{"const":{"type":{"primitive":"usize"},"default":null}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"SmallVec","id":"0:54:2482","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"const":{"expr":"N","value":null,"is_literal":false}}],"bindings":[]}}}},"items":["0:137:1212","0:138:2530","0:139:2534","0:140:2536","0:141:2538","0:142:2552","0:145:2504","0:146:2532","0:147:1027","0:148:2565","0:149:2455","0:150:2566","0:151:2582","0:152:2585","0:155:2632","0:157:2635","0:158:2636","0:160:2533","0:161:2639","0:162:2633","0:163:2647","0:164:2648","0:165:2649","0:166:2650","0:167:2651","0:168:2518","0:169:2529","0:170:2652","0:171:2657","0:172:2658","0:173:2659","0:177:2667","0:179:352","0:180:2501","0:181:2669","0:182:2670","0:183:2671","0:184:2672","0:186:2674","0:188:2675","0:190:2678","0:194:2676","0:196:2687","0:198:2528"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:13843:16772":{"id":"1:13843:16772","crate_id":1,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"1:40488:7024","Self::is_ascii":"1:13842:16771"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42592:206","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"AsciiChar","id":"1:40488:7024","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:271:863":{"id":"0:271:863","crate_id":0,"name":"from_iter","span":{"filename":"src/lib.rs","begin":[1845,4],"end":[1849,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["iterable",{"generic":"I"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"1:8319:177","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"generic":"T"}}}}]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2787-0:102:2526":{"id":"b:1:2787-0:102:2526","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32804:251","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2781:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:102:2526","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"const":{"expr":"N","value":null,"is_literal":false}}],"bindings":[]}}}},"items":["1:2789:2767"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"4:5716:17521":{"id":"4:5716:17521","crate_id":4,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"4:7759:257"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"4:7759:257","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:63":{"id":"0:63","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[305,0],"end":[305,63]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:3315:261","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"N","kind":{"const":{"type":{"primitive":"usize"},"default":null}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:3315:261","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"SmallVec","id":"0:54:2482","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"const":{"expr":"N","value":null,"is_literal":false}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:3104-0:54:2482":{"id":"b:1:3104-0:54:2482","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:3063:175","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:3073:271","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"SmallVec","id":"0:54:2482","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"const":{"expr":"N","value":null,"is_literal":false}}],"bindings":[]}}}},"items":["1:3107:150","1:3108:1855"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2787-0:396:2430":{"id":"b:1:2787-0:396:2430","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32804:251","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2781:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"CollectionAllocErr","id":"0:396:2430","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2789:2767"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:3350:3084-0:66:2487":{"id":"a:1:3350:3084-0:66:2487","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"N","kind":{"const":{"type":{"primitive":"usize"},"default":null}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"1:3350:3084","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Drain","id":"0:66:2487","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"const":{"expr":"N","value":null,"is_literal":false}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:399:2434":{"id":"0:399:2434","crate_id":0,"name":"AllocErr","span":{"filename":"src/lib.rs","begin":[109,4],"end":[112,5]},"visibility":"default","docs":"The allocator return an error","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":{"struct":{"fields":["0:400:2436"],"fields_stripped":false}},"discriminant":null}}},"0:27:2445":{"id":"0:27:2445","crate_id":0,"name":"RawSmallVec","span":{"filename":"src/lib.rs","begin":[131,0],"end":[134,1]},"visibility":"public","docs":"Either a stack array with `length <= N` or a heap array\nwhose pointer and capacity are stored here.\n\nWe store a `NonNull<T>` instead of a `*mut T`, so that\nniche-optimization can be performed and the type is covariant\nwith respect to `T`.","links":{},"attrs":["#[repr(C)]"],"deprecation":null,"inner":{"union":{"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"N","kind":{"const":{"type":{"primitive":"usize"},"default":null}}}],"where_predicates":[]},"fields_stripped":true,"fields":[],"impls":["a:1:32803:249-0:27:2445","a:1:3315:261-0:27:2445","a:1:3350:3084-0:27:2445","a:1:32861:3087-0:27:2445","a:1:42688:3273-0:27:2445","a:1:42689:3272-0:27:2445","b:1:2784-0:27:2445","b:1:2787-0:27:2445","b:1:3089-0:27:2445","b:1:3093-0:27:2445","b:1:3099-0:27:2445","b:1:3104-0:27:2445","b:1:3959-0:27:2445"]}}},"0:402:830":{"id":"0:402:830","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[104,9],"end":[104,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"1:10613:156","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"1:10594:238","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3104-0:102:2526":{"id":"b:1:3104-0:102:2526","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:3063:175","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:3073:271","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:102:2526","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"const":{"expr":"N","value":null,"is_literal":false}}],"bindings":[]}}}},"items":["1:3107:150","1:3108:1855"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:165:2649":{"id":"0:165:2649","crate_id":0,"name":"try_reserve_exact","span":{"filename":"src/lib.rs","begin":[1103,4],"end":[1113,5]},"visibility":"public","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["additional",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Result","id":"1:42860:238","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}},{"type":{"resolved_path":{"name":"CollectionAllocErr","id":"0:396:2430","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13738:16733":{"id":"1:13738:16733","crate_id":1,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nIf `index` is greater than the length of the string, this returns the length of the string.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"1:13736:16732"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:3315:261-0:396:2430":{"id":"a:1:3315:261-0:396:2430","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:3315:261","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"CollectionAllocErr","id":"0:396:2430","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:3099-0:54:2482":{"id":"b:1:3099-0:54:2482","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:3073:271","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:3069:272","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"SmallVec","id":"0:54:2482","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"const":{"expr":"N","value":null,"is_literal":false}}],"bindings":[]}}}},"items":["1:3102:150","1:3103:1857"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:13741:16734":{"id":"1:13741:16734","crate_id":1,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"1:12948:7156"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:4:5952-0:396:2430":{"id":"b:4:5952-0:396:2430","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"1:10651:133","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:32804:251","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"ToString","id":"4:5950:265","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"CollectionAllocErr","id":"0:396:2430","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["4:5954:1830"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2816-0:102:2526":{"id":"b:1:2816-0:102:2526","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2804:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"CloneToUninit","id":"1:2814:2995","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:102:2526","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"const":{"expr":"N","value":null,"is_literal":false}}],"bindings":[]}}}},"items":["1:2818:12524"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:3095:860":{"id":"1:3095:860","crate_id":1,"name":"from","span":null,"visibility":"default","docs":"Returns the argument unchanged.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["t",{"generic":"T"}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:42689:3272-0:27:2445":{"id":"a:1:42689:3272-0:27:2445","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"N","kind":{"const":{"type":{"primitive":"usize"},"default":null}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:42689:3272","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:42689:3272","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawSmallVec","id":"0:27:2445","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"const":{"expr":"N","value":null,"is_literal":false}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:190:2678":{"id":"0:190:2678","crate_id":0,"name":"dedup_by_key","span":{"filename":"src/lib.rs","begin":[1373,4],"end":[1379,5]},"visibility":"public","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["key",{"generic":"F"}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:3589:154","args":{"parenthesized":{"inputs":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}}],"output":{"generic":"K"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"PartialEq","id":"1:2866:213","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:251":{"id":"0:251","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1782,0],"end":[1802,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(feature = \"may_dangle\"))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"N","kind":{"const":{"type":{"primitive":"usize"},"default":null}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Drop","id":"1:3580:2496","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"SmallVec","id":"0:54:2482","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"const":{"expr":"N","value":null,"is_literal":false}}],"bindings":[]}}}},"items":["0:254:696"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:211":{"id":"0:211","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1608,0],"end":[1642,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2804:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"N","kind":{"const":{"type":{"primitive":"usize"},"default":null}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"SmallVec","id":"0:54:2482","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"const":{"expr":"N","value":null,"is_literal":false}}],"bindings":[]}}}},"items":["0:214:2736","0:215:2739"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:2789:2767":{"id":"1:2789:2767","crate_id":1,"name":"borrow_mut","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3099-0:66:2487":{"id":"b:1:3099-0:66:2487","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:3073:271","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:3069:272","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Drain","id":"0:66:2487","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"const":{"expr":"N","value":null,"is_literal":false}}],"bindings":[]}}}},"items":["1:3102:150","1:3103:1857"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:79:1226":{"id":"0:79:1226","crate_id":0,"name":"next","span":{"filename":"src/lib.rs","begin":[330,4],"end":[336,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42592:206","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3093-0:102:2526":{"id":"b:1:3093-0:102:2526","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:3066:157","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:102:2526","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"const":{"expr":"N","value":null,"is_literal":false}}],"bindings":[]}}}},"items":["1:3095:860"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:157:2635":{"id":"0:157:2635","crate_id":0,"name":"pop","span":{"filename":"src/lib.rs","begin":[982,4],"end":[994,5]},"visibility":"public","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42592:206","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13835:16768":{"id":"1:13835:16768","crate_id":1,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:53521:492","self::pattern":"1:13426:7148"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13432:4674","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:339":{"id":"0:339","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[2043,0],"end":[2051,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"N","kind":{"const":{"type":{"primitive":"usize"},"default":null}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"PartialEq","id":"1:2866:213","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"1:2866:213","args":{"angle_bracketed":{"args":[{"type":{"slice":{"generic":"U"}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"SmallVec","id":"0:54:2482","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"const":{"expr":"N","value":null,"is_literal":false}}],"bindings":[]}}}},"items":["0:343:725"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:13853:16780":{"id":"1:13853:16780","crate_id":1,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"1:5057:16780"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeUnicode","id":"1:44909:4764","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"4:5703:17518":{"id":"4:5703:17518","crate_id":4,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"4:297:2410","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"4:297:2410","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13837:16769":{"id":"1:13837:16769","crate_id":1,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:53521:492","self::pattern":"1:13426:7148"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13432:4674","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:13432:4674","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:13449:7154","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3959-0:66:2487":{"id":"b:1:3959-0:66:2487","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:32804:251","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3957:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Drain","id":"0:66:2487","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"const":{"expr":"N","value":null,"is_literal":false}}],"bindings":[]}}}},"items":["1:3961:1870"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:164:2648":{"id":"0:164:2648","crate_id":0,"name":"reserve_exact","span":{"filename":"src/lib.rs","begin":[1090,4],"end":[1100,5]},"visibility":"public","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["additional",{"primitive":"usize"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:188:2675":{"id":"0:188:2675","crate_id":0,"name":"dedup","span":{"filename":"src/lib.rs","begin":[1365,4],"end":[1370,5]},"visibility":"public","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"PartialEq","id":"1:2866:213","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:127":{"id":"0:127","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[601,0],"end":[601,63]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"N","kind":{"const":{"type":{"primitive":"usize"},"default":null}}}],"where_predicates":[]},"provided_trait_methods":["is_empty","len"],"trait":{"name":"ExactSizeIterator","id":"1:8440:2495","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:102:2526","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"const":{"expr":"N","value":null,"is_literal":false}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:258:696":{"id":"0:258:696","crate_id":0,"name":"drop","span":{"filename":"src/lib.rs","begin":[1805,4],"end":[1825,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:286:860":{"id":"0:286:860","crate_id":0,"name":"from","span":{"filename":"src/lib.rs","begin":[1909,4],"end":[1911,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["array",{"resolved_path":{"name":"Vec","id":"4:7185:280","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:167:2651":{"id":"0:167:2651","crate_id":0,"name":"truncate","span":{"filename":"src/lib.rs","begin":[1142,4],"end":[1155,5]},"visibility":"public","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["len",{"primitive":"usize"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:88":{"id":"0:88","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[354,0],"end":[359,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"N","kind":{"const":{"type":{"primitive":"usize"},"default":null}}}],"where_predicates":[]},"provided_trait_methods":["is_empty","len"],"trait":{"name":"ExactSizeIterator","id":"1:8440:2495","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Drain","id":"0:66:2487","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"const":{"expr":"N","value":null,"is_literal":false}}],"bindings":[]}}}},"items":["0:92:1027"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:8323-0:66:2487":{"id":"b:1:8323-0:66:2487","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"1:8495:190","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"1:8319:177","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Drain","id":"0:66:2487","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"const":{"expr":"N","value":null,"is_literal":false}}],"bindings":[]}}}},"items":["1:8325:185","1:8326:2526","1:8327:985"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"I"}}}},"1:13764:12715":{"id":"1:13764:12715","crate_id":1,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"1:13763:12714"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitAsciiWhitespace","id":"1:44875:4837","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:8326:2526":{"id":"1:8326:2526","crate_id":1,"name":"IntoIter","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"I"}}}},"4:5718:2737":{"id":"4:5718:2737","crate_id":4,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"4:7759:257"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"4:7759:257","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13821:16762":{"id":"1:13821:16762","crate_id":1,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:198:2528":{"id":"0:198:2528","crate_id":0,"name":"from_raw_parts","span":{"filename":"src/lib.rs","begin":[1486,4],"end":[1501,5]},"visibility":"public","docs":"Creates a `SmallVec` directly from the raw components of another `SmallVec`.\n\n# Safety\n\nThis is highly unsafe, due to the number of invariants that aren’t checked:\n\n- `ptr` needs to have been previously allocated via `SmallVec` from its spilled storage (at least, it’s highly likely to be incorrect if it wasn’t).\n- `ptr`’s `A::Item` type needs to be the same size and alignment that it was allocated with\n- `length` needs to be less than or equal to `capacity`.\n- `capacity` needs to be the capacity that the pointer was allocated with.\n\nViolating these may cause problems like corrupting the allocator’s internal data structures.\n\nAdditionally, `capacity` must be greater than the amount of inline storage `A` has; that is, the new `SmallVec` must need to spill over into heap allocated storage. This condition is asserted against.\n\nThe ownership of `ptr` is effectively transferred to the `SmallVec` which may then deallocate, reallocate or change the contents of memory pointed to by the pointer at will. Ensure that nothing else uses the pointer after calling this function.\n\n# Examples\n\n```\nuse std::mem;\nuse std::ptr;\nuse smallvec::{SmallVec, smallvec};\n\nfn main() {\n    let mut v: SmallVec<_, 1> = smallvec![1, 2, 3];\n\n    // Pull out the important parts of `v`.\n    let p = v.as_mut_ptr();\n    let len = v.len();\n    let cap = v.capacity();\n    let spilled = v.spilled();\n\n    unsafe {\n        // Forget all about `v`. The heap allocation that stored the\n        // three values won't be deallocated.\n        mem::forget(v);\n\n        // Overwrite memory with [4, 5, 6].\n        //\n        // This is only safe if `spilled` is true! Otherwise, we are\n        // writing into the old `SmallVec`'s inline storage on the\n        // stack.\n        assert!(spilled);\n        for i in 0..len {\n            ptr::write(p.add(i), 4 + i);\n        }\n\n        // Put everything back together into a SmallVec with a different\n        // amount of inline storage, but which is still less than `cap`.\n        let rebuilt = SmallVec::<_, 2>::from_raw_parts(p, len, cap);\n        assert_eq!(&*rebuilt, &[4, 5, 6]);\n    }\n}\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["ptr",{"raw_pointer":{"mutable":true,"type":{"generic":"T"}}}],["length",{"primitive":"usize"}],["capacity",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"SmallVec","id":"0:54:2482","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"const":{"expr":"N","value":null,"is_literal":false}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2816-0:54:2482":{"id":"b:1:2816-0:54:2482","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2804:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"CloneToUninit","id":"1:2814:2995","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"SmallVec","id":"0:54:2482","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"const":{"expr":"N","value":null,"is_literal":false}}],"bindings":[]}}}},"items":["1:2818:12524"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:101:696":{"id":"0:101:696","crate_id":0,"name":"drop","span":{"filename":"src/lib.rs","begin":[364,4],"end":[388,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:97":{"id":"0:97","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[363,0],"end":[389,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[{"outlives":"'a"}],"default":null,"synthetic":false}}},{"name":"N","kind":{"const":{"type":{"primitive":"usize"},"default":null}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Drop","id":"1:3580:2496","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Drain","id":"0:66:2487","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"const":{"expr":"N","value":null,"is_literal":false}}],"bindings":[]}}}},"items":["0:101:696"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:397:2432":{"id":"0:397:2432","crate_id":0,"name":"CapacityOverflow","span":{"filename":"src/lib.rs","begin":[107,4],"end":[107,20]},"visibility":"default","docs":"Overflow `usize::MAX` or other error during size computation","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"0:173:2659":{"id":"0:173:2659","crate_id":0,"name":"insert","span":{"filename":"src/lib.rs","begin":[1221,4],"end":[1237,5]},"visibility":"public","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}],["value",{"generic":"T"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"4:5708:17520":{"id":"4:5708:17520","crate_id":4,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"4:7759:257"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"4:7759:257","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:78:185":{"id":"0:78:185","crate_id":0,"name":"Item","span":{"filename":"src/lib.rs","begin":[327,4],"end":[327,18]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"b:4:780-0:102:2526":{"id":"b:4:780-0:102:2526","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2804:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"4:776:264","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:102:2526","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"const":{"expr":"N","value":null,"is_literal":false}}],"bindings":[]}}}},"items":["4:782:4454","4:783:12525","4:784:12526"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:196:2687":{"id":"0:196:2687","crate_id":0,"name":"resize_with","span":{"filename":"src/lib.rs","begin":[1413,4],"end":[1428,5]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["new_len",{"primitive":"usize"}],["f",{"generic":"F"}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:3589:154","args":{"parenthesized":{"inputs":[],"output":{"generic":"T"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:146:2532":{"id":"0:146:2532","crate_id":0,"name":"inline_size","span":{"filename":"src/lib.rs","begin":[767,4],"end":[773,5]},"visibility":"public","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:42689:3272-0:396:2430":{"id":"a:1:42689:3272-0:396:2430","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:42689:3272","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"CollectionAllocErr","id":"0:396:2430","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:13814:16758":{"id":"1:13814:16758","crate_id":1,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"4:5954:1830":{"id":"4:5954:1830","crate_id":4,"name":"to_string","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"4:7759:257","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:140:2536":{"id":"0:140:2536","crate_id":0,"name":"from_buf","span":{"filename":"src/lib.rs","begin":[667,4],"end":[674,5]},"visibility":"public","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["buf",{"array":{"type":{"generic":"T"},"len":"N"}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:362":{"id":"0:362","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[2093,0],"end":[2097,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Hash","id":"1:10864:165","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"N","kind":{"const":{"type":{"primitive":"usize"},"default":null}}}],"where_predicates":[]},"provided_trait_methods":["hash_slice"],"trait":{"name":"Hash","id":"1:10864:165","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"SmallVec","id":"0:54:2482","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"const":{"expr":"N","value":null,"is_literal":false}}],"bindings":[]}}}},"items":["0:365:902"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:204:60":{"id":"0:204:60","crate_id":0,"name":"default","span":{"filename":"src/lib.rs","begin":[1545,4],"end":[1547,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:259":{"id":"0:259","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1828,0],"end":[1835,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"N","kind":{"const":{"type":{"primitive":"usize"},"default":null}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Deref","id":"1:3551:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"SmallVec","id":"0:54:2482","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"const":{"expr":"N","value":null,"is_literal":false}}],"bindings":[]}}}},"items":["0:262:263","0:263:654"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:277:860":{"id":"0:277:860","crate_id":0,"name":"from","span":{"filename":"src/lib.rs","begin":[1883,4],"end":[1885,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["slice",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"slice":{"generic":"T"}}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:255":{"id":"0:255","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1804,0],"end":[1826,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"N","kind":{"const":{"type":{"primitive":"usize"},"default":null}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Drop","id":"1:3580:2496","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:102:2526","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"const":{"expr":"N","value":null,"is_literal":false}}],"bindings":[]}}}},"items":["0:258:696"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:13840:16770":{"id":"1:13840:16770","crate_id":1,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"1:13386:149","`FromStr`":"1:13385:6859"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"1:42860:238","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"FromStr","id":"1:13385:6859","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"1:13385:6859","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"4:5704:3097":{"id":"4:5704:3097","crate_id":4,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"4:7759:257"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["from",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"4:7759:257","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13432:4674","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:139:2534":{"id":"0:139:2534","crate_id":0,"name":"from_vec","span":{"filename":"src/lib.rs","begin":[629,4],"end":[664,5]},"visibility":"public","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["vec",{"resolved_path":{"name":"Vec","id":"4:7185:280","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2784-0:27:2445":{"id":"b:1:2784-0:27:2445","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32804:251","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2778:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RawSmallVec","id":"0:27:2445","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"const":{"expr":"N","value":null,"is_literal":false}}],"bindings":[]}}}},"items":["1:2786:2411"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:396:2430":{"id":"0:396:2430","crate_id":0,"name":"CollectionAllocErr","span":{"filename":"src/lib.rs","begin":[105,0],"end":[113,1]},"visibility":"public","docs":"Error type for APIs with fallible heap allocation","links":{},"attrs":[],"deprecation":null,"inner":{"enum":{"generics":{"params":[],"where_predicates":[]},"variants_stripped":false,"variants":["0:397:2432","0:399:2434"],"impls":["a:1:32803:249-0:396:2430","a:1:3315:261-0:396:2430","a:1:3350:3084-0:396:2430","a:1:32861:3087-0:396:2430","a:1:42688:3273-0:396:2430","a:1:42689:3272-0:396:2430","b:1:2784-0:396:2430","b:1:2787-0:396:2430","b:1:3089-0:396:2430","b:1:3093-0:396:2430","b:1:3099-0:396:2430","b:1:3104-0:396:2430","b:1:3959-0:396:2430","b:4:5952-0:396:2430","0:401","0:25"]}}},"0:310:985":{"id":"0:310:985","crate_id":0,"name":"into_iter","span":{"filename":"src/lib.rs","begin":[1999,4],"end":[2001,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"qualified_path":{"name":"IntoIter","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"1:8319:177","args":null}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:349":{"id":"0:349","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[2063,0],"end":[2071,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"N","kind":{"const":{"type":{"primitive":"usize"},"default":null}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"PartialEq","id":"1:2866:213","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"1:2866:213","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"generic":"U"}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"SmallVec","id":"0:54:2482","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"const":{"expr":"N","value":null,"is_literal":false}}],"bindings":[]}}}},"items":["0:353:725"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:353:725":{"id":"0:353:725","crate_id":0,"name":"eq","span":{"filename":"src/lib.rs","begin":[2068,4],"end":[2070,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"generic":"U"}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:395:830":{"id":"0:395:830","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[2140,4],"end":[2142,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"core::fmt::Formatter","id":"1:10613:156","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"core::fmt::Result","id":"1:10594:238","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:122:2493":{"id":"0:122:2493","crate_id":0,"name":"size_hint","span":{"filename":"src/lib.rs","begin":[576,4],"end":[579,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"tuple":[{"primitive":"usize"},{"resolved_path":{"name":"Option","id":"1:42592:206","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:390:830":{"id":"0:390:830","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[2134,4],"end":[2136,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"core::fmt::Formatter","id":"1:10613:156","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"core::fmt::Result","id":"1:10594:238","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13770:16745":{"id":"1:13770:16745","crate_id":1,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, in which case this function will return true if\nthe `&str` is a prefix of this string slice.\n\nThe [pattern] can also be a [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\nThese will only be checked against the first character of this string slice.\nLook at the second example below regarding behavior for slices of [`char`]s.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```\n\n```\nlet bananas = \"bananas\";\n\n// Note that both of these assert successfully.\nassert!(bananas.starts_with(&['b', 'a', 'n', 'a']));\nassert!(bananas.starts_with(&['a', 'b', 'c', 'd']));\n```","links":{"prim@char":"1:53521:492","self::pattern":"1:13426:7148"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13432:4674","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3959-0:54:2482":{"id":"b:1:3959-0:54:2482","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:32804:251","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3957:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"SmallVec","id":"0:54:2482","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"const":{"expr":"N","value":null,"is_literal":false}}],"bindings":[]}}}},"items":["1:3961:1870"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:343:725":{"id":"0:343:725","crate_id":0,"name":"eq","span":{"filename":"src/lib.rs","begin":[2048,4],"end":[2050,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"generic":"U"}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2787-0:54:2482":{"id":"b:1:2787-0:54:2482","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32804:251","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2781:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"SmallVec","id":"0:54:2482","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"const":{"expr":"N","value":null,"is_literal":false}}],"bindings":[]}}}},"items":["1:2789:2767"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:13825:16764":{"id":"1:13825:16764","crate_id":1,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:53521:492","self::pattern":"1:13426:7148"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13432:4674","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:92:1027":{"id":"0:92:1027","crate_id":0,"name":"len","span":{"filename":"src/lib.rs","begin":[356,4],"end":[358,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:291:499":{"id":"0:291:499","crate_id":0,"name":"clone_from","span":{"filename":"src/lib.rs","begin":[1920,4],"end":[1934,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["source",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13799:16753":{"id":"1:13799:16753","crate_id":1,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:42592:206","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13432:4674","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13845:16774":{"id":"1:13845:16774","crate_id":1,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13768:15286":{"id":"1:13768:15286","crate_id":1,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"1:53521:492","self::pattern":"1:13426:7148"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13432:4674","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:374:2767":{"id":"0:374:2767","crate_id":0,"name":"borrow_mut","span":{"filename":"src/lib.rs","begin":[2108,4],"end":[2110,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"generic":"T"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13820:16761":{"id":"1:13820:16761","crate_id":1,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13854:16781":{"id":"1:13854:16781","crate_id":1,"name":"substr_range","span":null,"visibility":"public","docs":"Returns the range that a substring points to.\n\nReturns `None` if `substr` does not point within `self`.\n\nUnlike [`str::find`], **this does not search through the string**.\nInstead, it uses pointer arithmetic to find where in the string\n`substr` is derived from.\n\nThis is useful for extending [`str::split`] and similar methods.\n\nNote that this method may return false positives (typically either\n`Some(0..0)` or `Some(self.len()..self.len())`) if `substr` is a\nzero-length `str` that points at the beginning or end of another,\nindependent, `str`.\n\n# Examples\n```\n#![feature(substr_range)]\n\nlet data = \"a, b, b, a\";\nlet mut iter = data.split(\", \").map(|s| data.substr_range(s).unwrap());\n\nassert_eq!(iter.next(), Some(0..1));\nassert_eq!(iter.next(), Some(3..4));\nassert_eq!(iter.next(), Some(6..7));\nassert_eq!(iter.next(), Some(9..10));\n```","links":{"`str::split`":"1:13782:16747","`str::find`":"1:13775:3509"},"attrs":["#[must_use]","#[unstable(feature = \"substr_range\", issue = \"126769\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["substr",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42592:206","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Range","id":"1:40167:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:42688:3273-0:54:2482":{"id":"a:1:42688:3273-0:54:2482","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"N","kind":{"const":{"type":{"primitive":"usize"},"default":null}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"UnwindSafe","id":"1:42688:3273","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:42689:3272","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:42688:3273","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"SmallVec","id":"0:54:2482","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"const":{"expr":"N","value":null,"is_literal":false}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:290:496":{"id":"0:290:496","crate_id":0,"name":"clone","span":{"filename":"src/lib.rs","begin":[1916,4],"end":[1918,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SmallVec","id":"0:54:2482","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"const":{"expr":"N","value":null,"is_literal":false}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:32861:3087-0:54:2482":{"id":"a:1:32861:3087-0:54:2482","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"N","kind":{"const":{"type":{"primitive":"usize"},"default":null}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"1:32861:3087","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32861:3087","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"SmallVec","id":"0:54:2482","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"const":{"expr":"N","value":null,"is_literal":false}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:13775:3509":{"id":"1:13775:3509","crate_id":1,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"1:42594:203","prim@char":"1:53521:492","self::pattern":"1:13426:7148"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:42592:206","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13432:4674","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:205":{"id":"0:205","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1550,0],"end":[1606,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Copy","id":"1:3310:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"N","kind":{"const":{"type":{"primitive":"usize"},"default":null}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"SmallVec","id":"0:54:2482","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"const":{"expr":"N","value":null,"is_literal":false}}],"bindings":[]}}}},"items":["0:208:2729","0:209:2730","0:210:2734"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:3104-0:66:2487":{"id":"b:1:3104-0:66:2487","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:3063:175","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:3073:271","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Drain","id":"0:66:2487","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"const":{"expr":"N","value":null,"is_literal":false}}],"bindings":[]}}}},"items":["1:3107:150","1:3108:1855"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:370:2411":{"id":"0:370:2411","crate_id":0,"name":"borrow","span":{"filename":"src/lib.rs","begin":[2101,4],"end":[2103,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"generic":"T"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3959-0:396:2430":{"id":"b:1:3959-0:396:2430","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:32804:251","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3957:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"CollectionAllocErr","id":"0:396:2430","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3961:1870"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:13804:2962":{"id":"1:13804:2962","crate_id":1,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::rmatches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"1:13426:7148","`DoubleEndedIterator`":"1:8387:134","prim@char":"1:53521:492","str::rmatches":"1:13806:16755"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Matches","id":"1:44796:4832","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13432:4674","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:387":{"id":"0:387","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[2133,0],"end":[2137,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Debug","id":"1:10646:123","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"N","kind":{"const":{"type":{"primitive":"usize"},"default":null}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:10646:123","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:102:2526","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"const":{"expr":"N","value":null,"is_literal":false}}],"bindings":[]}}}},"items":["0:390:830"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2784-0:396:2430":{"id":"b:1:2784-0:396:2430","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32804:251","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2778:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"CollectionAllocErr","id":"0:396:2430","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2786:2411"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:13755:16738":{"id":"1:13755:16738","crate_id":1,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_checked`](str::split_at_checked).\n\n# Examples\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_checked":"1:13757:16740","str::split_at_mut":"1:13756:16739"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:54:2482":{"id":"0:54:2482","crate_id":0,"name":"SmallVec","span":{"filename":"src/lib.rs","begin":[298,0],"end":[302,1]},"visibility":"public","docs":null,"links":{},"attrs":["#[repr(C)]"],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"N","kind":{"const":{"type":{"primitive":"usize"},"default":null}}}],"where_predicates":[]},"impls":["0:133","0:205","0:211","a:1:3350:3084-0:54:2482","a:1:32861:3087-0:54:2482","a:1:42688:3273-0:54:2482","a:1:42689:3272-0:54:2482","b:1:2784-0:54:2482","b:1:2787-0:54:2482","b:1:2816-0:54:2482","b:1:3089-0:54:2482","b:1:3093-0:54:2482","b:1:3099-0:54:2482","b:1:3104-0:54:2482","b:1:3959-0:54:2482","b:4:780-0:54:2482","0:60","0:63","0:201","0:240","0:251","0:259","0:264","0:268","0:273","0:278","0:283","0:287","0:298","0:304","0:311","0:318","0:324","0:327","0:333","0:339","0:344","0:349","0:354","0:358","0:362","0:367","0:371","0:375","0:379","0:383"]}}},"0:354":{"id":"0:354","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[2073,0],"end":[2081,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"N","kind":{"const":{"type":{"primitive":"usize"},"default":null}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"PartialOrd","id":"1:2908:214","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["ge","lt","le","gt"],"trait":{"name":"PartialOrd","id":"1:2908:214","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"SmallVec","id":"0:54:2482","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"const":{"expr":"N","value":null,"is_literal":false}}],"bindings":[]}}}},"items":["0:357:1331"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:13796:16752":{"id":"1:13796:16752","crate_id":1,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"1:53521:492","str::splitn":"1:13794:16751","self::pattern":"1:13426:7148"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitN","id":"1:44714:3656","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13432:4674","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:13432:4674","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:13449:7154","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:32803:249-0:396:2430":{"id":"a:1:32803:249-0:396:2430","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:32803:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"CollectionAllocErr","id":"0:396:2430","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:155:2632":{"id":"0:155:2632","crate_id":0,"name":"push","span":{"filename":"src/lib.rs","begin":[954,4],"end":[965,5]},"visibility":"public","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["value",{"generic":"T"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:115:2518":{"id":"0:115:2518","crate_id":0,"name":"as_slice","span":{"filename":"src/lib.rs","begin":[532,4],"end":[542,5]},"visibility":"public","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"generic":"T"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:3315:261-0:66:2487":{"id":"a:1:3315:261-0:66:2487","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"N","kind":{"const":{"type":{"primitive":"usize"},"default":null}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:3315:261","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Drain","id":"0:66:2487","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"const":{"expr":"N","value":null,"is_literal":false}}],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"1:13763:12714":{"id":"1:13763:12714","crate_id":1,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"1:13764:12715"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitWhitespace","id":"1:44866:4836","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:3107:150":{"id":"1:3107:150","crate_id":1,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Infallible","id":"1:32727:7023","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"0:361:504":{"id":"0:361:504","crate_id":0,"name":"cmp","span":{"filename":"src/lib.rs","begin":[2088,4],"end":[2090,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"SmallVec","id":"0:54:2482","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"const":{"expr":"N","value":null,"is_literal":false}}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"core::cmp::Ordering","id":"1:31563:208","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13744:2501":{"id":"1:13744:2501","crate_id":1,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:53540:1901"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:32861:3087-0:27:2445":{"id":"a:1:32861:3087-0:27:2445","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"N","kind":{"const":{"type":{"primitive":"usize"},"default":null}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"1:32861:3087","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32861:3087","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawSmallVec","id":"0:27:2445","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"const":{"expr":"N","value":null,"is_literal":false}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:13754:16737":{"id":"1:13754:16737","crate_id":1,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"1:53527:1770","crate::ops::IndexMut":"1:3621:3029","str::slice_unchecked":"1:13753:16736"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:42688:3273-0:27:2445":{"id":"a:1:42688:3273-0:27:2445","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"N","kind":{"const":{"type":{"primitive":"usize"},"default":null}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:42689:3272","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"UnwindSafe","id":"1:42688:3273","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:42688:3273","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawSmallVec","id":"0:27:2445","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"const":{"expr":"N","value":null,"is_literal":false}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:292":{"id":"0:292","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1937,0],"end":[1942,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2804:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"N","kind":{"const":{"type":{"primitive":"usize"},"default":null}}}],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2804:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:102:2526","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"const":{"expr":"N","value":null,"is_literal":false}}],"bindings":[]}}}},"items":["0:295:496"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:3099-0:102:2526":{"id":"b:1:3099-0:102:2526","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:3073:271","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:3069:272","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:102:2526","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"const":{"expr":"N","value":null,"is_literal":false}}],"bindings":[]}}}},"items":["1:3102:150","1:3103:1857"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:327":{"id":"0:327","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[2023,0],"end":[2031,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"N","kind":{"const":{"type":{"primitive":"usize"},"default":null}}},{"name":"M","kind":{"const":{"type":{"primitive":"usize"},"default":null}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"PartialEq","id":"1:2866:213","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"1:2866:213","args":{"angle_bracketed":{"args":[{"type":{"array":{"type":{"generic":"U"},"len":"M"}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"SmallVec","id":"0:54:2482","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"const":{"expr":"N","value":null,"is_literal":false}}],"bindings":[]}}}},"items":["0:332:725"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:391":{"id":"0:391","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[2139,0],"end":[2143,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Debug","id":"1:10646:123","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"N","kind":{"const":{"type":{"primitive":"usize"},"default":null}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:10646:123","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Drain","id":"0:66:2487","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"const":{"expr":"N","value":null,"is_literal":false}}],"bindings":[]}}}},"items":["0:395:830"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:66:2487":{"id":"0:66:2487","crate_id":0,"name":"Drain","span":{"filename":"src/lib.rs","begin":[312,0],"end":[324,1]},"visibility":"public","docs":"An iterator that removes the items from a `SmallVec` and yields them by value.\n\nReturned from [`SmallVec::drain`][1].\n\n[1]: struct.SmallVec.html#method.drain","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[{"outlives":"'a"}],"default":null,"synthetic":false}}},{"name":"N","kind":{"const":{"type":{"primitive":"usize"},"default":null}}}],"where_predicates":[]},"impls":["a:1:32803:249-0:66:2487","a:1:3315:261-0:66:2487","a:1:3350:3084-0:66:2487","a:1:32861:3087-0:66:2487","a:1:42688:3273-0:66:2487","a:1:42689:3272-0:66:2487","b:1:2784-0:66:2487","b:1:2787-0:66:2487","b:1:3089-0:66:2487","b:1:3093-0:66:2487","b:1:3099-0:66:2487","b:1:3104-0:66:2487","b:1:3959-0:66:2487","b:1:8323-0:66:2487","0:74","0:82","0:88","0:93","0:97","0:391"]}}},"1:13809:16756":{"id":"1:13809:16756","crate_id":1,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"1:13426:7148","`DoubleEndedIterator`":"1:8387:134","prim@char":"1:53521:492","str::rmatch_indices":"1:13811:16757"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"MatchIndices","id":"1:44742:4830","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13432:4674","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"4:5717:17522":{"id":"4:5717:17522","crate_id":4,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"4:297:2410","`String`":"4:7759:257"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"4:297:2410","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"4:7759:257","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:161:2639":{"id":"0:161:2639","crate_id":0,"name":"try_grow","span":{"filename":"src/lib.rs","begin":[1021,4],"end":[1059,5]},"visibility":"public","docs":null,"links":{},"attrs":["#[cold]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["new_capacity",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Result","id":"1:42860:238","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}},{"type":{"resolved_path":{"name":"CollectionAllocErr","id":"0:396:2430","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:282:860":{"id":"0:282:860","crate_id":0,"name":"from","span":{"filename":"src/lib.rs","begin":[1889,4],"end":[1906,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["array",{"array":{"type":{"generic":"T"},"len":"M"}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13801:16754":{"id":"1:13801:16754","crate_id":1,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:42592:206","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13432:4674","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:13432:4674","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:13449:7154","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:263:654":{"id":"0:263:654","crate_id":0,"name":"deref","span":{"filename":"src/lib.rs","begin":[1832,4],"end":[1834,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Target","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"1:3551:128","args":null}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:287":{"id":"0:287","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1914,0],"end":[1935,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2804:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"N","kind":{"const":{"type":{"primitive":"usize"},"default":null}}}],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2804:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"SmallVec","id":"0:54:2482","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"const":{"expr":"N","value":null,"is_literal":false}}],"bindings":[]}}}},"items":["0:290:496","0:291:499"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:13766:16744":{"id":"1:13766:16744","crate_id":1,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\", suggestion =\n\"lines\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinesAny","id":"1:44856:4835","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13846:16775":{"id":"1:13846:16775","crate_id":1,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3099-0:396:2430":{"id":"b:1:3099-0:396:2430","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:3073:271","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:3069:272","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"CollectionAllocErr","id":"0:396:2430","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3102:150","1:3103:1857"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:3093-0:396:2430":{"id":"b:1:3093-0:396:2430","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:3066:157","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"CollectionAllocErr","id":"0:396:2430","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3095:860"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:240":{"id":"0:240","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1730,0],"end":[1735,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"N","kind":{"const":{"type":{"primitive":"usize"},"default":null}}}],"where_predicates":[]},"provided_trait_methods":["extend_one","extend_reserve","extend_one_unchecked"],"trait":{"name":"Extend","id":"1:8328:2748","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"SmallVec","id":"0:54:2482","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"const":{"expr":"N","value":null,"is_literal":false}}],"bindings":[]}}}},"items":["0:243:2662"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:201":{"id":"0:201","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1543,0],"end":[1548,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"N","kind":{"const":{"type":{"primitive":"usize"},"default":null}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"1:3141:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"SmallVec","id":"0:54:2482","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"const":{"expr":"N","value":null,"is_literal":false}}],"bindings":[]}}}},"items":["0:204:60"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:145:2504":{"id":"0:145:2504","crate_id":0,"name":"set_len","span":{"filename":"src/lib.rs","begin":[760,4],"end":[764,5]},"visibility":"public","docs":"Sets the length of a vector.\n\nThis will explicitly set the size of the vector, without actually modifying its buffers, so\nit is up to the caller to ensure that the vector is actually the specified size.\n\n# Safety\n\n`new_len <= self.capacity()` must be true, and all the elements in the range `..self.len`\nmust be initialized.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["new_len",{"primitive":"usize"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:152:2585":{"id":"0:152:2585","crate_id":0,"name":"drain","span":{"filename":"src/lib.rs","begin":[843,4],"end":[880,5]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["range",{"generic":"R"}]],"output":{"resolved_path":{"name":"Drain","id":"0:66:2487","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"T"}},{"const":{"expr":"N","value":null,"is_literal":false}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"R"},"bounds":[{"trait_bound":{"trait":{"name":"core::ops::RangeBounds","id":"1:3712:223","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:210:2734":{"id":"0:210:2734","crate_id":0,"name":"extend_from_slice","span":{"filename":"src/lib.rs","begin":[1594,4],"end":[1605,5]},"visibility":"public","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["slice",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"generic":"T"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:149:2455":{"id":"0:149:2455","crate_id":0,"name":"capacity","span":{"filename":"src/lib.rs","begin":[787,4],"end":[794,5]},"visibility":"public","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13753:16736":{"id":"1:13753:16736","crate_id":1,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"1:53527:1770","str::slice_mut_unchecked":"1:13754:16737","crate::ops::Index":"1:40135:3028"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"4:782:4454":{"id":"4:782:4454","crate_id":4,"name":"Owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"0:151:2582":{"id":"0:151:2582","crate_id":0,"name":"split_off","span":{"filename":"src/lib.rs","begin":[826,4],"end":[841,5]},"visibility":"public","docs":"Splits the collection into two at the given index.\n\nReturns a newly allocated vector containing the elements in the range\n`[at, len)`. After the call, the original vector will be left containing\nthe elements `[0, at)` with its previous capacity unchanged.\n\n- If you want to take ownership of the entire contents and capacity of\n  the vector, see [`core::mem::take`] or [`core::mem::replace`].\n- If you don't need the returned vector at all, see [`SmallVec::truncate`].\n- If you want to take ownership of an arbitrary subslice, or you don't\n  necessarily want to store the removed items in a vector, see [`SmallVec::drain`].\n\n# Panics\n\nPanics if `at > len`.\n\n# Examples\n\n```\nlet mut vec = vec![1, 2, 3];\nlet vec2 = vec.split_off(1);\nassert_eq!(vec, [1]);\nassert_eq!(vec2, [2, 3]);\n```","links":{"`core::mem::replace`":"1:2117:3097","`SmallVec::truncate`":"0:167:2651","`SmallVec::drain`":"0:152:2585","`core::mem::take`":"1:2115:2738"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["at",{"primitive":"usize"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13735:16731":{"id":"1:13735:16731","crate_id":1,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"4:5706:17519":{"id":"4:5706:17519","crate_id":4,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"4:7759:257"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["count",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"4:7759:257","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13432:4674","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"4:5720:17524":{"id":"4:5720:17524","crate_id":4,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"1:13846:16775"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"4:7759:257","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:401":{"id":"0:401","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[104,9],"end":[104,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:10646:123","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"CollectionAllocErr","id":"0:396:2430","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:402:830"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:3104-0:27:2445":{"id":"b:1:3104-0:27:2445","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:3063:175","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:3073:271","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RawSmallVec","id":"0:27:2445","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"const":{"expr":"N","value":null,"is_literal":false}}],"bindings":[]}}}},"items":["1:3107:150","1:3108:1855"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:365:902":{"id":"0:365:902","crate_id":0,"name":"hash","span":{"filename":"src/lib.rs","begin":[2094,4],"end":[2096,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["state",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"H"}}}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"H","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Hasher","id":"1:10872:169","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:60":{"id":"0:60","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[304,0],"end":[304,63]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:32803:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"N","kind":{"const":{"type":{"primitive":"usize"},"default":null}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:32803:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"SmallVec","id":"0:54:2482","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"const":{"expr":"N","value":null,"is_literal":false}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:166:2650":{"id":"0:166:2650","crate_id":0,"name":"shrink_to_fit","span":{"filename":"src/lib.rs","begin":[1116,4],"end":[1139,5]},"visibility":"public","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:3103:1857":{"id":"1:3103:1857","crate_id":1,"name":"try_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Result","id":"1:42860:238","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"1:3073:271","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:333":{"id":"0:333","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[2033,0],"end":[2041,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"N","kind":{"const":{"type":{"primitive":"usize"},"default":null}}},{"name":"M","kind":{"const":{"type":{"primitive":"usize"},"default":null}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"PartialEq","id":"1:2866:213","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"1:2866:213","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"array":{"type":{"generic":"U"},"len":"M"}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"SmallVec","id":"0:54:2482","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"const":{"expr":"N","value":null,"is_literal":false}}],"bindings":[]}}}},"items":["0:338:725"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:13791:16750":{"id":"1:13791:16750","crate_id":1,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"1:13426:7148","str::split":"1:13782:16747","prim@char":"1:53521:492","str::split_terminator":"1:13789:16749"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitTerminator","id":"1:44660:4829","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13432:4674","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:13432:4674","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:13449:7154","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:120:185":{"id":"0:120:185","crate_id":0,"name":"Item","span":{"filename":"src/lib.rs","begin":[558,4],"end":[558,18]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"a:1:42689:3272-0:66:2487":{"id":"a:1:42689:3272-0:66:2487","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"N","kind":{"const":{"type":{"primitive":"usize"},"default":null}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:42689:3272","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:42689:3272","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Drain","id":"0:66:2487","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"const":{"expr":"N","value":null,"is_literal":false}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:13765:16743":{"id":"1:13765:16743","crate_id":1,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nNote that any carriage return (`\\r`) not immediately followed by a\nline feed (`\\n`) does not split a line. These carriage returns are\nthereby included in the produced lines.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\r\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\n// Trailing carriage return is included in the last line\nassert_eq!(Some(\"baz\\r\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line does not require any ending:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Lines","id":"1:44846:4834","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13811:16757":{"id":"1:13811:16757","crate_id":1,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"1:13426:7148","`DoubleEndedIterator`":"1:8387:134","prim@char":"1:53521:492","str::match_indices":"1:13809:16756"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatchIndices","id":"1:44760:4831","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13432:4674","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:13432:4674","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:13449:7154","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3099-0:27:2445":{"id":"b:1:3099-0:27:2445","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:3073:271","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:3069:272","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RawSmallVec","id":"0:27:2445","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"const":{"expr":"N","value":null,"is_literal":false}}],"bindings":[]}}}},"items":["1:3102:150","1:3103:1857"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:109":{"id":"0:109","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[503,0],"end":[555,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"N","kind":{"const":{"type":{"primitive":"usize"},"default":null}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"IntoIter","id":"0:102:2526","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"const":{"expr":"N","value":null,"is_literal":false}}],"bindings":[]}}}},"items":["0:115:2518","0:116:2529"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:3093-0:66:2487":{"id":"b:1:3093-0:66:2487","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:3066:157","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Drain","id":"0:66:2487","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"const":{"expr":"N","value":null,"is_literal":false}}],"bindings":[]}}}},"items":["1:3095:860"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:13786:16748":{"id":"1:13786:16748","crate_id":1,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"1:13426:7148","`DoubleEndedIterator`":"1:8387:134","prim@char":"1:53521:492","str::split":"1:13782:16747"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplit","id":"1:44610:3662","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13432:4674","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:13432:4674","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:13449:7154","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13742:16735":{"id":"1:13742:16735","crate_id":1,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:267:656":{"id":"0:267:656","crate_id":0,"name":"deref_mut","span":{"filename":"src/lib.rs","begin":[1838,4],"end":[1840,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Target","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"1:3551:128","args":null}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:3315:261-0:102:2526":{"id":"a:1:3315:261-0:102:2526","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"N","kind":{"const":{"type":{"primitive":"usize"},"default":null}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:3315:261","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:102:2526","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"const":{"expr":"N","value":null,"is_literal":false}}],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"1:13778:3476":{"id":"1:13778:3476","crate_id":1,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"1:42594:203","prim@char":"1:53521:492","self::pattern":"1:13426:7148"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:42592:206","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13432:4674","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:13432:4674","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:13449:7154","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:32803:249-0:27:2445":{"id":"a:1:32803:249-0:27:2445","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"N","kind":{"const":{"type":{"primitive":"usize"},"default":null}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:32803:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawSmallVec","id":"0:27:2445","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"const":{"expr":"N","value":null,"is_literal":false}}],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"0:215:2739":{"id":"0:215:2739","crate_id":0,"name":"from_elem","span":{"filename":"src/lib.rs","begin":[1620,4],"end":[1641,5]},"visibility":"public","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["elem",{"generic":"T"}],["n",{"primitive":"usize"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:4:780-0:54:2482":{"id":"b:4:780-0:54:2482","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2804:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"4:776:264","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"SmallVec","id":"0:54:2482","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"const":{"expr":"N","value":null,"is_literal":false}}],"bindings":[]}}}},"items":["4:782:4454","4:783:12525","4:784:12526"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:13849:16778":{"id":"1:13849:16778","crate_id":1,"name":"trim_ascii","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing ASCII whitespace\nremoved.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\nassert_eq!(\"\\r hello world\\n \".trim_ascii(), \"hello world\");\nassert_eq!(\"  \".trim_ascii(), \"\");\nassert_eq!(\"\".trim_ascii(), \"\");\n```","links":{"u8::is_ascii_whitespace":"1:1151:22177"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"4:783:12525":{"id":"4:783:12525","crate_id":4,"name":"to_owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:324":{"id":"0:324","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[2021,0],"end":[2021,60]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"N","kind":{"const":{"type":{"primitive":"usize"},"default":null}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Eq","id":"1:2871:147","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"1:2871:147","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"SmallVec","id":"0:54:2482","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"const":{"expr":"N","value":null,"is_literal":false}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:3089-0:396:2430":{"id":"b:1:3089-0:396:2430","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:3066:157","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:3063:175","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"CollectionAllocErr","id":"0:396:2430","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3092:3471"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:184:2672":{"id":"0:184:2672","crate_id":0,"name":"retain","span":{"filename":"src/lib.rs","begin":[1341,4],"end":[1357,5]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["f",{"generic":"F"}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:3589:154","args":{"parenthesized":{"inputs":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}}],"output":{"primitive":"bool"}}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:25":{"id":"0:25","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[114,0],"end":[118,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Display","id":"1:10651:133","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"CollectionAllocErr","id":"0:396:2430","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:26:830"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:148:2565":{"id":"0:148:2565","crate_id":0,"name":"is_empty","span":{"filename":"src/lib.rs","begin":[782,4],"end":[784,5]},"visibility":"public","docs":null,"links":{},"attrs":["#[must_use]","#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:123":{"id":"0:123","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[582,0],"end":[600,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"N","kind":{"const":{"type":{"primitive":"usize"},"default":null}}}],"where_predicates":[]},"provided_trait_methods":["advance_back_by","try_rfold","rfind","nth_back","rfold"],"trait":{"name":"DoubleEndedIterator","id":"1:8387:134","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:102:2526","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"const":{"expr":"N","value":null,"is_literal":false}}],"bindings":[]}}}},"items":["0:126:2494"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:169:2529":{"id":"0:169:2529","crate_id":0,"name":"as_mut_slice","span":{"filename":"src/lib.rs","begin":[1166,4],"end":[1171,5]},"visibility":"public","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"generic":"T"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3089-0:102:2526":{"id":"b:1:3089-0:102:2526","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:3066:157","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:3063:175","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:102:2526","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"const":{"expr":"N","value":null,"is_literal":false}}],"bindings":[]}}}},"items":["1:3092:3471"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:13743:352":{"id":"1:13743:352","crate_id":1,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"1:13744:2501","`u8`":"1:53540:1901"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:311":{"id":"0:311","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[2004,0],"end":[2010,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"N","kind":{"const":{"type":{"primitive":"usize"},"default":null}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"1:8319:177","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"borrowed_ref":{"lifetime":"'a","mutable":true,"type":{"resolved_path":{"name":"SmallVec","id":"0:54:2482","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"const":{"expr":"N","value":null,"is_literal":false}}],"bindings":[]}}}}}},"items":["0:315:2526","0:316:185","0:317:985"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:3350:3084-0:102:2526":{"id":"a:1:3350:3084-0:102:2526","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"N","kind":{"const":{"type":{"primitive":"usize"},"default":null}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Freeze","id":"1:3350:3084","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"1:3350:3084","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:102:2526","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"const":{"expr":"N","value":null,"is_literal":false}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:13806:16755":{"id":"1:13806:16755","crate_id":1,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"1:13426:7148","`DoubleEndedIterator`":"1:8387:134","prim@char":"1:53521:492","str::matches":"1:13804:2962"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatches","id":"1:44814:4833","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13432:4674","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:13432:4674","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:13449:7154","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:298":{"id":"0:298","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1977,0],"end":[1994,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"N","kind":{"const":{"type":{"primitive":"usize"},"default":null}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"1:8319:177","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"SmallVec","id":"0:54:2482","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"const":{"expr":"N","value":null,"is_literal":false}}],"bindings":[]}}}},"items":["0:301:2526","0:302:185","0:303:985"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:2818:12524":{"id":"1:2818:12524","crate_id":1,"name":"clone_to_uninit","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["dst",{"raw_pointer":{"mutable":true,"type":{"generic":"T"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:273":{"id":"0:273","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1882,0],"end":[1886,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(feature = \"specialization\"))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2804:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"N","kind":{"const":{"type":{"primitive":"usize"},"default":null}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:3066:157","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"slice":{"generic":"T"}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"SmallVec","id":"0:54:2482","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"const":{"expr":"N","value":null,"is_literal":false}}],"bindings":[]}}}},"items":["0:277:860"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:138:2530":{"id":"0:138:2530","crate_id":0,"name":"with_capacity","span":{"filename":"src/lib.rs","begin":[620,4],"end":[626,5]},"visibility":"public","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["capacity",{"primitive":"usize"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:318":{"id":"0:318","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[2012,0],"end":[2020,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"N","kind":{"const":{"type":{"primitive":"usize"},"default":null}}},{"name":"M","kind":{"const":{"type":{"primitive":"usize"},"default":null}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"PartialEq","id":"1:2866:213","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"1:2866:213","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"SmallVec","id":"0:54:2482","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}},{"const":{"expr":"M","value":null,"is_literal":false}}],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"SmallVec","id":"0:54:2482","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"const":{"expr":"N","value":null,"is_literal":false}}],"bindings":[]}}}},"items":["0:323:725"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:13816:16759":{"id":"1:13816:16759","crate_id":1,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13818:16760":{"id":"1:13818:16760","crate_id":1,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:3092:3471":{"id":"1:3092:3471","crate_id":1,"name":"into","span":null,"visibility":"default","docs":"Calls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of\n<code>[From]&lt;T&gt; for U</code> chooses to do.","links":{"From":"1:3066:157"},"attrs":["#[track_caller]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"U"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:130":{"id":"0:130","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[602,0],"end":[602,71]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"N","kind":{"const":{"type":{"primitive":"usize"},"default":null}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"FusedIterator","id":"1:8800:162","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:102:2526","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"const":{"expr":"N","value":null,"is_literal":false}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:386:830":{"id":"0:386:830","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[2128,4],"end":[2130,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"core::fmt::Formatter","id":"1:10613:156","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"core::fmt::Result","id":"1:10594:238","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13789:16749":{"id":"1:13789:16749","crate_id":1,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"1:13426:7148","str::split":"1:13782:16747","prim@char":"1:53521:492","`DoubleEndedIterator`":"1:8387:134","str::rsplit_terminator":"1:13791:16750"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitTerminator","id":"1:44642:4828","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13432:4674","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:42689:3272-0:54:2482":{"id":"a:1:42689:3272-0:54:2482","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"N","kind":{"const":{"type":{"primitive":"usize"},"default":null}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:42689:3272","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:42689:3272","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"SmallVec","id":"0:54:2482","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"const":{"expr":"N","value":null,"is_literal":false}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:3093-0:54:2482":{"id":"b:1:3093-0:54:2482","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:3066:157","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"SmallVec","id":"0:54:2482","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"const":{"expr":"N","value":null,"is_literal":false}}],"bindings":[]}}}},"items":["1:3095:860"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:13829:16766":{"id":"1:13829:16766","crate_id":1,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:53521:492","self::pattern":"1:13426:7148"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["suffix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:42592:206","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13432:4674","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:13432:4674","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:13449:7154","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:126:2494":{"id":"0:126:2494","crate_id":0,"name":"next_back","span":{"filename":"src/lib.rs","begin":[584,4],"end":[599,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42592:206","args":{"angle_bracketed":{"args":[{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"1:8495:190","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:301:2526":{"id":"0:301:2526","crate_id":0,"name":"IntoIter","span":{"filename":"src/lib.rs","begin":[1978,4],"end":[1978,35]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"IntoIter","id":"0:102:2526","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"const":{"expr":"N","value":null,"is_literal":false}}],"bindings":[]}}}}}}},"0:186:2674":{"id":"0:186:2674","crate_id":0,"name":"retain_mut","span":{"filename":"src/lib.rs","begin":[1360,4],"end":[1362,5]},"visibility":"public","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["f",{"generic":"F"}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:3589:154","args":{"parenthesized":{"inputs":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}}],"output":{"primitive":"bool"}}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13758:16741":{"id":"1:13758:16741","crate_id":1,"name":"split_at_mut_checked","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that’s not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at_checked`] method.\n\n[`split_at_checked`]: str::split_at_checked\n\n# Examples\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\nif let Some((first, last)) = s.split_at_mut_checked(3) {\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n\nassert_eq!(None, s.split_at_mut_checked(13));  // Inside “ö”\nassert_eq!(None, s.split_at_mut_checked(16));  // Beyond the string length\n```","links":{"str::split_at_checked":"1:13757:16740"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"1:42592:206","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"4:5719:17523":{"id":"4:5719:17523","crate_id":4,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"1:13845:16774"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"4:7759:257","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:86:2494":{"id":"0:86:2494","crate_id":0,"name":"next_back","span":{"filename":"src/lib.rs","begin":[346,4],"end":[351,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42592:206","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:163:2647":{"id":"0:163:2647","crate_id":0,"name":"try_reserve","span":{"filename":"src/lib.rs","begin":[1076,4],"end":[1087,5]},"visibility":"public","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["additional",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Result","id":"1:42860:238","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}},{"type":{"resolved_path":{"name":"CollectionAllocErr","id":"0:396:2430","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:8327:985":{"id":"1:8327:985","crate_id":1,"name":"into_iter","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"I"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:296:2760":{"id":"0:296:2760","crate_id":0,"name":"smallvec","span":{"filename":"src/lib.rs","begin":[1945,0],"end":[1962,1]},"visibility":"public","docs":null,"links":{},"attrs":["#[macro_export]"],"deprecation":null,"inner":{"macro":"macro_rules! smallvec {\n    (@one $x:expr) => { ... };\n    ($elem:expr; $n:expr) => { ... };\n    ($($x:expr),*$(,)?) => { ... };\n}"}},"1:13734:2565":{"id":"1:13734:2565","crate_id":1,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3089-0:66:2487":{"id":"b:1:3089-0:66:2487","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:3066:157","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:3063:175","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Drain","id":"0:66:2487","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"const":{"expr":"N","value":null,"is_literal":false}}],"bindings":[]}}}},"items":["1:3092:3471"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:262:263":{"id":"0:262:263","crate_id":0,"name":"Target","span":{"filename":"src/lib.rs","begin":[1829,4],"end":[1829,22]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"slice":{"generic":"T"}}}}},"1:13756:16739":{"id":"1:13756:16739","crate_id":1,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_mut_checked`](str::split_at_mut_checked).\n\n# Examples\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"1:13755:16738","str::split_at_mut_checked":"1:13758:16741"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:3315:261-0:27:2445":{"id":"a:1:3315:261-0:27:2445","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"N","kind":{"const":{"type":{"primitive":"usize"},"default":null}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:3315:261","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawSmallVec","id":"0:27:2445","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"const":{"expr":"N","value":null,"is_literal":false}}],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"b:1:2784-0:54:2482":{"id":"b:1:2784-0:54:2482","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32804:251","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2778:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"SmallVec","id":"0:54:2482","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"const":{"expr":"N","value":null,"is_literal":false}}],"bindings":[]}}}},"items":["1:2786:2411"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"4:5702":{"id":"4:5702","crate_id":4,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["4:5703:17518","4:5704:3097","4:5706:17519","4:5708:17520","4:5716:17521","4:5717:17522","4:5718:2737","4:5719:17523","4:5720:17524"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:375":{"id":"0:375","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[2113,0],"end":[2118,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"N","kind":{"const":{"type":{"primitive":"usize"},"default":null}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"AsRef","id":"1:3057:78","args":{"angle_bracketed":{"args":[{"type":{"slice":{"generic":"T"}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"SmallVec","id":"0:54:2482","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"const":{"expr":"N","value":null,"is_literal":false}}],"bindings":[]}}}},"items":["0:378:353"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:3108:1855":{"id":"1:3108:1855","crate_id":1,"name":"try_from","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["value",{"generic":"U"}]],"output":{"resolved_path":{"name":"Result","id":"1:42860:238","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"T"},"trait":{"name":"TryFrom","id":"1:3073:271","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13847:16776":{"id":"1:13847:16776","crate_id":1,"name":"trim_ascii_start","span":null,"visibility":"public","docs":"Returns a string slice with leading ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\nassert_eq!(\" \\t \\u{3000}hello world\\n\".trim_ascii_start(), \"\\u{3000}hello world\\n\");\nassert_eq!(\"  \".trim_ascii_start(), \"\");\nassert_eq!(\"\".trim_ascii_start(), \"\");\n```","links":{"u8::is_ascii_whitespace":"1:1151:22177"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:400:2436":{"id":"0:400:2436","crate_id":0,"name":"layout","span":{"filename":"src/lib.rs","begin":[111,8],"end":[111,22]},"visibility":"default","docs":"The layout that was passed to the allocator","links":{},"attrs":[],"deprecation":null,"inner":{"struct_field":{"resolved_path":{"name":"alloc::alloc::Layout","id":"1:45640:192","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"b:1:2784-0:102:2526":{"id":"b:1:2784-0:102:2526","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32804:251","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2778:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:102:2526","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"const":{"expr":"N","value":null,"is_literal":false}}],"bindings":[]}}}},"items":["1:2786:2411"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:3089-0:54:2482":{"id":"b:1:3089-0:54:2482","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:3066:157","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:3063:175","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"SmallVec","id":"0:54:2482","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"const":{"expr":"N","value":null,"is_literal":false}}],"bindings":[]}}}},"items":["1:3092:3471"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:177:2667":{"id":"0:177:2667","crate_id":0,"name":"insert_many","span":{"filename":"src/lib.rs","begin":[1265,4],"end":[1267,5]},"visibility":"public","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}],["iterable",{"generic":"I"}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"1:8319:177","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"generic":"T"}}}}]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:182:2670":{"id":"0:182:2670","crate_id":0,"name":"into_boxed_slice","span":{"filename":"src/lib.rs","begin":[1320,4],"end":[1322,5]},"visibility":"public","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Box","id":"4:297:2410","args":{"angle_bracketed":{"args":[{"type":{"slice":{"generic":"T"}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:181:2669":{"id":"0:181:2669","crate_id":0,"name":"into_vec","span":{"filename":"src/lib.rs","begin":[1290,4],"end":[1317,5]},"visibility":"public","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Vec","id":"4:7185:280","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:264":{"id":"0:264","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1836,0],"end":[1841,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"N","kind":{"const":{"type":{"primitive":"usize"},"default":null}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"DerefMut","id":"1:3564:2750","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"SmallVec","id":"0:54:2482","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"const":{"expr":"N","value":null,"is_literal":false}}],"bindings":[]}}}},"items":["0:267:656"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:323:725":{"id":"0:323:725","crate_id":0,"name":"eq","span":{"filename":"src/lib.rs","begin":[2017,4],"end":[2019,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"SmallVec","id":"0:54:2482","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}},{"const":{"expr":"M","value":null,"is_literal":false}}],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:254:696":{"id":"0:254:696","crate_id":0,"name":"drop","span":{"filename":"src/lib.rs","begin":[1783,4],"end":[1801,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13848:16777":{"id":"1:13848:16777","crate_id":1,"name":"trim_ascii_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\nassert_eq!(\"\\r hello world\\u{3000}\\n \".trim_ascii_end(), \"\\r hello world\\u{3000}\");\nassert_eq!(\"  \".trim_ascii_end(), \"\");\nassert_eq!(\"\".trim_ascii_end(), \"\");\n```","links":{"u8::is_ascii_whitespace":"1:1151:22177"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:8323-0:102:2526":{"id":"b:1:8323-0:102:2526","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"1:8495:190","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"1:8319:177","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:102:2526","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"const":{"expr":"N","value":null,"is_literal":false}}],"bindings":[]}}}},"items":["1:8325:185","1:8326:2526","1:8327:985"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"I"}}}},"1:13749:2758":{"id":"1:13749:2758","crate_id":1,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:11552:252","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:11552:252","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:338:725":{"id":"0:338:725","crate_id":0,"name":"eq","span":{"filename":"src/lib.rs","begin":[2038,4],"end":[2040,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"array":{"type":{"generic":"U"},"len":"M"}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:315:2526":{"id":"0:315:2526","crate_id":0,"name":"IntoIter","span":{"filename":"src/lib.rs","begin":[2005,4],"end":[2005,48]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"IterMut","id":"1:11750:2764","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}}}}},"0:344":{"id":"0:344","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[2053,0],"end":[2061,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"N","kind":{"const":{"type":{"primitive":"usize"},"default":null}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"PartialEq","id":"1:2866:213","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"1:2866:213","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"generic":"U"}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"SmallVec","id":"0:54:2482","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"const":{"expr":"N","value":null,"is_literal":false}}],"bindings":[]}}}},"items":["0:348:725"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:93":{"id":"0:93","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[361,0],"end":[361,76]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"N","kind":{"const":{"type":{"primitive":"usize"},"default":null}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"FusedIterator","id":"1:8800:162","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Drain","id":"0:66:2487","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"const":{"expr":"N","value":null,"is_literal":false}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:8325:185":{"id":"1:8325:185","crate_id":1,"name":"Item","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"Iterator","id":"1:8495:190","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}},"1:13794:16751":{"id":"1:13794:16751","crate_id":1,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"1:53521:492","self::pattern":"1:13426:7148","str::rsplitn":"1:13796:16752"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitN","id":"1:44696:3660","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13432:4674","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:303:985":{"id":"0:303:985","crate_id":0,"name":"into_iter","span":{"filename":"src/lib.rs","begin":[1980,4],"end":[1993,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"qualified_path":{"name":"IntoIter","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"1:8319:177","args":null}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:348:725":{"id":"0:348:725","crate_id":0,"name":"eq","span":{"filename":"src/lib.rs","begin":[2058,4],"end":[2060,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"generic":"U"}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13760:4690":{"id":"1:13760:4690","crate_id":1,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:53521:492"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chars","id":"1:44562:4682","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:383":{"id":"0:383","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[2127,0],"end":[2131,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Debug","id":"1:10646:123","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"N","kind":{"const":{"type":{"primitive":"usize"},"default":null}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:10646:123","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"SmallVec","id":"0:54:2482","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"const":{"expr":"N","value":null,"is_literal":false}}],"bindings":[]}}}},"items":["0:386:830"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:42688:3273-0:66:2487":{"id":"a:1:42688:3273-0:66:2487","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"N","kind":{"const":{"type":{"primitive":"usize"},"default":null}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:42689:3272","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:42688:3273","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Drain","id":"0:66:2487","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"const":{"expr":"N","value":null,"is_literal":false}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:3093-0:27:2445":{"id":"b:1:3093-0:27:2445","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:3066:157","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RawSmallVec","id":"0:27:2445","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"const":{"expr":"N","value":null,"is_literal":false}}],"bindings":[]}}}},"items":["1:3095:860"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:278":{"id":"0:278","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1888,0],"end":[1907,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"N","kind":{"const":{"type":{"primitive":"usize"},"default":null}}},{"name":"M","kind":{"const":{"type":{"primitive":"usize"},"default":null}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:3066:157","args":{"angle_bracketed":{"args":[{"type":{"array":{"type":{"generic":"T"},"len":"M"}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"SmallVec","id":"0:54:2482","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"const":{"expr":"N","value":null,"is_literal":false}}],"bindings":[]}}}},"items":["0:282:860"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:13772:16746":{"id":"1:13772:16746","crate_id":1,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"1:53521:492","self::pattern":"1:13426:7148"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13432:4674","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:13432:4674","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:13449:7154","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:209:2730":{"id":"0:209:2730","crate_id":0,"name":"insert_from_slice","span":{"filename":"src/lib.rs","begin":[1574,4],"end":[1591,5]},"visibility":"public","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}],["slice",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"generic":"T"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:208:2729":{"id":"0:208:2729","crate_id":0,"name":"from_slice","span":{"filename":"src/lib.rs","begin":[1552,4],"end":[1571,5]},"visibility":"public","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["slice",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"generic":"T"}}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:82":{"id":"0:82","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[344,0],"end":[352,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[{"outlives":"'a"}],"default":null,"synthetic":false}}},{"name":"N","kind":{"const":{"type":{"primitive":"usize"},"default":null}}}],"where_predicates":[]},"provided_trait_methods":["advance_back_by","try_rfold","rfind","nth_back","rfold"],"trait":{"name":"DoubleEndedIterator","id":"1:8387:134","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Drain","id":"0:66:2487","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"const":{"expr":"N","value":null,"is_literal":false}}],"bindings":[]}}}},"items":["0:86:2494"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:180:2501":{"id":"0:180:2501","crate_id":0,"name":"as_mut_ptr","span":{"filename":"src/lib.rs","begin":[1280,4],"end":[1287,5]},"visibility":"public","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13751:15810":{"id":"1:13751:15810","crate_id":1,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:11552:252","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:11552:252","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:170:2652":{"id":"0:170:2652","crate_id":0,"name":"swap_remove","span":{"filename":"src/lib.rs","begin":[1174,4],"end":[1196,5]},"visibility":"public","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13782:16747":{"id":"1:13782:16747","crate_id":1,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"1:13426:7148","`DoubleEndedIterator`":"1:8387:134","prim@char":"1:53521:492","str::split_whitespace":"1:13763:12714","str::rsplit":"1:13786:16748"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Split","id":"1:44592:3658","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13432:4674","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:358":{"id":"0:358","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[2083,0],"end":[2091,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"N","kind":{"const":{"type":{"primitive":"usize"},"default":null}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Ord","id":"1:2902:207","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["max","min","clamp"],"trait":{"name":"Ord","id":"1:2902:207","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"SmallVec","id":"0:54:2482","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"const":{"expr":"N","value":null,"is_literal":false}}],"bindings":[]}}}},"items":["0:361:504"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:42688:3273-0:396:2430":{"id":"a:1:42688:3273-0:396:2430","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:42688:3273","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"CollectionAllocErr","id":"0:396:2430","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:316:185":{"id":"0:316:185","crate_id":0,"name":"Item","span":{"filename":"src/lib.rs","begin":[2006,4],"end":[2006,26]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"borrowed_ref":{"lifetime":"'a","mutable":true,"type":{"generic":"T"}}}}}},"0:168:2518":{"id":"0:168:2518","crate_id":0,"name":"as_slice","span":{"filename":"src/lib.rs","begin":[1158,4],"end":[1163,5]},"visibility":"public","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"generic":"T"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3089-0:27:2445":{"id":"b:1:3089-0:27:2445","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:3066:157","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:3063:175","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RawSmallVec","id":"0:27:2445","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"const":{"expr":"N","value":null,"is_literal":false}}],"bindings":[]}}}},"items":["1:3092:3471"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:116:2529":{"id":"0:116:2529","crate_id":0,"name":"as_mut_slice","span":{"filename":"src/lib.rs","begin":[545,4],"end":[554,5]},"visibility":"public","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"generic":"T"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13736:16732":{"id":"1:13736:16732","crate_id":1,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:308:2526":{"id":"0:308:2526","crate_id":0,"name":"IntoIter","span":{"filename":"src/lib.rs","begin":[1997,4],"end":[1997,45]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Iter","id":"1:11726:2491","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}}}}},"0:194:2676":{"id":"0:194:2676","crate_id":0,"name":"dedup_by","span":{"filename":"src/lib.rs","begin":[1382,4],"end":[1411,5]},"visibility":"public","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["same_bucket",{"generic":"F"}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:3589:154","args":{"parenthesized":{"inputs":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}}],"output":{"primitive":"bool"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:3350:3084-0:54:2482":{"id":"a:1:3350:3084-0:54:2482","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"N","kind":{"const":{"type":{"primitive":"usize"},"default":null}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Freeze","id":"1:3350:3084","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"1:3350:3084","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"SmallVec","id":"0:54:2482","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"const":{"expr":"N","value":null,"is_literal":false}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:32861:3087-0:102:2526":{"id":"a:1:32861:3087-0:102:2526","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"N","kind":{"const":{"type":{"primitive":"usize"},"default":null}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"1:32861:3087","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32861:3087","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:102:2526","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"const":{"expr":"N","value":null,"is_literal":false}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:13850:16779":{"id":"1:13850:16779","crate_id":1,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"1:5059:16779"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDebug","id":"1:44891:4765","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:371":{"id":"0:371","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[2106,0],"end":[2111,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"N","kind":{"const":{"type":{"primitive":"usize"},"default":null}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2781:104","args":{"angle_bracketed":{"args":[{"type":{"slice":{"generic":"T"}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"SmallVec","id":"0:54:2482","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"const":{"expr":"N","value":null,"is_literal":false}}],"bindings":[]}}}},"items":["0:374:2767"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:0:2760":{"id":"0:0:2760","crate_id":0,"name":"smallvec","span":{"filename":"src/lib.rs","begin":[7,0],"end":[2225,1]},"visibility":"public","docs":"Small vectors in various sizes. These store a certain number of elements inline, and fall back\nto the heap for larger allocations.  This can be a useful optimization for improving cache\nlocality and reducing allocator traffic for workloads that fit within the inline buffer.\n\n## `no_std` support\n\nBy default, `smallvec` does not depend on `std`.  However, the optional\n`write` feature implements the `std::io::Write` trait for vectors of `u8`.\nWhen this feature is enabled, `smallvec` depends on `std`.\n\n## Optional features\n\n### `std`\n\nWhen this feature is enabled, traits available from `std` are implemented:\n\n* `SmallVec<u8, _>` implements the [`std::io::Write`] trait.\n* [`CollectionAllocErr`] implements [`std::error::Error`].\n\nThis feature is not compatible with `#![no_std]` programs.\n\n### `serde`\n\nWhen this optional dependency is enabled, `SmallVec` implements the `serde::Serialize` and\n`serde::Deserialize` traits.\n\n### `extract_if`\n\n**This feature is unstable.** It may change to match the unstable `extract_if` method in libstd.\n\nEnables the `extract_if` method, which produces an iterator that calls a user-provided\nclosure to determine which elements of the vector to remove and yield from the iterator.\n\n### `specialization`\n\n**This feature is unstable and requires a nightly build of the Rust toolchain.**\n\nWhen this feature is enabled, `SmallVec::from(slice)` has improved performance for slices\nof `Copy` types.  (Without this feature, you can use `SmallVec::from_slice` to get optimal\nperformance for `Copy` types.)\n\nTracking issue: [rust-lang/rust#31844](https://github.com/rust-lang/rust/issues/31844)\n\n### `may_dangle`\n\n**This feature is unstable and requires a nightly build of the Rust toolchain.**\n\nThis feature makes the Rust compiler less strict about use of vectors that contain borrowed\nreferences. For details, see the\n[Rustonomicon](https://doc.rust-lang.org/1.42.0/nomicon/dropck.html#an-escape-hatch).\n\nTracking issue: [rust-lang/rust#34761](https://github.com/rust-lang/rust/issues/34761)","links":{"`CollectionAllocErr`":"0:396:2430"},"attrs":["#![no_std]"],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:396:2430","0:27:2445","0:54:2482","0:66:2487","0:102:2526","0:296:2760","0:297:2763"],"is_stripped":false}}},"1:13762:4500":{"id":"1:13762:4500","crate_id":1,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"1:44578:4766","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13852:7043":{"id":"1:13852:7043","crate_id":1,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"1:5060:7043"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDefault","id":"1:44900:4640","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3959-0:27:2445":{"id":"b:1:3959-0:27:2445","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:32804:251","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3957:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawSmallVec","id":"0:27:2445","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"const":{"expr":"N","value":null,"is_literal":false}}],"bindings":[]}}}},"items":["1:3961:1870"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:150:2566":{"id":"0:150:2566","crate_id":0,"name":"spilled","span":{"filename":"src/lib.rs","begin":[797,4],"end":[799,5]},"visibility":"public","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:268":{"id":"0:268","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1843,0],"end":[1850,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"N","kind":{"const":{"type":{"primitive":"usize"},"default":null}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"FromIterator","id":"1:8308:158","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"SmallVec","id":"0:54:2482","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"const":{"expr":"N","value":null,"is_literal":false}}],"bindings":[]}}}},"items":["0:271:863"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2784-0:66:2487":{"id":"b:1:2784-0:66:2487","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32804:251","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2778:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Drain","id":"0:66:2487","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"const":{"expr":"N","value":null,"is_literal":false}}],"bindings":[]}}}},"items":["1:2786:2411"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:3350:3084-0:396:2430":{"id":"a:1:3350:3084-0:396:2430","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"1:3350:3084","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"CollectionAllocErr","id":"0:396:2430","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:302:185":{"id":"0:302:185","crate_id":0,"name":"Item","span":{"filename":"src/lib.rs","begin":[1979,4],"end":[1979,18]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"1:13822:16763":{"id":"1:13822:16763","crate_id":1,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"1:53521:492","self::pattern":"1:13426:7148"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13432:4674","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:13432:4674","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"1:13454:7153","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:179:352":{"id":"0:179:352","crate_id":0,"name":"as_ptr","span":{"filename":"src/lib.rs","begin":[1270,4],"end":[1277,5]},"visibility":"public","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:32803:249-0:66:2487":{"id":"a:1:32803:249-0:66:2487","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"N","kind":{"const":{"type":{"primitive":"usize"},"default":null}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:32803:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Drain","id":"0:66:2487","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"const":{"expr":"N","value":null,"is_literal":false}}],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"a:1:32861:3087-0:396:2430":{"id":"a:1:32861:3087-0:396:2430","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32861:3087","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"CollectionAllocErr","id":"0:396:2430","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:142:2552":{"id":"0:142:2552","crate_id":0,"name":"from_buf_and_len_unchecked","span":{"filename":"src/lib.rs","begin":[721,4],"end":[728,5]},"visibility":"public","docs":"Constructs a new `SmallVec` on the stack from an A without copying elements. Also sets the length. The user is responsible for ensuring that `len <= A::size()`.\n\n# Examples\n\n```\nuse smallvec::SmallVec;\nuse std::mem::MaybeUninit;\n\nlet buf = [1, 2, 3, 4, 5, 0, 0, 0];\nlet small_vec = unsafe {\n    SmallVec::from_buf_and_len_unchecked(MaybeUninit::new(buf), 5)\n};\n\nassert_eq!(&*small_vec, &[1, 2, 3, 4, 5]);\n```\n\n# Safety\n\n`len <= N`, and all the elements in `buf[..len]` must be initialized","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["buf",{"resolved_path":{"name":"MaybeUninit","id":"1:31184:2416","args":{"angle_bracketed":{"args":[{"type":{"array":{"type":{"generic":"T"},"len":"N"}}}],"bindings":[]}}}}],["len",{"primitive":"usize"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:160:2533":{"id":"0:160:2533","crate_id":0,"name":"grow","span":{"filename":"src/lib.rs","begin":[1016,4],"end":[1018,5]},"visibility":"public","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["new_capacity",{"primitive":"usize"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:141:2538":{"id":"0:141:2538","crate_id":0,"name":"from_buf_and_len","span":{"filename":"src/lib.rs","begin":[677,4],"end":[699,5]},"visibility":"public","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["buf",{"array":{"type":{"generic":"T"},"len":"N"}}],["len",{"primitive":"usize"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:283":{"id":"0:283","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1908,0],"end":[1912,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"N","kind":{"const":{"type":{"primitive":"usize"},"default":null}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:3066:157","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Vec","id":"4:7185:280","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"SmallVec","id":"0:54:2482","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"const":{"expr":"N","value":null,"is_literal":false}}],"bindings":[]}}}},"items":["0:286:860"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:317:985":{"id":"0:317:985","crate_id":0,"name":"into_iter","span":{"filename":"src/lib.rs","begin":[2007,4],"end":[2009,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"qualified_path":{"name":"IntoIter","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"1:8319:177","args":null}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:297:2763":{"id":"0:297:2763","crate_id":0,"name":"smallvec_inline","span":{"filename":"src/lib.rs","begin":[1965,0],"end":[1975,1]},"visibility":"public","docs":null,"links":{},"attrs":["#[macro_export]"],"deprecation":null,"inner":{"macro":"macro_rules! smallvec_inline {\n    (@one $x:expr) => { ... };\n    ($elem:expr; $n:expr) => { ... };\n    ($($x:expr),+ $(,)?) => { ... };\n}"}},"0:309:185":{"id":"0:309:185","crate_id":0,"name":"Item","span":{"filename":"src/lib.rs","begin":[1998,4],"end":[1998,22]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"T"}}}}}},"0:378:353":{"id":"0:378:353","crate_id":0,"name":"as_ref","span":{"filename":"src/lib.rs","begin":[2115,4],"end":[2117,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"generic":"T"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:382:2499":{"id":"0:382:2499","crate_id":0,"name":"as_mut","span":{"filename":"src/lib.rs","begin":[2122,4],"end":[2124,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"generic":"T"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:81:2493":{"id":"0:81:2493","crate_id":0,"name":"size_hint","span":{"filename":"src/lib.rs","begin":[339,4],"end":[341,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"tuple":[{"primitive":"usize"},{"resolved_path":{"name":"Option","id":"1:42592:206","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:32861:3087-0:66:2487":{"id":"a:1:32861:3087-0:66:2487","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"N","kind":{"const":{"type":{"primitive":"usize"},"default":null}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32861:3087","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Drain","id":"0:66:2487","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"const":{"expr":"N","value":null,"is_literal":false}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:3350:3084-0:27:2445":{"id":"a:1:3350:3084-0:27:2445","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"N","kind":{"const":{"type":{"primitive":"usize"},"default":null}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Freeze","id":"1:3350:3084","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"1:3350:3084","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawSmallVec","id":"0:27:2445","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"const":{"expr":"N","value":null,"is_literal":false}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:172:2658":{"id":"0:172:2658","crate_id":0,"name":"remove","span":{"filename":"src/lib.rs","begin":[1204,4],"end":[1218,5]},"visibility":"public","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:367":{"id":"0:367","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[2099,0],"end":[2104,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"N","kind":{"const":{"type":{"primitive":"usize"},"default":null}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2778:103","args":{"angle_bracketed":{"args":[{"type":{"slice":{"generic":"T"}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"SmallVec","id":"0:54:2482","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"const":{"expr":"N","value":null,"is_literal":false}}],"bindings":[]}}}},"items":["0:370:2411"],"negative":false,"synthetic":false,"blanket_impl":null}}},"4:784:12526":{"id":"4:784:12526","crate_id":4,"name":"clone_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["target",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:32803:249-0:102:2526":{"id":"a:1:32803:249-0:102:2526","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"N","kind":{"const":{"type":{"primitive":"usize"},"default":null}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:32803:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:102:2526","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"const":{"expr":"N","value":null,"is_literal":false}}],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"0:117":{"id":"0:117","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[557,0],"end":[580,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"N","kind":{"const":{"type":{"primitive":"usize"},"default":null}}}],"where_predicates":[]},"provided_trait_methods":["sum","size_hint","map","try_find","min_by","try_for_each","try_collect","scan","intersperse_with","advance_by","min","is_sorted_by_key","all","product","rev","position","take","fold","collect_into","flat_map","filter_map","last","nth","any","__iterator_get_unchecked","cmp_by","le","unzip","rposition","reduce","partial_cmp","partition","enumerate","flatten","lt","peekable","ge","step_by","partial_cmp_by","gt","copied","max_by_key","try_reduce","partition_in_place","map_windows","skip_while","chain","count","filter","skip","for_each","cycle","max_by","cmp","find","eq_by","is_partitioned","inspect","take_while","zip","is_sorted","cloned","array_chunks","min_by_key","find_map","try_fold","by_ref","fuse","map_while","ne","intersperse","next_chunk","eq","max","is_sorted_by","collect"],"trait":{"name":"Iterator","id":"1:8495:190","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:102:2526","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"const":{"expr":"N","value":null,"is_literal":false}}],"bindings":[]}}}},"items":["0:120:185","0:121:1226","0:122:2493"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:13761:4849":{"id":"1:13761:4849","crate_id":1,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the previous character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:53521:492"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CharIndices","id":"1:44568:4826","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13784:12703":{"id":"1:13784:12703","crate_id":1,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"1:53521:492","self::pattern":"1:13426:7148"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitInclusive","id":"1:13215:3675","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13432:4674","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13732":{"id":"1:13732","crate_id":1,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["1:13733:1027","1:13734:2565","1:13735:16731","1:13736:16732","1:13738:16733","1:13741:16734","1:13742:16735","1:13743:352","1:13744:2501","1:13745:15808","1:13747:15809","1:13749:2758","1:13751:15810","1:13753:16736","1:13754:16737","1:13755:16738","1:13756:16739","1:13757:16740","1:13758:16741","1:13760:4690","1:13761:4849","1:13762:4500","1:13763:12714","1:13764:12715","1:13765:16743","1:13766:16744","1:13767:12716","1:13768:15286","1:13770:16745","1:13772:16746","1:13775:3509","1:13778:3476","1:13782:16747","1:13784:12703","1:13786:16748","1:13789:16749","1:13791:16750","1:13794:16751","1:13796:16752","1:13799:16753","1:13801:16754","1:13804:2962","1:13806:16755","1:13809:16756","1:13811:16757","1:13814:16758","1:13816:16759","1:13818:16760","1:13820:16761","1:13821:16762","1:13822:16763","1:13825:16764","1:13827:16765","1:13829:16766","1:13832:16767","1:13835:16768","1:13837:16769","1:13840:16770","1:13842:16771","1:13843:16772","1:13844:16773","1:13845:16774","1:13846:16775","1:13847:16776","1:13848:16777","1:13849:16778","1:13850:16779","1:13852:7043","1:13853:16780","1:13854:16781"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:332:725":{"id":"0:332:725","crate_id":0,"name":"eq","span":{"filename":"src/lib.rs","begin":[2028,4],"end":[2030,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"array":{"type":{"generic":"U"},"len":"M"}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:162:2633":{"id":"0:162:2633","crate_id":0,"name":"reserve","span":{"filename":"src/lib.rs","begin":[1062,4],"end":[1073,5]},"visibility":"public","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["additional",{"primitive":"usize"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:171:2657":{"id":"0:171:2657","crate_id":0,"name":"clear","span":{"filename":"src/lib.rs","begin":[1199,4],"end":[1201,5]},"visibility":"public","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13832:16767":{"id":"1:13832:16767","crate_id":1,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:53521:492","self::pattern":"1:13426:7148"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13432:4674","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:13432:4674","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:13449:7154","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:121:1226":{"id":"0:121:1226","crate_id":0,"name":"next","span":{"filename":"src/lib.rs","begin":[561,4],"end":[573,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42592:206","args":{"angle_bracketed":{"args":[{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"1:8495:190","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3104-0:396:2430":{"id":"b:1:3104-0:396:2430","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:3063:175","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:3073:271","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"CollectionAllocErr","id":"0:396:2430","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3107:150","1:3108:1855"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:102:2526":{"id":"0:102:2526","crate_id":0,"name":"IntoIter","span":{"filename":"src/lib.rs","begin":[491,0],"end":[501,1]},"visibility":"public","docs":"An iterator that consumes a `SmallVec` and yields its items by value.\n\nReturned from [`SmallVec::into_iter`][1].\n\n[1]: struct.SmallVec.html#method.into_iter","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"N","kind":{"const":{"type":{"primitive":"usize"},"default":null}}}],"where_predicates":[]},"impls":["0:109","a:1:32803:249-0:102:2526","a:1:3315:261-0:102:2526","a:1:3350:3084-0:102:2526","a:1:32861:3087-0:102:2526","a:1:42688:3273-0:102:2526","a:1:42689:3272-0:102:2526","b:1:2784-0:102:2526","b:1:2787-0:102:2526","b:1:2816-0:102:2526","b:1:3089-0:102:2526","b:1:3093-0:102:2526","b:1:3099-0:102:2526","b:1:3104-0:102:2526","b:1:3959-0:102:2526","b:1:8323-0:102:2526","b:4:780-0:102:2526","0:117","0:123","0:127","0:130","0:255","0:292","0:387"]}}},"0:147:1027":{"id":"0:147:1027","crate_id":0,"name":"len","span":{"filename":"src/lib.rs","begin":[776,4],"end":[778,5]},"visibility":"public","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:3961:1870":{"id":"1:3961:1870","crate_id":1,"name":"type_id","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"TypeId","id":"1:40304:4510","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:158:2636":{"id":"0:158:2636","crate_id":0,"name":"append","span":{"filename":"src/lib.rs","begin":[997,4],"end":[1013,5]},"visibility":"public","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"SmallVec","id":"0:54:2482","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"const":{"expr":"M","value":null,"is_literal":false}}],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"M","kind":{"const":{"type":{"primitive":"usize"},"default":null}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13747:15809":{"id":"1:13747:15809","crate_id":1,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"1:42594:203"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"1:42592:206","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:11552:252","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:11552:252","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:2786:2411":{"id":"1:2786:2411","crate_id":1,"name":"borrow","span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[rustc_diagnostic_item = \"noop_method_borrow\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:42689:3272-0:102:2526":{"id":"a:1:42689:3272-0:102:2526","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"N","kind":{"const":{"type":{"primitive":"usize"},"default":null}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:42689:3272","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:42689:3272","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:102:2526","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"const":{"expr":"N","value":null,"is_literal":false}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:214:2736":{"id":"0:214:2736","crate_id":0,"name":"resize","span":{"filename":"src/lib.rs","begin":[1610,4],"end":[1617,5]},"visibility":"public","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["len",{"primitive":"usize"}],["value",{"generic":"T"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:3102:150":{"id":"1:3102:150","crate_id":1,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"1:3073:271","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}}},"0:379":{"id":"0:379","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[2120,0],"end":[2125,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"N","kind":{"const":{"type":{"primitive":"usize"},"default":null}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"AsMut","id":"1:3060:77","args":{"angle_bracketed":{"args":[{"type":{"slice":{"generic":"T"}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"SmallVec","id":"0:54:2482","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"const":{"expr":"N","value":null,"is_literal":false}}],"bindings":[]}}}},"items":["0:382:2499"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2787-0:66:2487":{"id":"b:1:2787-0:66:2487","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32804:251","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2781:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Drain","id":"0:66:2487","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"const":{"expr":"N","value":null,"is_literal":false}}],"bindings":[]}}}},"items":["1:2789:2767"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:357:1331":{"id":"0:357:1331","crate_id":0,"name":"partial_cmp","span":{"filename":"src/lib.rs","begin":[2078,4],"end":[2080,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"SmallVec","id":"0:54:2482","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"const":{"expr":"N","value":null,"is_literal":false}}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42592:206","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"core::cmp::Ordering","id":"1:31563:208","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13842:16771":{"id":"1:13842:16771","crate_id":1,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}}},"paths":{"1:3389:3134":{"crate_id":1,"path":["core","ops","arith","Add"],"kind":"trait"},"1:8847:15595":{"crate_id":1,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"1:41095:4769":{"crate_id":1,"path":["core","char","ToUppercase"],"kind":"struct"},"1:12932:3648":{"crate_id":1,"path":["core","slice","GetManyMutError"],"kind":"struct"},"1:42727:4802":{"crate_id":1,"path":["core","range","iter","IterRange"],"kind":"struct"},"1:12037:3661":{"crate_id":1,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"1:45540:163":{"crate_id":1,"path":["core","future","future","Future"],"kind":"trait"},"4:3082:5416":{"crate_id":4,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"1:3785:268":{"crate_id":1,"path":["core","ops","try_trait","Try"],"kind":"trait"},"1:22979:16284":{"crate_id":1,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_addr"],"kind":"function"},"1:23458:5298":{"crate_id":1,"path":["core","num","fmt","Formatted"],"kind":"struct"},"1:53546:1965":{"crate_id":1,"path":["core","usize"],"kind":"primitive"},"1:3416:2998":{"crate_id":1,"path":["core","ops","async_function","AsyncFn"],"kind":"trait"},"1:13454:7153":{"crate_id":1,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"1:23646:4745":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroI64Inner"],"kind":"struct"},"1:47920:4997":{"crate_id":1,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"1:43139:95":{"crate_id":1,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"1:22351:4705":{"crate_id":1,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"1:9479:3271":{"crate_id":1,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"4:885:4328":{"crate_id":4,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"1:4758:233":{"crate_id":1,"path":["core","cell","RefCell"],"kind":"struct"},"1:44760:4831":{"crate_id":1,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"1:43719:12700":{"crate_id":1,"path":["core","fmt","rt","ArgumentType"],"kind":"enum"},"4:1580:4464":{"crate_id":4,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"1:3589:154":{"crate_id":1,"path":["core","ops","function","FnMut"],"kind":"trait"},"1:47911:4996":{"crate_id":1,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"1:43733:74":{"crate_id":1,"path":["core","fmt","rt","Argument"],"kind":"struct"},"1:42636:2526":{"crate_id":1,"path":["core","option","IntoIter"],"kind":"struct"},"1:15:2437":{"crate_id":1,"path":["core","write"],"kind":"macro"},"1:8274:3758":{"crate_id":1,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"1:23358:12534":{"crate_id":1,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"1:42840:224":{"crate_id":1,"path":["core","range","RangeFrom"],"kind":"struct"},"1:14157:217":{"crate_id":1,"path":["core","future","pending","Pending"],"kind":"struct"},"1:44696:3660":{"crate_id":1,"path":["core","str","iter","SplitN"],"kind":"struct"},"1:3350:3084":{"crate_id":1,"path":["core","marker","Freeze"],"kind":"trait"},"1:45347:5316":{"crate_id":1,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"0:27:2445":{"crate_id":0,"path":["smallvec","RawSmallVec"],"kind":"union"},"1:2115:2738":{"crate_id":1,"path":["core","mem","take"],"kind":"function"},"1:23478:4732":{"crate_id":1,"path":["core","num","error","ParseIntError"],"kind":"struct"},"1:45667:3006":{"crate_id":1,"path":["core","alloc","AllocError"],"kind":"struct"},"1:2117:3097":{"crate_id":1,"path":["core","mem","replace"],"kind":"function"},"1:42954:90":{"crate_id":1,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"1:34316:3143":{"crate_id":1,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"1:42592:206":{"crate_id":1,"path":["core","option","Option"],"kind":"enum"},"1:42719:3004":{"crate_id":1,"path":["core","pin","Pin"],"kind":"struct"},"1:10433:3075":{"crate_id":1,"path":["core","fmt","builders","FormatterFn"],"kind":"struct"},"1:9592:4674":{"crate_id":1,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"1:47940:4999":{"crate_id":1,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"4:3320:4482":{"crate_id":4,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"1:8803:3756":{"crate_id":1,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"1:23465:4731":{"crate_id":1,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"1:10907:3077":{"crate_id":1,"path":["core","hash","BuildHasher"],"kind":"trait"},"1:41384:3764":{"crate_id":1,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"1:32773:2782":{"crate_id":1,"path":["core","error","tags","Value"],"kind":"struct"},"1:1918:6979":{"crate_id":1,"path":["core","intrinsics","AggregateRawPtr"],"kind":"trait"},"1:44511:3667":{"crate_id":1,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"1:41102:4770":{"crate_id":1,"path":["core","char","CaseMappingIter"],"kind":"struct"},"1:44449:3672":{"crate_id":1,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"4:7653:3030":{"crate_id":4,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"4:7857:3031":{"crate_id":4,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"1:3586:153":{"crate_id":1,"path":["core","ops","function","Fn"],"kind":"trait"},"1:22847:12310":{"crate_id":1,"path":["core","core_simd","simd","num","float","SimdFloat"],"kind":"trait"},"1:40227:226":{"crate_id":1,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"1:22129:16048":{"crate_id":1,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"1:41345:3775":{"crate_id":1,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"1:47931:4998":{"crate_id":1,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"4:6734:2742":{"crate_id":4,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"1:42620:2491":{"crate_id":1,"path":["core","option","Iter"],"kind":"struct"},"1:8308:158":{"crate_id":1,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"1:45413:4870":{"crate_id":1,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"1:8440:2495":{"crate_id":1,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"1:10655:3053":{"crate_id":1,"path":["core","fmt","Binary"],"kind":"trait"},"1:32787:3065":{"crate_id":1,"path":["core","error","tags","Ref"],"kind":"struct"},"1:46828:4900":{"crate_id":1,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"1:3796:3159":{"crate_id":1,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"4:4316:4346":{"crate_id":4,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"1:45196:7170":{"crate_id":1,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"1:10659:3055":{"crate_id":1,"path":["core","fmt","UpperHex"],"kind":"trait"},"1:23635:4744":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroI32Inner"],"kind":"struct"},"1:22118:16045":{"crate_id":1,"path":["core","core_simd","swizzle","rotate_elements_right","Rotate"],"kind":"struct"},"4:6536:12516":{"crate_id":4,"path":["alloc","task","Wake"],"kind":"trait"},"1:45230:4867":{"crate_id":1,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"4:3287:2491":{"crate_id":4,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"1:47082:4922":{"crate_id":1,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"1:47338:4948":{"crate_id":1,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"1:11750:2764":{"crate_id":1,"path":["core","slice","iter","IterMut"],"kind":"struct"},"1:41110:4771":{"crate_id":1,"path":["core","char","TryFromCharError"],"kind":"struct"},"1:47426:4952":{"crate_id":1,"path":["core","core_arch","simd","m8x32"],"kind":"struct"},"1:41313:3772":{"crate_id":1,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"1:11552:252":{"crate_id":1,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"1:14130:15681":{"crate_id":1,"path":["core","future","join","MaybeDone"],"kind":"enum"},"1:23591:4740":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroU128Inner"],"kind":"struct"},"1:2902:207":{"crate_id":1,"path":["core","cmp","Ord"],"kind":"trait"},"1:45217:4861":{"crate_id":1,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"1:33352:3136":{"crate_id":1,"path":["core","ops","arith","Mul"],"kind":"trait"},"1:53540:1901":{"crate_id":1,"path":["core","u8"],"kind":"primitive"},"1:31563:208":{"crate_id":1,"path":["core","cmp","Ordering"],"kind":"enum"},"1:40152:225":{"crate_id":1,"path":["core","ops","range","RangeFull"],"kind":"struct"},"1:10595:2791":{"crate_id":1,"path":["core","fmt","Write"],"kind":"trait"},"1:22172:12227":{"crate_id":1,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"1:34807:3147":{"crate_id":1,"path":["core","ops","bit","BitXor"],"kind":"trait"},"1:46676:4887":{"crate_id":1,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"4:1883:2508":{"crate_id":4,"path":["alloc","collections","btree","map","ExtractIf"],"kind":"struct"},"1:23188:4706":{"crate_id":1,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"1:22754:13266":{"crate_id":1,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"1:47388:4950":{"crate_id":1,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"1:24126:248":{"crate_id":1,"path":["core","num","saturating","Saturating"],"kind":"struct"},"4:7759:257":{"crate_id":4,"path":["alloc","string","String"],"kind":"struct"},"4:3788:2742":{"crate_id":4,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"1:2828:3443":{"crate_id":1,"path":["core","clone","InitializingSlice"],"kind":"struct"},"1:47050:4920":{"crate_id":1,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"1:45343:5315":{"crate_id":1,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"0:396:2430":{"crate_id":0,"path":["smallvec","CollectionAllocErr"],"kind":"enum"},"4:1630:4468":{"crate_id":4,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"1:23558:4737":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroU16Inner"],"kind":"struct"},"1:41284:3762":{"crate_id":1,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"1:47018:4918":{"crate_id":1,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"1:44179:5311":{"crate_id":1,"path":["core","slice","sort","stable","drift","DriftsortRun"],"kind":"struct"},"1:23431:12538":{"crate_id":1,"path":["core","num","fmt","Part"],"kind":"enum"},"1:53537:927":{"crate_id":1,"path":["core","i32"],"kind":"primitive"},"1:7800:5530":{"crate_id":1,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"1:44891:4765":{"crate_id":1,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"1:44470:3670":{"crate_id":1,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"1:2681:3115":{"crate_id":1,"path":["core","ptr","with_exposed_provenance_mut"],"kind":"function"},"4:998:2491":{"crate_id":4,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"4:4546:4346":{"crate_id":4,"path":["alloc","collections","vec_deque","shrink_to","Guard"],"kind":"struct"},"1:32727:7023":{"crate_id":1,"path":["core","convert","Infallible"],"kind":"enum"},"1:44538:4822":{"crate_id":1,"path":["core","str","error","Utf8Error"],"kind":"struct"},"1:44884:4689":{"crate_id":1,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"1:53527:1770":{"crate_id":1,"path":["core","str"],"kind":"primitive"},"4:6688:2487":{"crate_id":4,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"1:5345:454":{"crate_id":1,"path":["core","ffi","c_void"],"kind":"enum"},"1:2804:114":{"crate_id":1,"path":["core","clone","Clone"],"kind":"trait"},"1:45182:4854":{"crate_id":1,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"1:8319:177":{"crate_id":1,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"1:41191:4774":{"crate_id":1,"path":["core","ffi","va_list","VaList"],"kind":"struct"},"1:10594:238":{"crate_id":1,"path":["core","fmt","Result"],"kind":"type_alias"},"1:22154:16054":{"crate_id":1,"path":["core","core_simd","swizzle","resize","Resize"],"kind":"struct"},"1:46968:4916":{"crate_id":1,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"4:7735:4501":{"crate_id":4,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"0:54:2482":{"crate_id":0,"path":["smallvec","SmallVec"],"kind":"struct"},"1:23380:4718":{"crate_id":1,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"4:1119:2742":{"crate_id":4,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"1:42679:3269":{"crate_id":1,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"1:40189:224":{"crate_id":1,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"1:4163:2526":{"crate_id":1,"path":["core","array","iter","IntoIter"],"kind":"struct"},"1:41007:4640":{"crate_id":1,"path":["core","char","EscapeDefault"],"kind":"struct"},"1:6800:3787":{"crate_id":1,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"1:46744:4895":{"crate_id":1,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"1:41159:4773":{"crate_id":1,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"1:4767:4646":{"crate_id":1,"path":["core","cell","BorrowMutError"],"kind":"struct"},"1:32769:4749":{"crate_id":1,"path":["core","error","private","Internal"],"kind":"struct"},"1:41144:7090":{"crate_id":1,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"1:23032:3114":{"crate_id":1,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr","with_exposed_provenance"],"kind":"function"},"1:40297:3158":{"crate_id":1,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"2:0:527":{"crate_id":2,"path":["compiler_builtins"],"kind":"module"},"1:14065:3775":{"crate_id":1,"path":["core","future","async_drop","Fuse"],"kind":"struct"},"1:47992:5003":{"crate_id":1,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"4:6902:2742":{"crate_id":4,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"1:40304:4510":{"crate_id":1,"path":["core","any","TypeId"],"kind":"struct"},"1:2224:3103":{"crate_id":1,"path":["core","ptr","metadata","metadata"],"kind":"function"},"4:3333:16517":{"crate_id":4,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"1:11539:13266":{"crate_id":1,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"1:53543:1895":{"crate_id":1,"path":["core","u64"],"kind":"primitive"},"4:3921:2508":{"crate_id":4,"path":["alloc","collections","linked_list","ExtractIf"],"kind":"struct"},"1:46857:4902":{"crate_id":1,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"1:44501:3669":{"crate_id":1,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"1:47226:4944":{"crate_id":1,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"1:43065:94":{"crate_id":1,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"1:23396:12536":{"crate_id":1,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"4:3078:5281":{"crate_id":4,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"4:785:122":{"crate_id":4,"path":["alloc","borrow","Cow"],"kind":"enum"},"1:43955:3080":{"crate_id":1,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"4:1518:2491":{"crate_id":4,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"1:38787:3152":{"crate_id":1,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"1:43176:89":{"crate_id":1,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"1:44642:4828":{"crate_id":1,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"1:53519:436":{"crate_id":1,"path":["core","bool"],"kind":"primitive"},"1:11895:3676":{"crate_id":1,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"4:1571:4463":{"crate_id":4,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"1:44875:4837":{"crate_id":1,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"4:3258:101":{"crate_id":4,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"1:3830:115":{"crate_id":1,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"1:46843:4901":{"crate_id":1,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"4:3328:4486":{"crate_id":4,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"1:2760:2417":{"crate_id":1,"path":["core","ptr","addr_of"],"kind":"macro"},"1:23668:4747":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroIsizeInner"],"kind":"struct"},"4:2248:4341":{"crate_id":4,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"4:776:264":{"crate_id":4,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"1:46776:4897":{"crate_id":1,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"1:2866:213":{"crate_id":1,"path":["core","cmp","PartialEq"],"kind":"trait"},"4:4121:2487":{"crate_id":4,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"1:22891:12311":{"crate_id":1,"path":["core","core_simd","simd","num","int","SimdInt"],"kind":"trait"},"1:41847:3753":{"crate_id":1,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"1:43947:4809":{"crate_id":1,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"1:5406:1007":{"crate_id":1,"path":["core","iter"],"kind":"module"},"4:881:102":{"crate_id":4,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"1:41022:7067":{"crate_id":1,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"1:33564:3135":{"crate_id":1,"path":["core","ops","arith","Div"],"kind":"trait"},"1:41275:3761":{"crate_id":1,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"1:45598:4873":{"crate_id":1,"path":["core","task","wake","RawWaker"],"kind":"struct"},"1:4692:3064":{"crate_id":1,"path":["core","cell","Cell"],"kind":"struct"},"4:7747:4356":{"crate_id":4,"path":["alloc","rc","UniqueRc"],"kind":"struct"},"1:43691:5310":{"crate_id":1,"path":["core","fmt","rt","Count"],"kind":"enum"},"1:47471:4953":{"crate_id":1,"path":["core","core_arch","simd","m16x16"],"kind":"struct"},"1:22339:13266":{"crate_id":1,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"1:41123:107":{"crate_id":1,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"1:41322:3773":{"crate_id":1,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"1:12023:3656":{"crate_id":1,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"1:48045:5012":{"crate_id":1,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"1:53541:1883":{"crate_id":1,"path":["core","u16"],"kind":"primitive"},"1:2223:3127":{"crate_id":1,"path":["core","ptr","metadata","Thin"],"kind":"trait_alias"},"4:7185:280":{"crate_id":4,"path":["alloc","vec","Vec"],"kind":"struct"},"1:3551:128":{"crate_id":1,"path":["core","ops","deref","Deref"],"kind":"trait"},"1:44492:3666":{"crate_id":1,"path":["core","slice","iter","RChunks"],"kind":"struct"},"1:53521:492":{"crate_id":1,"path":["core","char"],"kind":"primitive"},"1:2126:3099":{"crate_id":1,"path":["core","mem","Discriminant"],"kind":"struct"},"1:47794:4991":{"crate_id":1,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"4:5281:4355":{"crate_id":4,"path":["alloc","rc","Weak"],"kind":"struct"},"1:44714:3656":{"crate_id":1,"path":["core","str","iter","RSplitN"],"kind":"struct"},"1:2101:2414":{"crate_id":1,"path":["core","mem","align_of"],"kind":"function"},"1:41605:3785":{"crate_id":1,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"1:43994:4818":{"crate_id":1,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"4:5406:4357":{"crate_id":4,"path":["alloc","rc","UniqueRcUninit"],"kind":"struct"},"1:26526:283":{"crate_id":1,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"1:32780:4750":{"crate_id":1,"path":["core","error","tags","MaybeSizedValue"],"kind":"struct"},"1:23580:4739":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroU64Inner"],"kind":"struct"},"1:42785:4804":{"crate_id":1,"path":["core","range","iter","IterRangeFrom"],"kind":"struct"},"1:11968:3663":{"crate_id":1,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"1:3790:159":{"crate_id":1,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"1:46953:4915":{"crate_id":1,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"1:22756:12225":{"crate_id":1,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"1:22223:13266":{"crate_id":1,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"1:44428:3664":{"crate_id":1,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"1:2297:201":{"crate_id":1,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"1:40247:228":{"crate_id":1,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"4:7576:222":{"crate_id":4,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"4:3682:194":{"crate_id":4,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"1:3957:71":{"crate_id":1,"path":["core","any","Any"],"kind":"trait"},"1:22142:16051":{"crate_id":1,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"1:2781:104":{"crate_id":1,"path":["core","borrow","BorrowMut"],"kind":"trait"},"1:32894:278":{"crate_id":1,"path":["core","marker","UnsizedConstParamTy"],"kind":"trait"},"1:22967:12313":{"crate_id":1,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr"],"kind":"trait"},"1:2871:147":{"crate_id":1,"path":["core","cmp","Eq"],"kind":"trait"},"1:12918:3646":{"crate_id":1,"path":["core","slice","SlicePattern"],"kind":"trait"},"1:38842:3153":{"crate_id":1,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"4:5552:12500":{"crate_id":4,"path":["alloc","slice","Concat"],"kind":"trait"},"1:23569:4738":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroU32Inner"],"kind":"struct"},"4:1599:4466":{"crate_id":4,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"1:22243:4705":{"crate_id":1,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"1:3815:15135":{"crate_id":1,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"1:44592:3658":{"crate_id":1,"path":["core","str","iter","Split"],"kind":"struct"},"1:47035:4919":{"crate_id":1,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"1:36856:3150":{"crate_id":1,"path":["core","ops","bit","Shr"],"kind":"trait"},"4:7084:3036":{"crate_id":4,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"1:53539:914":{"crate_id":1,"path":["core","i128"],"kind":"primitive"},"1:45207:4857":{"crate_id":1,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"1:42572:4671":{"crate_id":1,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"4:1533:2764":{"crate_id":4,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"4:3075:4454":{"crate_id":4,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"1:44192:5312":{"crate_id":1,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"1:41363:3786":{"crate_id":1,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"1:13443:7155":{"crate_id":1,"path":["core","str","pattern","Searcher"],"kind":"trait"},"4:7258:4370":{"crate_id":4,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"1:32805:258":{"crate_id":1,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"1:44409:3653":{"crate_id":1,"path":["core","slice","iter","Chunks"],"kind":"struct"},"1:14182:4701":{"crate_id":1,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"1:42930:208":{"crate_id":1,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"1:47720:4989":{"crate_id":1,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"4:7534:4336":{"crate_id":4,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"1:22929:12312":{"crate_id":1,"path":["core","core_simd","simd","num","uint","SimdUint"],"kind":"trait"},"4:2154:4471":{"crate_id":4,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"1:7734:3768":{"crate_id":1,"path":["core","iter","adapters","zip","TrustedRandomAccess"],"kind":"trait"},"1:47765:4990":{"crate_id":1,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"1:40139:3156":{"crate_id":1,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"1:10646:123":{"crate_id":1,"path":["core","fmt","Debug"],"kind":"trait"},"1:41171:4766":{"crate_id":1,"path":["core","ffi","c_str","Bytes"],"kind":"struct"},"1:46629:4880":{"crate_id":1,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"1:46708:4889":{"crate_id":1,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"1:22225:12223":{"crate_id":1,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"1:6300:3763":{"crate_id":1,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"1:3073:271":{"crate_id":1,"path":["core","convert","TryFrom"],"kind":"trait"},"1:12948:7156":{"crate_id":1,"path":["core","str","converts","from_utf8"],"kind":"function"},"1:46659:4884":{"crate_id":1,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"1:42414:5301":{"crate_id":1,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"4:6813:2526":{"crate_id":4,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"1:3621:3029":{"crate_id":1,"path":["core","ops","index","IndexMut"],"kind":"trait"},"4:7544:4493":{"crate_id":4,"path":["alloc","collections","btree","map","UnorderedKeyError"],"kind":"struct"},"1:44909:4764":{"crate_id":1,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"1:3193:4507":{"crate_id":1,"path":["core","error","Request"],"kind":"struct"},"1:45630:4878":{"crate_id":1,"path":["core","task","wake","ContextBuilder"],"kind":"struct"},"1:40167:222":{"crate_id":1,"path":["core","ops","range","Range"],"kind":"struct"},"1:23347:4715":{"crate_id":1,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"1:42532:7098":{"crate_id":1,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"1:4950:3067":{"crate_id":1,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"1:53524:1352":{"crate_id":1,"path":["core","pointer"],"kind":"primitive"},"4:981:4332":{"crate_id":4,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"1:47255:4945":{"crate_id":1,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"1:43102:88":{"crate_id":1,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"1:43741:3062":{"crate_id":1,"path":["core","fmt","Alignment"],"kind":"enum"},"1:13101:4683":{"crate_id":1,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"1:44610:3662":{"crate_id":1,"path":["core","str","iter","RSplit"],"kind":"struct"},"1:44481:3671":{"crate_id":1,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"4:1409:4461":{"crate_id":4,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"1:45543:176":{"crate_id":1,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"1:32803:249":{"crate_id":1,"path":["core","marker","Send"],"kind":"trait"},"1:8328:2748":{"crate_id":1,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"1:23372:4717":{"crate_id":1,"path":["core","num","diy_float","Fp"],"kind":"struct"},"1:31184:2416":{"crate_id":1,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"4:4151:2742":{"crate_id":4,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"1:53532:766":{"crate_id":1,"path":["core","f32"],"kind":"primitive"},"1:47500:4954":{"crate_id":1,"path":["core","core_arch","simd","m32x8"],"kind":"struct"},"1:40055:3162":{"crate_id":1,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"1:44349:4819":{"crate_id":1,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"1:13385:6859":{"crate_id":1,"path":["core","str","traits","FromStr"],"kind":"trait"},"4:7841:2508":{"crate_id":4,"path":["alloc","vec","extract_if","ExtractIf"],"kind":"struct"},"1:41061:4768":{"crate_id":1,"path":["core","char","ToLowercase"],"kind":"struct"},"1:41407:3779":{"crate_id":1,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"1:44814:4833":{"crate_id":1,"path":["core","str","iter","RMatches"],"kind":"struct"},"1:44196:3680":{"crate_id":1,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"1:46936:4914":{"crate_id":1,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"0:0:2760":{"crate_id":0,"path":["smallvec"],"kind":"module"},"1:43326:4678":{"crate_id":1,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"1:3308:277":{"crate_id":1,"path":["core","marker","Unsize"],"kind":"trait"},"1:22108:16045":{"crate_id":1,"path":["core","core_simd","swizzle","rotate_elements_left","Rotate"],"kind":"struct"},"4:3444:2508":{"crate_id":4,"path":["alloc","collections","btree","set","ExtractIf"],"kind":"struct"},"1:4841:3065":{"crate_id":1,"path":["core","cell","Ref"],"kind":"struct"},"1:44568:4826":{"crate_id":1,"path":["core","str","iter","CharIndices"],"kind":"struct"},"4:2287:5278":{"crate_id":4,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"1:47873:4994":{"crate_id":1,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"1:45335:5313":{"crate_id":1,"path":["core","str","LinesMap"],"kind":"struct"},"4:1589:4465":{"crate_id":4,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"1:4528:2994":{"crate_id":1,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"1:2665:697":{"crate_id":1,"path":["core","ptr","drop_in_place"],"kind":"function"},"1:13426:7148":{"crate_id":1,"path":["core","str","pattern"],"kind":"module"},"1:11818:3675":{"crate_id":1,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"1:10613:156":{"crate_id":1,"path":["core","fmt","Formatter"],"kind":"struct"},"1:8387:134":{"crate_id":1,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"1:41303:146":{"crate_id":1,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"1:41581:3783":{"crate_id":1,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"1:43779:3063":{"crate_id":1,"path":["core","fmt","Arguments"],"kind":"struct"},"1:41591:3784":{"crate_id":1,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"1:4888:4376":{"crate_id":1,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"1:41133:4772":{"crate_id":1,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"1:38732:3151":{"crate_id":1,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"1:31205:3062":{"crate_id":1,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"1:53525:351":{"crate_id":1,"path":["core","array"],"kind":"primitive"},"1:45351:5317":{"crate_id":1,"path":["core","str","IsWhitespace"],"kind":"struct"},"1:46811:4899":{"crate_id":1,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"1:10870:165":{"crate_id":1,"path":["core","hash","macros","Hash"],"kind":"proc_derive"},"1:23510:13266":{"crate_id":1,"path":["core","num","nonzero","private","Sealed"],"kind":"trait"},"1:40207:227":{"crate_id":1,"path":["core","ops","range","RangeTo"],"kind":"struct"},"4:7060:3035":{"crate_id":4,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"1:3315:261":{"crate_id":1,"path":["core","marker","Sync"],"kind":"trait"},"4:1244:5529":{"crate_id":4,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"1:45248:4693":{"crate_id":1,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"1:5312:13531":{"crate_id":1,"path":["core","ffi","va_list","sealed_trait","VaArgSafe"],"kind":"trait"},"1:43703:12699":{"crate_id":1,"path":["core","fmt","rt","Flag"],"kind":"enum"},"4:282:2742":{"crate_id":4,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"1:3592:155":{"crate_id":1,"path":["core","ops","function","FnOnce"],"kind":"trait"},"1:41446:3782":{"crate_id":1,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"1:44856:4835":{"crate_id":1,"path":["core","str","iter","LinesAny"],"kind":"struct"},"1:42900:2491":{"crate_id":1,"path":["core","result","Iter"],"kind":"struct"},"4:722:4453":{"crate_id":4,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"1:41829:3749":{"crate_id":1,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"1:3141:127":{"crate_id":1,"path":["core","default","Default"],"kind":"trait"},"1:47823:4992":{"crate_id":1,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"1:10657:3054":{"crate_id":1,"path":["core","fmt","LowerHex"],"kind":"trait"},"4:0:325":{"crate_id":4,"path":["alloc"],"kind":"module"},"0:102:2526":{"crate_id":0,"path":["smallvec","IntoIter"],"kind":"struct"},"4:6502:4361":{"crate_id":4,"path":["alloc","sync","UniqueArcUninit"],"kind":"struct"},"1:47521:4955":{"crate_id":1,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"1:4493:4642":{"crate_id":1,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"1:3037:6806":{"crate_id":1,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"1:47966:5001":{"crate_id":1,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"4:4286:4346":{"crate_id":4,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"1:45339:5314":{"crate_id":1,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"4:5950:265":{"crate_id":4,"path":["alloc","string","ToString"],"kind":"trait"},"1:23241:4708":{"crate_id":1,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"4:6263:4346":{"crate_id":4,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"1:7735:3769":{"crate_id":1,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"4:4559:4348":{"crate_id":4,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"1:3580:2496":{"crate_id":1,"path":["core","ops","drop","Drop"],"kind":"trait"},"1:47598:4987":{"crate_id":1,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"1:44866:4836":{"crate_id":1,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"1:42554:4668":{"crate_id":1,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"1:31216:12544":{"crate_id":1,"path":["core","ptr","alignment","AlignmentEnum"],"kind":"enum"},"1:22641:3651":{"crate_id":1,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"1:10872:169":{"crate_id":1,"path":["core","hash","Hasher"],"kind":"trait"},"1:4897:3066":{"crate_id":1,"path":["core","cell","RefMut"],"kind":"struct"},"1:3057:78":{"crate_id":1,"path":["core","convert","AsRef"],"kind":"trait"},"4:39:3009":{"crate_id":4,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"1:43424:3053":{"crate_id":1,"path":["core","fmt","num","Binary"],"kind":"struct"},"1:40488:7024":{"crate_id":1,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"1:40091:3002":{"crate_id":1,"path":["core","ops","coroutine","CoroutineState"],"kind":"enum"},"4:7695:4495":{"crate_id":4,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"1:34048:3140":{"crate_id":1,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"1:2221:3126":{"crate_id":1,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"1:6989:3765":{"crate_id":1,"path":["core","iter","adapters","map_windows","MapWindows"],"kind":"struct"},"1:43976:4813":{"crate_id":1,"path":["core","hash","sip","State"],"kind":"struct"},"1:44796:4832":{"crate_id":1,"path":["core","str","iter","Matches"],"kind":"struct"},"1:44976:7169":{"crate_id":1,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"1:45679:4879":{"crate_id":1,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"1:4:1292":{"crate_id":1,"path":["core","panic"],"kind":"macro"},"1:23547:4736":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroU8Inner"],"kind":"struct"},"1:43289:98":{"crate_id":1,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"1:4644:4644":{"crate_id":1,"path":["core","cell","once","OnceCell"],"kind":"struct"},"1:46997:4917":{"crate_id":1,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"1:47852:4993":{"crate_id":1,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"4:212:3011":{"crate_id":4,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"4:5:1981":{"crate_id":4,"path":["alloc","vec"],"kind":"macro"},"1:32891:2996":{"crate_id":1,"path":["core","marker","Tuple"],"kind":"trait"},"1:41805:3744":{"crate_id":1,"path":["core","iter","sources","once","Once"],"kind":"struct"},"1:42689:3272":{"crate_id":1,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"1:45606:4875":{"crate_id":1,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"1:46886:4904":{"crate_id":1,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"1:8800:162":{"crate_id":1,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"1:1932:580":{"crate_id":1,"path":["core","intrinsics","copy_nonoverlapping"],"kind":"function"},"1:34249:3141":{"crate_id":1,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"4:7723:4498":{"crate_id":4,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"1:44521:3668":{"crate_id":1,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"1:5364:4649":{"crate_id":1,"path":["core","io","borrowed_buf","BorrowedBuf"],"kind":"struct"},"1:13215:3675":{"crate_id":1,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"0:399:2434":{"crate_id":0,"path":["smallvec","CollectionAllocErr","AllocErr"],"kind":"variant"},"1:42991:97":{"crate_id":1,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"4:4513:4346":{"crate_id":4,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"1:4919:3068":{"crate_id":1,"path":["core","cell","UnsafeCell"],"kind":"struct"},"1:4481:4641":{"crate_id":1,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"1:46761:4896":{"crate_id":1,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"4:1224:5415":{"crate_id":4,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"4:7604:2526":{"crate_id":4,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"1:45097:4853":{"crate_id":1,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"1:42767:4803":{"crate_id":1,"path":["core","range","iter","IterRangeInclusive"],"kind":"struct"},"1:42916:2526":{"crate_id":1,"path":["core","result","IntoIter"],"kind":"struct"},"1:42710:3540":{"crate_id":1,"path":["core","panicking","AssertKind"],"kind":"enum"},"1:33776:3138":{"crate_id":1,"path":["core","ops","arith","Rem"],"kind":"trait"},"1:44551:4825":{"crate_id":1,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"1:41229:4775":{"crate_id":1,"path":["core","io","borrowed_buf","BorrowedCursor"],"kind":"struct"},"1:22100:4120":{"crate_id":1,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"1:22131:16050":{"crate_id":1,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"1:6187:3774":{"crate_id":1,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"1:10912:3078":{"crate_id":1,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"4:1481:100":{"crate_id":4,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"1:34115:3144":{"crate_id":1,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"1:34634:3146":{"crate_id":1,"path":["core","ops","bit","BitOr"],"kind":"trait"},"1:47977:5002":{"crate_id":1,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"1:47367:4949":{"crate_id":1,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"1:43758:150":{"crate_id":1,"path":["core","fmt","Error"],"kind":"struct"},"1:13449:7154":{"crate_id":1,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"1:45547:231":{"crate_id":1,"path":["core","future","ready","Ready"],"kind":"struct"},"1:23018:12314":{"crate_id":1,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr"],"kind":"trait"},"2:234:238":{"crate_id":2,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"1:10102:85":{"crate_id":1,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"1:42819:226":{"crate_id":1,"path":["core","range","RangeInclusive"],"kind":"struct"},"1:42688:3273":{"crate_id":1,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"1:10653:3052":{"crate_id":1,"path":["core","fmt","Octal"],"kind":"trait"},"1:14025:4696":{"crate_id":1,"path":["core","future","async_drop","AsyncDropOwning"],"kind":"struct"},"1:44846:4834":{"crate_id":1,"path":["core","str","iter","Lines"],"kind":"struct"},"1:40999:4764":{"crate_id":1,"path":["core","char","EscapeUnicode"],"kind":"struct"},"4:6574:1981":{"crate_id":4,"path":["alloc","vec"],"kind":"module"},"1:47405:4951":{"crate_id":1,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"1:3063:175":{"crate_id":1,"path":["core","convert","Into"],"kind":"trait"},"1:47675:4988":{"crate_id":1,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"1:53534:761":{"crate_id":1,"path":["core","f128"],"kind":"primitive"},"1:5127:7061":{"crate_id":1,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"1:14358:4392":{"crate_id":1,"path":["core","task","wake","LocalWaker"],"kind":"struct"},"1:41791:4660":{"crate_id":1,"path":["core","iter","sources","from_coroutine","FromCoroutine"],"kind":"struct"},"1:22953:13266":{"crate_id":1,"path":["core","core_simd","simd","num","sealed","Sealed"],"kind":"trait"},"1:31190:3101":{"crate_id":1,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"4:4467:281":{"crate_id":4,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"1:43438:3054":{"crate_id":1,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"1:53520:1208":{"crate_id":1,"path":["core","never"],"kind":"primitive"},"1:13138:4686":{"crate_id":1,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"1:41375:3777":{"crate_id":1,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"0:397:2432":{"crate_id":0,"path":["smallvec","CollectionAllocErr","CapacityOverflow"],"kind":"variant"},"1:4063:2487":{"crate_id":1,"path":["core","array","drain","Drain"],"kind":"struct"},"1:10107:92":{"crate_id":1,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"1:43939:3081":{"crate_id":1,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"1:23075:12305":{"crate_id":1,"path":["core","core_simd","simd","cmp","eq","SimdPartialEq"],"kind":"trait"},"1:23103:12306":{"crate_id":1,"path":["core","core_simd","simd","cmp","ord","SimdPartialOrd"],"kind":"trait"},"1:41354:3776":{"crate_id":1,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"1:3533:3001":{"crate_id":1,"path":["core","ops","coroutine","Coroutine"],"kind":"trait"},"1:10663:3056":{"crate_id":1,"path":["core","fmt","LowerExp"],"kind":"trait"},"1:43431:3052":{"crate_id":1,"path":["core","fmt","num","Octal"],"kind":"struct"},"1:32794:4751":{"crate_id":1,"path":["core","error","Source"],"kind":"struct"},"4:7664:12484":{"crate_id":4,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"4:6020:2487":{"crate_id":4,"path":["alloc","string","Drain"],"kind":"struct"},"1:48068:5013":{"crate_id":1,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"1:23108:12304":{"crate_id":1,"path":["core","core_simd","simd","cmp","ord","SimdOrd"],"kind":"trait"},"1:47099:4923":{"crate_id":1,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"1:11775:3658":{"crate_id":1,"path":["core","slice","iter","Split"],"kind":"struct"},"4:297:2410":{"crate_id":4,"path":["alloc","boxed","Box"],"kind":"struct"},"1:53538:933":{"crate_id":1,"path":["core","i64"],"kind":"primitive"},"4:1610:4467":{"crate_id":4,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"4:3354:4487":{"crate_id":4,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"4:7495:3008":{"crate_id":4,"path":["alloc","alloc","Global"],"kind":"struct"},"1:46872:4903":{"crate_id":1,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"4:6555:12518":{"crate_id":4,"path":["alloc","task","LocalWake"],"kind":"trait"},"1:6995:5292":{"crate_id":1,"path":["core","iter","adapters","map_windows","MapWindowsInner"],"kind":"struct"},"1:4505:111":{"crate_id":1,"path":["core","asserting","Capture"],"kind":"struct"},"1:39476:3155":{"crate_id":1,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"1:42648:3268":{"crate_id":1,"path":["core","panic","location","Location"],"kind":"struct"},"1:11930:3662":{"crate_id":1,"path":["core","slice","iter","RSplit"],"kind":"struct"},"1:42611:185":{"crate_id":1,"path":["core","option","Item"],"kind":"struct"},"4:3695:2491":{"crate_id":4,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"1:53544:1877":{"crate_id":1,"path":["core","u128"],"kind":"primitive"},"4:1364:12487":{"crate_id":4,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"1:40985:4762":{"crate_id":1,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"1:8809:3757":{"crate_id":1,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"1:2230:3125":{"crate_id":1,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"1:42332:182":{"crate_id":1,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"1:4762:4645":{"crate_id":1,"path":["core","cell","BorrowError"],"kind":"struct"},"1:40315:4755":{"crate_id":1,"path":["core","array","TryFromSliceError"],"kind":"struct"},"1:7000:4383":{"crate_id":1,"path":["core","iter","adapters","map_windows","Buffer"],"kind":"struct"},"1:23602:4741":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroUsizeInner"],"kind":"struct"},"1:41331:4778":{"crate_id":1,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"1:11066:4386":{"crate_id":1,"path":["core","slice","sort","stable","merge","MergeState"],"kind":"struct"},"1:41416:3780":{"crate_id":1,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"1:40900:4640":{"crate_id":1,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"1:3320:2412":{"crate_id":1,"path":["core","marker","PhantomData"],"kind":"struct"},"1:3394:3139":{"crate_id":1,"path":["core","ops","arith","Sub"],"kind":"trait"},"1:10293:5650":{"crate_id":1,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"1:3474:3148":{"crate_id":1,"path":["core","ops","bit","Not"],"kind":"trait"},"1:45619:12786":{"crate_id":1,"path":["core","task","wake","ExtData"],"kind":"enum"},"1:8023:3741":{"crate_id":1,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"1:11337:4389":{"crate_id":1,"path":["core","slice","sort","shared","smallsort","CopyOnDrop"],"kind":"struct"},"1:53533:782":{"crate_id":1,"path":["core","f64"],"kind":"primitive"},"1:12554:3674":{"crate_id":1,"path":["core","slice","iter","ChunkByMut"],"kind":"struct"},"4:5507:2742":{"crate_id":4,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"4:1549:2526":{"crate_id":4,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"1:12592:2528":{"crate_id":1,"path":["core","slice","raw","from_raw_parts"],"kind":"function"},"4:3086:5417":{"crate_id":4,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"1:44578:4766":{"crate_id":1,"path":["core","str","iter","Bytes"],"kind":"struct"},"1:23489:6873":{"crate_id":1,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"1:14315:119":{"crate_id":1,"path":["core","task","wake","Context"],"kind":"struct"},"1:12009:3660":{"crate_id":1,"path":["core","slice","iter","SplitN"],"kind":"struct"},"1:32804:251":{"crate_id":1,"path":["core","marker","Sized"],"kind":"trait"},"1:44438:3665":{"crate_id":1,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"1:48015:5010":{"crate_id":1,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"4:1380:4457":{"crate_id":4,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"1:14338:4390":{"crate_id":1,"path":["core","task","wake","Waker"],"kind":"struct"},"1:0:585":{"crate_id":1,"path":["core"],"kind":"module"},"1:2119:696":{"crate_id":1,"path":["core","mem","drop"],"kind":"function"},"1:3069:272":{"crate_id":1,"path":["core","convert","TryInto"],"kind":"trait"},"1:11857:3659":{"crate_id":1,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"1:41253:3760":{"crate_id":1,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"1:30922:6807":{"crate_id":1,"path":["core","num","FpCategory"],"kind":"enum"},"4:3299:16516":{"crate_id":4,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"1:3712:223":{"crate_id":1,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"0:66:2487":{"crate_id":0,"path":["smallvec","Drain"],"kind":"struct"},"4:4356:2491":{"crate_id":4,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"1:13177:4688":{"crate_id":1,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"1:47894:4995":{"crate_id":1,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"1:41015:4765":{"crate_id":1,"path":["core","char","EscapeDebug"],"kind":"struct"},"1:10661:218":{"crate_id":1,"path":["core","fmt","Pointer"],"kind":"trait"},"1:23061:13266":{"crate_id":1,"path":["core","core_simd","simd","ptr","sealed","Sealed"],"kind":"trait"},"1:46723:4890":{"crate_id":1,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"1:32861:3087":{"crate_id":1,"path":["core","marker","Unpin"],"kind":"trait"},"1:45557:239":{"crate_id":1,"path":["core","future","ResumeTy"],"kind":"struct"},"1:13432:4674":{"crate_id":1,"path":["core","str","pattern","Pattern"],"kind":"trait"},"1:3564:2750":{"crate_id":1,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"1:8083:3743":{"crate_id":1,"path":["core","iter","sources","once","once"],"kind":"function"},"1:2679:3114":{"crate_id":1,"path":["core","ptr","with_exposed_provenance"],"kind":"function"},"1:47067:4921":{"crate_id":1,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"1:53526:1736":{"crate_id":1,"path":["core","slice"],"kind":"primitive"},"1:909:202":{"crate_id":1,"path":["core","num","nonzero","NonZero"],"kind":"struct"},"1:44418:3654":{"crate_id":1,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"1:3775:3157":{"crate_id":1,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"1:23613:4742":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroI8Inner"],"kind":"struct"},"1:40906:4756":{"crate_id":1,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"1:53548:13":{"crate_id":1,"path":["core","fn"],"kind":"primitive"},"1:3419:2999":{"crate_id":1,"path":["core","ops","async_function","AsyncFnMut"],"kind":"trait"},"4:2140:4469":{"crate_id":4,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"1:22144:16053":{"crate_id":1,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"1:23309:5293":{"crate_id":1,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"1:44400:3655":{"crate_id":1,"path":["core","slice","iter","Windows"],"kind":"struct"},"1:45656:3049":{"crate_id":1,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"4:1395:4460":{"crate_id":4,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"4:3854:4471":{"crate_id":4,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"1:2761:2418":{"crate_id":1,"path":["core","ptr","addr_of_mut"],"kind":"macro"},"1:38897:3154":{"crate_id":1,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"1:45424:7180":{"crate_id":1,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"1:42908:2764":{"crate_id":1,"path":["core","result","IterMut"],"kind":"struct"},"4:2165:4472":{"crate_id":4,"path":["alloc","collections","btree","map","CursorMutKey"],"kind":"struct"},"1:6110:4346":{"crate_id":1,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"1:3802:3161":{"crate_id":1,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"4:7584:4494":{"crate_id":4,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"1:13502:7163":{"crate_id":1,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"1:3569:3003":{"crate_id":1,"path":["core","ops","deref","DerefPure"],"kind":"trait"},"1:41839:3751":{"crate_id":1,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"1:43445:3055":{"crate_id":1,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"1:41820:3747":{"crate_id":1,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"4:7782:4503":{"crate_id":4,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"1:42860:238":{"crate_id":1,"path":["core","result","Result"],"kind":"enum"},"4:2575:5285":{"crate_id":4,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"4:7568:2526":{"crate_id":4,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"1:3867:132":{"crate_id":1,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"1:11726:2491":{"crate_id":1,"path":["core","slice","iter","Iter"],"kind":"struct"},"1:41397:3778":{"crate_id":1,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"1:44660:4829":{"crate_id":1,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"4:2360:5284":{"crate_id":4,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"1:22981:3114":{"crate_id":1,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_exposed_provenance"],"kind":"function"},"1:7851:3738":{"crate_id":1,"path":["core","iter","range","Step"],"kind":"trait"},"4:7524:2487":{"crate_id":4,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"1:13161:4687":{"crate_id":1,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"1:46644:4883":{"crate_id":1,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"4:7233:4367":{"crate_id":4,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"1:34461:3145":{"crate_id":1,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"1:1937:578":{"crate_id":1,"path":["core","intrinsics","copy"],"kind":"function"},"1:40936:4757":{"crate_id":1,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"1:45026:4850":{"crate_id":1,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"1:2778:103":{"crate_id":1,"path":["core","borrow","Borrow"],"kind":"trait"},"1:2814:2995":{"crate_id":1,"path":["core","clone","CloneToUninit"],"kind":"trait"},"1:42370:4667":{"crate_id":1,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"1:47128:4924":{"crate_id":1,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"1:2156:1397":{"crate_id":1,"path":["core","ptr"],"kind":"module"},"4:3708:2764":{"crate_id":4,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"4:4982:229":{"crate_id":4,"path":["alloc","rc","Rc"],"kind":"struct"},"1:44900:4640":{"crate_id":1,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"1:45389:135":{"crate_id":1,"path":["core","time","Duration"],"kind":"struct"},"4:7094:3037":{"crate_id":4,"path":["alloc","vec","in_place_drop","InPlaceDstDataSrcBufDrop"],"kind":"struct"},"1:41211:7076":{"crate_id":1,"path":["core","ffi","c_char"],"kind":"type_alias"},"1:44742:4830":{"crate_id":1,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"1:10651:133":{"crate_id":1,"path":["core","fmt","Display"],"kind":"trait"},"1:2908:214":{"crate_id":1,"path":["core","cmp","PartialOrd"],"kind":"trait"},"1:23624:4743":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroI16Inner"],"kind":"struct"},"1:45565:219":{"crate_id":1,"path":["core","task","poll","Poll"],"kind":"enum"},"1:53547:1460":{"crate_id":1,"path":["core","reference"],"kind":"primitive"},"1:48107:5029":{"crate_id":1,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"1:53531:763":{"crate_id":1,"path":["core","f16"],"kind":"primitive"},"1:47951:5000":{"crate_id":1,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"1:2040:4346":{"crate_id":1,"path":["core","mem","maybe_uninit","Guard"],"kind":"struct"},"4:7512:4492":{"crate_id":4,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"1:8270:3759":{"crate_id":1,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"4:6105:72":{"crate_id":4,"path":["alloc","sync","Arc"],"kind":"struct"},"1:22652:16055":{"crate_id":1,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"1:41798:3742":{"crate_id":1,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"1:45131:4692":{"crate_id":1,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"4:5556:12501":{"crate_id":4,"path":["alloc","slice","Join"],"kind":"trait"},"1:48030:5011":{"crate_id":1,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"1:47276:4946":{"crate_id":1,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"1:41293:3771":{"crate_id":1,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"4:2340:16408":{"crate_id":4,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"1:40962:4760":{"crate_id":1,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"1:23294:4709":{"crate_id":1,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"0:296:2760":{"crate_id":0,"path":["smallvec","smallvec"],"kind":"macro"},"1:43664:5302":{"crate_id":1,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"1:47149:4925":{"crate_id":1,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"4:6137:4355":{"crate_id":4,"path":["alloc","sync","Weak"],"kind":"struct"},"4:1779:2742":{"crate_id":4,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"1:43252:91":{"crate_id":1,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"1:22231:12226":{"crate_id":1,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"1:42354:4665":{"crate_id":1,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"1:53545:996":{"crate_id":1,"path":["core","isize"],"kind":"primitive"},"1:53528:1860":{"crate_id":1,"path":["core","tuple"],"kind":"primitive"},"1:32862:3088":{"crate_id":1,"path":["core","marker","PhantomPinned"],"kind":"struct"},"1:4831:4375":{"crate_id":1,"path":["core","cell","BorrowRef"],"kind":"struct"},"1:40975:4761":{"crate_id":1,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"1:41456:3767":{"crate_id":1,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"1:3424:3000":{"crate_id":1,"path":["core","ops","async_function","AsyncFnOnce"],"kind":"trait"},"1:12051:3657":{"crate_id":1,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"1:3060:77":{"crate_id":1,"path":["core","convert","AsMut"],"kind":"trait"},"1:43986:4817":{"crate_id":1,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"1:14450:3007":{"crate_id":1,"path":["core","alloc","Allocator"],"kind":"trait"},"1:4613:4643":{"crate_id":1,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"1:31590:4120":{"crate_id":1,"path":["core","cmp","Reverse"],"kind":"struct"},"1:40135:3028":{"crate_id":1,"path":["core","ops","index","Index"],"kind":"trait"},"1:41181:4377":{"crate_id":1,"path":["core","ffi","va_list","VaListImpl"],"kind":"struct"},"4:7554:16405":{"crate_id":4,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"1:4547:7044":{"crate_id":1,"path":["core","async_iter","async_iter","IntoAsyncIterator"],"kind":"trait"},"4:2806:5289":{"crate_id":4,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"1:10649:123":{"crate_id":1,"path":["core","fmt","macros","Debug"],"kind":"proc_derive"},"4:3294:4481":{"crate_id":4,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"1:3152:150":{"crate_id":1,"path":["core","error","Error"],"kind":"trait"},"4:7612:2526":{"crate_id":4,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"1:45363:5320":{"crate_id":1,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"1:40267:2588":{"crate_id":1,"path":["core","ops","range","Bound"],"kind":"enum"},"1:43213:96":{"crate_id":1,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"1:2418:3005":{"crate_id":1,"path":["core","ptr","unique","Unique"],"kind":"struct"},"1:31152:2415":{"crate_id":1,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"1:42520:4795":{"crate_id":1,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"4:5811:3035":{"crate_id":4,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"1:13658:123":{"crate_id":1,"path":["core","str","lossy","Debug"],"kind":"struct"},"1:41814:3746":{"crate_id":1,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"1:11201:4388":{"crate_id":1,"path":["core","slice","sort","unstable","quicksort","GapGuardRaw"],"kind":"struct"},"1:45640:192":{"crate_id":1,"path":["core","alloc","layout","Layout"],"kind":"struct"},"1:3066:157":{"crate_id":1,"path":["core","convert","From"],"kind":"trait"},"3:0:2982":{"crate_id":3,"path":["rustc_std_workspace_core"],"kind":"module"},"1:34980:3149":{"crate_id":1,"path":["core","ops","bit","Shl"],"kind":"trait"},"1:23657:4746":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroI128Inner"],"kind":"struct"},"1:46790:4898":{"crate_id":1,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"4:925:4330":{"crate_id":4,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"1:10665:3057":{"crate_id":1,"path":["core","fmt","UpperExp"],"kind":"trait"},"1:8495:190":{"crate_id":1,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"1:23416:12537":{"crate_id":1,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"1:40947:12560":{"crate_id":1,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"1:47181:4927":{"crate_id":1,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"1:43674:3062":{"crate_id":1,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"1:3036:13266":{"crate_id":1,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"1:45535:5323":{"crate_id":1,"path":["core","future","async_drop","Noop"],"kind":"struct"},"1:11194:4387":{"crate_id":1,"path":["core","slice","sort","unstable","quicksort","GapGuard"],"kind":"struct"},"1:44997:4840":{"crate_id":1,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"4:6158:5418":{"crate_id":4,"path":["alloc","sync","ArcInner"],"kind":"struct"},"1:22619:12229":{"crate_id":1,"path":["core","core_simd","to_bytes","ToBytes"],"kind":"trait"},"4:7772:4502":{"crate_id":4,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"1:53535:939":{"crate_id":1,"path":["core","i8"],"kind":"primitive"},"1:7629:3485":{"crate_id":1,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"1:10864:165":{"crate_id":1,"path":["core","hash","Hash"],"kind":"trait"},"1:41236:3670":{"crate_id":1,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"1:22614:13266":{"crate_id":1,"path":["core","core_simd","to_bytes","sealed","Sealed"],"kind":"trait"},"1:46691:4888":{"crate_id":1,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"1:43964:169":{"crate_id":1,"path":["core","hash","sip","Hasher"],"kind":"struct"},"4:2258:4473":{"crate_id":4,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"4:3839:4469":{"crate_id":4,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"4:7679:4352":{"crate_id":4,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"1:42386:7097":{"crate_id":1,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"1:14042:4699":{"crate_id":1,"path":["core","future","async_drop","AsyncDropInPlace"],"kind":"struct"},"1:23324:4710":{"crate_id":1,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"1:4405:4346":{"crate_id":1,"path":["core","array","Guard"],"kind":"struct"},"1:42795:222":{"crate_id":1,"path":["core","range","Range"],"kind":"struct"},"1:41432:3781":{"crate_id":1,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"4:7504:2526":{"crate_id":4,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"1:34182:3142":{"crate_id":1,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"4:7708:7090":{"crate_id":4,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"1:906:6860":{"crate_id":1,"path":["core","num","nonzero","ZeroablePrimitive"],"kind":"trait"},"1:46915:4913":{"crate_id":1,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"1:12521:3673":{"crate_id":1,"path":["core","slice","iter","ChunkBy"],"kind":"struct"},"1:45355:5318":{"crate_id":1,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"1:22349:12224":{"crate_id":1,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"1:42628:2764":{"crate_id":1,"path":["core","option","IterMut"],"kind":"struct"},"4:1208:5528":{"crate_id":4,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"0:297:2763":{"crate_id":0,"path":["smallvec","smallvec_inline"],"kind":"macro"},"1:45039:4851":{"crate_id":1,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"1:41262:3770":{"crate_id":1,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"1:45371:5322":{"crate_id":1,"path":["core","time","Nanoseconds"],"kind":"struct"},"4:1621:222":{"crate_id":4,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"1:22170:13266":{"crate_id":1,"path":["core","core_simd","cast","sealed","Sealed"],"kind":"trait"},"1:3357:3086":{"crate_id":1,"path":["core","marker","FnPtr"],"kind":"trait"},"1:53522:1923":{"crate_id":1,"path":["core","unit"],"kind":"primitive"},"1:47293:4947":{"crate_id":1,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"4:4482:4348":{"crate_id":4,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"1:44562:4682":{"crate_id":1,"path":["core","str","iter","Chars"],"kind":"struct"},"1:32893:118":{"crate_id":1,"path":["core","marker","ConstParamTy_"],"kind":"trait"},"1:42498:12565":{"crate_id":1,"path":["core","net","parser","AddrKind"],"kind":"enum"},"4:5126:4346":{"crate_id":4,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"4:3076:16519":{"crate_id":4,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"1:47166:4926":{"crate_id":1,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"1:9442:3270":{"crate_id":1,"path":["core","panic","panic_info","PanicMessage"],"kind":"struct"},"1:10288:15596":{"crate_id":1,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"1:2091:1732":{"crate_id":1,"path":["core","mem","size_of"],"kind":"function"},"1:3404:3137":{"crate_id":1,"path":["core","ops","arith","Neg"],"kind":"trait"},"1:43028:87":{"crate_id":1,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"1:53536:921":{"crate_id":1,"path":["core","i16"],"kind":"primitive"},"1:53542:1889":{"crate_id":1,"path":["core","u32"],"kind":"primitive"},"1:45359:5319":{"crate_id":1,"path":["core","str","IsNotEmpty"],"kind":"struct"},"4:4196:2764":{"crate_id":4,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"1:45012:4847":{"crate_id":1,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"1:45367:5321":{"crate_id":1,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"1:3310:121":{"crate_id":1,"path":["core","marker","Copy"],"kind":"trait"}},"external_crates":{"2":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":32}