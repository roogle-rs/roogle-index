{"root":"0:0","crate_version":"1.58.0-dev","includes_private":true,"index":{"5:545":{"id":"5:545","crate_id":5,"name":"clone_into","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["target",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"T"}}}]],"output":{"kind":"tuple","inner":[]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:179":{"id":"0:179","crate_id":0,"name":"INLINE_NO_SANITIZE","span":{"filename":"compiler/rustc_lint_defs/src/builtin.rs","begin":[2383,0],"end":[2414,1]},"visibility":"public","docs":"The `inline_no_sanitize` lint detects incompatible use of\n[`#[inline(always)]`][inline] and [`#[no_sanitize(...)]`][no_sanitize].\n\n[inline]: https://doc.rust-lang.org/reference/attributes/codegen.html#the-inline-attribute\n[no_sanitize]: https://doc.rust-lang.org/nightly/unstable-book/language-features/no-sanitize.html\n\n### Example\n\n```rust\n#![feature(no_sanitize)]\n\n#[inline(always)]\n#[no_sanitize(address)]\nfn x() {}\n\nfn main() {\n    x()\n}\n```\n\n{{produces}}\n\n### Explanation\n\nThe use of the [`#[inline(always)]`][inline] attribute prevents the\nthe [`#[no_sanitize(...)]`][no_sanitize] attribute from working.\nConsider temporarily removing `inline` attribute.","links":{},"attrs":[],"deprecation":null,"kind":"static","inner":{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"$crate::Lint","id":"0:292","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"mutable":false,"expr":"&crate::Lint{name: \"INLINE_NO_SANITIZE\",\n             default_level: crate::Warn,\n             desc:\n                 \"detects incompatible use of `#[inline(always)]` and `#[no_sanitize(...)]`\",\n             edition_lint_opts: None,\n             is_plugin: false, ..crate::Lint::default_fields_for_macro()}"}},"0:70":{"id":"0:70","crate_id":0,"name":"edition","span":{"filename":"compiler/rustc_lint_defs/src/lib.rs","begin":[175,4],"end":[181,5]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:43419","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Edition","id":"22:1818","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:405":{"id":"0:405","crate_id":0,"name":"0","span":{"filename":"compiler/rustc_lint_defs/src/lib.rs","begin":[300,29],"end":[300,33]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"struct_field","inner":{"kind":"resolved_path","inner":{"name":"Span","id":"22:2708","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}},"2:12360":{"id":"2:12360","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"self::pattern":"2:11957","prim@char":"1:15260","`None`":"2:43419"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:43419","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:11967","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"header":[],"abi":"\"Rust\"","has_body":true}},"2:12364":{"id":"2:12364","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the rightmost match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"self::pattern":"2:11957","prim@char":"1:15260","`None`":"2:43419"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:43419","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:11967","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}},{"bound_predicate":{"ty":{"kind":"qualified_path","inner":{"name":"Searcher","self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:11967","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:11982","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:230":{"id":"0:230","crate_id":0,"name":"HasPlaceholders","span":{"filename":"compiler/rustc_lint_defs/src/lib.rs","begin":[43,4],"end":[43,19]},"visibility":"default","docs":"The suggestion contains placeholders like `(...)` or `{ /* fields */ }`. The suggestion\ncannot be applied automatically because it will not result in valid Rust code. The user\nwill need to fill in the placeholders.","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"2:3282":{"id":"2:3282","crate_id":2,"name":"Generator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3284","2:3285","2:3286"],"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":{"kind":"tuple","inner":[]}}}}],"where_predicates":[]},"bounds":[],"implementors":[]}},"0:175":{"id":"0:175","crate_id":0,"name":"NONTRIVIAL_STRUCTURAL_MATCH","span":{"filename":"compiler/rustc_lint_defs/src/builtin.rs","begin":[2217,0],"end":[2253,1]},"visibility":"public","docs":"The `nontrivial_structural_match` lint detects constants that are used in patterns,\nwhose type is not structural-match and whose initializer body actually uses values\nthat are not structural-match. So `Option<NotStruturalMatch>` is ok if the constant\nis just `None`.\n\n### Example\n\n```rust,compile_fail\n#![deny(nontrivial_structural_match)]\n\n#[derive(Copy, Clone, Debug)]\nstruct NoDerive(u32);\nimpl PartialEq for NoDerive { fn eq(&self, _: &Self) -> bool { false } }\nimpl Eq for NoDerive { }\nfn main() {\n    const INDEX: Option<NoDerive> = [None, Some(NoDerive(10))][0];\n    match None { Some(_) => panic!(\"whoops\"), INDEX => dbg!(INDEX), };\n}\n```\n\n{{produces}}\n\n### Explanation\n\nPrevious versions of Rust accepted constants in patterns, even if those constants's types\ndid not have `PartialEq` derived. Thus the compiler falls back to runtime execution of\n`PartialEq`, which can report that two constants are not equal even if they are\nbit-equivalent.","links":{},"attrs":[],"deprecation":null,"kind":"static","inner":{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"$crate::Lint","id":"0:292","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"mutable":false,"expr":"&crate::Lint{name: \"NONTRIVIAL_STRUCTURAL_MATCH\",\n             default_level: crate::Warn,\n             desc:\n                 \"constant used in pattern of non-structural-match type and the constant\\'s initializer expression contains values of non-structural-match types\",\n             edition_lint_opts: None,\n             is_plugin: false,\n             future_incompatible:\n                 Some(crate::FutureIncompatibleInfo{reference:\n                                                        \"issue #73448 <https://github.com/rust-lang/rust/issues/73448>\",\n                                                                                                                           ..crate::FutureIncompatibleInfo::default_fields_for_macro()}),\n                                                                                                                                                                                            ..crate::Lint::default_fields_for_macro()}"}},"2:12368":{"id":"2:12368","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"2:11957","str::rsplit":"1:15265","`DoubleEndedIterator`":"2:7470","str::split_whitespace":"1:15265","prim@char":"1:15260"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Split","id":"2:45267","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:11967","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:109":{"id":"0:109","crate_id":0,"name":"name","span":{"filename":"compiler/rustc_lint_defs/src/lib.rs","begin":[528,4],"end":[528,35]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'static","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":false}},"a:2:3045-0:454":{"id":"a:2:3045-0:454","crate_id":0,"name":null,"span":{"filename":"compiler/rustc_lint_defs/src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Unpin","id":"2:3045","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"LintBuffer","id":"0:454","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"b:2:2948-0:194":{"id":"b:2:2948-0:194","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}},{"name":"U","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:2907","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:2917","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"HardwiredLints","id":"0:194","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:2951","2:2952"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"a:2:3045-0:332":{"id":"a:2:3045-0:332","crate_id":0,"name":null,"span":{"filename":"compiler/rustc_lint_defs/src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Unpin","id":"2:3045","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"LintId","id":"0:332","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:278":{"id":"0:278","crate_id":0,"name":"partial_cmp","span":{"filename":"compiler/rustc_lint_defs/src/lib.rs","begin":[50,33],"end":[50,43]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"Level","id":"0:260","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"$crate::option::Option","id":"2:43419","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"$crate::cmp::Ordering","id":"2:33722","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:386":{"id":"0:386","crate_id":0,"name":"0","span":{"filename":"compiler/rustc_lint_defs/src/lib.rs","begin":[295,20],"end":[295,37]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"struct_field","inner":{"kind":"resolved_path","inner":{"name":"Vec","id":"5:7062","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"resolved_path","inner":{"name":"Span","id":"22:2708","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},{"kind":"primitive","inner":"bool"}]}}],"bindings":[]}},"param_names":[]}}},"b:2:2943-0:316":{"id":"b:2:2943-0:316","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}},{"name":"U","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:2917","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"TryInto","id":"2:2913","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"FutureIncompatibilityReason","id":"0:316","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:2946","2:2947"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"a:2:3045-0:260":{"id":"a:2:3045-0:260","crate_id":0,"name":null,"span":{"filename":"compiler/rustc_lint_defs/src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Unpin","id":"2:3045","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Level","id":"0:260","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:3092":{"id":"2:3092","crate_id":2,"name":"Rem","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3094","2:3095"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"}}}}],"where_predicates":[]},"bounds":[],"implementors":[]}},"a:2:8324-0:454":{"id":"a:2:8324-0:454","crate_id":0,"name":null,"span":{"filename":"compiler/rustc_lint_defs/src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"UnwindSafe","id":"2:8324","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"LintBuffer","id":"0:454","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:9570":{"id":"2:9570","crate_id":2,"name":"Hasher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:9571","2:9572","2:9573","2:9574","2:9575","2:9576","2:9577","2:9578","2:9579","2:9580","2:9581","2:9582","2:9583","2:9584"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementors":[]}},"0:149":{"id":"0:149","crate_id":0,"name":"MISSING_FRAGMENT_SPECIFIER","span":{"filename":"compiler/rustc_lint_defs/src/builtin.rs","begin":[1237,0],"end":[1278,1]},"visibility":"public","docs":"The `missing_fragment_specifier` lint is issued when an unused pattern in a\n`macro_rules!` macro definition has a meta-variable (e.g. `$e`) that is not\nfollowed by a fragment specifier (e.g. `:expr`).\n\nThis warning can always be fixed by removing the unused pattern in the\n`macro_rules!` macro definition.\n\n### Example\n\n```rust,compile_fail\nmacro_rules! foo {\n   () => {};\n   ($name) => { };\n}\n\nfn main() {\n   foo!();\n}\n```\n\n{{produces}}\n\n### Explanation\n\nTo fix this, remove the unused pattern from the `macro_rules!` macro definition:\n\n```rust\nmacro_rules! foo {\n    () => {};\n}\nfn main() {\n    foo!();\n}\n```","links":{},"attrs":[],"deprecation":null,"kind":"static","inner":{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"$crate::Lint","id":"0:292","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"mutable":false,"expr":"&crate::Lint{name: \"MISSING_FRAGMENT_SPECIFIER\",\n             default_level: crate::Deny,\n             desc:\n                 \"detects missing fragment specifiers in unused `macro_rules!` patterns\",\n             edition_lint_opts: None,\n             is_plugin: false,\n             future_incompatible:\n                 Some(crate::FutureIncompatibleInfo{reference:\n                                                        \"issue #40107 <https://github.com/rust-lang/rust/issues/40107>\",\n                                                                                                                           ..crate::FutureIncompatibleInfo::default_fields_for_macro()}),\n                                                                                                                                                                                            ..crate::Lint::default_fields_for_macro()}"}},"0:211":{"id":"0:211","crate_id":0,"name":"name","span":{"filename":"compiler/rustc_lint_defs/src/builtin.rs","begin":[3163,0],"end":[3163,61]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'static","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:79":{"id":"0:79","crate_id":0,"name":null,"span":{"filename":"compiler/rustc_lint_defs/src/lib.rs","begin":[229,0],"end":[233,1]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"kind":"resolved_path","inner":{"name":"PartialEq","id":"2:2655","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"LintId","id":"0:332","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"LintId","id":"0:332","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:80"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:2:2933-0:225":{"id":"b:2:2933-0:225","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}},{"name":"U","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"From","id":"2:2910","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:2907","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Applicability","id":"0:225","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:2936"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:394":{"id":"0:394","crate_id":0,"name":"0","span":{"filename":"compiler/rustc_lint_defs/src/lib.rs","begin":[297,15],"end":[297,19]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"struct_field","inner":{"kind":"resolved_path","inner":{"name":"Span","id":"22:2708","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}},"2:7877":{"id":"2:7877","crate_id":2,"name":"TrustedLen","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"2:7606","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementors":[]}},"2:8847":{"id":"2:8847","crate_id":2,"name":"Stream","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8848","2:8849","2:8850"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementors":[]}},"2:7470":{"id":"2:7470","crate_id":2,"name":"DoubleEndedIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:7471","2:7472","2:7473","2:7474","2:7478","2:7481"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"2:7606","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementors":[]}},"b:2:2933-0:292":{"id":"b:2:2933-0:292","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}},{"name":"U","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"From","id":"2:2910","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:2907","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Lint","id":"0:292","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:2936"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:3304":{"id":"2:3304","crate_id":2,"name":"IndexMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3306"],"generics":{"params":[{"name":"Idx","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"Idx"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3009","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}]}}]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Index","id":"2:3300","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Idx"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementors":[]}},"0:159":{"id":"0:159","crate_id":0,"name":"TYVAR_BEHIND_RAW_POINTER","span":{"filename":"compiler/rustc_lint_defs/src/builtin.rs","begin":[1547,0],"end":[1585,1]},"visibility":"public","docs":"The `tyvar_behind_raw_pointer` lint detects raw pointer to an\ninference variable.\n\n### Example\n\n```rust,edition2015\n// edition 2015\nlet data = std::ptr::null();\nlet _ = &data as *const *const ();\n\nif data.is_null() {}\n```\n\n{{produces}}\n\n### Explanation\n\nThis kind of inference was previously allowed, but with the future\narrival of [arbitrary self types], this can introduce ambiguity. To\nresolve this, use an explicit type instead of relying on type\ninference.\n\nThis is a [future-incompatible] lint to transition this to a hard\nerror in the 2018 edition. See [issue #46906] for more details. This\nis currently a hard-error on the 2018 edition, and is \"warn\" by\ndefault in the 2015 edition.\n\n[arbitrary self types]: https://github.com/rust-lang/rust/issues/44874\n[issue #46906]: https://github.com/rust-lang/rust/issues/46906\n[future-incompatible]: ../index.md#future-incompatible-lints","links":{},"attrs":[],"deprecation":null,"kind":"static","inner":{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"$crate::Lint","id":"0:292","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"mutable":false,"expr":"&crate::Lint{name: \"TYVAR_BEHIND_RAW_POINTER\",\n             default_level: crate::Warn,\n             desc: \"raw pointer to an inference variable\",\n             edition_lint_opts: None,\n             is_plugin: false,\n             future_incompatible:\n                 Some(crate::FutureIncompatibleInfo{reference:\n                                                        \"issue #46906 <https://github.com/rust-lang/rust/issues/46906>\",\n                                                    reason:\n                                                        FutureIncompatibilityReason::EditionError(Edition::Edition2018),\n                                                                                                                           ..crate::FutureIncompatibleInfo::default_fields_for_macro()}),\n                                                                                                                                                                                            ..crate::Lint::default_fields_for_macro()}"}},"0:197":{"id":"0:197","crate_id":0,"name":null,"span":{"filename":"compiler/rustc_lint_defs/src/builtin.rs","begin":[2963,0],"end":[3059,1]},"visibility":{"restricted":{"parent":"0:47","path":"::builtin"}},"docs":null,"links":{},"attrs":["#[automatically_derived]","#[allow(unused_qualifications)]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2625","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"HardwiredLints","id":"0:194","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:198"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:2:2933-0:444":{"id":"b:2:2933-0:444","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}},{"name":"U","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"From","id":"2:2910","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:2907","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"BufferedEarlyLint","id":"0:444","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:2936"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:110":{"id":"0:110","crate_id":0,"name":"impl_lint_pass","span":{"filename":"compiler/rustc_lint_defs/src/lib.rs","begin":[533,0],"end":[542,1]},"visibility":"public","docs":"Implements `LintPass for $ty` with the given list of `Lint` statics.","links":{},"attrs":["#[macro_export]"],"deprecation":null,"kind":"macro","inner":"macro_rules! impl_lint_pass {\n    ($ty : ty => [$($lint : expr), * $(,) ?]) => { ... };\n}"},"2:3086":{"id":"2:3086","crate_id":2,"name":"Div","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3088","2:3089"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"}}}}],"where_predicates":[]},"bounds":[],"implementors":[]}},"0:102":{"id":"0:102","crate_id":0,"name":"buffer_lint_with_diagnostic","span":{"filename":"compiler/rustc_lint_defs/src/lib.rs","begin":[373,4],"end":[382,5]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["lint",{"kind":"borrowed_ref","inner":{"lifetime":"'static","mutable":false,"type":{"kind":"resolved_path","inner":{"name":"Lint","id":"0:292","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}],["id",{"kind":"resolved_path","inner":{"name":"NodeId","id":"21:6504","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}],["sp",{"kind":"impl_trait","inner":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:2907","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"MultiSpan","id":"22:4418","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}],["msg",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}],["diagnostic",{"kind":"resolved_path","inner":{"name":"BuiltinLintDiagnostics","id":"0:352","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"impl Into<MultiSpan>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:2907","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"MultiSpan","id":"22:4418","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null}}}],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:72":{"id":"0:72","crate_id":0,"name":"default_fields_for_macro","span":{"filename":"compiler/rustc_lint_defs/src/lib.rs","begin":[185,4],"end":[191,5]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":["const"],"abi":"\"Rust\"","has_body":true}},"0:279":{"id":"0:279","crate_id":0,"name":null,"span":{"filename":"compiler/rustc_lint_defs/src/lib.rs","begin":[50,45],"end":[50,47]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"StructuralEq","id":"2:3013","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Level","id":"0:260","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"b:2:2948-0:205":{"id":"b:2:2948-0:205","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}},{"name":"U","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:2907","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:2917","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"UnusedDocComment","id":"0:205","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:2951","2:2952"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:12407":{"id":"2:12407","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[inline]","#[must_use =\n  \"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:4":{"id":"0:4","crate_id":0,"name":null,"span":{"filename":"compiler/rustc_lint_defs/src/lib.rs","begin":[4,0],"end":[4,23]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"self::Level","name":"Level","id":"0:260","glob":true}},"2:12345":{"id":"2:12345","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Bytes","id":"2:45253","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"a:2:3004-0:444":{"id":"a:2:3004-0:444","crate_id":0,"name":null,"span":{"filename":"compiler/rustc_lint_defs/src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Send","id":"2:3004","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"BufferedEarlyLint","id":"0:444","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}},"2:3012":{"id":"2:3012","crate_id":2,"name":"StructuralPartialEq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementors":[]}},"1:4431":{"id":"1:4431","crate_id":1,"name":"BufRead","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4432","1:4433","1:4434","1:4436","1:4437","1:4439","1:4440"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Read","id":"1:4346","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementors":[]}},"0:166":{"id":"0:166","crate_id":0,"name":"UNUSED_LABELS","span":{"filename":"compiler/rustc_lint_defs/src/builtin.rs","begin":[1840,0],"end":[1861,1]},"visibility":"public","docs":"The `unused_labels` lint detects [labels] that are never used.\n\n[labels]: https://doc.rust-lang.org/reference/expressions/loop-expr.html#loop-labels\n\n### Example\n\n```rust,no_run\n'unused_label: loop {}\n```\n\n{{produces}}\n\n### Explanation\n\nUnused labels may signal a mistake or unfinished code. To silence the\nwarning for the individual label, prefix it with an underscore such as\n`'_my_label:`.","links":{},"attrs":[],"deprecation":null,"kind":"static","inner":{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"$crate::Lint","id":"0:292","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"mutable":false,"expr":"&crate::Lint{name: \"UNUSED_LABELS\",\n             default_level: crate::Warn,\n             desc: \"detects labels that are never used\",\n             edition_lint_opts: None,\n             is_plugin: false, ..crate::Lint::default_fields_for_macro()}"}},"1:5516":{"id":"1:5516","crate_id":1,"name":"FileTypeExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5517","1:5518","1:5519","1:5520"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementors":[]}},"0:115":{"id":"0:115","crate_id":0,"name":"META_VARIABLE_MISUSE","span":{"filename":"compiler/rustc_lint_defs/src/builtin.rs","begin":[117,0],"end":[153,1]},"visibility":"public","docs":"The `meta_variable_misuse` lint detects possible meta-variable misuse\nin macro definitions.\n\n### Example\n\n```rust,compile_fail\n#![deny(meta_variable_misuse)]\n\nmacro_rules! foo {\n    () => {};\n    ($( $i:ident = $($j:ident),+ );*) => { $( $( $i = $k; )+ )* };\n}\n\nfn main() {\n    foo!();\n}\n```\n\n{{produces}}\n\n### Explanation\n\nThere are quite a few different ways a [`macro_rules`] macro can be\nimproperly defined. Many of these errors were previously only detected\nwhen the macro was expanded or not at all. This lint is an attempt to\ncatch some of these problems when the macro is *defined*.\n\nThis lint is \"allow\" by default because it may have false positives\nand other issues. See [issue #61053] for more details.\n\n[`macro_rules`]: https://doc.rust-lang.org/reference/macros-by-example.html\n[issue #61053]: https://github.com/rust-lang/rust/issues/61053","links":{},"attrs":[],"deprecation":null,"kind":"static","inner":{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"$crate::Lint","id":"0:292","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"mutable":false,"expr":"&crate::Lint{name: \"META_VARIABLE_MISUSE\",\n             default_level: crate::Allow,\n             desc: \"possible meta-variable misuse at macro definition\",\n             edition_lint_opts: None,\n             is_plugin: false, ..crate::Lint::default_fields_for_macro()}"}},"0:122":{"id":"0:122","crate_id":0,"name":"UNUSED_EXTERN_CRATES","span":{"filename":"compiler/rustc_lint_defs/src/builtin.rs","begin":[358,0],"end":[391,1]},"visibility":"public","docs":"The `unused_extern_crates` lint guards against `extern crate` items\nthat are never used.\n\n### Example\n\n```rust,compile_fail\n#![deny(unused_extern_crates)]\nextern crate proc_macro;\n```\n\n{{produces}}\n\n### Explanation\n\n`extern crate` items that are unused have no effect and should be\nremoved. Note that there are some cases where specifying an `extern\ncrate` is desired for the side effect of ensuring the given crate is\nlinked, even though it is not otherwise directly referenced. The lint\ncan be silenced by aliasing the crate to an underscore, such as\n`extern crate foo as _`. Also note that it is no longer idiomatic to\nuse `extern crate` in the [2018 edition], as extern crates are now\nautomatically added in scope.\n\nThis lint is \"allow\" by default because it can be noisy, and produce\nfalse-positives. If a dependency is being removed from a project, it\nis recommended to remove it from the build configuration (such as\n`Cargo.toml`) to ensure stale build entries aren't left behind.\n\n[2018 edition]: https://doc.rust-lang.org/edition-guide/rust-2018/module-system/path-clarity.html#no-more-extern-crate","links":{},"attrs":[],"deprecation":null,"kind":"static","inner":{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"$crate::Lint","id":"0:292","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"mutable":false,"expr":"&crate::Lint{name: \"UNUSED_EXTERN_CRATES\",\n             default_level: crate::Allow,\n             desc: \"extern crates that are never used\",\n             edition_lint_opts: None,\n             is_plugin: false, ..crate::Lint::default_fields_for_macro()}"}},"0:444":{"id":"0:444","crate_id":0,"name":"BufferedEarlyLint","span":{"filename":"compiler/rustc_lint_defs/src/lib.rs","begin":[315,0],"end":[331,1]},"visibility":"public","docs":"Lints that are buffered up early on in the `Session` before the\n`LintLevels` is calculated.","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"struct_type":"plain","generics":{"params":[],"where_predicates":[]},"fields_stripped":false,"fields":["0:445","0:446","0:447","0:448","0:449"],"impls":["a:2:3004-0:444","a:2:3016-0:444","a:2:3045-0:444","a:2:8324-0:444","a:2:8325-0:444","b:2:2937-0:444","b:2:2933-0:444","b:2:2948-0:444","b:2:2943-0:444","b:2:2609-0:444","b:2:2612-0:444","b:2:3667-0:444","0:451","0:450"]}},"0:400":{"id":"0:400","crate_id":0,"name":"attr_name","span":{"filename":"compiler/rustc_lint_defs/src/lib.rs","begin":[299,29],"end":[299,46]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"struct_field","inner":{"kind":"resolved_path","inner":{"name":"Symbol","id":"22:4154","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}},"2:9354":{"id":"2:9354","crate_id":2,"name":"Debug","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:9355"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementors":[]}},"0:410":{"id":"0:410","crate_id":0,"name":"ExternDepSpec","span":{"filename":"compiler/rustc_lint_defs/src/lib.rs","begin":[302,4],"end":[302,40]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"tuple","variant_inner":[{"kind":"resolved_path","inner":{"name":"String","id":"5:7602","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},{"kind":"resolved_path","inner":{"name":"ExternDepSpec","id":"0:339","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}]}},"2:7389":{"id":"2:7389","crate_id":2,"name":"Product","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:7391"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"}}}}],"where_predicates":[]},"bounds":[],"implementors":[]}},"a:2:3016-0:307":{"id":"a:2:3016-0:307","crate_id":0,"name":null,"span":{"filename":"compiler/rustc_lint_defs/src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Sync","id":"2:3016","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"FutureIncompatibleInfo","id":"0:307","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:457":{"id":"0:457","crate_id":0,"name":"default","span":{"filename":"compiler/rustc_lint_defs/src/lib.rs","begin":[333,9],"end":[333,16]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[],"output":{"kind":"resolved_path","inner":{"name":"LintBuffer","id":"0:454","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"2:3242":{"id":"2:3242","crate_id":2,"name":"Fn","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3244"],"generics":{"params":[{"name":"Args","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FnMut","id":"2:3245","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Args"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementors":[]}},"2:12413":{"id":"2:12413","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n  \"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[inline]","#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_deprecated(since = \"1.33.0\", reason = \"superseded by `trim_start`\",\n                   suggestion = \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"b:2:2612-0:454":{"id":"b:2:2612-0:454","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3009","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"BorrowMut","id":"2:2606","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"LintBuffer","id":"0:454","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:2614"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:12340":{"id":"2:12340","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"1:15265","crate::ops::IndexMut":"2:3304","str::slice_unchecked":"1:15265"},"attrs":["#[stable(feature = \"str_slice_mut\", since = \"1.5.0\")]","#[rustc_deprecated(since = \"1.29.0\", reason =\n                   \"use `get_unchecked_mut(begin..end)` instead\")]","#[inline]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":["unsafe"],"abi":"\"Rust\"","has_body":true}},"0:85":{"id":"0:85","crate_id":0,"name":null,"span":{"filename":"compiler/rustc_lint_defs/src/lib.rs","begin":[244,0],"end":[258,1]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"LintId","id":"0:332","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:86","0:87","0:88"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:130":{"id":"0:130","crate_id":0,"name":"UNREACHABLE_CODE","span":{"filename":"compiler/rustc_lint_defs/src/builtin.rs","begin":[594,0],"end":[615,1]},"visibility":"public","docs":"The `unreachable_code` lint detects unreachable code paths.\n\n### Example\n\n```rust,no_run\npanic!(\"we never go past here!\");\n\nlet x = 5;\n```\n\n{{produces}}\n\n### Explanation\n\nUnreachable code may signal a mistake or unfinished code. If the code\nis no longer in use, consider removing it.","links":{},"attrs":[],"deprecation":null,"kind":"static","inner":{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"$crate::Lint","id":"0:292","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"mutable":false,"expr":"&crate::Lint{name: \"UNREACHABLE_CODE\",\n             default_level: crate::Warn,\n             desc: \"detects unreachable code paths\",\n             edition_lint_opts: None,\n             is_plugin: false,\n             report_in_external_macro:\n                 true, ..crate::Lint::default_fields_for_macro()}"}},"0:162":{"id":"0:162","crate_id":0,"name":"ABSOLUTE_PATHS_NOT_STARTING_WITH_CRATE","span":{"filename":"compiler/rustc_lint_defs/src/builtin.rs","begin":[1654,0],"end":[1707,1]},"visibility":"public","docs":"The `absolute_paths_not_starting_with_crate` lint detects fully\nqualified paths that start with a module name instead of `crate`,\n`self`, or an extern crate name\n\n### Example\n\n```rust,edition2015,compile_fail\n#![deny(absolute_paths_not_starting_with_crate)]\n\nmod foo {\n    pub fn bar() {}\n}\n\nfn main() {\n    ::foo::bar();\n}\n```\n\n{{produces}}\n\n### Explanation\n\nRust [editions] allow the language to evolve without breaking\nbackwards compatibility. This lint catches code that uses absolute\npaths in the style of the 2015 edition. In the 2015 edition, absolute\npaths (those starting with `::`) refer to either the crate root or an\nexternal crate. In the 2018 edition it was changed so that they only\nrefer to external crates. The path prefix `crate::` should be used\ninstead to reference items from the crate root.\n\nIf you switch the compiler from the 2015 to 2018 edition without\nupdating the code, then it will fail to compile if the old style paths\nare used. You can manually change the paths to use the `crate::`\nprefix to transition to the 2018 edition.\n\nThis lint solves the problem automatically. It is \"allow\" by default\nbecause the code is perfectly valid in the 2015 edition. The [`cargo\nfix`] tool with the `--edition` flag will switch this lint to \"warn\"\nand automatically apply the suggested fix from the compiler. This\nprovides a completely automated way to update old code to the 2018\nedition.\n\n[editions]: https://doc.rust-lang.org/edition-guide/\n[`cargo fix`]: https://doc.rust-lang.org/cargo/commands/cargo-fix.html","links":{},"attrs":[],"deprecation":null,"kind":"static","inner":{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"$crate::Lint","id":"0:292","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"mutable":false,"expr":"&crate::Lint{name: \"ABSOLUTE_PATHS_NOT_STARTING_WITH_CRATE\",\n             default_level: crate::Allow,\n             desc:\n                 \"fully qualified paths that start with a module name instead of `crate`, `self`, or an extern crate name\",\n             edition_lint_opts: None,\n             is_plugin: false,\n             future_incompatible:\n                 Some(crate::FutureIncompatibleInfo{reference:\n                                                        \"issue #53130 <https://github.com/rust-lang/rust/issues/53130>\",\n                                                    reason:\n                                                        FutureIncompatibilityReason::EditionError(Edition::Edition2018),\n                                                                                                                           ..crate::FutureIncompatibleInfo::default_fields_for_macro()}),\n                                                                                                                                                                                            ..crate::Lint::default_fields_for_macro()}"}},"2:12343":{"id":"2:12343","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:15260"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Chars","id":"2:45237","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"b:2:2612-0:260":{"id":"b:2:2612-0:260","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3009","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"BorrowMut","id":"2:2606","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Level","id":"0:260","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:2614"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:2691":{"id":"2:2691","crate_id":2,"name":"Ord","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2692","2:2693","2:2694","2:2695"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Eq","id":"2:2660","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"PartialOrd","id":"2:2702","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementors":[]}},"b:2:2933-0:260":{"id":"b:2:2933-0:260","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}},{"name":"U","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"From","id":"2:2910","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:2907","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Level","id":"0:260","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:2936"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:295":{"id":"0:295","crate_id":0,"name":"desc","span":{"filename":"compiler/rustc_lint_defs/src/lib.rs","begin":[123,4],"end":[123,26]},"visibility":"public","docs":"Description of the lint or the issue it detects.\n\ne.g., \"imports that are never used\"","links":{},"attrs":[],"deprecation":null,"kind":"struct_field","inner":{"kind":"borrowed_ref","inner":{"lifetime":"'static","mutable":false,"type":{"kind":"primitive","inner":"str"}}}},"2:12392":{"id":"2:12392","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":["#[stable(feature = \"str_split_once\", since = \"1.52.0\")]","#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:43419","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:11967","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}},{"bound_predicate":{"ty":{"kind":"qualified_path","inner":{"name":"Searcher","self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:11967","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:11982","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:337":{"id":"0:337","crate_id":0,"name":null,"span":{"filename":"compiler/rustc_lint_defs/src/lib.rs","begin":[223,22],"end":[223,27]},"visibility":"crate","docs":null,"links":{},"attrs":["#[automatically_derived]","#[allow(unused_qualifications)]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Debug","id":"2:9354","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"LintId","id":"0:332","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:338"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:121":{"id":"0:121","crate_id":0,"name":"MUST_NOT_SUSPEND","span":{"filename":"compiler/rustc_lint_defs/src/builtin.rs","begin":[318,0],"end":[356,1]},"visibility":"public","docs":"The `must_not_suspend` lint guards against values that shouldn't be held across suspend points\n(`.await`)\n\n### Example\n\n```rust\n#![feature(must_not_suspend)]\n#![warn(must_not_suspend)]\n\n#[must_not_suspend]\nstruct SyncThing {}\n\nasync fn yield_now() {}\n\npub async fn uhoh() {\n    let guard = SyncThing {};\n    yield_now().await;\n}\n```\n\n{{produces}}\n\n### Explanation\n\nThe `must_not_suspend` lint detects values that are marked with the `#[must_not_suspend]`\nattribute being held across suspend points. A \"suspend\" point is usually a `.await` in an async\nfunction.\n\nThis attribute can be used to mark values that are semantically incorrect across suspends\n(like certain types of timers), values that have async alternatives, and values that\nregularly cause problems with the `Send`-ness of async fn's returned futures (like\n`MutexGuard`'s)\n","links":{},"attrs":[],"deprecation":null,"kind":"static","inner":{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"$crate::Lint","id":"0:292","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"mutable":false,"expr":"&crate::Lint{name: \"MUST_NOT_SUSPEND\",\n             default_level: crate::Allow,\n             desc:\n                 \"use of a `#[must_not_suspend]` value across a yield point\",\n             edition_lint_opts: None,\n             is_plugin: false,\n             feature_gate:\n                 Some(rustc_span::symbol::sym::must_not_suspend),\n                                                                    ..crate::Lint::default_fields_for_macro()}"}},"0:98":{"id":"0:98","crate_id":0,"name":"add_lint","span":{"filename":"compiler/rustc_lint_defs/src/lib.rs","begin":[346,4],"end":[357,5]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["lint",{"kind":"borrowed_ref","inner":{"lifetime":"'static","mutable":false,"type":{"kind":"resolved_path","inner":{"name":"Lint","id":"0:292","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}],["node_id",{"kind":"resolved_path","inner":{"name":"NodeId","id":"21:6504","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}],["span",{"kind":"resolved_path","inner":{"name":"MultiSpan","id":"22:4418","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}],["msg",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}],["diagnostic",{"kind":"resolved_path","inner":{"name":"BuiltinLintDiagnostics","id":"0:352","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:362":{"id":"0:362","crate_id":0,"name":"ProcMacroDeriveResolutionFallback","span":{"filename":"compiler/rustc_lint_defs/src/lib.rs","begin":[290,4],"end":[290,43]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"tuple","variant_inner":[{"kind":"resolved_path","inner":{"name":"Span","id":"22:2708","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}]}},"b:2:2612-0:194":{"id":"b:2:2612-0:194","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3009","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"BorrowMut","id":"2:2606","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"HardwiredLints","id":"0:194","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:2614"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:12350":{"id":"2:12350","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n  \"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"encode_utf16\", since = \"1.8.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EncodeUtf16","id":"2:45559","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"a:2:3016-0:225":{"id":"a:2:3016-0:225","crate_id":0,"name":null,"span":{"filename":"compiler/rustc_lint_defs/src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Sync","id":"2:3016","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Applicability","id":"0:225","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:323":{"id":"0:323","crate_id":0,"name":"0","span":{"filename":"compiler/rustc_lint_defs/src/lib.rs","begin":[168,17],"end":[168,24]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"struct_field","inner":{"kind":"resolved_path","inner":{"name":"Edition","id":"22:1818","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}},"0:335":{"id":"0:335","crate_id":0,"name":"clone","span":{"filename":"compiler/rustc_lint_defs/src/lib.rs","begin":[223,9],"end":[223,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"LintId","id":"0:332","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"2:9363":{"id":"2:9363","crate_id":2,"name":"Octal","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:9364"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementors":[]}},"0:124":{"id":"0:124","crate_id":0,"name":"UNUSED_QUALIFICATIONS","span":{"filename":"compiler/rustc_lint_defs/src/builtin.rs","begin":[442,0],"end":[474,1]},"visibility":"public","docs":"The `unused_qualifications` lint detects unnecessarily qualified\nnames.\n\n### Example\n\n```rust,compile_fail\n#![deny(unused_qualifications)]\nmod foo {\n    pub fn bar() {}\n}\n\nfn main() {\n    use foo::bar;\n    foo::bar();\n}\n```\n\n{{produces}}\n\n### Explanation\n\nIf an item from another module is already brought into scope, then\nthere is no need to qualify it in this case. You can call `bar()`\ndirectly, without the `foo::`.\n\nThis lint is \"allow\" by default because it is somewhat pedantic, and\ndoesn't indicate an actual problem, but rather a stylistic choice, and\ncan be noisy when refactoring or moving around code.","links":{},"attrs":[],"deprecation":null,"kind":"static","inner":{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"$crate::Lint","id":"0:292","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"mutable":false,"expr":"&crate::Lint{name: \"UNUSED_QUALIFICATIONS\",\n             default_level: crate::Allow,\n             desc: \"detects unnecessarily qualified names\",\n             edition_lint_opts: None,\n             is_plugin: false, ..crate::Lint::default_fields_for_macro()}"}},"b:2:2937-0:339":{"id":"b:2:2937-0:339","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"From","id":"2:2910","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ExternDepSpec","id":"0:339","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:2939"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:3016":{"id":"2:3016","crate_id":2,"name":"Sync","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementors":[]}},"b:2:2943-0:339":{"id":"b:2:2943-0:339","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}},{"name":"U","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:2917","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"TryInto","id":"2:2913","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ExternDepSpec","id":"0:339","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:2946","2:2947"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:82":{"id":"0:82","crate_id":0,"name":null,"span":{"filename":"compiler/rustc_lint_defs/src/lib.rs","begin":[237,0],"end":[242,1]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["hash_slice"],"trait":{"kind":"resolved_path","inner":{"name":"Hash","id":"2:9560","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"LintId","id":"0:332","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:83"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:2:2612-0:292":{"id":"b:2:2612-0:292","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3009","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"BorrowMut","id":"2:2606","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Lint","id":"0:292","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:2614"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:243":{"id":"0:243","crate_id":0,"name":"hash","span":{"filename":"compiler/rustc_lint_defs/src/lib.rs","begin":[26,40],"end":[26,44]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["state",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"__H"}}}]],"output":{"kind":"tuple","inner":[]},"c_variadic":false},"generics":{"params":[{"name":"__H","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"$crate::hash::Hasher","id":"2:9570","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null}}}],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"2:12342":{"id":"2:12342","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"1:15265"},"attrs":["#[inline]","#[must_use]","#[stable(feature = \"str_split_at\", since = \"1.4.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"a:2:3016-0:454":{"id":"a:2:3016-0:454","crate_id":0,"name":null,"span":{"filename":"compiler/rustc_lint_defs/src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Sync","id":"2:3016","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"LintBuffer","id":"0:454","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}},"2:3118":{"id":"2:3118","crate_id":2,"name":"RemAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3120"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"}}}}],"where_predicates":[]},"bounds":[],"implementors":[]}},"0:412":{"id":"0:412","crate_id":0,"name":"0","span":{"filename":"compiler/rustc_lint_defs/src/lib.rs","begin":[302,18],"end":[302,24]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"struct_field","inner":{"kind":"resolved_path","inner":{"name":"String","id":"5:7602","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}},"0:306":{"id":"0:306","crate_id":0,"name":"fmt","span":{"filename":"compiler/rustc_lint_defs/src/lib.rs","begin":[97,22],"end":[97,27]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Formatter","id":"2:9315","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Result","id":"2:9304","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"b:2:2609-0:454":{"id":"b:2:2609-0:454","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3009","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Borrow","id":"2:2603","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"LintBuffer","id":"0:454","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:2611"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:235":{"id":"0:235","crate_id":0,"name":null,"span":{"filename":"compiler/rustc_lint_defs/src/lib.rs","begin":[26,15],"end":[26,20]},"visibility":"crate","docs":null,"links":{},"attrs":["#[automatically_derived]","#[allow(unused_qualifications)]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2625","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Applicability","id":"0:225","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:236"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:289":{"id":"0:289","crate_id":0,"name":null,"span":{"filename":"compiler/rustc_lint_defs/src/lib.rs","begin":[59,0],"end":[59,56]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"CTX","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"HashStable","id":"29:1833","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"CTX"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Level","id":"0:260","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:291"],"negative":false,"synthetic":false,"blanket_impl":null}},"33:356":{"id":"33:356","crate_id":33,"name":"Decodable","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["33:358"],"generics":{"params":[{"name":"D","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"D"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Decoder","id":"33:290","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"bounds":[],"implementors":[]}},"0:116":{"id":"0:116","crate_id":0,"name":"INCOMPLETE_INCLUDE","span":{"filename":"compiler/rustc_lint_defs/src/builtin.rs","begin":[155,0],"end":[214,1]},"visibility":"public","docs":"The `incomplete_include` lint detects the use of the [`include!`]\nmacro with a file that contains more than one expression.\n\n[`include!`]: https://doc.rust-lang.org/std/macro.include.html\n\n### Example\n\n```rust,ignore (needs separate file)\nfn main() {\n    include!(\"foo.txt\");\n}\n```\n\nwhere the file `foo.txt` contains:\n\n```text\nprintln!(\"hi!\");\n```\n\nproduces:\n\n```text\nerror: include macro expected single expression in source\n --> foo.txt:1:14\n  |\n1 | println!(\"1\");\n  |              ^\n  |\n  = note: `#[deny(incomplete_include)]` on by default\n```\n\n### Explanation\n\nThe [`include!`] macro is currently only intended to be used to\ninclude a single [expression] or multiple [items]. Historically it\nwould ignore any contents after the first expression, but that can be\nconfusing. In the example above, the `println!` expression ends just\nbefore the semicolon, making the semicolon \"extra\" information that is\nignored. Perhaps even more surprising, if the included file had\nmultiple print statements, the subsequent ones would be ignored!\n\nOne workaround is to place the contents in braces to create a [block\nexpression]. Also consider alternatives, like using functions to\nencapsulate the expressions, or use [proc-macros].\n\nThis is a lint instead of a hard error because existing projects were\nfound to hit this error. To be cautious, it is a lint for now. The\nfuture semantics of the `include!` macro are also uncertain, see\n[issue #35560].\n\n[items]: https://doc.rust-lang.org/reference/items.html\n[expression]: https://doc.rust-lang.org/reference/expressions.html\n[block expression]: https://doc.rust-lang.org/reference/expressions/block-expr.html\n[proc-macros]: https://doc.rust-lang.org/reference/procedural-macros.html\n[issue #35560]: https://github.com/rust-lang/rust/issues/35560","links":{},"attrs":[],"deprecation":null,"kind":"static","inner":{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"$crate::Lint","id":"0:292","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"mutable":false,"expr":"&crate::Lint{name: \"INCOMPLETE_INCLUDE\",\n             default_level: crate::Deny,\n             desc: \"trailing content in included file\",\n             edition_lint_opts: None,\n             is_plugin: false, ..crate::Lint::default_fields_for_macro()}"}},"0:298":{"id":"0:298","crate_id":0,"name":"future_incompatible","span":{"filename":"compiler/rustc_lint_defs/src/lib.rs","begin":[132,4],"end":[132,59]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"struct_field","inner":{"kind":"resolved_path","inner":{"name":"Option","id":"2:43419","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"FutureIncompatibleInfo","id":"0:307","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}}},"0:75":{"id":"0:75","crate_id":0,"name":"name_lower","span":{"filename":"compiler/rustc_lint_defs/src/lib.rs","begin":[210,4],"end":[212,5]},"visibility":"public","docs":"Gets the lint's name, with ASCII letters converted to lowercase.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7602","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"1:4424":{"id":"1:4424","crate_id":1,"name":"Seek","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4425","1:4426","1:4427","1:4428"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementors":[]}},"0:437":{"id":"0:437","crate_id":0,"name":"1","span":{"filename":"compiler/rustc_lint_defs/src/lib.rs","begin":[309,26],"end":[309,32]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"struct_field","inner":{"kind":"resolved_path","inner":{"name":"String","id":"5:7602","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}},"0:267":{"id":"0:267","crate_id":0,"name":"Deny","span":{"filename":"compiler/rustc_lint_defs/src/lib.rs","begin":[55,4],"end":[55,8]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"0:392":{"id":"0:392","crate_id":0,"name":"MissingAbi","span":{"filename":"compiler/rustc_lint_defs/src/lib.rs","begin":[297,4],"end":[297,25]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"tuple","variant_inner":[{"kind":"resolved_path","inner":{"name":"Span","id":"22:2708","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},{"kind":"resolved_path","inner":{"name":"Abi","id":"75:6738","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}]}},"a:2:3016-0:194":{"id":"a:2:3016-0:194","crate_id":0,"name":null,"span":{"filename":"compiler/rustc_lint_defs/src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Sync","id":"2:3016","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"HardwiredLints","id":"0:194","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:213":{"id":"0:213","crate_id":0,"name":"get_lints","span":{"filename":"compiler/rustc_lint_defs/src/builtin.rs","begin":[3163,0],"end":[3163,61]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[],"output":{"kind":"resolved_path","inner":{"name":"$crate::LintArray","id":"0:107","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"2:12374":{"id":"2:12374","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"`DoubleEndedIterator`":"2:7470","prim@char":"1:15260","str::split":"1:15265","self::pattern":"2:11957"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplit","id":"2:45285","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:11967","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}},{"bound_predicate":{"ty":{"kind":"qualified_path","inner":{"name":"Searcher","self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:11967","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:11982","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"header":[],"abi":"\"Rust\"","has_body":true}},"1:2338":{"id":"1:2338","crate_id":1,"name":"Error","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:2339","1:2341","1:2342","1:2343"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Debug","id":"2:9354","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Display","id":"2:9361","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementors":[]}},"2:3127":{"id":"2:3127","crate_id":2,"name":"BitAnd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3129","2:3130"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"}}}}],"where_predicates":[]},"bounds":[],"implementors":[]}},"b:2:3667-0:316":{"id":"b:2:3667-0:316","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3009","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Any","id":"2:3665","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"FutureIncompatibilityReason","id":"0:316","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3669"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:3045":{"id":"2:3045","crate_id":2,"name":"Unpin","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementors":[]}},"b:2:2937-0:316":{"id":"b:2:2937-0:316","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"From","id":"2:2910","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"FutureIncompatibilityReason","id":"0:316","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:2939"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:209":{"id":"0:209","crate_id":0,"name":"clone","span":{"filename":"compiler/rustc_lint_defs/src/builtin.rs","begin":[3163,0],"end":[3163,61]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"UnusedDocComment","id":"0:205","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:316":{"id":"0:316","crate_id":0,"name":"FutureIncompatibilityReason","span":{"filename":"compiler/rustc_lint_defs/src/lib.rs","begin":[159,0],"end":[172,1]},"visibility":"public","docs":"The reason for future incompatibility","links":{},"attrs":[],"deprecation":null,"kind":"enum","inner":{"generics":{"params":[],"where_predicates":[]},"variants_stripped":false,"variants":["0:317","0:319","0:321","0:324"],"impls":["0:69","a:2:3004-0:316","a:2:3016-0:316","a:2:3045-0:316","a:2:8324-0:316","a:2:8325-0:316","b:2:2937-0:316","b:2:2933-0:316","b:5:541-0:316","b:2:2948-0:316","b:2:2943-0:316","b:2:2609-0:316","b:2:2612-0:316","b:2:3667-0:316","0:328","0:327","0:330"]}},"a:2:8324-0:307":{"id":"a:2:8324-0:307","crate_id":0,"name":null,"span":{"filename":"compiler/rustc_lint_defs/src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"UnwindSafe","id":"2:8324","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"FutureIncompatibleInfo","id":"0:307","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:2603":{"id":"2:2603","crate_id":2,"name":"Borrow","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2605"],"generics":{"params":[{"name":"Borrowed","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"Borrowed"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3009","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}]}}]},"bounds":[],"implementors":[]}},"0:371":{"id":"0:371","crate_id":0,"name":"1","span":{"filename":"compiler/rustc_lint_defs/src/lib.rs","begin":[292,34],"end":[292,38]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"struct_field","inner":{"kind":"resolved_path","inner":{"name":"Span","id":"22:2708","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}},"0:304":{"id":"0:304","crate_id":0,"name":"clone","span":{"filename":"compiler/rustc_lint_defs/src/lib.rs","begin":[97,15],"end":[97,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Lint","id":"0:292","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:207":{"id":"0:207","crate_id":0,"name":null,"span":{"filename":"compiler/rustc_lint_defs/src/builtin.rs","begin":[3163,0],"end":[3163,61]},"visibility":{"restricted":{"parent":"0:47","path":"::builtin"}},"docs":null,"links":{},"attrs":["#[automatically_derived]","#[allow(unused_qualifications)]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Copy","id":"2:3014","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"UnusedDocComment","id":"0:205","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:120":{"id":"0:120","crate_id":0,"name":"UNUSED_IMPORTS","span":{"filename":"compiler/rustc_lint_defs/src/builtin.rs","begin":[296,0],"end":[316,1]},"visibility":"public","docs":"The `unused_imports` lint detects imports that are never used.\n\n### Example\n\n```rust\nuse std::collections::HashMap;\n```\n\n{{produces}}\n\n### Explanation\n\nUnused imports may signal a mistake or unfinished code, and clutter\nthe code, and should be removed. If you intended to re-export the item\nto make it available outside of the module, add a visibility modifier\nlike `pub`.","links":{},"attrs":[],"deprecation":null,"kind":"static","inner":{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"$crate::Lint","id":"0:292","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"mutable":false,"expr":"&crate::Lint{name: \"UNUSED_IMPORTS\",\n             default_level: crate::Warn,\n             desc: \"imports that are never used\",\n             edition_lint_opts: None,\n             is_plugin: false, ..crate::Lint::default_fields_for_macro()}"}},"0:128":{"id":"0:128","crate_id":0,"name":"DEAD_CODE","span":{"filename":"compiler/rustc_lint_defs/src/builtin.rs","begin":[543,0],"end":[564,1]},"visibility":"public","docs":"The `dead_code` lint detects unused, unexported items.\n\n### Example\n\n```rust\nfn foo() {}\n```\n\n{{produces}}\n\n### Explanation\n\nDead code may signal a mistake or unfinished code. To silence the\nwarning for individual items, prefix the name with an underscore such\nas `_foo`. If it was intended to expose the item outside of the crate,\nconsider adding a visibility modifier like `pub`. Otherwise consider\nremoving the unused code.","links":{},"attrs":[],"deprecation":null,"kind":"static","inner":{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"$crate::Lint","id":"0:292","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"mutable":false,"expr":"&crate::Lint{name: \"DEAD_CODE\",\n             default_level: crate::Warn,\n             desc: \"detect unused, unexported items\",\n             edition_lint_opts: None,\n             is_plugin: false, ..crate::Lint::default_fields_for_macro()}"}},"2:2702":{"id":"2:2702","crate_id":2,"name":"PartialOrd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2704","2:2705","2:2706","2:2707","2:2708"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"}}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"Rhs"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3009","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}]}}]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"PartialEq","id":"2:2655","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Rhs"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementors":[]}},"0:170":{"id":"0:170","crate_id":0,"name":"MACRO_EXPANDED_MACRO_EXPORTS_ACCESSED_BY_ABSOLUTE_PATHS","span":{"filename":"compiler/rustc_lint_defs/src/builtin.rs","begin":[2024,0],"end":[2071,1]},"visibility":"public","docs":"The `macro_expanded_macro_exports_accessed_by_absolute_paths` lint\ndetects macro-expanded [`macro_export`] macros from the current crate\nthat cannot be referred to by absolute paths.\n\n[`macro_export`]: https://doc.rust-lang.org/reference/macros-by-example.html#path-based-scope\n\n### Example\n\n```rust,compile_fail\nmacro_rules! define_exported {\n    () => {\n        #[macro_export]\n        macro_rules! exported {\n            () => {};\n        }\n    };\n}\n\ndefine_exported!();\n\nfn main() {\n    crate::exported!();\n}\n```\n\n{{produces}}\n\n### Explanation\n\nThe intent is that all macros marked with the `#[macro_export]`\nattribute are made available in the root of the crate. However, when a\n`macro_rules!` definition is generated by another macro, the macro\nexpansion is unable to uphold this rule. This is a\n[future-incompatible] lint to transition this to a hard error in the\nfuture. See [issue #53495] for more details.\n\n[issue #53495]: https://github.com/rust-lang/rust/issues/53495\n[future-incompatible]: ../index.md#future-incompatible-lints","links":{},"attrs":[],"deprecation":null,"kind":"static","inner":{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"$crate::Lint","id":"0:292","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"mutable":false,"expr":"&crate::Lint{name: \"MACRO_EXPANDED_MACRO_EXPORTS_ACCESSED_BY_ABSOLUTE_PATHS\",\n             default_level: crate::Deny,\n             desc:\n                 \"macro-expanded `macro_export` macros from the current crate cannot be referred to by absolute paths\",\n             edition_lint_opts: None,\n             is_plugin: false,\n             crate_level_only: true,\n             future_incompatible:\n                 Some(crate::FutureIncompatibleInfo{reference:\n                                                        \"issue #52234 <https://github.com/rust-lang/rust/issues/52234>\",\n                                                                                                                           ..crate::FutureIncompatibleInfo::default_fields_for_macro()}),\n                                                                                                                                                                                            ..crate::Lint::default_fields_for_macro()}"}},"0:111":{"id":"0:111","crate_id":0,"name":"declare_lint_pass","span":{"filename":"compiler/rustc_lint_defs/src/lib.rs","begin":[547,0],"end":[552,1]},"visibility":"public","docs":"Declares a type named `$name` which implements `LintPass`.\nTo the right of `=>` a comma separated list of `Lint` statics is given.","links":{},"attrs":["#[macro_export]"],"deprecation":null,"kind":"macro","inner":"macro_rules! declare_lint_pass {\n    ($(#[$m : meta]) * $name : ident => [$($lint : expr), * $(,) ?]) => { ... };\n}"},"0:66":{"id":"0:66","crate_id":0,"name":"as_str","span":{"filename":"compiler/rustc_lint_defs/src/lib.rs","begin":[63,4],"end":[71,5]},"visibility":"public","docs":"Converts a level to a lower-case string.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'static","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"2:12414":{"id":"2:12414","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n  \"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[inline]","#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_deprecated(since = \"1.33.0\", reason = \"superseded by `trim_end`\",\n                   suggestion = \"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"2:7435":{"id":"2:7435","crate_id":2,"name":"Extend","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:7437","2:7439","2:7440"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[]},"bounds":[],"implementors":[]}},"0:311":{"id":"0:311","crate_id":0,"name":null,"span":{"filename":"compiler/rustc_lint_defs/src/lib.rs","begin":[143,9],"end":[143,13]},"visibility":"crate","docs":null,"links":{},"attrs":["#[automatically_derived]","#[allow(unused_qualifications)]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Copy","id":"2:3014","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"FutureIncompatibleInfo","id":"0:307","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:370":{"id":"0:370","crate_id":0,"name":"0","span":{"filename":"compiler/rustc_lint_defs/src/lib.rs","begin":[292,27],"end":[292,32]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"struct_field","inner":{"kind":"primitive","inner":"usize"}},"a:2:3004-0:316":{"id":"a:2:3004-0:316","crate_id":0,"name":null,"span":{"filename":"compiler/rustc_lint_defs/src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Send","id":"2:3004","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"FutureIncompatibilityReason","id":"0:316","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:2904":{"id":"2:2904","crate_id":2,"name":"AsMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2906"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3009","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}]}}]},"bounds":[],"implementors":[]}},"2:2660":{"id":"2:2660","crate_id":2,"name":"Eq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"PartialEq","id":"2:2655","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementors":[]}},"0:287":{"id":"0:287","crate_id":0,"name":"hash","span":{"filename":"compiler/rustc_lint_defs/src/lib.rs","begin":[50,61],"end":[50,65]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["state",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"__H"}}}]],"output":{"kind":"tuple","inner":[]},"c_variadic":false},"generics":{"params":[{"name":"__H","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"$crate::hash::Hasher","id":"2:9570","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null}}}],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"b:2:2609-0:194":{"id":"b:2:2609-0:194","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3009","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Borrow","id":"2:2603","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"HardwiredLints","id":"0:194","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:2611"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:80":{"id":"0:80","crate_id":0,"name":"eq","span":{"filename":"compiler/rustc_lint_defs/src/lib.rs","begin":[230,4],"end":[232,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"LintId","id":"0:332","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"2:3665":{"id":"2:3665","crate_id":2,"name":"Any","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3666"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"outlives":"'static"}],"implementors":[]}},"2:9305":{"id":"2:9305","crate_id":2,"name":"Write","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:9306","2:9307","2:9309"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementors":[]}},"0:286":{"id":"0:286","crate_id":0,"name":null,"span":{"filename":"compiler/rustc_lint_defs/src/lib.rs","begin":[50,61],"end":[50,65]},"visibility":"crate","docs":null,"links":{},"attrs":["#[automatically_derived]","#[allow(unused_qualifications)]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["hash_slice"],"trait":{"kind":"resolved_path","inner":{"name":"Hash","id":"2:9560","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Level","id":"0:260","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:287"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:94":{"id":"0:94","crate_id":0,"name":"KeyType","span":{"filename":"compiler/rustc_lint_defs/src/lib.rs","begin":[268,4],"end":[268,32]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"typedef","inner":{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'static","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"generics":{"params":[],"where_predicates":[]}}},"0:172":{"id":"0:172","crate_id":0,"name":"INDIRECT_STRUCTURAL_MATCH","span":{"filename":"compiler/rustc_lint_defs/src/builtin.rs","begin":[2117,0],"end":[2160,1]},"visibility":"public","docs":"The `indirect_structural_match` lint detects a `const` in a pattern\nthat manually implements [`PartialEq`] and [`Eq`].\n\n[`PartialEq`]: https://doc.rust-lang.org/std/cmp/trait.PartialEq.html\n[`Eq`]: https://doc.rust-lang.org/std/cmp/trait.Eq.html\n\n### Example\n\n```rust,compile_fail\n#![deny(indirect_structural_match)]\n\nstruct NoDerive(i32);\nimpl PartialEq for NoDerive { fn eq(&self, _: &Self) -> bool { false } }\nimpl Eq for NoDerive { }\n#[derive(PartialEq, Eq)]\nstruct WrapParam<T>(T);\nconst WRAP_INDIRECT_PARAM: & &WrapParam<NoDerive> = & &WrapParam(NoDerive(0));\nfn main() {\n    match WRAP_INDIRECT_PARAM {\n        WRAP_INDIRECT_PARAM => { }\n        _ => { }\n    }\n}\n```\n\n{{produces}}\n\n### Explanation\n\nThe compiler unintentionally accepted this form in the past. This is a\n[future-incompatible] lint to transition this to a hard error in the\nfuture. See [issue #62411] for a complete description of the problem,\nand some possible solutions.\n\n[issue #62411]: https://github.com/rust-lang/rust/issues/62411\n[future-incompatible]: ../index.md#future-incompatible-lints","links":{},"attrs":[],"deprecation":null,"kind":"static","inner":{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"$crate::Lint","id":"0:292","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"mutable":false,"expr":"&crate::Lint{name: \"INDIRECT_STRUCTURAL_MATCH\",\n             default_level: crate::Warn,\n             desc:\n                 \"constant used in pattern contains value of non-structural-match type in a field or a variant\",\n             edition_lint_opts: None,\n             is_plugin: false,\n             future_incompatible:\n                 Some(crate::FutureIncompatibleInfo{reference:\n                                                        \"issue #62411 <https://github.com/rust-lang/rust/issues/62411>\",\n                                                                                                                           ..crate::FutureIncompatibleInfo::default_fields_for_macro()}),\n                                                                                                                                                                                            ..crate::Lint::default_fields_for_macro()}"}},"0:196":{"id":"0:196","crate_id":0,"name":null,"span":{"filename":"compiler/rustc_lint_defs/src/builtin.rs","begin":[2963,0],"end":[3059,1]},"visibility":{"restricted":{"parent":"0:47","path":"::builtin"}},"docs":null,"links":{},"attrs":["#[automatically_derived]","#[allow(unused_qualifications)]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Copy","id":"2:3014","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"HardwiredLints","id":"0:194","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"a:2:3004-0:454":{"id":"a:2:3004-0:454","crate_id":0,"name":null,"span":{"filename":"compiler/rustc_lint_defs/src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Send","id":"2:3004","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"LintBuffer","id":"0:454","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}},"0:282":{"id":"0:282","crate_id":0,"name":null,"span":{"filename":"compiler/rustc_lint_defs/src/lib.rs","begin":[50,49],"end":[50,52]},"visibility":"crate","docs":null,"links":{},"attrs":["#[automatically_derived]","#[allow(unused_qualifications)]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clamp","max","min"],"trait":{"kind":"resolved_path","inner":{"name":"Ord","id":"2:2691","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Level","id":"0:260","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:283"],"negative":false,"synthetic":false,"blanket_impl":null}},"a:2:3004-0:332":{"id":"a:2:3004-0:332","crate_id":0,"name":null,"span":{"filename":"compiler/rustc_lint_defs/src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Send","id":"2:3004","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"LintId","id":"0:332","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"b:2:2612-0:339":{"id":"b:2:2612-0:339","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3009","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"BorrowMut","id":"2:2606","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ExternDepSpec","id":"0:339","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:2614"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:3114":{"id":"2:3114","crate_id":2,"name":"DivAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3116"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"}}}}],"where_predicates":[]},"bounds":[],"implementors":[]}},"2:3142":{"id":"2:3142","crate_id":2,"name":"Shl","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3144","2:3145"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"}}}}],"where_predicates":[]},"bounds":[],"implementors":[]}},"2:2951":{"id":"2:2951","crate_id":2,"name":"Error","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"typedef","inner":{"type":{"kind":"resolved_path","inner":{"name":"Infallible","id":"2:34900","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generics":{"params":[],"where_predicates":[]}}},"29:1836":{"id":"29:1836","crate_id":29,"name":"ToStableHashKey","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["29:1838","29:1839"],"generics":{"params":[{"name":"HCX","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[]},"bounds":[],"implementors":[]}},"0:215":{"id":"0:215","crate_id":0,"name":"INVALID_DOC_ATTRIBUTES","span":{"filename":"compiler/rustc_lint_defs/src/builtin.rs","begin":[3190,0],"end":[3217,1]},"visibility":"public","docs":"The `invalid_doc_attributes` lint detects when the `#[doc(...)]` is\nmisused.\n\n### Example\n\n```rust,compile_fail\n#![deny(warnings)]\n\npub mod submodule {\n    #![doc(test(no_crate_inject))]\n}\n```\n\n{{produces}}\n\n### Explanation\n\nPreviously, there were very like checks being performed on `#[doc(..)]`\nunlike the other attributes. It'll now catch all the issues that it\nsilently ignored previously.","links":{},"attrs":[],"deprecation":null,"kind":"static","inner":{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"$crate::Lint","id":"0:292","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"mutable":false,"expr":"&crate::Lint{name: \"INVALID_DOC_ATTRIBUTES\",\n             default_level: crate::Warn,\n             desc: \"detects invalid `#[doc(...)]` attributes\",\n             edition_lint_opts: None,\n             is_plugin: false,\n             future_incompatible:\n                 Some(crate::FutureIncompatibleInfo{reference:\n                                                        \"issue #82730 <https://github.com/rust-lang/rust/issues/82730>\",\n                                                                                                                           ..crate::FutureIncompatibleInfo::default_fields_for_macro()}),\n                                                                                                                                                                                            ..crate::Lint::default_fields_for_macro()}"}},"0:163":{"id":"0:163","crate_id":0,"name":"ILLEGAL_FLOATING_POINT_LITERAL_PATTERN","span":{"filename":"compiler/rustc_lint_defs/src/builtin.rs","begin":[1709,0],"end":[1755,1]},"visibility":"public","docs":"The `illegal_floating_point_literal_pattern` lint detects\nfloating-point literals used in patterns.\n\n### Example\n\n```rust\nlet x = 42.0;\n\nmatch x {\n    5.0 => {}\n    _ => {}\n}\n```\n\n{{produces}}\n\n### Explanation\n\nPrevious versions of the compiler accepted floating-point literals in\npatterns, but it was later determined this was a mistake. The\nsemantics of comparing floating-point values may not be clear in a\npattern when contrasted with \"structural equality\". Typically you can\nwork around this by using a [match guard], such as:\n\n```rust\n# let x = 42.0;\n\nmatch x {\n    y if y == 5.0 => {}\n    _ => {}\n}\n```\n\nThis is a [future-incompatible] lint to transition this to a hard\nerror in the future. See [issue #41620] for more details.\n\n[issue #41620]: https://github.com/rust-lang/rust/issues/41620\n[match guard]: https://doc.rust-lang.org/reference/expressions/match-expr.html#match-guards\n[future-incompatible]: ../index.md#future-incompatible-lints","links":{},"attrs":[],"deprecation":null,"kind":"static","inner":{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"$crate::Lint","id":"0:292","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"mutable":false,"expr":"&crate::Lint{name: \"ILLEGAL_FLOATING_POINT_LITERAL_PATTERN\",\n             default_level: crate::Warn,\n             desc: \"floating-point literals cannot be used in patterns\",\n             edition_lint_opts: None,\n             is_plugin: false,\n             future_incompatible:\n                 Some(crate::FutureIncompatibleInfo{reference:\n                                                        \"issue #41620 <https://github.com/rust-lang/rust/issues/41620>\",\n                                                                                                                           ..crate::FutureIncompatibleInfo::default_fields_for_macro()}),\n                                                                                                                                                                                            ..crate::Lint::default_fields_for_macro()}"}},"2:11967":{"id":"2:11967","crate_id":2,"name":"Pattern","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:11969","2:11970","2:11971","2:11972","2:11973","2:11974","2:11975"],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[],"implementors":[]}},"0:379":{"id":"0:379","crate_id":0,"name":"2","span":{"filename":"compiler/rustc_lint_defs/src/lib.rs","begin":[293,36],"end":[293,42]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"struct_field","inner":{"kind":"resolved_path","inner":{"name":"String","id":"5:7602","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}},"b:2:2933-0:307":{"id":"b:2:2933-0:307","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}},{"name":"U","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"From","id":"2:2910","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:2907","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"FutureIncompatibleInfo","id":"0:307","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:2936"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:134":{"id":"0:134","crate_id":0,"name":"UNUSED_MACROS","span":{"filename":"compiler/rustc_lint_defs/src/builtin.rs","begin":[716,0],"end":[743,1]},"visibility":"public","docs":"The `unused_macros` lint detects macros that were not used.\n\n### Example\n\n```rust\nmacro_rules! unused {\n    () => {};\n}\n\nfn main() {\n}\n```\n\n{{produces}}\n\n### Explanation\n\nUnused macros may signal a mistake or unfinished code. To silence the\nwarning for the individual macro, prefix the name with an underscore\nsuch as `_my_macro`. If you intended to export the macro to make it\navailable outside of the crate, use the [`macro_export` attribute].\n\n[`macro_export` attribute]: https://doc.rust-lang.org/reference/macros-by-example.html#path-based-scope","links":{},"attrs":[],"deprecation":null,"kind":"static","inner":{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"$crate::Lint","id":"0:292","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"mutable":false,"expr":"&crate::Lint{name: \"UNUSED_MACROS\",\n             default_level: crate::Warn,\n             desc: \"detects macros that were not used\",\n             edition_lint_opts: None,\n             is_plugin: false, ..crate::Lint::default_fields_for_macro()}"}},"2:11982":{"id":"2:11982","crate_id":2,"name":"ReverseSearcher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:11984","2:11985","2:11986"],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Searcher","id":"2:11976","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementors":[]}},"b:2:2937-0:260":{"id":"b:2:2937-0:260","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"From","id":"2:2910","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Level","id":"0:260","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:2939"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:100":{"id":"0:100","crate_id":0,"name":"buffer_lint","span":{"filename":"compiler/rustc_lint_defs/src/lib.rs","begin":[363,4],"end":[371,5]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["lint",{"kind":"borrowed_ref","inner":{"lifetime":"'static","mutable":false,"type":{"kind":"resolved_path","inner":{"name":"Lint","id":"0:292","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}],["id",{"kind":"resolved_path","inner":{"name":"NodeId","id":"21:6504","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}],["sp",{"kind":"impl_trait","inner":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:2907","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"MultiSpan","id":"22:4418","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}],["msg",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"impl Into<MultiSpan>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:2907","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"MultiSpan","id":"22:4418","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null}}}],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"2:12395":{"id":"2:12395","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"2:11957","prim@char":"1:15260","str::matches":"1:15265","`DoubleEndedIterator`":"2:7470"},"attrs":["#[stable(feature = \"str_matches\", since = \"1.2.0\")]","#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Matches","id":"2:45471","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:11967","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"header":[],"abi":"\"Rust\"","has_body":true}},"b:2:2948-0:225":{"id":"b:2:2948-0:225","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}},{"name":"U","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:2907","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:2917","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Applicability","id":"0:225","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:2951","2:2952"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:440":{"id":"0:440","crate_id":0,"name":"eq","span":{"filename":"compiler/rustc_lint_defs/src/lib.rs","begin":[285,9],"end":[285,18]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"BuiltinLintDiagnostics","id":"0:352","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"2:2907":{"id":"2:2907","crate_id":2,"name":"Into","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2909"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[]},"bounds":[],"implementors":[]}},"2:3669":{"id":"2:3669","crate_id":2,"name":"type_id","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"TypeId","id":"2:42116","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:314":{"id":"0:314","crate_id":0,"name":null,"span":{"filename":"compiler/rustc_lint_defs/src/lib.rs","begin":[143,22],"end":[143,27]},"visibility":"crate","docs":null,"links":{},"attrs":["#[automatically_derived]","#[allow(unused_qualifications)]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Debug","id":"2:9354","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"FutureIncompatibleInfo","id":"0:307","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:315"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:448":{"id":"0:448","crate_id":0,"name":"lint_id","span":{"filename":"compiler/rustc_lint_defs/src/lib.rs","begin":[327,4],"end":[327,23]},"visibility":"public","docs":"A lint Id that can be passed to\n`rustc_lint::early::EarlyContextAndPass::check_id`.","links":{},"attrs":[],"deprecation":null,"kind":"struct_field","inner":{"kind":"resolved_path","inner":{"name":"LintId","id":"0:332","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}},"0:133":{"id":"0:133","crate_id":0,"name":"BINDINGS_WITH_VARIANT_NAME","span":{"filename":"compiler/rustc_lint_defs/src/builtin.rs","begin":[671,0],"end":[714,1]},"visibility":"public","docs":"The `bindings_with_variant_name` lint detects pattern bindings with\nthe same name as one of the matched variants.\n\n### Example\n\n```rust\npub enum Enum {\n    Foo,\n    Bar,\n}\n\npub fn foo(x: Enum) {\n    match x {\n        Foo => {}\n        Bar => {}\n    }\n}\n```\n\n{{produces}}\n\n### Explanation\n\nIt is usually a mistake to specify an enum variant name as an\n[identifier pattern]. In the example above, the `match` arms are\nspecifying a variable name to bind the value of `x` to. The second arm\nis ignored because the first one matches *all* values. The likely\nintent is that the arm was intended to match on the enum variant.\n\nTwo possible solutions are:\n\n* Specify the enum variant using a [path pattern], such as\n  `Enum::Foo`.\n* Bring the enum variants into local scope, such as adding `use\n  Enum::*;` to the beginning of the `foo` function in the example\n  above.\n\n[identifier pattern]: https://doc.rust-lang.org/reference/patterns.html#identifier-patterns\n[path pattern]: https://doc.rust-lang.org/reference/patterns.html#path-patterns","links":{},"attrs":[],"deprecation":null,"kind":"static","inner":{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"$crate::Lint","id":"0:292","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"mutable":false,"expr":"&crate::Lint{name: \"BINDINGS_WITH_VARIANT_NAME\",\n             default_level: crate::Warn,\n             desc:\n                 \"detects pattern bindings with the same name as one of the matched variants\",\n             edition_lint_opts: None,\n             is_plugin: false, ..crate::Lint::default_fields_for_macro()}"}},"0:401":{"id":"0:401","crate_id":0,"name":"macro_name","span":{"filename":"compiler/rustc_lint_defs/src/lib.rs","begin":[299,48],"end":[299,66]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"struct_field","inner":{"kind":"resolved_path","inner":{"name":"String","id":"5:7602","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}},"0:396":{"id":"0:396","crate_id":0,"name":"UnusedDocComment","span":{"filename":"compiler/rustc_lint_defs/src/lib.rs","begin":[298,4],"end":[298,26]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"tuple","variant_inner":[{"kind":"resolved_path","inner":{"name":"Span","id":"22:2708","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}]}},"0:327":{"id":"0:327","crate_id":0,"name":null,"span":{"filename":"compiler/rustc_lint_defs/src/lib.rs","begin":[158,9],"end":[158,13]},"visibility":"crate","docs":null,"links":{},"attrs":["#[automatically_derived]","#[allow(unused_qualifications)]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Copy","id":"2:3014","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"FutureIncompatibilityReason","id":"0:316","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"b:2:2609-0:339":{"id":"b:2:2609-0:339","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3009","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Borrow","id":"2:2603","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ExternDepSpec","id":"0:339","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:2611"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:353":{"id":"0:353","crate_id":0,"name":"Normal","span":{"filename":"compiler/rustc_lint_defs/src/lib.rs","begin":[287,4],"end":[287,10]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"b:2:2937-0:292":{"id":"b:2:2937-0:292","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"From","id":"2:2910","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Lint","id":"0:292","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:2939"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:2609-0:316":{"id":"b:2:2609-0:316","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3009","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Borrow","id":"2:2603","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"FutureIncompatibilityReason","id":"0:316","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:2611"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:144":{"id":"0:144","crate_id":0,"name":"INVALID_TYPE_PARAM_DEFAULT","span":{"filename":"compiler/rustc_lint_defs/src/builtin.rs","begin":[1020,0],"end":[1047,1]},"visibility":"public","docs":"The `invalid_type_param_default` lint detects type parameter defaults\nerroneously allowed in an invalid location.\n\n### Example\n\n```rust,compile_fail\nfn foo<T=i32>(t: T) {}\n```\n\n{{produces}}\n\n### Explanation\n\nDefault type parameters were only intended to be allowed in certain\nsituations, but historically the compiler allowed them everywhere.\nThis is a [future-incompatible] lint to transition this to a hard\nerror in the future. See [issue #36887] for more details.\n\n[issue #36887]: https://github.com/rust-lang/rust/issues/36887\n[future-incompatible]: ../index.md#future-incompatible-lints","links":{},"attrs":[],"deprecation":null,"kind":"static","inner":{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"$crate::Lint","id":"0:292","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"mutable":false,"expr":"&crate::Lint{name: \"INVALID_TYPE_PARAM_DEFAULT\",\n             default_level: crate::Deny,\n             desc:\n                 \"type parameter default erroneously allowed in invalid location\",\n             edition_lint_opts: None,\n             is_plugin: false,\n             future_incompatible:\n                 Some(crate::FutureIncompatibleInfo{reference:\n                                                        \"issue #36887 <https://github.com/rust-lang/rust/issues/36887>\",\n                                                                                                                           ..crate::FutureIncompatibleInfo::default_fields_for_macro()}),\n                                                                                                                                                                                            ..crate::Lint::default_fields_for_macro()}"}},"b:2:2609-0:205":{"id":"b:2:2609-0:205","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3009","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Borrow","id":"2:2603","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"UnusedDocComment","id":"0:205","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:2611"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"a:2:3045-0:307":{"id":"a:2:3045-0:307","crate_id":0,"name":null,"span":{"filename":"compiler/rustc_lint_defs/src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Unpin","id":"2:3045","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"FutureIncompatibleInfo","id":"0:307","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:3081":{"id":"2:3081","crate_id":2,"name":"Mul","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3083","2:3084"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"}}}}],"where_predicates":[]},"bounds":[],"implementors":[]}},"1:6688":{"id":"1:6688","crate_id":1,"name":"AsFd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6689"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementors":[]}},"b:2:2948-0:292":{"id":"b:2:2948-0:292","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}},{"name":"U","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:2907","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:2917","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Lint","id":"0:292","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:2951","2:2952"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"a:2:8324-0:352":{"id":"a:2:8324-0:352","crate_id":0,"name":null,"span":{"filename":"compiler/rustc_lint_defs/src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"UnwindSafe","id":"2:8324","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"BuiltinLintDiagnostics","id":"0:352","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:382":{"id":"0:382","crate_id":0,"name":"0","span":{"filename":"compiler/rustc_lint_defs/src/lib.rs","begin":[294,18],"end":[294,24]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"struct_field","inner":{"kind":"resolved_path","inner":{"name":"String","id":"5:7602","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}},"2:12430":{"id":"2:12430","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"self::pattern":"2:11957","prim@char":"1:15260"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_deprecated(since = \"1.33.0\", reason =\n                   \"superseded by `trim_start_matches`\", suggestion =\n                   \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:11967","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"header":[],"abi":"\"Rust\"","has_body":true}},"1:5538":{"id":"1:5538","crate_id":1,"name":"DirBuilderExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5539"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementors":[]}},"2:3154":{"id":"2:3154","crate_id":2,"name":"BitAndAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3156"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"}}}}],"where_predicates":[]},"bounds":[],"implementors":[]}},"2:2946":{"id":"2:2946","crate_id":2,"name":"Error","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"typedef","inner":{"type":{"kind":"qualified_path","inner":{"name":"Error","self_type":{"kind":"generic","inner":"U"},"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:2917","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}}}},"generics":{"params":[],"where_predicates":[]}}},"5:5401":{"id":"5:5401","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\n```\n\nWhen the pattern doesn't match:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7602"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n  \"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["from",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7602","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:11967","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"header":[],"abi":"\"Rust\"","has_body":true}},"2:3098":{"id":"2:3098","crate_id":2,"name":"Neg","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3099","2:3100"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementors":[]}},"b:2:3667-0:339":{"id":"b:2:3667-0:339","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3009","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Any","id":"2:3665","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ExternDepSpec","id":"0:339","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3669"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:395":{"id":"0:395","crate_id":0,"name":"1","span":{"filename":"compiler/rustc_lint_defs/src/lib.rs","begin":[297,21],"end":[297,24]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"struct_field","inner":{"kind":"resolved_path","inner":{"name":"Abi","id":"75:6738","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}},"2:12389":{"id":"2:12389","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":["#[stable(feature = \"str_split_once\", since = \"1.52.0\")]","#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:43419","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:11967","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:439":{"id":"0:439","crate_id":0,"name":null,"span":{"filename":"compiler/rustc_lint_defs/src/lib.rs","begin":[285,9],"end":[285,18]},"visibility":"crate","docs":null,"links":{},"attrs":["#[automatically_derived]","#[allow(unused_qualifications)]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"kind":"resolved_path","inner":{"name":"PartialEq","id":"2:2655","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"BuiltinLintDiagnostics","id":"0:352","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"BuiltinLintDiagnostics","id":"0:352","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:440","0:441"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:12383":{"id":"2:12383","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"str::rsplitn":"1:15265","self::pattern":"2:11957","prim@char":"1:15260"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitN","id":"2:45371","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:11967","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:423":{"id":"0:423","crate_id":0,"name":"0","span":{"filename":"compiler/rustc_lint_defs/src/lib.rs","begin":[305,19],"end":[305,23]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"struct_field","inner":{"kind":"resolved_path","inner":{"name":"Span","id":"22:2708","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}},"b:2:2612-0:352":{"id":"b:2:2612-0:352","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3009","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"BorrowMut","id":"2:2606","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"BuiltinLintDiagnostics","id":"0:352","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:2614"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:12386":{"id":"2:12386","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"1:15260","str::splitn":"1:15265","self::pattern":"2:11957"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitN","id":"2:45389","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:11967","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}},{"bound_predicate":{"ty":{"kind":"qualified_path","inner":{"name":"Searcher","self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:11967","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:11982","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"header":[],"abi":"\"Rust\"","has_body":true}},"a:2:3004-0:307":{"id":"a:2:3004-0:307","crate_id":0,"name":null,"span":{"filename":"compiler/rustc_lint_defs/src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Send","id":"2:3004","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"FutureIncompatibleInfo","id":"0:307","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"5:5423":{"id":"5:5423","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"1:15265"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]","#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]","#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7602","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"5:5419":{"id":"5:5419","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:7602"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n  \"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]","#[stable(feature = \"unicode_case_mapping\", since = \"1.2.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7602","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"b:5:541-0:194":{"id":"b:5:541-0:194","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2625","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"provided_trait_methods":["clone_into"],"trait":{"kind":"resolved_path","inner":{"name":"ToOwned","id":"5:537","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"HardwiredLints","id":"0:194","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["5:543","5:544","5:545"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"a:2:3004-0:352":{"id":"a:2:3004-0:352","crate_id":0,"name":null,"span":{"filename":"compiler/rustc_lint_defs/src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Send","id":"2:3004","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"BuiltinLintDiagnostics","id":"0:352","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}},"b:2:2943-0:332":{"id":"b:2:2943-0:332","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}},{"name":"U","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:2917","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"TryInto","id":"2:2913","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"LintId","id":"0:332","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:2946","2:2947"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:69":{"id":"0:69","crate_id":0,"name":null,"span":{"filename":"compiler/rustc_lint_defs/src/lib.rs","begin":[174,0],"end":[182,1]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"FutureIncompatibilityReason","id":"0:316","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:70"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:106":{"id":"0:106","crate_id":0,"name":"lint_array","span":{"filename":"compiler/rustc_lint_defs/src/lib.rs","begin":[518,0],"end":[523,1]},"visibility":"public","docs":"Declares a static `LintArray` and return it as an expression.","links":{},"attrs":["#[macro_export]"],"deprecation":null,"kind":"macro","inner":"macro_rules! lint_array {\n    ($($lint : expr), *,) => { ... };\n    ($($lint : expr), *) => { ... };\n}"},"0:164":{"id":"0:164","crate_id":0,"name":"UNSTABLE_NAME_COLLISIONS","span":{"filename":"compiler/rustc_lint_defs/src/builtin.rs","begin":[1757,0],"end":[1800,1]},"visibility":"public","docs":"The `unstable_name_collisions` lint detects that you have used a name\nthat the standard library plans to add in the future.\n\n### Example\n\n```rust\ntrait MyIterator : Iterator {\n    // is_sorted is an unstable method that already exists on the Iterator trait\n    fn is_sorted(self) -> bool where Self: Sized {true}\n}\n\nimpl<T: ?Sized> MyIterator for T where T: Iterator { }\n\nlet x = vec![1, 2, 3];\nlet _ = x.iter().is_sorted();\n```\n\n{{produces}}\n\n### Explanation\n\nWhen new methods are added to traits in the standard library, they are\nusually added in an \"unstable\" form which is only available on the\n[nightly channel] with a [`feature` attribute]. If there is any\npre-existing code which extends a trait to have a method with the same\nname, then the names will collide. In the future, when the method is\nstabilized, this will cause an error due to the ambiguity. This lint\nis an early-warning to let you know that there may be a collision in\nthe future. This can be avoided by adding type annotations to\ndisambiguate which trait method you intend to call, such as\n`MyIterator::is_sorted(my_iter)` or renaming or removing the method.\n\n[nightly channel]: https://doc.rust-lang.org/book/appendix-07-nightly-rust.html\n[`feature` attribute]: https://doc.rust-lang.org/nightly/unstable-book/","links":{},"attrs":[],"deprecation":null,"kind":"static","inner":{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"$crate::Lint","id":"0:292","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"mutable":false,"expr":"&crate::Lint{name: \"UNSTABLE_NAME_COLLISIONS\",\n             default_level: crate::Warn,\n             desc:\n                 \"detects name collision with an existing but unstable method\",\n             edition_lint_opts: None,\n             is_plugin: false,\n             future_incompatible:\n                 Some(crate::FutureIncompatibleInfo{reference:\n                                                        \"issue #48919 <https://github.com/rust-lang/rust/issues/48919>\",\n                                                                                                                           ..crate::FutureIncompatibleInfo::default_fields_for_macro()}),\n                                                                                                                                                                                            ..crate::Lint::default_fields_for_macro()}"}},"0:185":{"id":"0:185","crate_id":0,"name":"FUNCTION_ITEM_REFERENCES","span":{"filename":"compiler/rustc_lint_defs/src/builtin.rs","begin":[2650,0],"end":[2678,1]},"visibility":"public","docs":"The `function_item_references` lint detects function references that are\nformatted with [`fmt::Pointer`] or transmuted.\n\n[`fmt::Pointer`]: https://doc.rust-lang.org/std/fmt/trait.Pointer.html\n\n### Example\n\n```rust\nfn foo() { }\n\nfn main() {\n    println!(\"{:p}\", &foo);\n}\n```\n\n{{produces}}\n\n### Explanation\n\nTaking a reference to a function may be mistaken as a way to obtain a\npointer to that function. This can give unexpected results when\nformatting the reference as a pointer or transmuting it. This lint is\nissued when function references are formatted as pointers, passed as\narguments bound by [`fmt::Pointer`] or transmuted.","links":{},"attrs":[],"deprecation":null,"kind":"static","inner":{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"$crate::Lint","id":"0:292","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"mutable":false,"expr":"&crate::Lint{name: \"FUNCTION_ITEM_REFERENCES\",\n             default_level: crate::Warn,\n             desc:\n                 \"suggest casting to a function pointer when attempting to take references to function items\",\n             edition_lint_opts: None,\n             is_plugin: false, ..crate::Lint::default_fields_for_macro()}"}},"1:5394":{"id":"1:5394","crate_id":1,"name":"OsStrExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5395","1:5396"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10173","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementors":[]}},"0:222":{"id":"0:222","crate_id":0,"name":"NON_EXHAUSTIVE_OMITTED_PATTERNS","span":{"filename":"compiler/rustc_lint_defs/src/builtin.rs","begin":[3467,0],"end":[3521,1]},"visibility":"public","docs":"The `non_exhaustive_omitted_patterns` lint detects when a wildcard (`_` or `..`) in a\npattern for a `#[non_exhaustive]` struct or enum is reachable.\n\n### Example\n\n```rust,ignore (needs separate crate)\n// crate A\n#[non_exhaustive]\npub enum Bar {\n    A,\n    B, // added variant in non breaking change\n}\n\n// in crate B\n#![feature(non_exhaustive_omitted_patterns_lint)]\n\nmatch Bar::A {\n    Bar::A => {},\n    #[warn(non_exhaustive_omitted_patterns)]\n    _ => {},\n}\n```\n\nThis will produce:\n\n```text\nwarning: reachable patterns not covered of non exhaustive enum\n   --> $DIR/reachable-patterns.rs:70:9\n   |\nLL |         _ => {}\n   |         ^ pattern `B` not covered\n   |\n note: the lint level is defined here\n  --> $DIR/reachable-patterns.rs:69:16\n   |\nLL |         #[warn(non_exhaustive_omitted_patterns)]\n   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n   = help: ensure that all possible cases are being handled by adding the suggested match arms\n   = note: the matched value is of type `Bar` and the `non_exhaustive_omitted_patterns` attribute was found\n```\n\n### Explanation\n\nStructs and enums tagged with `#[non_exhaustive]` force the user to add a\n(potentially redundant) wildcard when pattern-matching, to allow for future\naddition of fields or variants. The `non_exhaustive_omitted_patterns` lint\ndetects when such a wildcard happens to actually catch some fields/variants.\nIn other words, when the match without the wildcard would not be exhaustive.\nThis lets the user be informed if new fields/variants were added.","links":{},"attrs":[],"deprecation":null,"kind":"static","inner":{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"$crate::Lint","id":"0:292","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"mutable":false,"expr":"&crate::Lint{name: \"NON_EXHAUSTIVE_OMITTED_PATTERNS\",\n             default_level: crate::Allow,\n             desc:\n                 \"detect when patterns of types marked `non_exhaustive` are missed\",\n             edition_lint_opts: None,\n             is_plugin: false,\n             feature_gate:\n                 Some(sym::non_exhaustive_omitted_patterns_lint),\n                                                                    ..crate::Lint::default_fields_for_macro()}"}},"2:11987":{"id":"2:11987","crate_id":2,"name":"DoubleEndedSearcher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:11982","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementors":[]}},"b:2:2933-0:454":{"id":"b:2:2933-0:454","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}},{"name":"U","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"From","id":"2:2910","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:2907","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"LintBuffer","id":"0:454","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:2936"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:171":{"id":"0:171","crate_id":0,"name":"EXPLICIT_OUTLIVES_REQUIREMENTS","span":{"filename":"compiler/rustc_lint_defs/src/builtin.rs","begin":[2073,0],"end":[2115,1]},"visibility":"public","docs":"The `explicit_outlives_requirements` lint detects unnecessary\nlifetime bounds that can be inferred.\n\n### Example\n\n```rust,compile_fail\n# #![allow(unused)]\n#![deny(explicit_outlives_requirements)]\n\nstruct SharedRef<'a, T>\nwhere\n    T: 'a,\n{\n    data: &'a T,\n}\n```\n\n{{produces}}\n\n### Explanation\n\nIf a `struct` contains a reference, such as `&'a T`, the compiler\nrequires that `T` outlives the lifetime `'a`. This historically\nrequired writing an explicit lifetime bound to indicate this\nrequirement. However, this can be overly explicit, causing clutter and\nunnecessary complexity. The language was changed to automatically\ninfer the bound if it is not specified. Specifically, if the struct\ncontains a reference, directly or indirectly, to `T` with lifetime\n`'x`, then it will infer that `T: 'x` is a requirement.\n\nThis lint is \"allow\" by default because it can be noisy for existing\ncode that already had these requirements. This is a stylistic choice,\nas it is still valid to explicitly state the bound. It also has some\nfalse positives that can cause confusion.\n\nSee [RFC 2093] for more details.\n\n[RFC 2093]: https://github.com/rust-lang/rfcs/blob/master/text/2093-infer-outlives.md","links":{},"attrs":[],"deprecation":null,"kind":"static","inner":{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"$crate::Lint","id":"0:292","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"mutable":false,"expr":"&crate::Lint{name: \"EXPLICIT_OUTLIVES_REQUIREMENTS\",\n             default_level: crate::Allow,\n             desc: \"outlives requirements can be inferred\",\n             edition_lint_opts: None,\n             is_plugin: false, ..crate::Lint::default_fields_for_macro()}"}},"a:2:3045-0:292":{"id":"a:2:3045-0:292","crate_id":0,"name":null,"span":{"filename":"compiler/rustc_lint_defs/src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Unpin","id":"2:3045","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Lint","id":"0:292","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"1:4713":{"id":"1:4713","crate_id":1,"name":"ToSocketAddrs","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4714","1:4715"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementors":[]}},"0:357":{"id":"0:357","crate_id":0,"name":"0","span":{"filename":"compiler/rustc_lint_defs/src/lib.rs","begin":[288,20],"end":[288,24]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"struct_field","inner":{"kind":"resolved_path","inner":{"name":"Span","id":"22:2708","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}},"a:2:8325-0:205":{"id":"a:2:8325-0:205","crate_id":0,"name":null,"span":{"filename":"compiler/rustc_lint_defs/src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"RefUnwindSafe","id":"2:8325","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"UnusedDocComment","id":"0:205","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:349":{"id":"0:349","crate_id":0,"name":"ne","span":{"filename":"compiler/rustc_lint_defs/src/lib.rs","begin":[277,9],"end":[277,18]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"ExternDepSpec","id":"0:339","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:225":{"id":"0:225","crate_id":0,"name":"Applicability","span":{"filename":"compiler/rustc_lint_defs/src/lib.rs","begin":[27,0],"end":[47,1]},"visibility":"public","docs":"Indicates the confidence in the correctness of a suggestion.\n\nAll suggestions are marked with an `Applicability`. Tools use the applicability of a suggestion\nto determine whether it should be automatically applied or if the user should be consulted\nbefore applying the suggestion.","links":{},"attrs":[],"deprecation":null,"kind":"enum","inner":{"generics":{"params":[],"where_predicates":[]},"variants_stripped":false,"variants":["0:226","0:228","0:230","0:232"],"impls":["a:2:3004-0:225","a:2:3016-0:225","a:2:3045-0:225","a:2:8324-0:225","a:2:8325-0:225","b:2:2937-0:225","b:2:2933-0:225","b:5:541-0:225","b:2:2948-0:225","b:2:2943-0:225","b:2:2609-0:225","b:2:2612-0:225","b:2:3667-0:225","0:235","0:234","0:240","0:237","0:242","0:239","0:255","0:246"]}},"0:157":{"id":"0:157","crate_id":0,"name":"SINGLE_USE_LIFETIMES","span":{"filename":"compiler/rustc_lint_defs/src/builtin.rs","begin":[1490,0],"end":[1522,1]},"visibility":"public","docs":"The `single_use_lifetimes` lint detects lifetimes that are only used\nonce.\n\n### Example\n\n```rust,compile_fail\n#![deny(single_use_lifetimes)]\n\nfn foo<'a>(x: &'a u32) {}\n```\n\n{{produces}}\n\n### Explanation\n\nSpecifying an explicit lifetime like `'a` in a function or `impl`\nshould only be used to link together two things. Otherwise, you should\njust use `'_` to indicate that the lifetime is not linked to anything,\nor elide the lifetime altogether if possible.\n\nThis lint is \"allow\" by default because it was introduced at a time\nwhen `'_` and elided lifetimes were first being introduced, and this\nlint would be too noisy. Also, there are some known false positives\nthat it produces. See [RFC 2115] for historical context, and [issue\n#44752] for more details.\n\n[RFC 2115]: https://github.com/rust-lang/rfcs/blob/master/text/2115-argument-lifetimes.md\n[issue #44752]: https://github.com/rust-lang/rust/issues/44752","links":{},"attrs":[],"deprecation":null,"kind":"static","inner":{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"$crate::Lint","id":"0:292","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"mutable":false,"expr":"&crate::Lint{name: \"SINGLE_USE_LIFETIMES\",\n             default_level: crate::Allow,\n             desc: \"detects lifetime parameters that are only used once\",\n             edition_lint_opts: None,\n             is_plugin: false, ..crate::Lint::default_fields_for_macro()}"}},"2:3239":{"id":"2:3239","crate_id":2,"name":"Drop","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3240"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementors":[]}},"2:9361":{"id":"2:9361","crate_id":2,"name":"Display","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:9362"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementors":[]}},"2:12349":{"id":"2:12349","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_deprecated(since = \"1.4.0\", reason = \"use lines() instead now\")]","#[inline]","#[allow(deprecated)]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"LinesAny","id":"2:45531","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:310":{"id":"0:310","crate_id":0,"name":"explain_reason","span":{"filename":"compiler/rustc_lint_defs/src/lib.rs","begin":[154,4],"end":[154,28]},"visibility":"public","docs":"Whether to explain the reason to the user.\n\nSet to false for lints that already include a more detailed\nexplanation.","links":{},"attrs":[],"deprecation":null,"kind":"struct_field","inner":{"kind":"primitive","inner":"bool"}},"2:12327":{"id":"2:12327","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\nBasic usage:\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:11439"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"str_as_bytes\", since = \"1.39.0\")]","#[must_use]","#[inline(always)]","#[allow(unused_attributes)]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":["const"],"abi":"\"Rust\"","has_body":true}},"a:2:3016-0:339":{"id":"a:2:3016-0:339","crate_id":0,"name":null,"span":{"filename":"compiler/rustc_lint_defs/src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Sync","id":"2:3016","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ExternDepSpec","id":"0:339","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:390":{"id":"0:390","crate_id":0,"name":"0","span":{"filename":"compiler/rustc_lint_defs/src/lib.rs","begin":[296,20],"end":[296,34]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"struct_field","inner":{"kind":"resolved_path","inner":{"name":"Option","id":"2:43419","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Symbol","id":"22:4154","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}}},"0:452":{"id":"0:452","crate_id":0,"name":"eq","span":{"filename":"compiler/rustc_lint_defs/src/lib.rs","begin":[314,9],"end":[314,18]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"BufferedEarlyLint","id":"0:444","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:419":{"id":"0:419","crate_id":0,"name":"0","span":{"filename":"compiler/rustc_lint_defs/src/lib.rs","begin":[304,25],"end":[304,29]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"struct_field","inner":{"kind":"resolved_path","inner":{"name":"Span","id":"22:2708","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}},"2:3493":{"id":"2:3493","crate_id":2,"name":"DispatchFromDyn","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[]},"bounds":[],"implementors":[]}},"0:224":{"id":"0:224","crate_id":0,"name":"DEREF_INTO_DYN_SUPERTRAIT","span":{"filename":"compiler/rustc_lint_defs/src/builtin.rs","begin":[3551,0],"end":[3594,1]},"visibility":"public","docs":"The `deref_into_dyn_supertrait` lint is output whenever there is a use of the\n`Deref` implementation with a `dyn SuperTrait` type as `Output`.\n\nThese implementations will become shadowed when the `trait_upcasting` feature is stablized.\nThe `deref` functions will no longer be called implicitly, so there might be behavior change.\n\n### Example\n\n```rust,compile_fail\n#![deny(deref_into_dyn_supertrait)]\n#![allow(dead_code)]\n\nuse core::ops::Deref;\n\ntrait A {}\ntrait B: A {}\nimpl<'a> Deref for dyn 'a + B {\n    type Target = dyn A;\n    fn deref(&self) -> &Self::Target {\n        todo!()\n    }\n}\n\nfn take_a(_: &dyn A) { }\n\nfn take_b(b: &dyn B) {\n    take_a(b);\n}\n```\n\n{{produces}}\n\n### Explanation\n\nThe dyn upcasting coercion feature adds new coercion rules, taking priority\nover certain other coercion rules, which will cause some behavior change.","links":{},"attrs":[],"deprecation":null,"kind":"static","inner":{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"$crate::Lint","id":"0:292","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"mutable":false,"expr":"&crate::Lint{name: \"DEREF_INTO_DYN_SUPERTRAIT\",\n             default_level: crate::Warn,\n             desc:\n                 \"`Deref` implementation usage with a supertrait trait object for output might be shadowed in the future\",\n             edition_lint_opts: None,\n             is_plugin: false,\n             future_incompatible:\n                 Some(crate::FutureIncompatibleInfo{reference:\n                                                        \"issue #89460 <https://github.com/rust-lang/rust/issues/89460>\",\n                                                                                                                           ..crate::FutureIncompatibleInfo::default_fields_for_macro()}),\n                                                                                                                                                                                            ..crate::Lint::default_fields_for_macro()}"}},"0:147":{"id":"0:147","crate_id":0,"name":"CONST_ITEM_MUTATION","span":{"filename":"compiler/rustc_lint_defs/src/builtin.rs","begin":[1117,0],"end":[1183,1]},"visibility":"public","docs":"The `const_item_mutation` lint detects attempts to mutate a `const`\nitem.\n\n### Example\n\n```rust\nconst FOO: [i32; 1] = [0];\n\nfn main() {\n    FOO[0] = 1;\n    // This will print \"[0]\".\n    println!(\"{:?}\", FOO);\n}\n```\n\n{{produces}}\n\n### Explanation\n\nTrying to directly mutate a `const` item is almost always a mistake.\nWhat is happening in the example above is that a temporary copy of the\n`const` is mutated, but the original `const` is not. Each time you\nrefer to the `const` by name (such as `FOO` in the example above), a\nseparate copy of the value is inlined at that location.\n\nThis lint checks for writing directly to a field (`FOO.field =\nsome_value`) or array entry (`FOO[0] = val`), or taking a mutable\nreference to the const item (`&mut FOO`), including through an\nautoderef (`FOO.some_mut_self_method()`).\n\nThere are various alternatives depending on what you are trying to\naccomplish:\n\n* First, always reconsider using mutable globals, as they can be\n  difficult to use correctly, and can make the code more difficult to\n  use or understand.\n* If you are trying to perform a one-time initialization of a global:\n    * If the value can be computed at compile-time, consider using\n      const-compatible values (see [Constant Evaluation]).\n    * For more complex single-initialization cases, consider using a\n      third-party crate, such as [`lazy_static`] or [`once_cell`].\n    * If you are using the [nightly channel], consider the new\n      [`lazy`] module in the standard library.\n* If you truly need a mutable global, consider using a [`static`],\n  which has a variety of options:\n  * Simple data types can be directly defined and mutated with an\n    [`atomic`] type.\n  * More complex types can be placed in a synchronization primitive\n    like a [`Mutex`], which can be initialized with one of the options\n    listed above.\n  * A [mutable `static`] is a low-level primitive, requiring unsafe.\n    Typically This should be avoided in preference of something\n    higher-level like one of the above.\n\n[Constant Evaluation]: https://doc.rust-lang.org/reference/const_eval.html\n[`static`]: https://doc.rust-lang.org/reference/items/static-items.html\n[mutable `static`]: https://doc.rust-lang.org/reference/items/static-items.html#mutable-statics\n[`lazy`]: https://doc.rust-lang.org/nightly/std/lazy/index.html\n[`lazy_static`]: https://crates.io/crates/lazy_static\n[`once_cell`]: https://crates.io/crates/once_cell\n[`atomic`]: https://doc.rust-lang.org/std/sync/atomic/index.html\n[`Mutex`]: https://doc.rust-lang.org/std/sync/struct.Mutex.html","links":{},"attrs":[],"deprecation":null,"kind":"static","inner":{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"$crate::Lint","id":"0:292","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"mutable":false,"expr":"&crate::Lint{name: \"CONST_ITEM_MUTATION\",\n             default_level: crate::Warn,\n             desc: \"detects attempts to mutate a `const` item\",\n             edition_lint_opts: None,\n             is_plugin: false, ..crate::Lint::default_fields_for_macro()}"}},"0:218":{"id":"0:218","crate_id":0,"name":"RUST_2021_PRELUDE_COLLISIONS","span":{"filename":"compiler/rustc_lint_defs/src/builtin.rs","begin":[3305,0],"end":[3352,1]},"visibility":"public","docs":"The `rust_2021_prelude_collisions` lint detects the usage of trait methods which are ambiguous\nwith traits added to the prelude in future editions.\n\n### Example\n\n```rust,compile_fail\n#![deny(rust_2021_prelude_collisions)]\n\ntrait Foo {\n    fn try_into(self) -> Result<String, !>;\n}\n\nimpl Foo for &str {\n    fn try_into(self) -> Result<String, !> {\n        Ok(String::from(self))\n    }\n}\n\nfn main() {\n    let x: String = \"3\".try_into().unwrap();\n    //                  ^^^^^^^^\n    // This call to try_into matches both Foo:try_into and TryInto::try_into as\n    // `TryInto` has been added to the Rust prelude in 2021 edition.\n    println!(\"{}\", x);\n}\n```\n\n{{produces}}\n\n### Explanation\n\nIn Rust 2021, one of the important introductions is the [prelude changes], which add\n`TryFrom`, `TryInto`, and `FromIterator` into the standard library's prelude. Since this\nresults in an ambiguity as to which method/function to call when an existing `try_into`\nmethod is called via dot-call syntax or a `try_from`/`from_iter` associated function\nis called directly on a type.\n\n[prelude changes]: https://blog.rust-lang.org/inside-rust/2021/03/04/planning-rust-2021.html#prelude-changes","links":{},"attrs":[],"deprecation":null,"kind":"static","inner":{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"$crate::Lint","id":"0:292","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"mutable":false,"expr":"&crate::Lint{name: \"RUST_2021_PRELUDE_COLLISIONS\",\n             default_level: crate::Allow,\n             desc:\n                 \"detects the usage of trait methods which are ambiguous with traits added to the prelude in future editions\",\n             edition_lint_opts: None,\n             is_plugin: false,\n             future_incompatible:\n                 Some(crate::FutureIncompatibleInfo{reference:\n                                                        \"<https://doc.rust-lang.org/nightly/edition-guide/rust-2021/prelude.html>\",\n                                                    reason:\n                                                        FutureIncompatibilityReason::EditionError(Edition::Edition2021),\n                                                                                                                           ..crate::FutureIncompatibleInfo::default_fields_for_macro()}),\n                                                                                                                                                                                            ..crate::Lint::default_fields_for_macro()}"}},"1:4406":{"id":"1:4406","crate_id":1,"name":"Write","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4407","1:4408","1:4410","1:4411","1:4412","1:4413","1:4414","1:4423"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementors":[]}},"0:131":{"id":"0:131","crate_id":0,"name":"UNREACHABLE_PATTERNS","span":{"filename":"compiler/rustc_lint_defs/src/builtin.rs","begin":[617,0],"end":[641,1]},"visibility":"public","docs":"The `unreachable_patterns` lint detects unreachable patterns.\n\n### Example\n\n```rust\nlet x = 5;\nmatch x {\n    y => (),\n    5 => (),\n}\n```\n\n{{produces}}\n\n### Explanation\n\nThis usually indicates a mistake in how the patterns are specified or\nordered. In this example, the `y` pattern will always match, so the\nfive is impossible to reach. Remember, match arms match in order, you\nprobably wanted to put the `5` case above the `y` case.","links":{},"attrs":[],"deprecation":null,"kind":"static","inner":{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"$crate::Lint","id":"0:292","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"mutable":false,"expr":"&crate::Lint{name: \"UNREACHABLE_PATTERNS\",\n             default_level: crate::Warn,\n             desc: \"detects unreachable patterns\",\n             edition_lint_opts: None,\n             is_plugin: false, ..crate::Lint::default_fields_for_macro()}"}},"0:212":{"id":"0:212","crate_id":0,"name":null,"span":{"filename":"compiler/rustc_lint_defs/src/builtin.rs","begin":[3163,0],"end":[3163,61]},"visibility":{"restricted":{"parent":"0:47","path":"::builtin"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"UnusedDocComment","id":"0:205","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:213"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:12351":{"id":"2:12351","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"self::pattern":"2:11957","prim@char":"1:15260"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:11967","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:375":{"id":"0:375","crate_id":0,"name":"UnknownCrateTypes","span":{"filename":"compiler/rustc_lint_defs/src/lib.rs","begin":[293,4],"end":[293,43]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"tuple","variant_inner":[{"kind":"resolved_path","inner":{"name":"Span","id":"22:2708","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},{"kind":"resolved_path","inner":{"name":"String","id":"5:7602","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},{"kind":"resolved_path","inner":{"name":"String","id":"5:7602","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}]}},"0:324":{"id":"0:324","crate_id":0,"name":"EditionSemanticsChange","span":{"filename":"compiler/rustc_lint_defs/src/lib.rs","begin":[171,4],"end":[171,35]},"visibility":"default","docs":"Code that changes meaning in some way in\nthe provided edition","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"tuple","variant_inner":[{"kind":"resolved_path","inner":{"name":"Edition","id":"22:1818","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}]}},"2:9373":{"id":"2:9373","crate_id":2,"name":"LowerExp","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:9374"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementors":[]}},"0:248":{"id":"0:248","crate_id":0,"name":"encode","span":{"filename":"compiler/rustc_lint_defs/src/lib.rs","begin":[26,46],"end":[26,55]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["__encoder",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"__E"}}}]],"output":{"kind":"resolved_path","inner":{"name":"::std::result::Result","id":"2:43545","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}},{"type":{"kind":"qualified_path","inner":{"name":"Error","self_type":{"kind":"generic","inner":"__E"},"trait":{"kind":"resolved_path","inner":{"name":"Encoder","id":"33:239","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:167":{"id":"0:167","crate_id":0,"name":"WHERE_CLAUSES_OBJECT_SAFETY","span":{"filename":"compiler/rustc_lint_defs/src/builtin.rs","begin":[1863,0],"end":[1901,1]},"visibility":"public","docs":"The `where_clauses_object_safety` lint detects for [object safety] of\n[where clauses].\n\n[object safety]: https://doc.rust-lang.org/reference/items/traits.html#object-safety\n[where clauses]: https://doc.rust-lang.org/reference/items/generics.html#where-clauses\n\n### Example\n\n```rust,no_run\ntrait Trait {}\n\ntrait X { fn foo(&self) where Self: Trait; }\n\nimpl X for () { fn foo(&self) {} }\n\nimpl Trait for dyn X {}\n\n// Segfault at opt-level 0, SIGILL otherwise.\npub fn main() { <dyn X as X>::foo(&()); }\n```\n\n{{produces}}\n\n### Explanation\n\nThe compiler previously allowed these object-unsafe bounds, which was\nincorrect. This is a [future-incompatible] lint to transition this to\na hard error in the future. See [issue #51443] for more details.\n\n[issue #51443]: https://github.com/rust-lang/rust/issues/51443\n[future-incompatible]: ../index.md#future-incompatible-lints","links":{},"attrs":[],"deprecation":null,"kind":"static","inner":{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"$crate::Lint","id":"0:292","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"mutable":false,"expr":"&crate::Lint{name: \"WHERE_CLAUSES_OBJECT_SAFETY\",\n             default_level: crate::Warn,\n             desc: \"checks the object safety of where clauses\",\n             edition_lint_opts: None,\n             is_plugin: false,\n             future_incompatible:\n                 Some(crate::FutureIncompatibleInfo{reference:\n                                                        \"issue #51443 <https://github.com/rust-lang/rust/issues/51443>\",\n                                                                                                                           ..crate::FutureIncompatibleInfo::default_fields_for_macro()}),\n                                                                                                                                                                                            ..crate::Lint::default_fields_for_macro()}"}},"2:3444":{"id":"2:3444","crate_id":2,"name":"Try","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3445","2:3446","2:3447","2:3448"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FromResidual","id":"2:3449","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Residual","self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"Try","id":"2:3444","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementors":[]}},"2:2936":{"id":"2:2936","crate_id":2,"name":"into","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"generic","inner":"U"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:332":{"id":"0:332","crate_id":0,"name":"LintId","span":{"filename":"compiler/rustc_lint_defs/src/lib.rs","begin":[224,0],"end":[227,1]},"visibility":"public","docs":"Identifies a lint known to the compiler.","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"struct_type":"plain","generics":{"params":[],"where_predicates":[]},"fields_stripped":false,"fields":["0:333"],"impls":["0:85","a:2:3004-0:332","a:2:3016-0:332","a:2:3045-0:332","a:2:8324-0:332","a:2:8325-0:332","b:2:2937-0:332","b:2:2933-0:332","b:5:541-0:332","b:2:2948-0:332","b:2:2943-0:332","b:2:2609-0:332","b:2:2612-0:332","b:2:3667-0:332","0:334","0:336","0:81","0:79","0:337","0:82","0:89","0:92"]}},"0:240":{"id":"0:240","crate_id":0,"name":null,"span":{"filename":"compiler/rustc_lint_defs/src/lib.rs","begin":[26,29],"end":[26,38]},"visibility":"crate","docs":null,"links":{},"attrs":["#[automatically_derived]","#[allow(unused_qualifications)]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"kind":"resolved_path","inner":{"name":"PartialEq","id":"2:2655","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Applicability","id":"0:225","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Applicability","id":"0:225","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:241"],"negative":false,"synthetic":false,"blanket_impl":null}},"a:2:3016-0:260":{"id":"a:2:3016-0:260","crate_id":0,"name":null,"span":{"filename":"compiler/rustc_lint_defs/src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Sync","id":"2:3016","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Level","id":"0:260","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"b:2:2612-0:205":{"id":"b:2:2612-0:205","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3009","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"BorrowMut","id":"2:2606","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"UnusedDocComment","id":"0:205","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:2614"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:241":{"id":"0:241","crate_id":0,"name":"eq","span":{"filename":"compiler/rustc_lint_defs/src/lib.rs","begin":[26,29],"end":[26,38]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"Applicability","id":"0:225","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"1:6529":{"id":"1:6529","crate_id":1,"name":"ChildExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6530","1:6531"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10173","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementors":[]}},"0:302":{"id":"0:302","crate_id":0,"name":null,"span":{"filename":"compiler/rustc_lint_defs/src/lib.rs","begin":[97,9],"end":[97,13]},"visibility":"crate","docs":null,"links":{},"attrs":["#[automatically_derived]","#[allow(unused_qualifications)]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Copy","id":"2:3014","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Lint","id":"0:292","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"a:2:3045-0:316":{"id":"a:2:3045-0:316","crate_id":0,"name":null,"span":{"filename":"compiler/rustc_lint_defs/src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Unpin","id":"2:3045","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"FutureIncompatibilityReason","id":"0:316","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:3132":{"id":"2:3132","crate_id":2,"name":"BitOr","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3134","2:3135"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"}}}}],"where_predicates":[]},"bounds":[],"implementors":[]}},"0:186":{"id":"0:186","crate_id":0,"name":"UNINHABITED_STATIC","span":{"filename":"compiler/rustc_lint_defs/src/builtin.rs","begin":[2680,0],"end":[2706,1]},"visibility":"public","docs":"The `uninhabited_static` lint detects uninhabited statics.\n\n### Example\n\n```rust\nenum Void {}\nextern {\n    static EXTERN: Void;\n}\n```\n\n{{produces}}\n\n### Explanation\n\nStatics with an uninhabited type can never be initialized, so they are impossible to define.\nHowever, this can be side-stepped with an `extern static`, leading to problems later in the\ncompiler which assumes that there are no initialized uninhabited places (such as locals or\nstatics). This was accidentally allowed, but is being phased out.","links":{},"attrs":[],"deprecation":null,"kind":"static","inner":{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"$crate::Lint","id":"0:292","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"mutable":false,"expr":"&crate::Lint{name: \"UNINHABITED_STATIC\",\n             default_level: crate::Warn,\n             desc: \"uninhabited static\",\n             edition_lint_opts: None,\n             is_plugin: false,\n             future_incompatible:\n                 Some(crate::FutureIncompatibleInfo{reference:\n                                                        \"issue #74840 <https://github.com/rust-lang/rust/issues/74840>\",\n                                                                                                                           ..crate::FutureIncompatibleInfo::default_fields_for_macro()}),\n                                                                                                                                                                                            ..crate::Lint::default_fields_for_macro()}"}},"2:12404":{"id":"2:12404","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"`DoubleEndedIterator`":"2:7470","prim@char":"1:15260","self::pattern":"2:11957","str::match_indices":"1:15265"},"attrs":["#[stable(feature = \"str_match_indices\", since = \"1.5.0\")]","#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatchIndices","id":"2:45435","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:11967","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}},{"bound_predicate":{"ty":{"kind":"qualified_path","inner":{"name":"Searcher","self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:11967","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:11982","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"header":[],"abi":"\"Rust\"","has_body":true}},"2:3148":{"id":"2:3148","crate_id":2,"name":"Shr","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3150","2:3151"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"}}}}],"where_predicates":[]},"bounds":[],"implementors":[]}},"1:6299":{"id":"1:6299","crate_id":1,"name":"JoinHandleExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6300","1:6301"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementors":[]}},"b:2:2948-0:339":{"id":"b:2:2948-0:339","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}},{"name":"U","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:2907","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:2917","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ExternDepSpec","id":"0:339","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:2951","2:2952"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:174":{"id":"0:174","crate_id":0,"name":"POINTER_STRUCTURAL_MATCH","span":{"filename":"compiler/rustc_lint_defs/src/builtin.rs","begin":[2180,0],"end":[2215,1]},"visibility":"public","docs":"The `pointer_structural_match` lint detects pointers used in patterns whose behaviour\ncannot be relied upon across compiler versions and optimization levels.\n\n### Example\n\n```rust,compile_fail\n#![deny(pointer_structural_match)]\nfn foo(a: usize, b: usize) -> usize { a + b }\nconst FOO: fn(usize, usize) -> usize = foo;\nfn main() {\n    match FOO {\n        FOO => {},\n        _ => {},\n    }\n}\n```\n\n{{produces}}\n\n### Explanation\n\nPrevious versions of Rust allowed function pointers and wide raw pointers in patterns.\nWhile these work in many cases as expected by users, it is possible that due to\noptimizations pointers are \"not equal to themselves\" or pointers to different functions\ncompare as equal during runtime. This is because LLVM optimizations can deduplicate\nfunctions if their bodies are the same, thus also making pointers to these functions point\nto the same location. Additionally functions may get duplicated if they are instantiated\nin different crates and not deduplicated again via LTO.","links":{},"attrs":[],"deprecation":null,"kind":"static","inner":{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"$crate::Lint","id":"0:292","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"mutable":false,"expr":"&crate::Lint{name: \"POINTER_STRUCTURAL_MATCH\",\n             default_level: crate::Allow,\n             desc: \"pointers are not structural-match\",\n             edition_lint_opts: None,\n             is_plugin: false,\n             future_incompatible:\n                 Some(crate::FutureIncompatibleInfo{reference:\n                                                        \"issue #62411 <https://github.com/rust-lang/rust/issues/70861>\",\n                                                                                                                           ..crate::FutureIncompatibleInfo::default_fields_for_macro()}),\n                                                                                                                                                                                            ..crate::Lint::default_fields_for_macro()}"}},"2:3228":{"id":"2:3228","crate_id":2,"name":"DerefMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3229"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Deref","id":"2:3215","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementors":[]}},"0:168":{"id":"0:168","crate_id":0,"name":"PROC_MACRO_DERIVE_RESOLUTION_FALLBACK","span":{"filename":"compiler/rustc_lint_defs/src/builtin.rs","begin":[1903,0],"end":[1968,1]},"visibility":"public","docs":"The `proc_macro_derive_resolution_fallback` lint detects proc macro\nderives using inaccessible names from parent modules.\n\n### Example\n\n```rust,ignore (proc-macro)\n// foo.rs\n#![crate_type = \"proc-macro\"]\n\nextern crate proc_macro;\n\nuse proc_macro::*;\n\n#[proc_macro_derive(Foo)]\npub fn foo1(a: TokenStream) -> TokenStream {\n    drop(a);\n    \"mod __bar { static mut BAR: Option<Something> = None; }\".parse().unwrap()\n}\n```\n\n```rust,ignore (needs-dependency)\n// bar.rs\n#[macro_use]\nextern crate foo;\n\nstruct Something;\n\n#[derive(Foo)]\nstruct Another;\n\nfn main() {}\n```\n\nThis will produce:\n\n```text\nwarning: cannot find type `Something` in this scope\n --> src/main.rs:8:10\n  |\n8 | #[derive(Foo)]\n  |          ^^^ names from parent modules are not accessible without an explicit import\n  |\n  = note: `#[warn(proc_macro_derive_resolution_fallback)]` on by default\n  = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n  = note: for more information, see issue #50504 <https://github.com/rust-lang/rust/issues/50504>\n```\n\n### Explanation\n\nIf a proc-macro generates a module, the compiler unintentionally\nallowed items in that module to refer to items in the crate root\nwithout importing them. This is a [future-incompatible] lint to\ntransition this to a hard error in the future. See [issue #50504] for\nmore details.\n\n[issue #50504]: https://github.com/rust-lang/rust/issues/50504\n[future-incompatible]: ../index.md#future-incompatible-lints","links":{},"attrs":[],"deprecation":null,"kind":"static","inner":{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"$crate::Lint","id":"0:292","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"mutable":false,"expr":"&crate::Lint{name: \"PROC_MACRO_DERIVE_RESOLUTION_FALLBACK\",\n             default_level: crate::Deny,\n             desc:\n                 \"detects proc macro derives using inaccessible names from parent modules\",\n             edition_lint_opts: None,\n             is_plugin: false,\n             future_incompatible:\n                 Some(crate::FutureIncompatibleInfo{reference:\n                                                        \"issue #83583 <https://github.com/rust-lang/rust/issues/83583>\",\n                                                    reason:\n                                                        FutureIncompatibilityReason::FutureReleaseErrorReportNow,\n                                                                                                                    ..crate::FutureIncompatibleInfo::default_fields_for_macro()}),\n                                                                                                                                                                                     ..crate::Lint::default_fields_for_macro()}"}},"0:345":{"id":"0:345","crate_id":0,"name":"0","span":{"filename":"compiler/rustc_lint_defs/src/lib.rs","begin":[280,8],"end":[280,14]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"struct_field","inner":{"kind":"resolved_path","inner":{"name":"String","id":"5:7602","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}},"0:165":{"id":"0:165","crate_id":0,"name":"IRREFUTABLE_LET_PATTERNS","span":{"filename":"compiler/rustc_lint_defs/src/builtin.rs","begin":[1802,0],"end":[1838,1]},"visibility":"public","docs":"The `irrefutable_let_patterns` lint detects [irrefutable patterns]\nin [`if let`]s, [`while let`]s, and `if let` guards.\n\n### Example\n\n```\nif let _ = 123 {\n    println!(\"always runs!\");\n}\n```\n\n{{produces}}\n\n### Explanation\n\nThere usually isn't a reason to have an irrefutable pattern in an\n`if let` or `while let` statement, because the pattern will always match\nsuccessfully. A [`let`] or [`loop`] statement will suffice. However,\nwhen generating code with a macro, forbidding irrefutable patterns\nwould require awkward workarounds in situations where the macro\ndoesn't know if the pattern is refutable or not. This lint allows\nmacros to accept this form, while alerting for a possibly incorrect\nuse in normal code.\n\nSee [RFC 2086] for more details.\n\n[irrefutable patterns]: https://doc.rust-lang.org/reference/patterns.html#refutability\n[`if let`]: https://doc.rust-lang.org/reference/expressions/if-expr.html#if-let-expressions\n[`while let`]: https://doc.rust-lang.org/reference/expressions/loop-expr.html#predicate-pattern-loops\n[`let`]: https://doc.rust-lang.org/reference/statements.html#let-statements\n[`loop`]: https://doc.rust-lang.org/reference/expressions/loop-expr.html#infinite-loops\n[RFC 2086]: https://github.com/rust-lang/rfcs/blob/master/text/2086-allow-if-let-irrefutables.md","links":{},"attrs":[],"deprecation":null,"kind":"static","inner":{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"$crate::Lint","id":"0:292","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"mutable":false,"expr":"&crate::Lint{name: \"IRREFUTABLE_LET_PATTERNS\",\n             default_level: crate::Warn,\n             desc:\n                 \"detects irrefutable patterns in `if let` and `while let` statements\",\n             edition_lint_opts: None,\n             is_plugin: false, ..crate::Lint::default_fields_for_macro()}"}},"2:12411":{"id":"2:12411","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\nassert_eq!(\" Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[inline]","#[must_use =\n  \"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"trim_direction\", since = \"1.30.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"a:2:8325-0:316":{"id":"a:2:8325-0:316","crate_id":0,"name":null,"span":{"filename":"compiler/rustc_lint_defs/src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"RefUnwindSafe","id":"2:8325","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"FutureIncompatibilityReason","id":"0:316","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"5:5421":{"id":"5:5421","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7602"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]","#[stable(feature = \"repeat_str\", since = \"1.16.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7602","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"2:9601":{"id":"2:9601","crate_id":2,"name":"BuildHasher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:9602","2:9603","2:9604"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementors":[]}},"1:5530":{"id":"1:5530","crate_id":1,"name":"DirEntryExt2","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5531"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10173","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementors":[]}},"0:346":{"id":"0:346","crate_id":0,"name":null,"span":{"filename":"compiler/rustc_lint_defs/src/lib.rs","begin":[277,9],"end":[277,18]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"StructuralPartialEq","id":"2:3012","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ExternDepSpec","id":"0:339","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"b:2:3667-0:225":{"id":"b:2:3667-0:225","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3009","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Any","id":"2:3665","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Applicability","id":"0:225","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3669"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:329":{"id":"0:329","crate_id":0,"name":"clone","span":{"filename":"compiler/rustc_lint_defs/src/lib.rs","begin":[158,15],"end":[158,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"FutureIncompatibilityReason","id":"0:316","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"b:2:3667-0:260":{"id":"b:2:3667-0:260","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3009","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Any","id":"2:3665","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Level","id":"0:260","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3669"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:409":{"id":"0:409","crate_id":0,"name":"0","span":{"filename":"compiler/rustc_lint_defs/src/lib.rs","begin":[301,24],"end":[301,28]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"struct_field","inner":{"kind":"resolved_path","inner":{"name":"Span","id":"22:2708","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}},"2:3004":{"id":"2:3004","crate_id":2,"name":"Send","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementors":[]}},"1:5468":{"id":"1:5468","crate_id":1,"name":"PermissionsExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5469","1:5470","1:5471"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementors":[]}},"0:338":{"id":"0:338","crate_id":0,"name":"fmt","span":{"filename":"compiler/rustc_lint_defs/src/lib.rs","begin":[223,22],"end":[223,27]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Formatter","id":"2:9315","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Result","id":"2:9304","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:427":{"id":"0:427","crate_id":0,"name":"1","span":{"filename":"compiler/rustc_lint_defs/src/lib.rs","begin":[306,24],"end":[306,29]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"struct_field","inner":{"kind":"resolved_path","inner":{"name":"Ident","id":"22:4113","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}},"b:2:2948-0:352":{"id":"b:2:2948-0:352","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}},{"name":"U","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:2907","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:2917","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"BuiltinLintDiagnostics","id":"0:352","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:2951","2:2952"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:301":{"id":"0:301","crate_id":0,"name":"crate_level_only","span":{"filename":"compiler/rustc_lint_defs/src/lib.rs","begin":[139,4],"end":[139,30]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"struct_field","inner":{"kind":"primitive","inner":"bool"}},"0:198":{"id":"0:198","crate_id":0,"name":"clone","span":{"filename":"compiler/rustc_lint_defs/src/builtin.rs","begin":[2963,0],"end":[3059,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"HardwiredLints","id":"0:194","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:155":{"id":"0:155","crate_id":0,"name":"UNUSED_MUT","span":{"filename":"compiler/rustc_lint_defs/src/builtin.rs","begin":[1445,0],"end":[1464,1]},"visibility":"public","docs":"The `unused_mut` lint detects mut variables which don't need to be\nmutable.\n\n### Example\n\n```rust\nlet mut x = 5;\n```\n\n{{produces}}\n\n### Explanation\n\nThe preferred style is to only mark variables as `mut` if it is\nrequired.","links":{},"attrs":[],"deprecation":null,"kind":"static","inner":{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"$crate::Lint","id":"0:292","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"mutable":false,"expr":"&crate::Lint{name: \"UNUSED_MUT\",\n             default_level: crate::Warn,\n             desc: \"detect mut variables which don\\'t need to be mutable\",\n             edition_lint_opts: None,\n             is_plugin: false, ..crate::Lint::default_fields_for_macro()}"}},"0:192":{"id":"0:192","crate_id":0,"name":"LEGACY_DERIVE_HELPERS","span":{"filename":"compiler/rustc_lint_defs/src/builtin.rs","begin":[2884,0],"end":[2928,1]},"visibility":"public","docs":"The `legacy_derive_helpers` lint detects derive helper attributes\nthat are used before they are introduced.\n\n### Example\n\n```rust,ignore (needs extern crate)\n#[serde(rename_all = \"camelCase\")]\n#[derive(Deserialize)]\nstruct S { /* fields */ }\n```\n\nproduces:\n\n```text\nwarning: derive helper attribute is used before it is introduced\n  --> $DIR/legacy-derive-helpers.rs:1:3\n   |\n 1 | #[serde(rename_all = \"camelCase\")]\n   |   ^^^^^\n...\n 2 | #[derive(Deserialize)]\n   |          ----------- the attribute is introduced here\n```\n\n### Explanation\n\nAttributes like this work for historical reasons, but attribute expansion works in\nleft-to-right order in general, so, to resolve `#[serde]`, compiler has to try to \"look\ninto the future\" at not yet expanded part of the item , but such attempts are not always\nreliable.\n\nTo fix the warning place the helper attribute after its corresponding derive.\n```rust,ignore (needs extern crate)\n#[derive(Deserialize)]\n#[serde(rename_all = \"camelCase\")]\nstruct S { /* fields */ }\n```","links":{},"attrs":[],"deprecation":null,"kind":"static","inner":{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"$crate::Lint","id":"0:292","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"mutable":false,"expr":"&crate::Lint{name: \"LEGACY_DERIVE_HELPERS\",\n             default_level: crate::Warn,\n             desc:\n                 \"detects derive helper attributes that are used before they are introduced\",\n             edition_lint_opts: None,\n             is_plugin: false,\n             future_incompatible:\n                 Some(crate::FutureIncompatibleInfo{reference:\n                                                        \"issue #79202 <https://github.com/rust-lang/rust/issues/79202>\",\n                                                                                                                           ..crate::FutureIncompatibleInfo::default_fields_for_macro()}),\n                                                                                                                                                                                            ..crate::Lint::default_fields_for_macro()}"}},"a:2:8325-0:332":{"id":"a:2:8325-0:332","crate_id":0,"name":null,"span":{"filename":"compiler/rustc_lint_defs/src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"RefUnwindSafe","id":"2:8325","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"LintId","id":"0:332","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:6975":{"id":"2:6975","crate_id":2,"name":"Step","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:6976","2:6977","2:6978","2:6979","2:6980","2:6981","2:6982"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2625","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"PartialOrd","id":"2:2702","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementors":[]}},"0:112":{"id":"0:112","crate_id":0,"name":"FORBIDDEN_LINT_GROUPS","span":{"filename":"compiler/rustc_lint_defs/src/builtin.rs","begin":[11,0],"end":[44,1]},"visibility":"public","docs":"The `forbidden_lint_groups` lint detects violations of\n`forbid` applied to a lint group. Due to a bug in the compiler,\nthese used to be overlooked entirely. They now generate a warning.\n\n### Example\n\n```rust\n#![forbid(warnings)]\n#![deny(bad_style)]\n\nfn main() {}\n```\n\n{{produces}}\n\n### Recommended fix\n\nIf your crate is using `#![forbid(warnings)]`,\nwe recommend that you change to `#![deny(warnings)]`.\n\n### Explanation\n\nDue to a compiler bug, applying `forbid` to lint groups\npreviously had no effect. The bug is now fixed but instead of\nenforcing `forbid` we issue this future-compatibility warning\nto avoid breaking existing crates.","links":{},"attrs":[],"deprecation":null,"kind":"static","inner":{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"$crate::Lint","id":"0:292","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"mutable":false,"expr":"&crate::Lint{name: \"FORBIDDEN_LINT_GROUPS\",\n             default_level: crate::Warn,\n             desc: \"applying forbid to lint-groups\",\n             edition_lint_opts: None,\n             is_plugin: false,\n             future_incompatible:\n                 Some(crate::FutureIncompatibleInfo{reference:\n                                                        \"issue #81670 <https://github.com/rust-lang/rust/issues/81670>\",\n                                                                                                                           ..crate::FutureIncompatibleInfo::default_fields_for_macro()}),\n                                                                                                                                                                                            ..crate::Lint::default_fields_for_macro()}"}},"0:65":{"id":"0:65","crate_id":0,"name":null,"span":{"filename":"compiler/rustc_lint_defs/src/lib.rs","begin":[61,0],"end":[94,1]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"Level","id":"0:260","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:66","0:67","0:68"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:117":{"id":"0:117","crate_id":0,"name":"ARITHMETIC_OVERFLOW","span":{"filename":"compiler/rustc_lint_defs/src/builtin.rs","begin":[216,0],"end":[240,1]},"visibility":"public","docs":"The `arithmetic_overflow` lint detects that an arithmetic operation\nwill [overflow].\n\n[overflow]: https://doc.rust-lang.org/reference/expressions/operator-expr.html#overflow\n\n### Example\n\n```rust,compile_fail\n1_i32 << 32;\n```\n\n{{produces}}\n\n### Explanation\n\nIt is very likely a mistake to perform an arithmetic operation that\noverflows its value. If the compiler is able to detect these kinds of\noverflows at compile-time, it will trigger this lint. Consider\nadjusting the expression to avoid overflow, or use a data type that\nwill not overflow.","links":{},"attrs":[],"deprecation":null,"kind":"static","inner":{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"$crate::Lint","id":"0:292","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"mutable":false,"expr":"&crate::Lint{name: \"ARITHMETIC_OVERFLOW\",\n             default_level: crate::Deny,\n             desc: \"arithmetic operation overflows\",\n             edition_lint_opts: None,\n             is_plugin: false, ..crate::Lint::default_fields_for_macro()}"}},"0:127":{"id":"0:127","crate_id":0,"name":"UNUSED_ASSIGNMENTS","span":{"filename":"compiler/rustc_lint_defs/src/builtin.rs","begin":[520,0],"end":[541,1]},"visibility":"public","docs":"The `unused_assignments` lint detects assignments that will never be read.\n\n### Example\n\n```rust\nlet mut x = 5;\nx = 6;\n```\n\n{{produces}}\n\n### Explanation\n\nUnused assignments may signal a mistake or unfinished code. If the\nvariable is never used after being assigned, then the assignment can\nbe removed. Variables with an underscore prefix such as `_x` will not\ntrigger this lint.","links":{},"attrs":[],"deprecation":null,"kind":"static","inner":{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"$crate::Lint","id":"0:292","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"mutable":false,"expr":"&crate::Lint{name: \"UNUSED_ASSIGNMENTS\",\n             default_level: crate::Warn,\n             desc: \"detect assignments that will never be read\",\n             edition_lint_opts: None,\n             is_plugin: false, ..crate::Lint::default_fields_for_macro()}"}},"1:5460":{"id":"1:5460","crate_id":1,"name":"FileExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5461","1:5462","1:5463","1:5464"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementors":[]}},"0:173":{"id":"0:173","crate_id":0,"name":"DEPRECATED_IN_FUTURE","span":{"filename":"compiler/rustc_lint_defs/src/builtin.rs","begin":[2162,0],"end":[2178,1]},"visibility":"public","docs":"The `deprecated_in_future` lint is internal to rustc and should not be\nused by user code.\n\nThis lint is only enabled in the standard library. It works with the\nuse of `#[rustc_deprecated]` with a `since` field of a version in the\nfuture. This allows something to be marked as deprecated in a future\nversion, and then this lint will ensure that the item is no longer\nused in the standard library. See the [stability documentation] for\nmore details.\n\n[stability documentation]: https://rustc-dev-guide.rust-lang.org/stability.html#rustc_deprecated","links":{},"attrs":[],"deprecation":null,"kind":"static","inner":{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"$crate::Lint","id":"0:292","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"mutable":false,"expr":"&crate::Lint{name: \"DEPRECATED_IN_FUTURE\",\n             default_level: crate::Allow,\n             desc:\n                 \"detects use of items that will be deprecated in a future version\",\n             edition_lint_opts: None,\n             is_plugin: false,\n             report_in_external_macro:\n                 true, ..crate::Lint::default_fields_for_macro()}"}},"0:305":{"id":"0:305","crate_id":0,"name":null,"span":{"filename":"compiler/rustc_lint_defs/src/lib.rs","begin":[97,22],"end":[97,27]},"visibility":"crate","docs":null,"links":{},"attrs":["#[automatically_derived]","#[allow(unused_qualifications)]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Debug","id":"2:9354","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Lint","id":"0:292","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:306"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:97":{"id":"0:97","crate_id":0,"name":"add_early_lint","span":{"filename":"compiler/rustc_lint_defs/src/lib.rs","begin":[339,4],"end":[344,5]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["early_lint",{"kind":"resolved_path","inner":{"name":"BufferedEarlyLint","id":"0:444","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:87":{"id":"0:87","crate_id":0,"name":"lint_name_raw","span":{"filename":"compiler/rustc_lint_defs/src/lib.rs","begin":[250,4],"end":[252,5]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'static","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"a:2:8325-0:352":{"id":"a:2:8325-0:352","crate_id":0,"name":null,"span":{"filename":"compiler/rustc_lint_defs/src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"RefUnwindSafe","id":"2:8325","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"BuiltinLintDiagnostics","id":"0:352","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"b:2:2612-0:225":{"id":"b:2:2612-0:225","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3009","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"BorrowMut","id":"2:2606","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Applicability","id":"0:225","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:2614"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:2933-0:205":{"id":"b:2:2933-0:205","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}},{"name":"U","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"From","id":"2:2910","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:2907","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"UnusedDocComment","id":"0:205","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:2936"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:2948-0:332":{"id":"b:2:2948-0:332","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}},{"name":"U","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:2907","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:2917","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"LintId","id":"0:332","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:2951","2:2952"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:7606":{"id":"2:7606","crate_id":2,"name":"Iterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:7607","2:7608","2:7609","2:7610","2:7612","2:7615","2:7616","2:7617","2:7618","2:7620","2:7622","2:7623","2:7625","2:7628","2:7635","2:7637","2:7640","2:7641","2:7642","2:7644","2:7646","2:7649","2:7650","2:7651","2:7655","2:7658","2:7659","2:7660","2:7662","2:7663","2:7665","2:7675","2:7690","2:7692","2:7696","2:7705","2:7708","2:7710","2:7717","2:7724","2:7731","2:7740","2:7751","2:7758","2:7765","2:7766","2:7767","2:7779","2:7786","2:7798","2:7805","2:7806","2:7811","2:7814","2:7817","2:7818","2:7820","2:7822","2:7825","2:7828","2:7831","2:7834","2:7837","2:7840","2:7842","2:7844","2:7846","2:7848","2:7850","2:7851","2:7859"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementors":[]}},"0:143":{"id":"0:143","crate_id":0,"name":"PUB_USE_OF_PRIVATE_EXTERN_CRATE","span":{"filename":"compiler/rustc_lint_defs/src/builtin.rs","begin":[987,0],"end":[1018,1]},"visibility":"public","docs":"The `pub_use_of_private_extern_crate` lint detects a specific\nsituation of re-exporting a private `extern crate`.\n\n### Example\n\n```rust,compile_fail\nextern crate core;\npub use core as reexported_core;\n```\n\n{{produces}}\n\n### Explanation\n\nA public `use` declaration should not be used to publicly re-export a\nprivate `extern crate`. `pub extern crate` should be used instead.\n\nThis was historically allowed, but is not the intended behavior\naccording to the visibility rules. This is a [future-incompatible]\nlint to transition this to a hard error in the future. See [issue\n#34537] for more details.\n\n[issue #34537]: https://github.com/rust-lang/rust/issues/34537\n[future-incompatible]: ../index.md#future-incompatible-lints","links":{},"attrs":[],"deprecation":null,"kind":"static","inner":{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"$crate::Lint","id":"0:292","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"mutable":false,"expr":"&crate::Lint{name: \"PUB_USE_OF_PRIVATE_EXTERN_CRATE\",\n             default_level: crate::Deny,\n             desc: \"detect public re-exports of private extern crates\",\n             edition_lint_opts: None,\n             is_plugin: false,\n             future_incompatible:\n                 Some(crate::FutureIncompatibleInfo{reference:\n                                                        \"issue #34537 <https://github.com/rust-lang/rust/issues/34537>\",\n                                                                                                                           ..crate::FutureIncompatibleInfo::default_fields_for_macro()}),\n                                                                                                                                                                                            ..crate::Lint::default_fields_for_macro()}"}},"2:7874":{"id":"2:7874","crate_id":2,"name":"FusedIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"2:7606","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementors":[]}},"b:2:2609-0:260":{"id":"b:2:2609-0:260","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3009","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Borrow","id":"2:2603","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Level","id":"0:260","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:2611"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:261":{"id":"0:261","crate_id":0,"name":"Allow","span":{"filename":"compiler/rustc_lint_defs/src/lib.rs","begin":[52,4],"end":[52,9]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"2:12444":{"id":"2:12444","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{}\", c);\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"1:15260"},"attrs":["#[must_use =\n  \"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"str_escape\", since = \"1.34.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDefault","id":"2:45575","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:277":{"id":"0:277","crate_id":0,"name":null,"span":{"filename":"compiler/rustc_lint_defs/src/lib.rs","begin":[50,33],"end":[50,43]},"visibility":"crate","docs":null,"links":{},"attrs":["#[automatically_derived]","#[allow(unused_qualifications)]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["gt","le","lt","ge"],"trait":{"kind":"resolved_path","inner":{"name":"PartialOrd","id":"2:2702","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Level","id":"0:260","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Level","id":"0:260","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:278"],"negative":false,"synthetic":false,"blanket_impl":null}},"1:5476":{"id":"1:5476","crate_id":1,"name":"OpenOptionsExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5477","1:5478"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementors":[]}},"b:2:2943-0:454":{"id":"b:2:2943-0:454","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}},{"name":"U","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:2917","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"TryInto","id":"2:2913","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"LintBuffer","id":"0:454","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:2946","2:2947"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"5:537":{"id":"5:537","crate_id":5,"name":"ToOwned","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:538","5:539","5:540"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementors":[]}},"0:374":{"id":"0:374","crate_id":0,"name":"4","span":{"filename":"compiler/rustc_lint_defs/src/lib.rs","begin":[292,52],"end":[292,58]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"struct_field","inner":{"kind":"resolved_path","inner":{"name":"String","id":"5:7602","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}},"2:3014":{"id":"2:3014","crate_id":2,"name":"Copy","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2625","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementors":[]}},"0:355":{"id":"0:355","crate_id":0,"name":"BareTraitObject","span":{"filename":"compiler/rustc_lint_defs/src/lib.rs","begin":[288,4],"end":[288,47]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"tuple","variant_inner":[{"kind":"resolved_path","inner":{"name":"Span","id":"22:2708","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},{"kind":"primitive","inner":"bool"}]}},"0:348":{"id":"0:348","crate_id":0,"name":"eq","span":{"filename":"compiler/rustc_lint_defs/src/lib.rs","begin":[277,9],"end":[277,18]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"ExternDepSpec","id":"0:339","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:403":{"id":"0:403","crate_id":0,"name":"PatternsInFnsWithoutBody","span":{"filename":"compiler/rustc_lint_defs/src/lib.rs","begin":[300,4],"end":[300,41]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"tuple","variant_inner":[{"kind":"resolved_path","inner":{"name":"Span","id":"22:2708","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},{"kind":"resolved_path","inner":{"name":"Ident","id":"22:4113","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}]}},"a:2:8324-0:260":{"id":"a:2:8324-0:260","crate_id":0,"name":null,"span":{"filename":"compiler/rustc_lint_defs/src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"UnwindSafe","id":"2:8324","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Level","id":"0:260","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:223":{"id":"0:223","crate_id":0,"name":"TEXT_DIRECTION_CODEPOINT_IN_COMMENT","span":{"filename":"compiler/rustc_lint_defs/src/builtin.rs","begin":[3523,0],"end":[3549,1]},"visibility":"public","docs":"The `text_direction_codepoint_in_comment` lint detects Unicode codepoints in comments that\nchange the visual representation of text on screen in a way that does not correspond to\ntheir on memory representation.\n\n### Example\n\n```rust,compile_fail\n#![deny(text_direction_codepoint_in_comment)]\nfn main() {\n    println!(\"{:?}\"); // '‮');\n}\n```\n\n{{produces}}\n\n### Explanation\n\nUnicode allows changing the visual flow of text on screen in order to support scripts that\nare written right-to-left, but a specially crafted comment can make code that will be\ncompiled appear to be part of a comment, depending on the software used to read the code.\nTo avoid potential problems or confusion, such as in CVE-2021-42574, by default we deny\ntheir use.","links":{},"attrs":[],"deprecation":null,"kind":"static","inner":{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"$crate::Lint","id":"0:292","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"mutable":false,"expr":"&crate::Lint{name: \"TEXT_DIRECTION_CODEPOINT_IN_COMMENT\",\n             default_level: crate::Deny,\n             desc: \"invisible directionality-changing codepoints in comment\",\n             edition_lint_opts: None,\n             is_plugin: false, ..crate::Lint::default_fields_for_macro()}"}},"0:219":{"id":"0:219","crate_id":0,"name":"RUST_2021_PREFIXES_INCOMPATIBLE_SYNTAX","span":{"filename":"compiler/rustc_lint_defs/src/builtin.rs","begin":[3354,0],"end":[3390,1]},"visibility":"public","docs":"The `rust_2021_prefixes_incompatible_syntax` lint detects identifiers that will be parsed as a\nprefix instead in Rust 2021.\n\n### Example\n\n```rust,edition2018,compile_fail\n#![deny(rust_2021_prefixes_incompatible_syntax)]\n\nmacro_rules! m {\n    (z $x:expr) => ();\n}\n\nm!(z\"hey\");\n```\n\n{{produces}}\n\n### Explanation\n\nIn Rust 2015 and 2018, `z\"hey\"` is two tokens: the identifier `z`\nfollowed by the string literal `\"hey\"`. In Rust 2021, the `z` is\nconsidered a prefix for `\"hey\"`.\n\nThis lint suggests to add whitespace between the `z` and `\"hey\"` tokens\nto keep them separated in Rust 2021.","links":{},"attrs":["#[allow(rustdoc :: invalid_rust_codeblocks)]"],"deprecation":null,"kind":"static","inner":{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"$crate::Lint","id":"0:292","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"mutable":false,"expr":"&crate::Lint{name: \"RUST_2021_PREFIXES_INCOMPATIBLE_SYNTAX\",\n             default_level: crate::Allow,\n             desc: \"identifiers that will be parsed as a prefix in Rust 2021\",\n             edition_lint_opts: None,\n             is_plugin: false,\n             crate_level_only: true,\n             future_incompatible:\n                 Some(crate::FutureIncompatibleInfo{reference:\n                                                        \"<https://doc.rust-lang.org/nightly/edition-guide/rust-2021/reserving-syntax.html>\",\n                                                    reason:\n                                                        FutureIncompatibilityReason::EditionError(Edition::Edition2021),\n                                                                                                                           ..crate::FutureIncompatibleInfo::default_fields_for_macro()}),\n                                                                                                                                                                                            ..crate::Lint::default_fields_for_macro()}"}},"0:153":{"id":"0:153","crate_id":0,"name":"DEPRECATED","span":{"filename":"compiler/rustc_lint_defs/src/builtin.rs","begin":[1395,0],"end":[1423,1]},"visibility":"public","docs":"The `deprecated` lint detects use of deprecated items.\n\n### Example\n\n```rust\n#[deprecated]\nfn foo() {}\n\nfn bar() {\n    foo();\n}\n```\n\n{{produces}}\n\n### Explanation\n\nItems may be marked \"deprecated\" with the [`deprecated` attribute] to\nindicate that they should no longer be used. Usually the attribute\nshould include a note on what to use instead, or check the\ndocumentation.\n\n[`deprecated` attribute]: https://doc.rust-lang.org/reference/attributes/diagnostics.html#the-deprecated-attribute","links":{},"attrs":[],"deprecation":null,"kind":"static","inner":{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"$crate::Lint","id":"0:292","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"mutable":false,"expr":"&crate::Lint{name: \"DEPRECATED\",\n             default_level: crate::Warn,\n             desc: \"detects use of deprecated items\",\n             edition_lint_opts: None,\n             is_plugin: false,\n             report_in_external_macro:\n                 true, ..crate::Lint::default_fields_for_macro()}"}},"0:421":{"id":"0:421","crate_id":0,"name":"ReservedPrefix","span":{"filename":"compiler/rustc_lint_defs/src/lib.rs","begin":[305,4],"end":[305,24]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"tuple","variant_inner":[{"kind":"resolved_path","inner":{"name":"Span","id":"22:2708","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}]}},"b:2:2609-0:352":{"id":"b:2:2609-0:352","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3009","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Borrow","id":"2:2603","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"BuiltinLintDiagnostics","id":"0:352","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:2611"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:12324":{"id":"2:12324","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\nBasic usage:\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"1:15260"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"const_str_len\", since = \"1.39.0\")]","#[must_use]","#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":["const"],"abi":"\"Rust\"","has_body":true}},"0:242":{"id":"0:242","crate_id":0,"name":null,"span":{"filename":"compiler/rustc_lint_defs/src/lib.rs","begin":[26,40],"end":[26,44]},"visibility":"crate","docs":null,"links":{},"attrs":["#[automatically_derived]","#[allow(unused_qualifications)]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["hash_slice"],"trait":{"kind":"resolved_path","inner":{"name":"Hash","id":"2:9560","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Applicability","id":"0:225","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:243"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:388":{"id":"0:388","crate_id":0,"name":"DeprecatedMacro","span":{"filename":"compiler/rustc_lint_defs/src/lib.rs","begin":[296,4],"end":[296,41]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"tuple","variant_inner":[{"kind":"resolved_path","inner":{"name":"Option","id":"2:43419","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Symbol","id":"22:4154","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},{"kind":"resolved_path","inner":{"name":"Span","id":"22:2708","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}]}},"0:450":{"id":"0:450","crate_id":0,"name":null,"span":{"filename":"compiler/rustc_lint_defs/src/lib.rs","begin":[314,9],"end":[314,18]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"StructuralPartialEq","id":"2:3012","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"BufferedEarlyLint","id":"0:444","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:161":{"id":"0:161","crate_id":0,"name":"BARE_TRAIT_OBJECTS","span":{"filename":"compiler/rustc_lint_defs/src/builtin.rs","begin":[1622,0],"end":[1652,1]},"visibility":"public","docs":"The `bare_trait_objects` lint suggests using `dyn Trait` for trait\nobjects.\n\n### Example\n\n```rust,edition2018\ntrait Trait { }\n\nfn takes_trait_object(_: Box<Trait>) {\n}\n```\n\n{{produces}}\n\n### Explanation\n\nWithout the `dyn` indicator, it can be ambiguous or confusing when\nreading code as to whether or not you are looking at a trait object.\nThe `dyn` keyword makes it explicit, and adds a symmetry to contrast\nwith [`impl Trait`].\n\n[`impl Trait`]: https://doc.rust-lang.org/book/ch10-02-traits.html#traits-as-parameters","links":{},"attrs":[],"deprecation":null,"kind":"static","inner":{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"$crate::Lint","id":"0:292","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"mutable":false,"expr":"&crate::Lint{name: \"BARE_TRAIT_OBJECTS\",\n             default_level: crate::Warn,\n             desc: \"suggest using `dyn Trait` for trait objects\",\n             edition_lint_opts: None,\n             is_plugin: false,\n             future_incompatible:\n                 Some(crate::FutureIncompatibleInfo{reference:\n                                                        \"<https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>\",\n                                                    reason:\n                                                        FutureIncompatibilityReason::EditionError(Edition::Edition2021),\n                                                                                                                           ..crate::FutureIncompatibleInfo::default_fields_for_macro()}),\n                                                                                                                                                                                            ..crate::Lint::default_fields_for_macro()}"}},"0:312":{"id":"0:312","crate_id":0,"name":null,"span":{"filename":"compiler/rustc_lint_defs/src/lib.rs","begin":[143,15],"end":[143,20]},"visibility":"crate","docs":null,"links":{},"attrs":["#[automatically_derived]","#[allow(unused_qualifications)]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2625","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"FutureIncompatibleInfo","id":"0:307","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:313"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:2982":{"id":"2:2982","crate_id":2,"name":"Default","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2983"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementors":[]}},"0:150":{"id":"0:150","crate_id":0,"name":"LATE_BOUND_LIFETIME_ARGUMENTS","span":{"filename":"compiler/rustc_lint_defs/src/builtin.rs","begin":[1280,0],"end":[1319,1]},"visibility":"public","docs":"The `late_bound_lifetime_arguments` lint detects generic lifetime\narguments in path segments with late bound lifetime parameters.\n\n### Example\n\n```rust\nstruct S;\n\nimpl S {\n    fn late<'a, 'b>(self, _: &'a u8, _: &'b u8) {}\n}\n\nfn main() {\n    S.late::<'static>(&0, &0);\n}\n```\n\n{{produces}}\n\n### Explanation\n\nIt is not clear how to provide arguments for early-bound lifetime\nparameters if they are intermixed with late-bound parameters in the\nsame list. For now, providing any explicit arguments will trigger this\nlint if late-bound parameters are present, so in the future a solution\ncan be adopted without hitting backward compatibility issues. This is\na [future-incompatible] lint to transition this to a hard error in the\nfuture. See [issue #42868] for more details, along with a description\nof the difference between early and late-bound parameters.\n\n[issue #42868]: https://github.com/rust-lang/rust/issues/42868\n[future-incompatible]: ../index.md#future-incompatible-lints","links":{},"attrs":[],"deprecation":null,"kind":"static","inner":{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"$crate::Lint","id":"0:292","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"mutable":false,"expr":"&crate::Lint{name: \"LATE_BOUND_LIFETIME_ARGUMENTS\",\n             default_level: crate::Warn,\n             desc:\n                 \"detects generic lifetime arguments in path segments with late bound lifetime parameters\",\n             edition_lint_opts: None,\n             is_plugin: false,\n             future_incompatible:\n                 Some(crate::FutureIncompatibleInfo{reference:\n                                                        \"issue #42868 <https://github.com/rust-lang/rust/issues/42868>\",\n                                                                                                                           ..crate::FutureIncompatibleInfo::default_fields_for_macro()}),\n                                                                                                                                                                                            ..crate::Lint::default_fields_for_macro()}"}},"0:297":{"id":"0:297","crate_id":0,"name":"report_in_external_macro","span":{"filename":"compiler/rustc_lint_defs/src/lib.rs","begin":[130,4],"end":[130,38]},"visibility":"public","docs":"`true` if this lint is reported even inside expansions of external macros.","links":{},"attrs":[],"deprecation":null,"kind":"struct_field","inner":{"kind":"primitive","inner":"bool"}},"0:424":{"id":"0:424","crate_id":0,"name":"TrailingMacro","span":{"filename":"compiler/rustc_lint_defs/src/lib.rs","begin":[306,4],"end":[306,30]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"tuple","variant_inner":[{"kind":"primitive","inner":"bool"},{"kind":"resolved_path","inner":{"name":"Ident","id":"22:4113","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}]}},"5:5156":{"id":"5:5156","crate_id":5,"name":"Join","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:5158","5:5159"],"generics":{"params":[{"name":"Separator","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[]},"bounds":[],"implementors":[]}},"0:238":{"id":"0:238","crate_id":0,"name":"fmt","span":{"filename":"compiler/rustc_lint_defs/src/lib.rs","begin":[26,22],"end":[26,27]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Formatter","id":"2:9315","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Result","id":"2:9304","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:402":{"id":"0:402","crate_id":0,"name":"invoc_span","span":{"filename":"compiler/rustc_lint_defs/src/lib.rs","begin":[299,68],"end":[299,84]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"struct_field","inner":{"kind":"resolved_path","inner":{"name":"Span","id":"22:2708","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}},"0:443":{"id":"0:443","crate_id":0,"name":"fmt","span":{"filename":"compiler/rustc_lint_defs/src/lib.rs","begin":[285,20],"end":[285,25]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Formatter","id":"2:9315","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Result","id":"2:9304","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:420":{"id":"0:420","crate_id":0,"name":"1","span":{"filename":"compiler/rustc_lint_defs/src/lib.rs","begin":[304,31],"end":[304,37]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"struct_field","inner":{"kind":"resolved_path","inner":{"name":"String","id":"5:7602","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}},"a:2:3016-0:205":{"id":"a:2:3016-0:205","crate_id":0,"name":null,"span":{"filename":"compiler/rustc_lint_defs/src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Sync","id":"2:3016","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"UnusedDocComment","id":"0:205","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:96":{"id":"0:96","crate_id":0,"name":null,"span":{"filename":"compiler/rustc_lint_defs/src/lib.rs","begin":[338,0],"end":[383,1]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"LintBuffer","id":"0:454","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:97","0:98","0:99","0:100","0:102"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:76":{"id":"0:76","crate_id":0,"name":"default_level","span":{"filename":"compiler/rustc_lint_defs/src/lib.rs","begin":[214,4],"end":[219,5]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["edition",{"kind":"resolved_path","inner":{"name":"Edition","id":"22:1818","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}]],"output":{"kind":"resolved_path","inner":{"name":"Level","id":"0:260","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"1:5526":{"id":"1:5526","crate_id":1,"name":"DirEntryExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5527"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementors":[]}},"0:228":{"id":"0:228","crate_id":0,"name":"MaybeIncorrect","span":{"filename":"compiler/rustc_lint_defs/src/lib.rs","begin":[38,4],"end":[38,18]},"visibility":"default","docs":"The suggestion may be what the user intended, but it is uncertain. The suggestion should\nresult in valid Rust code if it is applied.","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"0:220":{"id":"0:220","crate_id":0,"name":"UNSUPPORTED_CALLING_CONVENTIONS","span":{"filename":"compiler/rustc_lint_defs/src/builtin.rs","begin":[3392,0],"end":[3436,1]},"visibility":"public","docs":"The `unsupported_calling_conventions` lint is output whenever there is a use of the\n`stdcall`, `fastcall`, `thiscall`, `vectorcall` calling conventions (or their unwind\nvariants) on targets that cannot meaningfully be supported for the requested target.\n\nFor example `stdcall` does not make much sense for a x86_64 or, more apparently, powerpc\ncode, because this calling convention was never specified for those targets.\n\nHistorically MSVC toolchains have fallen back to the regular C calling convention for\ntargets other than x86, but Rust doesn't really see a similar need to introduce a similar\nhack across many more targets.\n\n### Example\n\n```rust,ignore (needs specific targets)\nextern \"stdcall\" fn stdcall() {}\n```\n\nThis will produce:\n\n```text\nwarning: use of calling convention not supported on this target\n  --> $DIR/unsupported.rs:39:1\n   |\nLL | extern \"stdcall\" fn stdcall() {}\n   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |\n   = note: `#[warn(unsupported_calling_conventions)]` on by default\n   = warning: this was previously accepted by the compiler but is being phased out;\n              it will become a hard error in a future release!\n   = note: for more information, see issue ...\n```\n\n### Explanation\n\nOn most of the targets the behaviour of `stdcall` and similar calling conventions is not\ndefined at all, but was previously accepted due to a bug in the implementation of the\ncompiler.","links":{},"attrs":[],"deprecation":null,"kind":"static","inner":{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"$crate::Lint","id":"0:292","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"mutable":false,"expr":"&crate::Lint{name: \"UNSUPPORTED_CALLING_CONVENTIONS\",\n             default_level: crate::Warn,\n             desc: \"use of unsupported calling convention\",\n             edition_lint_opts: None,\n             is_plugin: false,\n             future_incompatible:\n                 Some(crate::FutureIncompatibleInfo{reference:\n                                                        \"issue #87678 <https://github.com/rust-lang/rust/issues/87678>\",\n                                                                                                                           ..crate::FutureIncompatibleInfo::default_fields_for_macro()}),\n                                                                                                                                                                                            ..crate::Lint::default_fields_for_macro()}"}},"2:3158":{"id":"2:3158","crate_id":2,"name":"BitOrAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3160"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"}}}}],"where_predicates":[]},"bounds":[],"implementors":[]}},"2:12398":{"id":"2:12398","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"2:11957","prim@char":"1:15260","str::matches":"1:15265","`DoubleEndedIterator`":"2:7470"},"attrs":["#[stable(feature = \"str_matches\", since = \"1.2.0\")]","#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatches","id":"2:45489","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:11967","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}},{"bound_predicate":{"ty":{"kind":"qualified_path","inner":{"name":"Searcher","self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:11967","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:11982","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"header":[],"abi":"\"Rust\"","has_body":true}},"2:9369":{"id":"2:9369","crate_id":2,"name":"UpperHex","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:9370"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementors":[]}},"0:307":{"id":"0:307","crate_id":0,"name":"FutureIncompatibleInfo","span":{"filename":"compiler/rustc_lint_defs/src/lib.rs","begin":[144,0],"end":[155,1]},"visibility":"public","docs":"Extra information for a future incompatibility lint.","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"struct_type":"plain","generics":{"params":[],"where_predicates":[]},"fields_stripped":false,"fields":["0:308","0:309","0:310"],"impls":["0:71","a:2:3004-0:307","a:2:3016-0:307","a:2:3045-0:307","a:2:8324-0:307","a:2:8325-0:307","b:2:2937-0:307","b:2:2933-0:307","b:5:541-0:307","b:2:2948-0:307","b:2:2943-0:307","b:2:2609-0:307","b:2:2612-0:307","b:2:3667-0:307","0:312","0:311","0:314"]}},"0:426":{"id":"0:426","crate_id":0,"name":"0","span":{"filename":"compiler/rustc_lint_defs/src/lib.rs","begin":[306,18],"end":[306,22]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"struct_field","inner":{"kind":"primitive","inner":"bool"}},"0:455":{"id":"0:455","crate_id":0,"name":"map","span":{"filename":"compiler/rustc_lint_defs/src/lib.rs","begin":[335,4],"end":[335,44]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"struct_field","inner":{"kind":"resolved_path","inner":{"name":"NodeMap","id":"21:6529","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Vec","id":"5:7062","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"BufferedEarlyLint","id":"0:444","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}}},"0:336":{"id":"0:336","crate_id":0,"name":null,"span":{"filename":"compiler/rustc_lint_defs/src/lib.rs","begin":[223,16],"end":[223,20]},"visibility":"crate","docs":null,"links":{},"attrs":["#[automatically_derived]","#[allow(unused_qualifications)]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Copy","id":"2:3014","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"LintId","id":"0:332","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"2:3106":{"id":"2:3106","crate_id":2,"name":"SubAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3108"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"}}}}],"where_predicates":[]},"bounds":[],"implementors":[]}},"2:12325":{"id":"2:12325","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"const_str_is_empty\", since = \"1.39.0\")]","#[must_use]","#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":["const"],"abi":"\"Rust\"","has_body":true}},"a:2:3016-0:352":{"id":"a:2:3016-0:352","crate_id":0,"name":null,"span":{"filename":"compiler/rustc_lint_defs/src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Sync","id":"2:3016","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"BuiltinLintDiagnostics","id":"0:352","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}},"a:2:3016-0:444":{"id":"a:2:3016-0:444","crate_id":0,"name":null,"span":{"filename":"compiler/rustc_lint_defs/src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Sync","id":"2:3016","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"BufferedEarlyLint","id":"0:444","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}},"2:2614":{"id":"2:2614","crate_id":2,"name":"borrow_mut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:74":{"id":"0:74","crate_id":0,"name":"default_fields_for_macro","span":{"filename":"compiler/rustc_lint_defs/src/lib.rs","begin":[195,4],"end":[207,5]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":["const"],"abi":"\"Rust\"","has_body":true}},"0:296":{"id":"0:296","crate_id":0,"name":"edition_lint_opts","span":{"filename":"compiler/rustc_lint_defs/src/lib.rs","begin":[127,4],"end":[127,51]},"visibility":"public","docs":"Starting at the given edition, default to the given lint level. If this is `None`, then use\n`default_level`.","links":{},"attrs":[],"deprecation":null,"kind":"struct_field","inner":{"kind":"resolved_path","inner":{"name":"Option","id":"2:43419","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"resolved_path","inner":{"name":"Edition","id":"22:1818","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},{"kind":"resolved_path","inner":{"name":"Level","id":"0:260","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}]}}],"bindings":[]}},"param_names":[]}}},"2:12337":{"id":"2:12337","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":["#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]","#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","self_type":{"kind":"generic","inner":"I"},"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:9929","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:9929","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"header":["unsafe"],"abi":"\"Rust\"","has_body":true}},"0:407":{"id":"0:407","crate_id":0,"name":"LegacyDeriveHelpers","span":{"filename":"compiler/rustc_lint_defs/src/lib.rs","begin":[301,4],"end":[301,29]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"tuple","variant_inner":[{"kind":"resolved_path","inner":{"name":"Span","id":"22:2708","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}]}},"0:446":{"id":"0:446","crate_id":0,"name":"msg","span":{"filename":"compiler/rustc_lint_defs/src/lib.rs","begin":[320,4],"end":[320,19]},"visibility":"public","docs":"The lint message.","links":{},"attrs":[],"deprecation":null,"kind":"struct_field","inner":{"kind":"resolved_path","inner":{"name":"String","id":"5:7602","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}},"0:255":{"id":"0:255","crate_id":0,"name":null,"span":{"filename":"compiler/rustc_lint_defs/src/lib.rs","begin":[26,57],"end":[26,66]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"__D","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"::rustc_serialize::Decoder","id":"33:290","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Decodable","id":"33:356","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"__D"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Applicability","id":"0:225","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:257"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:92":{"id":"0:92","crate_id":0,"name":null,"span":{"filename":"compiler/rustc_lint_defs/src/lib.rs","begin":[267,0],"end":[274,1]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"HCX","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"ToStableHashKey","id":"29:1836","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"HCX"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"LintId","id":"0:332","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:94","0:95"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:132":{"id":"0:132","crate_id":0,"name":"OVERLAPPING_RANGE_ENDPOINTS","span":{"filename":"compiler/rustc_lint_defs/src/builtin.rs","begin":[643,0],"end":[669,1]},"visibility":"public","docs":"The `overlapping_range_endpoints` lint detects `match` arms that have [range patterns] that\noverlap on their endpoints.\n\n[range patterns]: https://doc.rust-lang.org/nightly/reference/patterns.html#range-patterns\n\n### Example\n\n```rust\nlet x = 123u8;\nmatch x {\n    0..=100 => { println!(\"small\"); }\n    100..=255 => { println!(\"large\"); }\n}\n```\n\n{{produces}}\n\n### Explanation\n\nIt is likely a mistake to have range patterns in a match expression that overlap in this\nway. Check that the beginning and end values are what you expect, and keep in mind that\nwith `..=` the left and right bounds are inclusive.","links":{},"attrs":[],"deprecation":null,"kind":"static","inner":{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"$crate::Lint","id":"0:292","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"mutable":false,"expr":"&crate::Lint{name: \"OVERLAPPING_RANGE_ENDPOINTS\",\n             default_level: crate::Warn,\n             desc: \"detects range patterns with overlapping endpoints\",\n             edition_lint_opts: None,\n             is_plugin: false, ..crate::Lint::default_fields_for_macro()}"}},"2:2625":{"id":"2:2625","crate_id":2,"name":"Clone","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2626","2:2627"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementors":[]}},"0:406":{"id":"0:406","crate_id":0,"name":"1","span":{"filename":"compiler/rustc_lint_defs/src/lib.rs","begin":[300,35],"end":[300,40]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"struct_field","inner":{"kind":"resolved_path","inner":{"name":"Ident","id":"22:4113","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}},"0:194":{"id":"0:194","crate_id":0,"name":"HardwiredLints","span":{"filename":"compiler/rustc_lint_defs/src/builtin.rs","begin":[2963,0],"end":[3059,1]},"visibility":"public","docs":"Does nothing as a lint pass, but registers some `Lint`s\nthat are used by other parts of the compiler.","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"struct_type":"unit","generics":{"params":[],"where_predicates":[]},"fields_stripped":false,"fields":[],"impls":["0:201","a:2:3004-0:194","a:2:3016-0:194","a:2:3045-0:194","a:2:8324-0:194","a:2:8325-0:194","b:2:2937-0:194","b:2:2933-0:194","b:5:541-0:194","b:2:2948-0:194","b:2:2943-0:194","b:2:2609-0:194","b:2:2612-0:194","b:2:3667-0:194","0:199","0:197","0:196"]}},"b:2:2943-0:194":{"id":"b:2:2943-0:194","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}},{"name":"U","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:2917","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"TryInto","id":"2:2913","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"HardwiredLints","id":"0:194","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:2946","2:2947"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:7422":{"id":"2:7422","crate_id":2,"name":"FromIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:7424"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[]},"bounds":[],"implementors":[]}},"1:6605":{"id":"1:6605","crate_id":1,"name":"IntoRawFd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6606"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementors":[]}},"0:64":{"id":"0:64","crate_id":0,"name":"pluralize","span":{"filename":"compiler/rustc_lint_defs/src/lib.rs","begin":[15,0],"end":[19,1]},"visibility":"public","docs":null,"links":{},"attrs":["#[macro_export]"],"deprecation":null,"kind":"macro","inner":"macro_rules! pluralize {\n    ($x : expr) => { ... };\n}"},"0:358":{"id":"0:358","crate_id":0,"name":"1","span":{"filename":"compiler/rustc_lint_defs/src/lib.rs","begin":[288,42],"end":[288,46]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"struct_field","inner":{"kind":"primitive","inner":"bool"}},"0:275":{"id":"0:275","crate_id":0,"name":null,"span":{"filename":"compiler/rustc_lint_defs/src/lib.rs","begin":[50,22],"end":[50,31]},"visibility":"crate","docs":null,"links":{},"attrs":["#[automatically_derived]","#[allow(unused_qualifications)]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"kind":"resolved_path","inner":{"name":"PartialEq","id":"2:2655","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Level","id":"0:260","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Level","id":"0:260","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:276"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:2947":{"id":"2:2947","crate_id":2,"name":"try_into","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:43545","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}},{"type":{"kind":"qualified_path","inner":{"name":"Error","self_type":{"kind":"generic","inner":"U"},"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:2917","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"2:3013":{"id":"2:3013","crate_id":2,"name":"StructuralEq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementors":[]}},"2:12409":{"id":"2:12409","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\nassert_eq!(\"Hello\\tworld\\t\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[inline]","#[must_use =\n  \"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"trim_direction\", since = \"1.30.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:236":{"id":"0:236","crate_id":0,"name":"clone","span":{"filename":"compiler/rustc_lint_defs/src/lib.rs","begin":[26,15],"end":[26,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Applicability","id":"0:225","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:181":{"id":"0:181","crate_id":0,"name":"BAD_ASM_STYLE","span":{"filename":"compiler/rustc_lint_defs/src/builtin.rs","begin":[2467,0],"end":[2511,1]},"visibility":"public","docs":"The `bad_asm_style` lint detects the use of the `.intel_syntax` and\n`.att_syntax` directives.\n\n### Example\n\n```rust,ignore (fails on system llvm)\n#![feature(asm)]\n\nfn main() {\n    #[cfg(target_arch=\"x86_64\")]\n    unsafe {\n        asm!(\n            \".att_syntax\",\n            \"movl {0}, {0}\", in(reg) 0usize\n        );\n    }\n}\n```\n\nThis will produce:\n\n```text\n warning: avoid using `.att_syntax`, prefer using `options(att_syntax)` instead\n --> test.rs:7:14\n  |\n7 |             \".att_syntax\",\n  |              ^^^^^^^^^^^\n8 |             \"movq {0}, {0}\", out(reg) _,\n9 |         );\n  |         - help: add option: `, options(att_syntax)`\n  |\n  = note: `#[warn(bad_asm_style)]` on by default\n```\n\n### Explanation\n\nOn x86, `asm!` uses the intel assembly syntax by default. While this\ncan be switched using assembler directives like `.att_syntax`, using the\n`att_syntax` option is recommended instead because it will also properly\nprefix register placeholders with `%` as required by AT&T syntax.","links":{},"attrs":[],"deprecation":null,"kind":"static","inner":{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"$crate::Lint","id":"0:292","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"mutable":false,"expr":"&crate::Lint{name: \"BAD_ASM_STYLE\",\n             default_level: crate::Warn,\n             desc: \"incorrect use of inline assembly\",\n             edition_lint_opts: None,\n             is_plugin: false, ..crate::Lint::default_fields_for_macro()}"}},"0:180":{"id":"0:180","crate_id":0,"name":"ASM_SUB_REGISTER","span":{"filename":"compiler/rustc_lint_defs/src/builtin.rs","begin":[2416,0],"end":[2465,1]},"visibility":"public","docs":"The `asm_sub_register` lint detects using only a subset of a register\nfor inline asm inputs.\n\n### Example\n\n```rust,ignore (fails on system llvm)\n#![feature(asm)]\n\nfn main() {\n    #[cfg(target_arch=\"x86_64\")]\n    unsafe {\n        asm!(\"mov {0}, {0}\", in(reg) 0i16);\n    }\n}\n```\n\nThis will produce:\n\n```text\nwarning: formatting may not be suitable for sub-register argument\n --> src/main.rs:6:19\n  |\n6 |         asm!(\"mov {0}, {0}\", in(reg) 0i16);\n  |                   ^^^  ^^^           ---- for this argument\n  |\n  = note: `#[warn(asm_sub_register)]` on by default\n  = help: use the `x` modifier to have the register formatted as `ax`\n  = help: or use the `r` modifier to keep the default formatting of `rax`\n```\n\n### Explanation\n\nRegisters on some architectures can use different names to refer to a\nsubset of the register. By default, the compiler will use the name for\nthe full register size. To explicitly use a subset of the register,\nyou can override the default by using a modifier on the template\nstring operand to specify when subregister to use. This lint is issued\nif you pass in a value with a smaller data type than the default\nregister size, to alert you of possibly using the incorrect width. To\nfix this, add the suggested modifier to the template, or cast the\nvalue to the correct size.\n\nSee [register template modifiers] for more details.\n\n[register template modifiers]: https://doc.rust-lang.org/nightly/unstable-book/library-features/asm.html#register-template-modifiers","links":{},"attrs":[],"deprecation":null,"kind":"static","inner":{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"$crate::Lint","id":"0:292","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"mutable":false,"expr":"&crate::Lint{name: \"ASM_SUB_REGISTER\",\n             default_level: crate::Warn,\n             desc: \"using only a subset of a register for inline asm inputs\",\n             edition_lint_opts: None,\n             is_plugin: false, ..crate::Lint::default_fields_for_macro()}"}},"b:2:2612-0:307":{"id":"b:2:2612-0:307","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3009","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"BorrowMut","id":"2:2606","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"FutureIncompatibleInfo","id":"0:307","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:2614"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:123":{"id":"0:123","crate_id":0,"name":"UNUSED_CRATE_DEPENDENCIES","span":{"filename":"compiler/rustc_lint_defs/src/builtin.rs","begin":[393,0],"end":[440,1]},"visibility":"public","docs":"The `unused_crate_dependencies` lint detects crate dependencies that\nare never used.\n\n### Example\n\n```rust,ignore (needs extern crate)\n#![deny(unused_crate_dependencies)]\n```\n\nThis will produce:\n\n```text\nerror: external crate `regex` unused in `lint_example`: remove the dependency or add `use regex as _;`\n  |\nnote: the lint level is defined here\n --> src/lib.rs:1:9\n  |\n1 | #![deny(unused_crate_dependencies)]\n  |         ^^^^^^^^^^^^^^^^^^^^^^^^^\n```\n\n### Explanation\n\nAfter removing the code that uses a dependency, this usually also\nrequires removing the dependency from the build configuration.\nHowever, sometimes that step can be missed, which leads to time wasted\nbuilding dependencies that are no longer used. This lint can be\nenabled to detect dependencies that are never used (more specifically,\nany dependency passed with the `--extern` command-line flag that is\nnever referenced via [`use`], [`extern crate`], or in any [path]).\n\nThis lint is \"allow\" by default because it can provide false positives\ndepending on how the build system is configured. For example, when\nusing Cargo, a \"package\" consists of multiple crates (such as a\nlibrary and a binary), but the dependencies are defined for the\npackage as a whole. If there is a dependency that is only used in the\nbinary, but not the library, then the lint will be incorrectly issued\nin the library.\n\n[path]: https://doc.rust-lang.org/reference/paths.html\n[`use`]: https://doc.rust-lang.org/reference/items/use-declarations.html\n[`extern crate`]: https://doc.rust-lang.org/reference/items/extern-crates.html","links":{},"attrs":[],"deprecation":null,"kind":"static","inner":{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"$crate::Lint","id":"0:292","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"mutable":false,"expr":"&crate::Lint{name: \"UNUSED_CRATE_DEPENDENCIES\",\n             default_level: crate::Allow,\n             desc: \"crate dependencies that are never used\",\n             edition_lint_opts: None,\n             is_plugin: false,\n             crate_level_only:\n                 true, ..crate::Lint::default_fields_for_macro()}"}},"0:377":{"id":"0:377","crate_id":0,"name":"0","span":{"filename":"compiler/rustc_lint_defs/src/lib.rs","begin":[293,22],"end":[293,26]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"struct_field","inner":{"kind":"resolved_path","inner":{"name":"Span","id":"22:2708","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}},"a:2:3004-0:225":{"id":"a:2:3004-0:225","crate_id":0,"name":null,"span":{"filename":"compiler/rustc_lint_defs/src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Send","id":"2:3004","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Applicability","id":"0:225","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"a:2:8325-0:260":{"id":"a:2:8325-0:260","crate_id":0,"name":null,"span":{"filename":"compiler/rustc_lint_defs/src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"RefUnwindSafe","id":"2:8325","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Level","id":"0:260","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"b:2:2948-0:316":{"id":"b:2:2948-0:316","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}},{"name":"U","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:2907","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:2917","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"FutureIncompatibilityReason","id":"0:316","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:2951","2:2952"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:284":{"id":"0:284","crate_id":0,"name":null,"span":{"filename":"compiler/rustc_lint_defs/src/lib.rs","begin":[50,54],"end":[50,59]},"visibility":"crate","docs":null,"links":{},"attrs":["#[automatically_derived]","#[allow(unused_qualifications)]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Debug","id":"2:9354","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Level","id":"0:260","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:285"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:189":{"id":"0:189","crate_id":0,"name":"UNSUPPORTED_NAKED_FUNCTIONS","span":{"filename":"compiler/rustc_lint_defs/src/builtin.rs","begin":[2766,0],"end":[2810,1]},"visibility":"public","docs":"The `unsupported_naked_functions` lint detects naked function\ndefinitions that are unsupported but were previously accepted.\n\n### Example\n\n```rust\n#![feature(naked_functions)]\n\n#[naked]\npub extern \"C\" fn f() -> u32 {\n    42\n}\n```\n\n{{produces}}\n\n### Explanation\n\nThe naked functions must be defined using a single inline assembly\nblock.\n\nThe execution must never fall through past the end of the assembly\ncode so the block must use `noreturn` option. The asm block can also\nuse `att_syntax` option, but other options are not allowed.\n\nThe asm block must not contain any operands other than `const` and\n`sym`. Additionally, naked function should specify a non-Rust ABI.\n\nNaked functions cannot be inlined. All forms of the `inline` attribute\nare prohibited.\n\nWhile other definitions of naked functions were previously accepted,\nthey are unsupported and might not work reliably. This is a\n[future-incompatible] lint that will transition into hard error in\nthe future.\n\n[future-incompatible]: ../index.md#future-incompatible-lints","links":{},"attrs":[],"deprecation":null,"kind":"static","inner":{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"$crate::Lint","id":"0:292","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"mutable":false,"expr":"&crate::Lint{name: \"UNSUPPORTED_NAKED_FUNCTIONS\",\n             default_level: crate::Warn,\n             desc: \"unsupported naked function definitions\",\n             edition_lint_opts: None,\n             is_plugin: false,\n             future_incompatible:\n                 Some(crate::FutureIncompatibleInfo{reference:\n                                                        \"issue #32408 <https://github.com/rust-lang/rust/issues/32408>\",\n                                                                                                                           ..crate::FutureIncompatibleInfo::default_fields_for_macro()}),\n                                                                                                                                                                                            ..crate::Lint::default_fields_for_macro()}"}},"0:350":{"id":"0:350","crate_id":0,"name":null,"span":{"filename":"compiler/rustc_lint_defs/src/lib.rs","begin":[277,20],"end":[277,25]},"visibility":"crate","docs":null,"links":{},"attrs":["#[automatically_derived]","#[allow(unused_qualifications)]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Debug","id":"2:9354","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ExternDepSpec","id":"0:339","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:351"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:438":{"id":"0:438","crate_id":0,"name":null,"span":{"filename":"compiler/rustc_lint_defs/src/lib.rs","begin":[285,9],"end":[285,18]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"StructuralPartialEq","id":"2:3012","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"BuiltinLintDiagnostics","id":"0:352","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"2:13091":{"id":"2:13091","crate_id":2,"name":"Allocator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:13092","2:13093","2:13094","2:13095","2:13096","2:13097","2:13098"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementors":[]}},"0:313":{"id":"0:313","crate_id":0,"name":"clone","span":{"filename":"compiler/rustc_lint_defs/src/lib.rs","begin":[143,15],"end":[143,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"FutureIncompatibleInfo","id":"0:307","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"b:2:2943-0:307":{"id":"b:2:2943-0:307","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}},{"name":"U","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:2917","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"TryInto","id":"2:2913","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"FutureIncompatibleInfo","id":"0:307","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:2946","2:2947"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:2839":{"id":"2:2839","crate_id":2,"name":"FloatToInt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"Int","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:2838","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementors":[]}},"b:2:2943-0:225":{"id":"b:2:2943-0:225","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}},{"name":"U","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:2917","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"TryInto","id":"2:2913","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Applicability","id":"0:225","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:2946","2:2947"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:2609-0:444":{"id":"b:2:2609-0:444","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3009","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Borrow","id":"2:2603","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"BufferedEarlyLint","id":"0:444","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:2611"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:148":{"id":"0:148","crate_id":0,"name":"PATTERNS_IN_FNS_WITHOUT_BODY","span":{"filename":"compiler/rustc_lint_defs/src/builtin.rs","begin":[1185,0],"end":[1235,1]},"visibility":"public","docs":"The `patterns_in_fns_without_body` lint detects `mut` identifier\npatterns as a parameter in functions without a body.\n\n### Example\n\n```rust,compile_fail\ntrait Trait {\n    fn foo(mut arg: u8);\n}\n```\n\n{{produces}}\n\n### Explanation\n\nTo fix this, remove `mut` from the parameter in the trait definition;\nit can be used in the implementation. That is, the following is OK:\n\n```rust\ntrait Trait {\n    fn foo(arg: u8); // Removed `mut` here\n}\n\nimpl Trait for i32 {\n    fn foo(mut arg: u8) { // `mut` here is OK\n\n    }\n}\n```\n\nTrait definitions can define functions without a body to specify a\nfunction that implementors must define. The parameter names in the\nbody-less functions are only allowed to be `_` or an [identifier] for\ndocumentation purposes (only the type is relevant). Previous versions\nof the compiler erroneously allowed [identifier patterns] with the\n`mut` keyword, but this was not intended to be allowed. This is a\n[future-incompatible] lint to transition this to a hard error in the\nfuture. See [issue #35203] for more details.\n\n[identifier]: https://doc.rust-lang.org/reference/identifiers.html\n[identifier patterns]: https://doc.rust-lang.org/reference/patterns.html#identifier-patterns\n[issue #35203]: https://github.com/rust-lang/rust/issues/35203\n[future-incompatible]: ../index.md#future-incompatible-lints","links":{},"attrs":[],"deprecation":null,"kind":"static","inner":{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"$crate::Lint","id":"0:292","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"mutable":false,"expr":"&crate::Lint{name: \"PATTERNS_IN_FNS_WITHOUT_BODY\",\n             default_level: crate::Deny,\n             desc:\n                 \"patterns in functions without body were erroneously allowed\",\n             edition_lint_opts: None,\n             is_plugin: false,\n             future_incompatible:\n                 Some(crate::FutureIncompatibleInfo{reference:\n                                                        \"issue #35203 <https://github.com/rust-lang/rust/issues/35203>\",\n                                                                                                                           ..crate::FutureIncompatibleInfo::default_fields_for_macro()}),\n                                                                                                                                                                                            ..crate::Lint::default_fields_for_macro()}"}},"2:11415":{"id":"2:11415","crate_id":2,"name":"SlicePattern","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:11416","2:11417"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementors":[]}},"0:125":{"id":"0:125","crate_id":0,"name":"UNKNOWN_LINTS","span":{"filename":"compiler/rustc_lint_defs/src/builtin.rs","begin":[476,0],"end":[496,1]},"visibility":"public","docs":"The `unknown_lints` lint detects unrecognized lint attribute.\n\n### Example\n\n```rust\n#![allow(not_a_real_lint)]\n```\n\n{{produces}}\n\n### Explanation\n\nIt is usually a mistake to specify a lint that does not exist. Check\nthe spelling, and check the lint listing for the correct name. Also\nconsider if you are using an old version of the compiler, and the lint\nis only available in a newer version.","links":{},"attrs":[],"deprecation":null,"kind":"static","inner":{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"$crate::Lint","id":"0:292","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"mutable":false,"expr":"&crate::Lint{name: \"UNKNOWN_LINTS\",\n             default_level: crate::Warn,\n             desc: \"unrecognized lint attribute\",\n             edition_lint_opts: None,\n             is_plugin: false, ..crate::Lint::default_fields_for_macro()}"}},"0:152":{"id":"0:152","crate_id":0,"name":"COHERENCE_LEAK_CHECK","span":{"filename":"compiler/rustc_lint_defs/src/builtin.rs","begin":[1356,0],"end":[1393,1]},"visibility":"public","docs":"The `coherence_leak_check` lint detects conflicting implementations of\na trait that are only distinguished by the old leak-check code.\n\n### Example\n\n```rust\ntrait SomeTrait { }\nimpl SomeTrait for for<'a> fn(&'a u8) { }\nimpl<'a> SomeTrait for fn(&'a u8) { }\n```\n\n{{produces}}\n\n### Explanation\n\nIn the past, the compiler would accept trait implementations for\nidentical functions that differed only in where the lifetime binder\nappeared. Due to a change in the borrow checker implementation to fix\nseveral bugs, this is no longer allowed. However, since this affects\nexisting code, this is a [future-incompatible] lint to transition this\nto a hard error in the future.\n\nCode relying on this pattern should introduce \"[newtypes]\",\nlike `struct Foo(for<'a> fn(&'a u8))`.\n\nSee [issue #56105] for more details.\n\n[issue #56105]: https://github.com/rust-lang/rust/issues/56105\n[newtypes]: https://doc.rust-lang.org/book/ch19-04-advanced-types.html#using-the-newtype-pattern-for-type-safety-and-abstraction\n[future-incompatible]: ../index.md#future-incompatible-lints","links":{},"attrs":[],"deprecation":null,"kind":"static","inner":{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"$crate::Lint","id":"0:292","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"mutable":false,"expr":"&crate::Lint{name: \"COHERENCE_LEAK_CHECK\",\n             default_level: crate::Warn,\n             desc: \"distinct impls distinguished only by the leak-check code\",\n             edition_lint_opts: None,\n             is_plugin: false,\n             future_incompatible:\n                 Some(crate::FutureIncompatibleInfo{reference:\n                                                        \"issue #56105 <https://github.com/rust-lang/rust/issues/56105>\",\n                                                                                                                           ..crate::FutureIncompatibleInfo::default_fields_for_macro()}),\n                                                                                                                                                                                            ..crate::Lint::default_fields_for_macro()}"}},"a:2:3045-0:194":{"id":"a:2:3045-0:194","crate_id":0,"name":null,"span":{"filename":"compiler/rustc_lint_defs/src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Unpin","id":"2:3045","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"HardwiredLints","id":"0:194","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:309":{"id":"0:309","crate_id":0,"name":"reason","span":{"filename":"compiler/rustc_lint_defs/src/lib.rs","begin":[149,4],"end":[149,43]},"visibility":"public","docs":"The reason for the lint used by diagnostics to provide\nthe right help message","links":{},"attrs":[],"deprecation":null,"kind":"struct_field","inner":{"kind":"resolved_path","inner":{"name":"FutureIncompatibilityReason","id":"0:316","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}},"0:183":{"id":"0:183","crate_id":0,"name":"CENUM_IMPL_DROP_CAST","span":{"filename":"compiler/rustc_lint_defs/src/builtin.rs","begin":[2560,0],"end":[2609,1]},"visibility":"public","docs":"The `cenum_impl_drop_cast` lint detects an `as` cast of a field-less\n`enum` that implements [`Drop`].\n\n[`Drop`]: https://doc.rust-lang.org/std/ops/trait.Drop.html\n\n### Example\n\n```rust\n# #![allow(unused)]\nenum E {\n    A,\n}\n\nimpl Drop for E {\n    fn drop(&mut self) {\n        println!(\"Drop\");\n    }\n}\n\nfn main() {\n    let e = E::A;\n    let i = e as u32;\n}\n```\n\n{{produces}}\n\n### Explanation\n\nCasting a field-less `enum` that does not implement [`Copy`] to an\ninteger moves the value without calling `drop`. This can result in\nsurprising behavior if it was expected that `drop` should be called.\nCalling `drop` automatically would be inconsistent with other move\noperations. Since neither behavior is clear or consistent, it was\ndecided that a cast of this nature will no longer be allowed.\n\nThis is a [future-incompatible] lint to transition this to a hard error\nin the future. See [issue #73333] for more details.\n\n[future-incompatible]: ../index.md#future-incompatible-lints\n[issue #73333]: https://github.com/rust-lang/rust/issues/73333\n[`Copy`]: https://doc.rust-lang.org/std/marker/trait.Copy.html","links":{},"attrs":[],"deprecation":null,"kind":"static","inner":{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"$crate::Lint","id":"0:292","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"mutable":false,"expr":"&crate::Lint{name: \"CENUM_IMPL_DROP_CAST\",\n             default_level: crate::Warn,\n             desc: \"a C-like enum implementing Drop is cast\",\n             edition_lint_opts: None,\n             is_plugin: false,\n             future_incompatible:\n                 Some(crate::FutureIncompatibleInfo{reference:\n                                                        \"issue #73333 <https://github.com/rust-lang/rust/issues/73333>\",\n                                                                                                                           ..crate::FutureIncompatibleInfo::default_fields_for_macro()}),\n                                                                                                                                                                                            ..crate::Lint::default_fields_for_macro()}"}},"2:12441":{"id":"2:12441","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":["#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]","#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"tuple","inner":[]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"b:2:2937-0:307":{"id":"b:2:2937-0:307","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"From","id":"2:2910","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"FutureIncompatibleInfo","id":"0:307","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:2939"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:3110":{"id":"2:3110","crate_id":2,"name":"MulAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3112"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"}}}}],"where_predicates":[]},"bounds":[],"implementors":[]}},"2:2655":{"id":"2:2655","crate_id":2,"name":"PartialEq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2657","2:2658"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"}}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"Rhs"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3009","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}]}}]},"bounds":[],"implementors":[]}},"33:353":{"id":"33:353","crate_id":33,"name":"Encodable","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["33:355"],"generics":{"params":[{"name":"S","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"S"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Encoder","id":"33:239","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"bounds":[],"implementors":[]}},"2:3449":{"id":"2:3449","crate_id":2,"name":"FromResidual","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3451"],"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":{"kind":"qualified_path","inner":{"name":"Residual","self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"Try","id":"2:3444","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}}}}],"where_predicates":[]},"bounds":[],"implementors":[]}},"2:11894":{"id":"2:11894","crate_id":2,"name":"FromStr","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:11895","2:11896"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementors":[]}},"0:364":{"id":"0:364","crate_id":0,"name":"0","span":{"filename":"compiler/rustc_lint_defs/src/lib.rs","begin":[290,38],"end":[290,42]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"struct_field","inner":{"kind":"resolved_path","inner":{"name":"Span","id":"22:2708","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}},"0:234":{"id":"0:234","crate_id":0,"name":null,"span":{"filename":"compiler/rustc_lint_defs/src/lib.rs","begin":[26,9],"end":[26,13]},"visibility":"crate","docs":null,"links":{},"attrs":["#[automatically_derived]","#[allow(unused_qualifications)]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Copy","id":"2:3014","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Applicability","id":"0:225","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"2:12438":{"id":"2:12438","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]","#[must_use]","#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"1:6603":{"id":"1:6603","crate_id":1,"name":"FromRawFd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6604"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementors":[]}},"5:5152":{"id":"5:5152","crate_id":5,"name":"Concat","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:5154","5:5155"],"generics":{"params":[{"name":"Item","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"Item"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3009","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}]}}]},"bounds":[],"implementors":[]}},"0:146":{"id":"0:146","crate_id":0,"name":"UNALIGNED_REFERENCES","span":{"filename":"compiler/rustc_lint_defs/src/builtin.rs","begin":[1071,0],"end":[1115,1]},"visibility":"public","docs":"The `unaligned_references` lint detects unaligned references to fields\nof [packed] structs.\n\n[packed]: https://doc.rust-lang.org/reference/type-layout.html#the-alignment-modifiers\n\n### Example\n\n```rust,compile_fail\n#![deny(unaligned_references)]\n\n#[repr(packed)]\npub struct Foo {\n    field1: u64,\n    field2: u8,\n}\n\nfn main() {\n    unsafe {\n        let foo = Foo { field1: 0, field2: 0 };\n        let _ = &foo.field1;\n        println!(\"{}\", foo.field1); // An implicit `&` is added here, triggering the lint.\n    }\n}\n```\n\n{{produces}}\n\n### Explanation\n\nCreating a reference to an insufficiently aligned packed field is [undefined behavior] and\nshould be disallowed. Using an `unsafe` block does not change anything about this. Instead,\nthe code should do a copy of the data in the packed field or use raw pointers and unaligned\naccesses. See [issue #82523] for more information.\n\n[undefined behavior]: https://doc.rust-lang.org/reference/behavior-considered-undefined.html\n[issue #82523]: https://github.com/rust-lang/rust/issues/82523","links":{},"attrs":[],"deprecation":null,"kind":"static","inner":{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"$crate::Lint","id":"0:292","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"mutable":false,"expr":"&crate::Lint{name: \"UNALIGNED_REFERENCES\",\n             default_level: crate::Warn,\n             desc: \"detects unaligned references to fields of packed structs\",\n             edition_lint_opts: None,\n             is_plugin: false,\n             report_in_external_macro: true,\n             future_incompatible:\n                 Some(crate::FutureIncompatibleInfo{reference:\n                                                        \"issue #82523 <https://github.com/rust-lang/rust/issues/82523>\",\n                                                                                                                           ..crate::FutureIncompatibleInfo::default_fields_for_macro()}),\n                                                                                                                                                                                            ..crate::Lint::default_fields_for_macro()}"}},"0:351":{"id":"0:351","crate_id":0,"name":"fmt","span":{"filename":"compiler/rustc_lint_defs/src/lib.rs","begin":[277,20],"end":[277,25]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Formatter","id":"2:9315","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Result","id":"2:9304","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"2:3162":{"id":"2:3162","crate_id":2,"name":"BitXorAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3164"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"}}}}],"where_predicates":[]},"bounds":[],"implementors":[]}},"1:5388":{"id":"1:5388","crate_id":1,"name":"OsStringExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5389","1:5390"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10173","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementors":[]}},"0:217":{"id":"0:217","crate_id":0,"name":"RUST_2021_INCOMPATIBLE_OR_PATTERNS","span":{"filename":"compiler/rustc_lint_defs/src/builtin.rs","begin":[3266,0],"end":[3303,1]},"visibility":"public","docs":"The `rust_2021_incompatible_or_patterns` lint detects usage of old versions of or-patterns.\n\n### Example\n\n```rust,compile_fail\n#![deny(rust_2021_incompatible_or_patterns)]\n\nmacro_rules! match_any {\n    ( $expr:expr , $( $( $pat:pat )|+ => $expr_arm:expr ),+ ) => {\n        match $expr {\n            $(\n                $( $pat => $expr_arm, )+\n            )+\n        }\n    };\n}\n\nfn main() {\n    let result: Result<i64, i32> = Err(42);\n    let int: i64 = match_any!(result, Ok(i) | Err(i) => i.into());\n    assert_eq!(int, 42);\n}\n```\n\n{{produces}}\n\n### Explanation\n\nIn Rust 2021, the `pat` matcher will match additional patterns, which include the `|` character.","links":{},"attrs":[],"deprecation":null,"kind":"static","inner":{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"$crate::Lint","id":"0:292","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"mutable":false,"expr":"&crate::Lint{name: \"RUST_2021_INCOMPATIBLE_OR_PATTERNS\",\n             default_level: crate::Allow,\n             desc: \"detects usage of old versions of or-patterns\",\n             edition_lint_opts: None,\n             is_plugin: false,\n             future_incompatible:\n                 Some(crate::FutureIncompatibleInfo{reference:\n                                                        \"<https://doc.rust-lang.org/nightly/edition-guide/rust-2021/or-patterns-macro-rules.html>\",\n                                                    reason:\n                                                        FutureIncompatibilityReason::EditionError(Edition::Edition2021),\n                                                                                                                           ..crate::FutureIncompatibleInfo::default_fields_for_macro()}),\n                                                                                                                                                                                            ..crate::Lint::default_fields_for_macro()}"}},"0:145":{"id":"0:145","crate_id":0,"name":"RENAMED_AND_REMOVED_LINTS","span":{"filename":"compiler/rustc_lint_defs/src/builtin.rs","begin":[1049,0],"end":[1069,1]},"visibility":"public","docs":"The `renamed_and_removed_lints` lint detects lints that have been\nrenamed or removed.\n\n### Example\n\n```rust\n#![deny(raw_pointer_derive)]\n```\n\n{{produces}}\n\n### Explanation\n\nTo fix this, either remove the lint or use the new name. This can help\navoid confusion about lints that are no longer valid, and help\nmaintain consistency for renamed lints.","links":{},"attrs":[],"deprecation":null,"kind":"static","inner":{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"$crate::Lint","id":"0:292","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"mutable":false,"expr":"&crate::Lint{name: \"RENAMED_AND_REMOVED_LINTS\",\n             default_level: crate::Warn,\n             desc: \"lints that have been renamed or removed\",\n             edition_lint_opts: None,\n             is_plugin: false, ..crate::Lint::default_fields_for_macro()}"}},"b:2:2943-0:292":{"id":"b:2:2943-0:292","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}},{"name":"U","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:2917","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"TryInto","id":"2:2913","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Lint","id":"0:292","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:2946","2:2947"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"29:1833":{"id":"29:1833","crate_id":29,"name":"HashStable","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["29:1835"],"generics":{"params":[{"name":"CTX","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[]},"bounds":[],"implementors":[]}},"2:12415":{"id":"2:12415","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"self::pattern":"2:11957","prim@char":"1:15260"},"attrs":["#[must_use =\n  \"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:11967","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}},{"bound_predicate":{"ty":{"kind":"qualified_path","inner":{"name":"Searcher","self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:11967","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"DoubleEndedSearcher","id":"2:11987","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:416":{"id":"0:416","crate_id":0,"name":"0","span":{"filename":"compiler/rustc_lint_defs/src/lib.rs","begin":[303,24],"end":[303,30]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"struct_field","inner":{"kind":"resolved_path","inner":{"name":"String","id":"5:7602","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}},"5:5422":{"id":"5:5422","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"1:15265"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]","#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]","#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7602","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:89":{"id":"0:89","crate_id":0,"name":null,"span":{"filename":"compiler/rustc_lint_defs/src/lib.rs","begin":[260,0],"end":[265,1]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"HCX","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"HashStable","id":"29:1833","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"HCX"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"LintId","id":"0:332","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:91"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:239":{"id":"0:239","crate_id":0,"name":null,"span":{"filename":"compiler/rustc_lint_defs/src/lib.rs","begin":[26,29],"end":[26,38]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"StructuralPartialEq","id":"2:3012","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Applicability","id":"0:225","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"2:9367":{"id":"2:9367","crate_id":2,"name":"LowerHex","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:9368"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementors":[]}},"0:126":{"id":"0:126","crate_id":0,"name":"UNUSED_VARIABLES","span":{"filename":"compiler/rustc_lint_defs/src/builtin.rs","begin":[498,0],"end":[518,1]},"visibility":"public","docs":"The `unused_variables` lint detects variables which are not used in\nany way.\n\n### Example\n\n```rust\nlet x = 5;\n```\n\n{{produces}}\n\n### Explanation\n\nUnused variables may signal a mistake or unfinished code. To silence\nthe warning for the individual variable, prefix it with an underscore\nsuch as `_x`.","links":{},"attrs":[],"deprecation":null,"kind":"static","inner":{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"$crate::Lint","id":"0:292","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"mutable":false,"expr":"&crate::Lint{name: \"UNUSED_VARIABLES\",\n             default_level: crate::Warn,\n             desc: \"detect variables which are not used in any way\",\n             edition_lint_opts: None,\n             is_plugin: false, ..crate::Lint::default_fields_for_macro()}"}},"0:246":{"id":"0:246","crate_id":0,"name":null,"span":{"filename":"compiler/rustc_lint_defs/src/lib.rs","begin":[26,46],"end":[26,55]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"__E","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"::rustc_serialize::Encoder","id":"33:239","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Encodable","id":"33:353","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"__E"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Applicability","id":"0:225","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:248"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:193":{"id":"0:193","crate_id":0,"name":"LARGE_ASSIGNMENTS","span":{"filename":"compiler/rustc_lint_defs/src/builtin.rs","begin":[2930,0],"end":[2961,1]},"visibility":"public","docs":"The `large_assignments` lint detects when objects of large\ntypes are being moved around.\n\n### Example\n\n```rust,ignore (can crash on some platforms)\nlet x = [0; 50000];\nlet y = x;\n```\n\nproduces:\n\n```text\nwarning: moving a large value\n  --> $DIR/move-large.rs:1:3\n  let y = x;\n          - Copied large value here\n```\n\n### Explanation\n\nWhen using a large type in a plain assignment or in a function\nargument, idiomatic code can be inefficient.\nIdeally appropriate optimizations would resolve this, but such\noptimizations are only done in a best-effort manner.\nThis lint will trigger on all sites of large moves and thus allow the\nuser to resolve them in code.","links":{},"attrs":[],"deprecation":null,"kind":"static","inner":{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"$crate::Lint","id":"0:292","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"mutable":false,"expr":"&crate::Lint{name: \"LARGE_ASSIGNMENTS\",\n             default_level: crate::Warn,\n             desc: \"detects large moves or copies\",\n             edition_lint_opts: None,\n             is_plugin: false, ..crate::Lint::default_fields_for_macro()}"}},"0:203":{"id":"0:203","crate_id":0,"name":"UNUSED_DOC_COMMENTS","span":{"filename":"compiler/rustc_lint_defs/src/builtin.rs","begin":[3061,0],"end":[3082,1]},"visibility":"public","docs":"The `unused_doc_comments` lint detects doc comments that aren't used\nby `rustdoc`.\n\n### Example\n\n```rust\n/// docs for x\nlet x = 12;\n```\n\n{{produces}}\n\n### Explanation\n\n`rustdoc` does not use doc comments in all positions, and so the doc\ncomment will be ignored. Try changing it to a normal comment with `//`\nto avoid the warning.","links":{},"attrs":[],"deprecation":null,"kind":"static","inner":{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"$crate::Lint","id":"0:292","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"mutable":false,"expr":"&crate::Lint{name: \"UNUSED_DOC_COMMENTS\",\n             default_level: crate::Warn,\n             desc: \"detects doc comments that aren\\'t used by rustdoc\",\n             edition_lint_opts: None,\n             is_plugin: false, ..crate::Lint::default_fields_for_macro()}"}},"b:2:2948-0:307":{"id":"b:2:2948-0:307","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}},{"name":"U","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:2907","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:2917","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"FutureIncompatibleInfo","id":"0:307","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:2951","2:2952"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:83":{"id":"0:83","crate_id":0,"name":"hash","span":{"filename":"compiler/rustc_lint_defs/src/lib.rs","begin":[238,4],"end":[241,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["state",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"H"}}}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"H","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"std::hash::Hasher","id":"2:9570","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null}}}],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"1:858":{"id":"1:858","crate_id":1,"name":"AsciiExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:859","1:860","1:861","1:862","1:863","1:864","1:865"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementors":[]}},"2:12445":{"id":"2:12445","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{}\", c);\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"1:15260"},"attrs":["#[must_use =\n  \"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"str_escape\", since = \"1.34.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeUnicode","id":"2:45584","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"2:3248":{"id":"2:3248","crate_id":2,"name":"FnOnce","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3250","2:3251"],"generics":{"params":[{"name":"Args","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[]},"bounds":[],"implementors":[]}},"b:5:541-0:307":{"id":"b:5:541-0:307","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2625","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"provided_trait_methods":["clone_into"],"trait":{"kind":"resolved_path","inner":{"name":"ToOwned","id":"5:537","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"FutureIncompatibleInfo","id":"0:307","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["5:543","5:544","5:545"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:436":{"id":"0:436","crate_id":0,"name":"0","span":{"filename":"compiler/rustc_lint_defs/src/lib.rs","begin":[309,20],"end":[309,24]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"struct_field","inner":{"kind":"resolved_path","inner":{"name":"Span","id":"22:2708","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}},"a:2:3045-0:205":{"id":"a:2:3045-0:205","crate_id":0,"name":null,"span":{"filename":"compiler/rustc_lint_defs/src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Unpin","id":"2:3045","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"UnusedDocComment","id":"0:205","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"b:2:2933-0:316":{"id":"b:2:2933-0:316","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}},{"name":"U","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"From","id":"2:2910","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:2907","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"FutureIncompatibilityReason","id":"0:316","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:2936"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"a:2:8325-0:292":{"id":"a:2:8325-0:292","crate_id":0,"name":null,"span":{"filename":"compiler/rustc_lint_defs/src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"RefUnwindSafe","id":"2:8325","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Lint","id":"0:292","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:12424":{"id":"2:12424","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"self::pattern":"2:11957","prim@char":"1:15260"},"attrs":["#[must_use =\n  \"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"str_strip\", since = \"1.45.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["suffix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:43419","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:11967","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}},{"bound_predicate":{"ty":{"kind":"qualified_path","inner":{"name":"Searcher","self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:11967","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:11982","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:340":{"id":"0:340","crate_id":0,"name":"Json","span":{"filename":"compiler/rustc_lint_defs/src/lib.rs","begin":[279,4],"end":[279,14]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"tuple","variant_inner":[{"kind":"resolved_path","inner":{"name":"Json","id":"33:1659","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}]}},"a:2:8325-0:454":{"id":"a:2:8325-0:454","crate_id":0,"name":null,"span":{"filename":"compiler/rustc_lint_defs/src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"RefUnwindSafe","id":"2:8325","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"LintBuffer","id":"0:454","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:303":{"id":"0:303","crate_id":0,"name":null,"span":{"filename":"compiler/rustc_lint_defs/src/lib.rs","begin":[97,15],"end":[97,20]},"visibility":"crate","docs":null,"links":{},"attrs":["#[automatically_derived]","#[allow(unused_qualifications)]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2625","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Lint","id":"0:292","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:304"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:188":{"id":"0:188","crate_id":0,"name":"UNDEFINED_NAKED_FUNCTION_ABI","span":{"filename":"compiler/rustc_lint_defs/src/builtin.rs","begin":[2734,0],"end":[2764,1]},"visibility":"public","docs":"The `undefined_naked_function_abi` lint detects naked function definitions that\neither do not specify an ABI or specify the Rust ABI.\n\n### Example\n\n```rust\n#![feature(naked_functions)]\n#![feature(asm)]\n\n#[naked]\npub fn default_abi() -> u32 {\n    unsafe { asm!(\"\", options(noreturn)); }\n}\n\n#[naked]\npub extern \"Rust\" fn rust_abi() -> u32 {\n    unsafe { asm!(\"\", options(noreturn)); }\n}\n```\n\n{{produces}}\n\n### Explanation\n\nThe Rust ABI is currently undefined. Therefore, naked functions should\nspecify a non-Rust ABI.","links":{},"attrs":[],"deprecation":null,"kind":"static","inner":{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"$crate::Lint","id":"0:292","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"mutable":false,"expr":"&crate::Lint{name: \"UNDEFINED_NAKED_FUNCTION_ABI\",\n             default_level: crate::Warn,\n             desc: \"undefined naked function ABI\",\n             edition_lint_opts: None,\n             is_plugin: false, ..crate::Lint::default_fields_for_macro()}"}},"0:177":{"id":"0:177","crate_id":0,"name":"MUTABLE_BORROW_RESERVATION_CONFLICT","span":{"filename":"compiler/rustc_lint_defs/src/builtin.rs","begin":[2312,0],"end":[2340,1]},"visibility":"public","docs":"The `mutable_borrow_reservation_conflict` lint detects the reservation\nof a two-phased borrow that conflicts with other shared borrows.\n\n### Example\n\n```rust\nlet mut v = vec![0, 1, 2];\nlet shared = &v;\nv.push(shared.len());\n```\n\n{{produces}}\n\n### Explanation\n\nThis is a [future-incompatible] lint to transition this to a hard error\nin the future. See [issue #59159] for a complete description of the\nproblem, and some possible solutions.\n\n[issue #59159]: https://github.com/rust-lang/rust/issues/59159\n[future-incompatible]: ../index.md#future-incompatible-lints","links":{},"attrs":[],"deprecation":null,"kind":"static","inner":{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"$crate::Lint","id":"0:292","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"mutable":false,"expr":"&crate::Lint{name: \"MUTABLE_BORROW_RESERVATION_CONFLICT\",\n             default_level: crate::Warn,\n             desc:\n                 \"reservation of a two-phased borrow conflicts with other shared borrows\",\n             edition_lint_opts: None,\n             is_plugin: false,\n             future_incompatible:\n                 Some(crate::FutureIncompatibleInfo{reference:\n                                                        \"issue #59159 <https://github.com/rust-lang/rust/issues/59159>\",\n                                                                                                                           ..crate::FutureIncompatibleInfo::default_fields_for_macro()}),\n                                                                                                                                                                                            ..crate::Lint::default_fields_for_macro()}"}},"2:12333":{"id":"2:12333","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:43419"},"attrs":["#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]","#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:43419","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","self_type":{"kind":"generic","inner":"I"},"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:9929","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}}}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:9929","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"header":[],"abi":"\"Rust\"","has_body":true}},"2:12439":{"id":"2:12439","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]","#[must_use]","#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"a:2:3045-0:225":{"id":"a:2:3045-0:225","crate_id":0,"name":null,"span":{"filename":"compiler/rustc_lint_defs/src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Unpin","id":"2:3045","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Applicability","id":"0:225","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:12377":{"id":"2:12377","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"prim@char":"1:15260","str::split":"1:15265","self::pattern":"2:11957","`DoubleEndedIterator`":"2:7470","str::rsplit_terminator":"1:15265"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitTerminator","id":"2:45317","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:11967","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"header":[],"abi":"\"Rust\"","has_body":true}},"2:12401":{"id":"2:12401","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"`DoubleEndedIterator`":"2:7470","prim@char":"1:15260","self::pattern":"2:11957","str::rmatch_indices":"1:15265"},"attrs":["#[stable(feature = \"str_match_indices\", since = \"1.5.0\")]","#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"MatchIndices","id":"2:45417","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:11967","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"header":[],"abi":"\"Rust\"","has_body":true}},"2:3171":{"id":"2:3171","crate_id":2,"name":"ShrAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3173"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"}}}}],"where_predicates":[]},"bounds":[],"implementors":[]}},"0:107":{"id":"0:107","crate_id":0,"name":"LintArray","span":{"filename":"compiler/rustc_lint_defs/src/lib.rs","begin":[525,0],"end":[525,40]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"typedef","inner":{"type":{"kind":"resolved_path","inner":{"name":"Vec","id":"5:7062","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'static","mutable":false,"type":{"kind":"resolved_path","inner":{"name":"Lint","id":"0:292","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}},"generics":{"params":[],"where_predicates":[]}}},"b:5:541-0:205":{"id":"b:5:541-0:205","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2625","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"provided_trait_methods":["clone_into"],"trait":{"kind":"resolved_path","inner":{"name":"ToOwned","id":"5:537","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"UnusedDocComment","id":"0:205","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["5:543","5:544","5:545"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:199":{"id":"0:199","crate_id":0,"name":null,"span":{"filename":"compiler/rustc_lint_defs/src/builtin.rs","begin":[2963,0],"end":[3059,1]},"visibility":{"restricted":{"parent":"0:47","path":"::builtin"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"LintPass","id":"0:108","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"HardwiredLints","id":"0:194","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:200"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:9560":{"id":"2:9560","crate_id":2,"name":"Hash","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:9561","2:9563"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementors":[]}},"b:2:3667-0:194":{"id":"b:2:3667-0:194","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3009","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Any","id":"2:3665","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"HardwiredLints","id":"0:194","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3669"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:12440":{"id":"2:12440","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":["#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]","#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"tuple","inner":[]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:141":{"id":"0:141","crate_id":0,"name":"PRIVATE_IN_PUBLIC","span":{"filename":"compiler/rustc_lint_defs/src/builtin.rs","begin":[903,0],"end":[939,1]},"visibility":"public","docs":"The `private_in_public` lint detects private items in public\ninterfaces not caught by the old implementation.\n\n### Example\n\n```rust\n# #![allow(unused)]\nstruct SemiPriv;\n\nmod m1 {\n    struct Priv;\n    impl super::SemiPriv {\n        pub fn f(_: Priv) {}\n    }\n}\n# fn main() {}\n```\n\n{{produces}}\n\n### Explanation\n\nThe visibility rules are intended to prevent exposing private items in\npublic interfaces. This is a [future-incompatible] lint to transition\nthis to a hard error in the future. See [issue #34537] for more\ndetails.\n\n[issue #34537]: https://github.com/rust-lang/rust/issues/34537\n[future-incompatible]: ../index.md#future-incompatible-lints","links":{},"attrs":[],"deprecation":null,"kind":"static","inner":{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"$crate::Lint","id":"0:292","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"mutable":false,"expr":"&crate::Lint{name: \"PRIVATE_IN_PUBLIC\",\n             default_level: crate::Warn,\n             desc:\n                 \"detect private items in public interfaces not caught by the old implementation\",\n             edition_lint_opts: None,\n             is_plugin: false,\n             future_incompatible:\n                 Some(crate::FutureIncompatibleInfo{reference:\n                                                        \"issue #34537 <https://github.com/rust-lang/rust/issues/34537>\",\n                                                                                                                           ..crate::FutureIncompatibleInfo::default_fields_for_macro()}),\n                                                                                                                                                                                            ..crate::Lint::default_fields_for_macro()}"}},"2:12339":{"id":"2:12339","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"1:15265","crate::ops::Index":"2:3300","str::slice_mut_unchecked":"1:15265"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_deprecated(since = \"1.29.0\", reason =\n                   \"use `get_unchecked(begin..end)` instead\")]","#[must_use]","#[inline]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":["unsafe"],"abi":"\"Rust\"","has_body":true}},"a:2:3045-0:352":{"id":"a:2:3045-0:352","crate_id":0,"name":null,"span":{"filename":"compiler/rustc_lint_defs/src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Unpin","id":"2:3045","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"BuiltinLintDiagnostics","id":"0:352","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"b:2:3667-0:307":{"id":"b:2:3667-0:307","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3009","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Any","id":"2:3665","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"FutureIncompatibleInfo","id":"0:307","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3669"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:12354":{"id":"2:12354","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"prim@char":"1:15260","self::pattern":"2:11957"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:11967","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:431":{"id":"0:431","crate_id":0,"name":"NamedAsmLabel","span":{"filename":"compiler/rustc_lint_defs/src/lib.rs","begin":[308,4],"end":[308,25]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"tuple","variant_inner":[{"kind":"resolved_path","inner":{"name":"String","id":"5:7602","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}]}},"b:5:541-0:225":{"id":"b:5:541-0:225","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2625","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"provided_trait_methods":["clone_into"],"trait":{"kind":"resolved_path","inner":{"name":"ToOwned","id":"5:537","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Applicability","id":"0:225","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["5:543","5:544","5:545"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:8324":{"id":"2:8324","crate_id":2,"name":"UnwindSafe","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementors":[]}},"0:271":{"id":"0:271","crate_id":0,"name":null,"span":{"filename":"compiler/rustc_lint_defs/src/lib.rs","begin":[50,9],"end":[50,14]},"visibility":"crate","docs":null,"links":{},"attrs":["#[automatically_derived]","#[allow(unused_qualifications)]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2625","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Level","id":"0:260","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:272"],"negative":false,"synthetic":false,"blanket_impl":null}},"a:2:3004-0:205":{"id":"a:2:3004-0:205","crate_id":0,"name":null,"span":{"filename":"compiler/rustc_lint_defs/src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Send","id":"2:3004","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"UnusedDocComment","id":"0:205","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:12348":{"id":"2:12348","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are ended with either a newline (`\\n`) or a carriage return with\na line feed (`\\r\\n`).\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\n\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line ending isn't required:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Lines","id":"2:45521","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"b:2:2943-0:444":{"id":"b:2:2943-0:444","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}},{"name":"U","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:2917","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"TryInto","id":"2:2913","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"BufferedEarlyLint","id":"0:444","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:2946","2:2947"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:12344":{"id":"2:12344","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the last character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:15260"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"CharIndices","id":"2:45243","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:86":{"id":"0:86","crate_id":0,"name":"of","span":{"filename":"compiler/rustc_lint_defs/src/lib.rs","begin":[246,4],"end":[248,5]},"visibility":"public","docs":"Gets the `LintId` for a `Lint`.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["lint",{"kind":"borrowed_ref","inner":{"lifetime":"'static","mutable":false,"type":{"kind":"resolved_path","inner":{"name":"Lint","id":"0:292","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"LintId","id":"0:332","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"2:12433":{"id":"2:12433","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:15260","self::pattern":"2:11957"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_deprecated(since = \"1.33.0\", reason =\n                   \"superseded by `trim_end_matches`\", suggestion =\n                   \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:11967","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}},{"bound_predicate":{"ty":{"kind":"qualified_path","inner":{"name":"Searcher","self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:11967","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:11982","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:118":{"id":"0:118","crate_id":0,"name":"UNCONDITIONAL_PANIC","span":{"filename":"compiler/rustc_lint_defs/src/builtin.rs","begin":[242,0],"end":[264,1]},"visibility":"public","docs":"The `unconditional_panic` lint detects an operation that will cause a\npanic at runtime.\n\n### Example\n\n```rust,compile_fail\n# #![allow(unused)]\nlet x = 1 / 0;\n```\n\n{{produces}}\n\n### Explanation\n\nThis lint detects code that is very likely incorrect because it will\nalways panic, such as division by zero and out-of-bounds array\naccesses. Consider adjusting your code if this is a bug, or using the\n`panic!` or `unreachable!` macro instead in case the panic is intended.","links":{},"attrs":[],"deprecation":null,"kind":"static","inner":{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"$crate::Lint","id":"0:292","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"mutable":false,"expr":"&crate::Lint{name: \"UNCONDITIONAL_PANIC\",\n             default_level: crate::Deny,\n             desc: \"operation will cause a panic at runtime\",\n             edition_lint_opts: None,\n             is_plugin: false, ..crate::Lint::default_fields_for_macro()}"}},"0:276":{"id":"0:276","crate_id":0,"name":"eq","span":{"filename":"compiler/rustc_lint_defs/src/lib.rs","begin":[50,22],"end":[50,31]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"Level","id":"0:260","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"b:2:2937-0:454":{"id":"b:2:2937-0:454","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"From","id":"2:2910","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"LintBuffer","id":"0:454","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:2939"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:2917":{"id":"2:2917","crate_id":2,"name":"TryFrom","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2919","2:2920"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[]},"bounds":[],"implementors":[]}},"2:9929":{"id":"2:9929","crate_id":2,"name":"SliceIndex","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:9931","2:9932","2:9933","2:9934","2:9935","2:9936","2:9937"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3009","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}]}}]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:9920","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementors":[]}},"a:2:8325-0:225":{"id":"a:2:8325-0:225","crate_id":0,"name":null,"span":{"filename":"compiler/rustc_lint_defs/src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"RefUnwindSafe","id":"2:8325","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Applicability","id":"0:225","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"5:5399":{"id":"5:5399","crate_id":5,"name":null,"span":null,"visibility":{"restricted":{"parent":"5:5220","path":"::str"}},"docs":"Methods for string slices.","links":{},"attrs":["#[lang = \"str_alloc\"]","#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["5:5400","5:5401","5:5404","5:5407","5:5419","5:5420","5:5421","5:5422","5:5423"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:7881":{"id":"2:7881","crate_id":2,"name":"TrustedStep","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Step","id":"2:6975","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementors":[]}},"0:158":{"id":"0:158","crate_id":0,"name":"UNUSED_LIFETIMES","span":{"filename":"compiler/rustc_lint_defs/src/builtin.rs","begin":[1524,0],"end":[1545,1]},"visibility":"public","docs":"The `unused_lifetimes` lint detects lifetime parameters that are never\nused.\n\n### Example\n\n```rust,compile_fail\n#[deny(unused_lifetimes)]\n\npub fn foo<'a>() {}\n```\n\n{{produces}}\n\n### Explanation\n\nUnused lifetime parameters may signal a mistake or unfinished code.\nConsider removing the parameter.","links":{},"attrs":[],"deprecation":null,"kind":"static","inner":{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"$crate::Lint","id":"0:292","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"mutable":false,"expr":"&crate::Lint{name: \"UNUSED_LIFETIMES\",\n             default_level: crate::Allow,\n             desc: \"detects lifetime parameters that are never used\",\n             edition_lint_opts: None,\n             is_plugin: false, ..crate::Lint::default_fields_for_macro()}"}},"0:91":{"id":"0:91","crate_id":0,"name":"hash_stable","span":{"filename":"compiler/rustc_lint_defs/src/lib.rs","begin":[262,4],"end":[264,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["hcx",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"HCX"}}}],["hasher",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"StableHasher","id":"29:1802","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:119":{"id":"0:119","crate_id":0,"name":"CONST_ERR","span":{"filename":"compiler/rustc_lint_defs/src/builtin.rs","begin":[266,0],"end":[294,1]},"visibility":"public","docs":"The `const_err` lint detects an erroneous expression while doing\nconstant evaluation.\n\n### Example\n\n```rust,compile_fail\n#![allow(unconditional_panic)]\nconst C: i32 = 1/0;\n```\n\n{{produces}}\n\n### Explanation\n\nThis lint detects constants that fail to evaluate. Allowing the lint will accept the\nconstant declaration, but any use of this constant will still lead to a hard error. This is\na future incompatibility lint; the plan is to eventually entirely forbid even declaring\nconstants that cannot be evaluated.  See [issue #71800] for more details.\n\n[issue #71800]: https://github.com/rust-lang/rust/issues/71800","links":{},"attrs":[],"deprecation":null,"kind":"static","inner":{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"$crate::Lint","id":"0:292","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"mutable":false,"expr":"&crate::Lint{name: \"CONST_ERR\",\n             default_level: crate::Deny,\n             desc: \"constant evaluation encountered erroneous expression\",\n             edition_lint_opts: None,\n             is_plugin: false,\n             report_in_external_macro: true,\n             future_incompatible:\n                 Some(crate::FutureIncompatibleInfo{reference:\n                                                        \"issue #71800 <https://github.com/rust-lang/rust/issues/71800>\",\n                                                                                                                           ..crate::FutureIncompatibleInfo::default_fields_for_macro()}),\n                                                                                                                                                                                            ..crate::Lint::default_fields_for_macro()}"}},"0:67":{"id":"0:67","crate_id":0,"name":"from_str","span":{"filename":"compiler/rustc_lint_defs/src/lib.rs","begin":[74,4],"end":[82,5]},"visibility":"public","docs":"Converts a lower-case string to a level.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["x",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:43419","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Level","id":"0:260","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:373":{"id":"0:373","crate_id":0,"name":"3","span":{"filename":"compiler/rustc_lint_defs/src/lib.rs","begin":[292,46],"end":[292,50]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"struct_field","inner":{"kind":"resolved_path","inner":{"name":"Span","id":"22:2708","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}},"0:191":{"id":"0:191","crate_id":0,"name":"SEMICOLON_IN_EXPRESSIONS_FROM_MACROS","span":{"filename":"compiler/rustc_lint_defs/src/builtin.rs","begin":[2839,0],"end":[2882,1]},"visibility":"public","docs":"The `semicolon_in_expressions_from_macros` lint detects trailing semicolons\nin macro bodies when the macro is invoked in expression position.\nThis was previous accepted, but is being phased out.\n\n### Example\n\n```rust,compile_fail\n#![deny(semicolon_in_expressions_from_macros)]\nmacro_rules! foo {\n    () => { true; }\n}\n\nfn main() {\n    let val = match true {\n        true => false,\n        _ => foo!()\n    };\n}\n```\n\n{{produces}}\n\n### Explanation\n\nPrevious, Rust ignored trailing semicolon in a macro\nbody when a macro was invoked in expression position.\nHowever, this makes the treatment of semicolons in the language\ninconsistent, and could lead to unexpected runtime behavior\nin some circumstances (e.g. if the macro author expects\na value to be dropped).\n\nThis is a [future-incompatible] lint to transition this\nto a hard error in the future. See [issue #79813] for more details.\n\n[issue #79813]: https://github.com/rust-lang/rust/issues/79813\n[future-incompatible]: ../index.md#future-incompatible-lints","links":{},"attrs":[],"deprecation":null,"kind":"static","inner":{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"$crate::Lint","id":"0:292","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"mutable":false,"expr":"&crate::Lint{name: \"SEMICOLON_IN_EXPRESSIONS_FROM_MACROS\",\n             default_level: crate::Warn,\n             desc: \"trailing semicolon in macro body used as expression\",\n             edition_lint_opts: None,\n             is_plugin: false,\n             future_incompatible:\n                 Some(crate::FutureIncompatibleInfo{reference:\n                                                        \"issue #79813 <https://github.com/rust-lang/rust/issues/79813>\",\n                                                                                                                           ..crate::FutureIncompatibleInfo::default_fields_for_macro()}),\n                                                                                                                                                                                            ..crate::Lint::default_fields_for_macro()}"}},"0:292":{"id":"0:292","crate_id":0,"name":"Lint","span":{"filename":"compiler/rustc_lint_defs/src/lib.rs","begin":[98,0],"end":[140,1]},"visibility":"public","docs":"Specification of a single lint.","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"struct_type":"plain","generics":{"params":[],"where_predicates":[]},"fields_stripped":false,"fields":["0:293","0:294","0:295","0:296","0:297","0:298","0:299","0:300","0:301"],"impls":["0:73","a:2:3004-0:292","a:2:3016-0:292","a:2:3045-0:292","a:2:8324-0:292","a:2:8325-0:292","b:2:2937-0:292","b:2:2933-0:292","b:5:541-0:292","b:2:2948-0:292","b:2:2943-0:292","b:2:2609-0:292","b:2:2612-0:292","b:2:3667-0:292","0:303","0:302","0:305"]}},"b:5:541-0:292":{"id":"b:5:541-0:292","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2625","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"provided_trait_methods":["clone_into"],"trait":{"kind":"resolved_path","inner":{"name":"ToOwned","id":"5:537","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Lint","id":"0:292","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["5:543","5:544","5:545"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:113":{"id":"0:113","crate_id":0,"name":"ILL_FORMED_ATTRIBUTE_INPUT","span":{"filename":"compiler/rustc_lint_defs/src/builtin.rs","begin":[46,0],"end":[80,1]},"visibility":"public","docs":"The `ill_formed_attribute_input` lint detects ill-formed attribute\ninputs that were previously accepted and used in practice.\n\n### Example\n\n```rust,compile_fail\n#[inline = \"this is not valid\"]\nfn foo() {}\n```\n\n{{produces}}\n\n### Explanation\n\nPreviously, inputs for many built-in attributes weren't validated and\nnonsensical attribute inputs were accepted. After validation was\nadded, it was determined that some existing projects made use of these\ninvalid forms. This is a [future-incompatible] lint to transition this\nto a hard error in the future. See [issue #57571] for more details.\n\nCheck the [attribute reference] for details on the valid inputs for\nattributes.\n\n[issue #57571]: https://github.com/rust-lang/rust/issues/57571\n[attribute reference]: https://doc.rust-lang.org/nightly/reference/attributes.html\n[future-incompatible]: ../index.md#future-incompatible-lints","links":{},"attrs":[],"deprecation":null,"kind":"static","inner":{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"$crate::Lint","id":"0:292","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"mutable":false,"expr":"&crate::Lint{name: \"ILL_FORMED_ATTRIBUTE_INPUT\",\n             default_level: crate::Deny,\n             desc:\n                 \"ill-formed attribute inputs that were previously accepted and used in practice\",\n             edition_lint_opts: None,\n             is_plugin: false,\n             crate_level_only: true,\n             future_incompatible:\n                 Some(crate::FutureIncompatibleInfo{reference:\n                                                        \"issue #57571 <https://github.com/rust-lang/rust/issues/57571>\",\n                                                                                                                           ..crate::FutureIncompatibleInfo::default_fields_for_macro()}),\n                                                                                                                                                                                            ..crate::Lint::default_fields_for_macro()}"}},"0:308":{"id":"0:308","crate_id":0,"name":"reference","span":{"filename":"compiler/rustc_lint_defs/src/lib.rs","begin":[146,4],"end":[146,31]},"visibility":"public","docs":"e.g., a URL for an issue/PR/RFC or error code","links":{},"attrs":[],"deprecation":null,"kind":"struct_field","inner":{"kind":"borrowed_ref","inner":{"lifetime":"'static","mutable":false,"type":{"kind":"primitive","inner":"str"}}}},"0:331":{"id":"0:331","crate_id":0,"name":"fmt","span":{"filename":"compiler/rustc_lint_defs/src/lib.rs","begin":[158,22],"end":[158,27]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Formatter","id":"2:9315","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Result","id":"2:9304","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"2:3245":{"id":"2:3245","crate_id":2,"name":"FnMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3247"],"generics":{"params":[{"name":"Args","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FnOnce","id":"2:3248","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Args"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementors":[]}},"2:12335":{"id":"2:12335","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":["#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]","#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","self_type":{"kind":"generic","inner":"I"},"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:9929","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:9929","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"header":["unsafe"],"abi":"\"Rust\"","has_body":true}},"1:5482":{"id":"1:5482","crate_id":1,"name":"MetadataExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5483","1:5484","1:5485","1:5486","1:5487","1:5488","1:5489","1:5490","1:5491","1:5492","1:5493","1:5494","1:5495","1:5496","1:5497","1:5498"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementors":[]}},"0:414":{"id":"0:414","crate_id":0,"name":"ProcMacroBackCompat","span":{"filename":"compiler/rustc_lint_defs/src/lib.rs","begin":[303,4],"end":[303,31]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"tuple","variant_inner":[{"kind":"resolved_path","inner":{"name":"String","id":"5:7602","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}]}},"1:4346":{"id":"1:4346","crate_id":1,"name":"Read","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4347","1:4348","1:4350","1:4351","1:4352","1:4353","1:4354","1:4355","1:4356","1:4357","1:4359"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementors":[]}},"0:399":{"id":"0:399","crate_id":0,"name":"UnusedBuiltinAttribute","span":{"filename":"compiler/rustc_lint_defs/src/lib.rs","begin":[299,4],"end":[299,86]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"struct","variant_inner":["0:400","0:401","0:402"]}},"2:3009":{"id":"2:3009","crate_id":2,"name":"Sized","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementors":[]}},"0:339":{"id":"0:339","crate_id":0,"name":"ExternDepSpec","span":{"filename":"compiler/rustc_lint_defs/src/lib.rs","begin":[278,0],"end":[281,1]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"enum","inner":{"generics":{"params":[],"where_predicates":[]},"variants_stripped":false,"variants":["0:340","0:343"],"impls":["a:2:3004-0:339","a:2:3016-0:339","a:2:3045-0:339","a:2:8324-0:339","a:2:8325-0:339","b:2:2937-0:339","b:2:2933-0:339","b:2:2948-0:339","b:2:2943-0:339","b:2:2609-0:339","b:2:2612-0:339","b:2:3667-0:339","0:347","0:350","0:346"]}},"2:12347":{"id":"2:12347","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```","links":{"str::split_whitespace":"1:15265"},"attrs":["#[must_use =\n  \"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"split_ascii_whitespace\", since = \"1.34.0\")]","#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitAsciiWhitespace","id":"2:45550","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"b:2:3667-0:292":{"id":"b:2:3667-0:292","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3009","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Any","id":"2:3665","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Lint","id":"0:292","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3669"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:12442":{"id":"2:12442","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{}\", c);\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"1:15260"},"attrs":["#[must_use =\n  \"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"str_escape\", since = \"1.34.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDebug","id":"2:45566","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"b:2:2948-0:454":{"id":"b:2:2948-0:454","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}},{"name":"U","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:2907","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:2917","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"LintBuffer","id":"0:454","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:2951","2:2952"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:3667-0:444":{"id":"b:2:3667-0:444","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3009","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Any","id":"2:3665","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"BufferedEarlyLint","id":"0:444","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3669"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:2910":{"id":"2:2910","crate_id":2,"name":"From","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2912"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[]},"bounds":[],"implementors":[]}},"5:544":{"id":"5:544","crate_id":5,"name":"to_owned","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"generic","inner":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"1:6601":{"id":"1:6601","crate_id":1,"name":"AsRawFd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6602"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementors":[]}},"0:430":{"id":"0:430","crate_id":0,"name":"0","span":{"filename":"compiler/rustc_lint_defs/src/lib.rs","begin":[307,26],"end":[307,30]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"struct_field","inner":{"kind":"resolved_path","inner":{"name":"Span","id":"22:2708","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}},"0:330":{"id":"0:330","crate_id":0,"name":null,"span":{"filename":"compiler/rustc_lint_defs/src/lib.rs","begin":[158,22],"end":[158,27]},"visibility":"crate","docs":null,"links":{},"attrs":["#[automatically_derived]","#[allow(unused_qualifications)]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Debug","id":"2:9354","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"FutureIncompatibilityReason","id":"0:316","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:331"],"negative":false,"synthetic":false,"blanket_impl":null}},"a:2:3045-0:444":{"id":"a:2:3045-0:444","crate_id":0,"name":null,"span":{"filename":"compiler/rustc_lint_defs/src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Unpin","id":"2:3045","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"BufferedEarlyLint","id":"0:444","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:334":{"id":"0:334","crate_id":0,"name":null,"span":{"filename":"compiler/rustc_lint_defs/src/lib.rs","begin":[223,9],"end":[223,14]},"visibility":"crate","docs":null,"links":{},"attrs":["#[automatically_derived]","#[allow(unused_qualifications)]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2625","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"LintId","id":"0:332","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:335"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:12346":{"id":"2:12346","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```","links":{"str::split_ascii_whitespace":"1:15265"},"attrs":["#[must_use =\n  \"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"split_whitespace\", since = \"1.1.0\")]","#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitWhitespace","id":"2:45541","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"2:12683":{"id":"2:12683","crate_id":2,"name":"IntoFuture","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:12684","2:12685","2:12686"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementors":[]}},"2:9371":{"id":"2:9371","crate_id":2,"name":"Pointer","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:9372"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementors":[]}},"b:2:2943-0:205":{"id":"b:2:2943-0:205","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}},{"name":"U","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:2917","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"TryInto","id":"2:2913","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"UnusedDocComment","id":"0:205","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:2946","2:2947"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:184":{"id":"0:184","crate_id":0,"name":"CONST_EVALUATABLE_UNCHECKED","span":{"filename":"compiler/rustc_lint_defs/src/builtin.rs","begin":[2611,0],"end":[2648,1]},"visibility":"public","docs":"The `const_evaluatable_unchecked` lint detects a generic constant used\nin a type.\n\n### Example\n\n```rust\nconst fn foo<T>() -> usize {\n    if std::mem::size_of::<*mut T>() < 8 { // size of *mut T does not depend on T\n        4\n    } else {\n        8\n    }\n}\n\nfn test<T>() {\n    let _ = [0; foo::<T>()];\n}\n```\n\n{{produces}}\n\n### Explanation\n\nIn the 1.43 release, some uses of generic parameters in array repeat\nexpressions were accidentally allowed. This is a [future-incompatible]\nlint to transition this to a hard error in the future. See [issue\n#76200] for a more detailed description and possible fixes.\n\n[future-incompatible]: ../index.md#future-incompatible-lints\n[issue #76200]: https://github.com/rust-lang/rust/issues/76200","links":{},"attrs":[],"deprecation":null,"kind":"static","inner":{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"$crate::Lint","id":"0:292","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"mutable":false,"expr":"&crate::Lint{name: \"CONST_EVALUATABLE_UNCHECKED\",\n             default_level: crate::Warn,\n             desc:\n                 \"detects a generic constant is used in a type without a emitting a warning\",\n             edition_lint_opts: None,\n             is_plugin: false,\n             future_incompatible:\n                 Some(crate::FutureIncompatibleInfo{reference:\n                                                        \"issue #76200 <https://github.com/rust-lang/rust/issues/76200>\",\n                                                                                                                           ..crate::FutureIncompatibleInfo::default_fields_for_macro()}),\n                                                                                                                                                                                            ..crate::Lint::default_fields_for_macro()}"}},"b:2:2937-0:194":{"id":"b:2:2937-0:194","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"From","id":"2:2910","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"HardwiredLints","id":"0:194","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:2939"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"a:2:8324-0:339":{"id":"a:2:8324-0:339","crate_id":0,"name":null,"span":{"filename":"compiler/rustc_lint_defs/src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"UnwindSafe","id":"2:8324","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ExternDepSpec","id":"0:339","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:105":{"id":"0:105","crate_id":0,"name":"declare_tool_lint","span":{"filename":"compiler/rustc_lint_defs/src/lib.rs","begin":[485,0],"end":[514,1]},"visibility":"public","docs":null,"links":{},"attrs":["#[macro_export]"],"deprecation":null,"kind":"macro","inner":"macro_rules! declare_tool_lint {\n    ($(#[$attr : meta]) * $vis : vis $tool : ident :: $NAME : ident, $Level :\n ident, $desc : expr) => { ... };\n    ($(#[$attr : meta]) * $vis : vis $tool : ident :: $NAME : ident, $Level :\n ident, $desc : expr, report_in_external_macro : $rep : expr) => { ... };\n    ($(#[$attr : meta]) * $vis : vis $tool : ident :: $NAME : ident, $Level :\n ident, $desc : expr, $external : expr) => { ... };\n}"},"a:2:3004-0:194":{"id":"a:2:3004-0:194","crate_id":0,"name":null,"span":{"filename":"compiler/rustc_lint_defs/src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Send","id":"2:3004","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"HardwiredLints","id":"0:194","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"a:2:8324-0:444":{"id":"a:2:8324-0:444","crate_id":0,"name":null,"span":{"filename":"compiler/rustc_lint_defs/src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"UnwindSafe","id":"2:8324","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"BufferedEarlyLint","id":"0:444","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"a:2:3004-0:292":{"id":"a:2:3004-0:292","crate_id":0,"name":null,"span":{"filename":"compiler/rustc_lint_defs/src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Send","id":"2:3004","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Lint","id":"0:292","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:445":{"id":"0:445","crate_id":0,"name":"span","span":{"filename":"compiler/rustc_lint_defs/src/lib.rs","begin":[317,4],"end":[317,23]},"visibility":"public","docs":"The span of code that we are linting on.","links":{},"attrs":[],"deprecation":null,"kind":"struct_field","inner":{"kind":"resolved_path","inner":{"name":"MultiSpan","id":"22:4418","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}},"0:294":{"id":"0:294","crate_id":0,"name":"default_level","span":{"filename":"compiler/rustc_lint_defs/src/lib.rs","begin":[118,4],"end":[118,28]},"visibility":"public","docs":"Default level for the lint.\n\nSee <https://rustc-dev-guide.rust-lang.org/diagnostics.html#diagnostic-levels>\nfor guidelines on choosing a default level.","links":{},"attrs":[],"deprecation":null,"kind":"struct_field","inner":{"kind":"resolved_path","inner":{"name":"Level","id":"0:260","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}},"0:151":{"id":"0:151","crate_id":0,"name":"ORDER_DEPENDENT_TRAIT_OBJECTS","span":{"filename":"compiler/rustc_lint_defs/src/builtin.rs","begin":[1321,0],"end":[1354,1]},"visibility":"public","docs":"The `order_dependent_trait_objects` lint detects a trait coherency\nviolation that would allow creating two trait impls for the same\ndynamic trait object involving marker traits.\n\n### Example\n\n```rust,compile_fail\npub trait Trait {}\n\nimpl Trait for dyn Send + Sync { }\nimpl Trait for dyn Sync + Send { }\n```\n\n{{produces}}\n\n### Explanation\n\nA previous bug caused the compiler to interpret traits with different\norders (such as `Send + Sync` and `Sync + Send`) as distinct types\nwhen they were intended to be treated the same. This allowed code to\ndefine separate trait implementations when there should be a coherence\nerror. This is a [future-incompatible] lint to transition this to a\nhard error in the future. See [issue #56484] for more details.\n\n[issue #56484]: https://github.com/rust-lang/rust/issues/56484\n[future-incompatible]: ../index.md#future-incompatible-lints","links":{},"attrs":[],"deprecation":null,"kind":"static","inner":{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"$crate::Lint","id":"0:292","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"mutable":false,"expr":"&crate::Lint{name: \"ORDER_DEPENDENT_TRAIT_OBJECTS\",\n             default_level: crate::Deny,\n             desc:\n                 \"trait-object types were treated as different depending on marker-trait order\",\n             edition_lint_opts: None,\n             is_plugin: false,\n             future_incompatible:\n                 Some(crate::FutureIncompatibleInfo{reference:\n                                                        \"issue #56484 <https://github.com/rust-lang/rust/issues/56484>\",\n                                                                                                                           ..crate::FutureIncompatibleInfo::default_fields_for_macro()}),\n                                                                                                                                                                                            ..crate::Lint::default_fields_for_macro()}"}},"0:202":{"id":"0:202","crate_id":0,"name":"get_lints","span":{"filename":"compiler/rustc_lint_defs/src/builtin.rs","begin":[2963,0],"end":[3059,1]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[],"output":{"kind":"resolved_path","inner":{"name":"$crate::LintArray","id":"0:107","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:417":{"id":"0:417","crate_id":0,"name":"OrPatternsBackCompat","span":{"filename":"compiler/rustc_lint_defs/src/lib.rs","begin":[304,4],"end":[304,38]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"tuple","variant_inner":[{"kind":"resolved_path","inner":{"name":"Span","id":"22:2708","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},{"kind":"resolved_path","inner":{"name":"String","id":"5:7602","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}]}},"5:5407":{"id":"5:5407","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7602"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n  \"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]","#[stable(feature = \"unicode_case_mapping\", since = \"1.2.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7602","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:73":{"id":"0:73","crate_id":0,"name":null,"span":{"filename":"compiler/rustc_lint_defs/src/lib.rs","begin":[194,0],"end":[220,1]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"Lint","id":"0:292","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:74","0:75","0:76"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:12326":{"id":"2:12326","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]","#[stable(feature = \"is_char_boundary\", since = \"1.9.0\")]","#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"2:12427":{"id":"2:12427","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"self::pattern":"2:11957","prim@char":"1:15260"},"attrs":["#[must_use =\n  \"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"trim_direction\", since = \"1.30.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:11967","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}},{"bound_predicate":{"ty":{"kind":"qualified_path","inner":{"name":"Searcher","self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:11967","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:11982","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"header":[],"abi":"\"Rust\"","has_body":true}},"b:2:2612-0:332":{"id":"b:2:2612-0:332","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3009","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"BorrowMut","id":"2:2606","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"LintId","id":"0:332","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:2614"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:434":{"id":"0:434","crate_id":0,"name":"UnicodeTextFlow","span":{"filename":"compiler/rustc_lint_defs/src/lib.rs","begin":[309,4],"end":[309,33]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"tuple","variant_inner":[{"kind":"resolved_path","inner":{"name":"Span","id":"22:2708","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},{"kind":"resolved_path","inner":{"name":"String","id":"5:7602","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}]}},"5:5404":{"id":"5:5404","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7602"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n  \"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]","#[stable(feature = \"str_replacen\", since = \"1.16.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}],["count",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7602","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:11967","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"header":[],"abi":"\"Rust\"","has_body":true}},"2:3300":{"id":"2:3300","crate_id":2,"name":"Index","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3302","2:3303"],"generics":{"params":[{"name":"Idx","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"Idx"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3009","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}]}}]},"bounds":[],"implementors":[]}},"0:384":{"id":"0:384","crate_id":0,"name":"RedundantImport","span":{"filename":"compiler/rustc_lint_defs/src/lib.rs","begin":[295,4],"end":[295,45]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"tuple","variant_inner":[{"kind":"resolved_path","inner":{"name":"Vec","id":"5:7062","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"resolved_path","inner":{"name":"Span","id":"22:2708","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},{"kind":"primitive","inner":"bool"}]}}],"bindings":[]}},"param_names":[]}},{"kind":"resolved_path","inner":{"name":"Ident","id":"22:4113","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}]}},"2:3166":{"id":"2:3166","crate_id":2,"name":"ShlAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3168"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"}}}}],"where_predicates":[]},"bounds":[],"implementors":[]}},"a:2:3016-0:316":{"id":"a:2:3016-0:316","crate_id":0,"name":null,"span":{"filename":"compiler/rustc_lint_defs/src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Sync","id":"2:3016","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"FutureIncompatibilityReason","id":"0:316","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:449":{"id":"0:449","crate_id":0,"name":"diagnostic","span":{"filename":"compiler/rustc_lint_defs/src/lib.rs","begin":[330,4],"end":[330,42]},"visibility":"public","docs":"Customization of the `DiagnosticBuilder<'_>` for the lint.","links":{},"attrs":[],"deprecation":null,"kind":"struct_field","inner":{"kind":"resolved_path","inner":{"name":"BuiltinLintDiagnostics","id":"0:352","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}},"b:2:2937-0:332":{"id":"b:2:2937-0:332","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"From","id":"2:2910","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"LintId","id":"0:332","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:2939"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"a:2:8325-0:194":{"id":"a:2:8325-0:194","crate_id":0,"name":null,"span":{"filename":"compiler/rustc_lint_defs/src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"RefUnwindSafe","id":"2:8325","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"HardwiredLints","id":"0:194","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:326":{"id":"0:326","crate_id":0,"name":"0","span":{"filename":"compiler/rustc_lint_defs/src/lib.rs","begin":[171,27],"end":[171,34]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"struct_field","inner":{"kind":"resolved_path","inner":{"name":"Edition","id":"22:1818","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}},"33:290":{"id":"33:290","crate_id":33,"name":"Decoder","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["33:291","33:292","33:293","33:294","33:295","33:296","33:297","33:298","33:299","33:300","33:301","33:302","33:303","33:304","33:305","33:306","33:307","33:308","33:309","33:310","33:311","33:314","33:317","33:320","33:323","33:326","33:329","33:332","33:337","33:340","33:343","33:346","33:349","33:352"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementors":[]}},"2:8325":{"id":"2:8325","crate_id":2,"name":"RefUnwindSafe","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementors":[]}},"b:2:2933-0:332":{"id":"b:2:2933-0:332","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}},{"name":"U","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"From","id":"2:2910","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:2907","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"LintId","id":"0:332","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:2936"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"a:2:8325-0:339":{"id":"a:2:8325-0:339","crate_id":0,"name":null,"span":{"filename":"compiler/rustc_lint_defs/src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"RefUnwindSafe","id":"2:8325","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ExternDepSpec","id":"0:339","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:135":{"id":"0:135","crate_id":0,"name":"WARNINGS","span":{"filename":"compiler/rustc_lint_defs/src/builtin.rs","begin":[745,0],"end":[767,1]},"visibility":"public","docs":"The `warnings` lint allows you to change the level of other\nlints which produce warnings.\n\n### Example\n\n```rust\n#![deny(warnings)]\nfn foo() {}\n```\n\n{{produces}}\n\n### Explanation\n\nThe `warnings` lint is a bit special; by changing its level, you\nchange every other warning that would produce a warning to whatever\nvalue you'd like. As such, you won't ever trigger this lint in your\ncode directly.","links":{},"attrs":[],"deprecation":null,"kind":"static","inner":{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"$crate::Lint","id":"0:292","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"mutable":false,"expr":"&crate::Lint{name: \"WARNINGS\",\n             default_level: crate::Warn,\n             desc: \"mass-change the level for lints which produce warnings\",\n             edition_lint_opts: None,\n             is_plugin: false, ..crate::Lint::default_fields_for_macro()}"}},"0:226":{"id":"0:226","crate_id":0,"name":"MachineApplicable","span":{"filename":"compiler/rustc_lint_defs/src/lib.rs","begin":[34,4],"end":[34,21]},"visibility":"default","docs":"The suggestion is definitely what the user intended, or maintains the exact meaning of the code.\nThis suggestion should be automatically applied.\n\nIn case of multiple `MachineApplicable` suggestions (whether as part of\nthe same `multipart_suggestion` or not), all of them should be\nautomatically applied.","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"0:315":{"id":"0:315","crate_id":0,"name":"fmt","span":{"filename":"compiler/rustc_lint_defs/src/lib.rs","begin":[143,22],"end":[143,27]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Formatter","id":"2:9315","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Result","id":"2:9304","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"b:2:3667-0:454":{"id":"b:2:3667-0:454","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3009","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Any","id":"2:3665","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"LintBuffer","id":"0:454","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3669"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:380":{"id":"0:380","crate_id":0,"name":"UnusedImports","span":{"filename":"compiler/rustc_lint_defs/src/lib.rs","begin":[294,4],"end":[294,46]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"tuple","variant_inner":[{"kind":"resolved_path","inner":{"name":"String","id":"5:7602","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},{"kind":"resolved_path","inner":{"name":"Vec","id":"5:7062","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"resolved_path","inner":{"name":"Span","id":"22:2708","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},{"kind":"resolved_path","inner":{"name":"String","id":"5:7602","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}]}}],"bindings":[]}},"param_names":[]}}]}},"0:201":{"id":"0:201","crate_id":0,"name":null,"span":{"filename":"compiler/rustc_lint_defs/src/builtin.rs","begin":[2963,0],"end":[3059,1]},"visibility":{"restricted":{"parent":"0:47","path":"::builtin"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"HardwiredLints","id":"0:194","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:202"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:129":{"id":"0:129","crate_id":0,"name":"UNUSED_ATTRIBUTES","span":{"filename":"compiler/rustc_lint_defs/src/builtin.rs","begin":[566,0],"end":[592,1]},"visibility":"public","docs":"The `unused_attributes` lint detects attributes that were not used by\nthe compiler.\n\n### Example\n\n```rust\n#![ignore]\n```\n\n{{produces}}\n\n### Explanation\n\nUnused [attributes] may indicate the attribute is placed in the wrong\nposition. Consider removing it, or placing it in the correct position.\nAlso consider if you intended to use an _inner attribute_ (with a `!`\nsuch as `#![allow(unused)]`) which applies to the item the attribute\nis within, or an _outer attribute_ (without a `!` such as\n`#[allow(unused)]`) which applies to the item *following* the\nattribute.\n\n[attributes]: https://doc.rust-lang.org/reference/attributes.html","links":{},"attrs":[],"deprecation":null,"kind":"static","inner":{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"$crate::Lint","id":"0:292","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"mutable":false,"expr":"&crate::Lint{name: \"UNUSED_ATTRIBUTES\",\n             default_level: crate::Warn,\n             desc: \"detects attributes that were not used by the compiler\",\n             edition_lint_opts: None,\n             is_plugin: false, ..crate::Lint::default_fields_for_macro()}"}},"0:372":{"id":"0:372","crate_id":0,"name":"2","span":{"filename":"compiler/rustc_lint_defs/src/lib.rs","begin":[292,40],"end":[292,44]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"struct_field","inner":{"kind":"primitive","inner":"bool"}},"0:214":{"id":"0:214","crate_id":0,"name":"MISSING_ABI","span":{"filename":"compiler/rustc_lint_defs/src/builtin.rs","begin":[3165,0],"end":[3188,1]},"visibility":"public","docs":"The `missing_abi` lint detects cases where the ABI is omitted from\nextern declarations.\n\n### Example\n\n```rust,compile_fail\n#![deny(missing_abi)]\n\nextern fn foo() {}\n```\n\n{{produces}}\n\n### Explanation\n\nHistorically, Rust implicitly selected C as the ABI for extern\ndeclarations. We expect to add new ABIs, like `C-unwind`, in the future,\nthough this has not yet happened, and especially with their addition\nseeing the ABI easily will make code review easier.","links":{},"attrs":[],"deprecation":null,"kind":"static","inner":{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"$crate::Lint","id":"0:292","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"mutable":false,"expr":"&crate::Lint{name: \"MISSING_ABI\",\n             default_level: crate::Allow,\n             desc: \"No declared ABI for extern declaration\",\n             edition_lint_opts: None,\n             is_plugin: false, ..crate::Lint::default_fields_for_macro()}"}},"a:2:8324-0:194":{"id":"a:2:8324-0:194","crate_id":0,"name":null,"span":{"filename":"compiler/rustc_lint_defs/src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"UnwindSafe","id":"2:8324","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"HardwiredLints","id":"0:194","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:176":{"id":"0:176","crate_id":0,"name":"AMBIGUOUS_ASSOCIATED_ITEMS","span":{"filename":"compiler/rustc_lint_defs/src/builtin.rs","begin":[2255,0],"end":[2310,1]},"visibility":"public","docs":"The `ambiguous_associated_items` lint detects ambiguity between\n[associated items] and [enum variants].\n\n[associated items]: https://doc.rust-lang.org/reference/items/associated-items.html\n[enum variants]: https://doc.rust-lang.org/reference/items/enumerations.html\n\n### Example\n\n```rust,compile_fail\nenum E {\n    V\n}\n\ntrait Tr {\n    type V;\n    fn foo() -> Self::V;\n}\n\nimpl Tr for E {\n    type V = u8;\n    // `Self::V` is ambiguous because it may refer to the associated type or\n    // the enum variant.\n    fn foo() -> Self::V { 0 }\n}\n```\n\n{{produces}}\n\n### Explanation\n\nPrevious versions of Rust did not allow accessing enum variants\nthrough [type aliases]. When this ability was added (see [RFC 2338]), this\nintroduced some situations where it can be ambiguous what a type\nwas referring to.\n\nTo fix this ambiguity, you should use a [qualified path] to explicitly\nstate which type to use. For example, in the above example the\nfunction can be written as `fn f() -> <Self as Tr>::V { 0 }` to\nspecifically refer to the associated type.\n\nThis is a [future-incompatible] lint to transition this to a hard\nerror in the future. See [issue #57644] for more details.\n\n[issue #57644]: https://github.com/rust-lang/rust/issues/57644\n[type aliases]: https://doc.rust-lang.org/reference/items/type-aliases.html#type-aliases\n[RFC 2338]: https://github.com/rust-lang/rfcs/blob/master/text/2338-type-alias-enum-variants.md\n[qualified path]: https://doc.rust-lang.org/reference/paths.html#qualified-paths\n[future-incompatible]: ../index.md#future-incompatible-lints","links":{},"attrs":[],"deprecation":null,"kind":"static","inner":{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"$crate::Lint","id":"0:292","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"mutable":false,"expr":"&crate::Lint{name: \"AMBIGUOUS_ASSOCIATED_ITEMS\",\n             default_level: crate::Deny,\n             desc: \"ambiguous associated items\",\n             edition_lint_opts: None,\n             is_plugin: false,\n             future_incompatible:\n                 Some(crate::FutureIncompatibleInfo{reference:\n                                                        \"issue #57644 <https://github.com/rust-lang/rust/issues/57644>\",\n                                                                                                                           ..crate::FutureIncompatibleInfo::default_fields_for_macro()}),\n                                                                                                                                                                                            ..crate::Lint::default_fields_for_macro()}"}},"b:2:2943-0:352":{"id":"b:2:2943-0:352","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}},{"name":"U","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:2917","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"TryInto","id":"2:2913","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"BuiltinLintDiagnostics","id":"0:352","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:2946","2:2947"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:210":{"id":"0:210","crate_id":0,"name":null,"span":{"filename":"compiler/rustc_lint_defs/src/builtin.rs","begin":[3163,0],"end":[3163,61]},"visibility":{"restricted":{"parent":"0:47","path":"::builtin"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"LintPass","id":"0:108","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"UnusedDocComment","id":"0:205","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:211"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:7495":{"id":"2:7495","crate_id":2,"name":"ExactSizeIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:7496","2:7497"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"2:7606","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementors":[]}},"2:12418":{"id":"2:12418","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:15260","self::pattern":"2:11957"},"attrs":["#[must_use =\n  \"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"trim_direction\", since = \"1.30.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:11967","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:365":{"id":"0:365","crate_id":0,"name":"MacroExpandedMacroExportsAccessedByAbsolutePaths","span":{"filename":"compiler/rustc_lint_defs/src/lib.rs","begin":[291,4],"end":[291,58]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"tuple","variant_inner":[{"kind":"resolved_path","inner":{"name":"Span","id":"22:2708","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}]}},"0:359":{"id":"0:359","crate_id":0,"name":"AbsPathWithModule","span":{"filename":"compiler/rustc_lint_defs/src/lib.rs","begin":[289,4],"end":[289,27]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"tuple","variant_inner":[{"kind":"resolved_path","inner":{"name":"Span","id":"22:2708","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}]}},"0:260":{"id":"0:260","crate_id":0,"name":"Level","span":{"filename":"compiler/rustc_lint_defs/src/lib.rs","begin":[51,0],"end":[57,1]},"visibility":"public","docs":"Setting for how to handle a lint.","links":{},"attrs":[],"deprecation":null,"kind":"enum","inner":{"generics":{"params":[],"where_predicates":[]},"variants_stripped":false,"variants":["0:261","0:263","0:265","0:267","0:269"],"impls":["0:65","a:2:3004-0:260","a:2:3016-0:260","a:2:3045-0:260","a:2:8324-0:260","a:2:8325-0:260","b:2:2937-0:260","b:2:2933-0:260","b:5:541-0:260","b:2:2948-0:260","b:2:2943-0:260","b:2:2609-0:260","b:2:2612-0:260","b:2:3667-0:260","0:271","0:273","0:280","0:282","0:275","0:277","0:284","0:286","0:274","0:279","0:289"]}},"0:342":{"id":"0:342","crate_id":0,"name":"0","span":{"filename":"compiler/rustc_lint_defs/src/lib.rs","begin":[279,9],"end":[279,13]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"struct_field","inner":{"kind":"resolved_path","inner":{"name":"Json","id":"33:1659","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}},"0:413":{"id":"0:413","crate_id":0,"name":"1","span":{"filename":"compiler/rustc_lint_defs/src/lib.rs","begin":[302,26],"end":[302,39]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"struct_field","inner":{"kind":"resolved_path","inner":{"name":"ExternDepSpec","id":"0:339","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}},"a:2:8324-0:205":{"id":"a:2:8324-0:205","crate_id":0,"name":null,"span":{"filename":"compiler/rustc_lint_defs/src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"UnwindSafe","id":"2:8324","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"UnusedDocComment","id":"0:205","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"5:5721":{"id":"5:5721","crate_id":5,"name":"ToString","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:5722"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementors":[]}},"0:182":{"id":"0:182","crate_id":0,"name":"UNSAFE_OP_IN_UNSAFE_FN","span":{"filename":"compiler/rustc_lint_defs/src/builtin.rs","begin":[2513,0],"end":[2558,1]},"visibility":"public","docs":"The `unsafe_op_in_unsafe_fn` lint detects unsafe operations in unsafe\nfunctions without an explicit unsafe block.\n\n### Example\n\n```rust,compile_fail\n#![deny(unsafe_op_in_unsafe_fn)]\n\nunsafe fn foo() {}\n\nunsafe fn bar() {\n    foo();\n}\n\nfn main() {}\n```\n\n{{produces}}\n\n### Explanation\n\nCurrently, an [`unsafe fn`] allows any [unsafe] operation within its\nbody. However, this can increase the surface area of code that needs\nto be scrutinized for proper behavior. The [`unsafe` block] provides a\nconvenient way to make it clear exactly which parts of the code are\nperforming unsafe operations. In the future, it is desired to change\nit so that unsafe operations cannot be performed in an `unsafe fn`\nwithout an `unsafe` block.\n\nThe fix to this is to wrap the unsafe code in an `unsafe` block.\n\nThis lint is \"allow\" by default since this will affect a large amount\nof existing code, and the exact plan for increasing the severity is\nstill being considered. See [RFC #2585] and [issue #71668] for more\ndetails.\n\n[`unsafe fn`]: https://doc.rust-lang.org/reference/unsafe-functions.html\n[`unsafe` block]: https://doc.rust-lang.org/reference/expressions/block-expr.html#unsafe-blocks\n[unsafe]: https://doc.rust-lang.org/reference/unsafety.html\n[RFC #2585]: https://github.com/rust-lang/rfcs/blob/master/text/2585-unsafe-block-in-unsafe-fn.md\n[issue #71668]: https://github.com/rust-lang/rust/issues/71668","links":{},"attrs":[],"deprecation":null,"kind":"static","inner":{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"$crate::Lint","id":"0:292","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"mutable":false,"expr":"&crate::Lint{name: \"UNSAFE_OP_IN_UNSAFE_FN\",\n             default_level: crate::Allow,\n             desc:\n                 \"unsafe operations in unsafe functions without an explicit unsafe block are deprecated\",\n             edition_lint_opts: None,\n             is_plugin: false, ..crate::Lint::default_fields_for_macro()}"}},"0:88":{"id":"0:88","crate_id":0,"name":"to_string","span":{"filename":"compiler/rustc_lint_defs/src/lib.rs","begin":[255,4],"end":[257,5]},"visibility":"public","docs":"Gets the name of the lint.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7602","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"a:2:3016-0:292":{"id":"a:2:3016-0:292","crate_id":0,"name":null,"span":{"filename":"compiler/rustc_lint_defs/src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Sync","id":"2:3016","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Lint","id":"0:292","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"b:2:3667-0:205":{"id":"b:2:3667-0:205","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3009","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Any","id":"2:3665","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"UnusedDocComment","id":"0:205","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3669"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"a:2:3045-0:339":{"id":"a:2:3045-0:339","crate_id":0,"name":null,"span":{"filename":"compiler/rustc_lint_defs/src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Unpin","id":"2:3045","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ExternDepSpec","id":"0:339","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:3456":{"id":"2:3456","crate_id":2,"name":"CoerceUnsized","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3009","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}]}}]},"bounds":[],"implementors":[]}},"0:319":{"id":"0:319","crate_id":0,"name":"FutureReleaseErrorReportNow","span":{"filename":"compiler/rustc_lint_defs/src/lib.rs","begin":[165,4],"end":[165,31]},"visibility":"default","docs":"This will be an error in a future release, and\nCargo should create a report even for dependencies","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"0:160":{"id":"0:160","crate_id":0,"name":"ELIDED_LIFETIMES_IN_PATHS","span":{"filename":"compiler/rustc_lint_defs/src/builtin.rs","begin":[1587,0],"end":[1620,1]},"visibility":"public","docs":"The `elided_lifetimes_in_paths` lint detects the use of hidden\nlifetime parameters.\n\n### Example\n\n```rust,compile_fail\n#![deny(elided_lifetimes_in_paths)]\nstruct Foo<'a> {\n    x: &'a u32\n}\n\nfn foo(x: &Foo) {\n}\n```\n\n{{produces}}\n\n### Explanation\n\nElided lifetime parameters can make it difficult to see at a glance\nthat borrowing is occurring. This lint ensures that lifetime\nparameters are always explicitly stated, even if it is the `'_`\n[placeholder lifetime].\n\nThis lint is \"allow\" by default because it has some known issues, and\nmay require a significant transition for old code.\n\n[placeholder lifetime]: https://doc.rust-lang.org/reference/lifetime-elision.html#lifetime-elision-in-functions","links":{},"attrs":[],"deprecation":null,"kind":"static","inner":{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"$crate::Lint","id":"0:292","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"mutable":false,"expr":"&crate::Lint{name: \"ELIDED_LIFETIMES_IN_PATHS\",\n             default_level: crate::Allow,\n             desc: \"hidden lifetime parameters in types are deprecated\",\n             edition_lint_opts: None,\n             is_plugin: false,\n             crate_level_only:\n                 true, ..crate::Lint::default_fields_for_macro()}"}},"0:138":{"id":"0:138","crate_id":0,"name":"UNKNOWN_CRATE_TYPES","span":{"filename":"compiler/rustc_lint_defs/src/builtin.rs","begin":[809,0],"end":[832,1]},"visibility":"public","docs":"The `unknown_crate_types` lint detects an unknown crate type found in\na [`crate_type` attribute].\n\n### Example\n\n```rust,compile_fail\n#![crate_type=\"lol\"]\nfn main() {}\n```\n\n{{produces}}\n\n### Explanation\n\nAn unknown value give to the `crate_type` attribute is almost\ncertainly a mistake.\n\n[`crate_type` attribute]: https://doc.rust-lang.org/reference/linkage.html","links":{},"attrs":[],"deprecation":null,"kind":"static","inner":{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"$crate::Lint","id":"0:292","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"mutable":false,"expr":"&crate::Lint{name: \"UNKNOWN_CRATE_TYPES\",\n             default_level: crate::Deny,\n             desc: \"unknown crate type found in `#[crate_type]` directive\",\n             edition_lint_opts: None,\n             is_plugin: false,\n             crate_level_only:\n                 true, ..crate::Lint::default_fields_for_macro()}"}},"0:200":{"id":"0:200","crate_id":0,"name":"name","span":{"filename":"compiler/rustc_lint_defs/src/builtin.rs","begin":[2963,0],"end":[3059,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'static","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:273":{"id":"0:273","crate_id":0,"name":null,"span":{"filename":"compiler/rustc_lint_defs/src/lib.rs","begin":[50,16],"end":[50,20]},"visibility":"crate","docs":null,"links":{},"attrs":["#[automatically_derived]","#[allow(unused_qualifications)]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Copy","id":"2:3014","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Level","id":"0:260","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:265":{"id":"0:265","crate_id":0,"name":"ForceWarn","span":{"filename":"compiler/rustc_lint_defs/src/lib.rs","begin":[54,4],"end":[54,13]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"2:3076":{"id":"2:3076","crate_id":2,"name":"Sub","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3078","2:3079"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"}}}}],"where_predicates":[]},"bounds":[],"implementors":[]}},"2:12323":{"id":"2:12323","crate_id":2,"name":null,"span":null,"visibility":{"restricted":{"parent":"2:11428","path":"::str"}},"docs":null,"links":{},"attrs":["#[lang = \"str\"]","#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["2:12324","2:12325","2:12326","2:12327","2:12328","2:12329","2:12330","2:12331","2:12333","2:12335","2:12337","2:12339","2:12340","2:12341","2:12342","2:12343","2:12344","2:12345","2:12346","2:12347","2:12348","2:12349","2:12350","2:12351","2:12354","2:12357","2:12360","2:12364","2:12368","2:12371","2:12374","2:12377","2:12380","2:12383","2:12386","2:12389","2:12392","2:12395","2:12398","2:12401","2:12404","2:12407","2:12409","2:12411","2:12413","2:12414","2:12415","2:12418","2:12421","2:12424","2:12427","2:12430","2:12433","2:12436","2:12438","2:12439","2:12440","2:12441","2:12442","2:12444","2:12445"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:291":{"id":"0:291","crate_id":0,"name":"hash_stable","span":{"filename":"compiler/rustc_lint_defs/src/lib.rs","begin":[59,0],"end":[59,56]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["_",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"CTX"}}}],["hasher",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"$crate::stable_hasher::StableHasher","id":"29:1802","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"2:12668":{"id":"2:12668","crate_id":2,"name":"Future","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:12669","2:12670"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementors":[]}},"b:2:2933-0:194":{"id":"b:2:2933-0:194","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}},{"name":"U","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"From","id":"2:2910","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:2907","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"HardwiredLints","id":"0:194","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:2936"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:293":{"id":"0:293","crate_id":0,"name":"name","span":{"filename":"compiler/rustc_lint_defs/src/lib.rs","begin":[112,4],"end":[112,26]},"visibility":"public","docs":"A string identifier for the lint.\n\nThis identifies the lint in attributes and in command-line arguments.\nIn those contexts it is always lowercase, but this field is compared\nin a way which is case-insensitive for ASCII characters. This allows\n`declare_lint!()` invocations to follow the convention of upper-case\nstatics without repeating the name.\n\nThe name is written with underscores, e.g., \"unused_imports\".\nOn the command line, underscores become dashes.\n\nSee <https://rustc-dev-guide.rust-lang.org/diagnostics.html#lint-naming>\nfor naming guidelines.","links":{},"attrs":[],"deprecation":null,"kind":"struct_field","inner":{"kind":"borrowed_ref","inner":{"lifetime":"'static","mutable":false,"type":{"kind":"primitive","inner":"str"}}}},"2:12421":{"id":"2:12421","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"self::pattern":"2:11957","prim@char":"1:15260"},"attrs":["#[must_use =\n  \"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"str_strip\", since = \"1.45.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["prefix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:43419","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:11967","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"header":[],"abi":"\"Rust\"","has_body":true}},"1:7475":{"id":"1:7475","crate_id":1,"name":"Termination","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:7476"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementors":[]}},"0:187":{"id":"0:187","crate_id":0,"name":"USELESS_DEPRECATED","span":{"filename":"compiler/rustc_lint_defs/src/builtin.rs","begin":[2708,0],"end":[2732,1]},"visibility":"public","docs":"The `useless_deprecated` lint detects deprecation attributes with no effect.\n\n### Example\n\n```rust,compile_fail\nstruct X;\n\n#[deprecated = \"message\"]\nimpl Default for X {\n    fn default() -> Self {\n        X\n    }\n}\n```\n\n{{produces}}\n\n### Explanation\n\nDeprecation attributes have no effect on trait implementations.","links":{},"attrs":[],"deprecation":null,"kind":"static","inner":{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"$crate::Lint","id":"0:292","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"mutable":false,"expr":"&crate::Lint{name: \"USELESS_DEPRECATED\",\n             default_level: crate::Deny,\n             desc: \"detects deprecation attributes with no effect\",\n             edition_lint_opts: None,\n             is_plugin: false, ..crate::Lint::default_fields_for_macro()}"}},"b:2:2937-0:205":{"id":"b:2:2937-0:205","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"From","id":"2:2910","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"UnusedDocComment","id":"0:205","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:2939"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:3123":{"id":"2:3123","crate_id":2,"name":"Not","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3124","2:3125"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementors":[]}},"a:2:3004-0:339":{"id":"a:2:3004-0:339","crate_id":0,"name":null,"span":{"filename":"compiler/rustc_lint_defs/src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Send","id":"2:3004","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ExternDepSpec","id":"0:339","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:299":{"id":"0:299","crate_id":0,"name":"is_plugin","span":{"filename":"compiler/rustc_lint_defs/src/lib.rs","begin":[134,4],"end":[134,23]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"struct_field","inner":{"kind":"primitive","inner":"bool"}},"0:156":{"id":"0:156","crate_id":0,"name":"UNCONDITIONAL_RECURSION","span":{"filename":"compiler/rustc_lint_defs/src/builtin.rs","begin":[1466,0],"end":[1488,1]},"visibility":"public","docs":"The `unconditional_recursion` lint detects functions that cannot\nreturn without calling themselves.\n\n### Example\n\n```rust\nfn foo() {\n    foo();\n}\n```\n\n{{produces}}\n\n### Explanation\n\nIt is usually a mistake to have a recursive call that does not have\nsome condition to cause it to terminate. If you really intend to have\nan infinite loop, using a `loop` expression is recommended.","links":{},"attrs":[],"deprecation":null,"kind":"static","inner":{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"$crate::Lint","id":"0:292","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"mutable":false,"expr":"&crate::Lint{name: \"UNCONDITIONAL_RECURSION\",\n             default_level: crate::Warn,\n             desc: \"functions that cannot return without calling themselves\",\n             edition_lint_opts: None,\n             is_plugin: false, ..crate::Lint::default_fields_for_macro()}"}},"0:81":{"id":"0:81","crate_id":0,"name":null,"span":{"filename":"compiler/rustc_lint_defs/src/lib.rs","begin":[235,0],"end":[235,21]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"kind":"resolved_path","inner":{"name":"Eq","id":"2:2660","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"LintId","id":"0:332","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"b:2:2609-0:225":{"id":"b:2:2609-0:225","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3009","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Borrow","id":"2:2603","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Applicability","id":"0:225","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:2611"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:237":{"id":"0:237","crate_id":0,"name":null,"span":{"filename":"compiler/rustc_lint_defs/src/lib.rs","begin":[26,22],"end":[26,27]},"visibility":"crate","docs":null,"links":{},"attrs":["#[automatically_derived]","#[allow(unused_qualifications)]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Debug","id":"2:9354","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Applicability","id":"0:225","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:238"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:2901":{"id":"2:2901","crate_id":2,"name":"AsRef","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2903"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3009","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}]}}]},"bounds":[],"implementors":[]}},"b:2:2937-0:225":{"id":"b:2:2937-0:225","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"From","id":"2:2910","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Applicability","id":"0:225","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:2939"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"5:543":{"id":"5:543","crate_id":5,"name":"Owned","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"typedef","inner":{"type":{"kind":"generic","inner":"T"},"generics":{"params":[],"where_predicates":[]}}},"b:2:2937-0:352":{"id":"b:2:2937-0:352","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"From","id":"2:2910","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"BuiltinLintDiagnostics","id":"0:352","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:2939"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:169":{"id":"0:169","crate_id":0,"name":"MACRO_USE_EXTERN_CRATE","span":{"filename":"compiler/rustc_lint_defs/src/builtin.rs","begin":[1970,0],"end":[2022,1]},"visibility":"public","docs":"The `macro_use_extern_crate` lint detects the use of the\n[`macro_use` attribute].\n\n### Example\n\n```rust,ignore (needs extern crate)\n#![deny(macro_use_extern_crate)]\n\n#[macro_use]\nextern crate serde_json;\n\nfn main() {\n    let _ = json!{{}};\n}\n```\n\nThis will produce:\n\n```text\nerror: deprecated `#[macro_use]` attribute used to import macros should be replaced at use sites with a `use` item to import the macro instead\n --> src/main.rs:3:1\n  |\n3 | #[macro_use]\n  | ^^^^^^^^^^^^\n  |\nnote: the lint level is defined here\n --> src/main.rs:1:9\n  |\n1 | #![deny(macro_use_extern_crate)]\n  |         ^^^^^^^^^^^^^^^^^^^^^^\n```\n\n### Explanation\n\nThe [`macro_use` attribute] on an [`extern crate`] item causes\nmacros in that external crate to be brought into the prelude of the\ncrate, making the macros in scope everywhere. As part of the efforts\nto simplify handling of dependencies in the [2018 edition], the use of\n`extern crate` is being phased out. To bring macros from extern crates\ninto scope, it is recommended to use a [`use` import].\n\nThis lint is \"allow\" by default because this is a stylistic choice\nthat has not been settled, see [issue #52043] for more information.\n\n[`macro_use` attribute]: https://doc.rust-lang.org/reference/macros-by-example.html#the-macro_use-attribute\n[`use` import]: https://doc.rust-lang.org/reference/items/use-declarations.html\n[issue #52043]: https://github.com/rust-lang/rust/issues/52043","links":{},"attrs":[],"deprecation":null,"kind":"static","inner":{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"$crate::Lint","id":"0:292","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"mutable":false,"expr":"&crate::Lint{name: \"MACRO_USE_EXTERN_CRATE\",\n             default_level: crate::Allow,\n             desc:\n                 \"the `#[macro_use]` attribute is now deprecated in favor of using macros via the module system\",\n             edition_lint_opts: None,\n             is_plugin: false, ..crate::Lint::default_fields_for_macro()}"}},"2:3102":{"id":"2:3102","crate_id":2,"name":"AddAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3104"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"}}}}],"where_predicates":[]},"bounds":[],"implementors":[]}},"0:257":{"id":"0:257","crate_id":0,"name":"decode","span":{"filename":"compiler/rustc_lint_defs/src/lib.rs","begin":[26,57],"end":[26,66]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["__decoder",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"__D"}}}]],"output":{"kind":"resolved_path","inner":{"name":"::std::result::Result","id":"2:43545","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}},{"type":{"kind":"qualified_path","inner":{"name":"Error","self_type":{"kind":"generic","inner":"__D"},"trait":{"kind":"resolved_path","inner":{"name":"Decoder","id":"33:290","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"2:9365":{"id":"2:9365","crate_id":2,"name":"Binary","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:9366"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementors":[]}},"0:451":{"id":"0:451","crate_id":0,"name":null,"span":{"filename":"compiler/rustc_lint_defs/src/lib.rs","begin":[314,9],"end":[314,18]},"visibility":"crate","docs":null,"links":{},"attrs":["#[automatically_derived]","#[allow(unused_qualifications)]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"kind":"resolved_path","inner":{"name":"PartialEq","id":"2:2655","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"BufferedEarlyLint","id":"0:444","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"BufferedEarlyLint","id":"0:444","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:452","0:453"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:2:2612-0:444":{"id":"b:2:2612-0:444","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3009","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"BorrowMut","id":"2:2606","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"BufferedEarlyLint","id":"0:444","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:2614"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:300":{"id":"0:300","crate_id":0,"name":"feature_gate","span":{"filename":"compiler/rustc_lint_defs/src/lib.rs","begin":[137,4],"end":[137,36]},"visibility":"public","docs":"`Some` if this lint is feature gated, otherwise `None`.","links":{},"attrs":[],"deprecation":null,"kind":"struct_field","inner":{"kind":"resolved_path","inner":{"name":"Option","id":"2:43419","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Symbol","id":"22:4154","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}}},"0:0":{"id":"0:0","crate_id":0,"name":"rustc_lint_defs","span":{"filename":"compiler/rustc_lint_defs/src/lib.rs","begin":[1,0],"end":[552,1]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":true,"items":["0:47","0:4","0:225","0:260","0:292","0:307","0:316","0:332","0:339","0:352","0:444","0:454","0:107","0:108","0:64","0:104","0:105","0:106","0:110","0:111"]}},"b:5:541-0:316":{"id":"b:5:541-0:316","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2625","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"provided_trait_methods":["clone_into"],"trait":{"kind":"resolved_path","inner":{"name":"ToOwned","id":"5:537","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"FutureIncompatibilityReason","id":"0:316","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["5:543","5:544","5:545"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:343":{"id":"0:343","crate_id":0,"name":"Raw","span":{"filename":"compiler/rustc_lint_defs/src/lib.rs","begin":[280,4],"end":[280,15]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"tuple","variant_inner":[{"kind":"resolved_path","inner":{"name":"String","id":"5:7602","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}]}},"a:2:8324-0:332":{"id":"a:2:8324-0:332","crate_id":0,"name":null,"span":{"filename":"compiler/rustc_lint_defs/src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"UnwindSafe","id":"2:8324","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"LintId","id":"0:332","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:221":{"id":"0:221","crate_id":0,"name":"BREAK_WITH_LABEL_AND_LOOP","span":{"filename":"compiler/rustc_lint_defs/src/builtin.rs","begin":[3438,0],"end":[3465,1]},"visibility":"public","docs":"The `break_with_label_and_loop` lint detects labeled `break` expressions with\nan unlabeled loop as their value expression.\n\n### Example\n\n```rust\n'label: loop {\n    break 'label loop { break 42; };\n};\n```\n\n{{produces}}\n\n### Explanation\n\nIn Rust, loops can have a label, and `break` expressions can refer to that label to\nbreak out of specific loops (and not necessarily the innermost one). `break` expressions\ncan also carry a value expression, which can be another loop. A labeled `break` with an\nunlabeled loop as its value expression is easy to confuse with an unlabeled break with\na labeled loop and is thus discouraged (but allowed for compatibility); use parentheses\naround the loop expression to silence this warning. Unlabeled `break` expressions with\nlabeled loops yield a hard error, which can also be silenced by wrapping the expression\nin parentheses.","links":{},"attrs":[],"deprecation":null,"kind":"static","inner":{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"$crate::Lint","id":"0:292","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"mutable":false,"expr":"&crate::Lint{name: \"BREAK_WITH_LABEL_AND_LOOP\",\n             default_level: crate::Warn,\n             desc:\n                 \"`break` expression with label and unlabeled loop as value expression\",\n             edition_lint_opts: None,\n             is_plugin: false, ..crate::Lint::default_fields_for_macro()}"}},"0:272":{"id":"0:272","crate_id":0,"name":"clone","span":{"filename":"compiler/rustc_lint_defs/src/lib.rs","begin":[50,9],"end":[50,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Level","id":"0:260","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:139":{"id":"0:139","crate_id":0,"name":"TRIVIAL_CASTS","span":{"filename":"compiler/rustc_lint_defs/src/builtin.rs","begin":[834,0],"end":[868,1]},"visibility":"public","docs":"The `trivial_casts` lint detects trivial casts which could be replaced\nwith coercion, which may require [type ascription] or a temporary\nvariable.\n\n### Example\n\n```rust,compile_fail\n#![deny(trivial_casts)]\nlet x: &u32 = &42;\nlet y = x as *const u32;\n```\n\n{{produces}}\n\n### Explanation\n\nA trivial cast is a cast `e as T` where `e` has type `U` and `U` is a\nsubtype of `T`. This type of cast is usually unnecessary, as it can be\nusually be inferred.\n\nThis lint is \"allow\" by default because there are situations, such as\nwith FFI interfaces or complex type aliases, where it triggers\nincorrectly, or in situations where it will be more difficult to\nclearly express the intent. It may be possible that this will become a\nwarning in the future, possibly with [type ascription] providing a\nconvenient way to work around the current issues. See [RFC 401] for\nhistorical context.\n\n[type ascription]: https://github.com/rust-lang/rust/issues/23416\n[RFC 401]: https://github.com/rust-lang/rfcs/blob/master/text/0401-coercions.md","links":{},"attrs":[],"deprecation":null,"kind":"static","inner":{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"$crate::Lint","id":"0:292","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"mutable":false,"expr":"&crate::Lint{name: \"TRIVIAL_CASTS\",\n             default_level: crate::Allow,\n             desc: \"detects trivial casts which could be removed\",\n             edition_lint_opts: None,\n             is_plugin: false, ..crate::Lint::default_fields_for_macro()}"}},"2:11976":{"id":"2:11976","crate_id":2,"name":"Searcher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:11978","2:11979","2:11980","2:11981"],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[],"implementors":[]}},"0:453":{"id":"0:453","crate_id":0,"name":"ne","span":{"filename":"compiler/rustc_lint_defs/src/lib.rs","begin":[314,9],"end":[314,18]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"BufferedEarlyLint","id":"0:444","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"1:6427":{"id":"1:6427","crate_id":1,"name":"MetadataExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6428","1:6429","1:6430","1:6431","1:6432","1:6433","1:6434","1:6435","1:6436","1:6437","1:6438","1:6439","1:6440","1:6441","1:6442","1:6443","1:6444"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementors":[]}},"0:269":{"id":"0:269","crate_id":0,"name":"Forbid","span":{"filename":"compiler/rustc_lint_defs/src/lib.rs","begin":[56,4],"end":[56,10]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"0:274":{"id":"0:274","crate_id":0,"name":null,"span":{"filename":"compiler/rustc_lint_defs/src/lib.rs","begin":[50,22],"end":[50,31]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"StructuralPartialEq","id":"2:3012","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Level","id":"0:260","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"2:12331":{"id":"2:12331","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:43419"},"attrs":["#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]","#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:43419","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","self_type":{"kind":"generic","inner":"I"},"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:9929","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}}}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:9929","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:208":{"id":"0:208","crate_id":0,"name":null,"span":{"filename":"compiler/rustc_lint_defs/src/builtin.rs","begin":[3163,0],"end":[3163,61]},"visibility":{"restricted":{"parent":"0:47","path":"::builtin"}},"docs":null,"links":{},"attrs":["#[automatically_derived]","#[allow(unused_qualifications)]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2625","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"UnusedDocComment","id":"0:205","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:209"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:2606":{"id":"2:2606","crate_id":2,"name":"BorrowMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2608"],"generics":{"params":[{"name":"Borrowed","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"Borrowed"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3009","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}]}}]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Borrow","id":"2:2603","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Borrowed"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementors":[]}},"b:5:541-0:260":{"id":"b:5:541-0:260","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2625","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"provided_trait_methods":["clone_into"],"trait":{"kind":"resolved_path","inner":{"name":"ToOwned","id":"5:537","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Level","id":"0:260","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["5:543","5:544","5:545"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"1:6181":{"id":"1:6181","crate_id":1,"name":"CommandExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6182","1:6183","1:6184","1:6185","1:6187","1:6189","1:6190"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10173","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementors":[]}},"2:9375":{"id":"2:9375","crate_id":2,"name":"UpperExp","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:9376"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementors":[]}},"2:2952":{"id":"2:2952","crate_id":2,"name":"try_from","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["value",{"kind":"generic","inner":"U"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:43545","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"qualified_path","inner":{"name":"Error","self_type":{"kind":"generic","inner":"T"},"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:2917","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:368":{"id":"0:368","crate_id":0,"name":"ElidedLifetimesInPaths","span":{"filename":"compiler/rustc_lint_defs/src/lib.rs","begin":[292,4],"end":[292,59]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"tuple","variant_inner":[{"kind":"primitive","inner":"usize"},{"kind":"resolved_path","inner":{"name":"Span","id":"22:2708","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},{"kind":"primitive","inner":"bool"},{"kind":"resolved_path","inner":{"name":"Span","id":"22:2708","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},{"kind":"resolved_path","inner":{"name":"String","id":"5:7602","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}]}},"0:108":{"id":"0:108","crate_id":0,"name":"LintPass","span":{"filename":"compiler/rustc_lint_defs/src/lib.rs","begin":[527,0],"end":[529,1]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["0:109"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementors":["0:199","0:210"]}},"1:6532":{"id":"1:6532","crate_id":1,"name":"CommandExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6533"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10173","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementors":[]}},"0:317":{"id":"0:317","crate_id":0,"name":"FutureReleaseError","span":{"filename":"compiler/rustc_lint_defs/src/lib.rs","begin":[162,4],"end":[162,22]},"visibility":"default","docs":"This will be an error in a future release\nfor all editions","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"2:7426":{"id":"2:7426","crate_id":2,"name":"IntoIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:7427","2:7428","2:7429"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementors":[]}},"5:5420":{"id":"5:5420","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:196","`String`":"5:7602"},"attrs":["#[stable(feature = \"box_str\", since = \"1.4.0\")]","#[must_use = \"`self` will be dropped if the result is not used\"]","#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:196","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:7385","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7602","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"2:3371":{"id":"2:3371","crate_id":2,"name":"RangeBounds","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3373","2:3374","2:3375"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3009","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}]}}]},"bounds":[],"implementors":[]}},"2:2939":{"id":"2:2939","crate_id":2,"name":"from","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["t",{"kind":"generic","inner":"T"}]],"output":{"kind":"generic","inner":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":["const"],"abi":"\"Rust\"","has_body":true}},"5:5400":{"id":"5:5400","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[stable(feature = \"str_box_extras\", since = \"1.20.0\")]","#[must_use = \"`self` will be dropped if the result is not used\"]","#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:196","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:7385","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}}]],"output":{"kind":"resolved_path","inner":{"name":"Box","id":"5:196","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:7385","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:178":{"id":"0:178","crate_id":0,"name":"SOFT_UNSTABLE","span":{"filename":"compiler/rustc_lint_defs/src/builtin.rs","begin":[2342,0],"end":[2381,1]},"visibility":"public","docs":"The `soft_unstable` lint detects unstable features that were\nunintentionally allowed on stable.\n\n### Example\n\n```rust,compile_fail\n#[cfg(test)]\nextern crate test;\n\n#[bench]\nfn name(b: &mut test::Bencher) {\n    b.iter(|| 123)\n}\n```\n\n{{produces}}\n\n### Explanation\n\nThe [`bench` attribute] was accidentally allowed to be specified on\nthe [stable release channel]. Turning this to a hard error would have\nbroken some projects. This lint allows those projects to continue to\nbuild correctly when [`--cap-lints`] is used, but otherwise signal an\nerror that `#[bench]` should not be used on the stable channel. This\nis a [future-incompatible] lint to transition this to a hard error in\nthe future. See [issue #64266] for more details.\n\n[issue #64266]: https://github.com/rust-lang/rust/issues/64266\n[`bench` attribute]: https://doc.rust-lang.org/nightly/unstable-book/library-features/test.html\n[stable release channel]: https://doc.rust-lang.org/book/appendix-07-nightly-rust.html\n[`--cap-lints`]: https://doc.rust-lang.org/rustc/lints/levels.html#capping-lints\n[future-incompatible]: ../index.md#future-incompatible-lints","links":{},"attrs":[],"deprecation":null,"kind":"static","inner":{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"$crate::Lint","id":"0:292","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"mutable":false,"expr":"&crate::Lint{name: \"SOFT_UNSTABLE\",\n             default_level: crate::Deny,\n             desc: \"a feature gate that doesn\\'t break dependent crates\",\n             edition_lint_opts: None,\n             is_plugin: false,\n             future_incompatible:\n                 Some(crate::FutureIncompatibleInfo{reference:\n                                                        \"issue #64266 <https://github.com/rust-lang/rust/issues/64266>\",\n                                                                                                                           ..crate::FutureIncompatibleInfo::default_fields_for_macro()}),\n                                                                                                                                                                                            ..crate::Lint::default_fields_for_macro()}"}},"a:2:8324-0:292":{"id":"a:2:8324-0:292","crate_id":0,"name":null,"span":{"filename":"compiler/rustc_lint_defs/src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"UnwindSafe","id":"2:8324","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Lint","id":"0:292","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:454":{"id":"0:454","crate_id":0,"name":"LintBuffer","span":{"filename":"compiler/rustc_lint_defs/src/lib.rs","begin":[334,0],"end":[336,1]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"struct_type":"plain","generics":{"params":[],"where_predicates":[]},"fields_stripped":false,"fields":["0:455"],"impls":["0:96","a:2:3004-0:454","a:2:3016-0:454","a:2:3045-0:454","a:2:8324-0:454","a:2:8325-0:454","b:2:2937-0:454","b:2:2933-0:454","b:2:2948-0:454","b:2:2943-0:454","b:2:2609-0:454","b:2:2612-0:454","b:2:3667-0:454","0:456"]}},"b:5:541-0:332":{"id":"b:5:541-0:332","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2625","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"provided_trait_methods":["clone_into"],"trait":{"kind":"resolved_path","inner":{"name":"ToOwned","id":"5:537","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"LintId","id":"0:332","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["5:543","5:544","5:545"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:12436":{"id":"2:12436","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"2:11894","`FromStr`":"2:11894"},"attrs":["#[inline]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:43545","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"F"}},{"type":{"kind":"qualified_path","inner":{"name":"Err","self_type":{"kind":"generic","inner":"F"},"trait":{"kind":"resolved_path","inner":{"name":"FromStr","id":"2:11894","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FromStr","id":"2:11894","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:99":{"id":"0:99","crate_id":0,"name":"take","span":{"filename":"compiler/rustc_lint_defs/src/lib.rs","begin":[359,4],"end":[361,5]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["id",{"kind":"resolved_path","inner":{"name":"NodeId","id":"21:6504","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}]],"output":{"kind":"resolved_path","inner":{"name":"Vec","id":"5:7062","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"BufferedEarlyLint","id":"0:444","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:387":{"id":"0:387","crate_id":0,"name":"1","span":{"filename":"compiler/rustc_lint_defs/src/lib.rs","begin":[295,39],"end":[295,44]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"struct_field","inner":{"kind":"resolved_path","inner":{"name":"Ident","id":"22:4113","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}},"2:12341":{"id":"2:12341","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_mut":"1:15265"},"attrs":["#[inline]","#[must_use]","#[stable(feature = \"str_split_at\", since = \"1.4.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:398":{"id":"0:398","crate_id":0,"name":"0","span":{"filename":"compiler/rustc_lint_defs/src/lib.rs","begin":[298,21],"end":[298,25]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"struct_field","inner":{"kind":"resolved_path","inner":{"name":"Span","id":"22:2708","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}},"0:447":{"id":"0:447","crate_id":0,"name":"node_id","span":{"filename":"compiler/rustc_lint_defs/src/lib.rs","begin":[323,4],"end":[323,23]},"visibility":"public","docs":"The `NodeId` of the AST node that generated the lint.","links":{},"attrs":[],"deprecation":null,"kind":"struct_field","inner":{"kind":"resolved_path","inner":{"name":"NodeId","id":"21:6504","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}},"b:2:2933-0:352":{"id":"b:2:2933-0:352","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}},{"name":"U","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"From","id":"2:2910","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:2907","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"BuiltinLintDiagnostics","id":"0:352","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:2936"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:154":{"id":"0:154","crate_id":0,"name":"UNUSED_UNSAFE","span":{"filename":"compiler/rustc_lint_defs/src/builtin.rs","begin":[1425,0],"end":[1443,1]},"visibility":"public","docs":"The `unused_unsafe` lint detects unnecessary use of an `unsafe` block.\n\n### Example\n\n```rust\nunsafe {}\n```\n\n{{produces}}\n\n### Explanation\n\nIf nothing within the block requires `unsafe`, then remove the\n`unsafe` marker because it is not required and may cause confusion.","links":{},"attrs":[],"deprecation":null,"kind":"static","inner":{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"$crate::Lint","id":"0:292","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"mutable":false,"expr":"&crate::Lint{name: \"UNUSED_UNSAFE\",\n             default_level: crate::Warn,\n             desc: \"unnecessary use of an `unsafe` block\",\n             edition_lint_opts: None,\n             is_plugin: false, ..crate::Lint::default_fields_for_macro()}"}},"a:2:8325-0:307":{"id":"a:2:8325-0:307","crate_id":0,"name":null,"span":{"filename":"compiler/rustc_lint_defs/src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"RefUnwindSafe","id":"2:8325","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"FutureIncompatibleInfo","id":"0:307","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:13020":{"id":"2:13020","crate_id":2,"name":"GlobalAlloc","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:13021","2:13022","2:13023","2:13024"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementors":[]}},"2:3137":{"id":"2:3137","crate_id":2,"name":"BitXor","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3139","2:3140"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"}}}}],"where_predicates":[]},"bounds":[],"implementors":[]}},"b:2:2933-0:339":{"id":"b:2:2933-0:339","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}},{"name":"U","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"From","id":"2:2910","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:2907","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ExternDepSpec","id":"0:339","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:2936"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"a:2:8324-0:316":{"id":"a:2:8324-0:316","crate_id":0,"name":null,"span":{"filename":"compiler/rustc_lint_defs/src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"UnwindSafe","id":"2:8324","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"FutureIncompatibilityReason","id":"0:316","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"33:239":{"id":"33:239","crate_id":33,"name":"Encoder","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["33:240","33:241","33:242","33:243","33:244","33:245","33:246","33:247","33:248","33:249","33:250","33:251","33:252","33:253","33:254","33:255","33:256","33:257","33:258","33:259","33:260","33:262","33:264","33:266","33:268","33:270","33:272","33:274","33:276","33:278","33:280","33:282","33:284","33:286","33:288"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementors":[]}},"0:333":{"id":"0:333","crate_id":0,"name":"lint","span":{"filename":"compiler/rustc_lint_defs/src/lib.rs","begin":[226,4],"end":[226,27]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"struct_field","inner":{"kind":"borrowed_ref","inner":{"lifetime":"'static","mutable":false,"type":{"kind":"resolved_path","inner":{"name":"Lint","id":"0:292","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}},"b:2:2609-0:332":{"id":"b:2:2609-0:332","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3009","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Borrow","id":"2:2603","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"LintId","id":"0:332","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:2611"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:367":{"id":"0:367","crate_id":0,"name":"0","span":{"filename":"compiler/rustc_lint_defs/src/lib.rs","begin":[291,53],"end":[291,57]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"struct_field","inner":{"kind":"resolved_path","inner":{"name":"Span","id":"22:2708","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}},"b:2:2943-0:260":{"id":"b:2:2943-0:260","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}},{"name":"U","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:2917","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"TryInto","id":"2:2913","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Level","id":"0:260","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:2946","2:2947"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:383":{"id":"0:383","crate_id":0,"name":"1","span":{"filename":"compiler/rustc_lint_defs/src/lib.rs","begin":[294,26],"end":[294,45]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"struct_field","inner":{"kind":"resolved_path","inner":{"name":"Vec","id":"5:7062","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"resolved_path","inner":{"name":"Span","id":"22:2708","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},{"kind":"resolved_path","inner":{"name":"String","id":"5:7602","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}]}}],"bindings":[]}},"param_names":[]}}},"a:2:8325-0:444":{"id":"a:2:8325-0:444","crate_id":0,"name":null,"span":{"filename":"compiler/rustc_lint_defs/src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"RefUnwindSafe","id":"2:8325","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"BufferedEarlyLint","id":"0:444","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:68":{"id":"0:68","crate_id":0,"name":"from_symbol","span":{"filename":"compiler/rustc_lint_defs/src/lib.rs","begin":[85,4],"end":[93,5]},"visibility":"public","docs":"Converts a symbol to a level.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["x",{"kind":"resolved_path","inner":{"name":"Symbol","id":"22:4154","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:43419","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Level","id":"0:260","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:71":{"id":"0:71","crate_id":0,"name":null,"span":{"filename":"compiler/rustc_lint_defs/src/lib.rs","begin":[184,0],"end":[192,1]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"FutureIncompatibleInfo","id":"0:307","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:72"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:441":{"id":"0:441","crate_id":0,"name":"ne","span":{"filename":"compiler/rustc_lint_defs/src/lib.rs","begin":[285,9],"end":[285,18]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"BuiltinLintDiagnostics","id":"0:352","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:137":{"id":"0:137","crate_id":0,"name":"STABLE_FEATURES","span":{"filename":"compiler/rustc_lint_defs/src/builtin.rs","begin":[784,0],"end":[807,1]},"visibility":"public","docs":"The `stable_features` lint detects a [`feature` attribute] that\nhas since been made stable.\n\n[`feature` attribute]: https://doc.rust-lang.org/nightly/unstable-book/\n\n### Example\n\n```rust\n#![feature(test_accepted_feature)]\nfn main() {}\n```\n\n{{produces}}\n\n### Explanation\n\nWhen a feature is stabilized, it is no longer necessary to include a\n`#![feature]` attribute for it. To fix, simply remove the\n`#![feature]` attribute.","links":{},"attrs":[],"deprecation":null,"kind":"static","inner":{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"$crate::Lint","id":"0:292","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"mutable":false,"expr":"&crate::Lint{name: \"STABLE_FEATURES\",\n             default_level: crate::Warn,\n             desc: \"stable features found in `#[feature]` directive\",\n             edition_lint_opts: None,\n             is_plugin: false, ..crate::Lint::default_fields_for_macro()}"}},"a:2:3004-0:260":{"id":"a:2:3004-0:260","crate_id":0,"name":null,"span":{"filename":"compiler/rustc_lint_defs/src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Send","id":"2:3004","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Level","id":"0:260","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"1:6201":{"id":"1:6201","crate_id":1,"name":"ExitStatusExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6202","1:6203","1:6204","1:6205","1:6206","1:6207"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10173","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementors":[]}},"2:12371":{"id":"2:12371","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"1:15260","self::pattern":"2:11957"},"attrs":["#[stable(feature = \"split_inclusive\", since = \"1.51.0\")]","#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitInclusive","id":"2:11747","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:11967","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"header":[],"abi":"\"Rust\"","has_body":true}},"2:12357":{"id":"2:12357","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"1:15260","self::pattern":"2:11957"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:11967","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}},{"bound_predicate":{"ty":{"kind":"qualified_path","inner":{"name":"Searcher","self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:11967","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:11982","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"header":[],"abi":"\"Rust\"","has_body":true}},"b:2:3667-0:332":{"id":"b:2:3667-0:332","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3009","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Any","id":"2:3665","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"LintId","id":"0:332","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3669"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:204":{"id":"0:204","crate_id":0,"name":"RUST_2021_INCOMPATIBLE_CLOSURE_CAPTURES","span":{"filename":"compiler/rustc_lint_defs/src/builtin.rs","begin":[3084,0],"end":[3161,1]},"visibility":"public","docs":"The `rust_2021_incompatible_closure_captures` lint detects variables that aren't completely\ncaptured in Rust 2021, such that the `Drop` order of their fields may differ between\nRust 2018 and 2021.\n\nIt can also detect when a variable implements a trait like `Send`, but one of its fields does not,\nand the field is captured by a closure and used with the assumption that said field implements\nthe same trait as the root variable.\n\n### Example of drop reorder\n\n```rust,compile_fail\n#![deny(rust_2021_incompatible_closure_captures)]\n# #![allow(unused)]\n\nstruct FancyInteger(i32);\n\nimpl Drop for FancyInteger {\n    fn drop(&mut self) {\n        println!(\"Just dropped {}\", self.0);\n    }\n}\n\nstruct Point { x: FancyInteger, y: FancyInteger }\n\nfn main() {\n  let p = Point { x: FancyInteger(10), y: FancyInteger(20) };\n\n  let c = || {\n     let x = p.x;\n  };\n\n  c();\n\n  // ... More code ...\n}\n```\n\n{{produces}}\n\n### Explanation\n\nIn the above example, `p.y` will be dropped at the end of `f` instead of\nwith `c` in Rust 2021.\n\n### Example of auto-trait\n\n```rust,compile_fail\n#![deny(rust_2021_incompatible_closure_captures)]\nuse std::thread;\n\nstruct Pointer(*mut i32);\nunsafe impl Send for Pointer {}\n\nfn main() {\n    let mut f = 10;\n    let fptr = Pointer(&mut f as *mut i32);\n    thread::spawn(move || unsafe {\n        *fptr.0 = 20;\n    });\n}\n```\n\n{{produces}}\n\n### Explanation\n\nIn the above example, only `fptr.0` is captured in Rust 2021.\nThe field is of type `*mut i32`, which doesn't implement `Send`,\nmaking the code invalid as the field cannot be sent between threads safely.","links":{},"attrs":[],"deprecation":null,"kind":"static","inner":{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"$crate::Lint","id":"0:292","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"mutable":false,"expr":"&crate::Lint{name: \"RUST_2021_INCOMPATIBLE_CLOSURE_CAPTURES\",\n             default_level: crate::Allow,\n             desc: \"detects closures affected by Rust 2021 changes\",\n             edition_lint_opts: None,\n             is_plugin: false,\n             future_incompatible:\n                 Some(crate::FutureIncompatibleInfo{reason:\n                                                        FutureIncompatibilityReason::EditionSemanticsChange(Edition::Edition2021),\n                                                    explain_reason:\n                                                        false,\n                                                                 ..crate::FutureIncompatibleInfo::default_fields_for_macro()}),\n                                                                                                                                  ..crate::Lint::default_fields_for_macro()}"}},"0:391":{"id":"0:391","crate_id":0,"name":"1","span":{"filename":"compiler/rustc_lint_defs/src/lib.rs","begin":[296,36],"end":[296,40]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"struct_field","inner":{"kind":"resolved_path","inner":{"name":"Span","id":"22:2708","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}},"0:140":{"id":"0:140","crate_id":0,"name":"TRIVIAL_NUMERIC_CASTS","span":{"filename":"compiler/rustc_lint_defs/src/builtin.rs","begin":[870,0],"end":[901,1]},"visibility":"public","docs":"The `trivial_numeric_casts` lint detects trivial numeric casts of types\nwhich could be removed.\n\n### Example\n\n```rust,compile_fail\n#![deny(trivial_numeric_casts)]\nlet x = 42_i32 as i32;\n```\n\n{{produces}}\n\n### Explanation\n\nA trivial numeric cast is a cast of a numeric type to the same numeric\ntype. This type of cast is usually unnecessary.\n\nThis lint is \"allow\" by default because there are situations, such as\nwith FFI interfaces or complex type aliases, where it triggers\nincorrectly, or in situations where it will be more difficult to\nclearly express the intent. It may be possible that this will become a\nwarning in the future, possibly with [type ascription] providing a\nconvenient way to work around the current issues. See [RFC 401] for\nhistorical context.\n\n[type ascription]: https://github.com/rust-lang/rust/issues/23416\n[RFC 401]: https://github.com/rust-lang/rfcs/blob/master/text/0401-coercions.md","links":{},"attrs":[],"deprecation":null,"kind":"static","inner":{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"$crate::Lint","id":"0:292","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"mutable":false,"expr":"&crate::Lint{name: \"TRIVIAL_NUMERIC_CASTS\",\n             default_level: crate::Allow,\n             desc:\n                 \"detects trivial casts of numeric types which could be removed\",\n             edition_lint_opts: None,\n             is_plugin: false, ..crate::Lint::default_fields_for_macro()}"}},"2:7385":{"id":"2:7385","crate_id":2,"name":"Sum","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:7387"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"}}}}],"where_predicates":[]},"bounds":[],"implementors":[]}},"0:142":{"id":"0:142","crate_id":0,"name":"EXPORTED_PRIVATE_DEPENDENCIES","span":{"filename":"compiler/rustc_lint_defs/src/builtin.rs","begin":[941,0],"end":[985,1]},"visibility":"public","docs":"The `exported_private_dependencies` lint detects private dependencies\nthat are exposed in a public interface.\n\n### Example\n\n```rust,ignore (needs-dependency)\npub fn foo() -> Option<some_private_dependency::Thing> {\n    None\n}\n```\n\nThis will produce:\n\n```text\nwarning: type `bar::Thing` from private dependency 'bar' in public interface\n --> src/lib.rs:3:1\n  |\n3 | pub fn foo() -> Option<bar::Thing> {\n  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  |\n  = note: `#[warn(exported_private_dependencies)]` on by default\n```\n\n### Explanation\n\nDependencies can be marked as \"private\" to indicate that they are not\nexposed in the public interface of a crate. This can be used by Cargo\nto independently resolve those dependencies because it can assume it\ndoes not need to unify them with other packages using that same\ndependency. This lint is an indication of a violation of that\ncontract.\n\nTo fix this, avoid exposing the dependency in your public interface.\nOr, switch the dependency to a public dependency.\n\nNote that support for this is only available on the nightly channel.\nSee [RFC 1977] for more details, as well as the [Cargo documentation].\n\n[RFC 1977]: https://github.com/rust-lang/rfcs/blob/master/text/1977-public-private-dependencies.md\n[Cargo documentation]: https://doc.rust-lang.org/nightly/cargo/reference/unstable.html#public-dependency","links":{},"attrs":[],"deprecation":null,"kind":"static","inner":{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"$crate::Lint","id":"0:292","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"mutable":false,"expr":"&crate::Lint{name: \"EXPORTED_PRIVATE_DEPENDENCIES\",\n             default_level: crate::Warn,\n             desc: \"public interface leaks type from a private dependency\",\n             edition_lint_opts: None,\n             is_plugin: false, ..crate::Lint::default_fields_for_macro()}"}},"a:2:3016-0:332":{"id":"a:2:3016-0:332","crate_id":0,"name":null,"span":{"filename":"compiler/rustc_lint_defs/src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Sync","id":"2:3016","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"LintId","id":"0:332","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:2611":{"id":"2:2611","crate_id":2,"name":"borrow","span":null,"visibility":"public","docs":null,"links":{},"attrs":["#[rustc_diagnostic_item = \"noop_method_borrow\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"2:3071":{"id":"2:3071","crate_id":2,"name":"Add","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3073","2:3074"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"}}}}],"where_predicates":[]},"bounds":[],"implementors":[]}},"0:456":{"id":"0:456","crate_id":0,"name":null,"span":{"filename":"compiler/rustc_lint_defs/src/lib.rs","begin":[333,9],"end":[333,16]},"visibility":"crate","docs":null,"links":{},"attrs":["#[automatically_derived]","#[allow(unused_qualifications)]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Default","id":"2:2982","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"LintBuffer","id":"0:454","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:457"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:2:2937-0:444":{"id":"b:2:2937-0:444","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"From","id":"2:2910","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"BufferedEarlyLint","id":"0:444","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:2939"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:136":{"id":"0:136","crate_id":0,"name":"UNUSED_FEATURES","span":{"filename":"compiler/rustc_lint_defs/src/builtin.rs","begin":[769,0],"end":[782,1]},"visibility":"public","docs":"The `unused_features` lint detects unused or unknown features found in\ncrate-level [`feature` attributes].\n\n[`feature` attributes]: https://doc.rust-lang.org/nightly/unstable-book/\n\nNote: This lint is currently not functional, see [issue #44232] for\nmore details.\n\n[issue #44232]: https://github.com/rust-lang/rust/issues/44232","links":{},"attrs":[],"deprecation":null,"kind":"static","inner":{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"$crate::Lint","id":"0:292","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"mutable":false,"expr":"&crate::Lint{name: \"UNUSED_FEATURES\",\n             default_level: crate::Warn,\n             desc:\n                 \"unused features found in crate-level `#[feature]` directives\",\n             edition_lint_opts: None,\n             is_plugin: false, ..crate::Lint::default_fields_for_macro()}"}},"0:321":{"id":"0:321","crate_id":0,"name":"EditionError","span":{"filename":"compiler/rustc_lint_defs/src/lib.rs","begin":[168,4],"end":[168,25]},"visibility":"default","docs":"Previously accepted code that will become an\nerror in the provided edition","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"tuple","variant_inner":[{"kind":"resolved_path","inner":{"name":"Edition","id":"22:1818","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}]}},"0:47":{"id":"0:47","crate_id":0,"name":"builtin","span":{"filename":"compiler/rustc_lint_defs/src/builtin.rs","begin":[1,0],"end":[3594,1]},"visibility":"public","docs":"Some lints that are built in to the compiler.\n\nThese are the built-in lints that are emitted direct in the main\ncompiler code, rather than using their own custom pass. Those\nlints are all available in `rustc_lint::builtin`.","links":{},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:112","0:113","0:114","0:115","0:116","0:117","0:118","0:119","0:120","0:121","0:122","0:123","0:124","0:125","0:126","0:127","0:128","0:129","0:130","0:131","0:132","0:133","0:134","0:135","0:136","0:137","0:138","0:139","0:140","0:141","0:142","0:143","0:144","0:145","0:146","0:147","0:148","0:149","0:150","0:151","0:152","0:153","0:154","0:155","0:156","0:157","0:158","0:159","0:160","0:161","0:162","0:163","0:164","0:165","0:166","0:167","0:168","0:169","0:170","0:171","0:172","0:173","0:174","0:175","0:176","0:177","0:178","0:179","0:180","0:181","0:182","0:183","0:184","0:185","0:186","0:187","0:188","0:189","0:190","0:191","0:192","0:193","0:194","0:203","0:204","0:205","0:214","0:215","0:216","0:217","0:218","0:219","0:220","0:221","0:222","0:223","0:224"]}},"2:12329":{"id":"2:12329","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"1:15265","`u8`":"1:15274"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"rustc_str_as_ptr\", since = \"1.32.0\")]","#[must_use]","#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":false,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":["const"],"abi":"\"Rust\"","has_body":true}},"b:2:2609-0:292":{"id":"b:2:2609-0:292","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3009","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Borrow","id":"2:2603","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Lint","id":"0:292","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:2611"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:12328":{"id":"2:12328","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[stable(feature = \"str_mut_extras\", since = \"1.20.0\")]","#[must_use]","#[inline(always)]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":["unsafe"],"abi":"\"Rust\"","has_body":true}},"0:285":{"id":"0:285","crate_id":0,"name":"fmt","span":{"filename":"compiler/rustc_lint_defs/src/lib.rs","begin":[50,54],"end":[50,59]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Formatter","id":"2:9315","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Result","id":"2:9304","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:352":{"id":"0:352","crate_id":0,"name":"BuiltinLintDiagnostics","span":{"filename":"compiler/rustc_lint_defs/src/lib.rs","begin":[286,0],"end":[310,1]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"enum","inner":{"generics":{"params":[],"where_predicates":[]},"variants_stripped":false,"variants":["0:353","0:355","0:359","0:362","0:365","0:368","0:375","0:380","0:384","0:388","0:392","0:396","0:399","0:403","0:407","0:410","0:414","0:417","0:421","0:424","0:428","0:431","0:434"],"impls":["a:2:3004-0:352","a:2:3016-0:352","a:2:3045-0:352","a:2:8324-0:352","a:2:8325-0:352","b:2:2937-0:352","b:2:2933-0:352","b:2:2948-0:352","b:2:2943-0:352","b:2:2609-0:352","b:2:2612-0:352","b:2:3667-0:352","0:439","0:442","0:438"]}},"0:263":{"id":"0:263","crate_id":0,"name":"Warn","span":{"filename":"compiler/rustc_lint_defs/src/lib.rs","begin":[53,4],"end":[53,8]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"0:433":{"id":"0:433","crate_id":0,"name":"0","span":{"filename":"compiler/rustc_lint_defs/src/lib.rs","begin":[308,18],"end":[308,24]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"struct_field","inner":{"kind":"resolved_path","inner":{"name":"String","id":"5:7602","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}},"0:378":{"id":"0:378","crate_id":0,"name":"1","span":{"filename":"compiler/rustc_lint_defs/src/lib.rs","begin":[293,28],"end":[293,34]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"struct_field","inner":{"kind":"resolved_path","inner":{"name":"String","id":"5:7602","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}},"2:12330":{"id":"2:12330","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:15274"},"attrs":["#[stable(feature = \"str_as_mut_ptr\", since = \"1.36.0\")]","#[must_use]","#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":true,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"2:12380":{"id":"2:12380","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"prim@char":"1:15260","self::pattern":"2:11957","str::split":"1:15265","str::split_terminator":"1:15265"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitTerminator","id":"2:45335","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:11967","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}},{"bound_predicate":{"ty":{"kind":"qualified_path","inner":{"name":"Searcher","self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:11967","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:11982","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:328":{"id":"0:328","crate_id":0,"name":null,"span":{"filename":"compiler/rustc_lint_defs/src/lib.rs","begin":[158,15],"end":[158,20]},"visibility":"crate","docs":null,"links":{},"attrs":["#[automatically_derived]","#[allow(unused_qualifications)]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2625","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"FutureIncompatibilityReason","id":"0:316","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:329"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:205":{"id":"0:205","crate_id":0,"name":"UnusedDocComment","span":{"filename":"compiler/rustc_lint_defs/src/builtin.rs","begin":[3163,0],"end":[3163,61]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"struct_type":"unit","generics":{"params":[],"where_predicates":[]},"fields_stripped":false,"fields":[],"impls":["0:212","a:2:3004-0:205","a:2:3016-0:205","a:2:3045-0:205","a:2:8324-0:205","a:2:8325-0:205","b:2:2937-0:205","b:2:2933-0:205","b:5:541-0:205","b:2:2948-0:205","b:2:2943-0:205","b:2:2609-0:205","b:2:2612-0:205","b:2:3667-0:205","0:210","0:208","0:207"]}},"0:361":{"id":"0:361","crate_id":0,"name":"0","span":{"filename":"compiler/rustc_lint_defs/src/lib.rs","begin":[289,22],"end":[289,26]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"struct_field","inner":{"kind":"resolved_path","inner":{"name":"Span","id":"22:2708","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}},"0:428":{"id":"0:428","crate_id":0,"name":"BreakWithLabelAndLoop","span":{"filename":"compiler/rustc_lint_defs/src/lib.rs","begin":[307,4],"end":[307,31]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"tuple","variant_inner":[{"kind":"resolved_path","inner":{"name":"Span","id":"22:2708","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}]}},"b:2:2612-0:316":{"id":"b:2:2612-0:316","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3009","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"BorrowMut","id":"2:2606","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"FutureIncompatibilityReason","id":"0:316","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:2614"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:442":{"id":"0:442","crate_id":0,"name":null,"span":{"filename":"compiler/rustc_lint_defs/src/lib.rs","begin":[285,20],"end":[285,25]},"visibility":"crate","docs":null,"links":{},"attrs":["#[automatically_derived]","#[allow(unused_qualifications)]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Debug","id":"2:9354","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"BuiltinLintDiagnostics","id":"0:352","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:443"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:280":{"id":"0:280","crate_id":0,"name":null,"span":{"filename":"compiler/rustc_lint_defs/src/lib.rs","begin":[50,45],"end":[50,47]},"visibility":"crate","docs":null,"links":{},"attrs":["#[automatically_derived]","#[allow(unused_qualifications)]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"kind":"resolved_path","inner":{"name":"Eq","id":"2:2660","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Level","id":"0:260","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:216":{"id":"0:216","crate_id":0,"name":"PROC_MACRO_BACK_COMPAT","span":{"filename":"compiler/rustc_lint_defs/src/builtin.rs","begin":[3219,0],"end":[3264,1]},"visibility":"public","docs":"The `proc_macro_back_compat` lint detects uses of old versions of certain\nproc-macro crates, which have hardcoded workarounds in the compiler.\n\n### Example\n\n```rust,ignore (needs-dependency)\n\nuse time_macros_impl::impl_macros;\nstruct Foo;\nimpl_macros!(Foo);\n```\n\nThis will produce:\n\n```text\nwarning: using an old version of `time-macros-impl`\n  ::: $DIR/group-compat-hack.rs:27:5\n   |\nLL |     impl_macros!(Foo);\n   |     ------------------ in this macro invocation\n   |\n   = note: `#[warn(proc_macro_back_compat)]` on by default\n   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n   = note: for more information, see issue #83125 <https://github.com/rust-lang/rust/issues/83125>\n   = note: the `time-macros-impl` crate will stop compiling in futures version of Rust. Please update to the latest version of the `time` crate to avoid breakage\n   = note: this warning originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n```\n\n### Explanation\n\nEventually, the backwards-compatibility hacks present in the compiler will be removed,\ncausing older versions of certain crates to stop compiling.\nThis is a [future-incompatible] lint to ease the transition to an error.\nSee [issue #83125] for more details.\n\n[issue #83125]: https://github.com/rust-lang/rust/issues/83125\n[future-incompatible]: ../index.md#future-incompatible-lints","links":{},"attrs":[],"deprecation":null,"kind":"static","inner":{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"$crate::Lint","id":"0:292","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"mutable":false,"expr":"&crate::Lint{name: \"PROC_MACRO_BACK_COMPAT\",\n             default_level: crate::Deny,\n             desc:\n                 \"detects usage of old versions of certain proc-macro crates\",\n             edition_lint_opts: None,\n             is_plugin: false,\n             future_incompatible:\n                 Some(crate::FutureIncompatibleInfo{reference:\n                                                        \"issue #83125 <https://github.com/rust-lang/rust/issues/83125>\",\n                                                    reason:\n                                                        FutureIncompatibilityReason::FutureReleaseErrorReportNow,\n                                                                                                                    ..crate::FutureIncompatibleInfo::default_fields_for_macro()}),\n                                                                                                                                                                                     ..crate::Lint::default_fields_for_macro()}"}},"0:114":{"id":"0:114","crate_id":0,"name":"CONFLICTING_REPR_HINTS","span":{"filename":"compiler/rustc_lint_defs/src/builtin.rs","begin":[82,0],"end":[115,1]},"visibility":"public","docs":"The `conflicting_repr_hints` lint detects [`repr` attributes] with\nconflicting hints.\n\n[`repr` attributes]: https://doc.rust-lang.org/reference/type-layout.html#representations\n\n### Example\n\n```rust,compile_fail\n#[repr(u32, u64)]\nenum Foo {\n    Variant1,\n}\n```\n\n{{produces}}\n\n### Explanation\n\nThe compiler incorrectly accepted these conflicting representations in\nthe past. This is a [future-incompatible] lint to transition this to a\nhard error in the future. See [issue #68585] for more details.\n\nTo correct the issue, remove one of the conflicting hints.\n\n[issue #68585]: https://github.com/rust-lang/rust/issues/68585\n[future-incompatible]: ../index.md#future-incompatible-lints","links":{},"attrs":[],"deprecation":null,"kind":"static","inner":{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"$crate::Lint","id":"0:292","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"mutable":false,"expr":"&crate::Lint{name: \"CONFLICTING_REPR_HINTS\",\n             default_level: crate::Deny,\n             desc:\n                 \"conflicts between `#[repr(..)]` hints that were previously accepted and used in practice\",\n             edition_lint_opts: None,\n             is_plugin: false,\n             future_incompatible:\n                 Some(crate::FutureIncompatibleInfo{reference:\n                                                        \"issue #68585 <https://github.com/rust-lang/rust/issues/68585>\",\n                                                                                                                           ..crate::FutureIncompatibleInfo::default_fields_for_macro()}),\n                                                                                                                                                                                            ..crate::Lint::default_fields_for_macro()}"}},"2:3215":{"id":"2:3215","crate_id":2,"name":"Deref","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3216","2:3217"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementors":[]}},"b:2:3667-0:352":{"id":"b:2:3667-0:352","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3009","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Any","id":"2:3665","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"BuiltinLintDiagnostics","id":"0:352","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3669"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:104":{"id":"0:104","crate_id":0,"name":"declare_lint","span":{"filename":"compiler/rustc_lint_defs/src/lib.rs","begin":[443,0],"end":[482,1]},"visibility":"public","docs":"Declares a static item of type `&'static Lint`.\n\nSee <https://rustc-dev-guide.rust-lang.org/diagnostics.html> for\ndocumentation and guidelines on writing lints.\n\nThe macro call should start with a doc comment explaining the lint\nwhich will be embedded in the rustc user documentation book. It should\nbe written in markdown and have a format that looks like this:\n\n```rust,ignore (doc-example)\n/// The `my_lint_name` lint detects [short explanation here].\n///\n/// ### Example\n///\n/// ```rust\n/// [insert a concise example that triggers the lint]\n/// ```\n///\n/// {{produces}}\n///\n/// ### Explanation\n///\n/// This should be a detailed explanation of *why* the lint exists,\n/// and also include suggestions on how the user should fix the problem.\n/// Try to keep the text simple enough that a beginner can understand,\n/// and include links to other documentation for terminology that a\n/// beginner may not be familiar with. If this is \"allow\" by default,\n/// it should explain why (are there false positives or other issues?). If\n/// this is a future-incompatible lint, it should say so, with text that\n/// looks roughly like this:\n///\n/// This is a [future-incompatible] lint to transition this to a hard\n/// error in the future. See [issue #xxxxx] for more details.\n///\n/// [issue #xxxxx]: https://github.com/rust-lang/rust/issues/xxxxx\n```\n\nThe `{{produces}}` tag will be automatically replaced with the output from\nthe example by the build system. If the lint example is too complex to run\nas a simple example (for example, it needs an extern crate), mark the code\nblock with `ignore` and manually replace the `{{produces}}` line with the\nexpected output in a `text` code block.\n\nIf this is a rustdoc-only lint, then only include a brief introduction\nwith a link with the text `[rustdoc book]` so that the validator knows\nthat this is for rustdoc only (see BROKEN_INTRA_DOC_LINKS as an example).\n\nCommands to view and test the documentation:\n\n* `./x.py doc --stage=1 src/doc/rustc --open`: Builds the rustc book and opens it.\n* `./x.py test src/tools/lint-docs`: Validates that the lint docs have the\n  correct style, and that the code example actually emits the expected\n  lint.\n\nIf you have already built the compiler, and you want to make changes to\njust the doc comments, then use the `--keep-stage=0` flag with the above\ncommands to avoid rebuilding the compiler.","links":{},"attrs":["#[macro_export]"],"deprecation":null,"kind":"macro","inner":"macro_rules! declare_lint {\n    ($(#[$attr : meta]) * $vis : vis $NAME : ident, $Level : ident, $desc : expr) => { ... };\n    ($(#[$attr : meta]) * $vis : vis $NAME : ident, $Level : ident, $desc : expr,\n $(@ feature_gate = $gate : expr ;) ?\n $(@ future_incompatible = FutureIncompatibleInfo\n   { $($field : ident : $val : expr), * $(,) * } ;) ? $($v : ident), *) => { ... };\n    ($(#[$attr : meta]) * $vis : vis $NAME : ident, $Level : ident, $desc : expr,\n $lint_edition : expr => $edition_level : ident) => { ... };\n}"},"a:2:8324-0:225":{"id":"a:2:8324-0:225","crate_id":0,"name":null,"span":{"filename":"compiler/rustc_lint_defs/src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"UnwindSafe","id":"2:8324","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Applicability","id":"0:225","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:95":{"id":"0:95","crate_id":0,"name":"to_stable_hash_key","span":{"filename":"compiler/rustc_lint_defs/src/lib.rs","begin":[271,4],"end":[273,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["_",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"HCX"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'static","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}},"0:347":{"id":"0:347","crate_id":0,"name":null,"span":{"filename":"compiler/rustc_lint_defs/src/lib.rs","begin":[277,9],"end":[277,18]},"visibility":"crate","docs":null,"links":{},"attrs":["#[automatically_derived]","#[allow(unused_qualifications)]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"kind":"resolved_path","inner":{"name":"PartialEq","id":"2:2655","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"ExternDepSpec","id":"0:339","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ExternDepSpec","id":"0:339","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:348","0:349"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:2913":{"id":"2:2913","crate_id":2,"name":"TryInto","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2915","2:2916"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[]},"bounds":[],"implementors":[]}},"0:190":{"id":"0:190","crate_id":0,"name":"INEFFECTIVE_UNSTABLE_TRAIT_IMPL","span":{"filename":"compiler/rustc_lint_defs/src/builtin.rs","begin":[2812,0],"end":[2837,1]},"visibility":"public","docs":"The `ineffective_unstable_trait_impl` lint detects `#[unstable]` attributes which are not used.\n\n### Example\n\n```compile_fail\n#![feature(staged_api)]\n\n#[derive(Clone)]\n#[stable(feature = \"x\", since = \"1\")]\nstruct S {}\n\n#[unstable(feature = \"y\", issue = \"none\")]\nimpl Copy for S {}\n```\n\n{{produces}}\n\n### Explanation\n\n`staged_api` does not currently support using a stability attribute on `impl` blocks.\n`impl`s are always stable if both the type and trait are stable, and always unstable otherwise.","links":{},"attrs":[],"deprecation":null,"kind":"static","inner":{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"$crate::Lint","id":"0:292","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"mutable":false,"expr":"&crate::Lint{name: \"INEFFECTIVE_UNSTABLE_TRAIT_IMPL\",\n             default_level: crate::Deny,\n             desc:\n                 \"detects `#[unstable]` on stable trait implementations for stable types\",\n             edition_lint_opts: None,\n             is_plugin: false, ..crate::Lint::default_fields_for_macro()}"}},"0:232":{"id":"0:232","crate_id":0,"name":"Unspecified","span":{"filename":"compiler/rustc_lint_defs/src/lib.rs","begin":[46,4],"end":[46,15]},"visibility":"default","docs":"The applicability of the suggestion is unknown.","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"b:2:2948-0:444":{"id":"b:2:2948-0:444","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}},{"name":"U","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:2907","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:2917","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"BufferedEarlyLint","id":"0:444","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:2951","2:2952"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:2609-0:307":{"id":"b:2:2609-0:307","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3009","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Borrow","id":"2:2603","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"FutureIncompatibleInfo","id":"0:307","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:2611"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:2948-0:260":{"id":"b:2:2948-0:260","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null}}},{"name":"U","kind":{"type":{"bounds":[],"default":null}}}],"where_predicates":[{"bound_predicate":{"ty":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:2907","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:2917","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Level","id":"0:260","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:2951","2:2952"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:283":{"id":"0:283","crate_id":0,"name":"cmp","span":{"filename":"compiler/rustc_lint_defs/src/lib.rs","begin":[50,49],"end":[50,52]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"Level","id":"0:260","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"$crate::cmp::Ordering","id":"2:33722","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":[],"abi":"\"Rust\"","has_body":true}}},"paths":{"22:2558":{"crate_id":22,"path":["rustc_span","def_id","DefPathHash"],"kind":"struct"},"2:45371":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"52:1248":{"crate_id":52,"path":["rand","distributions","other","Alphanumeric"],"kind":"struct"},"21:7261":{"crate_id":21,"path":["rustc_ast","tokenstream","TokenStreamBuilder"],"kind":"struct"},"58:113":{"crate_id":58,"path":["memmap2","MmapRaw"],"kind":"struct"},"15:12507":{"crate_id":15,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"15:12582":{"crate_id":15,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"47:370":{"crate_id":47,"path":["lock_api","remutex","ReentrantMutexGuard"],"kind":"struct"},"1:5823":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"39:3902":{"crate_id":39,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"15:9368":{"crate_id":15,"path":["object","endian","U64Bytes"],"kind":"struct"},"1:7237":{"crate_id":1,"path":["rustc_lint_defs","IntoIter"],"kind":"typedef"},"22:1449":{"crate_id":22,"path":["rustc_span","caching_source_map_view","CachingSourceMapView"],"kind":"struct"},"75:4120":{"crate_id":75,"path":["rustc_target","asm","bpf","BpfInlineAsmReg"],"kind":"enum"},"9:413":{"crate_id":9,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"1:14245":{"crate_id":1,"path":["std","sys","unix","process","process_inner","{{impl}}","posix_spawn","PosixSpawnattr"],"kind":"struct"},"6:606":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"5:5721":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"15:13598":{"crate_id":15,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"25:1166":{"crate_id":25,"path":["tracing_core","parent","Parent"],"kind":"enum"},"1:10283":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"0:119":{"crate_id":0,"path":["rustc_lint_defs","builtin","CONST_ERR"],"kind":"static"},"6:5149":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"29:3338":{"crate_id":29,"path":["rustc_data_structures","graph","dominators","Dominators"],"kind":"struct"},"39:3985":{"crate_id":39,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"15:9839":{"crate_id":15,"path":["object","read","any","SymbolTable"],"kind":"struct"},"39:3772":{"crate_id":39,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"39:6620":{"crate_id":39,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"5:7400":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"6:1608":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"73:273":{"crate_id":73,"path":["rustc_lexer","DocStyle"],"kind":"enum"},"29:813":{"crate_id":29,"path":["rustc_data_structures","owning_ref","OwningRefMut"],"kind":"struct"},"9:748":{"crate_id":9,"path":["hashbrown","map","Keys"],"kind":"struct"},"15:11015":{"crate_id":15,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"21:3355":{"crate_id":21,"path":["rustc_ast","ast","ExprField"],"kind":"struct"},"33:290":{"crate_id":33,"path":["rustc_serialize","serialize","Decoder"],"kind":"trait"},"71:0":{"crate_id":71,"path":["sha2"],"kind":"module"},"15:9162":{"crate_id":15,"path":["object","common","FileFlags"],"kind":"enum"},"15:9065":{"crate_id":15,"path":["object","common","SymbolScope"],"kind":"enum"},"21:4053":{"crate_id":21,"path":["rustc_ast","ast","MacroDef"],"kind":"struct"},"1:5388":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"15:10887":{"crate_id":15,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"6:5839":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"1:7863":{"crate_id":1,"path":["std","sync","mpsc","spsc_queue","Queue"],"kind":"struct"},"21:3486":{"crate_id":21,"path":["rustc_ast","ast","RangeLimits"],"kind":"enum"},"39:4063":{"crate_id":39,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"2:4709":{"crate_id":2,"path":["rustc_lint_defs","Target"],"kind":"typedef"},"22:1458":{"crate_id":22,"path":["rustc_span","source_map","Spanned"],"kind":"struct"},"5:5152":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"15:12182":{"crate_id":15,"path":["object","macho","DylibCommand"],"kind":"struct"},"6:3762":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"6:6610":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"1:10584":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"2:49354":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"34:0":{"crate_id":34,"path":["smallvec"],"kind":"module"},"37:35":{"crate_id":37,"path":["rustc_hash","FxHasher"],"kind":"struct"},"6:5045":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"1:11108":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"19:0":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"39:4123":{"crate_id":39,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"27:0":{"crate_id":27,"path":["tracing_attributes"],"kind":"module"},"6:5318":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"1:8143":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"34:146":{"crate_id":34,"path":["smallvec","SmallVecData"],"kind":"union"},"6:3708":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"38:137":{"crate_id":38,"path":["jobserver","imp","Acquired"],"kind":"struct"},"66:6594":{"crate_id":66,"path":["typenum","uint","UTerm"],"kind":"struct"},"14:547":{"crate_id":14,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"15:11970":{"crate_id":15,"path":["object","macho","FatArch32"],"kind":"struct"},"36:1875":{"crate_id":36,"path":["hashbrown","raw","inner","TableLayout"],"kind":"struct"},"1:5693":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"2:42644":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"22:4566":{"crate_id":22,"path":["rustc_span","ExternalSourceKind"],"kind":"enum"},"39:6459":{"crate_id":39,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"14:7738":{"crate_id":14,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"2:10311":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"29:3334":{"crate_id":29,"path":["rustc_data_structures","flock","Lock"],"kind":"struct"},"1:13383":{"crate_id":1,"path":["std","sys","unix","process","process_common","Command"],"kind":"struct"},"21:4990":{"crate_id":21,"path":["rustc_ast","ast","InlineAsm"],"kind":"struct"},"6:3787":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"36:811":{"crate_id":36,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"2:7432":{"crate_id":2,"path":["rustc_lint_defs","Item"],"kind":"typedef"},"75:7134":{"crate_id":75,"path":["rustc_target","spec","SplitDebuginfo"],"kind":"enum"},"15:13356":{"crate_id":15,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"1:10300":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"5:4743":{"crate_id":5,"path":["alloc","rc","{{impl}}","from_iter_exact","Guard"],"kind":"struct"},"1:6824":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"47:98":{"crate_id":47,"path":["lock_api","mutex","{{impl}}","fmt","LockedPlaceholder"],"kind":"struct"},"21:5389":{"crate_id":21,"path":["rustc_ast","ast","FnRetTy"],"kind":"enum"},"5:5175":{"crate_id":5,"path":["rustc_lint_defs","Output"],"kind":"typedef"},"0:157":{"crate_id":0,"path":["rustc_lint_defs","builtin","SINGLE_USE_LIFETIMES"],"kind":"static"},"0:110":{"crate_id":0,"path":["rustc_lint_defs","impl_lint_pass"],"kind":"macro"},"15:8849":{"crate_id":15,"path":["object","common","Architecture"],"kind":"enum"},"1:15270":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"75:5149":{"crate_id":75,"path":["rustc_target","asm","riscv","RiscVInlineAsmReg"],"kind":"enum"},"0:324":{"crate_id":0,"path":["rustc_lint_defs","FutureIncompatibilityReason","EditionSemanticsChange"],"kind":"variant"},"29:1802":{"crate_id":29,"path":["rustc_data_structures","stable_hasher","StableHasher"],"kind":"struct"},"0:225":{"crate_id":0,"path":["rustc_lint_defs","Applicability"],"kind":"enum"},"71:266":{"crate_id":71,"path":["sha2","sha256","Sha224"],"kind":"struct"},"21:7235":{"crate_id":21,"path":["rustc_ast","tokenstream","Spacing"],"kind":"enum"},"10:0":{"crate_id":10,"path":["rustc_std_workspace_alloc"],"kind":"module"},"2:12924":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"2:7422":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"25:786":{"crate_id":25,"path":["tracing_core","callsite","REGISTRY"],"kind":"struct"},"75:2289":{"crate_id":75,"path":["rustc_target","abi","call","riscv","CannotUseFpConv"],"kind":"struct"},"5:1893":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"49:385":{"crate_id":49,"path":["parking_lot_core","parking_lot","ParkToken"],"kind":"struct"},"15:12343":{"crate_id":15,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"15:9896":{"crate_id":15,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"2:2982":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"42:559":{"crate_id":42,"path":["ena","unify","UnificationTable"],"kind":"struct"},"2:41952":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"16:152":{"crate_id":16,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"2:3215":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"2:10098":{"crate_id":2,"path":["rustc_lint_defs","Item"],"kind":"typedef"},"0:434":{"crate_id":0,"path":["rustc_lint_defs","BuiltinLintDiagnostics","UnicodeTextFlow"],"kind":"variant"},"7:85":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"14:7042":{"crate_id":14,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"2:3132":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"21:4115":{"crate_id":21,"path":["rustc_ast","ast","Lit"],"kind":"struct"},"39:615":{"crate_id":39,"path":["libc","unix","protoent"],"kind":"struct"},"14:5927":{"crate_id":14,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"33:576":{"crate_id":33,"path":["rustc_serialize","json","PrettyJson"],"kind":"struct"},"1:1938":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"66:6066":{"crate_id":66,"path":["typenum","int","Z0"],"kind":"struct"},"39:588":{"crate_id":39,"path":["libc","unix","sigval"],"kind":"struct"},"5:7680":{"crate_id":5,"path":["alloc","vec","drain_filter","DrainFilter"],"kind":"struct"},"2:7874":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"1:1396":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"6:589":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"14:5505":{"crate_id":14,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"14:5707":{"crate_id":14,"path":["gimli","read","cfi","UninitializedUnwindContext"],"kind":"struct"},"2:45389":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"1:4747":{"crate_id":1,"path":["rustc_lint_defs","Iter"],"kind":"typedef"},"23:368":{"crate_id":23,"path":["tracing","__macro_support","MacroCallsite"],"kind":"struct"},"1:3031":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"14:7216":{"crate_id":14,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"1:11690":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"15:8929":{"crate_id":15,"path":["object","common","BinaryFormat"],"kind":"enum"},"75:3002":{"crate_id":75,"path":["rustc_target","abi","Scalar"],"kind":"struct"},"39:0":{"crate_id":39,"path":["libc"],"kind":"module"},"1:4713":{"crate_id":1,"path":["std","net","addr","ToSocketAddrs"],"kind":"trait"},"5:5156":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"2:41968":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"2:3092":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"75:3283":{"crate_id":75,"path":["rustc_target","abi","PointerKind"],"kind":"enum"},"6:1518":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"14:7174":{"crate_id":14,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"14:7571":{"crate_id":14,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"5:6001":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"22:4587":{"crate_id":22,"path":["rustc_span","OffsetOverflowError"],"kind":"struct"},"29:4285":{"crate_id":29,"path":["rustc_data_structures","sync","RwLock"],"kind":"struct"},"75:3037":{"crate_id":75,"path":["rustc_target","abi","AddressSpace"],"kind":"struct"},"1:15268":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"1:6948":{"crate_id":1,"path":["std","path","{{impl}}","fmt","DebugHelper"],"kind":"struct"},"39:1510":{"crate_id":39,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"22:1906":{"crate_id":22,"path":["rustc_span","hygiene","ExpnIndex"],"kind":"struct"},"1:5101":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"25:466":{"crate_id":25,"path":["tracing_core","metadata","Metadata"],"kind":"struct"},"71:255":{"crate_id":71,"path":["sha2","sha256","Engine256"],"kind":"struct"},"14:3506":{"crate_id":14,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"17:927":{"crate_id":17,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"6:6093":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"15:13520":{"crate_id":15,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"15:13488":{"crate_id":15,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"2:43623":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"2:2660":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"25:1207":{"crate_id":25,"path":["tracing_core","span","Current"],"kind":"struct"},"1:10701":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"75:2897":{"crate_id":75,"path":["rustc_target","abi","AbiAndPrefAlign"],"kind":"struct"},"6:614":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"1:8457":{"crate_id":1,"path":["std","sync","mutex","{{impl}}","fmt","LockedPlaceholder"],"kind":"struct"},"1:1274":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"2:49197":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"1:5231":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"1:11536":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"36:992":{"crate_id":36,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"2:21530":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"15:299":{"crate_id":15,"path":["object","read","util","DebugLen"],"kind":"struct"},"2:2199":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"15:13272":{"crate_id":15,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"39:5023":{"crate_id":39,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"21:3439":{"crate_id":21,"path":["rustc_ast","ast","AnonConst"],"kind":"struct"},"39:514":{"crate_id":39,"path":["libc","unix","timespec"],"kind":"struct"},"52:1121":{"crate_id":52,"path":["rand","distributions","bernoulli","Bernoulli"],"kind":"struct"},"75:3149":{"crate_id":75,"path":["rustc_target","abi","Variants"],"kind":"enum"},"5:2393":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"2:3098":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"75:6838":{"crate_id":75,"path":["rustc_target","spec","crt_objects","CrtObjectsFallback"],"kind":"enum"},"21:2020":{"crate_id":21,"path":["rustc_ast","util","parser","Fixity"],"kind":"enum"},"9:2054":{"crate_id":9,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"38:165":{"crate_id":38,"path":["jobserver","HelperInner"],"kind":"struct"},"32:0":{"crate_id":32,"path":["arrayvec"],"kind":"module"},"1:10340":{"crate_id":1,"path":["std","ffi","c_str","NulError"],"kind":"struct"},"2:45172":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"1:15267":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"39:6481":{"crate_id":39,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"14:3145":{"crate_id":14,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"58:0":{"crate_id":58,"path":["memmap2"],"kind":"module"},"14:6136":{"crate_id":14,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"15:12307":{"crate_id":15,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"2:46011":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"15:11628":{"crate_id":15,"path":["object","elf","Rel32"],"kind":"struct"},"36:0":{"crate_id":36,"path":["hashbrown"],"kind":"module"},"21:4140":{"crate_id":21,"path":["rustc_ast","ast","StrLit"],"kind":"struct"},"0:332":{"crate_id":0,"path":["rustc_lint_defs","LintId"],"kind":"struct"},"0:343":{"crate_id":0,"path":["rustc_lint_defs","ExternDepSpec","Raw"],"kind":"variant"},"33:1875":{"crate_id":33,"path":["rustc_serialize","json","InternalStackElement"],"kind":"enum"},"70:0":{"crate_id":70,"path":["cpuid_bool"],"kind":"module"},"1:11585":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"14:2866":{"crate_id":14,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"39:567":{"crate_id":39,"path":["libc","unix","pollfd"],"kind":"struct"},"14:7333":{"crate_id":14,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"2:21913":{"crate_id":2,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"0:126":{"crate_id":0,"path":["rustc_lint_defs","builtin","UNUSED_VARIABLES"],"kind":"static"},"25:1193":{"crate_id":25,"path":["tracing_core","span","Attributes"],"kind":"struct"},"39:6018":{"crate_id":39,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"29:4379":{"crate_id":29,"path":["rustc_data_structures","vec_map","VecMap"],"kind":"struct"},"29:143":{"crate_id":29,"path":["rustc_data_structures","graph","dominators","Iter"],"kind":"struct"},"1:11191":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"2:33722":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"2:42405":{"crate_id":2,"path":["core","char","EscapeUnicodeState"],"kind":"enum"},"1:15258":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"2:5934":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"2:9373":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"33:356":{"crate_id":33,"path":["rustc_serialize","serialize","Decodable"],"kind":"trait"},"15:10420":{"crate_id":15,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"6:3885":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"50:508":{"crate_id":50,"path":["tempfile","Builder"],"kind":"struct"},"15:10788":{"crate_id":15,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"2:42458":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"2:49206":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"21:4325":{"crate_id":21,"path":["rustc_ast","ast","MutTy"],"kind":"struct"},"6:581":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"2:11987":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"15:13554":{"crate_id":15,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"15:13884":{"crate_id":15,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"75:6386":{"crate_id":75,"path":["rustc_target","asm","InlineAsmReg"],"kind":"enum"},"2:42014":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"21:4602":{"crate_id":21,"path":["rustc_ast","ast","TyKind"],"kind":"enum"},"21:3866":{"crate_id":21,"path":["rustc_ast","ast","QSelf"],"kind":"struct"},"1:1278":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"15:12645":{"crate_id":15,"path":["object","macho","SymsegCommand"],"kind":"struct"},"6:5324":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"11:250":{"crate_id":11,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"15:11082":{"crate_id":15,"path":["object","read","SectionIndex"],"kind":"struct"},"0:175":{"crate_id":0,"path":["rustc_lint_defs","builtin","NONTRIVIAL_STRUCTURAL_MATCH"],"kind":"static"},"1:10717":{"crate_id":1,"path":["std","io","Initializer"],"kind":"struct"},"35:1134":{"crate_id":35,"path":["indexmap","set","Union"],"kind":"struct"},"15:13627":{"crate_id":15,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"2:3456":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"5:1282":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"2:4742":{"crate_id":2,"path":["core","iter"],"kind":"module"},"1:15276":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"15:12568":{"crate_id":15,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"52:2011":{"crate_id":52,"path":["rand","distributions","weighted","alias_method","WeightedIndex"],"kind":"struct"},"6:0":{"crate_id":6,"path":["libc"],"kind":"module"},"25:288":{"crate_id":25,"path":["tracing_core","field","Value"],"kind":"trait"},"14:3714":{"crate_id":14,"path":["gimli","constants","DwUt"],"kind":"struct"},"6:5059":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"5:7613":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"0:424":{"crate_id":0,"path":["rustc_lint_defs","BuiltinLintDiagnostics","TrailingMacro"],"kind":"variant"},"39:4153":{"crate_id":39,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"6:6593":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"39:4173":{"crate_id":39,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"50:0":{"crate_id":50,"path":["tempfile"],"kind":"module"},"2:12683":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"1:8426":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"15:11962":{"crate_id":15,"path":["object","macho","FatHeader"],"kind":"struct"},"15:12408":{"crate_id":15,"path":["object","macho","DylibModule64"],"kind":"struct"},"50:194":{"crate_id":50,"path":["tempfile","file","NamedTempFile"],"kind":"struct"},"14:6591":{"crate_id":14,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"15:11378":{"crate_id":15,"path":["object","read","CompressedData"],"kind":"struct"},"2:12668":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"2:21437":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"6:4219":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"1:1941":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"1:6299":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"6:4250":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"0:178":{"crate_id":0,"path":["rustc_lint_defs","builtin","SOFT_UNSTABLE"],"kind":"static"},"2:21523":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"1:1307":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"9:785":{"crate_id":9,"path":["hashbrown","map","DrainFilter"],"kind":"struct"},"5:5206":{"crate_id":5,"path":["alloc","slice","merge","MergeHole"],"kind":"struct"},"2:3086":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"2:22169":{"crate_id":2,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"1:4066":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"9:2060":{"crate_id":9,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"6:3823":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"15:13394":{"crate_id":15,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"14:0":{"crate_id":14,"path":["gimli"],"kind":"module"},"21:4105":{"crate_id":21,"path":["rustc_ast","ast","StrStyle"],"kind":"enum"},"15:12741":{"crate_id":15,"path":["object","macho","Nlist32"],"kind":"struct"},"0:47":{"crate_id":0,"path":["rustc_lint_defs","builtin"],"kind":"module"},"5:1191":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"1:14483":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"17:0":{"crate_id":17,"path":["miniz_oxide"],"kind":"module"},"15:9005":{"crate_id":15,"path":["object","common","ComdatKind"],"kind":"enum"},"52:2387":{"crate_id":52,"path":["rand","seq","index","IndexVec"],"kind":"enum"},"66:5996":{"crate_id":66,"path":["typenum","int","PInt"],"kind":"struct"},"15:13446":{"crate_id":15,"path":["object","pe","ImageImportByName"],"kind":"struct"},"1:15272":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"35:1303":{"crate_id":35,"path":["indexmap","Bucket"],"kind":"struct"},"39:1504":{"crate_id":39,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"22:0":{"crate_id":22,"path":["rustc_span"],"kind":"module"},"65:501":{"crate_id":65,"path":["generic_array","GenericArray"],"kind":"struct"},"2:45842":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"15:11186":{"crate_id":15,"path":["object","read","ObjectMap"],"kind":"struct"},"1:14223":{"crate_id":1,"path":["std","sys","unix","process","process_inner","{{impl}}","do_exec","Reset"],"kind":"struct"},"1:10037":{"crate_id":1,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"21:7193":{"crate_id":21,"path":["rustc_ast","tokenstream","AttributesData"],"kind":"struct"},"15:10611":{"crate_id":15,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"31:0":{"crate_id":31,"path":["rustc_index"],"kind":"module"},"15:13842":{"crate_id":15,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"25:797":{"crate_id":25,"path":["tracing_core","callsite","Identifier"],"kind":"struct"},"2:45285":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"15:9769":{"crate_id":15,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"2:46145":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"35:560":{"crate_id":35,"path":["indexmap","map","Values"],"kind":"struct"},"5:3454":{"crate_id":5,"path":["alloc","collections","linked_list","{{impl}}","drop","DropGuard"],"kind":"struct"},"0:148":{"crate_id":0,"path":["rustc_lint_defs","builtin","PATTERNS_IN_FNS_WITHOUT_BODY"],"kind":"static"},"15:13788":{"crate_id":15,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"2:42451":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"53:233":{"crate_id":53,"path":["rand_core","block","BlockRng64"],"kind":"struct"},"15:13402":{"crate_id":15,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"36:1561":{"crate_id":36,"path":["hashbrown","set","Drain"],"kind":"struct"},"6:4957":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"56:1612":{"crate_id":56,"path":["ppv_lite86","x86_64","SseMachine"],"kind":"struct"},"14:7856":{"crate_id":14,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"14:6731":{"crate_id":14,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"15:8954":{"crate_id":15,"path":["object","common","SectionKind"],"kind":"enum"},"2:21":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"61:99":{"crate_id":61,"path":["rustc_arena","DroplessArena"],"kind":"struct"},"15:11499":{"crate_id":15,"path":["object","elf","SectionHeader32"],"kind":"struct"},"15:10962":{"crate_id":15,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"15:11678":{"crate_id":15,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"1:10547":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"1:5482":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"2:42083":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"1:10308":{"crate_id":1,"path":["std","error","Chain"],"kind":"struct"},"0:292":{"crate_id":0,"path":["rustc_lint_defs","Lint"],"kind":"struct"},"14:7761":{"crate_id":14,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"25:1076":{"crate_id":25,"path":["tracing_core","metadata","Level"],"kind":"struct"},"6:1707":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"2:7470":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"6:574":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"15:13154":{"crate_id":15,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"2:49178":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"11:56":{"crate_id":11,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"2:45575":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"29:3862":{"crate_id":29,"path":["rustc_data_structures","stable_set","StableSet"],"kind":"struct"},"9:800":{"crate_id":9,"path":["hashbrown","map","ConsumeAllOnDrop"],"kind":"struct"},"29:4123":{"crate_id":29,"path":["rustc_data_structures","sharded","CacheAligned"],"kind":"struct"},"1:10780":{"crate_id":1,"path":["std","net","addr","SocketAddr"],"kind":"enum"},"21:5870":{"crate_id":21,"path":["rustc_ast","ast","FieldDef"],"kind":"struct"},"13:0":{"crate_id":13,"path":["addr2line"],"kind":"module"},"15:13620":{"crate_id":15,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"6:4154":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"44:583":{"crate_id":44,"path":["measureme","stringtable","StringId"],"kind":"struct"},"2:9905":{"crate_id":2,"path":["rustc_lint_defs","Output"],"kind":"typedef"},"0:407":{"crate_id":0,"path":["rustc_lint_defs","BuiltinLintDiagnostics","LegacyDeriveHelpers"],"kind":"variant"},"5:7575":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"17:686":{"crate_id":17,"path":["miniz_oxide","deflate","core","SymFreq"],"kind":"struct"},"1:1259":{"crate_id":1,"path":["std","collections","hash","map","DrainFilter"],"kind":"struct"},"6:4131":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"40:0":{"crate_id":40,"path":["rustc_graphviz"],"kind":"module"},"2:47195":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"2:1887":{"crate_id":2,"path":["rustc_lint_defs","Target"],"kind":"typedef"},"2:42635":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"0:410":{"crate_id":0,"path":["rustc_lint_defs","BuiltinLintDiagnostics","ExternDepSpec"],"kind":"variant"},"1:11819":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"6:1512":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"49:352":{"crate_id":49,"path":["parking_lot_core","parking_lot","FilterOp"],"kind":"enum"},"2:48170":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"15:12610":{"crate_id":15,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"2:44650":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"1:729":{"crate_id":1,"path":["std","thread","local","os","Key"],"kind":"struct"},"15:1236":{"crate_id":15,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"36:1410":{"crate_id":36,"path":["hashbrown","set","HashSet"],"kind":"struct"},"22:4113":{"crate_id":22,"path":["rustc_span","symbol","Ident"],"kind":"struct"},"1:1205":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"15:13760":{"crate_id":15,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"2:46163":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"2:3493":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"1:874":{"crate_id":1,"path":["rustc_lint_defs","Owned"],"kind":"typedef"},"1:2141":{"crate_id":1,"path":["std","env"],"kind":"module"},"21:4558":{"crate_id":21,"path":["rustc_ast","ast","Ty"],"kind":"struct"},"15:11794":{"crate_id":15,"path":["object","elf","Vernaux"],"kind":"struct"},"39:574":{"crate_id":39,"path":["libc","unix","winsize"],"kind":"struct"},"2:21376":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"5:6077":{"crate_id":5,"path":["alloc","sync","{{impl}}","from_iter_exact","Guard"],"kind":"struct"},"22:993":{"crate_id":22,"path":["rustc_span","symbol","sym"],"kind":"module"},"1:9115":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"2:45237":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"0:205":{"crate_id":0,"path":["rustc_lint_defs","builtin","UnusedDocComment"],"kind":"struct"},"4:0":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"21:5469":{"crate_id":21,"path":["rustc_ast","ast","ForeignMod"],"kind":"struct"},"2:42574":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"9:1516":{"crate_id":9,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"5:1852":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"1:5538":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"22:4418":{"crate_id":22,"path":["rustc_span","MultiSpan"],"kind":"struct"},"21:2821":{"crate_id":21,"path":["rustc_ast","ast","RangeEnd"],"kind":"enum"},"0:368":{"crate_id":0,"path":["rustc_lint_defs","BuiltinLintDiagnostics","ElidedLifetimesInPaths"],"kind":"variant"},"39:6647":{"crate_id":39,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"22:1182":{"crate_id":22,"path":["rustc_span","FileNameDisplay"],"kind":"struct"},"5:1362":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"5:0":{"crate_id":5,"path":["alloc"],"kind":"module"},"0:156":{"crate_id":0,"path":["rustc_lint_defs","builtin","UNCONDITIONAL_RECURSION"],"kind":"static"},"1:14328":{"crate_id":1,"path":["std","sys","unix","time","Timespec"],"kind":"struct"},"1:11719":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"2:3016":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"2:46945":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"39:607":{"crate_id":39,"path":["libc","unix","servent"],"kind":"struct"},"47:639":{"crate_id":47,"path":["lock_api","rwlock","RwLockReadGuard"],"kind":"struct"},"1:10960":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"21:1291":{"crate_id":21,"path":["rustc_ast","ptr","P"],"kind":"struct"},"47:635":{"crate_id":47,"path":["lock_api","rwlock","{{impl}}","fmt","LockedPlaceholder"],"kind":"struct"},"21:5073":{"crate_id":21,"path":["rustc_ast","ast","LlvmInlineAsm"],"kind":"struct"},"2:45764":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"29:3685":{"crate_id":29,"path":["rustc_data_structures","obligation_forest","Error"],"kind":"struct"},"29:4452":{"crate_id":29,"path":["rustc_data_structures","temp_dir","MaybeTempDir"],"kind":"struct"},"0:135":{"crate_id":0,"path":["rustc_lint_defs","builtin","WARNINGS"],"kind":"static"},"1:11201":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"5:5163":{"crate_id":5,"path":["rustc_lint_defs","Output"],"kind":"typedef"},"39:4912":{"crate_id":39,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"6:5932":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"2:12690":{"crate_id":2,"path":["rustc_lint_defs","Future"],"kind":"typedef"},"2:44373":{"crate_id":2,"path":["core","fmt","rt","v1","Argument"],"kind":"struct"},"2:10901":{"crate_id":2,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"39:1566":{"crate_id":39,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"14:3264":{"crate_id":14,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"2:10349":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"50:503":{"crate_id":50,"path":["tempfile","spooled","SpooledTempFile"],"kind":"struct"},"9:2074":{"crate_id":9,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"39:1499":{"crate_id":39,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"39:4009":{"crate_id":39,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"14:6999":{"crate_id":14,"path":["gimli","read","op","Piece"],"kind":"struct"},"21:6460":{"crate_id":21,"path":["rustc_ast","expand","allocator","AllocatorKind"],"kind":"enum"},"25:847":{"crate_id":25,"path":["tracing_core","field","DisplayValue"],"kind":"struct"},"15:11304":{"crate_id":15,"path":["object","read","RelocationTarget"],"kind":"enum"},"1:3801":{"crate_id":1,"path":["std","io","error","Result"],"kind":"typedef"},"23:490":{"crate_id":23,"path":["tracing","span","EnteredSpan"],"kind":"struct"},"2:47243":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"46:0":{"crate_id":46,"path":["instant"],"kind":"module"},"15:12287":{"crate_id":15,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"2:11420":{"crate_id":2,"path":["rustc_lint_defs","Item"],"kind":"typedef"},"21:2277":{"crate_id":21,"path":["rustc_ast","ast","AngleBracketedArg"],"kind":"enum"},"16:739":{"crate_id":16,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"6:3803":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"2:45243":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"45:643":{"crate_id":45,"path":["parking_lot","condvar","WaitTimeoutResult"],"kind":"struct"},"36:1566":{"crate_id":36,"path":["hashbrown","set","DrainFilter"],"kind":"struct"},"21:5507":{"crate_id":21,"path":["rustc_ast","ast","Variant"],"kind":"struct"},"1:14766":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"9:159":{"crate_id":9,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"39:5884":{"crate_id":39,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"15:10160":{"crate_id":15,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"2:46222":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"36:327":{"crate_id":36,"path":["hashbrown","raw","inner","RawIterRange"],"kind":"struct"},"6:4052":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"0:403":{"crate_id":0,"path":["rustc_lint_defs","BuiltinLintDiagnostics","PatternsInFnsWithoutBody"],"kind":"variant"},"5:7103":{"crate_id":5,"path":["alloc","vec","{{impl}}","retain","BackshiftOnDrop"],"kind":"struct"},"6:5892":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"44:517":{"crate_id":44,"path":["measureme","serialization","PageTag"],"kind":"enum"},"21:1961":{"crate_id":21,"path":["rustc_ast","util","parser","AssocOp"],"kind":"enum"},"2:49226":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"11:216":{"crate_id":11,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"0:162":{"crate_id":0,"path":["rustc_lint_defs","builtin","ABSOLUTE_PATHS_NOT_STARTING_WITH_CRATE"],"kind":"static"},"39:3700":{"crate_id":39,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"15:12385":{"crate_id":15,"path":["object","macho","DylibModule32"],"kind":"struct"},"1:13070":{"crate_id":1,"path":["std","sys","unix","os","Env"],"kind":"struct"},"52:2348":{"crate_id":52,"path":["rand","rngs","mock","StepRng"],"kind":"struct"},"15:10827":{"crate_id":15,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"21:3564":{"crate_id":21,"path":["rustc_ast","ast","ExprKind"],"kind":"enum"},"25:1117":{"crate_id":25,"path":["tracing_core","metadata","KindInner"],"kind":"enum"},"54:166":{"crate_id":54,"path":["getrandom","use_file","DropGuard"],"kind":"struct"},"33:1855":{"crate_id":33,"path":["rustc_serialize","json","StackElement"],"kind":"enum"},"9:884":{"crate_id":9,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"0:185":{"crate_id":0,"path":["rustc_lint_defs","builtin","FUNCTION_ITEM_REFERENCES"],"kind":"static"},"14:2991":{"crate_id":14,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"39:4221":{"crate_id":39,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"52:2409":{"crate_id":52,"path":["rand","seq","index","IndexVecIntoIter"],"kind":"enum"},"15:2314":{"crate_id":15,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"6:6587":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"1:13798":{"crate_id":1,"path":["std","sys","unix","thread","Thread"],"kind":"struct"},"1:1249":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"22:2196":{"crate_id":22,"path":["rustc_span","hygiene","ExpnKind"],"kind":"enum"},"47:102":{"crate_id":47,"path":["lock_api","mutex","MutexGuard"],"kind":"struct"},"21:5652":{"crate_id":21,"path":["rustc_ast","ast","AttrId"],"kind":"struct"},"0:152":{"crate_id":0,"path":["rustc_lint_defs","builtin","COHERENCE_LEAK_CHECK"],"kind":"static"},"2:48848":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"1:4362":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"54:158":{"crate_id":54,"path":["getrandom","use_file","Mutex"],"kind":"struct"},"5:3232":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"31:188":{"crate_id":31,"path":["rustc_index","bit_set","HybridIter"],"kind":"enum"},"6:4274":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"75:3218":{"crate_id":75,"path":["rustc_target","abi","Layout"],"kind":"struct"},"0:203":{"crate_id":0,"path":["rustc_lint_defs","builtin","UNUSED_DOC_COMMENTS"],"kind":"static"},"5:2662":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"6:3756":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"75:3009":{"crate_id":75,"path":["rustc_target","abi","FieldsShape"],"kind":"enum"},"35:197":{"crate_id":35,"path":["indexmap","map","core","IndexMapCore"],"kind":"struct"},"1:9244":{"crate_id":1,"path":["std","sys_common","mutex","MovableMutex"],"kind":"struct"},"15:13062":{"crate_id":15,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"2:3110":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"21:2119":{"crate_id":21,"path":["rustc_ast","ast","Label"],"kind":"struct"},"2:21977":{"crate_id":2,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"0:150":{"crate_id":0,"path":["rustc_lint_defs","builtin","LATE_BOUND_LIFETIME_ARGUMENTS"],"kind":"static"},"55:235":{"crate_id":55,"path":["rand_chacha","chacha","ChaCha12Rng"],"kind":"struct"},"39:3997":{"crate_id":39,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"52:1641":{"crate_id":52,"path":["rand","distributions","weighted_index","WeightedIndex"],"kind":"struct"},"71:371":{"crate_id":71,"path":["sha2","sha512","Engine512"],"kind":"struct"},"39:4167":{"crate_id":39,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"1:6063":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"14:7342":{"crate_id":14,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"75:2631":{"crate_id":75,"path":["rustc_target","abi","call","HomogeneousAggregate"],"kind":"enum"},"2:42330":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"9:1769":{"crate_id":9,"path":["hashbrown","set","DrainFilter"],"kind":"struct"},"1:14006":{"crate_id":1,"path":["std","sys","unix","fs","FileAttr"],"kind":"struct"},"15:12771":{"crate_id":15,"path":["object","macho","Relocation"],"kind":"struct"},"21:7158":{"crate_id":21,"path":["rustc_ast","tokenstream","AttrAnnotatedTokenTree"],"kind":"enum"},"2:4269":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"15:13172":{"crate_id":15,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"11:47":{"crate_id":11,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"9:111":{"crate_id":9,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"15:12521":{"crate_id":15,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"1:4415":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"0:139":{"crate_id":0,"path":["rustc_lint_defs","builtin","TRIVIAL_CASTS"],"kind":"static"},"25:827":{"crate_id":25,"path":["tracing_core","field","Field"],"kind":"struct"},"1:10903":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"9:725":{"crate_id":9,"path":["hashbrown","map","IterMut"],"kind":"struct"},"15:9034":{"crate_id":15,"path":["object","common","SymbolKind"],"kind":"enum"},"0:166":{"crate_id":0,"path":["rustc_lint_defs","builtin","UNUSED_LABELS"],"kind":"static"},"14:6152":{"crate_id":14,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"15:9971":{"crate_id":15,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"1:2174":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"5:5107":{"crate_id":5,"path":["alloc","slice","hack","{{impl}}","to_vec","DropGuard"],"kind":"struct"},"14:7884":{"crate_id":14,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"2:44379":{"crate_id":2,"path":["core","fmt","rt","v1","FormatSpec"],"kind":"struct"},"5:2177":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"35:831":{"crate_id":35,"path":["indexmap","set","IndexSet"],"kind":"struct"},"39:4295":{"crate_id":39,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"2:7389":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"15:12275":{"crate_id":15,"path":["object","macho","ThreadCommand"],"kind":"struct"},"1:7649":{"crate_id":1,"path":["std","sync","mpsc","mpsc_queue","Queue"],"kind":"struct"},"6:4987":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"29:4261":{"crate_id":29,"path":["rustc_data_structures","sync","WorkerLocal"],"kind":"struct"},"22:1849":{"crate_id":22,"path":["rustc_span","hygiene","SyntaxContextData"],"kind":"struct"},"30:0":{"crate_id":30,"path":["cfg_if"],"kind":"module"},"39:1517":{"crate_id":39,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"75:2274":{"crate_id":75,"path":["rustc_target","abi","call","riscv","FloatConv"],"kind":"enum"},"9:1008":{"crate_id":9,"path":["hashbrown","map","Entry"],"kind":"enum"},"15:10975":{"crate_id":15,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"29:3067":{"crate_id":29,"path":["rustc_data_structures","tagged_ptr","copy","CopyTaggedPtr"],"kind":"struct"},"0:120":{"crate_id":0,"path":["rustc_lint_defs","builtin","UNUSED_IMPORTS"],"kind":"static"},"47:693":{"crate_id":47,"path":["lock_api","rwlock","RwLockWriteGuard"],"kind":"struct"},"14:6949":{"crate_id":14,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"1:5599":{"crate_id":1,"path":["std","os","unix","net","addr","AsciiEscaped"],"kind":"struct"},"14:3320":{"crate_id":14,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"47:161":{"crate_id":47,"path":["lock_api","mutex","MappedMutexGuard"],"kind":"struct"},"15:11835":{"crate_id":15,"path":["object","elf","HashHeader"],"kind":"struct"},"0:384":{"crate_id":0,"path":["rustc_lint_defs","BuiltinLintDiagnostics","RedundantImport"],"kind":"variant"},"2:47290":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"6:1714":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"6:5187":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"1:14620":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"6:5082":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"22:2315":{"crate_id":22,"path":["rustc_span","hygiene","DesugaringKind"],"kind":"enum"},"21:2738":{"crate_id":21,"path":["rustc_ast","ast","Pat"],"kind":"struct"},"33:239":{"crate_id":33,"path":["rustc_serialize","serialize","Encoder"],"kind":"trait"},"15:11277":{"crate_id":15,"path":["object","read","CodeView"],"kind":"struct"},"14:5595":{"crate_id":14,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"2:46897":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"39:5205":{"crate_id":39,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"21:2867":{"crate_id":21,"path":["rustc_ast","ast","PatKind"],"kind":"enum"},"75:7062":{"crate_id":75,"path":["rustc_target","spec","CodeModel"],"kind":"enum"},"15:10926":{"crate_id":15,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"1:15226":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"15:11358":{"crate_id":15,"path":["object","read","CompressedFileRange"],"kind":"struct"},"39:5924":{"crate_id":39,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"17:234":{"crate_id":17,"path":["miniz_oxide","deflate","core","HuffmanOxide"],"kind":"struct"},"14:7477":{"crate_id":14,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"75:6876":{"crate_id":75,"path":["rustc_target","spec","LinkerFlavor"],"kind":"enum"},"65:283":{"crate_id":65,"path":["generic_array","iter","GenericArrayIter"],"kind":"struct"},"0:132":{"crate_id":0,"path":["rustc_lint_defs","builtin","OVERLAPPING_RANGE_ENDPOINTS"],"kind":"static"},"21:4249":{"crate_id":21,"path":["rustc_ast","ast","LitKind"],"kind":"enum"},"55:186":{"crate_id":55,"path":["rand_chacha","chacha","ChaCha20Rng"],"kind":"struct"},"2:9929":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"2:46849":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"39:1670":{"crate_id":39,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"71:262":{"crate_id":71,"path":["sha2","sha256","Sha256"],"kind":"struct"},"22:1441":{"crate_id":22,"path":["rustc_span","caching_source_map_view","CacheEntry"],"kind":"struct"},"2:42583":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"75:2294":{"crate_id":75,"path":["rustc_target","abi","call","x86","Flavor"],"kind":"enum"},"6:3652":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"33:583":{"crate_id":33,"path":["rustc_serialize","json","AsPrettyJson"],"kind":"struct"},"1:15278":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"22:4447":{"crate_id":22,"path":["rustc_span","SpanLabel"],"kind":"struct"},"0:396":{"crate_id":0,"path":["rustc_lint_defs","BuiltinLintDiagnostics","UnusedDocComment"],"kind":"variant"},"21:5104":{"crate_id":21,"path":["rustc_ast","ast","Param"],"kind":"struct"},"1:13579":{"crate_id":1,"path":["std","sys","unix","stack_overflow","Handler"],"kind":"struct"},"6:4137":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"15:13547":{"crate_id":15,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"15:11665":{"crate_id":15,"path":["object","elf","Rela64"],"kind":"struct"},"1:11670":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"2:46033":{"crate_id":2,"path":["core","time","FromSecsError"],"kind":"struct"},"6:3658":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"33:1736":{"crate_id":33,"path":["rustc_serialize","json","ParserError"],"kind":"enum"},"2:12934":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"1:10971":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"1:14302":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatus"],"kind":"struct"},"32:242":{"crate_id":32,"path":["arrayvec","arrayvec","Drain"],"kind":"struct"},"15:10529":{"crate_id":15,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"1:10754":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"1:10493":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"2:2913":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"14:4350":{"crate_id":14,"path":["gimli","constants","DwAte"],"kind":"struct"},"15:10106":{"crate_id":15,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"66:6546":{"crate_id":66,"path":["typenum","uint","UInt"],"kind":"struct"},"6:5828":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"6:4981":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"22:2520":{"crate_id":22,"path":["rustc_span","def_id","CrateNum"],"kind":"struct"},"15:12327":{"crate_id":15,"path":["object","macho","SymtabCommand"],"kind":"struct"},"15:13054":{"crate_id":15,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"39:6060":{"crate_id":39,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ip_mreqn"],"kind":"struct"},"0:267":{"crate_id":0,"path":["rustc_lint_defs","Level","Deny"],"kind":"variant"},"21:3123":{"crate_id":21,"path":["rustc_ast","ast","UnOp"],"kind":"enum"},"9:181":{"crate_id":9,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"2:3071":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"39:5129":{"crate_id":39,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"65:467":{"crate_id":65,"path":["generic_array","GenericArrayImplEven"],"kind":"struct"},"39:4023":{"crate_id":39,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"2:8324":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"1:1967":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"22:4282":{"crate_id":22,"path":["rustc_span","RealFileName"],"kind":"enum"},"5:7439":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"39:1678":{"crate_id":39,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"75:6830":{"crate_id":75,"path":["rustc_target","spec","abi","AbiData"],"kind":"struct"},"14:4535":{"crate_id":14,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"21:7133":{"crate_id":21,"path":["rustc_ast","tokenstream","LazyTokenStream"],"kind":"struct"},"1:1236":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"1:14742":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"29:3734":{"crate_id":29,"path":["rustc_data_structures","sip128","SipHasher128"],"kind":"struct"},"0:388":{"crate_id":0,"path":["rustc_lint_defs","BuiltinLintDiagnostics","DeprecatedMacro"],"kind":"variant"},"1:4380":{"crate_id":1,"path":["rustc_lint_defs","Target"],"kind":"typedef"},"1:11648":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"2:3883":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"0:128":{"crate_id":0,"path":["rustc_lint_defs","builtin","DEAD_CODE"],"kind":"static"},"14:5736":{"crate_id":14,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"1:5460":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"1:14455":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"2:45995":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"21:5185":{"crate_id":21,"path":["rustc_ast","ast","IsAuto"],"kind":"enum"},"22:1289":{"crate_id":22,"path":["rustc_span","with_source_map","ClearSourceMap"],"kind":"struct"},"0:116":{"crate_id":0,"path":["rustc_lint_defs","builtin","INCOMPLETE_INCLUDE"],"kind":"static"},"39:1824":{"crate_id":39,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"0:184":{"crate_id":0,"path":["rustc_lint_defs","builtin","CONST_EVALUATABLE_UNCHECKED"],"kind":"static"},"33:789":{"crate_id":33,"path":["rustc_serialize","json","Parser"],"kind":"struct"},"2:22137":{"crate_id":2,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"17:900":{"crate_id":17,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"39:5811":{"crate_id":39,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"21:6750":{"crate_id":21,"path":["rustc_ast","token","TokenKind"],"kind":"enum"},"1:10869":{"crate_id":1,"path":["std","net","ip","{{impl}}","fmt","Span"],"kind":"struct"},"21:6661":{"crate_id":21,"path":["rustc_ast","token","LitKind"],"kind":"enum"},"6:5031":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"2:42514":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"75:2828":{"crate_id":75,"path":["rustc_target","abi","Size"],"kind":"struct"},"17:692":{"crate_id":17,"path":["miniz_oxide","deflate","core","CompressionStrategy"],"kind":"enum"},"29:4457":{"crate_id":29,"path":["rustc_data_structures","unhash","Unhasher"],"kind":"struct"},"0:124":{"crate_id":0,"path":["rustc_lint_defs","builtin","UNUSED_QUALIFICATIONS"],"kind":"static"},"2:3045":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"15:11809":{"crate_id":15,"path":["object","elf","NoteHeader32"],"kind":"struct"},"21:3978":{"crate_id":21,"path":["rustc_ast","ast","MacArgs"],"kind":"enum"},"2:22041":{"crate_id":2,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"5:7222":{"crate_id":5,"path":["rustc_lint_defs","Target"],"kind":"typedef"},"6:4181":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"1:9187":{"crate_id":1,"path":["std","sys_common","condvar","Condvar"],"kind":"struct"},"21:5768":{"crate_id":21,"path":["rustc_ast","ast","PolyTraitRef"],"kind":"struct"},"15:10353":{"crate_id":15,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"28:40":{"crate_id":28,"path":["pin_project_lite","__private","UnsafeOverwriteGuard"],"kind":"struct"},"1:1806":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"1:10399":{"crate_id":1,"path":["std","ffi","c_str","IntoStringError"],"kind":"struct"},"6:3747":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"15:9574":{"crate_id":15,"path":["object","read","util","StringTable"],"kind":"struct"},"21:4475":{"crate_id":21,"path":["rustc_ast","ast","UintTy"],"kind":"enum"},"14:3338":{"crate_id":14,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"1:7423":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"29:4295":{"crate_id":29,"path":["rustc_data_structures","sync","OneThread"],"kind":"struct"},"74:0":{"crate_id":74,"path":["unicode_xid"],"kind":"module"},"52:1672":{"crate_id":52,"path":["rand","distributions","uniform","Uniform"],"kind":"struct"},"5:5192":{"crate_id":5,"path":["alloc","slice","insert_head","InsertionHole"],"kind":"struct"},"21:2326":{"crate_id":21,"path":["rustc_ast","ast","TraitBoundModifier"],"kind":"enum"},"14:5456":{"crate_id":14,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"1:872":{"crate_id":1,"path":["rustc_lint_defs","Owned"],"kind":"typedef"},"43:325":{"crate_id":43,"path":["log","MetadataBuilder"],"kind":"struct"},"14:4304":{"crate_id":14,"path":["gimli","constants","DwForm"],"kind":"struct"},"13:230":{"crate_id":13,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"0:112":{"crate_id":0,"path":["rustc_lint_defs","builtin","FORBIDDEN_LINT_GROUPS"],"kind":"static"},"39:508":{"crate_id":39,"path":["libc","unix","timeval"],"kind":"struct"},"2:11747":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"14:5488":{"crate_id":14,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"2:43614":{"crate_id":2,"path":["core","stream","from_iter","FromIter"],"kind":"struct"},"29:0":{"crate_id":29,"path":["rustc_data_structures"],"kind":"module"},"17:603":{"crate_id":17,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"39:5820":{"crate_id":39,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"14:3287":{"crate_id":14,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"56:1636":{"crate_id":56,"path":["ppv_lite86","x86_64","vec128_storage"],"kind":"union"},"6:3795":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"15:13119":{"crate_id":15,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"2:21477":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"15:12467":{"crate_id":15,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"37:0":{"crate_id":37,"path":["rustc_hash"],"kind":"module"},"15:10149":{"crate_id":15,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"14:6219":{"crate_id":14,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"2:2907":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"39:4283":{"crate_id":39,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"48:74":{"crate_id":48,"path":["scopeguard","Always"],"kind":"enum"},"15:13306":{"crate_id":15,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"14:5295":{"crate_id":14,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"2:21155":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"14:6744":{"crate_id":14,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"6:3741":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"2:49393":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"39:4941":{"crate_id":39,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"6:1722":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"75:7036":{"crate_id":75,"path":["rustc_target","spec","RelocModel"],"kind":"enum"},"29:3775":{"crate_id":29,"path":["rustc_data_structures","svh","Svh"],"kind":"struct"},"44:562":{"crate_id":44,"path":["measureme","serialization","BackingStorage"],"kind":"enum"},"21:6529":{"crate_id":21,"path":["rustc_ast","node_id","NodeMap"],"kind":"typedef"},"5:4450":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"71:390":{"crate_id":71,"path":["sha2","sha512","Sha512Trunc224"],"kind":"struct"},"39:4140":{"crate_id":39,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"2:3009":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"15:13772":{"crate_id":15,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"39:3815":{"crate_id":39,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"14:7303":{"crate_id":14,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"39:4037":{"crate_id":39,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"1:4431":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"22:4240":{"crate_id":22,"path":["rustc_span","symbol","SymbolStr"],"kind":"struct"},"1:10542":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"1:8979":{"crate_id":1,"path":["rustc_lint_defs","Target"],"kind":"typedef"},"2:21455":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"52:1684":{"crate_id":52,"path":["rand","distributions","uniform","UniformInt"],"kind":"struct"},"2:42465":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"enum"},"15:12040":{"crate_id":15,"path":["object","macho","LcStr"],"kind":"struct"},"2:45983":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"1:15281":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"2:46237":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"5:5169":{"crate_id":5,"path":["rustc_lint_defs","Output"],"kind":"typedef"},"21:3887":{"crate_id":21,"path":["rustc_ast","ast","CaptureBy"],"kind":"enum"},"5:5567":{"crate_id":5,"path":["alloc","string","{{impl}}","retain","SetLenOnDrop"],"kind":"struct"},"2:45471":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"61:142":{"crate_id":61,"path":["rustc_arena","DropArena"],"kind":"struct"},"21:5258":{"crate_id":21,"path":["rustc_ast","ast","Async"],"kind":"enum"},"5:840":{"crate_id":5,"path":["alloc","collections","binary_heap","{{impl}}","drop","DropGuard"],"kind":"struct"},"21:2389":{"crate_id":21,"path":["rustc_ast","ast","ParamKindOrd"],"kind":"enum"},"2:43486":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"2:21343":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"56:1592":{"crate_id":56,"path":["ppv_lite86","x86_64","YesA2"],"kind":"struct"},"22:946":{"crate_id":22,"path":["rustc_span","symbol","IdentPrinter"],"kind":"struct"},"14:5580":{"crate_id":14,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"2:8886":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"0:142":{"crate_id":0,"path":["rustc_lint_defs","builtin","EXPORTED_PRIVATE_DEPENDENCIES"],"kind":"static"},"2:43720":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"9:774":{"crate_id":9,"path":["hashbrown","map","Drain"],"kind":"struct"},"1:10761":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"73:159":{"crate_id":73,"path":["rustc_lexer","unescape","Mode"],"kind":"enum"},"15:13865":{"crate_id":15,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"6:3902":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"39:593":{"crate_id":39,"path":["libc","unix","itimerval"],"kind":"struct"},"2:46922":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"6:5810":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"75:2262":{"crate_id":75,"path":["rustc_target","abi","call","riscv","RegPassKind"],"kind":"enum"},"21:2199":{"crate_id":21,"path":["rustc_ast","ast","GenericArgs"],"kind":"enum"},"54:81":{"crate_id":54,"path":["getrandom","error","Error"],"kind":"struct"},"66:6524":{"crate_id":66,"path":["typenum","Equal"],"kind":"struct"},"1:8359":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"2:9560":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"2:2086":{"crate_id":2,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"66:1312":{"crate_id":66,"path":["typenum","type_operators","Same"],"kind":"trait"},"1:7606":{"crate_id":1,"path":["std","sync","mpsc","blocking","WaitToken"],"kind":"struct"},"0:188":{"crate_id":0,"path":["rustc_lint_defs","builtin","UNDEFINED_NAKED_FUNCTION_ABI"],"kind":"static"},"14:6636":{"crate_id":14,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"2:44625":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"1:8731":{"crate_id":1,"path":["rustc_lint_defs","Target"],"kind":"typedef"},"21:2139":{"crate_id":21,"path":["rustc_ast","ast","Lifetime"],"kind":"struct"},"35:1102":{"crate_id":35,"path":["indexmap","set","SymmetricDifference"],"kind":"struct"},"15:9729":{"crate_id":15,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"47:874":{"crate_id":47,"path":["lock_api","rwlock","MappedRwLockWriteGuard"],"kind":"struct"},"1:8663":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"56:302":{"crate_id":56,"path":["ppv_lite86","types","types","VZip"],"kind":"trait"},"0:105":{"crate_id":0,"path":["rustc_lint_defs","declare_tool_lint"],"kind":"macro"},"29:3370":{"crate_id":29,"path":["rustc_data_structures","graph","implementation","EdgeIndex"],"kind":"struct"},"1:5530":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"39:3760":{"crate_id":39,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"1:10694":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"2:2095":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"2:42444":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"6:4920":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"2:45987":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"15:9133":{"crate_id":15,"path":["object","common","RelocationEncoding"],"kind":"enum"},"25:815":{"crate_id":25,"path":["tracing_core","dispatcher","SetGlobalDefaultError"],"kind":"struct"},"15:10635":{"crate_id":15,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"1:2929":{"crate_id":1,"path":["rustc_lint_defs","Owned"],"kind":"typedef"},"6:1643":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"23:392":{"crate_id":23,"path":["tracing","instrument","WithDispatch"],"kind":"struct"},"75:6621":{"crate_id":75,"path":["rustc_target","asm","InlineAsmType"],"kind":"enum"},"11:244":{"crate_id":11,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"15:10331":{"crate_id":15,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"39:3828":{"crate_id":39,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"75:3664":{"crate_id":75,"path":["rustc_target","asm","arm","ArmInlineAsmRegClass"],"kind":"enum"},"5:543":{"crate_id":5,"path":["rustc_lint_defs","Owned"],"kind":"typedef"},"75:2775":{"crate_id":75,"path":["rustc_target","abi","call","AdjustForForeignAbiError"],"kind":"enum"},"29:3754":{"crate_id":29,"path":["rustc_data_structures","sip128","Sip24Rounds"],"kind":"struct"},"21:1890":{"crate_id":21,"path":["rustc_ast","util","comments","CommentStyle"],"kind":"enum"},"16:866":{"crate_id":16,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"50:173":{"crate_id":50,"path":["tempfile","file","TempPath"],"kind":"struct"},"36:1867":{"crate_id":36,"path":["hashbrown","raw","inner","Fallibility"],"kind":"enum"},"14:4448":{"crate_id":14,"path":["gimli","constants","DwEnd"],"kind":"struct"},"21:6912":{"crate_id":21,"path":["rustc_ast","token","Token"],"kind":"struct"},"39:5861":{"crate_id":39,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"2:21545":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"5:5785":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"14:6208":{"crate_id":14,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"33:1659":{"crate_id":33,"path":["rustc_serialize","json","Json"],"kind":"enum"},"15:11199":{"crate_id":15,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"0:226":{"crate_id":0,"path":["rustc_lint_defs","Applicability","MachineApplicable"],"kind":"variant"},"6:5819":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"0:144":{"crate_id":0,"path":["rustc_lint_defs","builtin","INVALID_TYPE_PARAM_DEFAULT"],"kind":"static"},"15:10266":{"crate_id":15,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"2:44449":{"crate_id":2,"path":["core","fmt","FlagV1"],"kind":"enum"},"21:2790":{"crate_id":21,"path":["rustc_ast","ast","BindingMode"],"kind":"enum"},"53:242":{"crate_id":53,"path":["rand_core","error","ErrorCode"],"kind":"struct"},"0:444":{"crate_id":0,"path":["rustc_lint_defs","BufferedEarlyLint"],"kind":"struct"},"2:7433":{"crate_id":2,"path":["rustc_lint_defs","IntoIter"],"kind":"typedef"},"22:4912":{"crate_id":22,"path":["rustc_span","InnerSpan"],"kind":"struct"},"0:399":{"crate_id":0,"path":["rustc_lint_defs","BuiltinLintDiagnostics","UnusedBuiltinAttribute"],"kind":"variant"},"73:355":{"crate_id":73,"path":["rustc_lexer","Base"],"kind":"enum"},"2:42384":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"14:7279":{"crate_id":14,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"1:11542":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"2:3127":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"0:191":{"crate_id":0,"path":["rustc_lint_defs","builtin","SEMICOLON_IN_EXPRESSIONS_FROM_MACROS"],"kind":"static"},"39:3975":{"crate_id":39,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"6:4031":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"29:3654":{"crate_id":29,"path":["rustc_data_structures","obligation_forest","NodeState"],"kind":"enum"},"59:0":{"crate_id":59,"path":["stacker"],"kind":"module"},"6:3910":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"2:45110":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"75:3196":{"crate_id":75,"path":["rustc_target","abi","Niche"],"kind":"struct"},"2:42897":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"1:7958":{"crate_id":1,"path":["std","sync","mpsc","stream","Packet"],"kind":"struct"},"39:3877":{"crate_id":39,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"15:13978":{"crate_id":15,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"1:808":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"2:41904":{"crate_id":2,"path":["core","ops","generator","GeneratorState"],"kind":"enum"},"21:6247":{"crate_id":21,"path":["rustc_ast","ast","AssocItemKind"],"kind":"enum"},"21:3948":{"crate_id":21,"path":["rustc_ast","ast","Movability"],"kind":"enum"},"9:1764":{"crate_id":9,"path":["hashbrown","set","Drain"],"kind":"struct"},"22:4396":{"crate_id":22,"path":["rustc_span","SpanData"],"kind":"struct"},"39:4289":{"crate_id":39,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"9:838":{"crate_id":9,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"22:4591":{"crate_id":22,"path":["rustc_span","SourceFileHashAlgorithm"],"kind":"enum"},"39:5161":{"crate_id":39,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"2:47176":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"0:355":{"crate_id":0,"path":["rustc_lint_defs","BuiltinLintDiagnostics","BareTraitObject"],"kind":"variant"},"2:47619":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"75:6578":{"crate_id":75,"path":["rustc_target","asm","InlineAsmRegOrRegClass"],"kind":"enum"},"1:14065":{"crate_id":1,"path":["std","sys","unix","io","IoSlice"],"kind":"struct"},"39:3946":{"crate_id":39,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"21:5050":{"crate_id":21,"path":["rustc_ast","ast","LlvmInlineAsmOutput"],"kind":"struct"},"21:3957":{"crate_id":21,"path":["rustc_ast","ast","MacCall"],"kind":"struct"},"15:10489":{"crate_id":15,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"5:5396":{"crate_id":5,"path":["rustc_lint_defs","Owned"],"kind":"typedef"},"15:11254":{"crate_id":15,"path":["object","read","Export"],"kind":"struct"},"2:9305":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"1:13138":{"crate_id":1,"path":["std","sys","unix","os_str","Slice"],"kind":"struct"},"9:845":{"crate_id":9,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"21:3413":{"crate_id":21,"path":["rustc_ast","ast","UnsafeSource"],"kind":"enum"},"42:542":{"crate_id":42,"path":["ena","unify","VarValue"],"kind":"struct"},"15:9719":{"crate_id":15,"path":["object","read","any","SectionIterator"],"kind":"struct"},"31:698":{"crate_id":31,"path":["rustc_index","vec","IndexVec"],"kind":"struct"},"62:0":{"crate_id":62,"path":["unicode_width"],"kind":"module"},"6:521":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"12:220":{"crate_id":12,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"22:4667":{"crate_id":22,"path":["rustc_span","SourceFile"],"kind":"struct"},"2:46007":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"21:4017":{"crate_id":21,"path":["rustc_ast","ast","MacDelimiter"],"kind":"enum"},"29:4414":{"crate_id":29,"path":["rustc_data_structures","sso","either_iter","EitherIter"],"kind":"enum"},"67:0":{"crate_id":67,"path":["block_buffer"],"kind":"module"},"2:45853":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"9:833":{"crate_id":9,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"29:2586":{"crate_id":29,"path":["rustc_data_structures","vec_linked_list","VecLinkedListIterator"],"kind":"struct"},"2:42931":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"2:42527":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"15:10543":{"crate_id":15,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"2:47032":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"15:10502":{"crate_id":15,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"2:45146":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"6:1832":{"crate_id":6,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"22:1990":{"crate_id":22,"path":["rustc_span","hygiene","ExpnHash"],"kind":"struct"},"2:45863":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"15:13819":{"crate_id":15,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"52:2362":{"crate_id":52,"path":["rand","rngs","std","StdRng"],"kind":"struct"},"16:774":{"crate_id":16,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"75:3120":{"crate_id":75,"path":["rustc_target","abi","VariantIdx"],"kind":"struct"},"25:1221":{"crate_id":25,"path":["tracing_core","subscriber","Interest"],"kind":"struct"},"0:204":{"crate_id":0,"path":["rustc_lint_defs","builtin","RUST_2021_INCOMPATIBLE_CLOSURE_CAPTURES"],"kind":"static"},"39:1687":{"crate_id":39,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"75:2324":{"crate_id":75,"path":["rustc_target","abi","call","x86_64","Memory"],"kind":"struct"},"0:146":{"crate_id":0,"path":["rustc_lint_defs","builtin","UNALIGNED_REFERENCES"],"kind":"static"},"2:45670":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"49:73":{"crate_id":49,"path":["parking_lot_core","parking_lot","ThreadData"],"kind":"struct"},"39:4250":{"crate_id":39,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"2:12820":{"crate_id":2,"path":["core","future","from_generator","GenFuture"],"kind":"struct"},"39:4242":{"crate_id":39,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"1:14042":{"crate_id":1,"path":["std","sys","unix","fs","FileType"],"kind":"struct"},"47:0":{"crate_id":47,"path":["lock_api"],"kind":"module"},"0:129":{"crate_id":0,"path":["rustc_lint_defs","builtin","UNUSED_ATTRIBUTES"],"kind":"static"},"14:7158":{"crate_id":14,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"2:3081":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"9:1609":{"crate_id":9,"path":["hashbrown","set","HashSet"],"kind":"struct"},"39:5351":{"crate_id":39,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"2:28777":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"39:649":{"crate_id":39,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"36:535":{"crate_id":36,"path":["hashbrown","map","HashMap"],"kind":"struct"},"15:10407":{"crate_id":15,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"1:6670":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"1:10498":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"2:9375":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"1:13723":{"crate_id":1,"path":["std","sys","unix","stdio","Stderr"],"kind":"struct"},"5:6672":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"2:47542":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"42:538":{"crate_id":42,"path":["ena","unify","NoError"],"kind":"struct"},"75:6908":{"crate_id":75,"path":["rustc_target","spec","LldFlavor"],"kind":"enum"},"14:6413":{"crate_id":14,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"50:394":{"crate_id":50,"path":["tempfile","error","PathError"],"kind":"struct"},"1:2212":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"2:42663":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"44:483":{"crate_id":44,"path":["measureme","event_id","EventId"],"kind":"struct"},"2:48044":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"15:12155":{"crate_id":15,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"29:4278":{"crate_id":29,"path":["rustc_data_structures","sync","Lock"],"kind":"struct"},"52:1937":{"crate_id":52,"path":["rand","distributions","uniform","UniformChar"],"kind":"struct"},"56:1627":{"crate_id":56,"path":["ppv_lite86","x86_64","Avx2Machine"],"kind":"struct"},"17:157":{"crate_id":17,"path":["miniz_oxide","deflate","core","CompressorOxide"],"kind":"struct"},"1:13420":{"crate_id":1,"path":["std","sys","unix","process","process_common","Stdio"],"kind":"enum"},"21:6125":{"crate_id":21,"path":["rustc_ast","ast","ItemKind"],"kind":"enum"},"42:0":{"crate_id":42,"path":["ena"],"kind":"module"},"14:7823":{"crate_id":14,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"49:310":{"crate_id":49,"path":["parking_lot_core","parking_lot","UnparkResult"],"kind":"struct"},"14:6491":{"crate_id":14,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"2:3371":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"0:174":{"crate_id":0,"path":["rustc_lint_defs","builtin","POINTER_STRUCTURAL_MATCH"],"kind":"static"},"2:7938":{"crate_id":2,"path":["core","lazy","OnceCell"],"kind":"struct"},"21:5017":{"crate_id":21,"path":["rustc_ast","ast","LlvmAsmDialect"],"kind":"enum"},"0:122":{"crate_id":0,"path":["rustc_lint_defs","builtin","UNUSED_EXTERN_CRATES"],"kind":"static"},"5:3921":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"15:13685":{"crate_id":15,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"39:3909":{"crate_id":39,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"9:548":{"crate_id":9,"path":["hashbrown","map","HashMap"],"kind":"struct"},"15:11100":{"crate_id":15,"path":["object","read","SymbolIndex"],"kind":"struct"},"2:46046":{"crate_id":2,"path":["core","time","FromSecsErrorKind"],"kind":"enum"},"35:668":{"crate_id":35,"path":["indexmap","map","Drain"],"kind":"struct"},"6:1636":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"16:782":{"crate_id":16,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"33:1827":{"crate_id":33,"path":["rustc_serialize","json","ParserState"],"kind":"enum"},"47:823":{"crate_id":47,"path":["lock_api","rwlock","MappedRwLockReadGuard"],"kind":"struct"},"15:13799":{"crate_id":15,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"2:43900":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"1:1295":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"5:537":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"5:2927":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"2:44680":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"39:1554":{"crate_id":39,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"66:5952":{"crate_id":66,"path":["typenum","bit","B0"],"kind":"struct"},"1:10335":{"crate_id":1,"path":["std","ffi","c_str","CStr"],"kind":"struct"},"75:7295":{"crate_id":75,"path":["rustc_target","spec","FramePointer"],"kind":"enum"},"1:11057":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"6:4090":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"21:5719":{"crate_id":21,"path":["rustc_ast","ast","AttrKind"],"kind":"enum"},"21:5968":{"crate_id":21,"path":["rustc_ast","ast","Extern"],"kind":"enum"},"2:45685":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"14:4641":{"crate_id":14,"path":["gimli","constants","DwAddr"],"kind":"struct"},"39:6047":{"crate_id":39,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","termios2"],"kind":"struct"},"2:4":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"36:740":{"crate_id":36,"path":["hashbrown","map","Drain"],"kind":"struct"},"0:421":{"crate_id":0,"path":["rustc_lint_defs","BuiltinLintDiagnostics","ReservedPrefix"],"kind":"variant"},"1:11997":{"crate_id":1,"path":["std","sys","unix","condvar","Condvar"],"kind":"struct"},"75:3387":{"crate_id":75,"path":["rustc_target","asm","aarch64","AArch64InlineAsmReg"],"kind":"enum"},"29:236":{"crate_id":29,"path":["rustc_data_structures","graph","implementation","AdjacentEdges"],"kind":"struct"},"14:4762":{"crate_id":14,"path":["gimli","constants","DwOrd"],"kind":"struct"},"39:561":{"crate_id":39,"path":["libc","unix","iovec"],"kind":"struct"},"14:4671":{"crate_id":14,"path":["gimli","constants","DwId"],"kind":"struct"},"2:47883":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"15:10558":{"crate_id":15,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"2:44641":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"14:7392":{"crate_id":14,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"25:273":{"crate_id":25,"path":["tracing_core","field","FieldSet"],"kind":"struct"},"38:0":{"crate_id":38,"path":["jobserver"],"kind":"module"},"5:7385":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"0:165":{"crate_id":0,"path":["rustc_lint_defs","builtin","IRREFUTABLE_LET_PATTERNS"],"kind":"static"},"36:350":{"crate_id":36,"path":["hashbrown","raw","inner","RawIter"],"kind":"struct"},"39:6009":{"crate_id":39,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"14:3392":{"crate_id":14,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"2:45073":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"25:1162":{"crate_id":25,"path":["tracing_core","metadata","ParseLevelError"],"kind":"struct"},"68:0":{"crate_id":68,"path":["opaque_debug"],"kind":"module"},"0:123":{"crate_id":0,"path":["rustc_lint_defs","builtin","UNUSED_CRATE_DEPENDENCIES"],"kind":"static"},"6:5176":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"6:5965":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"21:0":{"crate_id":21,"path":["rustc_ast"],"kind":"module"},"15:10599":{"crate_id":15,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"36:677":{"crate_id":36,"path":["hashbrown","map","Iter"],"kind":"struct"},"6:3695":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"0:180":{"crate_id":0,"path":["rustc_lint_defs","builtin","ASM_SUB_REGISTER"],"kind":"static"},"72:0":{"crate_id":72,"path":["scoped_tls"],"kind":"module"},"34:208":{"crate_id":34,"path":["smallvec","{{impl}}","insert_many","DropOnPanic"],"kind":"struct"},"2:10109":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"2:3012":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"1:8417":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"1:15274":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"16:650":{"crate_id":16,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"2:4260":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"1:14439":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"14:5672":{"crate_id":14,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"2:47804":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"69:182":{"crate_id":69,"path":["sha1","Sha1"],"kind":"struct"},"0:307":{"crate_id":0,"path":["rustc_lint_defs","FutureIncompatibleInfo"],"kind":"struct"},"15:13477":{"crate_id":15,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"15:10179":{"crate_id":15,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"1:5394":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"2:21849":{"crate_id":2,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"21:1907":{"crate_id":21,"path":["rustc_ast","util","comments","Comment"],"kind":"struct"},"2:33743":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"2:3300":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"5:4647":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"2:45991":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"15:11640":{"crate_id":15,"path":["object","elf","Rela32"],"kind":"struct"},"39:520":{"crate_id":39,"path":["libc","unix","rlimit"],"kind":"struct"},"0:138":{"crate_id":0,"path":["rustc_lint_defs","builtin","UNKNOWN_CRATE_TYPES"],"kind":"static"},"17:1020":{"crate_id":17,"path":["miniz_oxide","MZError"],"kind":"enum"},"2:44124":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"2:4341":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"14:5522":{"crate_id":14,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"36:1593":{"crate_id":36,"path":["hashbrown","set","Union"],"kind":"struct"},"15:11653":{"crate_id":15,"path":["object","elf","Rel64"],"kind":"struct"},"2:44364":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"14:6518":{"crate_id":14,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"6:4949":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"2:4414":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"65:0":{"crate_id":65,"path":["generic_array"],"kind":"module"},"21:7320":{"crate_id":21,"path":["rustc_ast","visit","FnCtxt"],"kind":"enum"},"1:7802":{"crate_id":1,"path":["std","sync","mpsc","shared","Packet"],"kind":"struct"},"48:33":{"crate_id":48,"path":["scopeguard","ScopeGuard"],"kind":"struct"},"2:43648":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"1:15273":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"1:2615":{"crate_id":1,"path":["rustc_lint_defs","Target"],"kind":"typedef"},"1:11656":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"15:13609":{"crate_id":15,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"58:144":{"crate_id":58,"path":["memmap2","MmapOptions"],"kind":"struct"},"14:3218":{"crate_id":14,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"0:118":{"crate_id":0,"path":["rustc_lint_defs","builtin","UNCONDITIONAL_PANIC"],"kind":"static"},"9:876":{"crate_id":9,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"6:5169":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"5:743":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"75:5843":{"crate_id":75,"path":["rustc_target","asm","x86","X86InlineAsmRegClass"],"kind":"enum"},"64:236":{"crate_id":64,"path":["digest","errors","InvalidOutputSize"],"kind":"struct"},"2:3449":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"22:4234":{"crate_id":22,"path":["rustc_span","symbol","InternerInner"],"kind":"struct"},"21:3049":{"crate_id":21,"path":["rustc_ast","ast","BinOpKind"],"kind":"enum"},"39:5918":{"crate_id":39,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"0:127":{"crate_id":0,"path":["rustc_lint_defs","builtin","UNUSED_ASSIGNMENTS"],"kind":"static"},"39:6067":{"crate_id":39,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"2:47156":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"2:41876":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"2:44131":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"29:4407":{"crate_id":29,"path":["rustc_data_structures","frozen","Frozen"],"kind":"struct"},"6:6639":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"22:4204":{"crate_id":22,"path":["rustc_span","symbol","SymbolIndex"],"kind":"struct"},"52:2322":{"crate_id":52,"path":["rand","rngs","adapter","read","ReadError"],"kind":"struct"},"2:47519":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"2:21493":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"14:3939":{"crate_id":14,"path":["gimli","constants","DwTag"],"kind":"struct"},"1:8578":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"39:3727":{"crate_id":39,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"38:158":{"crate_id":38,"path":["jobserver","HelperState"],"kind":"struct"},"2:45584":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"1:1265":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"1:15275":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"2:3004":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"22:2064":{"crate_id":22,"path":["rustc_span","hygiene","HygieneData"],"kind":"struct"},"39:3822":{"crate_id":39,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"75:2642":{"crate_id":75,"path":["rustc_target","abi","call","Heterogeneous"],"kind":"struct"},"21:7087":{"crate_id":21,"path":["rustc_ast","tokenstream","TokenTree"],"kind":"enum"},"73:177":{"crate_id":73,"path":["rustc_lexer","Token"],"kind":"struct"},"1:4099":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"15:11555":{"crate_id":15,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"75:9602":{"crate_id":75,"path":["rustc_target","spec","Target"],"kind":"struct"},"16:896":{"crate_id":16,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"6:600":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"75:0":{"crate_id":75,"path":["rustc_target"],"kind":"module"},"1:14470":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"21:6070":{"crate_id":21,"path":["rustc_ast","ast","ImplKind"],"kind":"struct"},"0:141":{"crate_id":0,"path":["rustc_lint_defs","builtin","PRIVATE_IN_PUBLIC"],"kind":"static"},"2:42685":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"2:7205":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"1:3172":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"39:6085":{"crate_id":39,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"6:5941":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"2:45975":{"crate_id":2,"path":["core","str","LinesAnyMap"],"kind":"struct"},"2:42374":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"38:146":{"crate_id":38,"path":["jobserver","Client"],"kind":"struct"},"1:11799":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"29:808":{"crate_id":29,"path":["rustc_data_structures","owning_ref","OwningRef"],"kind":"struct"},"2:3123":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"56:1647":{"crate_id":56,"path":["ppv_lite86","x86_64","vec256_storage"],"kind":"union"},"5:1325":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"6:1695":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"14:7236":{"crate_id":14,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"21:5996":{"crate_id":21,"path":["rustc_ast","ast","FnHeader"],"kind":"struct"},"14:5029":{"crate_id":14,"path":["gimli","constants","DwRle"],"kind":"struct"},"1:10563":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"2:10105":{"crate_id":2,"path":["rustc_lint_defs","IntoIter"],"kind":"typedef"},"6:6489":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"0:417":{"crate_id":0,"path":["rustc_lint_defs","BuiltinLintDiagnostics","OrPatternsBackCompat"],"kind":"variant"},"39:4082":{"crate_id":39,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"14:7195":{"crate_id":14,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"1:3469":{"crate_id":1,"path":["std","io","buffered","bufwriter","{{impl}}","flush_buf","BufGuard"],"kind":"struct"},"15:13933":{"crate_id":15,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"1:1934":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"2:21414":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"39:5179":{"crate_id":39,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"1:1301":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"21:2678":{"crate_id":21,"path":["rustc_ast","ast","MetaItemKind"],"kind":"enum"},"21:6532":{"crate_id":21,"path":["rustc_ast","token","CommentKind"],"kind":"enum"},"2:8847":{"crate_id":2,"path":["core","stream","stream","Stream"],"kind":"trait"},"59:27":{"crate_id":59,"path":["stacker","StackRestoreGuard"],"kind":"struct"},"29:4330":{"crate_id":29,"path":["rustc_data_structures","tiny_list","Element"],"kind":"struct"},"16:790":{"crate_id":16,"path":["memchr","memmem","FindIter"],"kind":"struct"},"32:281":{"crate_id":32,"path":["arrayvec","arrayvec","ScopeExitGuard"],"kind":"struct"},"1:9951":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"31:593":{"crate_id":31,"path":["rustc_index","bit_set","GrowableBitSet"],"kind":"struct"},"21:3458":{"crate_id":21,"path":["rustc_ast","ast","Expr"],"kind":"struct"},"23:0":{"crate_id":23,"path":["tracing"],"kind":"module"},"35:269":{"crate_id":35,"path":["indexmap","map","core","Entry"],"kind":"enum"},"15:12095":{"crate_id":15,"path":["object","macho","Section32"],"kind":"struct"},"1:14679":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"1:11703":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"61:45":{"crate_id":61,"path":["rustc_arena","TypedArena"],"kind":"struct"},"25:1132":{"crate_id":25,"path":["tracing_core","metadata","LevelInner"],"kind":"enum"},"1:10267":{"crate_id":1,"path":["std","collections","hash","map","RandomState"],"kind":"struct"},"31:665":{"crate_id":31,"path":["rustc_index","bit_set","FiniteBitSet"],"kind":"struct"},"5:2663":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"28:0":{"crate_id":28,"path":["pin_project_lite"],"kind":"module"},"18:54":{"crate_id":18,"path":["adler","Adler32"],"kind":"struct"},"15:13282":{"crate_id":15,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"0:321":{"crate_id":0,"path":["rustc_lint_defs","FutureIncompatibilityReason","EditionError"],"kind":"variant"},"55:224":{"crate_id":55,"path":["rand_chacha","chacha","ChaCha12Core"],"kind":"struct"},"39:4107":{"crate_id":39,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"14:6682":{"crate_id":14,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"53:188":{"crate_id":53,"path":["rand_core","RngCore"],"kind":"trait"},"2:42606":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"6:533":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"25:810":{"crate_id":25,"path":["tracing_core","dispatcher","DefaultGuard"],"kind":"struct"},"22:4548":{"crate_id":22,"path":["rustc_span","ExternalSource"],"kind":"enum"},"22:2369":{"crate_id":22,"path":["rustc_span","hygiene","ForLoopLoc"],"kind":"enum"},"2:43528":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"6:3842":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"0:179":{"crate_id":0,"path":["rustc_lint_defs","builtin","INLINE_NO_SANITIZE"],"kind":"static"},"6:4083":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"53:109":{"crate_id":53,"path":["rand_core","error","Error"],"kind":"struct"},"52:1996":{"crate_id":52,"path":["rand","distributions","uniform","UniformDurationMode"],"kind":"enum"},"39:4088":{"crate_id":39,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"1:8949":{"crate_id":1,"path":["std","lazy","SyncLazy"],"kind":"struct"},"29:3789":{"crate_id":29,"path":["rustc_data_structures","sorted_map","index_map","SortedIndexMultiMap"],"kind":"struct"},"45:179":{"crate_id":45,"path":["parking_lot","once","Once"],"kind":"struct"},"1:12291":{"crate_id":1,"path":["std","sys","unix","fs","Dir"],"kind":"struct"},"2:47494":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"39:3687":{"crate_id":39,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"29:326":{"crate_id":29,"path":["rustc_data_structures","graph","iterate","DepthFirstSearch"],"kind":"struct"},"2:42597":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"0:113":{"crate_id":0,"path":["rustc_lint_defs","builtin","ILL_FORMED_ATTRIBUTE_INPUT"],"kind":"static"},"29:4254":{"crate_id":29,"path":["rustc_data_structures","sync","Atomic"],"kind":"struct"},"2:43936":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"2:4395":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"21:5816":{"crate_id":21,"path":["rustc_ast","ast","Visibility"],"kind":"struct"},"9:453":{"crate_id":9,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"2:48201":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"1:10955":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"11:0":{"crate_id":11,"path":["rustc_demangle"],"kind":"module"},"15:10377":{"crate_id":15,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"52:2398":{"crate_id":52,"path":["rand","seq","index","IndexVecIter"],"kind":"enum"},"9:1026":{"crate_id":9,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"5:3378":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"22:4844":{"crate_id":22,"path":["rustc_span","SpanLinesError"],"kind":"enum"},"33:1046":{"crate_id":33,"path":["rustc_serialize","opaque","FileEncoder"],"kind":"struct"},"66:5974":{"crate_id":66,"path":["typenum","bit","B1"],"kind":"struct"},"53:252":{"crate_id":53,"path":["rand_core","os","OsRng"],"kind":"struct"},"16:849":{"crate_id":16,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"1:14075":{"crate_id":1,"path":["std","sys","unix","kernel_copy","SpliceMode"],"kind":"enum"},"15:12051":{"crate_id":15,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"16:720":{"crate_id":16,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"52:2376":{"crate_id":52,"path":["rand","rngs","thread","ThreadRng"],"kind":"struct"},"1:2783":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"2:22105":{"crate_id":2,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"16:644":{"crate_id":16,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"1:6979":{"crate_id":1,"path":["std","path","{{impl}}","fmt","DebugHelper"],"kind":"struct"},"15:12783":{"crate_id":15,"path":["object","macho","RelocationInfo"],"kind":"struct"},"6:3836":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"32:616":{"crate_id":32,"path":["arrayvec","errors","CapacityError"],"kind":"struct"},"44:312":{"crate_id":44,"path":["measureme","serialization","StdWriteAdapter"],"kind":"struct"},"15:9088":{"crate_id":15,"path":["object","common","RelocationKind"],"kind":"enum"},"14:3800":{"crate_id":14,"path":["gimli","constants","DwChildren"],"kind":"struct"},"15:12262":{"crate_id":15,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"15:13582":{"crate_id":15,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"56:1660":{"crate_id":56,"path":["ppv_lite86","x86_64","vec512_storage"],"kind":"union"},"16:136":{"crate_id":16,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"22:4647":{"crate_id":22,"path":["rustc_span","SourceFileHash"],"kind":"struct"},"21:6939":{"crate_id":21,"path":["rustc_ast","token","Nonterminal"],"kind":"enum"},"15:11001":{"crate_id":15,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"2:9037":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"1:11615":{"crate_id":1,"path":["std","sync","mpsc","cache_aligned","CacheAligned"],"kind":"struct"},"66:6480":{"crate_id":66,"path":["typenum","Greater"],"kind":"struct"},"6:3923":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"24:0":{"crate_id":24,"path":["cfg_if"],"kind":"module"},"1:10804":{"crate_id":1,"path":["std","net","addr","SocketAddrV4"],"kind":"struct"},"14:6087":{"crate_id":14,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"75:2685":{"crate_id":75,"path":["rustc_target","abi","call","Conv"],"kind":"enum"},"56:1607":{"crate_id":56,"path":["ppv_lite86","x86_64","NoNI"],"kind":"struct"},"39:5037":{"crate_id":39,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"39:1693":{"crate_id":39,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"21:5248":{"crate_id":21,"path":["rustc_ast","ast","Unsafe"],"kind":"enum"},"39:1628":{"crate_id":39,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"0:261":{"crate_id":0,"path":["rustc_lint_defs","Level","Allow"],"kind":"variant"},"51:0":{"crate_id":51,"path":["remove_dir_all"],"kind":"module"},"75:2583":{"crate_id":75,"path":["rustc_target","abi","call","Uniform"],"kind":"struct"},"15:9551":{"crate_id":15,"path":["object","read","util","ByteString"],"kind":"struct"},"15:11750":{"crate_id":15,"path":["object","elf","Verdef"],"kind":"struct"},"1:10503":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"44:571":{"crate_id":44,"path":["measureme","serialization","SerializationSinkInner"],"kind":"struct"},"6:6017":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"29:3676":{"crate_id":29,"path":["rustc_data_structures","obligation_forest","Outcome"],"kind":"struct"},"6:5996":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"0:218":{"crate_id":0,"path":["rustc_lint_defs","builtin","RUST_2021_PRELUDE_COLLISIONS"],"kind":"static"},"1:9372":{"crate_id":1,"path":["std","sys_common","rwlock","MovableRWLock"],"kind":"struct"},"1:1270":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"39:4979":{"crate_id":39,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"38:141":{"crate_id":38,"path":["jobserver","imp","Helper"],"kind":"struct"},"2:28812":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"6:3671":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"14:7870":{"crate_id":14,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"1:15282":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"21:2623":{"crate_id":21,"path":["rustc_ast","ast","NestedMetaItem"],"kind":"enum"},"1:10368":{"crate_id":1,"path":["std","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"2:43597":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"2:45559":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"15:13465":{"crate_id":15,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"2:10276":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"58:23":{"crate_id":58,"path":["memmap2","unix","MmapInner"],"kind":"struct"},"29:3611":{"crate_id":29,"path":["rustc_data_structures","obligation_forest","ProcessResult"],"kind":"enum"},"15:9649":{"crate_id":15,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"39:599":{"crate_id":39,"path":["libc","unix","tms"],"kind":"struct"},"39:1572":{"crate_id":39,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"22:4138":{"crate_id":22,"path":["rustc_span","symbol","MacroRulesNormalizedIdent"],"kind":"struct"},"44:0":{"crate_id":44,"path":["measureme"],"kind":"module"},"33:1850":{"crate_id":33,"path":["rustc_serialize","json","Stack"],"kind":"struct"},"39:3739":{"crate_id":39,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"29:4427":{"crate_id":29,"path":["rustc_data_structures","sso","map","SsoHashMap"],"kind":"enum"},"6:1574":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"1:935":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"14:5407":{"crate_id":14,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"2:21429":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"15:4157":{"crate_id":15,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"6:1541":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"2:42151":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"14:4477":{"crate_id":14,"path":["gimli","constants","DwAccess"],"kind":"struct"},"52:946":{"crate_id":52,"path":["rand","seq","index","sample_efraimidis_spirakis","Element"],"kind":"struct"},"39:5010":{"crate_id":39,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"14:5314":{"crate_id":14,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"1:9316":{"crate_id":1,"path":["std","sys_common","remutex","ReentrantMutex"],"kind":"struct"},"14:6166":{"crate_id":14,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"2:49316":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"6:4281":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"5:2905":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"5:1344":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"29:3939":{"crate_id":29,"path":["rustc_data_structures","fingerprint","PackedFingerprint"],"kind":"struct"},"52:1583":{"crate_id":52,"path":["rand","distributions","slice","EmptySlice"],"kind":"struct"},"39:4099":{"crate_id":39,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"6:5018":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"15:10844":{"crate_id":15,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"75:9616":{"crate_id":75,"path":["rustc_target","spec","TargetOptions"],"kind":"struct"},"1:10555":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"21:7023":{"crate_id":21,"path":["rustc_ast","token","NonterminalKind"],"kind":"enum"},"52:2336":{"crate_id":52,"path":["rand","rngs","adapter","reseeding","ReseedingCore"],"kind":"struct"},"32:608":{"crate_id":32,"path":["arrayvec","array_string","ArrayString"],"kind":"struct"},"6:553":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"5:4763":{"crate_id":5,"path":["rustc_lint_defs","Target"],"kind":"typedef"},"29:3441":{"crate_id":29,"path":["rustc_data_structures","graph","scc","NodeState"],"kind":"enum"},"14:7549":{"crate_id":14,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"21:5592":{"crate_id":21,"path":["rustc_ast","ast","AttrStyle"],"kind":"enum"},"0:171":{"crate_id":0,"path":["rustc_lint_defs","builtin","EXPLICIT_OUTLIVES_REQUIREMENTS"],"kind":"static"},"15:12685":{"crate_id":15,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"15:12221":{"crate_id":15,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"2:44662":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"2:43469":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"1:8049":{"crate_id":1,"path":["std","sync","mpsc","sync","Packet"],"kind":"struct"},"0:190":{"crate_id":0,"path":["rustc_lint_defs","builtin","INEFFECTIVE_UNSTABLE_TRAIT_IMPL"],"kind":"static"},"0:219":{"crate_id":0,"path":["rustc_lint_defs","builtin","RUST_2021_PREFIXES_INCOMPATIBLE_SYNTAX"],"kind":"static"},"0:130":{"crate_id":0,"path":["rustc_lint_defs","builtin","UNREACHABLE_CODE"],"kind":"static"},"21:6046":{"crate_id":21,"path":["rustc_ast","ast","TyAliasKind"],"kind":"struct"},"29:260":{"crate_id":29,"path":["rustc_data_structures","graph","implementation","DepthFirstTraversal"],"kind":"struct"},"15:11458":{"crate_id":15,"path":["object","elf","FileHeader64"],"kind":"struct"},"75:2904":{"crate_id":75,"path":["rustc_target","abi","Integer"],"kind":"enum"},"2:7976":{"crate_id":2,"path":["core","lazy","Lazy"],"kind":"struct"},"39:3733":{"crate_id":39,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"2:9304":{"crate_id":2,"path":["core","fmt","Result"],"kind":"typedef"},"1:7025":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"2:28635":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"1:14088":{"crate_id":1,"path":["std","sys","unix","os","JoinPathsError"],"kind":"struct"},"56:1511":{"crate_id":56,"path":["ppv_lite86","x86_64","sse2","avx2","u32x4x4_avx2"],"kind":"struct"},"14:3041":{"crate_id":14,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"25:1211":{"crate_id":25,"path":["tracing_core","span","CurrentInner"],"kind":"enum"},"39:5153":{"crate_id":39,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"61:0":{"crate_id":61,"path":["rustc_arena"],"kind":"module"},"6:501":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"5:1834":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"1:4289":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"31:523":{"crate_id":31,"path":["rustc_index","bit_set","BitSet"],"kind":"struct"},"14:6366":{"crate_id":14,"path":["gimli","read","line","LineRow"],"kind":"struct"},"52:1142":{"crate_id":52,"path":["rand","distributions","distribution","DistIter"],"kind":"struct"},"14:3365":{"crate_id":14,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"15:12118":{"crate_id":15,"path":["object","macho","Section64"],"kind":"struct"},"75:9593":{"crate_id":75,"path":["rustc_target","spec","TargetWarnings"],"kind":"struct"},"15:12699":{"crate_id":15,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"14:2754":{"crate_id":14,"path":["gimli","common","Encoding"],"kind":"struct"},"39:5310":{"crate_id":39,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"6:4211":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"9:380":{"crate_id":9,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"75:7004":{"crate_id":75,"path":["rustc_target","spec","MergeFunctions"],"kind":"enum"},"21:2256":{"crate_id":21,"path":["rustc_ast","ast","AngleBracketedArgs"],"kind":"struct"},"14:7295":{"crate_id":14,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"2:7150":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"40:85":{"crate_id":40,"path":["rustc_graphviz","Style"],"kind":"enum"},"52:1168":{"crate_id":52,"path":["rand","distributions","float","OpenClosed01"],"kind":"struct"},"16:677":{"crate_id":16,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"14:3118":{"crate_id":14,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"49:370":{"crate_id":49,"path":["parking_lot_core","parking_lot","UnparkToken"],"kind":"struct"},"2:45253":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"22:4255":{"crate_id":22,"path":["rustc_span","fatal_error","FatalError"],"kind":"struct"},"15:10211":{"crate_id":15,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"1:2355":{"crate_id":1,"path":["std","error","{{impl}}","from","StringError"],"kind":"struct"},"47:303":{"crate_id":47,"path":["lock_api","remutex","ReentrantMutex"],"kind":"struct"},"13:269":{"crate_id":13,"path":["addr2line","RangeAttributes"],"kind":"struct"},"14:7073":{"crate_id":14,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"15:13240":{"crate_id":15,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"6:5926":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"15:10584":{"crate_id":15,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"9:1067":{"crate_id":9,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"2:7426":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"1:14011":{"crate_id":1,"path":["std","sys","unix","fs","StatxExtraFields"],"kind":"struct"},"16:729":{"crate_id":16,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"39:4992":{"crate_id":39,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"1:14016":{"crate_id":1,"path":["std","sys","unix","fs","OpenOptions"],"kind":"struct"},"39:5064":{"crate_id":39,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"0:392":{"crate_id":0,"path":["rustc_lint_defs","BuiltinLintDiagnostics","MissingAbi"],"kind":"variant"},"22:2271":{"crate_id":22,"path":["rustc_span","hygiene","MacroKind"],"kind":"enum"},"15:11337":{"crate_id":15,"path":["object","read","CompressionFormat"],"kind":"enum"},"39:3915":{"crate_id":39,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"2:44418":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"2:42615":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"1:4346":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"2:21881":{"crate_id":2,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"35:409":{"crate_id":35,"path":["indexmap","map","IndexMap"],"kind":"struct"},"14:6718":{"crate_id":14,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"14:5632":{"crate_id":14,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"2:47567":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"9:711":{"crate_id":9,"path":["hashbrown","map","Iter"],"kind":"struct"},"15:10117":{"crate_id":15,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"22:2399":{"crate_id":22,"path":["rustc_span","hygiene","HygieneEncodeContext"],"kind":"struct"},"15:11231":{"crate_id":15,"path":["object","read","Import"],"kind":"struct"},"25:854":{"crate_id":25,"path":["tracing_core","field","DebugValue"],"kind":"struct"},"21:5789":{"crate_id":21,"path":["rustc_ast","ast","CrateSugar"],"kind":"enum"},"1:11570":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"1:3368":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"21:2602":{"crate_id":21,"path":["rustc_ast","ast","Crate"],"kind":"struct"},"39:3650":{"crate_id":39,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"1:4321":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"9:1796":{"crate_id":9,"path":["hashbrown","set","Union"],"kind":"struct"},"2:43972":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"15:12168":{"crate_id":15,"path":["object","macho","Dylib"],"kind":"struct"},"5:3989":{"crate_id":5,"path":["alloc","collections","vec_deque","pair_slices","PairSlices"],"kind":"struct"},"2:34900":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"2:6975":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"43:288":{"crate_id":43,"path":["log","RecordBuilder"],"kind":"struct"},"5:6520":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"15:10236":{"crate_id":15,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"21:6020":{"crate_id":21,"path":["rustc_ast","ast","TraitKind"],"kind":"struct"},"15:294":{"crate_id":15,"path":["object","read","util","DebugByte"],"kind":"struct"},"2:43605":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"2:2606":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"15:12795":{"crate_id":15,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"15:9404":{"crate_id":15,"path":["object","endian","I16Bytes"],"kind":"struct"},"1:3493":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"16:169":{"crate_id":16,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"14:7406":{"crate_id":14,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"2:21360":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"15:1311":{"crate_id":15,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"2:46155":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"2:42324":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"75:4673":{"crate_id":75,"path":["rustc_target","asm","nvptx","NvptxInlineAsmRegClass"],"kind":"enum"},"14:3604":{"crate_id":14,"path":["gimli","arch","X86_64"],"kind":"struct"},"22:4809":{"crate_id":22,"path":["rustc_span","Loc"],"kind":"struct"},"5:7493":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"1:1956":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"1:1419":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"22:1925":{"crate_id":22,"path":["rustc_span","hygiene","ExpnId"],"kind":"struct"},"15:11726":{"crate_id":15,"path":["object","elf","Dyn64"],"kind":"struct"},"36:372":{"crate_id":36,"path":["hashbrown","raw","inner","RawIntoIter"],"kind":"struct"},"36:1861":{"crate_id":36,"path":["hashbrown","raw","inner","bitmask","BitMask"],"kind":"struct"},"0:164":{"crate_id":0,"path":["rustc_lint_defs","builtin","UNSTABLE_NAME_COLLISIONS"],"kind":"static"},"1:7090":{"crate_id":1,"path":["rustc_lint_defs","Target"],"kind":"typedef"},"21:6594":{"crate_id":21,"path":["rustc_ast","token","BinOpToken"],"kind":"enum"},"6:3935":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"2:45210":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"75:2649":{"crate_id":75,"path":["rustc_target","abi","call","ArgAbi"],"kind":"struct"},"14:6964":{"crate_id":14,"path":["gimli","read","op","Location"],"kind":"enum"},"15:13429":{"crate_id":15,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"39:1600":{"crate_id":39,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"21:4423":{"crate_id":21,"path":["rustc_ast","ast","IntTy"],"kind":"enum"},"5:2920":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"2:8363":{"crate_id":2,"path":["rustc_lint_defs","Target"],"kind":"typedef"},"1:8157":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"2:49053":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"75:4731":{"crate_id":75,"path":["rustc_target","asm","nvptx","NvptxInlineAsmReg"],"kind":"enum"},"39:3842":{"crate_id":39,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"29:2244":{"crate_id":29,"path":["rustc_data_structures","profiling","VerboseTimingGuard"],"kind":"struct"},"14:6269":{"crate_id":14,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"2:10199":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"0:117":{"crate_id":0,"path":["rustc_lint_defs","builtin","ARITHMETIC_OVERFLOW"],"kind":"static"},"2:47114":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"21:3512":{"crate_id":21,"path":["rustc_ast","ast","StructRest"],"kind":"enum"},"44:541":{"crate_id":44,"path":["measureme","serialization","Addr"],"kind":"struct"},"43:275":{"crate_id":43,"path":["log","Record"],"kind":"struct"},"16:636":{"crate_id":16,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"39:546":{"crate_id":39,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"5:3366":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"1:13991":{"crate_id":1,"path":["std","sys","unix","fd","FileDesc"],"kind":"struct"},"1:1223":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"39:3894":{"crate_id":39,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"33:353":{"crate_id":33,"path":["rustc_serialize","serialize","Encodable"],"kind":"trait"},"14:3549":{"crate_id":14,"path":["gimli","arch","X86"],"kind":"struct"},"0:339":{"crate_id":0,"path":["rustc_lint_defs","ExternDepSpec"],"kind":"enum"},"15:11539":{"crate_id":15,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"6:3873":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"29:4365":{"crate_id":29,"path":["rustc_data_structures","transitive_relation","Edge"],"kind":"struct"},"31:652":{"crate_id":31,"path":["rustc_index","bit_set","SparseBitMatrix"],"kind":"struct"},"1:10985":{"crate_id":1,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"14:5996":{"crate_id":14,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"2:3444":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"2:4331":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"41:0":{"crate_id":41,"path":["stable_deref_trait"],"kind":"module"},"2:45022":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"66:0":{"crate_id":66,"path":["typenum"],"kind":"module"},"16:667":{"crate_id":16,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"0:192":{"crate_id":0,"path":["rustc_lint_defs","builtin","LEGACY_DERIVE_HELPERS"],"kind":"static"},"5:3256":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"14:6620":{"crate_id":14,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"14:4890":{"crate_id":14,"path":["gimli","constants","DwLns"],"kind":"struct"},"15:13810":{"crate_id":15,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"56:1582":{"crate_id":56,"path":["ppv_lite86","x86_64","YesA1"],"kind":"struct"},"2:42536":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"9:1776":{"crate_id":9,"path":["hashbrown","set","Intersection"],"kind":"struct"},"29:3626":{"crate_id":29,"path":["rustc_data_structures","obligation_forest","ObligationTreeId"],"kind":"struct"},"15:9600":{"crate_id":15,"path":["object","read","any","FileInternal"],"kind":"enum"},"5:4054":{"crate_id":5,"path":["alloc","collections","vec_deque","{{impl}}","drop","Dropper"],"kind":"struct"},"15:13163":{"crate_id":15,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"36:1850":{"crate_id":36,"path":["hashbrown","raw","inner","sse2","Group"],"kind":"struct"},"49:400":{"crate_id":49,"path":["parking_lot_core","spinwait","SpinWait"],"kind":"struct"},"2:21945":{"crate_id":2,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"2:11415":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"0:224":{"crate_id":0,"path":["rustc_lint_defs","builtin","DEREF_INTO_DYN_SUPERTRAIT"],"kind":"static"},"14:5346":{"crate_id":14,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"2:10157":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"1:3034":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"29:3409":{"crate_id":29,"path":["rustc_data_structures","graph","iterate","NodeStatus"],"kind":"enum"},"25:1176":{"crate_id":25,"path":["tracing_core","span","Id"],"kind":"struct"},"2:2904":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"15:3743":{"crate_id":15,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"1:11218":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"9:738":{"crate_id":9,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"1:10979":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"22:4313":{"crate_id":22,"path":["rustc_span","FileName"],"kind":"enum"},"22:2438":{"crate_id":22,"path":["rustc_span","hygiene","HygieneDecodeContext"],"kind":"struct"},"14:3091":{"crate_id":14,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"2:4695":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"2:42922":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"22:4229":{"crate_id":22,"path":["rustc_span","symbol","Interner"],"kind":"struct"},"2:43589":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"0:107":{"crate_id":0,"path":["rustc_lint_defs","LintArray"],"kind":"typedef"},"1:4399":{"crate_id":1,"path":["rustc_lint_defs","Target"],"kind":"typedef"},"1:12288":{"crate_id":1,"path":["std","sys","unix","fs","ReadDir"],"kind":"struct"},"39:3834":{"crate_id":39,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"2:12182":{"crate_id":2,"path":["core","str","lossy","Utf8Lossy"],"kind":"struct"},"0:340":{"crate_id":0,"path":["rustc_lint_defs","ExternDepSpec","Json"],"kind":"variant"},"6:595":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"14:6464":{"crate_id":14,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"6:1580":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"21:4934":{"crate_id":21,"path":["rustc_ast","ast","InlineAsmOperand"],"kind":"enum"},"2:12984":{"crate_id":2,"path":["core","task","ready","Ready"],"kind":"struct"},"39:1699":{"crate_id":39,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"9:2066":{"crate_id":9,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"39:1714":{"crate_id":39,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"75:5655":{"crate_id":75,"path":["rustc_target","asm","spirv","SpirVInlineAsmRegClass"],"kind":"enum"},"1:692":{"crate_id":1,"path":["std","thread","local","fast","Key"],"kind":"struct"},"0:353":{"crate_id":0,"path":["rustc_lint_defs","BuiltinLintDiagnostics","Normal"],"kind":"variant"},"1:3154":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"2:43792":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"58:122":{"crate_id":58,"path":["memmap2","MmapMut"],"kind":"struct"},"14:2889":{"crate_id":14,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"21:4509":{"crate_id":21,"path":["rustc_ast","ast","AssocTyConstraint"],"kind":"struct"},"2:2910":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"0:414":{"crate_id":0,"path":["rustc_lint_defs","BuiltinLintDiagnostics","ProcMacroBackCompat"],"kind":"variant"},"23:147":{"crate_id":23,"path":["tracing","instrument","Instrument"],"kind":"trait"},"75:4226":{"crate_id":75,"path":["rustc_target","asm","hexagon","HexagonInlineAsmRegClass"],"kind":"enum"},"0:134":{"crate_id":0,"path":["rustc_lint_defs","builtin","UNUSED_MACROS"],"kind":"static"},"21:2225":{"crate_id":21,"path":["rustc_ast","ast","GenericArg"],"kind":"enum"},"2:48387":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"1:13249":{"crate_id":1,"path":["std","sys","unix","pipe","AnonPipe"],"kind":"struct"},"14:3064":{"crate_id":14,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"2:42422":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"36:974":{"crate_id":36,"path":["hashbrown","map","Entry"],"kind":"enum"},"29:1367":{"crate_id":29,"path":["rustc_data_structures","snapshot_map","SnapshotMap"],"kind":"struct"},"2:47961":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"39:4129":{"crate_id":39,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"21:3384":{"crate_id":21,"path":["rustc_ast","ast","BlockCheckMode"],"kind":"enum"},"14:6691":{"crate_id":14,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"0:147":{"crate_id":0,"path":["rustc_lint_defs","builtin","CONST_ITEM_MUTATION"],"kind":"static"},"21:7307":{"crate_id":21,"path":["rustc_ast","visit","AssocCtxt"],"kind":"enum"},"39:1660":{"crate_id":39,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"21:4733":{"crate_id":21,"path":["rustc_ast","ast","InlineAsmRegOrRegClass"],"kind":"enum"},"15:13318":{"crate_id":15,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"39:3865":{"crate_id":39,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"14:5433":{"crate_id":14,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"56:958":{"crate_id":56,"path":["ppv_lite86","soft","x2"],"kind":"struct"},"0:260":{"crate_id":0,"path":["rustc_lint_defs","Level"],"kind":"enum"},"2:3076":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"2:43461":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"35:534":{"crate_id":35,"path":["indexmap","map","Keys"],"kind":"struct"},"1:10218":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"16:820":{"crate_id":16,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"39:526":{"crate_id":39,"path":["libc","unix","rusage"],"kind":"struct"},"6:4115":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"0:94":{"crate_id":0,"path":["rustc_lint_defs","KeyType"],"kind":"typedef"},"0:136":{"crate_id":0,"path":["rustc_lint_defs","builtin","UNUSED_FEATURES"],"kind":"static"},"0:145":{"crate_id":0,"path":["rustc_lint_defs","builtin","RENAMED_AND_REMOVED_LINTS"],"kind":"static"},"39:144":{"crate_id":39,"path":["libc","unix","FILE"],"kind":"enum"},"15:12456":{"crate_id":15,"path":["object","macho","TwolevelHint"],"kind":"struct"},"52:2327":{"crate_id":52,"path":["rand","rngs","adapter","reseeding","ReseedingRng"],"kind":"struct"},"75:2480":{"crate_id":75,"path":["rustc_target","abi","call","ArgExtension"],"kind":"enum"},"2:45190":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"39:4266":{"crate_id":39,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"39:5141":{"crate_id":39,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"36:842":{"crate_id":36,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"15:12982":{"crate_id":15,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"61:122":{"crate_id":61,"path":["rustc_arena","DropType"],"kind":"struct"},"5:2667":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"21:6447":{"crate_id":21,"path":["rustc_ast","entry","EntryPointType"],"kind":"enum"},"15:13497":{"crate_id":15,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"6:4297":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"22:4882":{"crate_id":22,"path":["rustc_span","DistinctSources"],"kind":"struct"},"19:117":{"crate_id":19,"path":["panic_unwind","dwarf","eh","EHContext"],"kind":"struct"},"39:1587":{"crate_id":39,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"1:4188":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"1:2237":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"0:194":{"crate_id":0,"path":["rustc_lint_defs","builtin","HardwiredLints"],"kind":"struct"},"2:9369":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"1:14489":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"2:5492":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"32:136":{"crate_id":32,"path":["arrayvec","arrayvec","{{impl}}","retain","BackshiftOnDrop"],"kind":"struct"},"21:5315":{"crate_id":21,"path":["rustc_ast","ast","Const"],"kind":"enum"},"29:1836":{"crate_id":29,"path":["rustc_data_structures","stable_hasher","ToStableHashKey"],"kind":"trait"},"21:2579":{"crate_id":21,"path":["rustc_ast","ast","WhereEqPredicate"],"kind":"struct"},"2:3118":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"49:290":{"crate_id":49,"path":["parking_lot_core","parking_lot","ParkResult"],"kind":"enum"},"6:6041":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"1:12769":{"crate_id":1,"path":["std","sys","unix","mutex","Mutex"],"kind":"struct"},"39:4231":{"crate_id":39,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"63:0":{"crate_id":63,"path":["md5"],"kind":"module"},"52:1652":{"crate_id":52,"path":["rand","distributions","weighted_index","WeightedError"],"kind":"enum"},"57:0":{"crate_id":57,"path":["bitflags"],"kind":"module"},"1:11597":{"crate_id":1,"path":["std","sync","mpsc","shared","StartResult"],"kind":"enum"},"15:11981":{"crate_id":15,"path":["object","macho","FatArch64"],"kind":"struct"},"39:148":{"crate_id":39,"path":["libc","unix","fpos_t"],"kind":"enum"},"2:3148":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"34:392":{"crate_id":34,"path":["smallvec","CollectionAllocErr"],"kind":"enum"},"0:220":{"crate_id":0,"path":["rustc_lint_defs","builtin","UNSUPPORTED_CALLING_CONVENTIONS"],"kind":"static"},"15:10095":{"crate_id":15,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"2:44872":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"29:4268":{"crate_id":29,"path":["rustc_data_structures","sync","MTLock"],"kind":"struct"},"1:10200":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"6:1562":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"75:6738":{"crate_id":75,"path":["rustc_target","spec","abi","Abi"],"kind":"enum"},"2:11020":{"crate_id":2,"path":["core","slice","sort","CopyOnDrop"],"kind":"struct"},"22:1829":{"crate_id":22,"path":["rustc_span","hygiene","SyntaxContext"],"kind":"struct"},"2:43537":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"21:2483":{"crate_id":21,"path":["rustc_ast","ast","WhereClause"],"kind":"struct"},"15:9933":{"crate_id":15,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"22:2282":{"crate_id":22,"path":["rustc_span","hygiene","AstPass"],"kind":"enum"},"15:11045":{"crate_id":15,"path":["object","read","FileKind"],"kind":"enum"},"29:2017":{"crate_id":29,"path":["rustc_data_structures","atomic_ref","AtomicRef"],"kind":"struct"},"5:976":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"39:5838":{"crate_id":39,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"1:5516":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"14:2912":{"crate_id":14,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"0:183":{"crate_id":0,"path":["rustc_lint_defs","builtin","CENUM_IMPL_DROP_CAST"],"kind":"static"},"50:484":{"crate_id":50,"path":["tempfile","file","PathPersistError"],"kind":"struct"},"15:10200":{"crate_id":15,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"2:45091":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"5:687":{"crate_id":5,"path":["rustc_lint_defs","Target"],"kind":"typedef"},"2:4348":{"crate_id":2,"path":["rustc_lint_defs","Target"],"kind":"typedef"},"21:2462":{"crate_id":21,"path":["rustc_ast","ast","Generics"],"kind":"struct"},"2:45335":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"75:5091":{"crate_id":75,"path":["rustc_target","asm","riscv","RiscVInlineAsmRegClass"],"kind":"enum"},"0:155":{"crate_id":0,"path":["rustc_lint_defs","builtin","UNUSED_MUT"],"kind":"static"},"16:885":{"crate_id":16,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"1:6529":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"15:10623":{"crate_id":15,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"2:45225":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"6:3735":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"2:8891":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"14:7786":{"crate_id":14,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"15:13192":{"crate_id":15,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"75:3303":{"crate_id":75,"path":["rustc_target","abi","PointeeInfo"],"kind":"struct"},"6:6055":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","termios2"],"kind":"struct"},"0:158":{"crate_id":0,"path":["rustc_lint_defs","builtin","UNUSED_LIFETIMES"],"kind":"static"},"1:1284":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"2:45541":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"2:45435":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"15:11947":{"crate_id":15,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"1:4424":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"14:5330":{"crate_id":14,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"73:104":{"crate_id":73,"path":["rustc_lexer","unescape","EscapeError"],"kind":"enum"},"9:2098":{"crate_id":9,"path":["hashbrown","UnavailableMutError"],"kind":"enum"},"21:4383":{"crate_id":21,"path":["rustc_ast","ast","FloatTy"],"kind":"enum"},"75:5519":{"crate_id":75,"path":["rustc_target","asm","s390x","S390xInlineAsmReg"],"kind":"enum"},"6:4107":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"21:2435":{"crate_id":21,"path":["rustc_ast","ast","GenericParam"],"kind":"struct"},"0:108":{"crate_id":0,"path":["rustc_lint_defs","LintPass"],"kind":"trait"},"35:953":{"crate_id":35,"path":["indexmap","set","IntoIter"],"kind":"struct"},"23:495":{"crate_id":23,"path":["tracing","span","PhantomNotSend"],"kind":"struct"},"36:1557":{"crate_id":36,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"1:9329":{"crate_id":1,"path":["std","sys_common","remutex","ReentrantMutexGuard"],"kind":"struct"},"15:13221":{"crate_id":15,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"14:3429":{"crate_id":14,"path":["gimli","common","SectionId"],"kind":"enum"},"47:366":{"crate_id":47,"path":["lock_api","remutex","{{impl}}","fmt","LockedPlaceholder"],"kind":"struct"},"15:13506":{"crate_id":15,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"6:5359":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"1:1950":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"17:1075":{"crate_id":17,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"1:11004":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"1:8654":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"5:4107":{"crate_id":5,"path":["alloc","collections","vec_deque","{{impl}}","truncate","Dropper"],"kind":"struct"},"35:115":{"crate_id":35,"path":["indexmap","map","core","raw","DebugIndices"],"kind":"struct"},"2:49252":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"65:480":{"crate_id":65,"path":["generic_array","GenericArrayImplOdd"],"kind":"struct"},"31:140":{"crate_id":31,"path":["rustc_index","bit_set","BitIter"],"kind":"struct"},"15:10468":{"crate_id":15,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"6:1532":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"33:1754":{"crate_id":33,"path":["rustc_serialize","json","DecoderError"],"kind":"enum"},"5:5713":{"crate_id":5,"path":["rustc_lint_defs","Target"],"kind":"typedef"},"66:6416":{"crate_id":66,"path":["typenum","array","ATerm"],"kind":"struct"},"0:161":{"crate_id":0,"path":["rustc_lint_defs","builtin","BARE_TRAIT_OBJECTS"],"kind":"static"},"2:47930":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"2:12113":{"crate_id":2,"path":["rustc_lint_defs","Searcher"],"kind":"typedef"},"15:13986":{"crate_id":15,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"6:6628":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"15:12480":{"crate_id":15,"path":["object","macho","UuidCommand"],"kind":"struct"},"9:1783":{"crate_id":9,"path":["hashbrown","set","Difference"],"kind":"struct"},"2:3142":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"2:45828":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"73:182":{"crate_id":73,"path":["rustc_lexer","TokenKind"],"kind":"enum"},"39:5168":{"crate_id":39,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"1:15265":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"6:1507":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"1:15262":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"39:3748":{"crate_id":39,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"15:12195":{"crate_id":15,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"0:140":{"crate_id":0,"path":["rustc_lint_defs","builtin","TRIVIAL_NUMERIC_CASTS"],"kind":"static"},"15:9280":{"crate_id":15,"path":["object","endian","BigEndian"],"kind":"struct"},"0:189":{"crate_id":0,"path":["rustc_lint_defs","builtin","UNSUPPORTED_NAKED_FUNCTIONS"],"kind":"static"},"21:3295":{"crate_id":21,"path":["rustc_ast","ast","LocalKind"],"kind":"enum"},"1:1192":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"52:2316":{"crate_id":52,"path":["rand","rngs","adapter","read","ReadRng"],"kind":"struct"},"2:43545":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"2:43419":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"1:10889":{"crate_id":1,"path":["std","net","parser","AddrParseError"],"kind":"struct"},"5:3243":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"9:761":{"crate_id":9,"path":["hashbrown","map","Values"],"kind":"struct"},"6:6075":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"1:3803":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"2:6896":{"crate_id":2,"path":["core","iter","adapters","ResultShunt"],"kind":"struct"},"75:2331":{"crate_id":75,"path":["rustc_target","abi","call","PassMode"],"kind":"enum"},"75:3173":{"crate_id":75,"path":["rustc_target","abi","TagEncoding"],"kind":"enum"},"1:11774":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"1:15280":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"6:1668":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"39:4967":{"crate_id":39,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"14:6021":{"crate_id":14,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"2:49278":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"21:2761":{"crate_id":21,"path":["rustc_ast","ast","PatField"],"kind":"struct"},"1:10810":{"crate_id":1,"path":["std","net","ip","IpAddr"],"kind":"enum"},"2:48990":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"25:819":{"crate_id":25,"path":["tracing_core","event","Event"],"kind":"struct"},"14:4790":{"crate_id":14,"path":["gimli","constants","DwDsc"],"kind":"struct"},"5:760":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"40:117":{"crate_id":40,"path":["rustc_graphviz","RenderOption"],"kind":"enum"},"36:1018":{"crate_id":36,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"15:10061":{"crate_id":15,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"2:49100":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"1:11759":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"15:13912":{"crate_id":15,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"5:1961":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"2:47321":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"36:704":{"crate_id":36,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"2:12033":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"5:7394":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"75:2864":{"crate_id":75,"path":["rustc_target","abi","Align"],"kind":"struct"},"15:10253":{"crate_id":15,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"15:12946":{"crate_id":15,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"35:1291":{"crate_id":35,"path":["indexmap","HashValue"],"kind":"struct"},"21:4579":{"crate_id":21,"path":["rustc_ast","ast","BareFnTy"],"kind":"struct"},"5:7417":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"2:8436":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"52:1154":{"crate_id":52,"path":["rand","distributions","distribution","DistMap"],"kind":"struct"},"2:46249":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"2:9363":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"2:9570":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"2:49331":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"36:799":{"crate_id":36,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"2:11976":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"16:712":{"crate_id":16,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"39:3779":{"crate_id":39,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"1:14029":{"crate_id":1,"path":["std","sys","unix","fs","FilePermissions"],"kind":"struct"},"1:10355":{"crate_id":1,"path":["std","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"1:7132":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"5:7509":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"21:2845":{"crate_id":21,"path":["rustc_ast","ast","RangeSyntax"],"kind":"enum"},"2:10934":{"crate_id":2,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"1:15259":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"15:12028":{"crate_id":15,"path":["object","macho","LoadCommand"],"kind":"struct"},"14:5766":{"crate_id":14,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"6:1678":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"15:10081":{"crate_id":15,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"75:3327":{"crate_id":75,"path":["rustc_target","asm","aarch64","AArch64InlineAsmRegClass"],"kind":"enum"},"60:33":{"crate_id":60,"path":["psm","StackDirection"],"kind":"enum"},"52:1988":{"crate_id":52,"path":["rand","distributions","uniform","UniformDuration"],"kind":"struct"},"75:5797":{"crate_id":75,"path":["rustc_target","asm","wasm","WasmInlineAsmReg"],"kind":"enum"},"14:6768":{"crate_id":14,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"6:6026":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"17:27":{"crate_id":17,"path":["miniz_oxide","deflate","buffer","HashBuffers"],"kind":"struct"},"6:4175":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"6:1738":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"2:12188":{"crate_id":2,"path":["core","str","lossy","Utf8LossyChunksIter"],"kind":"struct"},"44:226":{"crate_id":44,"path":["measureme","profiler","TimingGuard"],"kind":"struct"},"5:1303":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"75:6969":{"crate_id":75,"path":["rustc_target","spec","RelroLevel"],"kind":"enum"},"34:163":{"crate_id":34,"path":["smallvec","SmallVec"],"kind":"struct"},"15:12208":{"crate_id":15,"path":["object","macho","SubClientCommand"],"kind":"struct"},"0:133":{"crate_id":0,"path":["rustc_lint_defs","builtin","BINDINGS_WITH_VARIANT_NAME"],"kind":"static"},"5:6418":{"crate_id":5,"path":["alloc","vec","drain_filter","{{impl}}","drop","BackshiftOnDrop"],"kind":"struct"},"15:2543":{"crate_id":15,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"0:111":{"crate_id":0,"path":["rustc_lint_defs","declare_lint_pass"],"kind":"macro"},"47:762":{"crate_id":47,"path":["lock_api","rwlock","RwLockUpgradableReadGuard"],"kind":"struct"},"39:4197":{"crate_id":39,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"0:169":{"crate_id":0,"path":["rustc_lint_defs","builtin","MACRO_USE_EXTERN_CRATE"],"kind":"static"},"39:4973":{"crate_id":39,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"36:1317":{"crate_id":36,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"2:47344":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"11:189":{"crate_id":11,"path":["rustc_demangle","Demangle"],"kind":"struct"},"39:3754":{"crate_id":39,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"1:15269":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"16:837":{"crate_id":16,"path":["memchr","memmem","Searcher"],"kind":"struct"},"36:727":{"crate_id":36,"path":["hashbrown","map","Values"],"kind":"struct"},"2:7997":{"crate_id":2,"path":["rustc_lint_defs","Target"],"kind":"typedef"},"5:936":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"1:13051":{"crate_id":1,"path":["std","sys","unix","os","SplitPaths"],"kind":"struct"},"39:4203":{"crate_id":39,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"5:7697":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"39:4949":{"crate_id":39,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"2:7495":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"39:5939":{"crate_id":39,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"2:1995":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"39:5094":{"crate_id":39,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"2:9361":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"2:44465":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"5:6907":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"75:890":{"crate_id":75,"path":["rustc_target","abi","TargetDataLayout"],"kind":"struct"},"5:1595":{"crate_id":5,"path":["alloc","collections","btree","map","DrainFilter"],"kind":"struct"},"29:3744":{"crate_id":29,"path":["rustc_data_structures","sip128","State"],"kind":"struct"},"2:21558":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"9:1760":{"crate_id":9,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"9:857":{"crate_id":9,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"1:634":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"1:2780":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"39:4273":{"crate_id":39,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"2:10104":{"crate_id":2,"path":["rustc_lint_defs","Item"],"kind":"typedef"},"39:4075":{"crate_id":39,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"21:5749":{"crate_id":21,"path":["rustc_ast","ast","TraitRef"],"kind":"struct"},"25:1110":{"crate_id":25,"path":["tracing_core","metadata","ParseLevelFilterError"],"kind":"struct"},"0:265":{"crate_id":0,"path":["rustc_lint_defs","Level","ForceWarn"],"kind":"variant"},"2:4195":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"29:29":{"crate_id":29,"path":["rustc_data_structures","captures","Captures"],"kind":"trait"},"56:1177":{"crate_id":56,"path":["ppv_lite86","x86_64","sse2","u32x4_sse2"],"kind":"struct"},"15:11328":{"crate_id":15,"path":["object","read","Relocation"],"kind":"struct"},"15:9210":{"crate_id":15,"path":["object","common","SymbolFlags"],"kind":"enum"},"35:630":{"crate_id":35,"path":["indexmap","map","IterMut"],"kind":"struct"},"2:47471":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"14:6357":{"crate_id":14,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"75:4274":{"crate_id":75,"path":["rustc_target","asm","hexagon","HexagonInlineAsmReg"],"kind":"enum"},"31:235":{"crate_id":31,"path":["rustc_index","bit_set","{{impl}}","fmt","OneLinePrinter"],"kind":"struct"},"0:106":{"crate_id":0,"path":["rustc_lint_defs","lint_array"],"kind":"macro"},"1:2338":{"crate_id":1,"path":["std","error","Error"],"kind":"trait"},"15:13540":{"crate_id":15,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"6:3983":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"15:10403":{"crate_id":15,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"0:153":{"crate_id":0,"path":["rustc_lint_defs","builtin","DEPRECATED"],"kind":"static"},"2:3166":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"6:559":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"29:4301":{"crate_id":29,"path":["rustc_data_structures","thin_vec","ThinVec"],"kind":"struct"},"2:45566":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"38:173":{"crate_id":38,"path":["jobserver","HelperThread"],"kind":"struct"},"21:3149":{"crate_id":21,"path":["rustc_ast","ast","Stmt"],"kind":"struct"},"14:5941":{"crate_id":14,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"0:263":{"crate_id":0,"path":["rustc_lint_defs","Level","Warn"],"kind":"variant"},"72:24":{"crate_id":72,"path":["scoped_tls","{{impl}}","set","Reset"],"kind":"struct"},"39:6602":{"crate_id":39,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"21:3541":{"crate_id":21,"path":["rustc_ast","ast","StructExpr"],"kind":"struct"},"1:10510":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"15:13574":{"crate_id":15,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"21:7212":{"crate_id":21,"path":["rustc_ast","tokenstream","TokenStream"],"kind":"struct"},"0:125":{"crate_id":0,"path":["rustc_lint_defs","builtin","UNKNOWN_LINTS"],"kind":"static"},"56:1562":{"crate_id":56,"path":["ppv_lite86","x86_64","YesS3"],"kind":"struct"},"1:14352":{"crate_id":1,"path":["std","sys","unix","time","inner","SystemTime"],"kind":"struct"},"15:13041":{"crate_id":15,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"1:10913":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"1:940":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"20:0":{"crate_id":20,"path":["rustc_macros"],"kind":"module"},"1:973":{"crate_id":1,"path":["std","backtrace","LazilyResolvedCapture"],"kind":"struct"},"35:988":{"crate_id":35,"path":["indexmap","set","Drain"],"kind":"struct"},"1:6181":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"42:511":{"crate_id":42,"path":["ena","unify","backing_vec","InPlace"],"kind":"struct"},"18:46":{"crate_id":18,"path":["adler","algo","U32X4"],"kind":"struct"},"1:13489":{"crate_id":1,"path":["std","sys","unix","process","process_common","CommandArgs"],"kind":"struct"},"2:3137":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"15:9332":{"crate_id":15,"path":["object","endian","U32Bytes"],"kind":"struct"},"29:3961":{"crate_id":29,"path":["rustc_data_structures","profiling","EventFilter"],"kind":"struct"},"29:818":{"crate_id":29,"path":["rustc_data_structures","owning_ref","Erased"],"kind":"trait"},"33:579":{"crate_id":33,"path":["rustc_serialize","json","AsJson"],"kind":"struct"},"21:5671":{"crate_id":21,"path":["rustc_ast","ast","AttrItem"],"kind":"struct"},"2:11696":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"1:2235":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"1:10909":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"2:45979":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"6:4205":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"39:1592":{"crate_id":39,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"75:2249":{"crate_id":75,"path":["rustc_target","abi","call","powerpc64","ABI"],"kind":"enum"},"22:1519":{"crate_id":22,"path":["rustc_span","source_map","SourceMapFiles"],"kind":"struct"},"21:7138":{"crate_id":21,"path":["rustc_ast","tokenstream","AttrAnnotatedTokenStream"],"kind":"struct"},"6:568":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"14:5421":{"crate_id":14,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"5:7477":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"1:2717":{"crate_id":1,"path":["rustc_lint_defs","Output"],"kind":"typedef"},"0:154":{"crate_id":0,"path":["rustc_lint_defs","builtin","UNUSED_UNSAFE"],"kind":"static"},"2:4264":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"14:3018":{"crate_id":14,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"21:5415":{"crate_id":21,"path":["rustc_ast","ast","Inline"],"kind":"enum"},"25:802":{"crate_id":25,"path":["tracing_core","dispatcher","Dispatch"],"kind":"struct"},"6:4199":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"0:151":{"crate_id":0,"path":["rustc_lint_defs","builtin","ORDER_DEPENDENT_TRAIT_OBJECTS"],"kind":"static"},"1:7304":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"1:7475":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"14:7514":{"crate_id":14,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"15:11406":{"crate_id":15,"path":["object","archive","Header"],"kind":"struct"},"14:4823":{"crate_id":14,"path":["gimli","constants","DwIdx"],"kind":"struct"},"6:4017":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"21:3214":{"crate_id":21,"path":["rustc_ast","ast","MacCallStmt"],"kind":"struct"},"1:11779":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"15:9245":{"crate_id":15,"path":["object","endian","Endianness"],"kind":"enum"},"2:48737":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"6:82":{"crate_id":6,"path":["libc","unix","DIR"],"kind":"enum"},"6:3830":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"21:7274":{"crate_id":21,"path":["rustc_ast","tokenstream","Cursor"],"kind":"struct"},"39:1730":{"crate_id":39,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"39:4044":{"crate_id":39,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"15:10801":{"crate_id":15,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"42:526":{"crate_id":42,"path":["ena","unify","backing_vec","Delegate"],"kind":"struct"},"52:407":{"crate_id":52,"path":["rand","distributions","uniform","SampleBorrow"],"kind":"trait"},"2:3248":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"2:12689":{"crate_id":2,"path":["rustc_lint_defs","Output"],"kind":"typedef"},"5:7625":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"35:1052":{"crate_id":35,"path":["indexmap","set","Difference"],"kind":"struct"},"14:3172":{"crate_id":14,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"39:1646":{"crate_id":39,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"29:3358":{"crate_id":29,"path":["rustc_data_structures","graph","implementation","NodeIndex"],"kind":"struct"},"0:104":{"crate_id":0,"path":["rustc_lint_defs","declare_lint"],"kind":"macro"},"39:6591":{"crate_id":39,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"34:106":{"crate_id":34,"path":["smallvec","Drain"],"kind":"struct"},"65:535":{"crate_id":65,"path":["generic_array","ArrayConsumer"],"kind":"struct"},"2:11840":{"crate_id":2,"path":["rustc_lint_defs","Output"],"kind":"typedef"},"5:1353":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"2:3102":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"39:5003":{"crate_id":39,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"2:2306":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"6:3993":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"1:9362":{"crate_id":1,"path":["std","sys_common","rwlock","StaticRWLockReadGuard"],"kind":"struct"},"14:6807":{"crate_id":14,"path":["gimli","read","op","Operation"],"kind":"enum"},"16:694":{"crate_id":16,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"15:13377":{"crate_id":15,"path":["object","pe","ImageRelocation"],"kind":"struct"},"15:9592":{"crate_id":15,"path":["object","read","any","File"],"kind":"struct"},"6:4258":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"15:10864":{"crate_id":15,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"2:44672":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"17:41":{"crate_id":17,"path":["miniz_oxide","deflate","buffer","LocalBuf"],"kind":"struct"},"21:5934":{"crate_id":21,"path":["rustc_ast","ast","Item"],"kind":"struct"},"71:378":{"crate_id":71,"path":["sha2","sha512","Sha512"],"kind":"struct"},"1:6532":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"38:132":{"crate_id":38,"path":["jobserver","imp","Client"],"kind":"struct"},"21:2404":{"crate_id":21,"path":["rustc_ast","ast","GenericParamKind"],"kind":"enum"},"2:3239":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"15:13098":{"crate_id":15,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"29:3805":{"crate_id":29,"path":["rustc_data_structures","sorted_map","SortedMap"],"kind":"struct"},"29:3916":{"crate_id":29,"path":["rustc_data_structures","fingerprint","Fingerprint"],"kind":"struct"},"0:173":{"crate_id":0,"path":["rustc_lint_defs","builtin","DEPRECATED_IN_FUTURE"],"kind":"static"},"15:11030":{"crate_id":15,"path":["object","read","Error"],"kind":"struct"},"21:2178":{"crate_id":21,"path":["rustc_ast","ast","PathSegment"],"kind":"struct"},"6:1600":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"39:6573":{"crate_id":39,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"2:3014":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"1:3037":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"1:2812":{"crate_id":1,"path":["rustc_lint_defs","Target"],"kind":"typedef"},"1:6601":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"2:43477":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"45:0":{"crate_id":45,"path":["parking_lot"],"kind":"module"},"2:42037":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"15:11822":{"crate_id":15,"path":["object","elf","NoteHeader64"],"kind":"struct"},"2:43684":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"1:7236":{"crate_id":1,"path":["rustc_lint_defs","Item"],"kind":"typedef"},"0:216":{"crate_id":0,"path":["rustc_lint_defs","builtin","PROC_MACRO_BACK_COMPAT"],"kind":"static"},"2:3114":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"0:214":{"crate_id":0,"path":["rustc_lint_defs","builtin","MISSING_ABI"],"kind":"static"},"2:48927":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"2:11636":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"15:13348":{"crate_id":15,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"2:44406":{"crate_id":2,"path":["core","fmt","rt","v1","Count"],"kind":"enum"},"56:1365":{"crate_id":56,"path":["ppv_lite86","x86_64","sse2","u128x1_sse2"],"kind":"struct"},"15:13205":{"crate_id":15,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"6:3856":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"2:42626":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"2:5565":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"5:7515":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"1:10965":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"1:11131":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"21:3237":{"crate_id":21,"path":["rustc_ast","ast","MacStmtStyle"],"kind":"enum"},"9:1421":{"crate_id":9,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"39:5831":{"crate_id":39,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"6:3863":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"5:5381":{"crate_id":5,"path":["rustc_lint_defs","Output"],"kind":"typedef"},"5:7596":{"crate_id":5,"path":["alloc","slice","merge_sort","Run"],"kind":"struct"},"1:10012":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"35:133":{"crate_id":35,"path":["indexmap","map","core","raw","OccupiedEntry"],"kind":"struct"},"2:47667":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"1:3170":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"22:2155":{"crate_id":22,"path":["rustc_span","hygiene","ExpnData"],"kind":"struct"},"2:4624":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"1:12906":{"crate_id":1,"path":["std","sys","unix","net","Socket"],"kind":"struct"},"56:1572":{"crate_id":56,"path":["ppv_lite86","x86_64","YesS4"],"kind":"struct"},"15:13180":{"crate_id":15,"path":["object","pe","Guid"],"kind":"struct"},"16:801":{"crate_id":16,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"2:3032":{"crate_id":2,"path":["core","marker","Freeze"],"kind":"trait"},"6:1701":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"2:7881":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"5:3008":{"crate_id":5,"path":["alloc","collections","btree","set","DrainFilter"],"kind":"struct"},"1:915":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"15:10317":{"crate_id":15,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"56:1477":{"crate_id":56,"path":["ppv_lite86","x86_64","sse2","G0"],"kind":"struct"},"1:9232":{"crate_id":1,"path":["std","sys_common","mutex","StaticMutex"],"kind":"struct"},"14:4852":{"crate_id":14,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"39:4191":{"crate_id":39,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"14:2945":{"crate_id":14,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"15:10516":{"crate_id":15,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"15:10052":{"crate_id":15,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"47:266":{"crate_id":47,"path":["lock_api","remutex","RawReentrantMutex"],"kind":"struct"},"1:5468":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"1:10173":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"1:4743":{"crate_id":1,"path":["rustc_lint_defs","Iter"],"kind":"typedef"},"55:0":{"crate_id":55,"path":["rand_chacha"],"kind":"module"},"15:9886":{"crate_id":15,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"15:11159":{"crate_id":15,"path":["object","read","SymbolMapName"],"kind":"struct"},"2:3171":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"2:11967":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"14:4230":{"crate_id":14,"path":["gimli","constants","DwAt"],"kind":"struct"},"58:101":{"crate_id":58,"path":["memmap2","Mmap"],"kind":"struct"},"0:223":{"crate_id":0,"path":["rustc_lint_defs","builtin","TEXT_DIRECTION_CODEPOINT_IN_COMMENT"],"kind":"static"},"25:1062":{"crate_id":25,"path":["tracing_core","metadata","Kind"],"kind":"struct"},"2:45791":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"66:6031":{"crate_id":66,"path":["typenum","int","NInt"],"kind":"struct"},"6:5846":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"2:11673":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"1:1428":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"2:45550":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"32:97":{"crate_id":32,"path":["arrayvec","arrayvec","ArrayVec"],"kind":"struct"},"29:4133":{"crate_id":29,"path":["rustc_data_structures","sharded","Sharded"],"kind":"struct"},"15:11604":{"crate_id":15,"path":["object","elf","Syminfo32"],"kind":"struct"},"66:6436":{"crate_id":66,"path":["typenum","array","TArr"],"kind":"struct"},"1:6427":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"2:8325":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"14:4922":{"crate_id":14,"path":["gimli","constants","DwLne"],"kind":"struct"},"23:435":{"crate_id":23,"path":["tracing","instrument","Instrumented"],"kind":"struct"},"17:776":{"crate_id":17,"path":["miniz_oxide","deflate","CompressionLevel"],"kind":"enum"},"5:6929":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"1:12281":{"crate_id":1,"path":["std","sys","unix","fs","File"],"kind":"struct"},"2:9365":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"0:232":{"crate_id":0,"path":["rustc_lint_defs","Applicability","Unspecified"],"kind":"variant"},"17:749":{"crate_id":17,"path":["miniz_oxide","deflate","core","TDEFLStatus"],"kind":"enum"},"11:231":{"crate_id":11,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"2:4402":{"crate_id":2,"path":["rustc_lint_defs","Target"],"kind":"typedef"},"6:1686":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"14:6101":{"crate_id":14,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"75:5703":{"crate_id":75,"path":["rustc_target","asm","spirv","SpirVInlineAsmReg"],"kind":"enum"},"29:3767":{"crate_id":29,"path":["rustc_data_structures","stable_map","StableMap"],"kind":"struct"},"2:47009":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"3:0":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"15:9186":{"crate_id":15,"path":["object","common","SectionFlags"],"kind":"enum"},"73:0":{"crate_id":73,"path":["rustc_lexer"],"kind":"module"},"22:4790":{"crate_id":22,"path":["rustc_span","CharPos"],"kind":"struct"},"0:137":{"crate_id":0,"path":["rustc_lint_defs","builtin","STABLE_FEATURES"],"kind":"static"},"2:3245":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"31:560":{"crate_id":31,"path":["rustc_index","bit_set","SparseBitSet"],"kind":"struct"},"15:10950":{"crate_id":15,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"7:0":{"crate_id":7,"path":["unwind"],"kind":"module"},"33:1059":{"crate_id":33,"path":["rustc_serialize","opaque","{{impl}}","flush","BufGuard"],"kind":"struct"},"33:1790":{"crate_id":33,"path":["rustc_serialize","json","JsonEvent"],"kind":"enum"},"6:151":{"crate_id":6,"path":["libc","unix","FILE"],"kind":"enum"},"1:4147":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"1:14384":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"15:12725":{"crate_id":15,"path":["object","macho","NoteCommand"],"kind":"struct"},"2:2072":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"15:12659":{"crate_id":15,"path":["object","macho","IdentCommand"],"kind":"struct"},"39:1533":{"crate_id":39,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"2:4386":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"1:10834":{"crate_id":1,"path":["std","net","ip","Ipv4Addr"],"kind":"struct"},"15:11932":{"crate_id":15,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"39:3787":{"crate_id":39,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"5:7562":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"75:2554":{"crate_id":75,"path":["rustc_target","abi","call","Reg"],"kind":"struct"},"47:46":{"crate_id":47,"path":["lock_api","mutex","Mutex"],"kind":"struct"},"1:15260":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"21:4239":{"crate_id":21,"path":["rustc_ast","ast","LitFloatType"],"kind":"enum"},"14:6391":{"crate_id":14,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"75:4066":{"crate_id":75,"path":["rustc_target","asm","bpf","BpfInlineAsmRegClass"],"kind":"enum"},"75:3744":{"crate_id":75,"path":["rustc_target","asm","arm","ArmInlineAsmReg"],"kind":"enum"},"21:5538":{"crate_id":21,"path":["rustc_ast","ast","UseTreeKind"],"kind":"enum"},"22:4828":{"crate_id":22,"path":["rustc_span","LineInfo"],"kind":"struct"},"15:11434":{"crate_id":15,"path":["object","elf","FileHeader32"],"kind":"struct"},"22:4482":{"crate_id":22,"path":["rustc_span","NonNarrowChar"],"kind":"enum"},"21:6720":{"crate_id":21,"path":["rustc_ast","token","Lit"],"kind":"struct"},"1:14658":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"1:10382":{"crate_id":1,"path":["std","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"1:10840":{"crate_id":1,"path":["std","net","ip","Ipv6MulticastScope"],"kind":"enum"},"22:4377":{"crate_id":22,"path":["rustc_span","FileNameDisplayPreference"],"kind":"enum"},"21:6648":{"crate_id":21,"path":["rustc_ast","token","DelimToken"],"kind":"enum"},"2:45417":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"14:7467":{"crate_id":14,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"5:3435":{"crate_id":5,"path":["alloc","collections","linked_list","DrainFilter"],"kind":"struct"},"2:22465":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"6:6616":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"5:1154":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"6:1550":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"1:10722":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"0:0":{"crate_id":0,"path":["rustc_lint_defs"],"kind":"module"},"15:11714":{"crate_id":15,"path":["object","elf","Dyn32"],"kind":"struct"},"21:4534":{"crate_id":21,"path":["rustc_ast","ast","AssocTyConstraintKind"],"kind":"enum"},"2:42706":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"2:42726":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"21:5166":{"crate_id":21,"path":["rustc_ast","ast","FnDecl"],"kind":"struct"},"75:3241":{"crate_id":75,"path":["rustc_target","abi","TyAndLayout"],"kind":"struct"},"21:3170":{"crate_id":21,"path":["rustc_ast","ast","StmtKind"],"kind":"enum"},"21:2711":{"crate_id":21,"path":["rustc_ast","ast","Block"],"kind":"struct"},"21:2504":{"crate_id":21,"path":["rustc_ast","ast","WherePredicate"],"kind":"enum"},"36:691":{"crate_id":36,"path":["hashbrown","map","IterMut"],"kind":"struct"},"15:12442":{"crate_id":15,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"21:6504":{"crate_id":21,"path":["rustc_ast","node_id","NodeId"],"kind":"struct"},"2:49217":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"6:5786":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"22:2595":{"crate_id":22,"path":["rustc_span","def_id","StableCrateId"],"kind":"struct"},"14:4614":{"crate_id":14,"path":["gimli","constants","DwLang"],"kind":"struct"},"15:13532":{"crate_id":15,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"44:576":{"crate_id":44,"path":["measureme","serialization","SharedState"],"kind":"struct"},"29:891":{"crate_id":29,"path":["rustc_data_structures","owning_ref","OwningHandle"],"kind":"struct"},"36:714":{"crate_id":36,"path":["hashbrown","map","Keys"],"kind":"struct"},"2:45489":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"15:10001":{"crate_id":15,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"14:6569":{"crate_id":14,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"21:5837":{"crate_id":21,"path":["rustc_ast","ast","VisibilityKind"],"kind":"enum"},"43:0":{"crate_id":43,"path":["log"],"kind":"module"},"21:2535":{"crate_id":21,"path":["rustc_ast","ast","WhereBoundPredicate"],"kind":"struct"},"2:3013":{"crate_id":2,"path":["core","marker","StructuralEq"],"kind":"trait"},"5:7469":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"5:674":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"75:3056":{"crate_id":75,"path":["rustc_target","abi","Abi"],"kind":"enum"},"1:15231":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"22:1489":{"crate_id":22,"path":["rustc_span","source_map","StableSourceFileId"],"kind":"struct"},"0:121":{"crate_id":0,"path":["rustc_lint_defs","builtin","MUST_NOT_SUSPEND"],"kind":"static"},"2:46874":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"29:3348":{"crate_id":29,"path":["rustc_data_structures","graph","implementation","Edge"],"kind":"struct"},"2:2901":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"1:15279":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"1:10837":{"crate_id":1,"path":["std","net","ip","Ipv6Addr"],"kind":"struct"},"14:6780":{"crate_id":14,"path":["gimli","read","op","DieReference"],"kind":"enum"},"1:13720":{"crate_id":1,"path":["std","sys","unix","stdio","Stdout"],"kind":"struct"},"2:45082":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"15:12917":{"crate_id":15,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"1:6605":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"1:6603":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"1:5940":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"39:5802":{"crate_id":39,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"5:196":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"15:11915":{"crate_id":15,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"29:4098":{"crate_id":29,"path":["rustc_data_structures","profiling","SelfProfilerRef"],"kind":"struct"},"36:439":{"crate_id":36,"path":["hashbrown","raw","inner","RawIterHash"],"kind":"struct"},"60:0":{"crate_id":60,"path":["psm"],"kind":"module"},"1:1215":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"43:352":{"crate_id":43,"path":["log","SetLoggerError"],"kind":"struct"},"6:3973":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"73:293":{"crate_id":73,"path":["rustc_lexer","LiteralKind"],"kind":"enum"},"29:3644":{"crate_id":29,"path":["rustc_data_structures","obligation_forest","Node"],"kind":"struct"},"16:754":{"crate_id":16,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"14:5273":{"crate_id":14,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"5:2661":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"39:4159":{"crate_id":39,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"1:8079":{"crate_id":1,"path":["std","sync","mpsc","sync","Node"],"kind":"struct"},"2:9042":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"21:5131":{"crate_id":21,"path":["rustc_ast","ast","SelfKind"],"kind":"enum"},"44:501":{"crate_id":44,"path":["measureme","raw_event","RawEvent"],"kind":"struct"},"39:3848":{"crate_id":39,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"5:567":{"crate_id":5,"path":["rustc_lint_defs","Target"],"kind":"typedef"},"0:187":{"crate_id":0,"path":["rustc_lint_defs","builtin","USELESS_DEPRECATED"],"kind":"static"},"2:5686":{"crate_id":2,"path":["core","iter","adapters","flatten","TrustedConstSize"],"kind":"trait"},"14:6072":{"crate_id":14,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"39:75":{"crate_id":39,"path":["libc","unix","DIR"],"kind":"enum"},"6:5137":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"39:5933":{"crate_id":39,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"15:11847":{"crate_id":15,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"14:3195":{"crate_id":14,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"1:14733":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"2:43864":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"2:3022":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"9:1756":{"crate_id":9,"path":["hashbrown","set","Iter"],"kind":"struct"},"32:212":{"crate_id":32,"path":["arrayvec","arrayvec","IntoIter"],"kind":"struct"},"1:9459":{"crate_id":1,"path":["std","sys_common","thread_local_key","Key"],"kind":"struct"},"21:5358":{"crate_id":21,"path":["rustc_ast","ast","ImplPolarity"],"kind":"enum"},"16:704":{"crate_id":16,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"21:3326":{"crate_id":21,"path":["rustc_ast","ast","Arm"],"kind":"struct"},"75:6482":{"crate_id":75,"path":["rustc_target","asm","InlineAsmRegClass"],"kind":"enum"},"2:49139":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"0:380":{"crate_id":0,"path":["rustc_lint_defs","BuiltinLintDiagnostics","UnusedImports"],"kind":"variant"},"1:10807":{"crate_id":1,"path":["std","net","addr","SocketAddrV6"],"kind":"struct"},"2:21401":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"0:149":{"crate_id":0,"path":["rustc_lint_defs","builtin","MISSING_FRAGMENT_SPECIFIER"],"kind":"static"},"15:12247":{"crate_id":15,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"12:0":{"crate_id":12,"path":["std_detect"],"kind":"module"},"5:3696":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"0:143":{"crate_id":0,"path":["rustc_lint_defs","builtin","PUB_USE_OF_PRIVATE_EXTERN_CRATE"],"kind":"static"},"1:8150":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"22:4818":{"crate_id":22,"path":["rustc_span","SourceFileAndLine"],"kind":"struct"},"75:5923":{"crate_id":75,"path":["rustc_target","asm","x86","X86InlineAsmReg"],"kind":"enum"},"2:4716":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"21:4892":{"crate_id":21,"path":["rustc_ast","ast","InlineAsmTemplatePiece"],"kind":"enum"},"75:6936":{"crate_id":75,"path":["rustc_target","spec","PanicStrategy"],"kind":"enum"},"35:968":{"crate_id":35,"path":["indexmap","set","Iter"],"kind":"struct"},"1:10195":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"39:3805":{"crate_id":39,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"45:658":{"crate_id":45,"path":["parking_lot","once","OnceState"],"kind":"enum"},"6:4062":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"75:5465":{"crate_id":75,"path":["rustc_target","asm","s390x","S390xInlineAsmRegClass"],"kind":"enum"},"39:6614":{"crate_id":39,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"52:1944":{"crate_id":52,"path":["rand","distributions","uniform","UniformFloat"],"kind":"struct"},"2:42060":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"6:6622":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"43:216":{"crate_id":43,"path":["log","LevelFilter"],"kind":"enum"},"2:42555":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"5:6742":{"crate_id":5,"path":["alloc","vec","into_iter","{{impl}}","drop","DropGuard"],"kind":"struct"},"23:150":{"crate_id":23,"path":["tracing","instrument","WithSubscriber"],"kind":"trait"},"44:556":{"crate_id":44,"path":["measureme","serialization","SerializationSink"],"kind":"struct"},"15:12234":{"crate_id":15,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"39:5316":{"crate_id":39,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"6:5869":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"25:832":{"crate_id":25,"path":["tracing_core","field","Empty"],"kind":"struct"},"75:2302":{"crate_id":75,"path":["rustc_target","abi","call","x86_64","Class"],"kind":"enum"},"14:5815":{"crate_id":14,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"6:4161":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"6:6599":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"39:3927":{"crate_id":39,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"2:46199":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"2:44388":{"crate_id":2,"path":["core","fmt","rt","v1","Alignment"],"kind":"enum"},"6:1654":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"48:0":{"crate_id":48,"path":["scopeguard"],"kind":"module"},"1:13398":{"crate_id":1,"path":["std","sys","unix","process","process_common","Argv"],"kind":"struct"},"14:4704":{"crate_id":14,"path":["gimli","constants","DwCc"],"kind":"struct"},"35:604":{"crate_id":35,"path":["indexmap","map","Iter"],"kind":"struct"},"14:3772":{"crate_id":14,"path":["gimli","constants","DwCfa"],"kind":"struct"},"1:5701":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"39:3855":{"crate_id":39,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"1:14092":{"crate_id":1,"path":["std","sys","unix","os_str","Buf"],"kind":"struct"},"1:11664":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"0:186":{"crate_id":0,"path":["rustc_lint_defs","builtin","UNINHABITED_STATIC"],"kind":"static"},"1:4406":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"2:42428":{"crate_id":2,"path":["core","char","EscapeDefaultState"],"kind":"enum"},"6:4975":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"14:6176":{"crate_id":14,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"17:722":{"crate_id":17,"path":["miniz_oxide","deflate","core","TDEFLFlush"],"kind":"enum"},"36:445":{"crate_id":36,"path":["hashbrown","raw","inner","RawIterHashInner"],"kind":"struct"},"9:0":{"crate_id":9,"path":["hashbrown"],"kind":"module"},"1:4060":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"1:10317":{"crate_id":1,"path":["std","ffi","c_str","CString"],"kind":"struct"},"36:1580":{"crate_id":36,"path":["hashbrown","set","Difference"],"kind":"struct"},"14:6424":{"crate_id":14,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"43:195":{"crate_id":43,"path":["log","Level"],"kind":"enum"},"2:3010":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"14:5960":{"crate_id":14,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"15:13637":{"crate_id":15,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"2:3228":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"2:42695":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"2:10404":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"35:648":{"crate_id":35,"path":["indexmap","map","IntoIter"],"kind":"struct"},"73:330":{"crate_id":73,"path":["rustc_lexer","RawStrError"],"kind":"enum"},"6:509":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"1:8530":{"crate_id":1,"path":["std","sync","once","WaiterQueue"],"kind":"struct"},"6:3917":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"22:2053":{"crate_id":22,"path":["rustc_span","hygiene","Transparency"],"kind":"enum"},"15:13780":{"crate_id":15,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"2:8550":{"crate_id":2,"path":["rustc_lint_defs","Target"],"kind":"typedef"},"14:7971":{"crate_id":14,"path":["gimli","read","Error"],"kind":"enum"},"5:7425":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"43:238":{"crate_id":43,"path":["log","MaybeStaticStr"],"kind":"enum"},"1:10708":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"1:8057":{"crate_id":1,"path":["std","sync","mpsc","sync","State"],"kind":"struct"},"39:6033":{"crate_id":39,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"22:1971":{"crate_id":22,"path":["rustc_span","hygiene","LocalExpnId"],"kind":"struct"},"14:4506":{"crate_id":14,"path":["gimli","constants","DwVis"],"kind":"struct"},"6:657":{"crate_id":6,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"16:620":{"crate_id":16,"path":["memchr","cow","Imp"],"kind":"struct"},"0:359":{"crate_id":0,"path":["rustc_lint_defs","BuiltinLintDiagnostics","AbsPathWithModule"],"kind":"variant"},"5:1506":{"crate_id":5,"path":["alloc","collections","btree","map","{{impl}}","drop","DropGuard"],"kind":"struct"},"2:13020":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"15:11779":{"crate_id":15,"path":["object","elf","Verneed"],"kind":"struct"},"15:13746":{"crate_id":15,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"36:1573":{"crate_id":36,"path":["hashbrown","set","Intersection"],"kind":"struct"},"14:5790":{"crate_id":14,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"69:0":{"crate_id":69,"path":["sha1"],"kind":"module"},"5:7409":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"75:2505":{"crate_id":75,"path":["rustc_target","abi","call","ArgAttributes"],"kind":"struct"},"56:1597":{"crate_id":56,"path":["ppv_lite86","x86_64","NoA2"],"kind":"struct"},"15:10814":{"crate_id":15,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"2:42904":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"14:7420":{"crate_id":14,"path":["gimli","read","unit","UnitOffset"],"kind":"struct"},"15:13590":{"crate_id":15,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"15:9440":{"crate_id":15,"path":["object","endian","I32Bytes"],"kind":"struct"},"1:15264":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"1:858":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"39:1706":{"crate_id":39,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"39:5778":{"crate_id":39,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"0:217":{"crate_id":0,"path":["rustc_lint_defs","builtin","RUST_2021_INCOMPATIBLE_OR_PATTERNS"],"kind":"static"},"5:2671":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"1:3029":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"36:766":{"crate_id":36,"path":["hashbrown","map","ConsumeAllOnDrop"],"kind":"struct"},"39:494":{"crate_id":39,"path":["libc","unix","group"],"kind":"struct"},"14:2794":{"crate_id":14,"path":["gimli","common","Register"],"kind":"struct"},"2:43828":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"6:4229":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"0:167":{"crate_id":0,"path":["rustc_lint_defs","builtin","WHERE_CLAUSES_OBJECT_SAFETY"],"kind":"static"},"14:7894":{"crate_id":14,"path":["gimli","read","value","ValueType"],"kind":"enum"},"29:3762":{"crate_id":29,"path":["rustc_data_structures","small_c_str","SmallCStr"],"kind":"struct"},"15:10435":{"crate_id":15,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"11:194":{"crate_id":11,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"1:11148":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"2:48236":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"5:546":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"15:13733":{"crate_id":15,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"2:45807":{"crate_id":2,"path":["rustc_lint_defs","Searcher"],"kind":"typedef"},"5:3723":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","{{impl}}","drop","DropGuard"],"kind":"struct"},"33:939":{"crate_id":33,"path":["rustc_serialize","json","FormatShim"],"kind":"struct"},"25:276":{"crate_id":25,"path":["tracing_core","field","ValueSet"],"kind":"struct"},"75:6669":{"crate_id":75,"path":["rustc_target","asm","InlineAsmClobberAbi"],"kind":"enum"},"15:10071":{"crate_id":15,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"21:3266":{"crate_id":21,"path":["rustc_ast","ast","Local"],"kind":"struct"},"1:10774":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"9:2082":{"crate_id":9,"path":["hashbrown","TryReserveError"],"kind":"enum"},"36:405":{"crate_id":36,"path":["hashbrown","raw","inner","RawDrain"],"kind":"struct"},"5:1334":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"2:2839":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"2:3162":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"0:176":{"crate_id":0,"path":["rustc_lint_defs","builtin","AMBIGUOUS_ASSOCIATED_ITEMS"],"kind":"static"},"15:13564":{"crate_id":15,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"2:42343":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"2:11894":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"0:352":{"crate_id":0,"path":["rustc_lint_defs","BuiltinLintDiagnostics"],"kind":"enum"},"2:44440":{"crate_id":2,"path":["core","fmt","ArgumentV1"],"kind":"struct"},"6:3954":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"34:373":{"crate_id":34,"path":["smallvec","SetLenOnDrop"],"kind":"struct"},"21:2303":{"crate_id":21,"path":["rustc_ast","ast","ParenthesizedArgs"],"kind":"struct"},"0:362":{"crate_id":0,"path":["rustc_lint_defs","BuiltinLintDiagnostics","ProcMacroDeriveResolutionFallback"],"kind":"variant"},"2:9315":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"16:744":{"crate_id":16,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"2:46003":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"14:4386":{"crate_id":14,"path":["gimli","constants","DwLle"],"kind":"struct"},"75:4459":{"crate_id":75,"path":["rustc_target","asm","mips","MipsInlineAsmReg"],"kind":"enum"},"15:11572":{"crate_id":15,"path":["object","elf","Sym32"],"kind":"struct"},"21:5490":{"crate_id":21,"path":["rustc_ast","ast","EnumDef"],"kind":"struct"},"6:5011":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"17:469":{"crate_id":17,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"2:44633":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"1:1945":{"crate_id":1,"path":["std","collections","hash","set","DrainFilter"],"kind":"struct"},"6:5064":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"56:1271":{"crate_id":56,"path":["ppv_lite86","x86_64","sse2","u64x2_sse2"],"kind":"struct"},"2:9367":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"0:182":{"crate_id":0,"path":["rustc_lint_defs","builtin","UNSAFE_OP_IN_UNSAFE_FN"],"kind":"static"},"2:6797":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"75:5749":{"crate_id":75,"path":["rustc_target","asm","wasm","WasmInlineAsmRegClass"],"kind":"enum"},"2:42913":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"15:11519":{"crate_id":15,"path":["object","elf","SectionHeader64"],"kind":"struct"},"6:155":{"crate_id":6,"path":["libc","unix","fpos_t"],"kind":"enum"},"43:357":{"crate_id":43,"path":["log","ParseLevelError"],"kind":"struct"},"0:319":{"crate_id":0,"path":["rustc_lint_defs","FutureIncompatibilityReason","FutureReleaseErrorReportNow"],"kind":"variant"},"14:7250":{"crate_id":14,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"2:45531":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"15:12494":{"crate_id":15,"path":["object","macho","RpathCommand"],"kind":"struct"},"14:4417":{"crate_id":14,"path":["gimli","constants","DwDs"],"kind":"struct"},"15:9809":{"crate_id":15,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"14:5753":{"crate_id":14,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"14:2773":{"crate_id":14,"path":["gimli","common","LineEncoding"],"kind":"struct"},"0:114":{"crate_id":0,"path":["rustc_lint_defs","builtin","CONFLICTING_REPR_HINTS"],"kind":"static"},"15:10673":{"crate_id":15,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"16:0":{"crate_id":16,"path":["memchr"],"kind":"module"},"6:4291":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"29:4440":{"crate_id":29,"path":["rustc_data_structures","sso","set","SsoHashSet"],"kind":"struct"},"2:13091":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"39:5051":{"crate_id":39,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"0:64":{"crate_id":0,"path":["rustc_lint_defs","pluralize"],"kind":"macro"},"1:8735":{"crate_id":1,"path":["rustc_lint_defs","Target"],"kind":"typedef"},"21:7267":{"crate_id":21,"path":["rustc_ast","tokenstream","CursorRef"],"kind":"struct"},"36:110":{"crate_id":36,"path":["hashbrown","raw","inner","bitmask","BitMaskIter"],"kind":"struct"},"1:9962":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"22:2725":{"crate_id":22,"path":["rustc_span","span_encoding","SpanInterner"],"kind":"struct"},"22:2644":{"crate_id":22,"path":["rustc_span","def_id","DefIndex"],"kind":"struct"},"14:7804":{"crate_id":14,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"2:47051":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"2:2655":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"6:5344":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"1:11593":{"crate_id":1,"path":["std","sync","mpsc","blocking","SignalToken"],"kind":"struct"},"15:13924":{"crate_id":15,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"16:811":{"crate_id":16,"path":["memchr","memmem","Finder"],"kind":"struct"},"39:5056":{"crate_id":39,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"6:4121":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"2:9483":{"crate_id":2,"path":["core","fmt","{{impl}}","fmt","BorrowedPlaceholder"],"kind":"struct"},"1:10246":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"14:7360":{"crate_id":14,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"1:10276":{"crate_id":1,"path":["std","collections","hash","map","DefaultHasher"],"kind":"struct"},"2:46978":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"0:163":{"crate_id":0,"path":["rustc_lint_defs","builtin","ILLEGAL_FLOATING_POINT_LITERAL_PATTERN"],"kind":"static"},"6:3891":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"15:4008":{"crate_id":15,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"1:3547":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"35:0":{"crate_id":35,"path":["indexmap"],"kind":"module"},"0:172":{"crate_id":0,"path":["rustc_lint_defs","builtin","INDIRECT_STRUCTURAL_MATCH"],"kind":"static"},"6:5213":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"14:4734":{"crate_id":14,"path":["gimli","constants","DwInl"],"kind":"struct"},"5:1292":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"15:9264":{"crate_id":15,"path":["object","endian","LittleEndian"],"kind":"struct"},"14:2843":{"crate_id":14,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"15:9659":{"crate_id":15,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"50:489":{"crate_id":50,"path":["tempfile","file","PersistError"],"kind":"struct"},"6:5794":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"15:13963":{"crate_id":15,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"0:115":{"crate_id":0,"path":["rustc_lint_defs","builtin","META_VARIABLE_MISUSE"],"kind":"static"},"5:5377":{"crate_id":5,"path":["rustc_lint_defs","Output"],"kind":"typedef"},"1:14333":{"crate_id":1,"path":["std","sys","unix","time","inner","Instant"],"kind":"struct"},"1:824":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"39:5074":{"crate_id":39,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"21:4344":{"crate_id":21,"path":["rustc_ast","ast","FnSig"],"kind":"struct"},"50:494":{"crate_id":50,"path":["tempfile","spooled","SpooledInner"],"kind":"enum"},"6:1595":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"15:10988":{"crate_id":15,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"21:5571":{"crate_id":21,"path":["rustc_ast","ast","UseTree"],"kind":"struct"},"15:13386":{"crate_id":15,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"15:12712":{"crate_id":15,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"15:12632":{"crate_id":15,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"47:432":{"crate_id":47,"path":["lock_api","remutex","MappedReentrantMutexGuard"],"kind":"struct"},"15:13296":{"crate_id":15,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"36:1856":{"crate_id":36,"path":["hashbrown","raw","inner","alloc","inner","Global"],"kind":"struct"},"1:15271":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"14:5717":{"crate_id":14,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"15:10028":{"crate_id":15,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"1:1962":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"22:1818":{"crate_id":22,"path":["rustc_span","edition","Edition"],"kind":"enum"},"9:1442":{"crate_id":9,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"6:4045":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"9:361":{"crate_id":9,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"15:13898":{"crate_id":15,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"55:290":{"crate_id":55,"path":["rand_chacha","guts","ChaCha"],"kind":"struct"},"22:2686":{"crate_id":22,"path":["rustc_span","def_id","LocalDefId"],"kind":"struct"},"9:1405":{"crate_id":9,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"2:42545":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"15:11588":{"crate_id":15,"path":["object","elf","Sym64"],"kind":"struct"},"15:2484":{"crate_id":15,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"1:15261":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"6:3780":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"39:4113":{"crate_id":39,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"2:9606":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"15:13370":{"crate_id":15,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"6:4239":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"21:5899":{"crate_id":21,"path":["rustc_ast","ast","VariantData"],"kind":"enum"},"15:9528":{"crate_id":15,"path":["object","read","util","Bytes"],"kind":"struct"},"2:9354":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"66:1317":{"crate_id":66,"path":["rustc_lint_defs","Output"],"kind":"typedef"},"1:5104":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"1:4063":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"56:1602":{"crate_id":56,"path":["ppv_lite86","x86_64","YesNI"],"kind":"struct"},"16:766":{"crate_id":16,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"2:45699":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"45:195":{"crate_id":45,"path":["parking_lot","once","{{impl}}","call_once_slow","PanicGuard"],"kind":"struct"},"15:9943":{"crate_id":15,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"15:11993":{"crate_id":15,"path":["object","macho","MachHeader32"],"kind":"struct"},"2:12716":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"17:1056":{"crate_id":17,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"25:0":{"crate_id":25,"path":["tracing_core"],"kind":"module"},"2:45159":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"14:6554":{"crate_id":14,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"1:14755":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"1:13548":{"crate_id":1,"path":["std","sys","unix","rwlock","RWLock"],"kind":"struct"},"15:8902":{"crate_id":15,"path":["object","common","AddressSize"],"kind":"enum"},"5:2912":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"2:21238":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"29:1833":{"crate_id":29,"path":["rustc_data_structures","stable_hasher","HashStable"],"kind":"trait"},"1:7472":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"2:45120":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"29:4324":{"crate_id":29,"path":["rustc_data_structures","tiny_list","TinyList"],"kind":"struct"},"0:193":{"crate_id":0,"path":["rustc_lint_defs","builtin","LARGE_ASSIGNMENTS"],"kind":"static"},"1:10304":{"crate_id":1,"path":["std","error","private","Internal"],"kind":"struct"},"2:44145":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"49:330":{"crate_id":49,"path":["parking_lot_core","parking_lot","RequeueOp"],"kind":"enum"},"36:823":{"crate_id":36,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"75:7188":{"crate_id":75,"path":["rustc_target","spec","SanitizerSet"],"kind":"struct"},"35:312":{"crate_id":35,"path":["indexmap","map","core","VacantEntry"],"kind":"struct"},"13:248":{"crate_id":13,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"1:10767":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"6:5909":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"29:3154":{"crate_id":29,"path":["rustc_data_structures","tagged_ptr","drop","TaggedPtr"],"kind":"struct"},"2:2603":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"75:6312":{"crate_id":75,"path":["rustc_target","asm","InlineAsmArch"],"kind":"enum"},"5:6100":{"crate_id":5,"path":["rustc_lint_defs","Target"],"kind":"typedef"},"22:4859":{"crate_id":22,"path":["rustc_span","SpanSnippetError"],"kind":"enum"},"15:681":{"crate_id":15,"path":["object","read","any","Symbol"],"kind":"struct"},"65:520":{"crate_id":65,"path":["generic_array","ArrayBuilder"],"kind":"struct"},"1:10524":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"1:5671":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"9:447":{"crate_id":9,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"15:13331":{"crate_id":15,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"2:47723":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"9:338":{"crate_id":9,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"5:3323":{"crate_id":5,"path":["alloc","collections","linked_list","{{impl}}","drop","DropGuard"],"kind":"struct"},"6:6467":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"55:40":{"crate_id":55,"path":["rand_chacha","chacha","Array64"],"kind":"struct"},"56:1033":{"crate_id":56,"path":["ppv_lite86","soft","x4"],"kind":"struct"},"1:6688":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"2:3665":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"21:4197":{"crate_id":21,"path":["rustc_ast","ast","LitIntType"],"kind":"enum"},"6:1525":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"1:11608":{"crate_id":1,"path":["std","sync","mpsc","sync","Failure"],"kind":"enum"},"0:431":{"crate_id":0,"path":["rustc_lint_defs","BuiltinLintDiagnostics","NamedAsmLabel"],"kind":"variant"},"14:7119":{"crate_id":14,"path":["gimli","read","op","Expression"],"kind":"struct"},"3:299":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"15:12537":{"crate_id":15,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"31:576":{"crate_id":31,"path":["rustc_index","bit_set","HybridBitSet"],"kind":"enum"},"75:4777":{"crate_id":75,"path":["rustc_target","asm","powerpc","PowerPCInlineAsmRegClass"],"kind":"enum"},"5:379":{"crate_id":5,"path":["rustc_lint_defs","Target"],"kind":"typedef"},"5:6565":{"crate_id":5,"path":["alloc","vec","drain","{{impl}}","drop","DropGuard"],"kind":"struct"},"14:2733":{"crate_id":14,"path":["gimli","common","Format"],"kind":"enum"},"1:10174":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"1:2176":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"2:45200":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"15:11616":{"crate_id":15,"path":["object","elf","Syminfo64"],"kind":"struct"},"1:5526":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"28:27":{"crate_id":28,"path":["pin_project_lite","__private","AlwaysUnpin"],"kind":"struct"},"5:1371":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"14:2968":{"crate_id":14,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"22:4896":{"crate_id":22,"path":["rustc_span","MalformedSourceMapPositions"],"kind":"struct"},"6:4005":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"45:65":{"crate_id":45,"path":["parking_lot","condvar","Condvar"],"kind":"struct"},"6:6655":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"0:222":{"crate_id":0,"path":["rustc_lint_defs","builtin","NON_EXHAUSTIVE_OMITTED_PATTERNS"],"kind":"static"},"15:510":{"crate_id":15,"path":["object","read","any","Segment"],"kind":"struct"},"52:1567":{"crate_id":52,"path":["rand","distributions","slice","Slice"],"kind":"struct"},"15:11696":{"crate_id":15,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"67:42":{"crate_id":67,"path":["block_buffer","BlockBuffer"],"kind":"struct"},"39:502":{"crate_id":39,"path":["libc","unix","utimbuf"],"kind":"struct"},"39:3883":{"crate_id":39,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"5:671":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"47:555":{"crate_id":47,"path":["lock_api","rwlock","RwLock"],"kind":"struct"},"14:4995":{"crate_id":14,"path":["gimli","constants","DwMacro"],"kind":"struct"},"15:12431":{"crate_id":15,"path":["object","macho","DylibReference"],"kind":"struct"},"14:7928":{"crate_id":14,"path":["gimli","read","value","Value"],"kind":"enum"},"36:154":{"crate_id":36,"path":["hashbrown","raw","inner","Bucket"],"kind":"struct"},"11:11":{"crate_id":11,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"15:11738":{"crate_id":15,"path":["object","elf","Versym"],"kind":"struct"},"36:751":{"crate_id":36,"path":["hashbrown","map","DrainFilter"],"kind":"struct"},"2:42397":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"1:11555":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"39:4182":{"crate_id":39,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"25:1228":{"crate_id":25,"path":["tracing_core","subscriber","InterestKind"],"kind":"enum"},"2:3242":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"21:7279":{"crate_id":21,"path":["rustc_ast","tokenstream","DelimSpan"],"kind":"struct"},"53:0":{"crate_id":53,"path":["rand_core"],"kind":"module"},"6:5161":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"2:3304":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"14:7453":{"crate_id":14,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"6:622":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"2:4121":{"crate_id":2,"path":["core","array","collect_into_array","Guard"],"kind":"struct"},"56:0":{"crate_id":56,"path":["ppv_lite86"],"kind":"module"},"15:12671":{"crate_id":15,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"39:582":{"crate_id":39,"path":["libc","unix","linger"],"kind":"struct"},"1:15263":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"21:5325":{"crate_id":21,"path":["rustc_ast","ast","Defaultness"],"kind":"enum"},"2:21321":{"crate_id":2,"path":["core","num","dec2flt","common","AsciiStr"],"kind":"struct"},"28:33":{"crate_id":28,"path":["pin_project_lite","__private","UnsafeDropInPlaceGuard"],"kind":"struct"},"6:4190":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"15:11118":{"crate_id":15,"path":["object","read","SymbolSection"],"kind":"enum"},"72:13":{"crate_id":72,"path":["scoped_tls","ScopedKey"],"kind":"struct"},"15:542":{"crate_id":15,"path":["object","read","any","Section"],"kind":"struct"},"21:2361":{"crate_id":21,"path":["rustc_ast","ast","GenericBound"],"kind":"enum"},"2:11439":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"1:6201":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"14:4955":{"crate_id":14,"path":["gimli","constants","DwLnct"],"kind":"struct"},"2:10099":{"crate_id":2,"path":["rustc_lint_defs","IntoIter"],"kind":"typedef"},"22:2708":{"crate_id":22,"path":["rustc_span","span_encoding","Span"],"kind":"struct"},"6:4148":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"25:842":{"crate_id":25,"path":["tracing_core","field","Iter"],"kind":"struct"},"2:12753":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"2:43520":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"0:168":{"crate_id":0,"path":["rustc_lint_defs","builtin","PROC_MACRO_DERIVE_RESOLUTION_FALLBACK"],"kind":"static"},"26:20":{"crate_id":26,"path":["lazy_static","lazy","Lazy"],"kind":"struct"},"1:11030":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"2:47137":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"35:586":{"crate_id":35,"path":["indexmap","map","ValuesMut"],"kind":"struct"},"2:10432":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"2:7385":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"43:294":{"crate_id":43,"path":["log","Metadata"],"kind":"struct"},"22:4521":{"crate_id":22,"path":["rustc_span","NormalizedPos"],"kind":"struct"},"22:4455":{"crate_id":22,"path":["rustc_span","MultiByteChar"],"kind":"struct"},"1:15277":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"2:8326":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"55:273":{"crate_id":55,"path":["rand_chacha","chacha","ChaCha8Core"],"kind":"struct"},"1:932":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"1:7701":{"crate_id":1,"path":["std","sync","mpsc","oneshot","Packet"],"kind":"struct"},"15:11482":{"crate_id":15,"path":["object","elf","Ident"],"kind":"struct"},"6:6497":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"1:9367":{"crate_id":1,"path":["std","sys_common","rwlock","StaticRWLockWriteGuard"],"kind":"struct"},"2:49237":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"22:4823":{"crate_id":22,"path":["rustc_span","SourceFileAndBytePos"],"kind":"struct"},"1:4145":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"36:1553":{"crate_id":36,"path":["hashbrown","set","Iter"],"kind":"struct"},"29:3319":{"crate_id":29,"path":["rustc_data_structures","OnDrop"],"kind":"struct"},"5:4039":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"2:46828":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"15:11767":{"crate_id":15,"path":["object","elf","Verdaux"],"kind":"struct"},"14:7146":{"crate_id":14,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"39:552":{"crate_id":39,"path":["libc","unix","hostent"],"kind":"struct"},"2:44876":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"15:12598":{"crate_id":15,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"2:47083":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"15:10128":{"crate_id":15,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"1:13717":{"crate_id":1,"path":["std","sys","unix","stdio","Stdin"],"kind":"struct"},"23:484":{"crate_id":23,"path":["tracing","span","Entered"],"kind":"struct"},"39:3663":{"crate_id":39,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"56:1587":{"crate_id":56,"path":["ppv_lite86","x86_64","NoA1"],"kind":"struct"},"75:7084":{"crate_id":75,"path":["rustc_target","spec","TlsModel"],"kind":"enum"},"52:2420":{"crate_id":52,"path":["rand","seq","SliceChooseIter"],"kind":"struct"},"29:3463":{"crate_id":29,"path":["rustc_data_structures","graph","scc","WalkReturn"],"kind":"enum"},"25:1253":{"crate_id":25,"path":["tracing_core","subscriber","NoSubscriber"],"kind":"struct"},"14:3522":{"crate_id":14,"path":["gimli","arch","Arm"],"kind":"struct"},"2:9920":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"1:12782":{"crate_id":1,"path":["std","sys","unix","mutex","ReentrantMutex"],"kind":"struct"},"2:9371":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"6:515":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"6:6068":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ip_mreqn"],"kind":"struct"},"39:3644":{"crate_id":39,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"2:45647":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"75:2787":{"crate_id":75,"path":["rustc_target","abi","Endian"],"kind":"enum"},"5:7602":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"39:5957":{"crate_id":39,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"39:6489":{"crate_id":39,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"2:10390":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"71:386":{"crate_id":71,"path":["sha2","sha512","Sha512Trunc256"],"kind":"struct"},"14:7024":{"crate_id":14,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"2:41993":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"2:45999":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"2:2515":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"1:15242":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"1:8315":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"39:4054":{"crate_id":39,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"1:3807":{"crate_id":1,"path":["std","io","error","Repr"],"kind":"enum"},"39:1635":{"crate_id":39,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"15:607":{"crate_id":15,"path":["object","read","any","Comdat"],"kind":"struct"},"5:5965":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"42:54":{"crate_id":42,"path":["ena","snapshot_vec","SnapshotVec"],"kind":"struct"},"52:0":{"crate_id":52,"path":["rand"],"kind":"module"},"2:2000":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"15:12010":{"crate_id":15,"path":["object","macho","MachHeader64"],"kind":"struct"},"1:5709":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"2:3106":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"39:3674":{"crate_id":39,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"2:45317":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"21:6290":{"crate_id":21,"path":["rustc_ast","ast","ForeignItemKind"],"kind":"enum"},"0:317":{"crate_id":0,"path":["rustc_lint_defs","FutureIncompatibilityReason","FutureReleaseError"],"kind":"variant"},"2:43452":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"1:12793":{"crate_id":1,"path":["std","sys","unix","mutex","PthreadMutexAttr"],"kind":"struct"},"5:5186":{"crate_id":5,"path":["rustc_lint_defs","Owned"],"kind":"typedef"},"75:2529":{"crate_id":75,"path":["rustc_target","abi","call","RegKind"],"kind":"enum"},"75:9870":{"crate_id":75,"path":["rustc_target","spec","TargetTriple"],"kind":"enum"},"15:9799":{"crate_id":15,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"6:4096":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"1:7368":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"2:45876":{"crate_id":2,"path":["core","str","lossy","Utf8LossyChunk"],"kind":"struct"},"36:1883":{"crate_id":36,"path":["hashbrown","TryReserveError"],"kind":"enum"},"2:48123":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"2:45521":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"15:11026":{"crate_id":15,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"2:42942":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"2:2702":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"2:11982":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"15:14000":{"crate_id":15,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"15:10304":{"crate_id":15,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"22:4768":{"crate_id":22,"path":["rustc_span","BytePos"],"kind":"struct"},"6:3850":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"53:225":{"crate_id":53,"path":["rand_core","block","BlockRng"],"kind":"struct"},"29:3725":{"crate_id":29,"path":["rustc_data_structures","ptr_key","PtrKey"],"kind":"struct"},"14:7185":{"crate_id":14,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"21:3027":{"crate_id":21,"path":["rustc_ast","ast","BorrowKind"],"kind":"enum"},"14:7378":{"crate_id":14,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"2:3158":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"5:7062":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"56:298":{"crate_id":56,"path":["ppv_lite86","types","types","MultiLane"],"kind":"trait"},"15:9961":{"crate_id":15,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"39:6579":{"crate_id":39,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"2:11957":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"39:3795":{"crate_id":39,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"2:10418":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"6:4071":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"14:3241":{"crate_id":14,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"15:10912":{"crate_id":15,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"0:228":{"crate_id":0,"path":["rustc_lint_defs","Applicability","MaybeIncorrect"],"kind":"variant"},"2:9357":{"crate_id":2,"path":["core","fmt","macros","Debug"],"kind":"proc_derive"},"0:365":{"crate_id":0,"path":["rustc_lint_defs","BuiltinLintDiagnostics","MacroExpandedMacroExportsAccessedByAbsolutePaths"],"kind":"variant"},"75:4841":{"crate_id":75,"path":["rustc_target","asm","powerpc","PowerPCInlineAsmReg"],"kind":"enum"},"39:5786":{"crate_id":39,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"2:9601":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"29:4446":{"crate_id":29,"path":["rustc_data_structures","steal","Steal"],"kind":"struct"},"2:2838":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"15:12073":{"crate_id":15,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"15:10477":{"crate_id":15,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"1:8581":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"39:6631":{"crate_id":39,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"63:80":{"crate_id":63,"path":["md5","Md5"],"kind":"struct"},"15:9476":{"crate_id":15,"path":["object","endian","I64Bytes"],"kind":"struct"},"36:850":{"crate_id":36,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"2:49263":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"0:160":{"crate_id":0,"path":["rustc_lint_defs","builtin","ELIDED_LIFETIMES_IN_PATHS"],"kind":"static"},"21:2558":{"crate_id":21,"path":["rustc_ast","ast","WhereRegionPredicate"],"kind":"struct"},"14:5231":{"crate_id":14,"path":["gimli","constants","DwOp"],"kind":"struct"},"2:42654":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"14:6605":{"crate_id":14,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"2:2951":{"crate_id":2,"path":["rustc_lint_defs","Error"],"kind":"typedef"},"1:10185":{"crate_id":1,"path":["std","thread","local","fast","DtorState"],"kind":"enum"},"5:7128":{"crate_id":5,"path":["alloc","vec","{{impl}}","dedup_by","FillGapOnDrop"],"kind":"struct"},"1:8697":{"crate_id":1,"path":["std","sync","rwlock","{{impl}}","fmt","LockedPlaceholder"],"kind":"struct"},"36:176":{"crate_id":36,"path":["hashbrown","raw","inner","RawTable"],"kind":"struct"},"15:10448":{"crate_id":15,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"1:1089":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"6:5000":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"2:45100":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"5:5985":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"2:49301":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"6:3682":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"5:1168":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"1:2708":{"crate_id":1,"path":["rustc_lint_defs","Owned"],"kind":"typedef"},"1:3459":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"34:323":{"crate_id":34,"path":["smallvec","IntoIter"],"kind":"struct"},"9:1790":{"crate_id":9,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"2:42484":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"29:4337":{"crate_id":29,"path":["rustc_data_structures","transitive_relation","TransitiveRelation"],"kind":"struct"},"0:269":{"crate_id":0,"path":["rustc_lint_defs","Level","Forbid"],"kind":"variant"},"66:6502":{"crate_id":66,"path":["typenum","Less"],"kind":"struct"},"2:47393":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"36:1587":{"crate_id":36,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"29:3382":{"crate_id":29,"path":["rustc_data_structures","graph","implementation","Direction"],"kind":"struct"},"15:12756":{"crate_id":15,"path":["object","macho","Nlist64"],"kind":"struct"},"1:3182":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"52:2031":{"crate_id":52,"path":["rand","distributions","Standard"],"kind":"struct"},"55:303":{"crate_id":55,"path":["rand_chacha","guts","State"],"kind":"struct"},"14:7264":{"crate_id":14,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"0:454":{"crate_id":0,"path":["rustc_lint_defs","LintBuffer"],"kind":"struct"},"0:316":{"crate_id":0,"path":["rustc_lint_defs","FutureIncompatibilityReason"],"kind":"enum"},"2:10238":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"6:3768":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"14:7843":{"crate_id":14,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"5:2898":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"9:1052":{"crate_id":9,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"56:1482":{"crate_id":56,"path":["ppv_lite86","x86_64","sse2","G1"],"kind":"struct"},"1:8308":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"14:5855":{"crate_id":14,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"54:0":{"crate_id":54,"path":["getrandom"],"kind":"module"},"0:131":{"crate_id":0,"path":["rustc_lint_defs","builtin","UNREACHABLE_PATTERNS"],"kind":"static"},"33:1779":{"crate_id":33,"path":["rustc_serialize","json","EncoderError"],"kind":"enum"},"14:6014":{"crate_id":14,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"18:0":{"crate_id":18,"path":["adler"],"kind":"module"},"22:133":{"crate_id":22,"path":["rustc_span","source_map","monotonic","MonotonicVec"],"kind":"struct"},"6:5102":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"1:15266":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"2:14":{"crate_id":2,"path":["core","write"],"kind":"macro"},"23:474":{"crate_id":23,"path":["tracing","span","Span"],"kind":"struct"},"1:14598":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"2:47699":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"75:7155":{"crate_id":75,"path":["rustc_target","spec","StackProbeType"],"kind":"enum"},"2:45181":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"1:8671":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"0:428":{"crate_id":0,"path":["rustc_lint_defs","BuiltinLintDiagnostics","BreakWithLabelAndLoop"],"kind":"variant"},"1:4101":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"1:7601":{"crate_id":1,"path":["std","sync","mpsc","blocking","Inner"],"kind":"struct"},"2:2625":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"39:6585":{"crate_id":39,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"35:1077":{"crate_id":35,"path":["indexmap","set","Intersection"],"kind":"struct"},"50:55":{"crate_id":50,"path":["tempfile","dir","TempDir"],"kind":"struct"},"22:1783":{"crate_id":22,"path":["rustc_span","source_map","FilePathMapping"],"kind":"struct"},"26:0":{"crate_id":26,"path":["lazy_static"],"kind":"module"},"0:230":{"crate_id":0,"path":["rustc_lint_defs","Applicability","HasPlaceholders"],"kind":"variant"},"5:956":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"14:3488":{"crate_id":14,"path":["gimli","common","DwoId"],"kind":"struct"},"2:42716":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"75:2373":{"crate_id":75,"path":["rustc_target","abi","call","attr_impl","ArgAttribute"],"kind":"struct"},"5:1316":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"14:5360":{"crate_id":14,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"33:0":{"crate_id":33,"path":["rustc_serialize"],"kind":"module"},"1:7117":{"crate_id":1,"path":["rustc_lint_defs","Owned"],"kind":"typedef"},"1:14059":{"crate_id":1,"path":["std","sys","unix","fs","DirBuilder"],"kind":"struct"},"21:5441":{"crate_id":21,"path":["rustc_ast","ast","ModKind"],"kind":"enum"},"75:2605":{"crate_id":75,"path":["rustc_target","abi","call","CastTarget"],"kind":"struct"},"14:7205":{"crate_id":14,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"22:4154":{"crate_id":22,"path":["rustc_span","symbol","Symbol"],"kind":"struct"},"39:1542":{"crate_id":39,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"75:2937":{"crate_id":75,"path":["rustc_target","abi","Primitive"],"kind":"enum"},"14:6644":{"crate_id":14,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"17:963":{"crate_id":17,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"1:10589":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"14:6110":{"crate_id":14,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"25:1094":{"crate_id":25,"path":["tracing_core","metadata","LevelFilter"],"kind":"struct"},"15:10140":{"crate_id":15,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"17:809":{"crate_id":17,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"0:181":{"crate_id":0,"path":["rustc_lint_defs","builtin","BAD_ASM_STYLE"],"kind":"static"},"56:1577":{"crate_id":56,"path":["ppv_lite86","x86_64","NoS4"],"kind":"struct"},"15:9759":{"crate_id":15,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"75:4404":{"crate_id":75,"path":["rustc_target","asm","mips","MipsInlineAsmRegClass"],"kind":"enum"},"7:38":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"42:486":{"crate_id":42,"path":["ena","snapshot_vec","UndoLog"],"kind":"enum"},"21:4703":{"crate_id":21,"path":["rustc_ast","ast","TraitObjectSyntax"],"kind":"enum"},"39:6608":{"crate_id":39,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"14:5384":{"crate_id":14,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"25:1201":{"crate_id":25,"path":["tracing_core","span","Record"],"kind":"struct"},"29:4348":{"crate_id":29,"path":["rustc_data_structures","transitive_relation","Index"],"kind":"struct"},"2:42116":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"1:0":{"crate_id":1,"path":["std"],"kind":"module"},"2:34963":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"2:22073":{"crate_id":2,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"55:175":{"crate_id":55,"path":["rand_chacha","chacha","ChaCha20Core"],"kind":"struct"},"5:1180":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"2:1948":{"crate_id":2,"path":["core","mem","maybe_uninit","{{impl}}","write_slice_cloned","Guard"],"kind":"struct"},"21:2157":{"crate_id":21,"path":["rustc_ast","ast","Path"],"kind":"struct"},"2:3282":{"crate_id":2,"path":["core","ops","generator","Generator"],"kind":"trait"},"1:7353":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"5:1941":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"2:2917":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"1:8890":{"crate_id":1,"path":["std","lazy","SyncOnceCell"],"kind":"struct"},"1:14239":{"crate_id":1,"path":["std","sys","unix","process","process_inner","{{impl}}","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"1:1410":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"56:1567":{"crate_id":56,"path":["ppv_lite86","x86_64","NoS3"],"kind":"struct"},"2:42565":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"1:11207":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"15:12552":{"crate_id":15,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"1:7198":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"36:804":{"crate_id":36,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"21:7125":{"crate_id":21,"path":["rustc_ast","tokenstream","CanSynthesizeMissingTokens"],"kind":"enum"},"2:48594":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"8:0":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"2:24892":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"21:6101":{"crate_id":21,"path":["rustc_ast","ast","FnKind"],"kind":"struct"},"1:8515":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"2:7435":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"15:10656":{"crate_id":15,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"2:45784":{"crate_id":2,"path":["rustc_lint_defs","Searcher"],"kind":"typedef"},"14:7226":{"crate_id":14,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"2:2691":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"71:382":{"crate_id":71,"path":["sha2","sha512","Sha384"],"kind":"struct"},"52:1128":{"crate_id":52,"path":["rand","distributions","bernoulli","BernoulliError"],"kind":"enum"},"39:4211":{"crate_id":39,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"6:6581":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"15:12142":{"crate_id":15,"path":["object","macho","Fvmlib"],"kind":"struct"},"75:2980":{"crate_id":75,"path":["rustc_target","abi","WrappingRange"],"kind":"struct"},"1:14105":{"crate_id":1,"path":["std","sys","unix","process","process_common","ExitCode"],"kind":"struct"},"5:1258":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"2:21817":{"crate_id":2,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"5:7463":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"21:2994":{"crate_id":21,"path":["rustc_ast","ast","Mutability"],"kind":"enum"},"21:7337":{"crate_id":21,"path":["rustc_ast","visit","FnKind"],"kind":"enum"},"2:43756":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"75:6856":{"crate_id":75,"path":["rustc_target","spec","apple_sdk_base","Arch"],"kind":"enum"},"15:10458":{"crate_id":15,"path":["object","read","elf","note","Note"],"kind":"struct"},"14:5561":{"crate_id":14,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"49:0":{"crate_id":49,"path":["parking_lot_core"],"kind":"module"},"1:8468":{"crate_id":1,"path":["rustc_lint_defs","Target"],"kind":"typedef"},"1:11735":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"2:45267":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"6:4167":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"17:996":{"crate_id":17,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"1:11008":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"0:215":{"crate_id":0,"path":["rustc_lint_defs","builtin","INVALID_DOC_ATTRIBUTES"],"kind":"static"},"15:0":{"crate_id":15,"path":["object"],"kind":"module"},"29:1540":{"crate_id":29,"path":["rustc_data_structures","memmap","Mmap"],"kind":"struct"},"5:4862":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"15:13258":{"crate_id":15,"path":["object","pe","ImageSymbol"],"kind":"struct"},"31:608":{"crate_id":31,"path":["rustc_index","bit_set","BitMatrix"],"kind":"struct"},"21:2653":{"crate_id":21,"path":["rustc_ast","ast","MetaItem"],"kind":"struct"},"42:501":{"crate_id":42,"path":["ena","undo_log","VecLog"],"kind":"struct"},"39:4146":{"crate_id":39,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"1:11907":{"crate_id":1,"path":["std","sys","unix","args","Args"],"kind":"struct"},"14:6032":{"crate_id":14,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"52:1175":{"crate_id":52,"path":["rand","distributions","float","Open01"],"kind":"struct"},"0:221":{"crate_id":0,"path":["rustc_lint_defs","builtin","BREAK_WITH_LABEL_AND_LOOP"],"kind":"static"},"1:7318":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"2:2946":{"crate_id":2,"path":["rustc_lint_defs","Error"],"kind":"typedef"},"0:170":{"crate_id":0,"path":["rustc_lint_defs","builtin","MACRO_EXPANDED_MACRO_EXPORTS_ACCESSED_BY_ABSOLUTE_PATHS"],"kind":"static"},"15:11147":{"crate_id":15,"path":["object","read","SymbolMap"],"kind":"struct"},"0:177":{"crate_id":0,"path":["rustc_lint_defs","builtin","MUTABLE_BORROW_RESERVATION_CONFLICT"],"kind":"static"},"1:15010":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"1:3156":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"1:14315":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"1:4190":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"15:10041":{"crate_id":15,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"64:0":{"crate_id":64,"path":["digest"],"kind":"module"},"1:5722":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"39:5988":{"crate_id":39,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"35:22":{"crate_id":35,"path":["indexmap","equivalent","Equivalent"],"kind":"trait"},"5:3787":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"33:1693":{"crate_id":33,"path":["rustc_serialize","json","ErrorCode"],"kind":"enum"},"14:6126":{"crate_id":14,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"2:7877":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"5:6261":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"6:4303":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"15:9689":{"crate_id":15,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"16:610":{"crate_id":16,"path":["memchr","cow","CowBytes"],"kind":"struct"},"21:5696":{"crate_id":21,"path":["rustc_ast","ast","Attribute"],"kind":"struct"},"55:284":{"crate_id":55,"path":["rand_chacha","chacha","ChaCha8Rng"],"kind":"struct"},"25:142":{"crate_id":25,"path":["tracing_core","dispatcher","Entered"],"kind":"struct"},"2:42675":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"2:3154":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"6:5947":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"2:47440":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"2:45716":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"1:5476":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"16:829":{"crate_id":16,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"39:5901":{"crate_id":39,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"2:22009":{"crate_id":2,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"15:10938":{"crate_id":15,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"22:2663":{"crate_id":22,"path":["rustc_span","def_id","DefId"],"kind":"struct"},"15:10279":{"crate_id":15,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"1:14392":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"0:375":{"crate_id":0,"path":["rustc_lint_defs","BuiltinLintDiagnostics","UnknownCrateTypes"],"kind":"variant"},"16:660":{"crate_id":16,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"1:9239":{"crate_id":1,"path":["std","sys_common","mutex","StaticMutexGuard"],"kind":"struct"},"12:116":{"crate_id":12,"path":["std_detect","detect","arch","Feature"],"kind":"enum"},"38:152":{"crate_id":38,"path":["jobserver","Acquired"],"kind":"struct"},"2:42359":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"14:5975":{"crate_id":14,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"14:2816":{"crate_id":14,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"23:479":{"crate_id":23,"path":["tracing","span","Inner"],"kind":"struct"},"2:11712":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"15:10224":{"crate_id":15,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"15:9849":{"crate_id":15,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"75:7104":{"crate_id":75,"path":["rustc_target","spec","LinkOutputKind"],"kind":"enum"},"14:6577":{"crate_id":14,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"6:527":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"36:1033":{"crate_id":36,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"16:857":{"crate_id":16,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"6:5072":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"0:159":{"crate_id":0,"path":["rustc_lint_defs","builtin","TYVAR_BEHIND_RAW_POINTER"],"kind":"static"},"15:13942":{"crate_id":15,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"1:7338":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"1:10261":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"39:3965":{"crate_id":39,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"1:10744":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"75:2736":{"crate_id":75,"path":["rustc_target","abi","call","FnAbi"],"kind":"struct"},"2:46208":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"14:6252":{"crate_id":14,"path":["gimli","read","line","LineRows"],"kind":"struct"},"52:381":{"crate_id":52,"path":["rand","distributions","uniform","SampleUniform"],"kind":"trait"},"21:4775":{"crate_id":21,"path":["rustc_ast","ast","InlineAsmOptions"],"kind":"struct"},"15:13453":{"crate_id":15,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"2:10133":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"64:71":{"crate_id":64,"path":["digest","dyn_digest","DynDigest"],"kind":"trait"},"2:42494":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"15:9296":{"crate_id":15,"path":["object","endian","U16Bytes"],"kind":"struct"},"2:7606":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"14:6238":{"crate_id":14,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"21:2032":{"crate_id":21,"path":["rustc_ast","util","parser","ExprPrecedence"],"kind":"enum"},"2:0":{"crate_id":2,"path":["core"],"kind":"module"},"15:10571":{"crate_id":15,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"6:3813":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"39:1524":{"crate_id":39,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"14:5472":{"crate_id":14,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"39:5336":{"crate_id":39,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"15:2512":{"crate_id":15,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"2:44138":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"15:12373":{"crate_id":15,"path":["object","macho","DylibTableOfContents"],"kind":"struct"}},"external_crates":{"22":{"name":"rustc_span","html_root_url":"https://doc.rust-lang.org/nightly/nightly-rustc/"},"72":{"name":"scoped_tls","html_root_url":null},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"34":{"name":"smallvec","html_root_url":null},"65":{"name":"generic_array","html_root_url":null},"66":{"name":"typenum","html_root_url":null},"29":{"name":"rustc_data_structures","html_root_url":"https://doc.rust-lang.org/nightly/nightly-rustc/"},"71":{"name":"sha2","html_root_url":null},"54":{"name":"getrandom","html_root_url":"https://rust-random.github.io/rand/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"32":{"name":"arrayvec","html_root_url":"https://docs.rs/arrayvec/0.6/"},"73":{"name":"rustc_lexer","html_root_url":null},"64":{"name":"digest","html_root_url":null},"14":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"27":{"name":"tracing_attributes","html_root_url":"https://docs.rs/tracing-attributes/0.1.17/"},"67":{"name":"block_buffer","html_root_url":null},"37":{"name":"rustc_hash","html_root_url":null},"40":{"name":"rustc_graphviz","html_root_url":"https://doc.rust-lang.org/nightly/nightly-rustc/"},"44":{"name":"measureme","html_root_url":null},"51":{"name":"remove_dir_all","html_root_url":null},"68":{"name":"opaque_debug","html_root_url":null},"24":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"75":{"name":"rustc_target","html_root_url":"https://doc.rust-lang.org/nightly/nightly-rustc/"},"17":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"47":{"name":"lock_api","html_root_url":null},"9":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"74":{"name":"unicode_xid","html_root_url":null},"36":{"name":"hashbrown","html_root_url":null},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"},"43":{"name":"log","html_root_url":"https://docs.rs/log/0.4.14/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"28":{"name":"pin_project_lite","html_root_url":null},"26":{"name":"lazy_static","html_root_url":"https://docs.rs/lazy_static/1.4.0/"},"30":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"42":{"name":"ena","html_root_url":"https://docs.rs/ena/latest/"},"58":{"name":"memmap2","html_root_url":"https://docs.rs/memmap2/0.2.1/"},"69":{"name":"sha1","html_root_url":null},"13":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"45":{"name":"parking_lot","html_root_url":null},"59":{"name":"stacker","html_root_url":null},"16":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"62":{"name":"unicode_width","html_root_url":null},"12":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"49":{"name":"parking_lot_core","html_root_url":null},"11":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"31":{"name":"rustc_index","html_root_url":null},"50":{"name":"tempfile","html_root_url":"https://docs.rs/tempfile/3.1.0/"},"57":{"name":"bitflags","html_root_url":"https://docs.rs/bitflags/1.2.1/"},"55":{"name":"rand_chacha","html_root_url":"https://rust-random.github.io/rand/"},"18":{"name":"adler","html_root_url":"https://docs.rs/adler/0.2.3/"},"60":{"name":"psm","html_root_url":null},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"23":{"name":"tracing","html_root_url":"https://docs.rs/tracing/0.1.28/"},"38":{"name":"jobserver","html_root_url":"https://docs.rs/jobserver/0.1/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"21":{"name":"rustc_ast","html_root_url":"https://doc.rust-lang.org/nightly/nightly-rustc/"},"56":{"name":"ppv_lite86","html_root_url":null},"70":{"name":"cpuid_bool","html_root_url":null},"52":{"name":"rand","html_root_url":"https://rust-random.github.io/rand/"},"46":{"name":"instant","html_root_url":null},"53":{"name":"rand_core","html_root_url":"https://rust-random.github.io/rand/"},"15":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"25":{"name":"tracing_core","html_root_url":"https://docs.rs/tracing-core/0.1.21/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"63":{"name":"md5","html_root_url":null},"39":{"name":"libc","html_root_url":null},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"33":{"name":"rustc_serialize","html_root_url":"https://doc.rust-lang.org/nightly/nightly-rustc/"},"41":{"name":"stable_deref_trait","html_root_url":null},"35":{"name":"indexmap","html_root_url":"https://docs.rs/indexmap/1/"},"20":{"name":"rustc_macros","html_root_url":null},"61":{"name":"rustc_arena","html_root_url":"https://doc.rust-lang.org/nightly/nightly-rustc/"},"48":{"name":"scopeguard","html_root_url":"https://docs.rs/scopeguard/1/"}},"format_version":9}