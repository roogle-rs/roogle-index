{"root":"0:0:2058","crate_version":"0.5.5","includes_private":false,"index":{"a:2:42131:10111-0:696:1979":{"id":"a:2:42131:10111-0:696:1979","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:42131:10111","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TcpKeepalive","id":"0:696:1979","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:610":{"id":"0:610","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[718,0],"end":[722,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(target_os = \"redox\"))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'name","kind":{"lifetime":{"outlives":[]}}},{"name":"'bufs","kind":{"lifetime":{"outlives":[]}}},{"name":"'control","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:9877:118","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MsgHdrMut","id":"0:595:2048","args":{"angle_bracketed":{"args":[{"lifetime":"'name"},{"lifetime":"'bufs"},{"lifetime":"'control"}],"bindings":[]}}}},"items":["0:614:719"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:74":{"id":"0:74","crate_id":0,"name":null,"span":{"filename":"src/sockaddr.rs","begin":[382,0],"end":[382,23]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"2:2491:132","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"SockAddr","id":"0:616:1871","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:2948:254-0:595:2048":{"id":"a:2:2948:254-0:595:2048","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'addr","kind":{"lifetime":{"outlives":[]}}},{"name":"'bufs","kind":{"lifetime":{"outlives":[]}}},{"name":"'control","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2948:254","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MsgHdrMut","id":"0:595:2048","args":{"angle_bracketed":{"args":[{"lifetime":"'addr"},{"lifetime":"'bufs"},{"lifetime":"'control"}],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"a:2:32418:244-0:660:1902":{"id":"a:2:32418:244-0:660:1902","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:32418:244","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Type","id":"0:660:1902","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:2:32500:3864-0:595:2048":{"id":"a:2:32500:3864-0:595:2048","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'addr","kind":{"lifetime":{"outlives":[]}}},{"name":"'bufs","kind":{"lifetime":{"outlives":[]}}},{"name":"'control","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32500:3864","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MsgHdrMut","id":"0:595:2048","args":{"angle_bracketed":{"args":[{"lifetime":"'addr"},{"lifetime":"'bufs"},{"lifetime":"'control"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:229:2965":{"id":"0:229:2965","crate_id":0,"name":"only_v6","span":{"filename":"src/socket.rs","begin":[1738,4],"end":[1743,5]},"visibility":"public","docs":"Get the value of the `IPV6_V6ONLY` option for this socket.\n\nFor more information about this option, see [`set_only_v6`].\n\n[`set_only_v6`]: Socket::set_only_v6","links":{"Socket::set_only_v6":"0:231:2973"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:2944:233","args":{"angle_bracketed":{"args":[{"type":{"primitive":"bool"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2730-0:660:1902":{"id":"b:2:2730-0:660:1902","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2703:142","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Type","id":"0:660:1902","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2732:746"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2730-0:595:2048":{"id":"b:2:2730-0:595:2048","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2703:142","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"MsgHdrMut","id":"0:595:2048","args":{"angle_bracketed":{"args":[{"lifetime":"'addr"},{"lifetime":"'bufs"},{"lifetime":"'control"}],"bindings":[]}}}},"items":["2:2732:746"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12750:35127":{"id":"2:12750:35127","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji üßë‚Äçüî¨ (scientist) could be split so that the string only\nincludes üßë (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"‚ù§Ô∏èüß°üíõüíöüíôüíú\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"‚ù§Ô∏èüß°\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:165:2669":{"id":"0:165:2669","crate_id":0,"name":"set_broadcast","span":{"filename":"src/socket.rs","begin":[852,4],"end":[861,5]},"visibility":"public","docs":"Set the value of the `SO_BROADCAST` option for this socket.\n\nWhen enabled, this socket is allowed to send packets to a broadcast\naddress.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["broadcast",{"primitive":"bool"}]],"output":{"resolved_path":{"name":"io::Result","id":"1:2944:233","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:512:3092":{"id":"0:512:3092","crate_id":0,"name":"as_raw_fd","span":{"filename":"src/sys/unix.rs","begin":[3045,4],"end":[3047,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"c_int","id":"20:44:1870","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:282":{"id":"0:282","crate_id":0,"name":null,"span":{"filename":"src/sockref.rs","begin":[115,0],"end":[123,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:9877:118","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"SockRef","id":"0:270:1873","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"items":["0:283:719"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:225:2955":{"id":"0:225:2955","crate_id":0,"name":"set_multicast_loop_v6","span":{"filename":"src/socket.rs","begin":[1698,4],"end":[1707,5]},"visibility":"public","docs":"Set the value of the `IPV6_MULTICAST_LOOP` option for this socket.\n\nControls whether this socket sees the multicast packets it sends itself.\nNote that this may not have any affect on IPv4 sockets.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["loop_v6",{"primitive":"bool"}]],"output":{"resolved_path":{"name":"io::Result","id":"1:2944:233","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:32500:3864-0:575:2011":{"id":"a:2:32500:3864-0:575:2011","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'addr","kind":{"lifetime":{"outlives":[]}}},{"name":"'bufs","kind":{"lifetime":{"outlives":[]}}},{"name":"'control","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32500:3864","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MsgHdr","id":"0:575:2011","args":{"angle_bracketed":{"args":[{"lifetime":"'addr"},{"lifetime":"'bufs"},{"lifetime":"'control"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:174:2715":{"id":"0:174:2715","crate_id":0,"name":"set_out_of_band_inline","span":{"filename":"src/socket.rs","begin":[955,4],"end":[964,5]},"visibility":"public","docs":"Set value for the `SO_OOBINLINE` option on this socket.\n\nIf this option is enabled, out-of-band data is directly placed into the\nreceive data stream. Otherwise, out-of-band data is passed only when the\n`MSG_OOB` flag is set during receiving. As per RFC6093, TCP sockets\nusing the Urgent mechanism are encouraged to set this flag.","links":{},"attrs":["#[cfg(not(target_os = \"redox\"))]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["oob_inline",{"primitive":"bool"}]],"output":{"resolved_path":{"name":"io::Result","id":"1:2944:233","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:32500:3864-0:696:1979":{"id":"a:2:32500:3864-0:696:1979","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32500:3864","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TcpKeepalive","id":"0:696:1979","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:514:746":{"id":"0:514:746","crate_id":0,"name":"from","span":{"filename":"src/sys/unix.rs","begin":[3052,4],"end":[3055,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["sock",{"resolved_path":{"name":"crate::Socket","id":"0:114:1872","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"OwnedFd","id":"1:4798:3102","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:124:2416":{"id":"0:124:2416","crate_id":0,"name":"bind","span":{"filename":"src/socket.rs","begin":[186,4],"end":[188,5]},"visibility":"public","docs":"Binds this socket to the specified address.\n\nThis function directly corresponds to the `bind(2)` function on Windows\nand Unix.\n\nAdditional documentation can be found in manual of the OS:\n\n * DragonFly BSD: <https://man.dragonflybsd.org/?command=bind&section=2>\n * FreeBSD: <https://www.freebsd.org/cgi/man.cgi?query=bind&sektion=2>\n * Linux: <https://man7.org/linux/man-pages/man2/bind.2.html>\n * macOS: <https://developer.apple.com/library/archive/documentation/System/Conceptual/ManPages_iPhoneOS/man2/bind.2.html> (archived, actually for iOS)\n * NetBSD: <https://man.netbsd.org/bind.2>\n * OpenBSD: <https://man.openbsd.org/bind.2>\n * iOS: <https://developer.apple.com/library/archive/documentation/System/Conceptual/ManPages_iPhoneOS/man2/bind.2.html> (archived)\n * illumos: <https://illumos.org/man/3SOCKET/bind>\n * Windows: <https://docs.microsoft.com/en-us/windows/win32/api/winsock2/nf-winsock2-bind>","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["address",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"SockAddr","id":"0:616:1871","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:2944:233","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:220:2939":{"id":"0:220:2939","crate_id":0,"name":"multicast_if_v6","span":{"filename":"src/socket.rs","begin":[1659,4],"end":[1664,5]},"visibility":"public","docs":"Get the value of the `IPV6_MULTICAST_IF` option for this socket.\n\nFor more information about this option, see [`set_multicast_if_v6`].\n\n[`set_multicast_if_v6`]: Socket::set_multicast_if_v6","links":{"Socket::set_multicast_if_v6":"0:222:2945"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:2944:233","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u32"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:42131:10111-0:554:1969":{"id":"a:2:42131:10111-0:554:1969","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:42131:10111","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MaybeUninitSlice","id":"0:554:1969","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2736-0:595:2048":{"id":"b:2:2736-0:595:2048","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2710:264","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2706:265","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"MsgHdrMut","id":"0:595:2048","args":{"angle_bracketed":{"args":[{"lifetime":"'addr"},{"lifetime":"'bufs"},{"lifetime":"'control"}],"bindings":[]}}}},"items":["2:2739:135","2:2740:1621"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:689:456":{"id":"0:689:456","crate_id":0,"name":"clone","span":{"filename":"src/lib.rs","begin":[368,15],"end":[368,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"RecvFlags","id":"0:684:1959","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:127:2453":{"id":"0:127:2453","crate_id":0,"name":"listen","span":{"filename":"src/socket.rs","begin":[253,4],"end":[255,5]},"visibility":"public","docs":"Mark a socket as ready to accept incoming connection requests using\n[`Socket::accept()`].\n\nThis function directly corresponds to the `listen(2)` function on\nWindows and Unix.\n\nAn error will be returned if `listen` or `connect` has already been\ncalled on this builder.\n\nAdditional documentation can be found in manual of the OS:\n\n * DragonFly BSD: <https://man.dragonflybsd.org/?command=listen&section=2>\n * FreeBSD: <https://www.freebsd.org/cgi/man.cgi?query=listen&sektion=2>\n * Linux: <https://man7.org/linux/man-pages/man2/listen.2.html>\n * macOS: <https://developer.apple.com/library/archive/documentation/System/Conceptual/ManPages_iPhoneOS/man2/listen.2.html> (archived, actually for iOS)\n * NetBSD: <https://man.netbsd.org/listen.2>\n * OpenBSD: <https://man.openbsd.org/listen.2>\n * iOS: <https://developer.apple.com/library/archive/documentation/System/Conceptual/ManPages_iPhoneOS/man2/listen.2.html> (archived)\n * illumos: <https://illumos.org/man/3SOCKET/listen>\n * Windows: <https://docs.microsoft.com/en-us/windows/win32/api/winsock2/nf-winsock2-listen>","links":{"`Socket::accept()`":"0:128:2459"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["backlog",{"resolved_path":{"name":"c_int","id":"20:44:1870","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:2944:233","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:202:2872":{"id":"0:202:2872","crate_id":0,"name":"multicast_ttl_v4","span":{"filename":"src/socket.rs","begin":[1434,4],"end":[1439,5]},"visibility":"public","docs":"Get the value of the `IP_MULTICAST_TTL` option for this socket.\n\nFor more information about this option, see [`set_multicast_ttl_v4`].\n\n[`set_multicast_ttl_v4`]: Socket::set_multicast_ttl_v4","links":{"Socket::set_multicast_ttl_v4":"0:204:2879"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:2944:233","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u32"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3495-0:648:1886":{"id":"b:2:3495-0:648:1886","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:32419:3863","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3493:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Domain","id":"0:648:1886","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3497:1634"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:606:2025":{"id":"0:606:2025","crate_id":0,"name":"with_addr","span":{"filename":"src/lib.rs","begin":[688,4],"end":[691,5]},"visibility":"public","docs":"Set the mutable address (name) of the message.\n\nCorresponds to setting `msg_name` and `msg_namelen` on Unix and `name`\nand `namelen` on Windows.","links":{},"attrs":["#[allow(clippy::needless_pass_by_ref_mut)]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["addr",{"borrowed_ref":{"lifetime":"'addr","mutable":true,"type":{"resolved_path":{"name":"SockAddr","id":"0:616:1871","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:539:746":{"id":"0:539:746","crate_id":0,"name":"from","span":{"filename":"src/lib.rs","begin":[287,4],"end":[289,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["t",{"resolved_path":{"name":"c_int","id":"20:44:1870","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Type","id":"0:660:1902","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:270:1873":{"id":"0:270:1873","crate_id":0,"name":"SockRef","span":{"filename":"src/sockref.rs","begin":[61,0],"end":[69,1]},"visibility":"public","docs":"A reference to a [`Socket`] that can be used to configure socket types other\nthan the `Socket` type itself.\n\nThis allows for example a [`TcpStream`], found in the standard library, to\nbe configured using all the additional methods found in the [`Socket`] API.\n\n`SockRef` can be created from any socket type that implements [`AsFd`]\n(Unix) or [`AsSocket`] (Windows) using the [`From`] implementation.\n\n[`TcpStream`]: std::net::TcpStream\n[`AsFd`]: https://doc.rust-lang.org/stable/std/os/unix/io/trait.AsFd.html\n[`AsSocket`]: https://doc.rust-lang.org/stable/std/os/windows/io/trait.AsSocket.html\n\n# Examples\n\nBelow is an example of converting a [`TcpStream`] into a [`SockRef`].\n\n```\nuse std::net::{TcpStream, SocketAddr};\n\nuse socket2::SockRef;\n\n# fn main() -> Result<(), Box<dyn std::error::Error>> {\n// Create `TcpStream` from the standard library.\nlet address: SocketAddr = \"127.0.0.1:1234\".parse()?;\n# let b1 = std::sync::Arc::new(std::sync::Barrier::new(2));\n# let b2 = b1.clone();\n# let handle = std::thread::spawn(move || {\n#    let listener = std::net::TcpListener::bind(address).unwrap();\n#    b2.wait();\n#    let (stream, _) = listener.accept().unwrap();\n#    std::thread::sleep(std::time::Duration::from_millis(10));\n#    drop(stream);\n# });\n# b1.wait();\nlet stream = TcpStream::connect(address)?;\n\n// Create a `SockRef`erence to the stream.\nlet socket_ref = SockRef::from(&stream);\n// Use `Socket::set_nodelay` on the stream.\nsocket_ref.set_nodelay(true)?;\ndrop(socket_ref);\n\nassert_eq!(stream.nodelay()?, true);\n# handle.join().unwrap();\n# Ok(())\n# }\n```","links":{"`SockRef`":"0:270:1873","`From`":"2:2703:142","`Socket`":"0:114:1872","std::net::TcpStream":"1:3732:2379"},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'s","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"impls":["a:2:32418:244-0:270:1873","a:2:32500:3864-0:270:1873","a:2:42130:10112-0:270:1873","a:2:42131:10111-0:270:1873","a:2:2948:254-0:270:1873","b:2:2426-0:270:1873","b:2:2741-0:270:1873","b:2:2726-0:270:1873","b:2:2736-0:270:1873","b:2:3495-0:270:1873","b:2:2730-0:270:1873","b:2:2423-0:270:1873","0:274","0:278","0:282"]}}},"0:635:746":{"id":"0:635:746","crate_id":0,"name":"from","span":{"filename":"src/socket.rs","begin":[2096,0],"end":[2096,29]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["socket",{"resolved_path":{"name":"net::UdpSocket","id":"1:3837:3042","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Socket","id":"0:114:1872","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:185:2755":{"id":"0:185:2755","crate_id":0,"name":"set_send_buffer_size","span":{"filename":"src/socket.rs","begin":[1053,4],"end":[1062,5]},"visibility":"public","docs":"Set value for the `SO_SNDBUF` option on this socket.\n\nChanges the size of the operating system's send buffer associated with\nthe socket.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["size",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"io::Result","id":"1:2944:233","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:647:719":{"id":"0:647:719","crate_id":0,"name":"fmt","span":{"filename":"src/sys/unix.rs","begin":[515,0],"end":[539,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"std::fmt::Formatter","id":"2:9852:141","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"std::fmt::Result","id":"2:9833:233","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:42130:10112-0:616:1871":{"id":"a:2:42130:10112-0:616:1871","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:42130:10112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"SockAddr","id":"0:616:1871","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:43:1039":{"id":"0:43:1039","crate_id":0,"name":"new","span":{"filename":"src/sockaddr.rs","begin":[73,4],"end":[75,5]},"visibility":"public","docs":"Create a `SockAddr` from the underlying storage and its length.\n\n# Safety\n\nCaller must ensure that the address family and length match the type of\nstorage address. For example if `storage.ss_family` is set to `AF_INET`\nthe `storage` must be initialised as `sockaddr_in`, setting the content\nand length appropriately.\n\n# Examples\n\n```\n# fn main() -> std::io::Result<()> {\n# #[cfg(unix)] {\nuse std::io;\nuse std::mem;\nuse std::os::unix::io::AsRawFd;\n\nuse socket2::{SockAddr, Socket, Domain, Type};\n\nlet socket = Socket::new(Domain::IPV4, Type::STREAM, None)?;\n\n// Initialise a `SocketAddr` byte calling `getsockname(2)`.\nlet mut addr_storage: libc::sockaddr_storage = unsafe { mem::zeroed() };\nlet mut len = mem::size_of_val(&addr_storage) as libc::socklen_t;\n\n// The `getsockname(2)` system call will intiliase `storage` for\n// us, setting `len` to the correct length.\nlet res = unsafe {\n    libc::getsockname(\n        socket.as_raw_fd(),\n        (&mut addr_storage as *mut libc::sockaddr_storage).cast(),\n        &mut len,\n    )\n};\nif res == -1 {\n    return Err(io::Error::last_os_error());\n}\n\nlet address = unsafe { SockAddr::new(addr_storage, len) };\n# drop(address);\n# }\n# Ok(())\n# }\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["storage",{"resolved_path":{"name":"sockaddr_storage","id":"20:1697:2181","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}],["len",{"resolved_path":{"name":"socklen_t","id":"20:1862:2182","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"SockAddr","id":"0:616:1871","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:204:2879":{"id":"0:204:2879","crate_id":0,"name":"set_multicast_ttl_v4","span":{"filename":"src/socket.rs","begin":[1448,4],"end":[1457,5]},"visibility":"public","docs":"Set the value of the `IP_MULTICAST_TTL` option for this socket.\n\nIndicates the time-to-live value of outgoing multicast packets for\nthis socket. The default value is 1 which means that multicast packets\ndon't leave the local network unless explicitly requested.\n\nNote that this may not have any affect on IPv6 sockets.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["ttl",{"primitive":"u32"}]],"output":{"resolved_path":{"name":"io::Result","id":"1:2944:233","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:634":{"id":"0:634","crate_id":0,"name":null,"span":{"filename":"src/socket.rs","begin":[2096,0],"end":[2096,29]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2703:142","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UdpSocket","id":"1:3837:3042","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Socket","id":"0:114:1872","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:635:746"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2736-0:114:1872":{"id":"b:2:2736-0:114:1872","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2710:264","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2706:265","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Socket","id":"0:114:1872","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2739:135","2:2740:1621"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:607:2031":{"id":"0:607:2031","crate_id":0,"name":"with_buffers","span":{"filename":"src/lib.rs","begin":[697,4],"end":[700,5]},"visibility":"public","docs":"Set the mutable buffer(s) of the message.\n\nCorresponds to setting `msg_iov` and `msg_iovlen` on Unix and `lpBuffers`\nand `dwBufferCount` on Windows.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["bufs",{"borrowed_ref":{"lifetime":"'bufs","mutable":true,"type":{"slice":{"resolved_path":{"name":"MaybeUninitSlice","id":"0:554:1969","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:152:2615":{"id":"0:152:2615","crate_id":0,"name":"send_vectored","span":{"filename":"src/socket.rs","begin":[667,4],"end":[669,5]},"visibility":"public","docs":"Send data to the connected peer. Returns the amount of bytes written.","links":{},"attrs":["#[cfg(not(target_os = \"redox\"))]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["bufs",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"IoSlice","id":"1:8159:1815","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:2944:233","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:641:746":{"id":"0:641:746","crate_id":0,"name":"from","span":{"filename":"src/socket.rs","begin":[2099,0],"end":[2099,29]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["socket",{"resolved_path":{"name":"Socket","id":"0:114:1872","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"net::UdpSocket","id":"1:3837:3042","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:642":{"id":"0:642","crate_id":0,"name":null,"span":{"filename":"src/sys/unix.rs","begin":[371,0],"end":[386,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:9877:118","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"crate::Domain","id":"0:648:1886","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:643:719"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:605:1039":{"id":"0:605:1039","crate_id":0,"name":"new","span":{"filename":"src/lib.rs","begin":[675,4],"end":[681,5]},"visibility":"public","docs":"Create a new `MsgHdrMut` with all empty/zero fields.","links":{},"attrs":["#[allow(clippy::new_without_default)]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"MsgHdrMut","id":"0:595:2048","args":{"angle_bracketed":{"args":[{"lifetime":"'addr"},{"lifetime":"'bufs"},{"lifetime":"'control"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12755:2291":{"id":"2:12755:2291","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:11998:21478"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:59:2269":{"id":"0:59:2269","crate_id":0,"name":"is_unix","span":{"filename":"src/sockaddr.rs","begin":[204,4],"end":[206,5]},"visibility":"public","docs":"Returns true if this address is of a unix socket (for local interprocess communication),\ni.e. it is from the `AF_UNIX` family, false otherwise.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2736-0:672:1925":{"id":"b:2:2736-0:672:1925","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2710:264","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2706:265","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Protocol","id":"0:672:1925","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2739:135","2:2740:1621"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12775:33753":{"id":"2:12775:33753","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"2:12774:33751"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitAsciiWhitespace","id":"2:44185:14392","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2726-0:621:1878":{"id":"b:2:2726-0:621:1878","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2703:142","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2700:160","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"InterfaceIndexOrAddress","id":"0:621:1878","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2729:2293"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:530:1897":{"id":"0:530:1897","crate_id":0,"name":"for_address","span":{"filename":"src/lib.rs","begin":[222,4],"end":[227,5]},"visibility":"public","docs":"Returns the correct domain for `address`.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["address",{"resolved_path":{"name":"SocketAddr","id":"2:41939:1820","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Domain","id":"0:648:1886","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:32500:3864-0:616:1871":{"id":"a:2:32500:3864-0:616:1871","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32500:3864","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"SockAddr","id":"0:616:1871","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:5:687-0:616:1871":{"id":"b:5:687-0:616:1871","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2439:111","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:683:257","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"SockAddr","id":"0:616:1871","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:689:10536","5:690:10537","5:691:10538"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"5:5537:3879":{"id":"5:5537:3879","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7535:250"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["from",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7535:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12448:15137","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:585:1039":{"id":"0:585:1039","crate_id":0,"name":"new","span":{"filename":"src/lib.rs","begin":[603,4],"end":[609,5]},"visibility":"public","docs":"Create a new `MsgHdr` with all empty/zero fields.","links":{},"attrs":["#[allow(clippy::new_without_default)]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"MsgHdr","id":"0:575:2011","args":{"angle_bracketed":{"args":[{"lifetime":"'addr"},{"lifetime":"'bufs"},{"lifetime":"'control"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:215:2915":{"id":"0:215:2915","crate_id":0,"name":"join_multicast_v6","span":{"filename":"src/socket.rs","begin":[1586,4],"end":[1600,5]},"visibility":"public","docs":"Join a multicast group using `IPV6_ADD_MEMBERSHIP` option on this socket.\n\nSome OSs use `IPV6_JOIN_GROUP` for this option.\n\nThis function specifies a new multicast group for this socket to join.\nThe address must be a valid multicast address, and `interface` is the\nindex of the interface to join/leave (or 0 to indicate any interface).","links":{},"attrs":["#[cfg(not(target_os = \"nto\"))]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["multiaddr",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Ipv6Addr","id":"2:41773:2316","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],["interface",{"primitive":"u32"}]],"output":{"resolved_path":{"name":"io::Result","id":"1:2944:233","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:76:783":{"id":"0:76:783","crate_id":0,"name":"hash","span":{"filename":"src/sockaddr.rs","begin":[385,4],"end":[387,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["state",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"H"}}}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"H","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"std::hash::Hasher","id":"2:10101:154","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:133:34":{"id":"0:133:34","crate_id":0,"name":"type","span":{"filename":"src/socket.rs","begin":[342,4],"end":[344,5]},"visibility":"public","docs":"Returns the [`Type`] of this socket by checking the `SO_TYPE` option on\nthis socket.","links":{"`Type`":"0:660:1902"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:2944:233","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Type","id":"0:660:1902","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:620:456":{"id":"0:620:456","crate_id":0,"name":"clone","span":{"filename":"src/sockaddr.rs","begin":[20,9],"end":[20,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SockAddr","id":"0:616:1871","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:568":{"id":"0:568","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[417,0],"end":[421,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"DerefMut","id":"2:3111:1822","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MaybeUninitSlice","id":"0:554:1969","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["0:570:599"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:624:1754":{"id":"0:624:1754","crate_id":0,"name":"0","span":{"filename":"src/socket.rs","begin":[825,10],"end":[825,13]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"struct_field":{"primitive":"u32"}}},"0:628":{"id":"0:628","crate_id":0,"name":null,"span":{"filename":"src/socket.rs","begin":[822,9],"end":[822,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:9877:118","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"InterfaceIndexOrAddress","id":"0:621:1878","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:629:719"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:73:662":{"id":"0:73:662","crate_id":0,"name":"eq","span":{"filename":"src/sockaddr.rs","begin":[377,4],"end":[379,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:545:1933":{"id":"0:545:1933","crate_id":0,"name":"TCP","span":{"filename":"src/lib.rs","begin":[316,4],"end":[316,57]},"visibility":"public","docs":"Protocol corresponding to `TCP`.","links":{},"attrs":[],"deprecation":null,"inner":{"assoc_const":{"type":{"resolved_path":{"name":"Protocol","id":"0:672:1925","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"default":"_"}}},"0:217:2930":{"id":"0:217:2930","crate_id":0,"name":"multicast_hops_v6","span":{"filename":"src/socket.rs","begin":[1631,4],"end":[1636,5]},"visibility":"public","docs":"Get the value of the `IPV6_MULTICAST_HOPS` option for this socket\n\nFor more information about this option, see [`set_multicast_hops_v6`].\n\n[`set_multicast_hops_v6`]: Socket::set_multicast_hops_v6","links":{"Socket::set_multicast_hops_v6":"0:219:2935"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:2944:233","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u32"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:251:3038":{"id":"0:251:3038","crate_id":0,"name":"write_vectored","span":{"filename":"src/socket.rs","begin":[2060,4],"end":[2062,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(target_os = \"redox\"))]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["bufs",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"IoSlice","id":"1:8159:1815","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:2944:233","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2726-0:554:1969":{"id":"b:2:2726-0:554:1969","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2703:142","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2700:160","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"MaybeUninitSlice","id":"0:554:1969","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:2729:2293"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:177:2724":{"id":"0:177:2724","crate_id":0,"name":"set_recv_buffer_size","span":{"filename":"src/socket.rs","begin":[982,4],"end":[991,5]},"visibility":"public","docs":"Set value for the `SO_RCVBUF` option on this socket.\n\nChanges the size of the operating system's receive buffer associated\nwith the socket.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["size",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"io::Result","id":"1:2944:233","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:138:2527":{"id":"0:138:2527","crate_id":0,"name":"recv_out_of_band","span":{"filename":"src/socket.rs","begin":[431,4],"end":[433,5]},"visibility":"public","docs":"Receives out-of-band (OOB) data on the socket from the remote address to\nwhich it is connected by setting the `MSG_OOB` flag for this call.\n\nFor more information, see [`recv`], [`out_of_band_inline`].\n\n[`recv`]: Socket::recv\n[`out_of_band_inline`]: Socket::out_of_band_inline","links":{"Socket::recv":"0:137:2509","Socket::out_of_band_inline":"0:172:2707"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["buf",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"resolved_path":{"name":"MaybeUninit","id":"2:30596:1818","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u8"}}],"bindings":[]}}}}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:2944:233","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:651":{"id":"0:651","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[208,9],"end":[208,13]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"2:2943:116","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Domain","id":"0:648:1886","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:675":{"id":"0:675","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[305,9],"end":[305,13]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"2:2943:116","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Protocol","id":"0:672:1925","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:524-0:270:1873":{"id":"0:524-0:270:1873","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[188,0],"end":[188,25]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"sockref::SockRef","name":"SockRef","id":"0:270:1873","glob":false}}},"2:2732:746":{"id":"2:2732:746","crate_id":2,"name":"from","span":null,"visibility":"default","docs":"Returns the argument unchanged.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["t",{"generic":"T"}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:433:2313":{"id":"0:433:2313","crate_id":0,"name":"as_pathname","span":{"filename":"src/sys/unix.rs","begin":[807,4],"end":[814,5]},"visibility":"public","docs":"Returns this address as a `Path` reference if it is an `AF_UNIX`\npathname address, otherwise returns `None`.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:42002:201","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Path","id":"1:5240:210","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2948:254-0:648:1886":{"id":"a:2:2948:254-0:648:1886","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2948:254","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Domain","id":"0:648:1886","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:2:42130:10112-0:648:1886":{"id":"a:2:42130:10112-0:648:1886","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:42130:10112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Domain","id":"0:648:1886","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:695:662":{"id":"0:695:662","crate_id":0,"name":"eq","span":{"filename":"src/lib.rs","begin":[368,26],"end":[368,35]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"RecvFlags","id":"0:684:1959","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:32500:3864-0:554:1969":{"id":"a:2:32500:3864-0:554:1969","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32500:3864","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MaybeUninitSlice","id":"0:554:1969","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:538":{"id":"0:538","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[286,0],"end":[290,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2703:142","args":{"angle_bracketed":{"args":[{"type":{"primitive":"i32"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Type","id":"0:660:1902","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:539:746"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2726-0:575:2011":{"id":"b:2:2726-0:575:2011","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2703:142","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2700:160","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"MsgHdr","id":"0:575:2011","args":{"angle_bracketed":{"args":[{"lifetime":"'addr"},{"lifetime":"'bufs"},{"lifetime":"'control"}],"bindings":[]}}}},"items":["2:2729:2293"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:196:2849":{"id":"0:196:2849","crate_id":0,"name":"leave_ssm_v4","span":{"filename":"src/socket.rs","begin":[1355,4],"end":[1374,5]},"visibility":"public","docs":"Leave a multicast group using `IP_DROP_SOURCE_MEMBERSHIP` option on this socket.\n\nFor more information about this option, see [`join_ssm_v4`].\n\n[`join_ssm_v4`]: Socket::join_ssm_v4","links":{"Socket::join_ssm_v4":"0:195:2839"},"attrs":["#[cfg(not(any(target_os = \"dragonfly\", target_os = \"haiku\", target_os =\n\"netbsd\", target_os = \"openbsd\", target_os = \"redox\", target_os = \"fuchsia\",\ntarget_os = \"nto\", target_os = \"espidf\", target_os = \"vita\",)))]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["source",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Ipv4Addr","id":"2:41756:2310","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],["group",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Ipv4Addr","id":"2:41756:2310","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],["interface",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Ipv4Addr","id":"2:41756:2310","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:2944:233","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:648:1886":{"id":"0:648:1886","crate_id":0,"name":"Domain","span":{"filename":"src/lib.rs","begin":[209,0],"end":[209,25]},"visibility":"public","docs":"Specification of the communication domain for a socket.\n\nThis is a newtype wrapper around an integer which provides a nicer API in\naddition to an injection point for documentation. Convenience constants such\nas [`Domain::IPV4`], [`Domain::IPV6`], etc, are provided to avoid reaching\ninto libc for various constants.\n\nThis type is freely interconvertible with C's `int` type, however, if a raw\nvalue needs to be provided.","links":{"`Domain::IPV4`":"0:527:1888","`Domain::IPV6`":"0:528:1891"},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"tuple":[null]},"generics":{"params":[],"where_predicates":[]},"impls":["0:396","0:526","a:2:32418:244-0:648:1886","a:2:32500:3864-0:648:1886","a:2:42130:10112-0:648:1886","a:2:42131:10111-0:648:1886","a:2:2948:254-0:648:1886","b:2:2426-0:648:1886","b:2:2741-0:648:1886","b:2:2726-0:648:1886","b:2:2736-0:648:1886","b:2:3495-0:648:1886","b:2:2730-0:648:1886","b:2:2423-0:648:1886","b:5:687-0:648:1886","0:654","0:531","0:658","0:651","0:655","0:657","0:652","0:642","0:533"]}}},"0:670":{"id":"0:670","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[251,26],"end":[251,35]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"2:2486:208","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Type","id":"0:660:1902","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:671:662"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:42130:10112-0:696:1979":{"id":"a:2:42130:10112-0:696:1979","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:42130:10112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TcpKeepalive","id":"0:696:1979","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:12779:30004":{"id":"2:12779:30004","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"1:12034:452","self::pattern":"2:12443:21477"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12448:15137","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12829:35136":{"id":"2:12829:35136","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"2:12443:21477","`DoubleEndedIterator`":"2:7826:128","prim@char":"1:12034:452","str::rmatch_indices":"2:12832:35137"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"MatchIndices","id":"2:44052:14385","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12448:15137","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:533":{"id":"0:533","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[236,0],"end":[240,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2703:142","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Domain","id":"0:648:1886","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"libc::c_int","id":"20:44:1870","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:534:746"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12756:35129":{"id":"2:12756:35129","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"üóª‚ààüåè\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"üçî‚ààüåè\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:147:2593":{"id":"0:147:2593","crate_id":0,"name":"peek_from","span":{"filename":"src/socket.rs","begin":[618,4],"end":[620,5]},"visibility":"public","docs":"Receives data from the socket, without removing it from the queue.\n\nSuccessive calls return the same data. This is accomplished by passing\n`MSG_PEEK` as a flag to the underlying `recvfrom` system call.\n\nOn success, returns the number of bytes peeked and the address from\nwhence the data came.\n\n# Safety\n\n`peek_from` makes the same safety guarantees regarding the `buf`fer as\n[`recv`].\n\n# Note: Datagram Sockets\nFor datagram sockets, the behavior of this method when `buf` is smaller than\nthe datagram at the head of the receive queue differs between Windows and\nUnix-like platforms (Linux, macOS, BSDs, etc: colloquially termed \"*nix\").\n\nOn *nix platforms, the datagram is truncated to the length of `buf`.\n\nOn Windows, an error corresponding to `WSAEMSGSIZE` will be returned.\n\nFor consistency between platforms, be sure to provide a sufficiently large buffer to avoid\ntruncation; the exact size required depends on the underlying protocol.\n\nIf you just want to know the sender of the data, try [`peek_sender`].\n\n[`recv`]: Socket::recv\n[`peek_sender`]: Socket::peek_sender","links":{"Socket::recv":"0:137:2509","Socket::peek_sender":"0:148:2598"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["buf",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"resolved_path":{"name":"MaybeUninit","id":"2:30596:1818","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u8"}}],"bindings":[]}}}}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:2944:233","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"primitive":"usize"},{"resolved_path":{"name":"SockAddr","id":"0:616:1871","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:702":{"id":"0:702","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[426,16],"end":[426,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2439:111","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TcpKeepalive","id":"0:696:1979","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:703:456"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2741-0:114:1872":{"id":"b:2:2741-0:114:1872","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2700:160","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2710:264","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Socket","id":"0:114:1872","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2744:135","2:2745:1619"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:5:687-0:696:1979":{"id":"b:5:687-0:696:1979","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2439:111","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:683:257","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TcpKeepalive","id":"0:696:1979","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:689:10536","5:690:10537","5:691:10538"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:226:2958":{"id":"0:226:2958","crate_id":0,"name":"unicast_hops_v6","span":{"filename":"src/socket.rs","begin":[1712,4],"end":[1717,5]},"visibility":"public","docs":"Get the value of the `IPV6_UNICAST_HOPS` option for this socket.\n\nSpecifies the hop limit for ipv6 unicast packets","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:2944:233","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u32"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:581":{"id":"0:581","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[600,0],"end":[647,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(target_os = \"redox\"))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'addr","kind":{"lifetime":{"outlives":[]}}},{"name":"'bufs","kind":{"lifetime":{"outlives":[]}}},{"name":"'control","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"MsgHdr","id":"0:575:2011","args":{"angle_bracketed":{"args":[{"lifetime":"'addr"},{"lifetime":"'bufs"},{"lifetime":"'control"}],"bindings":[]}}}},"items":["0:585:1039","0:586:2025","0:587:2031","0:588:2037","0:589:2041"],"negative":false,"synthetic":false,"blanket_impl":null}}},"5:5540:35822":{"id":"5:5540:35822","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7535:250"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["count",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7535:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12448:15137","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12835:35138":{"id":"2:12835:35138","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12873:29909":{"id":"2:12873:29909","crate_id":2,"name":"trim_ascii","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing ASCII whitespace\nremoved.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\"\\r hello world\\n \".trim_ascii(), \"hello world\");\nassert_eq!(\"  \".trim_ascii(), \"\");\nassert_eq!(\"\".trim_ascii(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:895:36868"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:691":{"id":"0:691","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[368,22],"end":[368,24]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"2:2491:132","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RecvFlags","id":"0:684:1959","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12796:29146":{"id":"2:12796:29146","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"2:12443:21477","`DoubleEndedIterator`":"2:7826:128","prim@char":"1:12034:452","str::split_whitespace":"2:12774:33751","str::rsplit":"2:12802:29996"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Split","id":"2:43902:3824","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12448:15137","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12841:35141":{"id":"2:12841:35141","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  ◊¢◊ë◊®◊ô◊™\";\nassert!(Some('◊¢') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12782:29370":{"id":"2:12782:29370","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"prim@char":"1:12034:452","self::pattern":"2:12443:21477"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12448:15137","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2741-0:595:2048":{"id":"b:2:2741-0:595:2048","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2700:160","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2710:264","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"MsgHdrMut","id":"0:595:2048","args":{"angle_bracketed":{"args":[{"lifetime":"'addr"},{"lifetime":"'bufs"},{"lifetime":"'control"}],"bindings":[]}}}},"items":["2:2744:135","2:2745:1619"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12874:35149":{"id":"2:12874:35149","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"‚ù§\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"‚ù§\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"‚ù§\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"‚ù§\\n!\".escape_debug().to_string(), \"‚ù§\\\\n!\");\n```","links":{"`char::escape_debug`":"2:4670:35149"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDebug","id":"2:44201:14323","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:669":{"id":"0:669","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[251,26],"end":[251,35]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"2:32420:252","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Type","id":"0:660:1902","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:2948:254-0:575:2011":{"id":"a:2:2948:254-0:575:2011","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'addr","kind":{"lifetime":{"outlives":[]}}},{"name":"'bufs","kind":{"lifetime":{"outlives":[]}}},{"name":"'control","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2948:254","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MsgHdr","id":"0:575:2011","args":{"angle_bracketed":{"args":[{"lifetime":"'addr"},{"lifetime":"'bufs"},{"lifetime":"'control"}],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"2:12771:14394":{"id":"2:12771:14394","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"yÃÜ\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'yÃÜ'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:12034:452"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chars","id":"2:43872:14375","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:163:2664":{"id":"0:163:2664","crate_id":0,"name":"broadcast","span":{"filename":"src/socket.rs","begin":[841,4],"end":[846,5]},"visibility":"public","docs":"Get the value of the `SO_BROADCAST` option for this socket.\n\nFor more information about this option, see [`set_broadcast`].\n\n[`set_broadcast`]: Socket::set_broadcast","links":{"Socket::set_broadcast":"0:165:2669"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:2944:233","args":{"angle_bracketed":{"args":[{"type":{"primitive":"bool"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2736-0:616:1871":{"id":"b:2:2736-0:616:1871","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2710:264","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2706:265","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"SockAddr","id":"0:616:1871","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2739:135","2:2740:1621"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:62:2289":{"id":"0:62:2289","crate_id":0,"name":"as_socket_ipv6","span":{"filename":"src/sockaddr.rs","begin":[251,4],"end":[256,5]},"visibility":"public","docs":"Returns this address as a [`SocketAddrV6`] if it is in the `AF_INET6`\nfamily.","links":{"`SocketAddrV6`":"2:41981:2172"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:42002:201","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"SocketAddrV6","id":"2:41981:2172","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2736-0:554:1969":{"id":"b:2:2736-0:554:1969","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2710:264","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2706:265","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"MaybeUninitSlice","id":"0:554:1969","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:2739:135","2:2740:1621"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12876:16174":{"id":"2:12876:16174","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"‚ù§\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"‚ù§\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"‚ù§\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"2:4671:16174"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDefault","id":"2:44210:14317","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:511":{"id":"0:511","crate_id":0,"name":null,"span":{"filename":"src/sys/unix.rs","begin":[3044,0],"end":[3048,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"AsRawFd","id":"1:4740:3045","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"crate::Socket","id":"0:114:1872","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:512:3092"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12757:340":{"id":"2:12757:340","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"2:12758:2053","`u8`":"1:12051:1643"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2423-0:660:1902":{"id":"b:2:2423-0:660:1902","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32419:3863","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2417:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Type","id":"0:660:1902","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2425:3764"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:682":{"id":"0:682","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[305,26],"end":[305,35]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"2:2486:208","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Protocol","id":"0:672:1925","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:683:662"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:645:719":{"id":"0:645:719","crate_id":0,"name":"fmt","span":{"filename":"src/sys/unix.rs","begin":[479,0],"end":[513,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"std::fmt::Formatter","id":"2:9852:141","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"std::fmt::Result","id":"2:9833:233","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2948:254-0:696:1979":{"id":"a:2:2948:254-0:696:1979","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2948:254","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TcpKeepalive","id":"0:696:1979","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:12852:30005":{"id":"2:12852:30005","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12034:452","self::pattern":"2:12443:21477"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["suffix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42002:201","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12448:15137","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12448:15137","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12463:21475","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:660:1902":{"id":"0:660:1902","crate_id":0,"name":"Type","span":{"filename":"src/lib.rs","begin":[252,0],"end":[252,23]},"visibility":"public","docs":"Specification of communication semantics on a socket.\n\nThis is a newtype wrapper around an integer which provides a nicer API in\naddition to an injection point for documentation. Convenience constants such\nas [`Type::STREAM`], [`Type::DGRAM`], etc, are provided to avoid reaching\ninto libc for various constants.\n\nThis type is freely interconvertible with C's `int` type, however, if a raw\nvalue needs to be provided.","links":{"`Type::DGRAM`":"0:537:1909","`Type::STREAM`":"0:536:1905"},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"tuple":[null]},"generics":{"params":[],"where_predicates":[]},"impls":["0:535","a:2:32418:244-0:660:1902","a:2:32500:3864-0:660:1902","a:2:42130:10112-0:660:1902","a:2:42131:10111-0:660:1902","a:2:2948:254-0:660:1902","b:2:2426-0:660:1902","b:2:2741-0:660:1902","b:2:2726-0:660:1902","b:2:2736-0:660:1902","b:2:3495-0:660:1902","b:2:2730-0:660:1902","b:2:2423-0:660:1902","b:5:687-0:660:1902","0:663","0:669","0:670","0:666","0:644","0:664","0:540","0:667","0:538"]}}},"0:175:2719":{"id":"0:175:2719","crate_id":0,"name":"recv_buffer_size","span":{"filename":"src/socket.rs","begin":[971,4],"end":[976,5]},"visibility":"public","docs":"Get value for the `SO_RCVBUF` option on this socket.\n\nFor more information about this option, see [`set_recv_buffer_size`].\n\n[`set_recv_buffer_size`]: Socket::set_recv_buffer_size","links":{"Socket::set_recv_buffer_size":"0:177:2724"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:2944:233","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:128:2459":{"id":"0:128:2459","crate_id":0,"name":"accept","span":{"filename":"src/socket.rs","begin":[265,4],"end":[299,5]},"visibility":"public","docs":"Accept a new incoming connection from this listener.\n\nThis function uses `accept4(2)` on platforms that support it and\n`accept(2)` platforms that do not.\n\nThis function sets the same flags as in done for [`Socket::new`],\n[`Socket::accept_raw`] can be used if you don't want to set those flags.\n\nAdditional documentation can be found in manual of the OS:\n\n * DragonFly BSD: <https://man.dragonflybsd.org/?command=accept&section=2>\n * FreeBSD: <https://www.freebsd.org/cgi/man.cgi?query=accept&sektion=2>\n * Linux: <https://man7.org/linux/man-pages/man2/accept.2.html>\n * macOS: <https://developer.apple.com/library/archive/documentation/System/Conceptual/ManPages_iPhoneOS/man2/accept.2.html> (archived, actually for iOS)\n * NetBSD: <https://man.netbsd.org/accept.2>\n * OpenBSD: <https://man.openbsd.org/accept.2>\n * iOS: <https://developer.apple.com/library/archive/documentation/System/Conceptual/ManPages_iPhoneOS/man2/accept.2.html> (archived)\n * illumos: <https://illumos.org/man/3SOCKET/accept>\n * Windows: <https://docs.microsoft.com/en-us/windows/win32/api/winsock2/nf-winsock2-accept>","links":{"`Socket::accept_raw`":"0:129:2462","`Socket::new`":"0:121:1039"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:2944:233","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"resolved_path":{"name":"Socket","id":"0:114:1872","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},{"resolved_path":{"name":"SockAddr","id":"0:616:1871","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2423-0:270:1873":{"id":"b:2:2423-0:270:1873","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32419:3863","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2417:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"SockRef","id":"0:270:1873","args":{"angle_bracketed":{"args":[{"lifetime":"'s"}],"bindings":[]}}}},"items":["2:2425:3764"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:2948:254-0:684:1959":{"id":"a:2:2948:254-0:684:1959","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2948:254","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RecvFlags","id":"0:684:1959","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:126:2442":{"id":"0:126:2442","crate_id":0,"name":"connect_timeout","span":{"filename":"src/socket.rs","begin":[228,4],"end":[242,5]},"visibility":"public","docs":"Initiate a connection on this socket to the specified address, only\nonly waiting for a certain period of time for the connection to be\nestablished.\n\nUnlike many other methods on `Socket`, this does *not* correspond to a\nsingle C function. It sets the socket to nonblocking mode, connects via\nconnect(2), and then waits for the connection to complete with poll(2)\non Unix and select on Windows. When the connection is complete, the\nsocket is set back to blocking mode. On Unix, this will loop over\n`EINTR` errors.\n\n# Warnings\n\nThe non-blocking state of the socket is overridden by this function -\nit will be returned in blocking mode on success, and in an indeterminate\nstate on failure.\n\nIf the connection request times out, it may still be processing in the\nbackground - a second call to `connect` or `connect_timeout` may fail.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["addr",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"SockAddr","id":"0:616:1871","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],["timeout",{"resolved_path":{"name":"Duration","id":"2:44672:129","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:2944:233","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:194:2834":{"id":"0:194:2834","crate_id":0,"name":"leave_multicast_v4_n","span":{"filename":"src/socket.rs","begin":[1284,4],"end":[1298,5]},"visibility":"public","docs":"Leave a multicast group using `IP_DROP_MEMBERSHIP` option on this socket.\n\nFor more information about this option, see [`join_multicast_v4_n`].\n\n[`join_multicast_v4_n`]: Socket::join_multicast_v4_n","links":{"Socket::join_multicast_v4_n":"0:193:2829"},"attrs":["#[cfg(not(any(target_os = \"aix\", target_os = \"haiku\", target_os = \"illumos\",\ntarget_os = \"netbsd\", target_os = \"openbsd\", target_os = \"redox\", target_os =\n\"solaris\", target_os = \"nto\", target_os = \"espidf\", target_os = \"vita\",)))]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["multiaddr",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Ipv4Addr","id":"2:41756:2310","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],["interface",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"InterfaceIndexOrAddress","id":"0:621:1878","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:2944:233","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:687":{"id":"0:687","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[368,9],"end":[368,13]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"2:2943:116","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RecvFlags","id":"0:684:1959","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12820:30003":{"id":"2:12820:30003","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42002:201","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12448:15137","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12448:15137","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12463:21475","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2426-0:672:1925":{"id":"b:2:2426-0:672:1925","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32419:3863","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2420:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Protocol","id":"0:672:1925","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2428:27383"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:522-0:616:1871":{"id":"0:522-0:616:1871","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[186,0],"end":[186,27]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"sockaddr::SockAddr","name":"SockAddr","id":"0:616:1871","glob":false}}},"0:205:2874":{"id":"0:205:2874","crate_id":0,"name":"ttl","span":{"filename":"src/socket.rs","begin":[1464,4],"end":[1468,5]},"visibility":"public","docs":"Get the value of the `IP_TTL` option for this socket.\n\nFor more information about this option, see [`set_ttl`].\n\n[`set_ttl`]: Socket::set_ttl","links":{"Socket::set_ttl":"0:207:2887"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:2944:233","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u32"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:520:1836":{"id":"0:520:1836","crate_id":0,"name":"from_raw_fd","span":{"filename":"src/sys/unix.rs","begin":[3075,4],"end":[3077,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["fd",{"resolved_path":{"name":"c_int","id":"20:44:1870","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"crate::Socket","id":"0:114:1872","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:694":{"id":"0:694","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[368,26],"end":[368,35]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"2:2486:208","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RecvFlags","id":"0:684:1959","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:695:662"],"negative":false,"synthetic":false,"blanket_impl":null}}},"5:5536:35821":{"id":"5:5536:35821","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:281:10037","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"5:281:10037","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3495-0:114:1872":{"id":"b:2:3495-0:114:1872","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:32419:3863","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3493:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Socket","id":"0:114:1872","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3497:1634"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:209:2894":{"id":"0:209:2894","crate_id":0,"name":"tos","span":{"filename":"src/socket.rs","begin":[1509,4],"end":[1513,5]},"visibility":"public","docs":"Get the value of the `IP_TOS` option for this socket.\n\nFor more information about this option, see [`set_tos`].\n\nNOTE: <https://docs.microsoft.com/en-us/windows/win32/winsock/ipproto-ip-socket-options>\ndocuments that not all versions of windows support `IP_TOS`.\n\n[`set_tos`]: Socket::set_tos","links":{"Socket::set_tos":"0:208:2893"},"attrs":["#[cfg(not(any(target_os = \"fuchsia\", target_os = \"redox\", target_os =\n\"solaris\", target_os = \"illumos\",)))]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:2944:233","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u32"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:532:746":{"id":"0:532:746","crate_id":0,"name":"from","span":{"filename":"src/lib.rs","begin":[231,4],"end":[233,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["d",{"resolved_path":{"name":"c_int","id":"20:44:1870","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Domain","id":"0:648:1886","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:401:3154":{"id":"0:401:3154","crate_id":0,"name":"is_out_of_band","span":{"filename":"src/sys/unix.rs","begin":[564,4],"end":[566,5]},"visibility":"public","docs":"Check if the message contains out-of-band data.\n\nThis is useful for protocols where you receive out-of-band data\nmixed in with the normal data stream.\n\nOn Unix this corresponds to the `MSG_OOB` flag.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:140:2545":{"id":"0:140:2545","crate_id":0,"name":"recv_vectored","span":{"filename":"src/socket.rs","begin":[475,4],"end":[480,5]},"visibility":"public","docs":"Receives data on the socket from the remote address to which it is\nconnected. Unlike [`recv`] this allows passing multiple buffers.\n\nThe [`connect`] method will connect this socket to a remote address.\nThis method might fail if the socket is not connected.\n\nIn addition to the number of bytes read, this function returns the flags\nfor the received message. See [`RecvFlags`] for more information about\nthe returned flags.\n\nAdditional documentation can be found in manual of the OS:\n\n * DragonFly BSD: <https://man.dragonflybsd.org/?command=recvmsg&section=2>\n * FreeBSD: <https://www.freebsd.org/cgi/man.cgi?query=recvmsg&sektion=2>\n * Linux: <https://man7.org/linux/man-pages/man2/recvmsg.2.html>\n * macOS: <https://developer.apple.com/library/archive/documentation/System/Conceptual/ManPages_iPhoneOS/man2/recvmsg.2.html> (archived, actually for iOS)\n * NetBSD: <https://man.netbsd.org/recvmsg.2>\n * OpenBSD: <https://man.openbsd.org/recvmsg.2>\n * iOS: <https://developer.apple.com/library/archive/documentation/System/Conceptual/ManPages_iPhoneOS/man2/recvmsg.2.html> (archived)\n * illumos: <https://illumos.org/man/3SOCKET/recvmsg>\n * Windows: <https://docs.microsoft.com/en-us/windows/win32/api/winsock2/nf-winsock2-recvmsg>\n\n[`recv`]: Socket::recv\n[`connect`]: Socket::connect\n\n# Safety\n\nNormally casting a `IoSliceMut` to `MaybeUninitSlice` would be unsound,\nas that allows us to write uninitialised bytes to the buffer. However\nthis implementation promises to not write uninitialised bytes to the\n`bufs` and passes it directly to `recvmsg(2)` system call. This promise\nensures that this function can be called using `bufs` of type `&mut\n[IoSliceMut]`.\n\nNote that the [`io::Read::read_vectored`] implementation calls this\nfunction with `buf`s of type `&mut [IoSliceMut]`, allowing initialised\nbuffers to be used without using `unsafe`.","links":{"`RecvFlags`":"0:684:1959","Socket::recv":"0:137:2509","Socket::connect":"0:125:2422","`io::Read::read_vectored`":"1:3427:3037"},"attrs":["#[cfg(not(target_os = \"redox\"))]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["bufs",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"resolved_path":{"name":"MaybeUninitSlice","id":"0:554:1969","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:2944:233","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"primitive":"usize"},{"resolved_path":{"name":"RecvFlags","id":"0:684:1959","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:523-0:114:1872":{"id":"0:523-0:114:1872","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[187,0],"end":[187,23]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"socket::Socket","name":"Socket","id":"0:114:1872","glob":false}}},"b:2:2423-0:595:2048":{"id":"b:2:2423-0:595:2048","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32419:3863","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2417:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"MsgHdrMut","id":"0:595:2048","args":{"angle_bracketed":{"args":[{"lifetime":"'addr"},{"lifetime":"'bufs"},{"lifetime":"'control"}],"bindings":[]}}}},"items":["2:2425:3764"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:32500:3864-0:114:1872":{"id":"a:2:32500:3864-0:114:1872","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32500:3864","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Socket","id":"0:114:1872","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:12748:10477":{"id":"2:12748:10477","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:178:2728":{"id":"0:178:2728","crate_id":0,"name":"read_timeout","span":{"filename":"src/socket.rs","begin":[997,4],"end":[999,5]},"visibility":"public","docs":"Get value for the `SO_RCVTIMEO` option on this socket.\n\nIf the returned timeout is `None`, then `read` and `recv` calls will\nblock indefinitely.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:2944:233","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Option","id":"2:42002:201","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Duration","id":"2:44672:129","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:516:1837":{"id":"0:516:1837","crate_id":0,"name":"into_raw_fd","span":{"filename":"src/sys/unix.rs","begin":[3060,4],"end":[3062,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"c_int","id":"20:44:1870","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:436:2314":{"id":"0:436:2314","crate_id":0,"name":"as_abstract_namespace","span":{"filename":"src/sys/unix.rs","begin":[821,4],"end":[833,5]},"visibility":"public","docs":"Returns this address as a slice of bytes representing an abstract address if it is an\n`AF_UNIX` abstract address, otherwise returns `None`.\n\nAbstract addresses are a Linux extension, so this method returns `None` on all non-Linux\nplatforms.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:42002:201","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:44:2236":{"id":"0:44:2236","crate_id":0,"name":"try_init","span":{"filename":"src/sockaddr.rs","begin":[122,4],"end":[144,5]},"visibility":"public","docs":"Initialise a `SockAddr` by calling the function `init`.\n\nThe type of the address storage and length passed to the function `init`\nis OS/architecture specific.\n\nThe address is zeroed before `init` is called and is thus valid to\ndereference and read from. The length initialised to the maximum length\nof the storage.\n\n# Safety\n\nCaller must ensure that the address family and length match the type of\nstorage address. For example if `storage.ss_family` is set to `AF_INET`\nthe `storage` must be initialised as `sockaddr_in`, setting the content\nand length appropriately.\n\n# Examples\n\n```\n# fn main() -> std::io::Result<()> {\n# #[cfg(unix)] {\nuse std::io;\nuse std::os::unix::io::AsRawFd;\n\nuse socket2::{SockAddr, Socket, Domain, Type};\n\nlet socket = Socket::new(Domain::IPV4, Type::STREAM, None)?;\n\n// Initialise a `SocketAddr` byte calling `getsockname(2)`.\nlet (_, address) = unsafe {\n    SockAddr::try_init(|addr_storage, len| {\n        // The `getsockname(2)` system call will intiliase `storage` for\n        // us, setting `len` to the correct length.\n        if libc::getsockname(socket.as_raw_fd(), addr_storage.cast(), len) == -1 {\n            Err(io::Error::last_os_error())\n        } else {\n            Ok(())\n        }\n    })\n}?;\n# drop(address);\n# }\n# Ok(())\n# }\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["init",{"generic":"F"}]],"output":{"resolved_path":{"name":"io::Result","id":"1:2944:233","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"generic":"T"},{"resolved_path":{"name":"SockAddr","id":"0:616:1871","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"2:3132:140","args":{"parenthesized":{"inputs":[{"raw_pointer":{"mutable":true,"type":{"resolved_path":{"name":"sockaddr_storage","id":"20:1697:2181","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},{"raw_pointer":{"mutable":true,"type":{"resolved_path":{"name":"socklen_t","id":"20:1862:2182","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"output":{"resolved_path":{"name":"io::Result","id":"1:2944:233","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:527:1888":{"id":"0:527:1888","crate_id":0,"name":"IPV4","span":{"filename":"src/lib.rs","begin":[213,4],"end":[213,50]},"visibility":"public","docs":"Domain for IPv4 communication, corresponding to `AF_INET`.","links":{},"attrs":[],"deprecation":null,"inner":{"assoc_const":{"type":{"resolved_path":{"name":"Domain","id":"0:648:1886","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"default":"_"}}},"b:5:687-0:648:1886":{"id":"b:5:687-0:648:1886","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2439:111","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:683:257","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Domain","id":"0:648:1886","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:689:10536","5:690:10537","5:691:10538"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12763:29961":{"id":"2:12763:29961","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"üóª‚ààüåè\";\nunsafe {\n    assert_eq!(\"üóª\", v.get_unchecked(0..4));\n    assert_eq!(\"‚àà\", v.get_unchecked(4..7));\n    assert_eq!(\"üåè\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10530:246","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10530:246","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:621:1878":{"id":"0:621:1878","crate_id":0,"name":"InterfaceIndexOrAddress","span":{"filename":"src/socket.rs","begin":[823,0],"end":[828,1]},"visibility":"public","docs":"A local interface specified by its index or an address assigned to it.\n\n`Index(0)` and `Address(Ipv4Addr::UNSPECIFIED)` are equivalent and indicate\nthat an appropriate interface should be selected by the system.","links":{},"attrs":["#[cfg(not(any(target_os = \"haiku\", target_os = \"illumos\", target_os =\n\"netbsd\", target_os = \"redox\", target_os = \"solaris\",)))]"],"deprecation":null,"inner":{"enum":{"generics":{"params":[],"where_predicates":[]},"variants_stripped":false,"variants":["0:622:2654","0:625:2656"],"impls":["a:2:32418:244-0:621:1878","a:2:32500:3864-0:621:1878","a:2:42130:10112-0:621:1878","a:2:42131:10111-0:621:1878","a:2:2948:254-0:621:1878","b:2:2426-0:621:1878","b:2:2741-0:621:1878","b:2:2726-0:621:1878","b:2:2736-0:621:1878","b:2:3495-0:621:1878","b:2:2730-0:621:1878","b:2:2423-0:621:1878","0:628"]}}},"b:5:687-0:660:1902":{"id":"b:5:687-0:660:1902","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2439:111","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:683:257","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Type","id":"0:660:1902","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:689:10536","5:690:10537","5:691:10538"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:186:2758":{"id":"0:186:2758","crate_id":0,"name":"write_timeout","span":{"filename":"src/socket.rs","begin":[1068,4],"end":[1070,5]},"visibility":"public","docs":"Get value for the `SO_SNDTIMEO` option on this socket.\n\nIf the returned timeout is `None`, then `write` and `send` calls will\nblock indefinitely.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:2944:233","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Option","id":"2:42002:201","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Duration","id":"2:44672:129","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2736-0:621:1878":{"id":"b:2:2736-0:621:1878","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2710:264","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2706:265","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"InterfaceIndexOrAddress","id":"0:621:1878","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2739:135","2:2740:1621"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:550":{"id":"0:550","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[357,0],"end":[361,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2703:142","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Protocol","id":"0:672:1925","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"libc::c_int","id":"20:44:1870","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:551:746"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:148:2598":{"id":"0:148:2598","crate_id":0,"name":"peek_sender","span":{"filename":"src/socket.rs","begin":[628,4],"end":[630,5]},"visibility":"public","docs":"Retrieve the sender for the data at the head of the receive queue.\n\nThis is equivalent to calling [`peek_from`] with a zero-sized buffer,\nbut suppresses the `WSAEMSGSIZE` error on Windows.\n\n[`peek_from`]: Socket::peek_from","links":{"Socket::peek_from":"0:147:2593"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:2944:233","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"SockAddr","id":"0:616:1871","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:239:3035":{"id":"0:239:3035","crate_id":0,"name":"set_nodelay","span":{"filename":"src/socket.rs","begin":[2008,4],"end":[2017,5]},"visibility":"public","docs":"Set the value of the `TCP_NODELAY` option on this socket.\n\nIf set, this option disables the Nagle algorithm. This means that\nsegments are always sent as soon as possible, even if there is only a\nsmall amount of data. When not set, data is buffered until there is a\nsufficient amount to send out, thereby avoiding the frequent sending of\nsmall packets.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["nodelay",{"primitive":"bool"}]],"output":{"resolved_path":{"name":"io::Result","id":"1:2944:233","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2726-0:696:1979":{"id":"b:2:2726-0:696:1979","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2703:142","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2700:160","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"TcpKeepalive","id":"0:696:1979","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2729:2293"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12826:35135":{"id":"2:12826:35135","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"2:12443:21477","`DoubleEndedIterator`":"2:7826:128","prim@char":"1:12034:452","str::matches":"2:12823:3774"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatches","id":"2:44124:14389","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12448:15137","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12448:15137","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12463:21475","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2726-0:648:1886":{"id":"b:2:2726-0:648:1886","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2703:142","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2700:160","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Domain","id":"0:648:1886","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2729:2293"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:646":{"id":"0:646","crate_id":0,"name":null,"span":{"filename":"src/sys/unix.rs","begin":[515,0],"end":[539,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:9877:118","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"crate::Protocol","id":"0:672:1925","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:647:719"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:2948:254-0:672:1925":{"id":"a:2:2948:254-0:672:1925","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2948:254","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Protocol","id":"0:672:1925","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:537:1909":{"id":"0:537:1909","crate_id":0,"name":"DGRAM","span":{"filename":"src/lib.rs","begin":[263,4],"end":[263,50]},"visibility":"public","docs":"Type corresponding to `SOCK_DGRAM`.\n\nUsed for protocols such as UDP.","links":{},"attrs":[],"deprecation":null,"inner":{"assoc_const":{"type":{"resolved_path":{"name":"Type","id":"0:660:1902","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"default":"_"}}},"0:54:875":{"id":"0:54:875","crate_id":0,"name":"len","span":{"filename":"src/sockaddr.rs","begin":[177,4],"end":[179,5]},"visibility":"public","docs":"Returns the size of this address in bytes.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"socklen_t","id":"20:1862:2182","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:55:340":{"id":"0:55:340","crate_id":0,"name":"as_ptr","span":{"filename":"src/sockaddr.rs","begin":[182,4],"end":[184,5]},"visibility":"public","docs":"Returns a raw pointer to the address.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"resolved_path":{"name":"sockaddr","id":"20:1508:1864","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2426-0:648:1886":{"id":"b:2:2426-0:648:1886","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32419:3863","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2420:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Domain","id":"0:648:1886","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2428:27383"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:3495-0:696:1979":{"id":"b:2:3495-0:696:1979","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:32419:3863","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3493:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TcpKeepalive","id":"0:696:1979","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3497:1634"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:159:2619":{"id":"0:159:2619","crate_id":0,"name":"sendmsg","span":{"filename":"src/socket.rs","begin":[748,4],"end":[750,5]},"visibility":"public","docs":"Send a message on a socket using a message structure.\n\nAdditional documentation can be found in manual of the OS:\n\n * DragonFly BSD: <https://man.dragonflybsd.org/?command=sendmsg&section=2>\n * FreeBSD: <https://www.freebsd.org/cgi/man.cgi?query=sendmsg&sektion=2>\n * Linux: <https://man7.org/linux/man-pages/man2/sendmsg.2.html>\n * macOS: <https://developer.apple.com/library/archive/documentation/System/Conceptual/ManPages_iPhoneOS/man2/sendmsg.2.html> (archived, actually for iOS)\n * NetBSD: <https://man.netbsd.org/sendmsg.2>\n * OpenBSD: <https://man.openbsd.org/sendmsg.2>\n * iOS: <https://developer.apple.com/library/archive/documentation/System/Conceptual/ManPages_iPhoneOS/man2/sendmsg.2.html> (archived)\n * illumos: <https://illumos.org/man/3SOCKET/sendmsg>\n * Windows: <https://docs.microsoft.com/en-us/windows/win32/api/winsock2/nf-winsock2-sendmsg>","links":{},"attrs":["#[cfg(not(target_os = \"redox\"))]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["msg",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"MsgHdr","id":"0:575:2011","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"lifetime":"'_"},{"lifetime":"'_"}],"bindings":[]}}}}}}],["flags",{"resolved_path":{"name":"libc::c_int","id":"20:44:1870","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:2944:233","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:543:1927":{"id":"0:543:1927","crate_id":0,"name":"ICMPV4","span":{"filename":"src/lib.rs","begin":[310,4],"end":[310,61]},"visibility":"public","docs":"Protocol corresponding to `ICMPv4`.","links":{},"attrs":[],"deprecation":null,"inner":{"assoc_const":{"type":{"resolved_path":{"name":"Protocol","id":"0:672:1925","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"default":"_"}}},"b:2:2726-0:672:1925":{"id":"b:2:2726-0:672:1925","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2703:142","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2700:160","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Protocol","id":"0:672:1925","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2729:2293"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:232:2977":{"id":"0:232:2977","crate_id":0,"name":"recv_tclass_v6","span":{"filename":"src/socket.rs","begin":[1781,4],"end":[1786,5]},"visibility":"public","docs":"Get the value of the `IPV6_RECVTCLASS` option for this socket.\n\nFor more information about this option, see [`set_recv_tclass_v6`].\n\n[`set_recv_tclass_v6`]: Socket::set_recv_tclass_v6","links":{"Socket::set_recv_tclass_v6":"0:234:2984"},"attrs":["#[cfg(not(any(target_os = \"dragonfly\", target_os = \"fuchsia\", target_os =\n\"illumos\", target_os = \"netbsd\", target_os = \"openbsd\", target_os = \"redox\",\ntarget_os = \"solaris\", target_os = \"haiku\", target_os = \"espidf\", target_os =\n\"vita\",)))]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:2944:233","args":{"angle_bracketed":{"args":[{"type":{"primitive":"bool"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:208:2893":{"id":"0:208:2893","crate_id":0,"name":"set_tos","span":{"filename":"src/socket.rs","begin":[1491,4],"end":[1493,5]},"visibility":"public","docs":"Set the value of the `IP_TOS` option for this socket.\n\nThis value sets the type-of-service field that is used in every packet\nsent from this socket.\n\nNOTE: <https://docs.microsoft.com/en-us/windows/win32/winsock/ipproto-ip-socket-options>\ndocuments that not all versions of windows support `IP_TOS`.","links":{},"attrs":["#[cfg(not(any(target_os = \"fuchsia\", target_os = \"redox\", target_os =\n\"solaris\", target_os = \"illumos\",)))]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["tos",{"primitive":"u32"}]],"output":{"resolved_path":{"name":"io::Result","id":"1:2944:233","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2730-0:270:1873":{"id":"b:2:2730-0:270:1873","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2703:142","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"SockRef","id":"0:270:1873","args":{"angle_bracketed":{"args":[{"lifetime":"'s"}],"bindings":[]}}}},"items":["2:2732:746"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:42130:10112-0:660:1902":{"id":"a:2:42130:10112-0:660:1902","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:42130:10112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Type","id":"0:660:1902","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:154:2624":{"id":"0:154:2624","crate_id":0,"name":"send_out_of_band","span":{"filename":"src/socket.rs","begin":[694,4],"end":[696,5]},"visibility":"public","docs":"Sends out-of-band (OOB) data on the socket to connected peer\nby setting the `MSG_OOB` flag for this call.\n\nFor more information, see [`send`], [`out_of_band_inline`].\n\n[`send`]: Socket::send\n[`out_of_band_inline`]: Socket::out_of_band_inline","links":{"Socket::send":"0:150:2609","Socket::out_of_band_inline":"0:172:2707"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["buf",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:2944:233","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:3497:1634":{"id":"2:3497:1634","crate_id":2,"name":"type_id","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"TypeId","id":"2:39762:13666","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:201:2868":{"id":"0:201:2868","crate_id":0,"name":"set_multicast_loop_v4","span":{"filename":"src/socket.rs","begin":[1418,4],"end":[1427,5]},"visibility":"public","docs":"Set the value of the `IP_MULTICAST_LOOP` option for this socket.\n\nIf enabled, multicast packets will be looped back to the local socket.\nNote that this may not have any affect on IPv6 sockets.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["loop_v4",{"primitive":"bool"}]],"output":{"resolved_path":{"name":"io::Result","id":"1:2944:233","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2726-0:270:1873":{"id":"b:2:2726-0:270:1873","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2703:142","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2700:160","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"SockRef","id":"0:270:1873","args":{"angle_bracketed":{"args":[{"lifetime":"'s"}],"bindings":[]}}}},"items":["2:2729:2293"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12837:35139":{"id":"2:12837:35139","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  ◊¢◊ë◊®◊ô◊™  \";\nassert!(Some('◊¢') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2948:254-0:554:1969":{"id":"a:2:2948:254-0:554:1969","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2948:254","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MaybeUninitSlice","id":"0:554:1969","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:212:2904":{"id":"0:212:2904","crate_id":0,"name":"recv_tos","span":{"filename":"src/socket.rs","begin":[1564,4],"end":[1569,5]},"visibility":"public","docs":"Get the value of the `IP_RECVTOS` option for this socket.\n\nFor more information about this option, see [`set_recv_tos`].\n\n[`set_recv_tos`]: Socket::set_recv_tos","links":{"Socket::set_recv_tos":"0:211:2903"},"attrs":["#[cfg(not(any(target_os = \"aix\", target_os = \"dragonfly\", target_os =\n\"fuchsia\", target_os = \"illumos\", target_os = \"netbsd\", target_os = \"openbsd\",\ntarget_os = \"redox\", target_os = \"solaris\", target_os = \"haiku\", target_os =\n\"nto\", target_os = \"espidf\", target_os = \"vita\",)))]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:2944:233","args":{"angle_bracketed":{"args":[{"type":{"primitive":"bool"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:644":{"id":"0:644","crate_id":0,"name":null,"span":{"filename":"src/sys/unix.rs","begin":[479,0],"end":[513,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:9877:118","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"crate::Type","id":"0:660:1902","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:645:719"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2426-0:684:1959":{"id":"b:2:2426-0:684:1959","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32419:3863","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2420:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RecvFlags","id":"0:684:1959","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2428:27383"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:402":{"id":"0:402","crate_id":0,"name":null,"span":{"filename":"src/sys/unix.rs","begin":[570,0],"end":[580,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(target_os = \"redox\"))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:9877:118","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"crate::RecvFlags","id":"0:684:1959","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:403:719"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2730-0:616:1871":{"id":"b:2:2730-0:616:1871","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2703:142","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"SockAddr","id":"0:616:1871","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2732:746"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:633:746":{"id":"0:633:746","crate_id":0,"name":"from","span":{"filename":"src/socket.rs","begin":[2095,0],"end":[2095,31]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["socket",{"resolved_path":{"name":"net::TcpListener","id":"1:3735:3041","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Socket","id":"0:114:1872","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:614:719":{"id":"0:614:719","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[719,4],"end":[721,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["fmt",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"2:9852:141","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"2:9833:233","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:42131:10111-0:616:1871":{"id":"a:2:42131:10111-0:616:1871","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:42131:10111","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"SockAddr","id":"0:616:1871","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:2739:135":{"id":"2:2739:135","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"2:2710:264","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}}},"5:689:10536":{"id":"5:689:10536","crate_id":5,"name":"Owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"2:12752:35128":{"id":"2:12752:35128","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nIf `index` is greater than the length of the string, this returns the length of the string.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"‚ù§Ô∏èüß°üíõüíöüíôüíú\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"‚ù§Ô∏èüß°üíõ\");\n```","links":{"str::floor_char_boundary":"2:12750:35127"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:526":{"id":"0:526","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[211,0],"end":[228,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Domain","id":"0:648:1886","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:527:1888","0:528:1891","0:529:1894","0:530:1897"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:639:746":{"id":"0:639:746","crate_id":0,"name":"from","span":{"filename":"src/socket.rs","begin":[2098,0],"end":[2098,31]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["socket",{"resolved_path":{"name":"Socket","id":"0:114:1872","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"net::TcpListener","id":"1:3735:3041","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12868:28506":{"id":"2:12868:28506","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferr√∂s\".eq_ignore_ascii_case(\"FERR√∂S\"));\nassert!(!\"Ferr√∂s\".eq_ignore_ascii_case(\"FERR√ñS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:171:2702":{"id":"0:171:2702","crate_id":0,"name":"set_linger","span":{"filename":"src/socket.rs","begin":[928,4],"end":[931,5]},"visibility":"public","docs":"Set value for the `SO_LINGER` option on this socket.\n\nIf `linger` is not `None`, a close(2) or shutdown(2) will not return\nuntil all queued messages for the socket have been successfully sent or\nthe linger timeout has been reached. Otherwise, the call returns\nimmediately and the closing is done in the background. When the socket\nis closed as part of exit(2), it always lingers in the background.\n\n# Notes\n\nOn most OSs the duration only has a precision of seconds and will be\nsilently truncated.\n\nOn Apple platforms (e.g. macOS, iOS, etc) this uses `SO_LINGER_SEC`.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["linger",{"resolved_path":{"name":"Option","id":"2:42002:201","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Duration","id":"2:44672:129","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:2944:233","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:42130:10112-0:114:1872":{"id":"a:2:42130:10112-0:114:1872","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:42130:10112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Socket","id":"0:114:1872","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:151:2610":{"id":"0:151:2610","crate_id":0,"name":"send_with_flags","span":{"filename":"src/socket.rs","begin":[660,4],"end":[662,5]},"visibility":"public","docs":"Identical to [`send`] but allows for specification of arbitrary flags to the underlying\n`send` call.\n\n[`send`]: Socket::send","links":{"Socket::send":"0:150:2609"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["buf",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}],["flags",{"resolved_path":{"name":"c_int","id":"20:44:1870","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:2944:233","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12761:29960":{"id":"2:12761:29960","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:42004:198"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:42002:201","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10530:246","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10530:246","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:187:2762":{"id":"0:187:2762","crate_id":0,"name":"set_write_timeout","span":{"filename":"src/socket.rs","begin":[1076,4],"end":[1078,5]},"visibility":"public","docs":"Set value for the `SO_SNDTIMEO` option on this socket.\n\nIf `timeout` is `None`, then `write` and `send` calls will block\nindefinitely.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["duration",{"resolved_path":{"name":"Option","id":"2:42002:201","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Duration","id":"2:44672:129","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:2944:233","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:549:746":{"id":"0:549:746","crate_id":0,"name":"from","span":{"filename":"src/lib.rs","begin":[352,4],"end":[354,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["p",{"resolved_path":{"name":"c_int","id":"20:44:1870","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Protocol","id":"0:672:1925","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5555:28505":{"id":"5:5555:28505","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Gr√º√üe, J√ºrgen ‚ù§\";\n\nassert_eq!(\"gr√º√üe, j√ºrgen ‚ù§\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"2:12870:28508"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7535:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:573:1994":{"id":"0:573:1994","crate_id":0,"name":"with_time","span":{"filename":"src/lib.rs","begin":[489,4],"end":[494,5]},"visibility":"public","docs":"Set the amount of time after which TCP keepalive probes will be sent on\nidle connections.\n\nThis will set `TCP_KEEPALIVE` on macOS and iOS, and\n`TCP_KEEPIDLE` on all other Unix operating systems, except\nOpenBSD and Haiku which don't support any way to set this\noption. On Windows, this sets the value of the `tcp_keepalive`\nstruct's `keepalivetime` field.\n\nSome platforms specify this value in seconds, so sub-second\nspecifications may be omitted.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["time",{"resolved_path":{"name":"Duration","id":"2:44672:129","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:246:3036":{"id":"0:246:3036","crate_id":0,"name":"read","span":{"filename":"src/socket.rs","begin":[2040,4],"end":[2044,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["buf",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:2944:233","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12759:3395":{"id":"2:12759:3395","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"üóª‚ààüåè\");\n\nassert_eq!(Some(\"üóª\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:42004:198"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:42002:201","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10530:246","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10530:246","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:643:719":{"id":"0:643:719","crate_id":0,"name":"fmt","span":{"filename":"src/sys/unix.rs","begin":[371,0],"end":[386,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"std::fmt::Formatter","id":"2:9852:141","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"std::fmt::Result","id":"2:9833:233","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2736-0:696:1979":{"id":"b:2:2736-0:696:1979","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2710:264","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2706:265","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"TcpKeepalive","id":"0:696:1979","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2739:135","2:2740:1621"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12773:3164":{"id":"2:12773:3164","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"2:43888:3823","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:162":{"id":"0:162","crate_id":0,"name":null,"span":{"filename":"src/socket.rs","begin":[835,0],"end":[1079,1]},"visibility":"default","docs":"Socket options get/set using `SOL_SOCKET`.\n\nAdditional documentation can be found in documentation of the OS.\n* Linux: <https://man7.org/linux/man-pages/man7/socket.7.html>\n* Windows: <https://docs.microsoft.com/en-us/windows/win32/winsock/sol-socket-socket-options>","links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Socket","id":"0:114:1872","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:163:2664","0:165:2669","0:166:2674","0:167:2682","0:169:2686","0:170:2690","0:171:2702","0:172:2707","0:174:2715","0:175:2719","0:177:2724","0:178:2728","0:179:2734","0:180:2740","0:182:2746","0:183:2750","0:185:2755","0:186:2758","0:187:2762"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:72":{"id":"0:72","crate_id":0,"name":null,"span":{"filename":"src/sockaddr.rs","begin":[376,0],"end":[380,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"2:2486:208","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"SockAddr","id":"0:616:1871","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:73:662"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:432:3210":{"id":"0:432:3210","crate_id":0,"name":"as_unix","span":{"filename":"src/sys/unix.rs","begin":[798,4],"end":[803,5]},"visibility":"public","docs":"Returns this address as Unix `SocketAddr` if it is an `AF_UNIX` pathname\naddress, otherwise returns `None`.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:42002:201","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"std::os::unix::net::SocketAddr","id":"1:8276:1820","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:546:1936":{"id":"0:546:1936","crate_id":0,"name":"UDP","span":{"filename":"src/lib.rs","begin":[319,4],"end":[319,57]},"visibility":"public","docs":"Protocol corresponding to `UDP`.","links":{},"attrs":[],"deprecation":null,"inner":{"assoc_const":{"type":{"resolved_path":{"name":"Protocol","id":"0:672:1925","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"default":"_"}}},"2:12839:35140":{"id":"2:12839:35140","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  ◊¢◊ë◊®◊ô◊™  \";\nassert!(Some('◊™') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:551:746":{"id":"0:551:746","crate_id":0,"name":"from","span":{"filename":"src/lib.rs","begin":[358,4],"end":[360,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["p",{"resolved_path":{"name":"Protocol","id":"0:672:1925","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"c_int","id":"20:44:1870","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:167:2682":{"id":"0:167:2682","crate_id":0,"name":"keepalive","span":{"filename":"src/socket.rs","begin":[881,4],"end":[886,5]},"visibility":"public","docs":"Get the value of the `SO_KEEPALIVE` option on this socket.\n\nFor more information about this option, see [`set_keepalive`].\n\n[`set_keepalive`]: Socket::set_keepalive","links":{"Socket::set_keepalive":"0:169:2686"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:2944:233","args":{"angle_bracketed":{"args":[{"type":{"primitive":"bool"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:274":{"id":"0:274","crate_id":0,"name":null,"span":{"filename":"src/sockref.rs","begin":[71,0],"end":[77,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'s","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Deref","id":"2:3098:124","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"SockRef","id":"0:270:1873","args":{"angle_bracketed":{"args":[{"lifetime":"'s"}],"bindings":[]}}}},"items":["0:276:256","0:277:597"],"negative":false,"synthetic":false,"blanket_impl":null}}},"5:5535":{"id":"5:5535","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["5:5536:35821","5:5537:3879","5:5540:35822","5:5543:35823","5:5551:35824","5:5552:35825","5:5553:3848","5:5554:28504","5:5555:28505"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:52:2253":{"id":"0:52:2253","crate_id":0,"name":"family","span":{"filename":"src/sockaddr.rs","begin":[167,4],"end":[169,5]},"visibility":"public","docs":"Returns this address's family.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"sa_family_t","id":"20:637:2178","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:216:2925":{"id":"0:216:2925","crate_id":0,"name":"leave_multicast_v6","span":{"filename":"src/socket.rs","begin":[1610,4],"end":[1624,5]},"visibility":"public","docs":"Leave a multicast group using `IPV6_DROP_MEMBERSHIP` option on this socket.\n\nSome OSs use `IPV6_LEAVE_GROUP` for this option.\n\nFor more information about this option, see [`join_multicast_v6`].\n\n[`join_multicast_v6`]: Socket::join_multicast_v6","links":{"Socket::join_multicast_v6":"0:215:2915"},"attrs":["#[cfg(not(target_os = \"nto\"))]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["multiaddr",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Ipv6Addr","id":"2:41773:2316","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],["interface",{"primitive":"u32"}]],"output":{"resolved_path":{"name":"io::Result","id":"1:2944:233","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:518:746":{"id":"0:518:746","crate_id":0,"name":"from","span":{"filename":"src/sys/unix.rs","begin":[3067,4],"end":[3070,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["fd",{"resolved_path":{"name":"OwnedFd","id":"1:4798:3102","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"crate::Socket","id":"0:114:1872","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:622:2654":{"id":"0:622:2654","crate_id":0,"name":"Index","span":{"filename":"src/socket.rs","begin":[825,4],"end":[825,14]},"visibility":"default","docs":"An interface index.","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":{"tuple":["0:624:1754"]},"discriminant":null}}},"b:2:2736-0:660:1902":{"id":"b:2:2736-0:660:1902","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2710:264","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2706:265","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Type","id":"0:660:1902","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2739:135","2:2740:1621"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:32418:244-0:554:1969":{"id":"a:2:32418:244-0:554:1969","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:32418:244","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MaybeUninitSlice","id":"0:554:1969","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:281:746":{"id":"0:281:746","crate_id":0,"name":"from","span":{"filename":"src/sockref.rs","begin":[87,4],"end":[94,5]},"visibility":"default","docs":"The caller must ensure `S` is actually a socket.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["socket",{"borrowed_ref":{"lifetime":"'s","mutable":false,"type":{"generic":"S"}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:637:746":{"id":"0:637:746","crate_id":0,"name":"from","span":{"filename":"src/socket.rs","begin":[2097,0],"end":[2097,29]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["socket",{"resolved_path":{"name":"Socket","id":"0:114:1872","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"net::TcpStream","id":"1:3732:2379","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:509":{"id":"0:509","crate_id":0,"name":null,"span":{"filename":"src/sys/unix.rs","begin":[3036,0],"end":[3041,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"AsFd","id":"1:4821:3044","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"crate::Socket","id":"0:114:1872","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:510:3091"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2736-0:575:2011":{"id":"b:2:2736-0:575:2011","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2710:264","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2706:265","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"MsgHdr","id":"0:575:2011","args":{"angle_bracketed":{"args":[{"lifetime":"'addr"},{"lifetime":"'bufs"},{"lifetime":"'control"}],"bindings":[]}}}},"items":["2:2739:135","2:2740:1621"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2730-0:575:2011":{"id":"b:2:2730-0:575:2011","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2703:142","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"MsgHdr","id":"0:575:2011","args":{"angle_bracketed":{"args":[{"lifetime":"'addr"},{"lifetime":"'bufs"},{"lifetime":"'control"}],"bindings":[]}}}},"items":["2:2732:746"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:696:1979":{"id":"0:696:1979","crate_id":0,"name":"TcpKeepalive","span":{"filename":"src/lib.rs","begin":[427,0],"end":[449,1]},"visibility":"public","docs":"Configures a socket's TCP keepalive parameters.\n\nSee [`Socket::set_tcp_keepalive`].","links":{"`Socket::set_tcp_keepalive`":"0:236:3022"},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["0:571","a:2:32418:244-0:696:1979","a:2:32500:3864-0:696:1979","a:2:42130:10112-0:696:1979","a:2:42131:10111-0:696:1979","a:2:2948:254-0:696:1979","b:2:2426-0:696:1979","b:2:2741-0:696:1979","b:2:2726-0:696:1979","b:2:2736-0:696:1979","b:2:3495-0:696:1979","b:2:2730-0:696:1979","b:2:2423-0:696:1979","b:5:687-0:696:1979","0:700","0:702"]}}},"0:231:2973":{"id":"0:231:2973","crate_id":0,"name":"set_only_v6","span":{"filename":"src/socket.rs","begin":[1753,4],"end":[1762,5]},"visibility":"public","docs":"Set the value for the `IPV6_V6ONLY` option on this socket.\n\nIf this is set to `true` then the socket is restricted to sending and\nreceiving IPv6 packets only. In this case two IPv4 and IPv6 applications\ncan bind the same port at the same time.\n\nIf this is set to `false` then the socket can be used to send and\nreceive packets from an IPv4-mapped IPv6 address.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["only_v6",{"primitive":"bool"}]],"output":{"resolved_path":{"name":"io::Result","id":"1:2944:233","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:68":{"id":"0:68","crate_id":0,"name":null,"span":{"filename":"src/sockaddr.rs","begin":[309,0],"end":[350,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2703:142","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"SocketAddrV6","id":"2:41981:2172","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"SockAddr","id":"0:616:1871","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:69:746"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:122:2400":{"id":"0:122:2400","crate_id":0,"name":"new_raw","span":{"filename":"src/socket.rs","begin":[140,4],"end":[143,5]},"visibility":"public","docs":"Creates a new socket ready to be configured.\n\nThis function corresponds to `socket(2)` on Unix and `WSASocketW` on\nWindows and simply creates a new socket, no other configuration is done.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["domain",{"resolved_path":{"name":"Domain","id":"0:648:1886","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}],["ty",{"resolved_path":{"name":"Type","id":"0:660:1902","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}],["protocol",{"resolved_path":{"name":"Option","id":"2:42002:201","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Protocol","id":"0:672:1925","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:2944:233","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Socket","id":"0:114:1872","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2726-0:616:1871":{"id":"b:2:2726-0:616:1871","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2703:142","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2700:160","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"SockAddr","id":"0:616:1871","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2729:2293"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:32418:244-0:616:1871":{"id":"a:2:32418:244-0:616:1871","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:32418:244","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"SockAddr","id":"0:616:1871","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:654":{"id":"0:654","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[208,22],"end":[208,24]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralEq","id":"2:32445:251","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Domain","id":"0:648:1886","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:658":{"id":"0:658","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[208,26],"end":[208,35]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"2:2486:208","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Domain","id":"0:648:1886","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:659:662"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:32418:244-0:672:1925":{"id":"a:2:32418:244-0:672:1925","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:32418:244","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Protocol","id":"0:672:1925","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:403:719":{"id":"0:403:719","crate_id":0,"name":"fmt","span":{"filename":"src/sys/unix.rs","begin":[571,4],"end":[579,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"std::fmt::Formatter","id":"2:9852:141","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"std::fmt::Result","id":"2:9833:233","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2741-0:575:2011":{"id":"b:2:2741-0:575:2011","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2700:160","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2710:264","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"MsgHdr","id":"0:575:2011","args":{"angle_bracketed":{"args":[{"lifetime":"'addr"},{"lifetime":"'bufs"},{"lifetime":"'control"}],"bindings":[]}}}},"items":["2:2744:135","2:2745:1619"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12770:29986":{"id":"2:12770:29986","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\n```\nlet mut s = \"Per Martin-L√∂f\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-L√∂f\", last);\n}\nassert_eq!(\"PER Martin-L√∂f\", s);\n```","links":{"str::split_at":"2:12769:29985"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5552:35825":{"id":"5:5552:35825","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:281:10037","`String`":"5:7535:250"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:281:10037","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"5:7535:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:690":{"id":"0:690","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[368,22],"end":[368,24]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralEq","id":"2:32445:251","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RecvFlags","id":"0:684:1959","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:536:1905":{"id":"0:536:1905","crate_id":0,"name":"STREAM","span":{"filename":"src/lib.rs","begin":[258,4],"end":[258,52]},"visibility":"public","docs":"Type corresponding to `SOCK_STREAM`.\n\nUsed for protocols such as TCP.","links":{},"attrs":[],"deprecation":null,"inner":{"assoc_const":{"type":{"resolved_path":{"name":"Type","id":"0:660:1902","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"default":"_"}}},"2:2428:27383":{"id":"2:2428:27383","crate_id":2,"name":"borrow_mut","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:153:2616":{"id":"0:153:2616","crate_id":0,"name":"send_vectored_with_flags","span":{"filename":"src/socket.rs","begin":[678,4],"end":[684,5]},"visibility":"public","docs":"Identical to [`send_vectored`] but allows for specification of arbitrary\nflags to the underlying `sendmsg`/`WSASend` call.\n\nAdditional documentation can be found in manual of the OS:\n\n * DragonFly BSD: <https://man.dragonflybsd.org/?command=sendmsg&section=2>\n * FreeBSD: <https://www.freebsd.org/cgi/man.cgi?query=sendmsg&sektion=2>\n * Linux: <https://man7.org/linux/man-pages/man2/sendmsg.2.html>\n * macOS: <https://developer.apple.com/library/archive/documentation/System/Conceptual/ManPages_iPhoneOS/man2/sendmsg.2.html> (archived, actually for iOS)\n * NetBSD: <https://man.netbsd.org/sendmsg.2>\n * OpenBSD: <https://man.openbsd.org/sendmsg.2>\n * iOS: <https://developer.apple.com/library/archive/documentation/System/Conceptual/ManPages_iPhoneOS/man2/sendmsg.2.html> (archived)\n * illumos: <https://illumos.org/man/3SOCKET/sendmsg>\n * Windows: <https://docs.microsoft.com/en-us/windows/win32/api/winsock2/nf-winsock2-sendmsg>\n\n[`send_vectored`]: Socket::send_vectored","links":{"Socket::send_vectored":"0:152:2615"},"attrs":["#[cfg(not(target_os = \"redox\"))]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["bufs",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"IoSlice","id":"1:8159:1815","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}}],["flags",{"resolved_path":{"name":"c_int","id":"20:44:1870","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:2944:233","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:166:2674":{"id":"0:166:2674","crate_id":0,"name":"take_error","span":{"filename":"src/socket.rs","begin":[868,4],"end":[874,5]},"visibility":"public","docs":"Get the value of the `SO_ERROR` option on this socket.\n\nThis will retrieve the stored error in the underlying socket, clearing\nthe field in the process. This can be useful for checking errors between\ncalls.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:2944:233","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Option","id":"2:42002:201","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"io::Error","id":"1:2946:135","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:510:3091":{"id":"0:510:3091","crate_id":0,"name":"as_fd","span":{"filename":"src/sys/unix.rs","begin":[3037,4],"end":[3040,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"BorrowedFd","id":"1:8354:3101","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12846:35144":{"id":"2:12846:35144","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12034:452","self::pattern":"2:12443:21477"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12448:15137","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:56:2261":{"id":"0:56:2261","crate_id":0,"name":"as_storage","span":{"filename":"src/sockaddr.rs","begin":[187,4],"end":[189,5]},"visibility":"public","docs":"Retuns the address as the storage.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"sockaddr_storage","id":"20:1697:2181","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:253":{"id":"0:253","crate_id":0,"name":null,"span":{"filename":"src/socket.rs","begin":[2069,0],"end":[2082,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["write_fmt","by_ref","write_all","is_write_vectored","write_vectored","write_all_vectored"],"trait":{"name":"Write","id":"1:3482:2344","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"resolved_path":{"name":"Socket","id":"0:114:1872","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"items":["0:255:1832","0:256:3038","0:257:3039"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:135:2444":{"id":"0:135:2444","crate_id":0,"name":"set_nonblocking","span":{"filename":"src/socket.rs","begin":[385,4],"end":[387,5]},"visibility":"public","docs":"Moves this socket into or out of nonblocking mode.\n\n# Notes\n\nOn Unix this corresponds to calling `fcntl` (un)setting `O_NONBLOCK`.\n\nOn Windows this corresponds to calling `ioctlsocket` (un)setting\n`FIONBIO`.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["nonblocking",{"primitive":"bool"}]],"output":{"resolved_path":{"name":"io::Result","id":"1:2944:233","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12867:29904":{"id":"2:12867:29904","crate_id":2,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"2:39949:29897","Self::is_ascii":"2:12866:28502"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:42002:201","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"AsciiChar","id":"2:39949:29897","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2726-0:660:1902":{"id":"b:2:2726-0:660:1902","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2703:142","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2700:160","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Type","id":"0:660:1902","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2729:2293"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12749:35126":{"id":"2:12749:35126","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\nassert!(s.is_char_boundary(0));\n// start of `ËÄÅ`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `√∂`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `ËÄÅ`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12861:35147":{"id":"2:12861:35147","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12034:452","self::pattern":"2:12443:21477"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12448:15137","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12448:15137","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12463:21475","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:169:2686":{"id":"0:169:2686","crate_id":0,"name":"set_keepalive","span":{"filename":"src/socket.rs","begin":[891,4],"end":[900,5]},"visibility":"public","docs":"Set value for the `SO_KEEPALIVE` option on this socket.\n\nEnable sending of keep-alive messages on connection-oriented sockets.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["keepalive",{"primitive":"bool"}]],"output":{"resolved_path":{"name":"io::Result","id":"1:2944:233","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2423-0:554:1969":{"id":"b:2:2423-0:554:1969","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32419:3863","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2417:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"MaybeUninitSlice","id":"0:554:1969","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:2425:3764"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:66":{"id":"0:66","crate_id":0,"name":null,"span":{"filename":"src/sockaddr.rs","begin":[276,0],"end":[307,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2703:142","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"SocketAddrV4","id":"2:41962:2171","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"SockAddr","id":"0:616:1871","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:67:746"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12765:29962":{"id":"2:12765:29962","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"üóª‚ààüåè\");\nunsafe {\n    assert_eq!(\"üóª\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"‚àà\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"üåè\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10530:246","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10530:246","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:703:456":{"id":"0:703:456","crate_id":0,"name":"clone","span":{"filename":"src/lib.rs","begin":[426,16],"end":[426,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"TcpKeepalive","id":"0:696:1979","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:149:2535":{"id":"0:149:2535","crate_id":0,"name":"recvmsg","span":{"filename":"src/socket.rs","begin":[641,4],"end":[643,5]},"visibility":"public","docs":"Receive a message from a socket using a message structure.\n\nThis is not supported on Windows as calling `WSARecvMsg` (the `recvmsg`\nequivalent) is not straight forward on Windows. See\n<https://github.com/microsoft/Windows-classic-samples/blob/7cbd99ac1d2b4a0beffbaba29ea63d024ceff700/Samples/Win7Samples/netds/winsock/recvmsg/rmmc.cpp>\nfor an example (in C++).\n\nAdditional documentation can be found in manual of the OS:\n\n * DragonFly BSD: <https://man.dragonflybsd.org/?command=recvmsg&section=2>\n * FreeBSD: <https://www.freebsd.org/cgi/man.cgi?query=recvmsg&sektion=2>\n * Linux: <https://man7.org/linux/man-pages/man2/recvmsg.2.html>\n * macOS: <https://developer.apple.com/library/archive/documentation/System/Conceptual/ManPages_iPhoneOS/man2/recvmsg.2.html> (archived, actually for iOS)\n * NetBSD: <https://man.netbsd.org/recvmsg.2>\n * OpenBSD: <https://man.openbsd.org/recvmsg.2>\n * iOS: <https://developer.apple.com/library/archive/documentation/System/Conceptual/ManPages_iPhoneOS/man2/recvmsg.2.html> (archived)\n * illumos: <https://illumos.org/man/3SOCKET/recvmsg>\n * Windows: <https://docs.microsoft.com/en-us/windows/win32/api/winsock2/nf-winsock2-recvmsg>","links":{},"attrs":["#[cfg(all(unix, not(target_os = \"redox\")))]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["msg",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"MsgHdrMut","id":"0:595:2048","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"lifetime":"'_"},{"lifetime":"'_"}],"bindings":[]}}}}}}],["flags",{"resolved_path":{"name":"libc::c_int","id":"20:44:1870","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:2944:233","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:42130:10112-0:270:1873":{"id":"a:2:42130:10112-0:270:1873","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'s","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:42130:10112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"SockRef","id":"0:270:1873","args":{"angle_bracketed":{"args":[{"lifetime":"'s"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:2:32418:244-0:648:1886":{"id":"a:2:32418:244-0:648:1886","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:32418:244","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Domain","id":"0:648:1886","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:701:719":{"id":"0:701:719","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[426,9],"end":[426,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:9852:141","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:9833:233","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:425":{"id":"0:425","crate_id":0,"name":null,"span":{"filename":"src/sys/unix.rs","begin":[698,0],"end":[834,1]},"visibility":"default","docs":"Unix only API.","links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"crate::SockAddr","id":"0:616:1871","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:426:3195","0:432:3210","0:433:2313","0:436:2314"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:700":{"id":"0:700","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[426,9],"end":[426,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:9877:118","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TcpKeepalive","id":"0:696:1979","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:701:719"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:125:2422":{"id":"0:125:2422","crate_id":0,"name":"connect","span":{"filename":"src/socket.rs","begin":[205,4],"end":[207,5]},"visibility":"public","docs":"Initiate a connection on this socket to the specified address.\n\nThis function directly corresponds to the `connect(2)` function on\nWindows and Unix.\n\nAn error will be returned if `listen` or `connect` has already been\ncalled on this builder.\n\nAdditional documentation can be found in manual of the OS:\n\n * DragonFly BSD: <https://man.dragonflybsd.org/?command=connect&section=2>\n * FreeBSD: <https://www.freebsd.org/cgi/man.cgi?query=connect&sektion=2>\n * Linux: <https://man7.org/linux/man-pages/man2/connect.2.html>\n * macOS: <https://developer.apple.com/library/archive/documentation/System/Conceptual/ManPages_iPhoneOS/man2/connect.2.html> (archived, actually for iOS)\n * NetBSD: <https://man.netbsd.org/connect.2>\n * OpenBSD: <https://man.openbsd.org/connect.2>\n * iOS: <https://developer.apple.com/library/archive/documentation/System/Conceptual/ManPages_iPhoneOS/man2/connect.2.html> (archived)\n * illumos: <https://illumos.org/man/3SOCKET/connect>\n * Windows: <https://docs.microsoft.com/en-us/windows/win32/api/winsock2/nf-winsock2-connect>\n\n# Notes\n\nWhen using a non-blocking connect (by setting the socket into\nnon-blocking mode before calling this function), socket option can't be\nset *while connecting*. This will cause errors on Windows. Socket\noptions can be safely set before and after connecting the socket.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["address",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"SockAddr","id":"0:616:1871","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:2944:233","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:182:2746":{"id":"0:182:2746","crate_id":0,"name":"set_reuse_address","span":{"filename":"src/socket.rs","begin":[1026,4],"end":[1035,5]},"visibility":"public","docs":"Set value for the `SO_REUSEADDR` option on this socket.\n\nThis indicates that futher calls to `bind` may allow reuse of local\naddresses. For IPv4 sockets this means that a socket may bind even when\nthere's a socket already listening on this port.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["reuse",{"primitive":"bool"}]],"output":{"resolved_path":{"name":"io::Result","id":"1:2944:233","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12871:29907":{"id":"2:12871:29907","crate_id":2,"name":"trim_ascii_start","span":null,"visibility":"public","docs":"Returns a string slice with leading ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\" \\t \\u{3000}hello world\\n\".trim_ascii_start(), \"\\u{3000}hello world\\n\");\nassert_eq!(\"  \".trim_ascii_start(), \"\");\nassert_eq!(\"\".trim_ascii_start(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:895:36868"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:609:2042":{"id":"0:609:2042","crate_id":0,"name":"flags","span":{"filename":"src/lib.rs","begin":[712,4],"end":[714,5]},"visibility":"public","docs":"Returns the flags of the message.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"RecvFlags","id":"0:684:1959","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:57:2263":{"id":"0:57:2263","crate_id":0,"name":"is_ipv4","span":{"filename":"src/sockaddr.rs","begin":[192,4],"end":[194,5]},"visibility":"public","docs":"Returns true if this address is in the `AF_INET` (IPv4) family, false otherwise.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2423-0:684:1959":{"id":"b:2:2423-0:684:1959","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32419:3863","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2417:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RecvFlags","id":"0:684:1959","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2425:3764"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:3495-0:595:2048":{"id":"b:2:3495-0:595:2048","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:32419:3863","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3493:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MsgHdrMut","id":"0:595:2048","args":{"angle_bracketed":{"args":[{"lifetime":"'addr"},{"lifetime":"'bufs"},{"lifetime":"'control"}],"bindings":[]}}}},"items":["2:3497:1634"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:32418:244-0:621:1878":{"id":"a:2:32418:244-0:621:1878","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:32418:244","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"InterfaceIndexOrAddress","id":"0:621:1878","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:2:2948:254-0:660:1902":{"id":"a:2:2948:254-0:660:1902","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2948:254","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Type","id":"0:660:1902","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:155:2629":{"id":"0:155:2629","crate_id":0,"name":"send_to","span":{"filename":"src/socket.rs","begin":[703,4],"end":[705,5]},"visibility":"public","docs":"Sends data on the socket to the given address. On success, returns the\nnumber of bytes written.\n\nThis is typically used on UDP or datagram-oriented sockets.\n\nAdditional documentation can be found in manual of the OS:\n\n * DragonFly BSD: <https://man.dragonflybsd.org/?command=sendto&section=2>\n * FreeBSD: <https://www.freebsd.org/cgi/man.cgi?query=sendto&sektion=2>\n * Linux: <https://man7.org/linux/man-pages/man2/sendto.2.html>\n * macOS: <https://developer.apple.com/library/archive/documentation/System/Conceptual/ManPages_iPhoneOS/man2/sendto.2.html> (archived, actually for iOS)\n * NetBSD: <https://man.netbsd.org/sendto.2>\n * OpenBSD: <https://man.openbsd.org/sendto.2>\n * iOS: <https://developer.apple.com/library/archive/documentation/System/Conceptual/ManPages_iPhoneOS/man2/sendto.2.html> (archived)\n * illumos: <https://illumos.org/man/3SOCKET/sendto>\n * Windows: <https://docs.microsoft.com/en-us/windows/win32/api/winsock2/nf-winsock2-sendto>","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["buf",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}],["addr",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"SockAddr","id":"0:616:1871","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:2944:233","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:590":{"id":"0:590","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[650,0],"end":[654,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(target_os = \"redox\"))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'name","kind":{"lifetime":{"outlives":[]}}},{"name":"'bufs","kind":{"lifetime":{"outlives":[]}}},{"name":"'control","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:9877:118","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MsgHdr","id":"0:575:2011","args":{"angle_bracketed":{"args":[{"lifetime":"'name"},{"lifetime":"'bufs"},{"lifetime":"'control"}],"bindings":[]}}}},"items":["0:594:719"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:671:662":{"id":"0:671:662","crate_id":0,"name":"eq","span":{"filename":"src/lib.rs","begin":[251,26],"end":[251,35]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Type","id":"0:660:1902","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12832:35137":{"id":"2:12832:35137","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"2:12443:21477","`DoubleEndedIterator`":"2:7826:128","prim@char":"1:12034:452","str::match_indices":"2:12829:35136"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatchIndices","id":"2:44070:14386","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12448:15137","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12448:15137","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12463:21475","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:653:456":{"id":"0:653:456","crate_id":0,"name":"clone","span":{"filename":"src/lib.rs","begin":[208,15],"end":[208,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Domain","id":"0:648:1886","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:283:719":{"id":"0:283:719","crate_id":0,"name":"fmt","span":{"filename":"src/sockref.rs","begin":[116,4],"end":[122,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"2:9852:141","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"2:9833:233","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12774:33751":{"id":"2:12774:33751","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"2:12775:33753"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitWhitespace","id":"2:44176:14391","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:638":{"id":"0:638","crate_id":0,"name":null,"span":{"filename":"src/socket.rs","begin":[2098,0],"end":[2098,31]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2703:142","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Socket","id":"0:114:1872","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"net::TcpListener","id":"1:3735:3041","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:639:746"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:139:2520":{"id":"0:139:2520","crate_id":0,"name":"recv_with_flags","span":{"filename":"src/socket.rs","begin":[439,4],"end":[445,5]},"visibility":"public","docs":"Identical to [`recv`] but allows for specification of arbitrary flags to\nthe underlying `recv` call.\n\n[`recv`]: Socket::recv","links":{"Socket::recv":"0:137:2509"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["buf",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"resolved_path":{"name":"MaybeUninit","id":"2:30596:1818","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u8"}}],"bindings":[]}}}}}}}],["flags",{"resolved_path":{"name":"libc::c_int","id":"20:44:1870","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:2944:233","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:426:3195":{"id":"0:426:3195","crate_id":0,"name":"is_unnamed","span":{"filename":"src/sys/unix.rs","begin":[743,4],"end":[755,5]},"visibility":"public","docs":"Returns true if this address is an unnamed address from the `AF_UNIX` family (for local\ninterprocess communication), false otherwise.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:513":{"id":"0:513","crate_id":0,"name":null,"span":{"filename":"src/sys/unix.rs","begin":[3051,0],"end":[3056,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2703:142","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Socket","id":"0:114:1872","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"std::os::unix::io::OwnedFd","id":"1:4798:3102","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:514:746"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:49:1661":{"id":"0:49:1661","crate_id":0,"name":"unix","span":{"filename":"src/sockaddr.rs","begin":[149,4],"end":[154,5]},"visibility":"public","docs":"Constructs a `SockAddr` with the family `AF_UNIX` and the provided path.\n\nReturns an error if the path is longer than `SUN_LEN`.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["path",{"generic":"P"}]],"output":{"resolved_path":{"name":"io::Result","id":"1:2944:233","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"SockAddr","id":"0:616:1871","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"2:2694:78","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Path","id":"1:5240:210","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2741-0:672:1925":{"id":"b:2:2741-0:672:1925","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2700:160","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2710:264","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Protocol","id":"0:672:1925","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2744:135","2:2745:1619"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:594:719":{"id":"0:594:719","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[651,4],"end":[653,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["fmt",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"2:9852:141","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"2:9833:233","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:183:2750":{"id":"0:183:2750","crate_id":0,"name":"send_buffer_size","span":{"filename":"src/socket.rs","begin":[1042,4],"end":[1047,5]},"visibility":"public","docs":"Get the value of the `SO_SNDBUF` option on this socket.\n\nFor more information about this option, see [`set_send_buffer_size`].\n\n[`set_send_buffer_size`]: Socket::set_send_buffer_size","links":{"Socket::set_send_buffer_size":"0:185:2755"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:2944:233","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2426-0:554:1969":{"id":"b:2:2426-0:554:1969","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32419:3863","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2420:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"MaybeUninitSlice","id":"0:554:1969","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:2428:27383"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:150:2609":{"id":"0:150:2609","crate_id":0,"name":"send","span":{"filename":"src/socket.rs","begin":[652,4],"end":[654,5]},"visibility":"public","docs":"Sends data on the socket to a connected peer.\n\nThis is typically used on TCP sockets or datagram sockets which have\nbeen connected.\n\nOn success returns the number of bytes that were sent.\n\nAdditional documentation can be found in manual of the OS:\n\n * DragonFly BSD: <https://man.dragonflybsd.org/?command=send&section=2>\n * FreeBSD: <https://www.freebsd.org/cgi/man.cgi?query=send&sektion=2>\n * Linux: <https://man7.org/linux/man-pages/man2/send.2.html>\n * macOS: <https://developer.apple.com/library/archive/documentation/System/Conceptual/ManPages_iPhoneOS/man2/send.2.html> (archived, actually for iOS)\n * NetBSD: <https://man.netbsd.org/send.2>\n * OpenBSD: <https://man.openbsd.org/send.2>\n * iOS: <https://developer.apple.com/library/archive/documentation/System/Conceptual/ManPages_iPhoneOS/man2/send.2.html> (archived)\n * illumos: <https://illumos.org/man/3SOCKET/send>\n * Windows: <https://docs.microsoft.com/en-us/windows/win32/api/winsock2/nf-winsock2-send>","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["buf",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:2944:233","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:547:1939":{"id":"0:547:1939","crate_id":0,"name":"MPTCP","span":{"filename":"src/lib.rs","begin":[323,4],"end":[323,61]},"visibility":"public","docs":"Protocol corresponding to `MPTCP`.","links":{},"attrs":["#[cfg(target_os = \"linux\")]"],"deprecation":null,"inner":{"assoc_const":{"type":{"resolved_path":{"name":"Protocol","id":"0:672:1925","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"default":"_"}}},"0:207:2887":{"id":"0:207:2887","crate_id":0,"name":"set_ttl","span":{"filename":"src/socket.rs","begin":[1474,4],"end":[1476,5]},"visibility":"public","docs":"Set the value of the `IP_TTL` option for this socket.\n\nThis value sets the time-to-live field that is used in every packet sent\nfrom this socket.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["ttl",{"primitive":"u32"}]],"output":{"resolved_path":{"name":"io::Result","id":"1:2944:233","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:236:3022":{"id":"0:236:3022","crate_id":0,"name":"set_tcp_keepalive","span":{"filename":"src/socket.rs","begin":[1984,4],"end":[1987,5]},"visibility":"public","docs":"Set parameters configuring TCP keepalive probes for this socket.\n\nThe supported parameters depend on the operating system, and are\nconfigured using the [`TcpKeepalive`] struct. At a minimum, all systems\nsupport configuring the [keepalive time]: the time after which the OS\nwill start sending keepalive messages on an idle connection.\n\n[keepalive time]: TcpKeepalive::with_time\n\n# Notes\n\n* This will enable `SO_KEEPALIVE` on this socket, if it is not already\n  enabled.\n* On some platforms, such as Windows, any keepalive parameters *not*\n  configured by the `TcpKeepalive` struct passed to this function may be\n  overwritten with their default values. Therefore, this function should\n  either only be called once per socket, or the same parameters should\n  be passed every time it is called.\n\n# Examples\n\n```\nuse std::time::Duration;\n\nuse socket2::{Socket, TcpKeepalive, Domain, Type};\n\n# fn main() -> std::io::Result<()> {\nlet socket = Socket::new(Domain::IPV4, Type::STREAM, None)?;\nlet keepalive = TcpKeepalive::new()\n    .with_time(Duration::from_secs(4));\n    // Depending on the target operating system, we may also be able to\n    // configure the keepalive probe interval and/or the number of\n    // retries here as well.\n\nsocket.set_tcp_keepalive(&keepalive)?;\n# Ok(()) }\n```\n","links":{"`TcpKeepalive`":"0:696:1979","TcpKeepalive::with_time":"0:573:1994"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["params",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"TcpKeepalive","id":"0:696:1979","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:2944:233","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12768:35131":{"id":"2:12768:35131","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"1:12040:1538","crate::ops::IndexMut":"2:3161:3926","str::slice_unchecked":"2:12767:35130"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:61:2287":{"id":"0:61:2287","crate_id":0,"name":"as_socket_ipv4","span":{"filename":"src/sockaddr.rs","begin":[242,4],"end":[247,5]},"visibility":"public","docs":"Returns this address as a [`SocketAddrV4`] if it is in the `AF_INET`\nfamily.","links":{"`SocketAddrV4`":"2:41962:2171"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:42002:201","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"SocketAddrV4","id":"2:41962:2171","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:548":{"id":"0:548","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[351,0],"end":[355,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2703:142","args":{"angle_bracketed":{"args":[{"type":{"primitive":"i32"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Protocol","id":"0:672:1925","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:549:746"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2741-0:621:1878":{"id":"b:2:2741-0:621:1878","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2700:160","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2710:264","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"InterfaceIndexOrAddress","id":"0:621:1878","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2744:135","2:2745:1619"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:554:1969":{"id":"0:554:1969","crate_id":0,"name":"MaybeUninitSlice","span":{"filename":"src/lib.rs","begin":[390,0],"end":[390,59]},"visibility":"public","docs":"A version of [`IoSliceMut`] that allows the buffer to be uninitialised.\n\n[`IoSliceMut`]: std::io::IoSliceMut","links":{"std::io::IoSliceMut":"1:3443:2345"},"attrs":["#[repr(transparent)]"],"deprecation":null,"inner":{"struct":{"kind":{"tuple":[null]},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"impls":["0:561","a:2:32418:244-0:554:1969","a:2:32500:3864-0:554:1969","a:2:42130:10112-0:554:1969","a:2:42131:10111-0:554:1969","a:2:2948:254-0:554:1969","b:2:2426-0:554:1969","b:2:2741-0:554:1969","b:2:2726-0:554:1969","b:2:2736-0:554:1969","b:2:3495-0:554:1969","b:2:2730-0:554:1969","b:2:2423-0:554:1969","0:558","0:564","0:568"]}}},"2:12746":{"id":"2:12746","crate_id":2,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["2:12747:875","2:12748:10477","2:12749:35126","2:12750:35127","2:12752:35128","2:12755:2291","2:12756:35129","2:12757:340","2:12758:2053","2:12759:3395","2:12761:29960","2:12763:29961","2:12765:29962","2:12767:35130","2:12768:35131","2:12769:29985","2:12770:29986","2:12771:14394","2:12772:14404","2:12773:3164","2:12774:33751","2:12775:33753","2:12776:29147","2:12777:35132","2:12778:33764","2:12779:30004","2:12782:29370","2:12785:29372","2:12788:10516","2:12792:10476","2:12796:29146","2:12799:29994","2:12802:29996","2:12805:35133","2:12808:35134","2:12811:29998","2:12814:30000","2:12817:30002","2:12820:30003","2:12823:3774","2:12826:35135","2:12829:35136","2:12832:35137","2:12835:35138","2:12837:35139","2:12839:35140","2:12841:35141","2:12842:35142","2:12843:35143","2:12846:35144","2:12849:27439","2:12852:30005","2:12855:35145","2:12858:35146","2:12861:35147","2:12864:35148","2:12866:28502","2:12867:29904","2:12868:28506","2:12869:28507","2:12870:28508","2:12871:29907","2:12872:29908","2:12873:29909","2:12874:35149","2:12876:16174","2:12877:35150"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:566:256":{"id":"0:566:256","crate_id":0,"name":"Target","span":{"filename":"src/lib.rs","begin":[410,4],"end":[410,36]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"slice":{"resolved_path":{"name":"MaybeUninit","id":"2:30596:1818","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u8"}}],"bindings":[]}}}}}}}},"0:145:2573":{"id":"0:145:2573","crate_id":0,"name":"recv_from_vectored","span":{"filename":"src/socket.rs","begin":[561,4],"end":[566,5]},"visibility":"public","docs":"Receives data from the socket. Returns the amount of bytes read, the\n[`RecvFlags`] and the remote address from the data is coming. Unlike\n[`recv_from`] this allows passing multiple buffers.\n\nAdditional documentation can be found in manual of the OS:\n\n * DragonFly BSD: <https://man.dragonflybsd.org/?command=recvmsg&section=2>\n * FreeBSD: <https://www.freebsd.org/cgi/man.cgi?query=recvmsg&sektion=2>\n * Linux: <https://man7.org/linux/man-pages/man2/recvmsg.2.html>\n * macOS: <https://developer.apple.com/library/archive/documentation/System/Conceptual/ManPages_iPhoneOS/man2/recvmsg.2.html> (archived, actually for iOS)\n * NetBSD: <https://man.netbsd.org/recvmsg.2>\n * OpenBSD: <https://man.openbsd.org/recvmsg.2>\n * iOS: <https://developer.apple.com/library/archive/documentation/System/Conceptual/ManPages_iPhoneOS/man2/recvmsg.2.html> (archived)\n * illumos: <https://illumos.org/man/3SOCKET/recvmsg>\n * Windows: <https://docs.microsoft.com/en-us/windows/win32/api/winsock2/nf-winsock2-recvmsg>\n\n[`recv_from`]: Socket::recv_from\n\n# Safety\n\n`recv_from_vectored` makes the same safety guarantees regarding `bufs`\nas [`recv_vectored`].\n\n[`recv_vectored`]: Socket::recv_vectored","links":{"Socket::recv_vectored":"0:140:2545","`RecvFlags`":"0:684:1959","Socket::recv_from":"0:143:2565"},"attrs":["#[cfg(not(target_os = \"redox\"))]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["bufs",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"resolved_path":{"name":"MaybeUninitSlice","id":"0:554:1969","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:2944:233","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"primitive":"usize"},{"resolved_path":{"name":"RecvFlags","id":"0:684:1959","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},{"resolved_path":{"name":"SockAddr","id":"0:616:1871","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:134:2490":{"id":"0:134:2490","crate_id":0,"name":"try_clone","span":{"filename":"src/socket.rs","begin":[359,4],"end":[361,5]},"visibility":"public","docs":"Creates a new independently owned handle to the underlying socket.\n\n# Notes\n\nOn Unix this uses `F_DUPFD_CLOEXEC` and thus sets the `FD_CLOEXEC` on\nthe returned socket.\n\nOn Windows this uses `WSA_FLAG_NO_HANDLE_INHERIT` setting inheriting to\nfalse.\n\nOn Windows this can **not** be used function cannot be used on a\nQOS-enabled socket, see\n<https://docs.microsoft.com/en-us/windows/win32/api/winsock2/nf-winsock2-wsaduplicatesocketw>.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:2944:233","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Socket","id":"0:114:1872","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:144:2566":{"id":"0:144:2566","crate_id":0,"name":"recv_from_with_flags","span":{"filename":"src/socket.rs","begin":[538,4],"end":[544,5]},"visibility":"public","docs":"Identical to [`recv_from`] but allows for specification of arbitrary\nflags to the underlying `recvfrom` call.\n\n[`recv_from`]: Socket::recv_from","links":{"Socket::recv_from":"0:143:2565"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["buf",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"resolved_path":{"name":"MaybeUninit","id":"2:30596:1818","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u8"}}],"bindings":[]}}}}}}}],["flags",{"resolved_path":{"name":"c_int","id":"20:44:1870","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:2944:233","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"primitive":"usize"},{"resolved_path":{"name":"SockAddr","id":"0:616:1871","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:42":{"id":"0:42","crate_id":0,"name":null,"span":{"filename":"src/sockaddr.rs","begin":[27,0],"end":[265,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[allow(clippy::len_without_is_empty)]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"SockAddr","id":"0:616:1871","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:43:1039","0:44:2236","0:49:1661","0:51:2250","0:52:2253","0:53:2256","0:54:875","0:55:340","0:56:2261","0:57:2263","0:58:2266","0:59:2269","0:60:2272","0:61:2287","0:62:2289"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:197:2854":{"id":"0:197:2854","crate_id":0,"name":"multicast_if_v4","span":{"filename":"src/socket.rs","begin":[1381,4],"end":[1385,5]},"visibility":"public","docs":"Get the value of the `IP_MULTICAST_IF` option for this socket.\n\nFor more information about this option, see [`set_multicast_if_v4`].\n\n[`set_multicast_if_v4`]: Socket::set_multicast_if_v4","links":{"Socket::set_multicast_if_v4":"0:198:2858"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:2944:233","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Ipv4Addr","id":"2:41756:2310","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:616:1871":{"id":"0:616:1871","crate_id":0,"name":"SockAddr","span":{"filename":"src/sockaddr.rs","begin":[21,0],"end":[24,1]},"visibility":"public","docs":"The address of a socket.\n\n`SockAddr`s may be constructed directly to and from the standard library\n[`SocketAddr`], [`SocketAddrV4`], and [`SocketAddrV6`] types.","links":{"`SocketAddr`":"2:41939:1820","`SocketAddrV4`":"2:41962:2171","`SocketAddrV6`":"2:41981:2172"},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["0:42","0:425","a:2:32418:244-0:616:1871","a:2:32500:3864-0:616:1871","a:2:42130:10112-0:616:1871","a:2:42131:10111-0:616:1871","a:2:2948:254-0:616:1871","b:2:2426-0:616:1871","b:2:2741-0:616:1871","b:2:2726-0:616:1871","b:2:2736-0:616:1871","b:2:3495-0:616:1871","b:2:2730-0:616:1871","b:2:2423-0:616:1871","b:5:687-0:616:1871","0:74","0:75","0:72","0:70","0:619","0:66","0:64","0:68"]}}},"0:252:3039":{"id":"0:252:3039","crate_id":0,"name":"flush","span":{"filename":"src/socket.rs","begin":[2064,4],"end":[2066,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:2944:233","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2423-0:648:1886":{"id":"b:2:2423-0:648:1886","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32419:3863","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2417:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Domain","id":"0:648:1886","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2425:3764"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2730-0:684:1959":{"id":"b:2:2730-0:684:1959","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2703:142","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RecvFlags","id":"0:684:1959","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2732:746"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:693":{"id":"0:693","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[368,26],"end":[368,35]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"2:32420:252","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RecvFlags","id":"0:684:1959","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:563:1039":{"id":"0:563:1039","crate_id":0,"name":"new","span":{"filename":"src/lib.rs","begin":[404,4],"end":[406,5]},"visibility":"public","docs":"Creates a new `MaybeUninitSlice` wrapping a byte slice.\n\n# Panics\n\nPanics on Windows if the slice is larger than 4GB.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["buf",{"borrowed_ref":{"lifetime":"'a","mutable":true,"type":{"slice":{"resolved_path":{"name":"MaybeUninit","id":"2:30596:1818","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u8"}}],"bindings":[]}}}}}}}]],"output":{"resolved_path":{"name":"MaybeUninitSlice","id":"0:554:1969","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:558":{"id":"0:558","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[392,0],"end":[396,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:9877:118","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MaybeUninitSlice","id":"0:554:1969","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["0:560:719"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:235":{"id":"0:235","crate_id":0,"name":null,"span":{"filename":"src/socket.rs","begin":[1822,0],"end":[2018,1]},"visibility":"default","docs":"Socket options for TCP sockets, get/set using `IPPROTO_TCP`.\n\nAdditional documentation can be found in documentation of the OS.\n* Linux: <https://man7.org/linux/man-pages/man7/tcp.7.html>\n* Windows: <https://docs.microsoft.com/en-us/windows/win32/winsock/ipproto-tcp-socket-options>","links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Socket","id":"0:114:1872","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:236:3022","0:237:3027","0:239:3035"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:3495-0:672:1925":{"id":"b:2:3495-0:672:1925","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:32419:3863","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3493:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Protocol","id":"0:672:1925","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3497:1634"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12864:35148":{"id":"2:12864:35148","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"2:12404:134","`FromStr`":"2:12403:3974"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:42149:233","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"FromStr","id":"2:12403:3974","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"2:12403:3974","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:32500:3864-0:270:1873":{"id":"a:2:32500:3864-0:270:1873","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'s","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32500:3864","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"SockRef","id":"0:270:1873","args":{"angle_bracketed":{"args":[{"lifetime":"'s"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:625:2656":{"id":"0:625:2656","crate_id":0,"name":"Address","span":{"filename":"src/socket.rs","begin":[827,4],"end":[827,21]},"visibility":"default","docs":"An address assigned to an interface.","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":{"tuple":["0:627:1754"]},"discriminant":null}}},"0:191:2812":{"id":"0:191:2812","crate_id":0,"name":"join_multicast_v4","span":{"filename":"src/socket.rs","begin":[1205,4],"end":[1211,5]},"visibility":"public","docs":"Join a multicast group using `IP_ADD_MEMBERSHIP` option on this socket.\n\nThis function specifies a new multicast group for this socket to join.\nThe address must be a valid multicast address, and `interface` is the\naddress of the local interface with which the system should join the\nmulticast group. If it's [`Ipv4Addr::UNSPECIFIED`] (`INADDR_ANY`) then\nan appropriate interface is chosen by the system.","links":{"`Ipv4Addr::UNSPECIFIED`":"2:8332:3286"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["multiaddr",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Ipv4Addr","id":"2:41756:2310","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],["interface",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Ipv4Addr","id":"2:41756:2310","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:2944:233","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:199:2862":{"id":"0:199:2862","crate_id":0,"name":"multicast_loop_v4","span":{"filename":"src/socket.rs","begin":[1407,4],"end":[1412,5]},"visibility":"public","docs":"Get the value of the `IP_MULTICAST_LOOP` option for this socket.\n\nFor more information about this option, see [`set_multicast_loop_v4`].\n\n[`set_multicast_loop_v4`]: Socket::set_multicast_loop_v4","links":{"Socket::set_multicast_loop_v4":"0:201:2868"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:2944:233","args":{"angle_bracketed":{"args":[{"type":{"primitive":"bool"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2730-0:648:1886":{"id":"b:2:2730-0:648:1886","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2703:142","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Domain","id":"0:648:1886","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2732:746"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:2745:1619":{"id":"2:2745:1619","crate_id":2,"name":"try_from","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["value",{"generic":"U"}]],"output":{"resolved_path":{"name":"Result","id":"2:42149:233","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"T"},"trait":{"name":"TryFrom","id":"2:2710:264","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:156:2630":{"id":"0:156:2630","crate_id":0,"name":"send_to_with_flags","span":{"filename":"src/socket.rs","begin":[711,4],"end":[718,5]},"visibility":"public","docs":"Identical to [`send_to`] but allows for specification of arbitrary flags\nto the underlying `sendto` call.\n\n[`send_to`]: Socket::send_to","links":{"Socket::send_to":"0:155:2629"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["buf",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}],["addr",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"SockAddr","id":"0:616:1871","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],["flags",{"resolved_path":{"name":"c_int","id":"20:44:1870","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:2944:233","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2948:254-0:621:1878":{"id":"a:2:2948:254-0:621:1878","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2948:254","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"InterfaceIndexOrAddress","id":"0:621:1878","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2736-0:648:1886":{"id":"b:2:2736-0:648:1886","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2710:264","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2706:265","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Domain","id":"0:648:1886","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2739:135","2:2740:1621"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2726-0:114:1872":{"id":"b:2:2726-0:114:1872","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2703:142","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2700:160","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Socket","id":"0:114:1872","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2729:2293"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:575:2011":{"id":"0:575:2011","crate_id":0,"name":"MsgHdr","span":{"filename":"src/lib.rs","begin":[593,0],"end":[597,1]},"visibility":"public","docs":"Configuration of a `sendmsg(2)` system call.\n\nThis wraps `msghdr` on Unix and `WSAMSG` on Windows. Also see [`MsgHdrMut`]\nfor the variant used by `recvmsg(2)`.","links":{"`MsgHdrMut`":"0:595:2048"},"attrs":["#[cfg(not(target_os = \"redox\"))]"],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'addr","kind":{"lifetime":{"outlives":[]}}},{"name":"'bufs","kind":{"lifetime":{"outlives":[]}}},{"name":"'control","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"impls":["0:581","a:2:32418:244-0:575:2011","a:2:32500:3864-0:575:2011","a:2:42130:10112-0:575:2011","a:2:42131:10111-0:575:2011","a:2:2948:254-0:575:2011","b:2:2426-0:575:2011","b:2:2741-0:575:2011","b:2:2726-0:575:2011","b:2:2736-0:575:2011","b:2:3495-0:575:2011","b:2:2730-0:575:2011","b:2:2423-0:575:2011","0:590"]}}},"0:589:2041":{"id":"0:589:2041","crate_id":0,"name":"with_flags","span":{"filename":"src/lib.rs","begin":[643,4],"end":[646,5]},"visibility":"public","docs":"Set the flags of the message.\n\nCorresponds to setting `msg_flags` on Unix and `dwFlags` on Windows.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["flags",{"resolved_path":{"name":"libc::c_int","id":"20:44:1870","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:663":{"id":"0:663","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[251,9],"end":[251,13]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"2:2943:116","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Type","id":"0:660:1902","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:42131:10111-0:684:1959":{"id":"a:2:42131:10111-0:684:1959","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:42131:10111","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RecvFlags","id":"0:684:1959","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:552":{"id":"0:552","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[372,0],"end":[384,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(target_os = \"redox\"))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"RecvFlags","id":"0:684:1959","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:553:1965"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:32500:3864-0:621:1878":{"id":"a:2:32500:3864-0:621:1878","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32500:3864","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"InterfaceIndexOrAddress","id":"0:621:1878","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:228:2961":{"id":"0:228:2961","crate_id":0,"name":"set_unicast_hops_v6","span":{"filename":"src/socket.rs","begin":[1722,4],"end":[1731,5]},"visibility":"public","docs":"Set the value for the `IPV6_UNICAST_HOPS` option on this socket.\n\nSpecifies the hop limit for ipv6 unicast packets","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["hops",{"primitive":"u32"}]],"output":{"resolved_path":{"name":"io::Result","id":"1:2944:233","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3495-0:575:2011":{"id":"b:2:3495-0:575:2011","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:32419:3863","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3493:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MsgHdr","id":"0:575:2011","args":{"angle_bracketed":{"args":[{"lifetime":"'addr"},{"lifetime":"'bufs"},{"lifetime":"'control"}],"bindings":[]}}}},"items":["2:3497:1634"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2730-0:696:1979":{"id":"b:2:2730-0:696:1979","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2703:142","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"TcpKeepalive","id":"0:696:1979","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2732:746"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:561":{"id":"0:561","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[398,0],"end":[407,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"MaybeUninitSlice","id":"0:554:1969","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["0:563:1039"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:172:2707":{"id":"0:172:2707","crate_id":0,"name":"out_of_band_inline","span":{"filename":"src/socket.rs","begin":[940,4],"end":[945,5]},"visibility":"public","docs":"Get value for the `SO_OOBINLINE` option on this socket.\n\nFor more information about this option, see [`set_out_of_band_inline`].\n\n[`set_out_of_band_inline`]: Socket::set_out_of_band_inline","links":{"Socket::set_out_of_band_inline":"0:174:2715"},"attrs":["#[cfg(not(target_os = \"redox\"))]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:2944:233","args":{"angle_bracketed":{"args":[{"type":{"primitive":"bool"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:553:1965":{"id":"0:553:1965","crate_id":0,"name":"is_truncated","span":{"filename":"src/lib.rs","begin":[381,4],"end":[383,5]},"visibility":"public","docs":"Check if the message contains a truncated datagram.\n\nThis flag is only used for datagram-based sockets,\nnot for stream sockets.\n\nOn Unix this corresponds to the `MSG_TRUNC` flag.\nOn Windows this corresponds to the `WSAEMSGSIZE` error code.","links":{},"attrs":["#[cfg(not(target_os = \"espidf\"))]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:129:2462":{"id":"0:129:2462","crate_id":0,"name":"accept_raw","span":{"filename":"src/socket.rs","begin":[305,4],"end":[307,5]},"visibility":"public","docs":"Accept a new incoming connection from this listener.\n\nThis function directly corresponds to the `accept(2)` function on\nWindows and Unix.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:2944:233","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"resolved_path":{"name":"Socket","id":"0:114:1872","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},{"resolved_path":{"name":"SockAddr","id":"0:616:1871","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:32418:244-0:270:1873":{"id":"a:2:32418:244-0:270:1873","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'s","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:32418:244","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"SockRef","id":"0:270:1873","args":{"angle_bracketed":{"args":[{"lifetime":"'s"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:170:2690":{"id":"0:170:2690","crate_id":0,"name":"linger","span":{"filename":"src/socket.rs","begin":[907,4],"end":[912,5]},"visibility":"public","docs":"Get the value of the `SO_LINGER` option on this socket.\n\nFor more information about this option, see [`set_linger`].\n\n[`set_linger`]: Socket::set_linger","links":{"Socket::set_linger":"0:171:2702"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:2944:233","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Option","id":"2:42002:201","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Duration","id":"2:44672:129","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2423-0:616:1871":{"id":"b:2:2423-0:616:1871","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32419:3863","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2417:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"SockAddr","id":"0:616:1871","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2425:3764"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2730-0:114:1872":{"id":"b:2:2730-0:114:1872","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2703:142","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Socket","id":"0:114:1872","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2732:746"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:222:2945":{"id":"0:222:2945","crate_id":0,"name":"set_multicast_if_v6","span":{"filename":"src/socket.rs","begin":[1671,4],"end":[1680,5]},"visibility":"public","docs":"Set the value of the `IPV6_MULTICAST_IF` option for this socket.\n\nSpecifies the interface to use for routing multicast packets. Unlike\nipv4, this is generally required in ipv6 contexts where network routing\nprefixes may overlap.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["interface",{"primitive":"u32"}]],"output":{"resolved_path":{"name":"io::Result","id":"1:2944:233","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:679":{"id":"0:679","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[305,22],"end":[305,24]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"2:2491:132","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Protocol","id":"0:672:1925","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:3495-0:554:1969":{"id":"b:2:3495-0:554:1969","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:32419:3863","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3493:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MaybeUninitSlice","id":"0:554:1969","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:3497:1634"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:42131:10111-0:648:1886":{"id":"a:2:42131:10111-0:648:1886","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:42131:10111","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Domain","id":"0:648:1886","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:2:32418:244-0:696:1979":{"id":"a:2:32418:244-0:696:1979","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:32418:244","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TcpKeepalive","id":"0:696:1979","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:12799:29994":{"id":"2:12799:29994","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"1:12034:452","self::pattern":"2:12443:21477"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitInclusive","id":"2:12259:10583","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12448:15137","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5543:35823":{"id":"5:5543:35823","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Œ£\";\n\nassert_eq!(\"œÉ\", sigma.to_lowercase());\n\n// but at the end of a word, it's œÇ, not œÉ:\nlet odysseus = \"·ΩàŒîŒ•Œ£Œ£ŒïŒéŒ£\";\n\nassert_eq!(\"·ΩÄŒ¥œÖœÉœÉŒµœçœÇ\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"ÂÜúÂéÜÊñ∞Âπ¥\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7535:250"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7535:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5551:35824":{"id":"5:5551:35824","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"ÂÜúÂéÜÊñ∞Âπ¥\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tsch√º√ü\";\n\nassert_eq!(\"TSCH√úSS\", s.to_uppercase());\n```","links":{"`String`":"5:7535:250"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7535:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5553:3848":{"id":"5:5553:3848","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7535:250"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7535:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2948:254-0:114:1872":{"id":"a:2:2948:254-0:114:1872","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2948:254","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Socket","id":"0:114:1872","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:255:1832":{"id":"0:255:1832","crate_id":0,"name":"write","span":{"filename":"src/socket.rs","begin":[2070,4],"end":[2072,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["buf",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:2944:233","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2741-0:684:1959":{"id":"b:2:2741-0:684:1959","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2700:160","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2710:264","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RecvFlags","id":"0:684:1959","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2744:135","2:2745:1619"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:529:1894":{"id":"0:529:1894","crate_id":0,"name":"UNIX","span":{"filename":"src/lib.rs","begin":[219,4],"end":[219,50]},"visibility":"public","docs":"Domain for Unix socket communication, corresponding to `AF_UNIX`.","links":{},"attrs":[],"deprecation":null,"inner":{"assoc_const":{"type":{"resolved_path":{"name":"Domain","id":"0:648:1886","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"default":"_"}}},"0:195:2839":{"id":"0:195:2839","crate_id":0,"name":"join_ssm_v4","span":{"filename":"src/socket.rs","begin":[1318,4],"end":[1337,5]},"visibility":"public","docs":"Join a multicast SSM channel using `IP_ADD_SOURCE_MEMBERSHIP` option on this socket.\n\nThis function specifies a new multicast channel for this socket to join.\nThe group must be a valid SSM group address, the source must be the address of the sender\nand `interface` is the address of the local interface with which the system should join the\nmulticast group. If it's [`Ipv4Addr::UNSPECIFIED`] (`INADDR_ANY`) then\nan appropriate interface is chosen by the system.","links":{"`Ipv4Addr::UNSPECIFIED`":"2:8332:3286"},"attrs":["#[cfg(not(any(target_os = \"dragonfly\", target_os = \"haiku\", target_os =\n\"netbsd\", target_os = \"openbsd\", target_os = \"redox\", target_os = \"fuchsia\",\ntarget_os = \"nto\", target_os = \"espidf\", target_os = \"vita\",)))]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["source",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Ipv4Addr","id":"2:41756:2310","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],["group",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Ipv4Addr","id":"2:41756:2310","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],["interface",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Ipv4Addr","id":"2:41756:2310","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:2944:233","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:595:2048":{"id":"0:595:2048","crate_id":0,"name":"MsgHdrMut","span":{"filename":"src/lib.rs","begin":[661,0],"end":[669,1]},"visibility":"public","docs":"Configuration of a `recvmsg(2)` system call.\n\nThis wraps `msghdr` on Unix and `WSAMSG` on Windows. Also see [`MsgHdr`] for\nthe variant used by `sendmsg(2)`.","links":{"`MsgHdr`":"0:575:2011"},"attrs":["#[cfg(not(target_os = \"redox\"))]"],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'addr","kind":{"lifetime":{"outlives":[]}}},{"name":"'bufs","kind":{"lifetime":{"outlives":[]}}},{"name":"'control","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"impls":["0:601","a:2:32418:244-0:595:2048","a:2:32500:3864-0:595:2048","a:2:42130:10112-0:595:2048","a:2:42131:10111-0:595:2048","a:2:2948:254-0:595:2048","b:2:2426-0:595:2048","b:2:2741-0:595:2048","b:2:2726-0:595:2048","b:2:2736-0:595:2048","b:2:3495-0:595:2048","b:2:2730-0:595:2048","b:2:2423-0:595:2048","0:610"]}}},"0:259:719":{"id":"0:259:719","crate_id":0,"name":"fmt","span":{"filename":"src/socket.rs","begin":[2085,4],"end":[2091,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"2:9852:141","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"2:9833:233","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12870:28508":{"id":"2:12870:28508","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GR√ú√üE, J√úRGEN ‚ù§\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"gr√ú√üe, j√úrgen ‚ù§\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2426-0:114:1872":{"id":"b:2:2426-0:114:1872","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32419:3863","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2420:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Socket","id":"0:114:1872","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2428:27383"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2741-0:270:1873":{"id":"b:2:2741-0:270:1873","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2700:160","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2710:264","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"SockRef","id":"0:270:1873","args":{"angle_bracketed":{"args":[{"lifetime":"'s"}],"bindings":[]}}}},"items":["2:2744:135","2:2745:1619"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2426-0:270:1873":{"id":"b:2:2426-0:270:1873","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32419:3863","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2420:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"SockRef","id":"0:270:1873","args":{"angle_bracketed":{"args":[{"lifetime":"'s"}],"bindings":[]}}}},"items":["2:2428:27383"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:667":{"id":"0:667","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[251,22],"end":[251,24]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"2:2491:132","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Type","id":"0:660:1902","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2736-0:270:1873":{"id":"b:2:2736-0:270:1873","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2710:264","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2706:265","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"SockRef","id":"0:270:1873","args":{"angle_bracketed":{"args":[{"lifetime":"'s"}],"bindings":[]}}}},"items":["2:2739:135","2:2740:1621"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2726-0:684:1959":{"id":"b:2:2726-0:684:1959","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2703:142","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2700:160","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RecvFlags","id":"0:684:1959","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2729:2293"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2426-0:660:1902":{"id":"b:2:2426-0:660:1902","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32419:3863","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2420:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Type","id":"0:660:1902","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2428:27383"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:571":{"id":"0:571","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[451,0],"end":[586,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"TcpKeepalive","id":"0:696:1979","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:572:1039","0:573:1994","0:574:2003"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:2740:1621":{"id":"2:2740:1621","crate_id":2,"name":"try_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Result","id":"2:42149:233","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"2:2710:264","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:192:2823":{"id":"0:192:2823","crate_id":0,"name":"leave_multicast_v4","span":{"filename":"src/socket.rs","begin":[1218,4],"end":[1231,5]},"visibility":"public","docs":"Leave a multicast group using `IP_DROP_MEMBERSHIP` option on this socket.\n\nFor more information about this option, see [`join_multicast_v4`].\n\n[`join_multicast_v4`]: Socket::join_multicast_v4","links":{"Socket::join_multicast_v4":"0:191:2812"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["multiaddr",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Ipv4Addr","id":"2:41756:2310","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],["interface",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Ipv4Addr","id":"2:41756:2310","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:2944:233","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:657":{"id":"0:657","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[208,26],"end":[208,35]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"2:32420:252","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Domain","id":"0:648:1886","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:3495-0:684:1959":{"id":"b:2:3495-0:684:1959","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:32419:3863","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3493:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RecvFlags","id":"0:684:1959","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3497:1634"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12769:29985":{"id":"2:12769:29985","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\n```\nlet s = \"Per Martin-L√∂f\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-L√∂f\", last);\n```","links":{"str::split_at_mut":"2:12770:29986"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2744:135":{"id":"2:2744:135","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Infallible","id":"2:32348:13478","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"b:2:3495-0:660:1902":{"id":"b:2:3495-0:660:1902","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:32419:3863","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3493:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Type","id":"0:660:1902","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3497:1634"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:250:1832":{"id":"0:250:1832","crate_id":0,"name":"write","span":{"filename":"src/socket.rs","begin":[2055,4],"end":[2057,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["buf",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:2944:233","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:5:687-0:672:1925":{"id":"b:5:687-0:672:1925","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2439:111","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:683:257","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Protocol","id":"0:672:1925","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:689:10536","5:690:10537","5:691:10538"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:567:597":{"id":"0:567:597","crate_id":0,"name":"deref","span":{"filename":"src/lib.rs","begin":[412,4],"end":[414,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"MaybeUninit","id":"2:30596:1818","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u8"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:193:2829":{"id":"0:193:2829","crate_id":0,"name":"join_multicast_v4_n","span":{"filename":"src/socket.rs","begin":[1251,4],"end":[1265,5]},"visibility":"public","docs":"Join a multicast group using `IP_ADD_MEMBERSHIP` option on this socket.\n\nThis function specifies a new multicast group for this socket to join.\nThe address must be a valid multicast address, and `interface` specifies\nthe local interface with which the system should join the multicast\ngroup. See [`InterfaceIndexOrAddress`].","links":{"`InterfaceIndexOrAddress`":"0:621:1878"},"attrs":["#[cfg(not(any(target_os = \"aix\", target_os = \"haiku\", target_os = \"illumos\",\ntarget_os = \"netbsd\", target_os = \"openbsd\", target_os = \"redox\", target_os =\n\"solaris\", target_os = \"nto\", target_os = \"espidf\", target_os = \"vita\",)))]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["multiaddr",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Ipv4Addr","id":"2:41756:2310","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],["interface",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"InterfaceIndexOrAddress","id":"0:621:1878","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:2944:233","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12869:28507":{"id":"2:12869:28507","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Gr√º√üe, J√ºrgen ‚ù§\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GR√º√üE, J√ºRGEN ‚ù§\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12808:35134":{"id":"2:12808:35134","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"2:12443:21477","str::split":"2:12796:29146","prim@char":"1:12034:452","str::split_terminator":"2:12805:35133"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitTerminator","id":"2:43970:14382","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12448:15137","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12448:15137","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12463:21475","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:683:662":{"id":"0:683:662","crate_id":0,"name":"eq","span":{"filename":"src/lib.rs","begin":[305,26],"end":[305,35]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Protocol","id":"0:672:1925","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:652":{"id":"0:652","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[208,15],"end":[208,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2439:111","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Domain","id":"0:648:1886","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:653:456"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:608:2037":{"id":"0:608:2037","crate_id":0,"name":"with_control","span":{"filename":"src/lib.rs","begin":[706,4],"end":[709,5]},"visibility":"public","docs":"Set the mutable control buffer of the message.\n\nCorresponds to setting `msg_control` and `msg_controllen` on Unix and\n`Control` on Windows.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["buf",{"borrowed_ref":{"lifetime":"'control","mutable":true,"type":{"slice":{"resolved_path":{"name":"MaybeUninit","id":"2:30596:1818","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u8"}}],"bindings":[]}}}}}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:574:2003":{"id":"0:574:2003","crate_id":0,"name":"with_interval","span":{"filename":"src/lib.rs","begin":[534,4],"end":[539,5]},"visibility":"public","docs":"Set the value of the `TCP_KEEPINTVL` option. On Windows, this sets the\nvalue of the `tcp_keepalive` struct's `keepaliveinterval` field.\n\nSets the time interval between TCP keepalive probes.\n\nSome platforms specify this value in seconds, so sub-second\nspecifications may be omitted.","links":{},"attrs":["#[cfg(any(target_os = \"android\", target_os = \"dragonfly\", target_os =\n\"freebsd\", target_os = \"fuchsia\", target_os = \"illumos\", target_os = \"ios\",\ntarget_os = \"linux\", target_os = \"macos\", target_os = \"netbsd\", target_os =\n\"tvos\", target_os = \"watchos\", target_os = \"windows\",))]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["interval",{"resolved_path":{"name":"Duration","id":"2:44672:129","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12817:30002":{"id":"2:12817:30002","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42002:201","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12448:15137","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:655":{"id":"0:655","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[208,22],"end":[208,24]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"2:2491:132","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Domain","id":"0:648:1886","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2730-0:554:1969":{"id":"b:2:2730-0:554:1969","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2703:142","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"MaybeUninitSlice","id":"0:554:1969","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:2732:746"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12772:14404":{"id":"2:12772:14404","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"yÃÜes\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'yÃÜ')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the previous character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:12034:452"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CharIndices","id":"2:43878:14376","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:242:3037":{"id":"0:242:3037","crate_id":0,"name":"read_vectored","span":{"filename":"src/socket.rs","begin":[2029,4],"end":[2036,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(target_os = \"redox\"))]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["bufs",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"resolved_path":{"name":"IoSliceMut","id":"1:3443:2345","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:2944:233","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:234:2984":{"id":"0:234:2984","crate_id":0,"name":"set_recv_tclass_v6","span":{"filename":"src/socket.rs","begin":[1805,4],"end":[1814,5]},"visibility":"public","docs":"Set the value of the `IPV6_RECVTCLASS` option for this socket.\n\nIf enabled, the `IPV6_TCLASS` ancillary message is passed with incoming\npackets. It contains a byte which specifies the traffic class field of\nthe packet header.","links":{},"attrs":["#[cfg(not(any(target_os = \"dragonfly\", target_os = \"fuchsia\", target_os =\n\"illumos\", target_os = \"netbsd\", target_os = \"openbsd\", target_os = \"redox\",\ntarget_os = \"solaris\", target_os = \"haiku\", target_os = \"espidf\", target_os =\n\"vita\",)))]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["recv_tclass",{"primitive":"bool"}]],"output":{"resolved_path":{"name":"io::Result","id":"1:2944:233","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:53:2256":{"id":"0:53:2256","crate_id":0,"name":"domain","span":{"filename":"src/sockaddr.rs","begin":[172,4],"end":[174,5]},"visibility":"public","docs":"Returns this address's `Domain`.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Domain","id":"0:648:1886","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2426-0:616:1871":{"id":"b:2:2426-0:616:1871","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32419:3863","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2420:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"SockAddr","id":"0:616:1871","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2428:27383"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:2948:254-0:616:1871":{"id":"a:2:2948:254-0:616:1871","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2948:254","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"SockAddr","id":"0:616:1871","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"5:5554:28504":{"id":"5:5554:28504","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Gr√º√üe, J√ºrgen ‚ù§\";\n\nassert_eq!(\"GR√º√üE, J√ºRGEN ‚ù§\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"2:12869:28507"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7535:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:237:3027":{"id":"0:237:3027","crate_id":0,"name":"nodelay","span":{"filename":"src/socket.rs","begin":[1994,4],"end":[1999,5]},"visibility":"public","docs":"Get the value of the `TCP_NODELAY` option on this socket.\n\nFor more information about this option, see [`set_nodelay`].\n\n[`set_nodelay`]: Socket::set_nodelay","links":{"Socket::set_nodelay":"0:239:3035"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:2944:233","args":{"angle_bracketed":{"args":[{"type":{"primitive":"bool"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2741-0:696:1979":{"id":"b:2:2741-0:696:1979","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2700:160","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2710:264","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"TcpKeepalive","id":"0:696:1979","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2744:135","2:2745:1619"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12842:35142":{"id":"2:12842:35142","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"◊¢◊ë◊®◊ô◊™  \";\nassert!(Some('◊™') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:219:2935":{"id":"0:219:2935","crate_id":0,"name":"set_multicast_hops_v6","span":{"filename":"src/socket.rs","begin":[1643,4],"end":[1652,5]},"visibility":"public","docs":"Set the value of the `IPV6_MULTICAST_HOPS` option for this socket\n\nIndicates the number of \"routers\" multicast packets will transit for\nthis socket. The default value is 1 which means that multicast packets\ndon't leave the local network unless explicitly requested.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["hops",{"primitive":"u32"}]],"output":{"resolved_path":{"name":"io::Result","id":"1:2944:233","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:198:2858":{"id":"0:198:2858","crate_id":0,"name":"set_multicast_if_v4","span":{"filename":"src/socket.rs","begin":[1390,4],"end":[1400,5]},"visibility":"public","docs":"Set the value of the `IP_MULTICAST_IF` option for this socket.\n\nSpecifies the interface to use for routing multicast packets.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["interface",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Ipv4Addr","id":"2:41756:2310","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:2944:233","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2948:254-0:270:1873":{"id":"a:2:2948:254-0:270:1873","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'s","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2948:254","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"SockRef","id":"0:270:1873","args":{"angle_bracketed":{"args":[{"lifetime":"'s"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:2:32418:244-0:575:2011":{"id":"a:2:32418:244-0:575:2011","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'addr","kind":{"lifetime":{"outlives":[]}}},{"name":"'bufs","kind":{"lifetime":{"outlives":[]}}},{"name":"'control","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:32418:244","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MsgHdr","id":"0:575:2011","args":{"angle_bracketed":{"args":[{"lifetime":"'addr"},{"lifetime":"'bufs"},{"lifetime":"'control"}],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"a:2:32418:244-0:595:2048":{"id":"a:2:32418:244-0:595:2048","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'addr","kind":{"lifetime":{"outlives":[]}}},{"name":"'bufs","kind":{"lifetime":{"outlives":[]}}},{"name":"'control","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:32418:244","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MsgHdrMut","id":"0:595:2048","args":{"angle_bracketed":{"args":[{"lifetime":"'addr"},{"lifetime":"'bufs"},{"lifetime":"'control"}],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"0:240":{"id":"0:240","crate_id":0,"name":null,"span":{"filename":"src/socket.rs","begin":[2020,0],"end":[2037,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["read_buf_exact","read_vectored","read_to_end","take","read_exact","chain","read_to_string","read_buf","is_read_vectored","by_ref","bytes"],"trait":{"name":"Read","id":"1:3425:2343","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Socket","id":"0:114:1872","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:241:3036","0:242:3037"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12792:10476":{"id":"2:12792:10476","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('√©'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"2:42004:198","prim@char":"1:12034:452","self::pattern":"2:12443:21477"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42002:201","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12448:15137","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12448:15137","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12463:21475","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:69:746":{"id":"0:69:746","crate_id":0,"name":"from","span":{"filename":"src/sockaddr.rs","begin":[310,4],"end":[349,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["addr",{"resolved_path":{"name":"SocketAddrV6","id":"2:41981:2172","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"SockAddr","id":"0:616:1871","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:136:2503":{"id":"0:136:2503","crate_id":0,"name":"shutdown","span":{"filename":"src/socket.rs","begin":[394,4],"end":[396,5]},"visibility":"public","docs":"Shuts down the read, write, or both halves of this connection.\n\nThis function will cause all pending and future I/O on the specified\nportions to return immediately with an appropriate value.\n\nAdditional documentation can be found in manual of the OS:\n\n * DragonFly BSD: <https://man.dragonflybsd.org/?command=shutdown&section=2>\n * FreeBSD: <https://www.freebsd.org/cgi/man.cgi?query=shutdown&sektion=2>\n * Linux: <https://man7.org/linux/man-pages/man2/shutdown.2.html>\n * macOS: <https://developer.apple.com/library/archive/documentation/System/Conceptual/ManPages_iPhoneOS/man2/shutdown.2.html> (archived, actually for iOS)\n * NetBSD: <https://man.netbsd.org/shutdown.2>\n * OpenBSD: <https://man.openbsd.org/shutdown.2>\n * iOS: <https://developer.apple.com/library/archive/documentation/System/Conceptual/ManPages_iPhoneOS/man2/shutdown.2.html> (archived)\n * illumos: <https://illumos.org/man/3SOCKET/shutdown>\n * Windows: <https://docs.microsoft.com/en-us/windows/win32/api/winsock2/nf-winsock2-shutdown>","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["how",{"resolved_path":{"name":"Shutdown","id":"1:8239:2346","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:2944:233","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2426-0:575:2011":{"id":"b:2:2426-0:575:2011","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32419:3863","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2420:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"MsgHdr","id":"0:575:2011","args":{"angle_bracketed":{"args":[{"lifetime":"'addr"},{"lifetime":"'bufs"},{"lifetime":"'control"}],"bindings":[]}}}},"items":["2:2428:27383"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12855:35145":{"id":"2:12855:35145","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12034:452","self::pattern":"2:12443:21477"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12448:15137","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12448:15137","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12463:21475","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:587:2031":{"id":"0:587:2031","crate_id":0,"name":"with_buffers","span":{"filename":"src/lib.rs","begin":[624,4],"end":[628,5]},"visibility":"public","docs":"Set the buffer(s) of the message.\n\nCorresponds to setting `msg_iov` and `msg_iovlen` on Unix and `lpBuffers`\nand `dwBufferCount` on Windows.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["bufs",{"borrowed_ref":{"lifetime":"'bufs","mutable":false,"type":{"slice":{"resolved_path":{"name":"IoSlice","id":"1:8159:1815","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:42130:10112-0:684:1959":{"id":"a:2:42130:10112-0:684:1959","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:42130:10112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RecvFlags","id":"0:684:1959","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2426-0:696:1979":{"id":"b:2:2426-0:696:1979","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32419:3863","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2420:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"TcpKeepalive","id":"0:696:1979","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2428:27383"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:627:1754":{"id":"0:627:1754","crate_id":0,"name":"0","span":{"filename":"src/socket.rs","begin":[827,12],"end":[827,20]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"struct_field":{"resolved_path":{"name":"std::net::Ipv4Addr","id":"2:41756:2310","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"0:58:2266":{"id":"0:58:2266","crate_id":0,"name":"is_ipv6","span":{"filename":"src/sockaddr.rs","begin":[198,4],"end":[200,5]},"visibility":"public","docs":"Returns true if this address is in the `AF_INET6` (IPv6) family, false\notherwise.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:146:2574":{"id":"0:146:2574","crate_id":0,"name":"recv_from_vectored_with_flags","span":{"filename":"src/socket.rs","begin":[581,4],"end":[587,5]},"visibility":"public","docs":"Identical to [`recv_from_vectored`] but allows for specification of\narbitrary flags to the underlying `recvmsg`/`WSARecvFrom` call.\n\n[`recv_from_vectored`]: Socket::recv_from_vectored\n\n# Safety\n\n`recv_from_vectored` makes the same safety guarantees regarding `bufs`\nas [`recv_vectored`].\n\n[`recv_vectored`]: Socket::recv_vectored","links":{"Socket::recv_vectored":"0:140:2545","Socket::recv_from_vectored":"0:145:2573"},"attrs":["#[cfg(not(target_os = \"redox\"))]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["bufs",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"resolved_path":{"name":"MaybeUninitSlice","id":"0:554:1969","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}}],["flags",{"resolved_path":{"name":"c_int","id":"20:44:1870","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:2944:233","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"primitive":"usize"},{"resolved_path":{"name":"RecvFlags","id":"0:684:1959","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},{"resolved_path":{"name":"SockAddr","id":"0:616:1871","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12802:29996":{"id":"2:12802:29996","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"2:12443:21477","`DoubleEndedIterator`":"2:7826:128","prim@char":"1:12034:452","str::split":"2:12796:29146"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplit","id":"2:43920:10577","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12448:15137","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12448:15137","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12463:21475","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12811:29998":{"id":"2:12811:29998","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"1:12034:452","self::pattern":"2:12443:21477","str::rsplitn":"2:12814:30000"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitN","id":"2:44006:10581","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12448:15137","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:157:2636":{"id":"0:157:2636","crate_id":0,"name":"send_to_vectored","span":{"filename":"src/socket.rs","begin":[725,4],"end":[727,5]},"visibility":"public","docs":"Send data to a peer listening on `addr`. Returns the amount of bytes\nwritten.\n\nAdditional documentation can be found in manual of the OS:\n\n * DragonFly BSD: <https://man.dragonflybsd.org/?command=sendmsg&section=2>\n * FreeBSD: <https://www.freebsd.org/cgi/man.cgi?query=sendmsg&sektion=2>\n * Linux: <https://man7.org/linux/man-pages/man2/sendmsg.2.html>\n * macOS: <https://developer.apple.com/library/archive/documentation/System/Conceptual/ManPages_iPhoneOS/man2/sendmsg.2.html> (archived, actually for iOS)\n * NetBSD: <https://man.netbsd.org/sendmsg.2>\n * OpenBSD: <https://man.openbsd.org/sendmsg.2>\n * iOS: <https://developer.apple.com/library/archive/documentation/System/Conceptual/ManPages_iPhoneOS/man2/sendmsg.2.html> (archived)\n * illumos: <https://illumos.org/man/3SOCKET/sendmsg>\n * Windows: <https://docs.microsoft.com/en-us/windows/win32/api/winsock2/nf-winsock2-sendmsg>","links":{},"attrs":["#[cfg(not(target_os = \"redox\"))]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["bufs",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"IoSlice","id":"1:8159:1815","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}}],["addr",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"SockAddr","id":"0:616:1871","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:2944:233","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:636":{"id":"0:636","crate_id":0,"name":null,"span":{"filename":"src/socket.rs","begin":[2097,0],"end":[2097,29]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2703:142","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Socket","id":"0:114:1872","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"net::TcpStream","id":"1:3732:2379","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:637:746"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:132:2477":{"id":"0:132:2477","crate_id":0,"name":"peer_addr","span":{"filename":"src/socket.rs","begin":[336,4],"end":[338,5]},"visibility":"public","docs":"Returns the socket address of the remote peer of this socket.\n\nThis function directly corresponds to the `getpeername(2)` function on\nWindows and Unix.\n\nAdditional documentation can be found in manual of the OS:\n\n * DragonFly BSD: <https://man.dragonflybsd.org/?command=getpeername&section=2>\n * FreeBSD: <https://www.freebsd.org/cgi/man.cgi?query=getpeername&sektion=2>\n * Linux: <https://man7.org/linux/man-pages/man2/getpeername.2.html>\n * macOS: <https://developer.apple.com/library/archive/documentation/System/Conceptual/ManPages_iPhoneOS/man2/getpeername.2.html> (archived, actually for iOS)\n * NetBSD: <https://man.netbsd.org/getpeername.2>\n * OpenBSD: <https://man.openbsd.org/getpeername.2>\n * iOS: <https://developer.apple.com/library/archive/documentation/System/Conceptual/ManPages_iPhoneOS/man2/getpeername.2.html> (archived)\n * illumos: <https://illumos.org/man/3SOCKET/getpeername>\n * Windows: <https://docs.microsoft.com/en-us/windows/win32/api/winsock2/nf-winsock2-getpeername>\n\n# Notes\n\nThis returns an error if the socket is not [`connect`ed].\n\n[`connect`ed]: Socket::connect","links":{"Socket::connect":"0:125:2422"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:2944:233","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"SockAddr","id":"0:616:1871","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2426-0:595:2048":{"id":"b:2:2426-0:595:2048","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32419:3863","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2420:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"MsgHdrMut","id":"0:595:2048","args":{"angle_bracketed":{"args":[{"lifetime":"'addr"},{"lifetime":"'bufs"},{"lifetime":"'control"}],"bindings":[]}}}},"items":["2:2428:27383"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:631:746":{"id":"0:631:746","crate_id":0,"name":"from","span":{"filename":"src/socket.rs","begin":[2094,0],"end":[2094,29]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["socket",{"resolved_path":{"name":"net::TcpStream","id":"1:3732:2379","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Socket","id":"0:114:1872","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:640":{"id":"0:640","crate_id":0,"name":null,"span":{"filename":"src/socket.rs","begin":[2099,0],"end":[2099,29]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2703:142","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Socket","id":"0:114:1872","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"net::UdpSocket","id":"1:3837:3042","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:641:746"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:531":{"id":"0:531","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[230,0],"end":[234,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2703:142","args":{"angle_bracketed":{"args":[{"type":{"primitive":"i32"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Domain","id":"0:648:1886","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:532:746"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12758:2053":{"id":"2:12758:2053","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:12051:1643"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:214":{"id":"0:214","crate_id":0,"name":null,"span":{"filename":"src/socket.rs","begin":[1577,0],"end":[1815,1]},"visibility":"default","docs":"Socket options for IPv6 sockets, get/set using `IPPROTO_IPV6`.\n\nAdditional documentation can be found in documentation of the OS.\n* Linux: <https://man7.org/linux/man-pages/man7/ipv6.7.html>\n* Windows: <https://docs.microsoft.com/en-us/windows/win32/winsock/ipproto-ipv6-socket-options>","links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Socket","id":"0:114:1872","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:215:2915","0:216:2925","0:217:2930","0:219:2935","0:220:2939","0:222:2945","0:223:2949","0:225:2955","0:226:2958","0:228:2961","0:229:2965","0:231:2973","0:232:2977","0:234:2984"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:672:1925":{"id":"0:672:1925","crate_id":0,"name":"Protocol","span":{"filename":"src/lib.rs","begin":[306,0],"end":[306,27]},"visibility":"public","docs":"Protocol specification used for creating sockets via `Socket::new`.\n\nThis is a newtype wrapper around an integer which provides a nicer API in\naddition to an injection point for documentation.\n\nThis type is freely interconvertible with C's `int` type, however, if a raw\nvalue needs to be provided.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"tuple":[null]},"generics":{"params":[],"where_predicates":[]},"impls":["0:542","a:2:32418:244-0:672:1925","a:2:32500:3864-0:672:1925","a:2:42130:10112-0:672:1925","a:2:42131:10111-0:672:1925","a:2:2948:254-0:672:1925","b:2:2426-0:672:1925","b:2:2741-0:672:1925","b:2:2726-0:672:1925","b:2:2736-0:672:1925","b:2:3495-0:672:1925","b:2:2730-0:672:1925","b:2:2423-0:672:1925","b:5:687-0:672:1925","0:679","0:681","0:678","0:548","0:646","0:550","0:676","0:675","0:682"]}}},"a:2:42131:10111-0:270:1873":{"id":"a:2:42131:10111-0:270:1873","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'s","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:42131:10111","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"SockRef","id":"0:270:1873","args":{"angle_bracketed":{"args":[{"lifetime":"'s"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:12805:35133":{"id":"2:12805:35133","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"2:12443:21477","str::split":"2:12796:29146","prim@char":"1:12034:452","`DoubleEndedIterator`":"2:7826:128","str::rsplit_terminator":"2:12808:35134"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitTerminator","id":"2:43952:14381","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12448:15137","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12849:27439":{"id":"2:12849:27439","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12034:452","self::pattern":"2:12443:21477"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["prefix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42002:201","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12448:15137","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:42130:10112-0:621:1878":{"id":"a:2:42130:10112-0:621:1878","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:42130:10112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"InterfaceIndexOrAddress","id":"0:621:1878","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:2:32500:3864-0:648:1886":{"id":"a:2:32500:3864-0:648:1886","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32500:3864","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Domain","id":"0:648:1886","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:256:3038":{"id":"0:256:3038","crate_id":0,"name":"write_vectored","span":{"filename":"src/socket.rs","begin":[2075,4],"end":[2077,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(target_os = \"redox\"))]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["bufs",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"IoSlice","id":"1:8159:1815","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:2944:233","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:179:2734":{"id":"0:179:2734","crate_id":0,"name":"set_read_timeout","span":{"filename":"src/socket.rs","begin":[1005,4],"end":[1007,5]},"visibility":"public","docs":"Set value for the `SO_RCVTIMEO` option on this socket.\n\nIf `timeout` is `None`, then `read` and `recv` calls will block\nindefinitely.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["duration",{"resolved_path":{"name":"Option","id":"2:42002:201","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Duration","id":"2:44672:129","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:2944:233","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:70":{"id":"0:70","crate_id":0,"name":null,"span":{"filename":"src/sockaddr.rs","begin":[352,0],"end":[374,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:9877:118","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"SockAddr","id":"0:616:1871","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:71:719"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:67:746":{"id":"0:67:746","crate_id":0,"name":"from","span":{"filename":"src/sockaddr.rs","begin":[277,4],"end":[306,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["addr",{"resolved_path":{"name":"SocketAddrV4","id":"2:41962:2171","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"SockAddr","id":"0:616:1871","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:542":{"id":"0:542","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[308,0],"end":[349,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Protocol","id":"0:672:1925","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:543:1927","0:544:1930","0:545:1933","0:546:1936","0:547:1939"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:249":{"id":"0:249","crate_id":0,"name":null,"span":{"filename":"src/socket.rs","begin":[2054,0],"end":[2067,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["write_fmt","by_ref","write_all","is_write_vectored","write_vectored","write_all_vectored"],"trait":{"name":"Write","id":"1:3482:2344","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Socket","id":"0:114:1872","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:250:1832","0:251:3038","0:252:3039"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:2729:2293":{"id":"2:2729:2293","crate_id":2,"name":"into","span":null,"visibility":"default","docs":"Calls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of\n<code>[From]&lt;T&gt; for U</code> chooses to do.","links":{"From":"2:2703:142"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"U"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2741-0:616:1871":{"id":"b:2:2741-0:616:1871","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2700:160","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2710:264","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"SockAddr","id":"0:616:1871","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2744:135","2:2745:1619"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2423-0:672:1925":{"id":"b:2:2423-0:672:1925","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32419:3863","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2417:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Protocol","id":"0:672:1925","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2425:3764"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:572:1039":{"id":"0:572:1039","crate_id":0,"name":"new","span":{"filename":"src/lib.rs","begin":[453,4],"end":[476,5]},"visibility":"public","docs":"Returns a new, empty set of TCP keepalive parameters.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"TcpKeepalive","id":"0:696:1979","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12858:35146":{"id":"2:12858:35146","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12034:452","self::pattern":"2:12443:21477"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12448:15137","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:141:2546":{"id":"0:141:2546","crate_id":0,"name":"recv_vectored_with_flags","span":{"filename":"src/socket.rs","begin":[495,4],"end":[501,5]},"visibility":"public","docs":"Identical to [`recv_vectored`] but allows for specification of arbitrary\nflags to the underlying `recvmsg`/`WSARecv` call.\n\n[`recv_vectored`]: Socket::recv_vectored\n\n# Safety\n\n`recv_from_vectored` makes the same safety guarantees regarding `bufs`\nas [`recv_vectored`].\n\n[`recv_vectored`]: Socket::recv_vectored","links":{"Socket::recv_vectored":"0:140:2545"},"attrs":["#[cfg(not(target_os = \"redox\"))]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["bufs",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"resolved_path":{"name":"MaybeUninitSlice","id":"0:554:1969","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}}],["flags",{"resolved_path":{"name":"c_int","id":"20:44:1870","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:2944:233","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"primitive":"usize"},{"resolved_path":{"name":"RecvFlags","id":"0:684:1959","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:211:2903":{"id":"0:211:2903","crate_id":0,"name":"set_recv_tos","span":{"filename":"src/socket.rs","begin":[1534,4],"end":[1543,5]},"visibility":"public","docs":"Set the value of the `IP_RECVTOS` option for this socket.\n\nIf enabled, the `IP_TOS` ancillary message is passed with\nincoming packets. It contains a byte which specifies the\nType of Service/Precedence field of the packet header.","links":{},"attrs":["#[cfg(not(any(target_os = \"aix\", target_os = \"dragonfly\", target_os =\n\"fuchsia\", target_os = \"illumos\", target_os = \"netbsd\", target_os = \"openbsd\",\ntarget_os = \"redox\", target_os = \"solaris\", target_os = \"haiku\", target_os =\n\"nto\", target_os = \"espidf\", target_os = \"vita\",)))]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["recv_tos",{"primitive":"bool"}]],"output":{"resolved_path":{"name":"io::Result","id":"1:2944:233","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:630":{"id":"0:630","crate_id":0,"name":null,"span":{"filename":"src/socket.rs","begin":[2094,0],"end":[2094,29]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2703:142","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"TcpStream","id":"1:3732:2379","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Socket","id":"0:114:1872","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:631:746"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:3495-0:621:1878":{"id":"b:2:3495-0:621:1878","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:32419:3863","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3493:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"InterfaceIndexOrAddress","id":"0:621:1878","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3497:1634"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:244":{"id":"0:244","crate_id":0,"name":null,"span":{"filename":"src/socket.rs","begin":[2039,0],"end":[2052,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["read_buf_exact","read_vectored","read_to_end","take","read_exact","chain","read_to_string","read_buf","is_read_vectored","by_ref","bytes"],"trait":{"name":"Read","id":"1:3425:2343","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"resolved_path":{"name":"Socket","id":"0:114:1872","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"items":["0:246:3036","0:247:3037"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:158:2637":{"id":"0:158:2637","crate_id":0,"name":"send_to_vectored_with_flags","span":{"filename":"src/socket.rs","begin":[735,4],"end":[742,5]},"visibility":"public","docs":"Identical to [`send_to_vectored`] but allows for specification of\narbitrary flags to the underlying `sendmsg`/`WSASendTo` call.\n\n[`send_to_vectored`]: Socket::send_to_vectored","links":{"Socket::send_to_vectored":"0:157:2636"},"attrs":["#[cfg(not(target_os = \"redox\"))]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["bufs",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"IoSlice","id":"1:8159:1815","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}}],["addr",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"SockAddr","id":"0:616:1871","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],["flags",{"resolved_path":{"name":"c_int","id":"20:44:1870","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:2944:233","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:677:456":{"id":"0:677:456","crate_id":0,"name":"clone","span":{"filename":"src/lib.rs","begin":[305,15],"end":[305,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Protocol","id":"0:672:1925","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:143:2565":{"id":"0:143:2565","crate_id":0,"name":"recv_from","span":{"filename":"src/socket.rs","begin":[530,4],"end":[532,5]},"visibility":"public","docs":"Receives data from the socket. On success, returns the number of bytes\nread and the address from whence the data came.\n\nAdditional documentation can be found in manual of the OS:\n\n * DragonFly BSD: <https://man.dragonflybsd.org/?command=recvfrom&section=2>\n * FreeBSD: <https://www.freebsd.org/cgi/man.cgi?query=recvfrom&sektion=2>\n * Linux: <https://man7.org/linux/man-pages/man2/recvfrom.2.html>\n * macOS: <https://developer.apple.com/library/archive/documentation/System/Conceptual/ManPages_iPhoneOS/man2/recvfrom.2.html> (archived, actually for iOS)\n * NetBSD: <https://man.netbsd.org/recvfrom.2>\n * OpenBSD: <https://man.openbsd.org/recvfrom.2>\n * iOS: <https://developer.apple.com/library/archive/documentation/System/Conceptual/ManPages_iPhoneOS/man2/recvfrom.2.html> (archived)\n * illumos: <https://illumos.org/man/3SOCKET/recvfrom>\n * Windows: <https://docs.microsoft.com/en-us/windows/win32/api/winsock2/nf-winsock2-recvfrom>\n\n# Safety\n\n`recv_from` makes the same safety guarantees regarding the `buf`fer as\n[`recv`].\n\n[`recv`]: Socket::recv","links":{"Socket::recv":"0:137:2509"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["buf",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"resolved_path":{"name":"MaybeUninit","id":"2:30596:1818","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u8"}}],"bindings":[]}}}}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:2944:233","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"primitive":"usize"},{"resolved_path":{"name":"SockAddr","id":"0:616:1871","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2423-0:696:1979":{"id":"b:2:2423-0:696:1979","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32419:3863","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2417:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"TcpKeepalive","id":"0:696:1979","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2425:3764"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:42131:10111-0:660:1902":{"id":"a:2:42131:10111-0:660:1902","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:42131:10111","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Type","id":"0:660:1902","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:12877:35150":{"id":"2:12877:35150","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"‚ù§\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"‚ù§\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"‚ù§\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"2:4668:35150"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeUnicode","id":"2:44219:14322","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:114:1872":{"id":"0:114:1872","crate_id":0,"name":"Socket","span":{"filename":"src/socket.rs","begin":[75,0],"end":[77,1]},"visibility":"public","docs":"Owned wrapper around a system socket.\n\nThis type simply wraps an instance of a file descriptor (`c_int`) on Unix\nand an instance of `SOCKET` on Windows. This is the main type exported by\nthis crate and is intended to mirror the raw semantics of sockets on\nplatforms as closely as possible. Almost all methods correspond to\nprecisely one libc or OS API call which is essentially just a \"Rustic\ntranslation\" of what's below.\n\n## Converting to and from other types\n\nThis type can be freely converted into the network primitives provided by\nthe standard library, such as [`TcpStream`] or [`UdpSocket`], using the\n[`From`] trait, see the example below.\n\n[`TcpStream`]: std::net::TcpStream\n[`UdpSocket`]: std::net::UdpSocket\n\n# Notes\n\nSome methods that set options on `Socket` require two system calls to set\ntheir options without overwriting previously set options. We do this by\nfirst getting the current settings, applying the desired changes, and then\nupdating the settings. This means that the operation is **not** atomic. This\ncan lead to a data race when two threads are changing options in parallel.\n\n# Examples\n```no_run\n# fn main() -> std::io::Result<()> {\nuse std::net::{SocketAddr, TcpListener};\nuse socket2::{Socket, Domain, Type};\n\n// create a TCP listener\nlet socket = Socket::new(Domain::IPV6, Type::STREAM, None)?;\n\nlet address: SocketAddr = \"[::1]:12345\".parse().unwrap();\nlet address = address.into();\nsocket.bind(&address)?;\nsocket.listen(128)?;\n\nlet listener: TcpListener = socket.into();\n// ...\n# drop(listener);\n# Ok(()) }\n```","links":{"`From`":"2:2703:142","std::net::UdpSocket":"1:3837:3042","std::net::TcpStream":"1:3732:2379"},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["0:117","0:162","0:190","0:214","0:235","a:2:32418:244-0:114:1872","a:2:32500:3864-0:114:1872","a:2:42130:10112-0:114:1872","a:2:42131:10111-0:114:1872","a:2:2948:254-0:114:1872","b:2:2426-0:114:1872","b:2:2741-0:114:1872","b:2:2726-0:114:1872","b:2:2736-0:114:1872","b:2:3495-0:114:1872","b:2:2730-0:114:1872","b:2:2423-0:114:1872","0:258","0:253","0:638","0:632","0:634","0:509","0:519","0:640","0:513","0:511","0:244","0:249","0:636","0:630","0:515","0:517","0:240"]}}},"0:540":{"id":"0:540","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[292,0],"end":[296,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2703:142","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Type","id":"0:660:1902","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"libc::c_int","id":"20:44:1870","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:541:746"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:560:719":{"id":"0:560:719","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[393,4],"end":[395,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["fmt",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"2:9852:141","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"2:9833:233","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:75":{"id":"0:75","crate_id":0,"name":null,"span":{"filename":"src/sockaddr.rs","begin":[384,0],"end":[388,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["hash_slice"],"trait":{"name":"Hash","id":"2:10093:150","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"SockAddr","id":"0:616:1871","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:76:783"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:65:746":{"id":"0:65:746","crate_id":0,"name":"from","span":{"filename":"src/sockaddr.rs","begin":[268,4],"end":[273,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["addr",{"resolved_path":{"name":"SocketAddr","id":"2:41939:1820","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"SockAddr","id":"0:616:1871","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:42131:10111-0:575:2011":{"id":"a:2:42131:10111-0:575:2011","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'addr","kind":{"lifetime":{"outlives":[]}}},{"name":"'bufs","kind":{"lifetime":{"outlives":[]}}},{"name":"'control","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:42131:10111","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MsgHdr","id":"0:575:2011","args":{"angle_bracketed":{"args":[{"lifetime":"'addr"},{"lifetime":"'bufs"},{"lifetime":"'control"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:632":{"id":"0:632","crate_id":0,"name":null,"span":{"filename":"src/socket.rs","begin":[2095,0],"end":[2095,31]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2703:142","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"TcpListener","id":"1:3735:3041","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Socket","id":"0:114:1872","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:633:746"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:519":{"id":"0:519","crate_id":0,"name":null,"span":{"filename":"src/sys/unix.rs","begin":[3074,0],"end":[3078,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"FromRawFd","id":"1:4742:2348","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"crate::Socket","id":"0:114:1872","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:520:1836"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:277:597":{"id":"0:277:597","crate_id":0,"name":"deref","span":{"filename":"src/sockref.rs","begin":[74,4],"end":[76,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Target","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"2:3098:124","args":null}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2741-0:648:1886":{"id":"b:2:2741-0:648:1886","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2700:160","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2710:264","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Domain","id":"0:648:1886","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2744:135","2:2745:1619"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12866:28502":{"id":"2:12866:28502","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Gr√º√üe, J√ºrgen ‚ù§\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:71:719":{"id":"0:71:719","crate_id":0,"name":"fmt","span":{"filename":"src/sockaddr.rs","begin":[353,4],"end":[373,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["fmt",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"2:9852:141","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"2:9833:233","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:64":{"id":"0:64","crate_id":0,"name":null,"span":{"filename":"src/sockaddr.rs","begin":[267,0],"end":[274,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2703:142","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"SocketAddr","id":"2:41939:1820","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"SockAddr","id":"0:616:1871","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:65:746"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:42131:10111-0:621:1878":{"id":"a:2:42131:10111-0:621:1878","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:42131:10111","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"InterfaceIndexOrAddress","id":"0:621:1878","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:2:42131:10111-0:672:1925":{"id":"a:2:42131:10111-0:672:1925","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:42131:10111","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Protocol","id":"0:672:1925","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:12785:29372":{"id":"2:12785:29372","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"1:12034:452","self::pattern":"2:12443:21477"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12448:15137","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12448:15137","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12463:21475","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:629:719":{"id":"0:629:719","crate_id":0,"name":"fmt","span":{"filename":"src/socket.rs","begin":[822,9],"end":[822,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:9852:141","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:9833:233","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12872:29908":{"id":"2:12872:29908","crate_id":2,"name":"trim_ascii_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\"\\r hello world\\u{3000}\\n \".trim_ascii_end(), \"\\r hello world\\u{3000}\");\nassert_eq!(\"  \".trim_ascii_end(), \"\");\nassert_eq!(\"\".trim_ascii_end(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:895:36868"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12777:35132":{"id":"2:12777:35132","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\", suggestion =\n\"lines\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinesAny","id":"2:44166:14390","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12767:35130":{"id":"2:12767:35130","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\n\nunsafe {\n    assert_eq!(\"L√∂we ËÄÅËôé L√©opard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"1:12040:1538","str::slice_mut_unchecked":"2:12768:35131","crate::ops::Index":"2:39580:2654"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:678":{"id":"0:678","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[305,22],"end":[305,24]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralEq","id":"2:32445:251","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Protocol","id":"0:672:1925","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:121:1039":{"id":"0:121:1039","crate_id":0,"name":"new","span":{"filename":"src/socket.rs","begin":[131,4],"end":[134,5]},"visibility":"public","docs":"Creates a new socket and sets common flags.\n\nThis function corresponds to `socket(2)` on Unix and `WSASocketW` on\nWindows.\n\nOn Unix-like systems, the close-on-exec flag is set on the new socket.\nAdditionally, on Apple platforms `SOCK_NOSIGPIPE` is set. On Windows,\nthe socket is made non-inheritable.\n\n[`Socket::new_raw`] can be used if you don't want these flags to be set.\n\nAdditional documentation can be found in manual of the OS:\n\n * DragonFly BSD: <https://man.dragonflybsd.org/?command=socket&section=2>\n * FreeBSD: <https://www.freebsd.org/cgi/man.cgi?query=socket&sektion=2>\n * Linux: <https://man7.org/linux/man-pages/man2/socket.2.html>\n * macOS: <https://developer.apple.com/library/archive/documentation/System/Conceptual/ManPages_iPhoneOS/man2/socket.2.html> (archived, actually for iOS)\n * NetBSD: <https://man.netbsd.org/socket.2>\n * OpenBSD: <https://man.openbsd.org/socket.2>\n * iOS: <https://developer.apple.com/library/archive/documentation/System/Conceptual/ManPages_iPhoneOS/man2/socket.2.html> (archived)\n * illumos: <https://illumos.org/man/3SOCKET/socket>\n * Windows: <https://docs.microsoft.com/en-us/windows/win32/api/winsock2/nf-winsock2-socket>","links":{"`Socket::new_raw`":"0:122:2400"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["domain",{"resolved_path":{"name":"Domain","id":"0:648:1886","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}],["ty",{"resolved_path":{"name":"Type","id":"0:660:1902","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}],["protocol",{"resolved_path":{"name":"Option","id":"2:42002:201","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Protocol","id":"0:672:1925","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:2944:233","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Socket","id":"0:114:1872","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:528:1891":{"id":"0:528:1891","crate_id":0,"name":"IPV6","span":{"filename":"src/lib.rs","begin":[216,4],"end":[216,51]},"visibility":"public","docs":"Domain for IPv6 communication, corresponding to `AF_INET6`.","links":{},"attrs":[],"deprecation":null,"inner":{"assoc_const":{"type":{"resolved_path":{"name":"Domain","id":"0:648:1886","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"default":"_"}}},"2:12747:875":{"id":"2:12747:875","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"∆íoo\".len(), 4); // fancy f!\nassert_eq!(\"∆íoo\".chars().count(), 3);\n```","links":{"prim@char":"1:12034:452"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:684:1959":{"id":"0:684:1959","crate_id":0,"name":"RecvFlags","span":{"filename":"src/lib.rs","begin":[369,0],"end":[369,28]},"visibility":"public","docs":"Flags for incoming messages.\n\nFlags provide additional information about incoming messages.","links":{},"attrs":["#[cfg(not(target_os = \"redox\"))]"],"deprecation":null,"inner":{"struct":{"kind":{"tuple":[null]},"generics":{"params":[],"where_predicates":[]},"impls":["0:399","0:552","a:2:32418:244-0:684:1959","a:2:32500:3864-0:684:1959","a:2:42130:10112-0:684:1959","a:2:42131:10111-0:684:1959","a:2:2948:254-0:684:1959","b:2:2426-0:684:1959","b:2:2741-0:684:1959","b:2:2726-0:684:1959","b:2:2736-0:684:1959","b:2:3495-0:684:1959","b:2:2730-0:684:1959","b:2:2423-0:684:1959","b:5:687-0:684:1959","0:694","0:693","0:688","0:690","0:691","0:687","0:402"]}}},"0:0:2058":{"id":"0:0:2058","crate_id":0,"name":"socket2","span":{"filename":"src/lib.rs","begin":[9,0],"end":[722,1]},"visibility":"public","docs":"Utilities for creating and using sockets.\n\nThe goal of this crate is to create and use a socket using advanced\nconfiguration options (those that are not available in the types in the\nstandard library) without using any unsafe code.\n\nThis crate provides as direct as possible access to the system's\nfunctionality for sockets, this means little effort to provide\ncross-platform utilities. It is up to the user to know how to use sockets\nwhen using this crate. *If you don't know how to create a socket using\nlibc/system calls then this crate is not for you*. Most, if not all,\nfunctions directly relate to the equivalent system call with no error\nhandling applied, so no handling errors such as [`EINTR`]. As a result using\nthis crate can be a little wordy, but it should give you maximal flexibility\nover configuration of sockets.\n\n[`EINTR`]: std::io::ErrorKind::Interrupted\n\n# Examples\n\n```no_run\n# fn main() -> std::io::Result<()> {\nuse std::net::{SocketAddr, TcpListener};\nuse socket2::{Socket, Domain, Type};\n\n// Create a TCP listener bound to two addresses.\nlet socket = Socket::new(Domain::IPV6, Type::STREAM, None)?;\n\nsocket.set_only_v6(false)?;\nlet address: SocketAddr = \"[::1]:12345\".parse().unwrap();\nsocket.bind(&address.into())?;\nsocket.listen(128)?;\n\nlet listener: TcpListener = socket.into();\n// ...\n# drop(listener);\n# Ok(()) }\n```\n\n## Features\n\nThis crate has a single feature `all`, which enables all functions even ones\nthat are not available on all OSs.","links":{"std::io::ErrorKind::Interrupted":"1:8084:3235"},"attrs":["#![deny(missing_docs, missing_debug_implementations, rust_2018_idioms)]","#![doc(test(attr(deny(warnings))))]"],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:522-0:616:1871","0:523-0:114:1872","0:524-0:270:1873","0:525-0:621:1878","0:648:1886","0:660:1902","0:672:1925","0:684:1959","0:554:1969","0:696:1979","0:575:2011","0:595:2048"],"is_stripped":false}}},"a:2:32500:3864-0:684:1959":{"id":"a:2:32500:3864-0:684:1959","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32500:3864","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RecvFlags","id":"0:684:1959","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:51:2250":{"id":"0:51:2250","crate_id":0,"name":"set_length","span":{"filename":"src/sockaddr.rs","begin":[162,4],"end":[164,5]},"visibility":"public","docs":"Set the length of the address.\n\n# Safety\n\nCaller must ensure that the address up to `length` bytes are properly\ninitialised.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["length",{"resolved_path":{"name":"socklen_t","id":"20:1862:2182","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2426-0:621:1878":{"id":"b:2:2426-0:621:1878","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32419:3863","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2420:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"InterfaceIndexOrAddress","id":"0:621:1878","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2428:27383"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:180:2740":{"id":"0:180:2740","crate_id":0,"name":"reuse_address","span":{"filename":"src/socket.rs","begin":[1014,4],"end":[1019,5]},"visibility":"public","docs":"Get the value of the `SO_REUSEADDR` option on this socket.\n\nFor more information about this option, see [`set_reuse_address`].\n\n[`set_reuse_address`]: Socket::set_reuse_address","links":{"Socket::set_reuse_address":"0:182:2746"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:2944:233","args":{"angle_bracketed":{"args":[{"type":{"primitive":"bool"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:676":{"id":"0:676","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[305,15],"end":[305,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2439:111","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Protocol","id":"0:672:1925","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:677:456"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2423-0:621:1878":{"id":"b:2:2423-0:621:1878","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32419:3863","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2417:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"InterfaceIndexOrAddress","id":"0:621:1878","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2425:3764"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:664":{"id":"0:664","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[251,15],"end":[251,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2439:111","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Type","id":"0:660:1902","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:665:456"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12778:33764":{"id":"2:12778:33764","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\n```\nlet text = \"Za≈º√≥≈Çƒá gƒô≈õlƒÖ ja≈∫≈Ñ\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EncodeUtf16","id":"2:44194:14393","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:691:10538":{"id":"5:691:10538","crate_id":5,"name":"clone_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["target",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:278":{"id":"0:278","crate_id":0,"name":null,"span":{"filename":"src/sockref.rs","begin":[82,0],"end":[95,1]},"visibility":"default","docs":"On Windows, a corresponding `From<&impl AsSocket>` implementation exists.","links":{},"attrs":["#[cfg(unix)]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'s","kind":{"lifetime":{"outlives":[]}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"AsFd","id":"1:4821:3044","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2703:142","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'s","mutable":false,"type":{"generic":"S"}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"SockRef","id":"0:270:1873","args":{"angle_bracketed":{"args":[{"lifetime":"'s"}],"bindings":[]}}}},"items":["0:281:746"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:258":{"id":"0:258","crate_id":0,"name":null,"span":{"filename":"src/socket.rs","begin":[2084,0],"end":[2092,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:9877:118","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Socket","id":"0:114:1872","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:259:719"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:525-0:621:1878":{"id":"0:525-0:621:1878","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[197,0],"end":[197,40]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(not(any(target_os = \"haiku\", target_os = \"illumos\", target_os =\n\"netbsd\", target_os = \"redox\", target_os = \"solaris\",)))]"],"deprecation":null,"inner":{"import":{"source":"socket::InterfaceIndexOrAddress","name":"InterfaceIndexOrAddress","id":"0:621:1878","glob":false}}},"0:535":{"id":"0:535","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[254,0],"end":[284,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Type","id":"0:660:1902","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:536:1905","0:537:1909"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:42131:10111-0:114:1872":{"id":"a:2:42131:10111-0:114:1872","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:42131:10111","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Socket","id":"0:114:1872","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:2:42130:10112-0:554:1969":{"id":"a:2:42130:10112-0:554:1969","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:42130:10112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MaybeUninitSlice","id":"0:554:1969","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"0:534:746":{"id":"0:534:746","crate_id":0,"name":"from","span":{"filename":"src/lib.rs","begin":[237,4],"end":[239,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["d",{"resolved_path":{"name":"Domain","id":"0:648:1886","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"c_int","id":"20:44:1870","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2741-0:554:1969":{"id":"b:2:2741-0:554:1969","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2700:160","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2710:264","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"MaybeUninitSlice","id":"0:554:1969","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:2744:135","2:2745:1619"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12814:30000":{"id":"2:12814:30000","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"1:12034:452","str::splitn":"2:12811:29998","self::pattern":"2:12443:21477"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitN","id":"2:44024:10579","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12448:15137","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12448:15137","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12463:21475","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:586:2025":{"id":"0:586:2025","crate_id":0,"name":"with_addr","span":{"filename":"src/lib.rs","begin":[615,4],"end":[618,5]},"visibility":"public","docs":"Set the address (name) of the message.\n\nCorresponds to setting `msg_name` and `msg_namelen` on Unix and `name`\nand `namelen` on Windows.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["addr",{"borrowed_ref":{"lifetime":"'addr","mutable":false,"type":{"resolved_path":{"name":"SockAddr","id":"0:616:1871","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:241:3036":{"id":"0:241:3036","crate_id":0,"name":"read","span":{"filename":"src/socket.rs","begin":[2021,4],"end":[2026,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["buf",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:2944:233","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:400:3148":{"id":"0:400:3148","crate_id":0,"name":"is_end_of_record","span":{"filename":"src/sys/unix.rs","begin":[554,4],"end":[556,5]},"visibility":"public","docs":"Check if the message terminates a record.\n\nNot all socket types support the notion of records. For socket types\nthat do support it (such as [`SEQPACKET`]), a record is terminated by\nsending a message with the end-of-record flag set.\n\nOn Unix this corresponds to the `MSG_EOR` flag.\n\n[`SEQPACKET`]: Type::SEQPACKET","links":{},"attrs":["#[cfg(not(target_os = \"espidf\"))]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:257:3039":{"id":"0:257:3039","crate_id":0,"name":"flush","span":{"filename":"src/socket.rs","begin":[2079,4],"end":[2081,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:2944:233","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:659:662":{"id":"0:659:662","crate_id":0,"name":"eq","span":{"filename":"src/lib.rs","begin":[208,26],"end":[208,35]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Domain","id":"0:648:1886","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:5:687-0:684:1959":{"id":"b:5:687-0:684:1959","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2439:111","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:683:257","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RecvFlags","id":"0:684:1959","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:689:10536","5:690:10537","5:691:10538"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:666":{"id":"0:666","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[251,22],"end":[251,24]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralEq","id":"2:32445:251","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Type","id":"0:660:1902","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:32418:244-0:684:1959":{"id":"a:2:32418:244-0:684:1959","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:32418:244","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RecvFlags","id":"0:684:1959","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:588:2037":{"id":"0:588:2037","crate_id":0,"name":"with_control","span":{"filename":"src/lib.rs","begin":[634,4],"end":[638,5]},"visibility":"public","docs":"Set the control buffer of the message.\n\nCorresponds to setting `msg_control` and `msg_controllen` on Unix and\n`Control` on Windows.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["buf",{"borrowed_ref":{"lifetime":"'control","mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:247:3037":{"id":"0:247:3037","crate_id":0,"name":"read_vectored","span":{"filename":"src/socket.rs","begin":[2047,4],"end":[2051,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(target_os = \"redox\"))]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["bufs",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"resolved_path":{"name":"IoSliceMut","id":"1:3443:2345","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:2944:233","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:399":{"id":"0:399","crate_id":0,"name":null,"span":{"filename":"src/sys/unix.rs","begin":[543,0],"end":[567,1]},"visibility":"default","docs":"Unix-only API.","links":{},"attrs":["#[cfg(not(target_os = \"redox\"))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"crate::RecvFlags","id":"0:684:1959","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:400:3148","0:401:3154"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:42130:10112-0:595:2048":{"id":"a:2:42130:10112-0:595:2048","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'addr","kind":{"lifetime":{"outlives":[]}}},{"name":"'bufs","kind":{"lifetime":{"outlives":[]}}},{"name":"'control","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:42130:10112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MsgHdrMut","id":"0:595:2048","args":{"angle_bracketed":{"args":[{"lifetime":"'addr"},{"lifetime":"'bufs"},{"lifetime":"'control"}],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"b:2:2726-0:595:2048":{"id":"b:2:2726-0:595:2048","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2703:142","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2700:160","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"MsgHdrMut","id":"0:595:2048","args":{"angle_bracketed":{"args":[{"lifetime":"'addr"},{"lifetime":"'bufs"},{"lifetime":"'control"}],"bindings":[]}}}},"items":["2:2729:2293"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:396":{"id":"0:396","crate_id":0,"name":null,"span":{"filename":"src/sys/unix.rs","begin":[347,0],"end":[369,1]},"visibility":"default","docs":"Unix only API.","links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"crate::Domain","id":"0:648:1886","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:564":{"id":"0:564","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[409,0],"end":[415,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Deref","id":"2:3098:124","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MaybeUninitSlice","id":"0:554:1969","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["0:566:256","0:567:597"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12823:3774":{"id":"2:12823:3774","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::rmatches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"2:12443:21477","`DoubleEndedIterator`":"2:7826:128","prim@char":"1:12034:452","str::rmatches":"2:12826:35135"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Matches","id":"2:44106:14388","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12448:15137","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:137:2509":{"id":"0:137:2509","crate_id":0,"name":"recv","span":{"filename":"src/socket.rs","begin":[419,4],"end":[421,5]},"visibility":"public","docs":"Receives data on the socket from the remote address to which it is\nconnected.\n\nThe [`connect`] method will connect this socket to a remote address.\nThis method might fail if the socket is not connected.\n\nAdditional documentation can be found in manual of the OS:\n\n * DragonFly BSD: <https://man.dragonflybsd.org/?command=recv&section=2>\n * FreeBSD: <https://www.freebsd.org/cgi/man.cgi?query=recv&sektion=2>\n * Linux: <https://man7.org/linux/man-pages/man2/recv.2.html>\n * macOS: <https://developer.apple.com/library/archive/documentation/System/Conceptual/ManPages_iPhoneOS/man2/recv.2.html> (archived, actually for iOS)\n * NetBSD: <https://man.netbsd.org/recv.2>\n * OpenBSD: <https://man.openbsd.org/recv.2>\n * iOS: <https://developer.apple.com/library/archive/documentation/System/Conceptual/ManPages_iPhoneOS/man2/recv.2.html> (archived)\n * illumos: <https://illumos.org/man/3SOCKET/recv>\n * Windows: <https://docs.microsoft.com/en-us/windows/win32/api/winsock2/nf-winsock2-recv>\n\n[`connect`]: Socket::connect\n\n# Safety\n\nNormally casting a `&mut [u8]` to `&mut [MaybeUninit<u8>]` would be\nunsound, as that allows us to write uninitialised bytes to the buffer.\nHowever this implementation promises to not write uninitialised bytes to\nthe `buf`fer and passes it directly to `recv(2)` system call. This\npromise ensures that this function can be called using a `buf`fer of\ntype `&mut [u8]`.\n\nNote that the [`io::Read::read`] implementation calls this function with\na `buf`fer of type `&mut [u8]`, allowing initialised buffers to be used\nwithout using `unsafe`.","links":{"`io::Read::read`":"1:3426:3036","Socket::connect":"0:125:2422"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["buf",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"resolved_path":{"name":"MaybeUninit","id":"2:30596:1818","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u8"}}],"bindings":[]}}}}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:2944:233","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2736-0:684:1959":{"id":"b:2:2736-0:684:1959","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2710:264","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2706:265","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RecvFlags","id":"0:684:1959","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2739:135","2:2740:1621"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:517":{"id":"0:517","crate_id":0,"name":null,"span":{"filename":"src/sys/unix.rs","begin":[3066,0],"end":[3071,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2703:142","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"OwnedFd","id":"1:4798:3102","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"crate::Socket","id":"0:114:1872","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:518:746"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:131:2471":{"id":"0:131:2471","crate_id":0,"name":"local_addr","span":{"filename":"src/socket.rs","begin":[321,4],"end":[323,5]},"visibility":"public","docs":"Returns the socket address of the local half of this socket.\n\nThis function directly corresponds to the `getsockname(2)` function on\nWindows and Unix.\n\nAdditional documentation can be found in manual of the OS:\n\n * DragonFly BSD: <https://man.dragonflybsd.org/?command=getsockname&section=2>\n * FreeBSD: <https://www.freebsd.org/cgi/man.cgi?query=getsockname&sektion=2>\n * Linux: <https://man7.org/linux/man-pages/man2/getsockname.2.html>\n * macOS: <https://developer.apple.com/library/archive/documentation/System/Conceptual/ManPages_iPhoneOS/man2/getsockname.2.html> (archived, actually for iOS)\n * NetBSD: <https://man.netbsd.org/getsockname.2>\n * OpenBSD: <https://man.openbsd.org/getsockname.2>\n * iOS: <https://developer.apple.com/library/archive/documentation/System/Conceptual/ManPages_iPhoneOS/man2/getsockname.2.html> (archived)\n * illumos: <https://illumos.org/man/3SOCKET/getsockname>\n * Windows: <https://docs.microsoft.com/en-us/windows/win32/api/winsock2/nf-winsock2-getsockname>\n\n# Notes\n\nDepending on the OS this may return an error if the socket is not\n[bound].\n\n[bound]: Socket::bind","links":{"Socket::bind":"0:124:2416"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:2944:233","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"SockAddr","id":"0:616:1871","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:32500:3864-0:672:1925":{"id":"a:2:32500:3864-0:672:1925","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32500:3864","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Protocol","id":"0:672:1925","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:688":{"id":"0:688","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[368,15],"end":[368,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2439:111","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RecvFlags","id":"0:684:1959","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:689:456"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:42130:10112-0:575:2011":{"id":"a:2:42130:10112-0:575:2011","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'addr","kind":{"lifetime":{"outlives":[]}}},{"name":"'bufs","kind":{"lifetime":{"outlives":[]}}},{"name":"'control","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:42130:10112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MsgHdr","id":"0:575:2011","args":{"angle_bracketed":{"args":[{"lifetime":"'addr"},{"lifetime":"'bufs"},{"lifetime":"'control"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:12843:35143":{"id":"2:12843:35143","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"1:12034:452","self::pattern":"2:12443:21477"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12448:15137","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12448:15137","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"2:12468:21474","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:665:456":{"id":"0:665:456","crate_id":0,"name":"clone","span":{"filename":"src/lib.rs","begin":[251,15],"end":[251,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Type","id":"0:660:1902","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2730-0:672:1925":{"id":"b:2:2730-0:672:1925","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2703:142","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Protocol","id":"0:672:1925","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2732:746"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:32418:244-0:114:1872":{"id":"a:2:32418:244-0:114:1872","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:32418:244","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Socket","id":"0:114:1872","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"5:690:10537":{"id":"5:690:10537","crate_id":5,"name":"to_owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:117":{"id":"0:117","crate_id":0,"name":null,"span":{"filename":"src/socket.rs","begin":[82,0],"end":[751,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Socket","id":"0:114:1872","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:121:1039","0:122:2400","0:124:2416","0:125:2422","0:126:2442","0:127:2453","0:128:2459","0:129:2462","0:131:2471","0:132:2477","0:133:34","0:134:2490","0:135:2444","0:136:2503","0:137:2509","0:138:2527","0:139:2520","0:140:2545","0:141:2546","0:142:2559","0:143:2565","0:144:2566","0:145:2573","0:146:2574","0:147:2593","0:148:2598","0:149:2535","0:150:2609","0:151:2610","0:152:2615","0:153:2616","0:154:2624","0:155:2629","0:156:2630","0:157:2636","0:158:2637","0:159:2619"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:3495-0:270:1873":{"id":"b:2:3495-0:270:1873","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:32419:3863","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3493:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"SockRef","id":"0:270:1873","args":{"angle_bracketed":{"args":[{"lifetime":"'s"}],"bindings":[]}}}},"items":["2:3497:1634"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:190":{"id":"0:190","crate_id":0,"name":null,"span":{"filename":"src/socket.rs","begin":[1107,0],"end":[1570,1]},"visibility":"default","docs":"Socket options for IPv4 sockets, get/set using `IPPROTO_IP`.\n\nAdditional documentation can be found in documentation of the OS.\n* Linux: <https://man7.org/linux/man-pages/man7/ip.7.html>\n* Windows: <https://docs.microsoft.com/en-us/windows/win32/winsock/ipproto-ip-socket-options>","links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Socket","id":"0:114:1872","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:191:2812","0:192:2823","0:193:2829","0:194:2834","0:195:2839","0:196:2849","0:197:2854","0:198:2858","0:199:2862","0:201:2868","0:202:2872","0:204:2879","0:205:2874","0:207:2887","0:208:2893","0:209:2894","0:211:2903","0:212:2904"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:681":{"id":"0:681","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[305,26],"end":[305,35]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"2:32420:252","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Protocol","id":"0:672:1925","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:2425:3764":{"id":"2:2425:3764","crate_id":2,"name":"borrow","span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[rustc_diagnostic_item = \"noop_method_borrow\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2423-0:114:1872":{"id":"b:2:2423-0:114:1872","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32419:3863","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2417:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Socket","id":"0:114:1872","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2425:3764"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:544:1930":{"id":"0:544:1930","crate_id":0,"name":"ICMPV6","span":{"filename":"src/lib.rs","begin":[313,4],"end":[313,63]},"visibility":"public","docs":"Protocol corresponding to `ICMPv6`.","links":{},"attrs":[],"deprecation":null,"inner":{"assoc_const":{"type":{"resolved_path":{"name":"Protocol","id":"0:672:1925","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"default":"_"}}},"b:2:2423-0:575:2011":{"id":"b:2:2423-0:575:2011","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32419:3863","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2417:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"MsgHdr","id":"0:575:2011","args":{"angle_bracketed":{"args":[{"lifetime":"'addr"},{"lifetime":"'bufs"},{"lifetime":"'control"}],"bindings":[]}}}},"items":["2:2425:3764"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:3495-0:616:1871":{"id":"b:2:3495-0:616:1871","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:32419:3863","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3493:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"SockAddr","id":"0:616:1871","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3497:1634"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2741-0:660:1902":{"id":"b:2:2741-0:660:1902","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2700:160","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2710:264","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Type","id":"0:660:1902","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2744:135","2:2745:1619"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:42130:10112-0:672:1925":{"id":"a:2:42130:10112-0:672:1925","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:42130:10112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Protocol","id":"0:672:1925","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:515":{"id":"0:515","crate_id":0,"name":null,"span":{"filename":"src/sys/unix.rs","begin":[3059,0],"end":[3063,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"IntoRawFd","id":"1:4744:2349","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"crate::Socket","id":"0:114:1872","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:516:1837"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:570:599":{"id":"0:570:599","crate_id":0,"name":"deref_mut","span":{"filename":"src/lib.rs","begin":[418,4],"end":[420,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"resolved_path":{"name":"MaybeUninit","id":"2:30596:1818","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u8"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:142:2559":{"id":"0:142:2559","crate_id":0,"name":"peek","span":{"filename":"src/socket.rs","begin":[516,4],"end":[518,5]},"visibility":"public","docs":"Receives data on the socket from the remote adress to which it is\nconnected, without removing that data from the queue. On success,\nreturns the number of bytes peeked.\n\nSuccessive calls return the same data. This is accomplished by passing\n`MSG_PEEK` as a flag to the underlying `recv` system call.\n\n# Safety\n\n`peek` makes the same safety guarantees regarding the `buf`fer as\n[`recv`].\n\n[`recv`]: Socket::recv","links":{"Socket::recv":"0:137:2509"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["buf",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"resolved_path":{"name":"MaybeUninit","id":"2:30596:1818","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u8"}}],"bindings":[]}}}}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:2944:233","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:223:2949":{"id":"0:223:2949","crate_id":0,"name":"multicast_loop_v6","span":{"filename":"src/socket.rs","begin":[1687,4],"end":[1692,5]},"visibility":"public","docs":"Get the value of the `IPV6_MULTICAST_LOOP` option for this socket.\n\nFor more information about this option, see [`set_multicast_loop_v6`].\n\n[`set_multicast_loop_v6`]: Socket::set_multicast_loop_v6","links":{"Socket::set_multicast_loop_v6":"0:225:2955"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:2944:233","args":{"angle_bracketed":{"args":[{"type":{"primitive":"bool"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2730-0:621:1878":{"id":"b:2:2730-0:621:1878","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2703:142","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"InterfaceIndexOrAddress","id":"0:621:1878","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2732:746"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:32500:3864-0:660:1902":{"id":"a:2:32500:3864-0:660:1902","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32500:3864","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Type","id":"0:660:1902","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:12788:10516":{"id":"2:12788:10516","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('√©'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"2:42004:198","prim@char":"1:12034:452","self::pattern":"2:12443:21477"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42002:201","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12448:15137","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:42131:10111-0:595:2048":{"id":"a:2:42131:10111-0:595:2048","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'addr","kind":{"lifetime":{"outlives":[]}}},{"name":"'bufs","kind":{"lifetime":{"outlives":[]}}},{"name":"'control","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:42131:10111","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MsgHdrMut","id":"0:595:2048","args":{"angle_bracketed":{"args":[{"lifetime":"'addr"},{"lifetime":"'bufs"},{"lifetime":"'control"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:601":{"id":"0:601","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[672,0],"end":[715,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(target_os = \"redox\"))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'addr","kind":{"lifetime":{"outlives":[]}}},{"name":"'bufs","kind":{"lifetime":{"outlives":[]}}},{"name":"'control","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"MsgHdrMut","id":"0:595:2048","args":{"angle_bracketed":{"args":[{"lifetime":"'addr"},{"lifetime":"'bufs"},{"lifetime":"'control"}],"bindings":[]}}}},"items":["0:605:1039","0:606:2025","0:607:2031","0:608:2037","0:609:2042"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:60:2272":{"id":"0:60:2272","crate_id":0,"name":"as_socket","span":{"filename":"src/sockaddr.rs","begin":[210,4],"end":[238,5]},"visibility":"public","docs":"Returns this address as a `SocketAddr` if it is in the `AF_INET` (IPv4)\nor `AF_INET6` (IPv6) family, otherwise returns `None`.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:42002:201","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"SocketAddr","id":"2:41939:1820","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:619":{"id":"0:619","crate_id":0,"name":null,"span":{"filename":"src/sockaddr.rs","begin":[20,9],"end":[20,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2439:111","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"SockAddr","id":"0:616:1871","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:620:456"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:276:256":{"id":"0:276:256","crate_id":0,"name":"Target","span":{"filename":"src/sockref.rs","begin":[72,4],"end":[72,25]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Socket","id":"0:114:1872","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"0:541:746":{"id":"0:541:746","crate_id":0,"name":"from","span":{"filename":"src/lib.rs","begin":[293,4],"end":[295,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["t",{"resolved_path":{"name":"Type","id":"0:660:1902","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"c_int","id":"20:44:1870","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12776:29147":{"id":"2:12776:29147","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nNote that any carriage return (`\\r`) not immediately followed by a\nline feed (`\\n`) does not split a line. These carriage returns are\nthereby included in the produced lines.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\r\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\n// Trailing carriage return is included in the last line\nassert_eq!(Some(\"baz\\r\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line does not require any ending:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Lines","id":"2:44156:3820","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}}},"paths":{"2:1905:10150":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"18:644:12065":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"17:12701:12304":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"16:5017:13159":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"2:9833:233":{"crate_id":2,"path":["core","fmt","Result"],"kind":"type_alias"},"2:44319:14402":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"14:187:22103":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"20:8302:8523":{"crate_id":20,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"2:3736:10481":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"2:47872:13923":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"17:12140:15013":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"5:7423:3972":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"1:945:15103":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"1:8332:4190":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"20:6443:9038":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"2:5592:3802":{"crate_id":2,"path":["core","iter","adapters","filter","next_chunk","Guard"],"kind":"struct"},"5:1789:11044":{"crate_id":5,"path":["alloc","collections","btree","map","ExtractIf"],"kind":"struct"},"2:48012:13925":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"2:44882:13829":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"1:8922:16299":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"2:39584:3927":{"crate_id":2,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"1:1902:16230":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"1:2622:3826":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"17:11065:12208":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"1:4964:16275":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"20:6685:9056":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","sockaddr_xdp"],"kind":"struct"},"2:41240:13799":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"17:13026:12322":{"crate_id":17,"path":["object","archive","AixHeader"],"kind":"struct"},"11:687:10572":{"crate_id":11,"path":["hashbrown","map","IterMut"],"kind":"struct"},"20:6694:9057":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","xdp_ring_offset"],"kind":"struct"},"20:6437:9037":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"5:2144:11023":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"17:13448:12373":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"17:9624:23069":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"20:6528:9043":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"2:9894:10644":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"20:838:1895":{"crate_id":20,"path":["libc","unix","linux_like","AF_UNIX"],"kind":"constant"},"1:9023:15193":{"crate_id":1,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"2:22639:13579":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"17:11226:14967":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"1:12053:1641":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"17:13407:12361":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"16:6485:13109":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"2:2710:264":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"17:12191:12268":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"6:4480:8277":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"1:3994:16255":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"2:4513:10700":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"1:5971:11104":{"crate_id":1,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"2:44024:10579":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"16:8294:135":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"2:41773:2316":{"crate_id":2,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"6:1528:2179":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"5:1536:15119":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"2:3372:3936":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"17:14181:12523":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"13:0:3669":{"crate_id":13,"path":["std_detect"],"kind":"module"},"1:8906:16300":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"17:15680:12953":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"2:22328:16409":{"crate_id":2,"path":["core","core_simd","simd","cmp","eq","SimdPartialEq"],"kind":"trait"},"2:3338:3931":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"11:2383:3969":{"crate_id":11,"path":["hashbrown","table","Iter"],"kind":"struct"},"1:4042:16258":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"17:14439:12564":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"6:5867:9035":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"17:12596:15027":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"1:7138:32717":{"crate_id":1,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"20:5035:8292":{"crate_id":20,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"16:2339:13076":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"2:32418:244":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"1:11193:13985":{"crate_id":1,"path":["std","sys","pal","unix","time","Timespec"],"kind":"struct"},"1:10716:15209":{"crate_id":1,"path":["std","sys","pal","unix","fd","FileDesc"],"kind":"struct"},"1:5415:14779":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"17:15244:12816":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"1:6811:16325":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"1:8209:3823":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"2:21564:16247":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"16:3764:13134":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"5:4777:719":{"crate_id":5,"path":["alloc","fmt"],"kind":"module"},"2:9886:10638":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"2:21221:34049":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"1:10299:112":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Command"],"kind":"struct"},"6:7651:8522":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"2:3011:3906":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"16:5760:23023":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"6:1537:2180":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"20:8193:9995":{"crate_id":20,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"1:5746:15167":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"2:46229:13847":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"1:1072:15109":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"6:4535:8284":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"2:7111:10489":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"2:40530:32821":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"2:41230:11072":{"crate_id":2,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"18:548:150":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"2:44637:14426":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"16:8050:13337":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"20:6431:9036":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"20:5366:8323":{"crate_id":20,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"6:6711:9473":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"2:12457:14052":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"2:42132:10420":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"2:45895:13833":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"16:7128:13974":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"6:6086:9050":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"6:5075:8346":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"18:624:36208":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"20:1029:2940":{"crate_id":20,"path":["libc","unix","linux_like","IPV6_MULTICAST_IF"],"kind":"constant"},"6:5009:8335":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"17:10608:14951":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"5:3581:180":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"17:12009:12217":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"6:5885:9036":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"17:14455:12566":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"1:8537:3968":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"17:13235:12342":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"2:38281:3922":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"2:32921:3905":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"16:8072:13338":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"1:7028:11112":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"5:4366:271":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"20:8032:2675":{"crate_id":20,"path":["libc","unix","linux_like","linux","arch","generic","SO_ERROR"],"kind":"constant"},"20:6456:2016":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"2:4114:15133":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"1:4311:3104":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"17:15267:12824":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"6:1632:5234":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"1:1556:14260":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"2:42556:91":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"2:43055:135":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"2:32533:113":{"crate_id":2,"path":["core","marker","ConstParamTy"],"kind":"trait"},"6:4506:8280":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"1:4383:3105":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"1:4625:16255":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"2:12443:21477":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"2:46659:13862":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"2:45985:13837":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"17:15855:12335":{"crate_id":17,"path":["object","xcoff","FileHeader64"],"kind":"struct"},"5:5992:11039":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"1:9036:13974":{"crate_id":1,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"1:8171:3819":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"16:6268:36194":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"17:11536:14067":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"16:4889:13155":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"11:875:15103":{"crate_id":11,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"2:9882:127":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"16:2284:22135":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"6:6718:4190":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"11:811:11044":{"crate_id":11,"path":["hashbrown","map","ExtractIf"],"kind":"struct"},"16:4053:13139":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"1:10800:1815":{"crate_id":1,"path":["std","sys","pal","unix","io","IoSlice"],"kind":"struct"},"2:40780:14347":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"20:5273:8313":{"crate_id":20,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"2:31164:203":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"1:5625:227":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"1:2202:15163":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"2:12403:3974":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"2:43816:10574":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"2:30596:1818":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"20:5325:8318":{"crate_id":20,"path":["libc","unix","linux_like","linux","seccomp_notif_sizes"],"kind":"struct"},"17:12244:14084":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"6:5085:8347":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"2:10530:246":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"20:6702:9058":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","xdp_mmap_offsets"],"kind":"struct"},"1:11372:14497":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"1:12050:795":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"6:4710:8301":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"1:10556:11119":{"crate_id":1,"path":["std","sys","pal","unix","thread","Thread"],"kind":"struct"},"2:40842:14352":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"16:2526:13089":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"17:14765:12688":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"17:16098:13055":{"crate_id":17,"path":["object","xcoff","ExpAux"],"kind":"struct"},"17:10559:14950":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"2:9541:33416":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"1:12035:1659":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"2:43784:10559":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"2:22604:14306":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"2:3111:1822":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"17:11439:14978":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"1:11614:14457":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"1:7382:29335":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"2:46091:13841":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"20:5594:8347":{"crate_id":20,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"20:7028:1910":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","SOCK_DGRAM"],"kind":"constant"},"16:6583:14192":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"9:393:22010":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"18:636:12083":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"2:9877:118":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"20:937:2883":{"crate_id":20,"path":["libc","unix","linux_like","IP_TTL"],"kind":"constant"},"2:22091:16413":{"crate_id":2,"path":["core","core_simd","simd","num","float","SimdFloat"],"kind":"trait"},"6:4610:8293":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"2:46170:13844":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"16:6687:14196":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"2:13044:162":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"2:21881:13572":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"2:40982:3822":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"1:10818:28347":{"crate_id":1,"path":["std","sys","pal","unix","kernel_copy","SpliceMode"],"kind":"enum"},"11:2352:15106":{"crate_id":11,"path":["hashbrown","table","VacantEntry"],"kind":"struct"},"2:46486:13856":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"1:12057:1698":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"20:8031:2481":{"crate_id":20,"path":["libc","unix","linux_like","linux","arch","generic","SO_TYPE"],"kind":"constant"},"16:2644:13094":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"2:10725:3824":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"14:221:13426":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"17:15337:12841":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"17:15868:12983":{"crate_id":17,"path":["object","xcoff","AuxHeader32"],"kind":"struct"},"16:7534:13121":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"6:6691:9471":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"2:21204:34043":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_elements_right","Rotate"],"kind":"struct"},"17:10337:12195":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"17:13856:12457":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"16:2504:13088":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"6:7610:8516":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"17:11469:14980":{"crate_id":17,"path":["object","read","elf","note","GnuProperty"],"kind":"struct"},"1:12052:1640":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"20:6759:9065":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","xdp_options"],"kind":"struct"},"20:5240:8310":{"crate_id":20,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"1:4798:3102":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"6:1501:3111":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"1:3163:15857":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"9:486:22008":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"17:13695:12436":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"5:6117:3802":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"20:56:3106":{"crate_id":20,"path":["libc","unix","ssize_t"],"kind":"type_alias"},"20:5626:8350":{"crate_id":20,"path":["libc","unix","linux_like","linux","ifconf"],"kind":"struct"},"0:696:1979":{"crate_id":0,"path":["socket2","TcpKeepalive"],"kind":"struct"},"2:22175:16415":{"crate_id":2,"path":["core","core_simd","simd","num","uint","SimdUint"],"kind":"trait"},"5:7297:11026":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"2:47762:13922":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"20:4893:8275":{"crate_id":20,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"17:14087:12506":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"2:43920:10577":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"7:31:21995":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"17:11476:14263":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"2:44895:178":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"1:3510:3814":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"5:2703:13564":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"1:5431:14780":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"2:42982:10149":{"crate_id":2,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"16:3232:13073":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"17:11727:14996":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"20:8324:8525":{"crate_id":20,"path":["libc","unix","linux_like","linux","canxl_frame"],"kind":"struct"},"2:41248:14363":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"18:652:12065":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"6:1718:5242":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"1:11539:3042":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"2:42515:96":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"17:15079:12775":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"5:4182:3802":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"6:7598:8514":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"1:588:16173":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"11:700:10481":{"crate_id":11,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"20:1007:1940":{"crate_id":20,"path":["libc","unix","linux_like","IPPROTO_MPTCP"],"kind":"constant"},"17:11052:14952":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"16:5322:13163":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"6:5123:8351":{"crate_id":6,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"2:40379:32818":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"20:1690:3161":{"crate_id":20,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"20:1678:5240":{"crate_id":20,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"11:2369:15115":{"crate_id":11,"path":["hashbrown","table","AbsentEntry"],"kind":"struct"},"17:12548:15023":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdat"],"kind":"struct"},"1:4639:11956":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"14:215:14248":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"2:47264:13889":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"17:11701:14991":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"5:2256:14274":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"5:2154:14267":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"11:2151:15106":{"crate_id":11,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"20:1669:5239":{"crate_id":20,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"1:3394:3802":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"2:7503:3850":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"20:1028:2959":{"crate_id":20,"path":["libc","unix","linux_like","IPV6_UNICAST_HOPS"],"kind":"constant"},"2:40751:14344":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"6:4603:8292":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"20:1080:3028":{"crate_id":20,"path":["libc","unix","linux_like","TCP_NODELAY"],"kind":"constant"},"2:2323:636":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"2:46608:13861":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"2:6489:14292":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindowsInner"],"kind":"struct"},"1:5395:14778":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"1:363:15149":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"2:1882:10151":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"16:4921:13156":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"20:948:2905":{"crate_id":20,"path":["libc","unix","linux_like","IP_RECVTOS"],"kind":"constant"},"16:7523:14233":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"17:12459:12206":{"crate_id":17,"path":["object","read","xcoff","section","SectionTable"],"kind":"struct"},"2:39701:223":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"6:4824:8311":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"17:14426:12563":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"6:1558:5228":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"2:22442:14300":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"17:13285:12347":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"18:113:27220":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"20:5246:3186":{"crate_id":20,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"20:1557:5229":{"crate_id":20,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"16:2380:13083":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"16:6456:14180":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"1:10510:3843":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stdin"],"kind":"struct"},"1:859:10481":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"1:3482:2344":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"17:12202:23216":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"1:8302:3894":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"1:2354:16235":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"20:4988:8287":{"crate_id":20,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"16:5866:14129":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"1:7531:12181":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"1:8003:15180":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"1:12051:1643":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"2:43274:3965":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"2:42972:13810":{"crate_id":2,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"17:15566:12919":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"6:1576:5230":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"2:22357:16410":{"crate_id":2,"path":["core","core_simd","simd","cmp","ord","SimdPartialOrd"],"kind":"trait"},"2:10099:150":{"crate_id":2,"path":["core","hash","macros","Hash"],"kind":"proc_derive"},"17:15212:12808":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"6:4556:8287":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"1:357:15148":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"1:9445:136":{"crate_id":1,"path":["std","sys","pal","unix","fs","File"],"kind":"struct"},"6:5015:8340":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"1:7719:16179":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"1:6543:16295":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"20:1501:3112":{"crate_id":20,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"20:6911:9100":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"20:1483:3108":{"crate_id":20,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"2:10246:11074":{"crate_id":2,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"1:8816:13966":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"1:5632:11104":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"11:328:14254":{"crate_id":11,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"18:590:12073":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"18:736:27229":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"5:4411:3802":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"6:4814:3186":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"5:4092:10572":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"17:13633:12422":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"6:4884:8317":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"1:3980:16253":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"1:6610:11109":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutexGuard"],"kind":"struct"},"2:21453:16330":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"17:10242:12192":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"5:2983:16006":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"17:9968:23093":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"2:41819:13807":{"crate_id":2,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"1:8283:10809":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"5:4865:224":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"2:4998:856":{"crate_id":2,"path":["core","iter"],"kind":"module"},"6:6813:9476":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"0:595:2048":{"crate_id":0,"path":["socket2","MsgHdrMut"],"kind":"struct"},"17:2031:14938":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"1:8215:3824":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"1:3278:3841":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"20:7408:5349":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"16:3655:12096":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"17:15480:12892":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"17:15659:12947":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"17:13948:12471":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"17:15200:12802":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"5:6872:11055":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstBufDrop"],"kind":"struct"},"1:8455:3965":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"1:9028:15194":{"crate_id":1,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"1:8830:13967":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"20:6725:9061":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","xdp_umem_reg"],"kind":"struct"},"17:15710:12958":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"2:46370:13853":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"5:7560:15130":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"17:11243:14970":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"16:7503:13120":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"2:39776:13667":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"6:7365:9854":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"20:936:2895":{"crate_id":20,"path":["libc","unix","linux_like","IP_TOS"],"kind":"constant"},"17:15235:12813":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"2:2996:3903":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"17:12850:12272":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"1:10316:16014":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Argv"],"kind":"struct"},"5:6484:11026":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"6:6658:4448":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"5:4050:11007":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"6:6682:4284":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"5:6960:270":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"6:5969:9041":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"16:7597:36191":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"2:12674:118":{"crate_id":2,"path":["core","str","lossy","Debug"],"kind":"struct"},"6:5859:9034":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"1:11621:14457":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"18:538:12070":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"1:9096:184":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"6:119:4432":{"crate_id":6,"path":["libc","unix","FILE"],"kind":"enum"},"2:44304:14396":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"14:7:15093":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"16:5743:14117":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"2:40672:14331":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"6:1710:2181":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"2:12259:10583":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"17:12366:23217":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"1:10931:14777":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Stdio"],"kind":"enum"},"1:3988:16254":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"20:5577:8345":{"crate_id":20,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"16:7436:13281":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"17:15527:12910":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"16:8154:15089":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"2:32388:13280":{"crate_id":2,"path":["core","error","tags","Value"],"kind":"struct"},"2:48254:13934":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"16:5088:13161":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"6:4738:3981":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"18:690:14049":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"2:13235:114":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"17:15027:12760":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"16:3315:13131":{"crate_id":16,"path":["gimli","arch","LoongArch"],"kind":"struct"},"2:30333:16250":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"5:4212:3802":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"17:14194:12525":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"2:40812:14350":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"2:43724:10566":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"2:22564:14302":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"16:6171:213":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"2:40395:13797":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"1:11607:28405":{"crate_id":1,"path":["std","panicking","panic_count","MustAbort"],"kind":"enum"},"11:1566:22091":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"1:5780:15171":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"17:10667:36204":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"1:12046:800":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"1:2209:3810":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"17:10785:36203":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"2:10141:3952":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"20:5584:8346":{"crate_id":20,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"2:21447:16327":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"2:44201:14323":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"2:39679:221":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"20:6558:9045":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"16:2722:13097":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"17:1203:14937":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"11:1066:22090":{"crate_id":11,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"20:969:2850":{"crate_id":20,"path":["libc","unix","linux_like","IP_DROP_SOURCE_MEMBERSHIP"],"kind":"constant"},"2:43872:14375":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"20:7598:9485":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"2:21573:16328":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"2:42120:10109":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"1:9071:13977":{"crate_id":1,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"20:544:4408":{"crate_id":20,"path":["libc","unix","winsize"],"kind":"struct"},"1:6985:29347":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"2:48371:13941":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"17:13676:12431":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"2:2439:111":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"20:99:1928":{"crate_id":20,"path":["libc","unix","IPPROTO_ICMP"],"kind":"constant"},"17:10813:36206":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"20:4948:8281":{"crate_id":20,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"16:5435:13165":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"2:44333:14405":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"1:11357:14452":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"2:10093:150":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"17:11743:14998":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"6:4755:8304":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"20:4967:8284":{"crate_id":20,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"6:6222:9098":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"17:13182:12339":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"2:10880:10577":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"17:16004:13031":{"crate_id":17,"path":["object","xcoff","Symbol64"],"kind":"struct"},"2:45961:13836":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"2:22843:196":{"crate_id":2,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"17:13491:12389":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"2:47230:13888":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"20:968:2845":{"crate_id":20,"path":["libc","unix","linux_like","IP_ADD_SOURCE_MEMBERSHIP"],"kind":"constant"},"16:2810:13101":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"20:7310:5188":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"2:42746:10646":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"11:800:11026":{"crate_id":11,"path":["hashbrown","map","Drain"],"kind":"struct"},"2:22693:32830":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"17:14778:12694":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"16:5661:14110":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"17:12572:15025":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegmentIterator"],"kind":"struct"},"0:684:1959":{"crate_id":0,"path":["socket2","RecvFlags"],"kind":"struct"},"2:33900:3914":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"17:10355:136":{"crate_id":17,"path":["object","read","any","File"],"kind":"enum"},"2:22313:16247":{"crate_id":2,"path":["core","core_simd","simd","ptr","sealed","Sealed"],"kind":"trait"},"6:4488:8278":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"20:5215:8307":{"crate_id":20,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"6:563:2690":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"17:14170:12522":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"20:577:4412":{"crate_id":20,"path":["libc","unix","servent"],"kind":"struct"},"1:504:11023":{"crate_id":1,"path":["std","thread","PanicGuard"],"kind":"struct"},"6:1639:5235":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"16:6401:13108":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"18:0:3680":{"crate_id":18,"path":["memchr"],"kind":"module"},"2:44645:14428":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"2:40760:14345":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"2:40409:14320":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"17:15943:12338":{"crate_id":17,"path":["object","xcoff","SectionHeader32"],"kind":"struct"},"2:2777:123":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"11:396:10999":{"crate_id":11,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"11:299:14251":{"crate_id":11,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"17:12445:15021":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSection"],"kind":"struct"},"1:3966:16252":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"17:10915:14955":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"2:1617:1817":{"crate_id":2,"path":["core","mem"],"kind":"module"},"2:3493:71":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"1:11029:11123":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"2:41926:3895":{"crate_id":2,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"11:0:3674":{"crate_id":11,"path":["hashbrown"],"kind":"module"},"16:536:14099":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"20:6674:9055":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"5:6351:16419":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"5:7029:11059":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"2:40650:15144":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"17:14346:12555":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"20:4955:8282":{"crate_id":20,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"17:12410:12283":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"16:4949:13157":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"2:21466:13571":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"11:1728:153":{"crate_id":11,"path":["hashbrown","set","HashSet"],"kind":"struct"},"17:11001:14961":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"6:6913:9482":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"5:4252:3969":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"6:4616:8294":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"18:671:14931":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"2:38171:3920":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"2:9354:92":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"2:42739:10639":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"2:30630:32802":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum16"],"kind":"enum"},"2:46538:13858":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"2:44839:214":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"2:47950:13924":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"11:2554:36174":{"crate_id":11,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"1:7665:15174":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"17:11369:12223":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"5:5961:72":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"17:10051:12185":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"16:6346:15068":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"16:7360:36195":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"2:9896:10645":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"17:12797:12307":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"6:4800:8309":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"17:9813:23090":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"2:41790:3891":{"crate_id":2,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"2:43826:10575":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"11:1007:14228":{"crate_id":11,"path":["hashbrown","map","Entry"],"kind":"enum"},"16:6879:13220":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"1:4491:16261":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"2:21182:3992":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"16:4462:13142":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"1:8239:2346":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"2:2536:3097":{"crate_id":2,"path":["core","cmp","min"],"kind":"function"},"16:2933:22162":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"20:5302:3539":{"crate_id":20,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"2:13339:10556":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"2:42002:201":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"11:774:14257":{"crate_id":11,"path":["hashbrown","map","Keys"],"kind":"struct"},"17:12387:23218":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"14:40:12336":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"1:2352:10128":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"17:13909:12466":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"6:6898:9481":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"2:36295:3919":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"6:7702:3107":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"2:45915:13834":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"1:12037:1152":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"1:8980:114":{"crate_id":1,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"5:3607:10572":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"6:4724:8302":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"2:42217:203":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"20:1524:2180":{"crate_id":20,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"2:31192:3992":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"17:15507:12904":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"17:11958:12260":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"1:1538:10481":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"2:7797:10036":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"11:2231:14263":{"crate_id":11,"path":["hashbrown","table","HashTable"],"kind":"struct"},"1:8547:3969":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"20:496:4406":{"crate_id":20,"path":["libc","unix","rusage"],"kind":"struct"},"2:44176:14391":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"1:9457:11117":{"crate_id":1,"path":["std","sys","pal","unix","fs","Dir"],"kind":"struct"},"2:34246:3916":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"2:40803:14349":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"16:6467:14181":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"11:123:10995":{"crate_id":11,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"1:5639:14434":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"11:787:14258":{"crate_id":11,"path":["hashbrown","map","Values"],"kind":"struct"},"20:5542:8342":{"crate_id":20,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"20:8049:2759":{"crate_id":20,"path":["libc","unix","linux_like","linux","arch","generic","SO_SNDTIMEO"],"kind":"constant"},"20:6474:9040":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"17:15493:12898":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"20:8036:2720":{"crate_id":20,"path":["libc","unix","linux_like","linux","arch","generic","SO_RCVBUF"],"kind":"constant"},"17:11497:12224":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"17:15037:12761":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"2:40431:14322":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"6:4595:8291":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"16:3049:22164":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"17:15003:12758":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"17:9730:23087":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"20:104:2919":{"crate_id":20,"path":["libc","unix","IPPROTO_IPV6"],"kind":"constant"},"6:6159:9068":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"11:1923:14262":{"crate_id":11,"path":["hashbrown","set","Union"],"kind":"struct"},"1:2662:3836":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"20:1651:5237":{"crate_id":20,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"2:40350:14317":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"20:4872:8273":{"crate_id":20,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"16:6083:22134":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"2:42595:98":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"1:1534:3969":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"16:6600:23027":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"1:8844:13968":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"6:4461:8275":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"17:13145:12336":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"6:6961:9485":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"20:464:2841":{"crate_id":20,"path":["libc","unix","group"],"kind":"struct"},"2:2658:21545":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"1:11243:13986":{"crate_id":1,"path":["std","sys","personality","dwarf","eh","EHContext"],"kind":"struct"},"20:5357:8322":{"crate_id":20,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"20:0:880":{"crate_id":20,"path":["libc"],"kind":"module"},"20:5048:8294":{"crate_id":20,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"17:13869:12460":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"1:2380:16244":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"2:7751:21694":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"1:11122:13966":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","ExitStatus"],"kind":"struct"},"2:12185:14383":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"17:3460:14944":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"17:16134:13062":{"crate_id":17,"path":["object","xcoff","StatAux"],"kind":"struct"},"20:7344:9472":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"16:6915:13117":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"20:7533:9480":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"16:7015:13230":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"1:8564:3971":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"11:1025:15105":{"crate_id":11,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"0:648:1886":{"crate_id":0,"path":["socket2","Domain"],"kind":"struct"},"2:44476:21490":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"5:2183:14269":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"2:7826:128":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"20:6784:11868":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"16:7736:13291":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"6:4932:8327":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"1:7691:11119":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"17:11666:14079":{"crate_id":17,"path":["object","read","elf","attributes","AttributeReader"],"kind":"struct"},"1:1743:659":{"crate_id":1,"path":["std","env"],"kind":"module"},"6:1596:5232":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"6:4947:8328":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"17:15192:12801":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"17:13419:12362":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"20:4881:8274":{"crate_id":20,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"17:14359:12556":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"17:14385:12558":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"2:40466:14325":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"20:5485:8337":{"crate_id":20,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_128"],"kind":"struct"},"2:7217:21697":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"2:10676:3969":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"16:8205:23035":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"17:10896:12203":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"17:15671:12949":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"16:4862:13154":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"2:43000:34030":{"crate_id":2,"path":["core","fmt","rt","Count"],"kind":"enum"},"6:4860:8316":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"2:43797:10573":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"20:5027:8291":{"crate_id":20,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"20:8284:8520":{"crate_id":20,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"4:0:3670":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"6:1674:5238":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"17:13648:12425":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"18:481:14041":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"17:12659:23073":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"6:4473:8276":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"16:149:10992":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"1:8975:15188":{"crate_id":1,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"1:4635:11952":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"20:5348:8321":{"crate_id":20,"path":["libc","unix","linux_like","linux","seccomp_notif_addfd"],"kind":"struct"},"2:7563:11098":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"6:4647:8296":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"16:2305:22161":{"crate_id":16,"path":["gimli","common","Vendor"],"kind":"enum"},"17:14887:12734":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"20:6520:9042":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"17:13922:12468":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"2:43262:154":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"1:4180:10808":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"17:10137:12189":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"2:40710:14337":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"20:1563:5230":{"crate_id":20,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"17:2197:14939":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"2:4149:21458":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"16:7462:13282":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"17:15125:12786":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"6:6071:9048":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"16:7768:13113":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"2:22631:13578":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"2:3126:138":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"17:13218:12341":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"2:5687:3802":{"crate_id":2,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"16:4745:13150":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"5:1424:3969":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"18:707:14052":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"16:2744:13098":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"6:4686:8299":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"2:22755:16251":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"17:11714:14994":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"17:13478:12385":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"16:4835:13153":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"20:5386:8326":{"crate_id":20,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"20:4975:8285":{"crate_id":20,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"17:10569:36205":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"1:4703:16260":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"20:6896:9099":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"17:16032:13038":{"crate_id":17,"path":["object","xcoff","FileAux64"],"kind":"struct"},"20:5310:3541":{"crate_id":20,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"16:4986:13158":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"6:7657:8523":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"2:40447:14323":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"1:4740:3045":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"2:8921:10110":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"2:11968:21747":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"1:849:10572":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"1:4167:10807":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"16:7828:13299":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"1:8993:27430":{"crate_id":1,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"5:3225:14259":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"1:3160:15835":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"17:14662:12602":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"2:13118:15140":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"5:1301:15105":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"2:2941:3858":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"16:7006:15070":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"2:2943:116":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"2:43696:10565":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"2:4234:15134":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"1:8860:15187":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"1:903:11044":{"crate_id":1,"path":["std","collections","hash","map","ExtractIf"],"kind":"struct"},"16:5798:13167":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"5:7468:4000":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"16:4641:13148":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"2:43714:10568":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"1:9949:1872":{"crate_id":1,"path":["std","sys","pal","unix","net","Socket"],"kind":"struct"},"2:21856:16333":{"crate_id":2,"path":["core","core_simd","to_bytes","ToBytes"],"kind":"trait"},"20:6870:9098":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"17:12127:15012":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"1:3241:3846":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"17:15374:12849":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"17:14470:12570":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"16:7102:23030":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"2:4459:10699":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"6:5052:8344":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"17:3584:14945":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"18:80:27218":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"20:5667:8355":{"crate_id":20,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"11:2562:13479":{"crate_id":11,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"2:9834:2344":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"6:6700:9472":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"6:4666:8297":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"2:39755:3930":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"1:10790:126":{"crate_id":1,"path":["std","sys","pal","unix","fs","DirBuilder"],"kind":"struct"},"6:5910:2016":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"1:10451:11118":{"crate_id":1,"path":["std","sys","pal","unix","stack_overflow","Handler"],"kind":"struct"},"2:39637:219":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"20:6413:9035":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"6:6889:9480":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"17:14950:12745":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"6:569:4409":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"16:2766:13099":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"1:2911:11096":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"1:6146:11088":{"crate_id":1,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"2:44210:14317":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"2:30562:3043":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"17:13584:12397":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"2:13093:212":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"5:2979:16005":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"1:6162:11103":{"crate_id":1,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"17:11194:23123":{"crate_id":17,"path":["object","read","coff","import","ImportType"],"kind":"enum"},"5:0:314":{"crate_id":5,"path":["alloc"],"kind":"module"},"6:6100:9051":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"16:4585:13146":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"20:6817:9069":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"5:692:117":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"2:38915:3924":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"17:11126:14965":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"11:2542:13475":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"6:5891:9037":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"17:15133:12788":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"20:1661:5238":{"crate_id":20,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"17:11945:15002":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"1:3280:3842":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"1:645:16176":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"2:42062:3969":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"2:1777:635":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"1:7542:15213":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"2:2700:160":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"18:531:14043":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"1:9188:28450":{"crate_id":1,"path":["std","sys","pal","common","thread_local","fast_local","DtorState"],"kind":"enum"},"2:43806:10576":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"2:42130:10112":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"1:11148:28348":{"crate_id":1,"path":["std","sys","pal","unix","thread","cgroups","Cgroup"],"kind":"enum"},"2:44709:21785":{"crate_id":2,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"20:6876:8182":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"17:12029:12265":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"2:3021:3917":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"17:11141:14966":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"17:11395:14974":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"11:2423:10481":{"crate_id":11,"path":["hashbrown","table","IntoIter"],"kind":"struct"},"5:1685:11007":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"11:2443:11026":{"crate_id":11,"path":["hashbrown","table","Drain"],"kind":"struct"},"6:7388:9856":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"17:12999:12319":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"17:13976:12476":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"6:4914:8325":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"17:11294:14972":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"16:6944:36192":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"2:40603:4013":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"2:30602:3884":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"1:6297:227":{"crate_id":1,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"2:1691:3802":{"crate_id":2,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"2:3098:124":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"2:6494:11070":{"crate_id":2,"path":["core","iter","adapters","map_windows","Buffer"],"kind":"struct"},"11:364:10997":{"crate_id":11,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"1:10735:14440":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileAttr"],"kind":"struct"},"1:3166:15858":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"2:22616:32823":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"1:2946:135":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"5:7635:11048":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"1:7756:15176":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"2:43734:10567":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"20:1058:2978":{"crate_id":20,"path":["libc","unix","linux_like","IPV6_RECVTCLASS"],"kind":"constant"},"1:951:15104":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"5:634:15116":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"20:5411:8328":{"crate_id":20,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"20:1545:5228":{"crate_id":20,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"17:13516:12393":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"2:39533:3935":{"crate_id":2,"path":["core","ops","coroutine","CoroutineState"],"kind":"enum"},"16:3032:13128":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"2:4102:15132":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"1:7740:16220":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"2:44219:14322":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"1:4050:16259":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"2:43037:10149":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"1:2944:233":{"crate_id":1,"path":["std","io","error","Result"],"kind":"type_alias"},"20:5279:8314":{"crate_id":20,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"1:8148:3852":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"1:3930:4015":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"1:11023:11122":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"6:4908:8324":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"6:4578:8289":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"2:43902:3824":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"2:9681:10636":{"crate_id":2,"path":["core","fmt","builders","FormatterFn"],"kind":"struct"},"20:5532:8341":{"crate_id":20,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"2:3001:3908":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"5:903:3969":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"20:916:2560":{"crate_id":20,"path":["libc","unix","linux_like","MSG_PEEK"],"kind":"constant"},"6:4543:8285":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"11:673:3969":{"crate_id":11,"path":["hashbrown","map","Iter"],"kind":"struct"},"6:6927:8318":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"17:10067:12186":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"17:10293:3823":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"17:13809:12452":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"17:15108:12783":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"16:4497:13143":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"17:14497:12573":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"1:8234:3893":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"2:42320:87":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"0:554:1969":{"crate_id":0,"path":["socket2","MaybeUninitSlice"],"kind":"struct"},"2:3317:3929":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"11:2548:13476":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"20:4807:8268":{"crate_id":20,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"2:44641:14427":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"1:11518:3041":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"17:14989:12754":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"16:8097:14240":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"6:4529:8283":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"2:22:733":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"5:3753:15120":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"1:8478:3966":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"2:9536:34185":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"2:22362:16408":{"crate_id":2,"path":["core","core_simd","simd","cmp","ord","SimdOrd"],"kind":"trait"},"2:22282:10135":{"crate_id":2,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr","from_exposed_addr"],"kind":"foreign_type"},"20:5498:8338":{"crate_id":20,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_256"],"kind":"struct"},"20:7571:9483":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"2:40793:14348":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"2:48223:13931":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"17:11576:14070":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"17:9891:23072":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"1:7845:15177":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"2:22268:16417":{"crate_id":2,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr"],"kind":"trait"},"1:10516:3841":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stderr"],"kind":"struct"},"20:5378:8325":{"crate_id":20,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"6:5992:9044":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"2:11486:10570":{"crate_id":2,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"9:52:22027":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"1:3500:3811":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"17:15345:12842":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"17:9651:23086":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"2:40546:4001":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"17:14878:12731":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"5:5004:3802":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"17:13463:12379":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"17:12872:12310":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"2:4126:108":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"2:2985:3860":{"crate_id":2,"path":["core","marker","Freeze"],"kind":"trait"},"2:10329:11078":{"crate_id":2,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"17:15546:12916":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"1:8276:1820":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"17:12091:15009":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"2:7935:176":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"17:11523:14065":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"20:5196:8305":{"crate_id":20,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"1:10922:13539":{"crate_id":1,"path":["std","sys","pal","unix","os_str","Buf"],"kind":"struct"},"17:15101:12781":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"17:10775:14953":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"17:12310:12274":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"17:10925:23105":{"crate_id":17,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"17:10803:14954":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"17:11632:14074":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsectionIterator"],"kind":"struct"},"11:832:15110":{"crate_id":11,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"1:4129:32720":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"16:4344:13140":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"6:6837:9478":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"1:867:14257":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"15:394:22126":{"crate_id":15,"path":["addr2line","DebugFile"],"kind":"enum"},"2:42359:94":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"17:16180:12353":{"crate_id":17,"path":["object","xcoff","Rel64"],"kind":"struct"},"17:2169:23150":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"20:915:2528":{"crate_id":20,"path":["libc","unix","linux_like","MSG_OOB"],"kind":"constant"},"11:1142:15108":{"crate_id":11,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"16:3915:13138":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"2:9884:10639":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"17:15961:12339":{"crate_id":17,"path":["object","xcoff","SectionHeader64"],"kind":"struct"},"6:1546:5227":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"6:5033:8342":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"17:15384:12854":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"6:1570:5229":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"2:32445:251":{"crate_id":2,"path":["core","marker","StructuralEq"],"kind":"trait"},"5:7277:10481":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"17:10172:12190":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"17:11590:14071":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSection"],"kind":"struct"},"2:30794:32819":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum64"],"kind":"enum"},"1:12041:1624":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"20:6405:9034":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"20:6752:9064":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","xdp_statistics_v1"],"kind":"struct"},"16:3600:13133":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"16:5982:14141":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"17:11563:14069":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"17:15645:12940":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"2:40439:14317":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"1:922:15098":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"17:15432:12891":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"6:6934:9483":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"6:574:4410":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"17:15689:12955":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"1:893:11026":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"16:8195:14247":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"17:1094:14936":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"16:6499:13126":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"16:7884:23034":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"2:48333:13939":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"1:6249:11104":{"crate_id":1,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"20:1697:2181":{"crate_id":20,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"2:12448:15137":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"1:10408:15186":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","CommandArgs"],"kind":"struct"},"2:33293:3907":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"5:2474:13560":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"2:40367:14319":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"9:237:3965":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"20:4796:8267":{"crate_id":20,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"2:21394:16331":{"crate_id":2,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"2:4168:21517":{"crate_id":2,"path":["core","async_iter","async_iter","IntoAsyncIterator"],"kind":"trait"},"17:13309:12351":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"17:261:14933":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"2:43771:10558":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"20:1721:5243":{"crate_id":20,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"20:8337:10031":{"crate_id":20,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"17:10950:14957":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"6:1650:5236":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"6:4676:8298":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"20:8048:2730":{"crate_id":20,"path":["libc","unix","linux_like","linux","arch","generic","SO_RCVTIMEO"],"kind":"constant"},"16:7708:13125":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"20:5187:8304":{"crate_id":20,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"2:2333:10135":{"crate_id":2,"path":["core","ptr","from_exposed_addr"],"kind":"function"},"6:7645:8521":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"3:0:479":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"2:0:534":{"crate_id":2,"path":["core"],"kind":"module"},"2:42732:10638":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"16:2832:13102":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"20:4981:8286":{"crate_id":20,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"6:5004:8334":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"2:10807:10569":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"2:22580:13574":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"20:5010:8289":{"crate_id":20,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"16:4417:13141":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"1:4038:16257":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"2:2953:1816":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"20:7580:9484":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"20:8261:8517":{"crate_id":20,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"6:4566:8288":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"1:11818:11129":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"2:44282:21489":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"16:6531:14190":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"17:10510:14949":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"20:965:2824":{"crate_id":20,"path":["libc","unix","linux_like","IP_DROP_MEMBERSHIP"],"kind":"constant"},"16:5905:14132":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"20:5332:8319":{"crate_id":20,"path":["libc","unix","linux_like","linux","seccomp_notif"],"kind":"struct"},"2:43284:14371":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"2:21192:34043":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_elements_left","Rotate"],"kind":"struct"},"1:12034:452":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"20:5524:8340":{"crate_id":20,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"1:11478:2379":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"17:11549:14068":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"2:5876:14287":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"17:13334:12354":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"2:43496:10561":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"1:6070:11099":{"crate_id":1,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"1:12055:1639":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"17:12220:12272":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"2:47076:13885":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"1:11390:14455":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"6:7371:9855":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"2:4504:11064":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"1:1562:14261":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"1:11384:14454":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"17:14786:12695":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"20:1033:2926":{"crate_id":20,"path":["libc","unix","linux_like","IPV6_DROP_MEMBERSHIP"],"kind":"constant"},"2:10344:11083":{"crate_id":2,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"2:40454:21540":{"crate_id":2,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"1:557:15150":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"17:11256:14971":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"17:10618:36200":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"1:5571:16283":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"20:7302:4448":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"11:837:15098":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"20:6646:9051":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"2:3602:11026":{"crate_id":2,"path":["core","array","drain","Drain"],"kind":"struct"},"20:5403:1102":{"crate_id":20,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"2:46918:13882":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"2:11560:2292":{"crate_id":2,"path":["core","slice","raw","from_raw_parts"],"kind":"function"},"20:8249:8515":{"crate_id":20,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"1:482:11090":{"crate_id":1,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"16:5963:15032":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"17:11690:14990":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"2:10312:11077":{"crate_id":2,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"16:6204:15039":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"2:40560:4003":{"crate_id":2,"path":["core","ffi","c_char"],"kind":"type_alias"},"2:4380:15135":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"1:9149:3941":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"17:14373:12557":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"2:43645:15147":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"17:9759:23088":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"1:10918:15176":{"crate_id":1,"path":["std","sys","pal","unix","os","JoinPathsError"],"kind":"struct"},"6:6169:9069":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"18:564:12072":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"20:6807:9068":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"17:15519:12907":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"17:11345:12221":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"11:2536:13474":{"crate_id":11,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"16:4774:13151":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"2:48158:13928":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"1:7601:11115":{"crate_id":1,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"1:1758:15159":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"1:2426:1814":{"crate_id":1,"path":["std","io"],"kind":"module"},"16:4613:13147":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"10:0:3673":{"crate_id":10,"path":["adler"],"kind":"module"},"20:100:1931":{"crate_id":20,"path":["libc","unix","IPPROTO_ICMPV6"],"kind":"constant"},"6:5104:8348":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"5:3196:34905":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"17:13097:12334":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"5:7435:16190":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"5:1387:100":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"20:1533:5227":{"crate_id":20,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"17:12474:12217":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolTable"],"kind":"struct"},"1:2368:16238":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"1:12039:1505":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"1:10054:15161":{"crate_id":1,"path":["std","sys","pal","unix","os","SplitPaths"],"kind":"struct"},"1:11012:11121":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"16:5612:13112":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"2:4308:10698":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"16:2428:13085":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"2:43077:10637":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"20:8030:2741":{"crate_id":20,"path":["libc","unix","linux_like","linux","arch","generic","SO_REUSEADDR"],"kind":"constant"},"5:7339:217":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"6:654:5226":{"crate_id":6,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"1:7925:3835":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"6:1682:5239":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"17:13787:12451":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"16:7722:13115":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"2:10101:154":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"5:7535:250":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"5:1486:14258":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"1:1796:15161":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"1:9111:159":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"2:42242:90":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"2:23761:243":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"6:6804:9475":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"20:5613:8348":{"crate_id":20,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"20:5441:8331":{"crate_id":20,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"5:6013:16007":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"6:6128:9055":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"20:8041:2691":{"crate_id":20,"path":["libc","unix","linux_like","linux","arch","generic","SO_LINGER"],"kind":"constant"},"17:16087:13054":{"crate_id":17,"path":["object","xcoff","FunAux64"],"kind":"struct"},"17:10315:12194":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"6:6781:5347":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"1:880:14258":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"2:12463:21475":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"2:44052:14385":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"1:2200:136":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"1:3670:3892":{"crate_id":1,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"2:41756:2310":{"crate_id":2,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"5:1315:15109":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"20:531:3155":{"crate_id":20,"path":["libc","unix","iovec"],"kind":"struct"},"6:4989:8332":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"2:42078:10481":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"16:3888:13137":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"2:9032:15137":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"9:0:3672":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"6:4854:8315":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"17:15356:12846":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"17:15612:12933":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"1:2600:11078":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"5:5388:10551":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"6:555:4408":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"20:6653:9052":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"17:14896:12735":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"2:4030:3802":{"crate_id":2,"path":["core","array","Guard"],"kind":"struct"},"11:102:14250":{"crate_id":11,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"20:1032:2920":{"crate_id":20,"path":["libc","unix","linux_like","IPV6_ADD_MEMBERSHIP"],"kind":"constant"},"1:4469:16260":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"17:11459:14979":{"crate_id":17,"path":["object","read","elf","note","GnuPropertyIterator"],"kind":"struct"},"1:12040:1538":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"16:5049:13160":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"1:6644:240":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"5:40:11003":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"17:13504:12390":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"1:6430:15173":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"2:23151:192":{"crate_id":2,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"5:1439:10572":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"2:46516:13857":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"16:3830:13136":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"16:2696:13096":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"2:42398:88":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"20:6632:9050":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"16:5634:14106":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"11:2403:10572":{"crate_id":11,"path":["hashbrown","table","IterMut"],"kind":"struct"},"5:6862:11054":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"5:5650:11042":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"20:4833:8270":{"crate_id":20,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"2:42437:95":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"2:43245:14370":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"17:14122:12517":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"17:511:14935":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"2:1747:1501":{"crate_id":2,"path":["core","mem","size_of"],"kind":"function"},"17:10881:23104":{"crate_id":17,"path":["object","read","archive","Members"],"kind":"enum"},"11:1087:36175":{"crate_id":11,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"17:14399:12559":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"2:12148:14378":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"1:1567:14262":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"1:8294:10804":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"20:4887:8108":{"crate_id":20,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"2:23548:190":{"crate_id":2,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"2:40356:14318":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"6:7633:8519":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"2:44617:14421":{"crate_id":2,"path":["core","str","LinesMap"],"kind":"struct"},"1:1819:10860":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"2:2697:77":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"1:5381:15166":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"1:1040:14228":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"6:588:4412":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"1:12049:799":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"9:507:13542":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"17:13742:12441":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"2:12468:21474":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"2:2657:16247":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"5:6843:11042":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"17:13273:12344":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"16:8281:13349":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"20:5620:8349":{"crate_id":20,"path":["libc","unix","linux_like","linux","__c_anonymous_ifc_ifcu"],"kind":"union"},"1:11595:13991":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"17:11800:12229":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"5:7004:11056":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"2:46737:13864":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"2:44487:14411":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"1:6357:183":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"1:12047:797":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"2:10520:16247":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"6:1913:8265":{"crate_id":6,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"11:856:15101":{"crate_id":11,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"20:1591:5233":{"crate_id":20,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"5:5344:11007":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"11:1887:10481":{"crate_id":11,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"16:3797:13135":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"20:7027:1906":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","SOCK_STREAM"],"kind":"constant"},"2:2420:104":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"20:6515:9041":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"2:44070:14386":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"9:357:22024":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"2:2335:10136":{"crate_id":2,"path":["core","ptr","from_exposed_addr_mut"],"kind":"function"},"6:4549:8286":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"17:14282:12537":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"2:44530:14420":{"crate_id":2,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"2:43888:3823":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"1:11156:13828":{"crate_id":1,"path":["std","sys","pal","unix","time","Nanoseconds"],"kind":"struct"},"2:44697:3944":{"crate_id":2,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"16:6156:14168":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"17:13935:12469":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"17:14757:12685":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"6:7616:8517":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"17:15733:12962":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"6:6047:9046":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"2:3122:3925":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"2:44625:14423":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"2:4737:21534":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"20:5661:8354":{"crate_id":20,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"1:10964:13968":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","ExitCode"],"kind":"struct"},"17:13383:12357":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"20:963:2863":{"crate_id":20,"path":["libc","unix","linux_like","IP_MULTICAST_LOOP"],"kind":"constant"},"17:12324:14092":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"2:43952:14381":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"20:5316:8317":{"crate_id":20,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"17:13989:12477":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"17:14921:12737":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"2:39657:222":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"16:6415:14177":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"2:44497:14415":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"17:15279:12827":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"2:5763:14285":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"6:4351:8266":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"20:4938:8280":{"crate_id":20,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"6:4893:8322":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"9:330:13519":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"6:4628:8295":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"1:0:1530":{"crate_id":1,"path":["std"],"kind":"module"},"6:4698:8300":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"17:15990:13027":{"crate_id":17,"path":["object","xcoff","Symbol32"],"kind":"struct"},"17:13322:12353":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"6:483:4403":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"17:15087:12778":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"1:3366:3851":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"6:5023:8341":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"2:21236:34052":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"2:44649:14429":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"20:5156:8302":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"2:32395:15143":{"crate_id":2,"path":["core","error","tags","MaybeSizedValue"],"kind":"struct"},"20:6717:9060":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","xdp_mmap_offsets_v1"],"kind":"struct"},"2:30618:10149":{"crate_id":2,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"1:3837:3042":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"16:0:3678":{"crate_id":16,"path":["gimli"],"kind":"module"},"1:9166:15196":{"crate_id":1,"path":["std","sys","pal","common","thread_local","fast_local","Key"],"kind":"struct"},"16:7582:13284":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"20:5098:8297":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"17:12153:15014":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"6:4878:3541":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"2:48120:13927":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"1:4744:2349":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"3:234:233":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"1:8961:13973":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"16:6243:15057":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"2:2522:202":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"2:12208:14384":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"5:4444:11033":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"16:7651:15088":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"2:48348:13940":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"6:1703:3161":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"0:660:1902":{"crate_id":0,"path":["socket2","Type"],"kind":"struct"},"2:48410:13942":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"16:7677:217":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"16:7544:14234":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"1:10225:14789":{"crate_id":1,"path":["std","sys","pal","unix","pipe","AnonPipe"],"kind":"struct"},"20:1705:5242":{"crate_id":20,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"6:4428:8271":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"1:11315:15210":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"20:6742:9063":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","xdp_statistics"],"kind":"struct"},"16:2969:22163":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"2:11001:10580":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"16:8167:15092":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"14:165:22096":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"1:1406:153":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"1:12038:339":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"17:11155:14060":{"crate_id":17,"path":["object","read","coff","import","ImportFile"],"kind":"struct"},"5:886:11014":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"16:2406:13084":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"1:9106:242":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"18:614:36209":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"2:3357:34324":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"1:2370:16239":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"20:4998:8288":{"crate_id":20,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"2:40719:14339":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"1:4742:2348":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"5:5154:11039":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"20:4783:8266":{"crate_id":20,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"17:12356:14094":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"17:13395:12360":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"2:44185:14392":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"6:5140:8354":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"17:11645:14075":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsection"],"kind":"struct"},"2:40473:14326":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"6:4401:8270":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"17:12264:14089":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"11:844:16191":{"crate_id":11,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"1:640:15154":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"2:32384:15142":{"crate_id":2,"path":["core","error","private","Internal"],"kind":"struct"},"2:40513:107":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"5:3818:11044":{"crate_id":5,"path":["alloc","collections","linked_list","ExtractIf"],"kind":"struct"},"2:44937:14433":{"crate_id":2,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"17:11675:12290":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"6:548:3222":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"2:4533:3868":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"2:39597:220":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"2:46392:13854":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"1:10745:14437":{"crate_id":1,"path":["std","sys","pal","unix","fs","OpenOptions"],"kind":"struct"},"17:13254:12343":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"17:11168:23122":{"crate_id":17,"path":["object","read","coff","import","ImportName"],"kind":"enum"},"16:7474:15080":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"7:78:22002":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"1:8938:16301":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"1:10809:28345":{"crate_id":1,"path":["std","sys","pal","unix","kernel_copy","FdHandle"],"kind":"enum"},"2:4560:10701":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"5:5261:1505":{"crate_id":5,"path":["alloc","slice"],"kind":"module"},"16:2618:13093":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"2:41199:14360":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"14:31:15093":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"18:515:12068":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"1:914:15096":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"17:13724:12440":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"1:4637:11954":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"1:4569:16266":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"1:12000:29340":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"20:8267:8518":{"crate_id":20,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"6:4870:3539":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"2:40623:3854":{"crate_id":2,"path":["core","io","borrowed_buf","BorrowedCursor"],"kind":"struct"},"1:8222:3820":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"17:16123:13060":{"crate_id":17,"path":["object","xcoff","BlockAux64"],"kind":"struct"},"6:4841:8313":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"17:14221:12527":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"5:2973:34897":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"17:12180:15016":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"17:14057:12487":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"1:8405:3964":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"2:46069:13840":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"17:11307:14973":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"20:5016:8290":{"crate_id":20,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"16:7694:13124":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"17:13684:12433":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"20:5108:8298":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"20:5372:8324":{"crate_id":20,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"18:699:14050":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"2:40828:12081":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"2:42053:171":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"2:44672:129":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"20:569:4411":{"crate_id":20,"path":["libc","unix","tms"],"kind":"struct"},"5:3155:101":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"2:8243:3973":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"2:4898:420":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"17:14208:12526":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"2:11998:21478":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"2:40852:14353":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"5:1131:16004":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"2:46039:13839":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"17:13832:12456":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"17:15535:12911":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"20:5286:8315":{"crate_id":20,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"20:5221:8308":{"crate_id":20,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"1:3239:3845":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"20:5042:8293":{"crate_id":20,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"20:8347:3107":{"crate_id":20,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"2:12224:14387":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"1:10740:14442":{"crate_id":1,"path":["std","sys","pal","unix","fs","StatxExtraFields"],"kind":"struct"},"17:12345:12278":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"6:1604:5233":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"17:11507:12225":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"2:8252:21693":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"16:6189:14171":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"2:32501:3866":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"5:3594:3969":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"6:4764:8305":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"6:4523:8282":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"2:2694:78":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"2:41006:14357":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"1:4028:16256":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"2:10845:10584":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"16:2574:13091":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"20:5130:8300":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"6:4830:8312":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"2:38226:3921":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"2:3161:3926":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"1:10513:3845":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stdout"],"kind":"struct"},"2:46109:13842":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"2:46706:13863":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"16:6569:13114":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"18:727:12087":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"1:8874:13969":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"2:43012:13314":{"crate_id":2,"path":["core","fmt","rt","Flag"],"kind":"enum"},"17:9790:23089":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"2:44621:14422":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"16:6742:14197":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"6:1591:5231":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"1:12054:1642":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"5:1024:11007":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"17:13202:12340":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"18:719:12084":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"1:6426:14361":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"16:8115:14243":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"5:1286:15106":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"1:7867:14438":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"17:15177:12799":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"1:3199:3843":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"2:41215:14362":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"17:10941:14956":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"11:2124:14228":{"crate_id":11,"path":["hashbrown","set","Entry"],"kind":"enum"},"2:48074:13926":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"1:10946:27431":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","ProgramKind"],"kind":"enum"},"17:12614:23094":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"1:7840:12136":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"17:12718:23095":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"2:8246:10821":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"17:595:12181":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"17:9559:23071":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"16:5574:13107":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"5:1516:15097":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"20:6734:9062":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","xdp_umem_reg_v1"],"kind":"struct"},"16:2670:13095":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"2:44912:14432":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"17:15631:12938":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"16:2548:13090":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"11:1917:14261":{"crate_id":11,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"1:1969:204":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"17:15980:13026":{"crate_id":17,"path":["object","xcoff","SymbolBytes"],"kind":"struct"},"17:14633:12582":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"20:5632:8351":{"crate_id":20,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"17:12746:14096":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"2:44510:14419":{"crate_id":2,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"2:43292:14372":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"2:23074:195":{"crate_id":2,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"9:450:22009":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"5:281:10037":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"2:21851:16247":{"crate_id":2,"path":["core","core_simd","to_bytes","sealed","Sealed"],"kind":"trait"},"17:12418:15018":{"crate_id":17,"path":["object","read","xcoff","file","XcoffFile"],"kind":"struct"},"18:609:14926":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"6:4440:8273":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"2:39723:3928":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"16:7613:15087":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"1:4231:3103":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"17:10471:36198":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"1:5308:127":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"17:11604:14072":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsectionIterator"],"kind":"struct"},"1:5753:15170":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"2:33645:3911":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"2:42131:10111":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"1:12045:695":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"2:39762:13666":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"5:790:11009":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"2:22495:14301":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"2:12514:21483":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"9:177:22076":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"1:1909:706":{"crate_id":1,"path":["std","ffi"],"kind":"module"},"17:15184:12800":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"0:575:2011":{"crate_id":0,"path":["socket2","MsgHdr"],"kind":"struct"},"16:2321:13074":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"16:7660:13288":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"17:4928:14947":{"crate_id":17,"path":["object","read","xcoff","relocation","XcoffRelocationIterator"],"kind":"struct"},"17:15287:12830":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"2:44006:10581":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"1:12058:1248":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"17:15311:12835":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"13:226:13473":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"2:40480:21541":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"enum"},"2:44924:13832":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"17:15747:12965":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"17:11978:15004":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"2:45939:13835":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"1:12059:13":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"20:6660:9053":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"20:5432:8330":{"crate_id":20,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"20:8243:8514":{"crate_id":20,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"1:8798:15186":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"20:1578:5231":{"crate_id":20,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"17:15062:12770":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"1:7903:3949":{"crate_id":1,"path":["std","hash","random","RandomState"],"kind":"struct"},"2:48234:13932":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"2:34073:3915":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"20:516:3109":{"crate_id":20,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"17:11767:15000":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"2:22729:13591":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"17:12103:15010":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"2:7784:143":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"6:7604:8515":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"17:13162:12338":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"2:9349:85":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"6:6868:9479":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"2:3344:3933":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"2:22199:16247":{"crate_id":2,"path":["core","core_simd","simd","num","sealed","Sealed"],"kind":"trait"},"2:44194:14393":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"17:15725:12959":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"2:46340:13852":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"17:16049:13040":{"crate_id":17,"path":["object","xcoff","CsectAux32"],"kind":"struct"},"6:1697:5241":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"20:964:2819":{"crate_id":20,"path":["libc","unix","linux_like","IP_ADD_MEMBERSHIP"],"kind":"constant"},"6:4998:8333":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"17:14099:12508":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"2:22003:16247":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"2:44106:14388":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"2:48318:13938":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"16:2907:13105":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"17:10207:12191":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"6:7668:8524":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"20:8313:8524":{"crate_id":20,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"16:6721:23028":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"6:4789:8308":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"2:40690:14334":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"2:4919:33019":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"17:14235:12530":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"16:7067:14226":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"6:4977:8331":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"17:10657:12217":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"16:7342:36196":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"6:4449:8274":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"2:4376:228":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"2:21250:34040":{"crate_id":2,"path":["core","core_simd","swizzle","resize","Resize"],"kind":"struct"},"20:6666:9054":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"5:7498:3998":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"2:48214:13930":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"20:8278:8519":{"crate_id":20,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"2:44653:13828":{"crate_id":2,"path":["core","time","Nanoseconds"],"kind":"struct"},"1:8852:3969":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"16:7269:36193":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"20:6605:9047":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"20:7463:9477":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"1:3443:2345":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"16:5939:14138":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"16:7492:14229":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"1:5128:211":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"20:5079:8296":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"20:6375:8969":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"17:14296:12539":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"6:4455:8108":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"2:39949:29897":{"crate_id":2,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"17:12301:14091":{"crate_id":17,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"2:2092:10153":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"6:5146:8355":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"2:21238:34037":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"1:928:16191":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"1:5825:11097":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"16:6261:15065":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"17:14001:12478":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"1:5082:15165":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"1:3491:28611":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"2:33107:3904":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"20:6710:9059":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","xdp_ring_offset_v1"],"kind":"struct"},"1:9016:15192":{"crate_id":1,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"6:507:4406":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"2:22136:16414":{"crate_id":2,"path":["core","core_simd","simd","num","int","SimdInt"],"kind":"trait"},"1:10133:15201":{"crate_id":1,"path":["std","sys","pal","unix","os_str","Slice"],"kind":"struct"},"1:5446:112":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"20:8029:2480":{"crate_id":20,"path":["libc","unix","linux_like","linux","arch","generic","SOL_SOCKET"],"kind":"constant"},"2:43492:14373":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"2:33704:3910":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"2:10973:10579":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"15:288:22115":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"2:32419:3863":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"6:489:3257":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"2:22677:32815":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"1:10075:15199":{"crate_id":1,"path":["std","sys","pal","unix","os","EnvStrDebug"],"kind":"struct"},"1:4159:10806":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"17:12396:12280":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"1:1063:15106":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"2:6299:14288":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"20:102:1937":{"crate_id":20,"path":["libc","unix","IPPROTO_UDP"],"kind":"constant"},"20:4860:8271":{"crate_id":20,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"2:4265:14284":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"5:7285:14278":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"5:7524:11040":{"crate_id":5,"path":["alloc","rc","UniqueRc"],"kind":"struct"},"16:6361:14174":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"0:672:1925":{"crate_id":0,"path":["socket2","Protocol"],"kind":"struct"},"2:41206:14361":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"6:5928:9040":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"1:5987:227":{"crate_id":1,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"16:6929:13225":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"2:3332:144":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"17:13961:12473":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"1:9101:241":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"20:4961:8283":{"crate_id":20,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"2:42200:10572":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"1:8387:16279":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"20:585:4413":{"crate_id":20,"path":["libc","unix","protoent"],"kind":"struct"},"2:33586:3913":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"5:3191:14260":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"20:7326:4284":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"17:12115:15011":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"1:3603:1819":{"crate_id":1,"path":["std","net"],"kind":"module"},"2:40593:4014":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"16:3461:13132":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"2:43860:14374":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"5:3230:34904":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"17:12784:14097":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"2:44821:226":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"17:14251:12532":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"16:2596:13092":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"8:0:3671":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"2:40700:14336":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"1:10780:137":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileType"],"kind":"struct"},"16:5727:14115":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"17:14843:12730":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"17:12930:23097":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"2:46247:13848":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"16:6960:15069":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"2:42634:14773":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"6:4745:8303":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"17:15903:13013":{"crate_id":17,"path":["object","xcoff","AuxHeader64"],"kind":"struct"},"17:10035:12184":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"17:12335:12275":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"2:40728:14340":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"20:5256:8311":{"crate_id":20,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"13:110:36176":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"20:484:4404":{"crate_id":20,"path":["libc","unix","timespec"],"kind":"struct"},"11:742:15097":{"crate_id":11,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"16:6318:13176":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"6:7556:9995":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"6:4584:8290":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"16:5995:14101":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"17:12828:12308":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"17:2228:14942":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"2:44425:14409":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"2:43237:3951":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"5:7482:32821":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"17:11449:12135":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"1:8139:3850":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"20:5232:8309":{"crate_id":20,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"1:723:151":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"17:10716:14952":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"1:6897:11111":{"crate_id":1,"path":["std","sys","pal","common","thread_local","abort_on_dtor_unwind","DtorUnwindGuard"],"kind":"struct"},"1:7734:16180":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"1:4915:16270":{"crate_id":1,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"17:11321:12217":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"2:11984:15138":{"crate_id":2,"path":["core","slice","GetManyMutError"],"kind":"struct"},"2:9892:213":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"1:7670:13948":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"20:5292:8316":{"crate_id":20,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"2:48269:13935":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"2:42149:233":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"6:4434:8272":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"6:5068:8345":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"17:11426:14977":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"2:46562:13859":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"1:909:15110":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"17:12584:15026":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegment"],"kind":"struct"},"2:41981:2172":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"2:46294:13849":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"2:46140:13843":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"2:4957:3853":{"crate_id":2,"path":["core","io","borrowed_buf","BorrowedBuf"],"kind":"struct"},"18:574:12065":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"1:12005:16181":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"0:0:2058":{"crate_id":0,"path":["socket2"],"kind":"module"},"1:3936:3099":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"20:5511:8339":{"crate_id":20,"path":["libc","unix","linux_like","linux","tls12_crypto_info_chacha20_poly1305"],"kind":"struct"},"20:4920:8278":{"crate_id":20,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"1:939:15101":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"11:2498:22086":{"crate_id":11,"path":["hashbrown","Equivalent"],"kind":"trait"},"2:41733:168":{"crate_id":2,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"16:6696:13204":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"1:8495:3967":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"20:6764:9066":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","xdp_desc"],"kind":"struct"},"2:22005:16329":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"2:7333:21689":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"1:533:11091":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"5:7268:10557":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"20:4905:8276":{"crate_id":20,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"20:7448:9475":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"2:48280:13936":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"17:12972:12318":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"2:41903:32805":{"crate_id":2,"path":["core","net","parser","AddrKind"],"kind":"enum"},"2:46994:13884":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"20:7457:9476":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"20:537:3222":{"crate_id":20,"path":["libc","unix","pollfd"],"kind":"struct"},"11:2140:15105":{"crate_id":11,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"1:1873:14774":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"16:6968:23029":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"18:507:12065":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"2:46007:13838":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"2:11519:10571":{"crate_id":2,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"5:4381:11033":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"20:1619:5234":{"crate_id":20,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"6:4388:8269":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"2:33763:3912":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"2:47154:13886":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"20:961:2855":{"crate_id":20,"path":["libc","unix","linux_like","IP_MULTICAST_IF"],"kind":"constant"},"6:7679:8525":{"crate_id":6,"path":["libc","unix","linux_like","linux","canxl_frame"],"kind":"struct"},"18:755:14059":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"2:42087:10108":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"2:4449:11063":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"2:47414:13890":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"1:8202:3822":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"17:12684:12157":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"1:1760:15160":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"2:48196:13929":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"16:7090:14227":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"2:21575:13571":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"20:8296:8522":{"crate_id":20,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"5:6530:11007":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"18:96:27219":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"2:42208:10481":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"20:5462:8333":{"crate_id":20,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"9:426:22011":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"2:2788:135":{"crate_id":2,"path":["core","error","Error"],"kind":"trait"},"2:4:1115":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"1:3201:3844":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"2:43705:10564":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"17:12230:14080":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"16:5363:13164":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"2:44629:14424":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"20:7481:9478":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"2:44874:14591":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"20:44:1870":{"crate_id":20,"path":["libc","unix","c_int"],"kind":"type_alias"},"2:34419:3918":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"1:621:15151":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"5:5807:258":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"1:5051:15165":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"17:11113:14964":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"16:2881:13104":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"6:6012:9045":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"1:2518:3833":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"5:7368:10481":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"17:15842:12334":{"crate_id":17,"path":["object","xcoff","FileHeader32"],"kind":"struct"},"20:919:1966":{"crate_id":20,"path":["libc","unix","linux_like","MSG_TRUNC"],"kind":"constant"},"17:14485:12275":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"1:10073:15200":{"crate_id":1,"path":["std","sys","pal","unix","os","Env"],"kind":"struct"},"6:5921:9039":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"17:14021:12481":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"20:1862:2182":{"crate_id":20,"path":["libc","unix","linux_like","linux","socklen_t"],"kind":"type_alias"},"17:14698:12633":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"17:16146:13065":{"crate_id":17,"path":["object","xcoff","DwarfAux32"],"kind":"struct"},"17:14041:12482":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"11:883:15104":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"1:10770:13949":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileTimes"],"kind":"struct"},"2:41939:1820":{"crate_id":2,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"2:23386:188":{"crate_id":2,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"2:43878:14376":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"2:3327:261":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"16:2359:13082":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"2:44398:14408":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"5:1505:15096":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"6:5955:8998":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"16:6844:13216":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"2:2706:265":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"2:40419:14321":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"17:14413:12562":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"11:1896:11044":{"crate_id":11,"path":["hashbrown","set","ExtractIf"],"kind":"struct"},"2:10700:10572":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"1:836:3969":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"20:5561:8344":{"crate_id":20,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"20:5468:8334":{"crate_id":20,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"11:1160:15109":{"crate_id":11,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"1:637:15152":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"20:1684:5241":{"crate_id":20,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"17:12432:15020":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSectionIterator"],"kind":"struct"},"1:7908:2341":{"crate_id":1,"path":["std","hash","random","DefaultHasher"],"kind":"struct"},"1:12016:27429":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"11:2326:15105":{"crate_id":11,"path":["hashbrown","table","OccupiedEntry"],"kind":"struct"},"6:542:3155":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"6:6819:9477":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"17:16016:13033":{"crate_id":17,"path":["object","xcoff","FileAux32"],"kind":"struct"},"17:13896:12465":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"20:478:3257":{"crate_id":20,"path":["libc","unix","timeval"],"kind":"struct"},"1:11983:14498":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"20:1626:5235":{"crate_id":20,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"16:7041:14220":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"18:582:3992":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"6:6943:9484":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"17:15557:12917":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"6:5111:8349":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifc_ifcu"],"kind":"union"},"2:39580:2654":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"20:1515:2179":{"crate_id":20,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"6:5897:9038":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"1:8013:2445":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"17:10974:12206":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"5:3687:11007":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"1:5568:4139":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"5:1477:14257":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"1:3425:2343":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"17:13347:12355":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"2:1896:13567":{"crate_id":2,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"17:12052:12266":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"20:8002:9854":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"2:2528:209":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"1:11136:13967":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"17:12600:135":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"1:6596:16010":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutex"],"kind":"struct"},"17:12077:15005":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"5:683:257":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"16:5816:14122":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"16:5830:14123":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"17:14934:12742":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"5:4020:11026":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"1:2586:3834":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"2:42753:10647":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"17:15013:12759":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"6:527:3109":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"16:2450:13086":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"1:12044:693":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"20:5419:8329":{"crate_id":20,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"20:7557:9482":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"2:2417:103":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"17:13121:12335":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"2:32531:3865":{"crate_id":2,"path":["core","marker","Tuple"],"kind":"trait"},"1:918:15097":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"2:23228:197":{"crate_id":2,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"2:26163:273":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"2:44818:147":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"17:10016:23070":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"11:1107:15107":{"crate_id":11,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"17:15160:12792":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"2:42476:89":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"6:6059:9047":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"16:6792:14209":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"10:44:13482":{"crate_id":10,"path":["adler","Adler32"],"kind":"struct"},"20:6538:9044":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"6:475:2841":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"1:8159:1815":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"17:9860:23091":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"18:681:14046":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"2:10959:10581":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"16:2864:13103":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"17:11014:14962":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"17:14156:12520":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"17:14324:12544":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"17:9678:23076":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"6:6666:5188":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"1:8553:3970":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"2:2486:208":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"2:32420:252":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"6:5130:8352":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"16:6332:13106":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"17:14822:12725":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"11:1910:14260":{"crate_id":11,"path":["hashbrown","set","Difference"],"kind":"struct"},"20:7385:5364":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"1:12032:402":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"17:12898:23096":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"14:160:15093":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"20:1030:2931":{"crate_id":20,"path":["libc","unix","linux_like","IPV6_MULTICAST_HOPS"],"kind":"constant"},"2:40518:4002":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"6:4516:8281":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"6:6079:9049":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"2:22997:194":{"crate_id":2,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"17:11657:14078":{"crate_id":17,"path":["object","read","elf","attributes","AttributeIndexIterator"],"kind":"struct"},"16:5121:13162":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"2:30688:32824":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum32"],"kind":"enum"},"2:46840:13866":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"20:5479:8336":{"crate_id":20,"path":["libc","unix","linux_like","linux","tls_crypto_info"],"kind":"struct"},"2:13246:11088":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"2:43745:10560":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"20:6625:9049":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"17:12921:12275":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"6:1734:5243":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"2:40771:14346":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"2:32348:13478":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"20:563:4410":{"crate_id":20,"path":["libc","unix","itimerval"],"kind":"struct"},"16:5648:15030":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"17:16062:13046":{"crate_id":17,"path":["object","xcoff","CsectAux64"],"kind":"struct"},"16:6017:23024":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"17:0:3679":{"crate_id":17,"path":["object"],"kind":"module"},"20:522:4407":{"crate_id":20,"path":["libc","unix","hostent"],"kind":"struct"},"2:32500:3864":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"1:4700:16271":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"2:33527:3909":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"17:12953:12315":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"11:430:36173":{"crate_id":11,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"17:13436:12370":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"1:7582:11113":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"2:32402:10699":{"crate_id":2,"path":["core","error","tags","Ref"],"kind":"struct"},"17:9943:23075":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"17:10422:14948":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"1:1966:205":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"20:7512:9479":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"2:1972:186":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"1:415:182":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"2:2491:132":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"2:41221:3851":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"6:4783:8307":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"2:23629:187":{"crate_id":2,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"6:123:4433":{"crate_id":6,"path":["libc","unix","fpos_t"],"kind":"enum"},"1:1054:15105":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"2:7788:163":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"5:830:11012":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"5:1527:217":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"5:3251:14262":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"2:47200:13887":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"20:5262:8312":{"crate_id":20,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"2:1784:3881":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"20:7980:4361":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"5:7347:14279":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"20:7335:9471":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"17:9918:23092":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"5:2236:34940":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"2:40659:3821":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"1:4151:10805":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"2:21893:34050":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"6:4922:8326":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"5:7317:34901":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"16:6386:13178":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"6:6741:5364":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"2:40742:14343":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"2:2948:254":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"2:46584:13860":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"2:43028:74":{"crate_id":2,"path":["core","fmt","rt","Argument"],"kind":"struct"},"2:9852:141":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"1:4906:16269":{"crate_id":1,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"1:7857:13949":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"5:5877:11026":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"2:23710:13592":{"crate_id":2,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"1:2205:3036":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"16:6352:14173":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"17:12486:12285":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolTable"],"kind":"struct"},"6:4808:8310":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"17:11817:23192":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"17:14312:12542":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"14:202:21491":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"11:490:151":{"crate_id":11,"path":["hashbrown","map","HashMap"],"kind":"struct"},"20:5673:8356":{"crate_id":20,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"1:8986:2377":{"crate_id":1,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"16:4557:13145":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"1:5240:210":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"2:44633:14425":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"17:15589:12932":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"6:4968:8330":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"1:8354:3101":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"1:8868:10481":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"6:7692:10031":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"5:6605:10481":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"16:7284:10108":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"5:1151:36117":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"1:8192:3821":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"16:6901:13116":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"17:13663:12429":{"crate_id":17,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"1:7933:3837":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"2:13284:149":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"1:1545:11044":{"crate_id":1,"path":["std","collections","hash","set","ExtractIf"],"kind":"struct"},"16:6818:14210":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"2:46192:13845":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"20:490:4405":{"crate_id":20,"path":["libc","unix","rlimit"],"kind":"struct"},"17:12560:15024":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatSectionIterator"],"kind":"struct"},"16:6279:13173":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"20:552:2690":{"crate_id":20,"path":["libc","unix","linger"],"kind":"struct"},"2:42141:10822":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"17:15329:12839":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"2:46210:13846":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"17:15367:12847":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"2:22228:10135":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","from_exposed_addr"],"kind":"foreign_type"},"17:15294:12831":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"5:3738:3837":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"1:9130:3940":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"17:13707:12437":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"5:7511:3999":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"1:5500:14777":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"2:22722:14308":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"20:8035:2751":{"crate_id":20,"path":["libc","unix","linux_like","linux","arch","generic","SO_SNDBUF"],"kind":"constant"},"5:7451:3997":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"2:10768:10583":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"16:7318:13262":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"16:4719:13149":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"6:495:4404":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"1:8328:14781":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"17:12510:12286":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbol"],"kind":"struct"},"16:2788:13100":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"1:7850:14437":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"6:7622:8518":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"15:0:3677":{"crate_id":15,"path":["addr2line"],"kind":"module"},"17:10726:36199":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"7:0:1688":{"crate_id":7,"path":["unwind"],"kind":"module"},"17:12536:15022":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatIterator"],"kind":"struct"},"6:5117:8350":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifconf"],"kind":"struct"},"6:1691:5240":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"6:533:4407":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"2:10987:10582":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"20:6501:8998":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"16:6560:10994":{"crate_id":16,"path":["gimli","read","lazy","imp","LazyArc"],"kind":"struct"},"2:44156:3820":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"20:848:1892":{"crate_id":20,"path":["libc","unix","linux_like","AF_INET6"],"kind":"constant"},"17:14969:12746":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"2:10918:10578":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"18:491:14042":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"17:10432:36201":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"6:5941:8997":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"1:6194:15172":{"crate_id":1,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"11:1891:11026":{"crate_id":11,"path":["hashbrown","set","Drain"],"kind":"struct"},"2:42192:3969":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"1:4821:3044":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"17:11027:12174":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"6:4847:8314":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"6:596:4413":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"20:8008:9855":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"17:13083:12333":{"crate_id":17,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"6:4776:8306":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"2:46964:13883":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"20:6617:9048":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"5:7376:10481":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"1:12033:1035":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"2:21392:16247":{"crate_id":2,"path":["core","core_simd","cast","sealed","Sealed"],"kind":"trait"},"16:7568:13123":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"16:4806:13152":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"2:40992:14356":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"17:11088:12210":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"2:23467:189":{"crate_id":2,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"6:1514:3112":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"16:5403:12184":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"17:11269:12206":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"1:12056:850":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"6:1496:3108":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"1:10758:14447":{"crate_id":1,"path":["std","sys","pal","unix","fs","FilePermissions"],"kind":"struct"},"16:7391:23031":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"6:4364:8267":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"17:11041:12217":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"1:11309:14448":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"20:5208:8306":{"crate_id":20,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"6:4496:8279":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"2:41192:14359":{"crate_id":2,"path":["core","iter","sources","from_coroutine","FromCoroutine"],"kind":"struct"},"2:43846:13824":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"1:7880:137":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"2:48295:13937":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"20:6593:9046":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"2:2992:3862":{"crate_id":2,"path":["core","marker","FnPtr"],"kind":"trait"},"6:1521:1864":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"20:5340:8320":{"crate_id":20,"path":["libc","unix","linux_like","linux","seccomp_notif_resp"],"kind":"struct"},"16:6893:13222":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"16:6425:14178":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"6:5044:8343":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"6:5982:9043":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"20:6487:8997":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"17:15224:12809":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"17:11779:12227":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"16:6753:14198":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"6:62:4402":{"crate_id":6,"path":["libc","unix","DIR"],"kind":"enum"},"2:39494:3938":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"17:10520:36202":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"2:7747:21695":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"6:0:880":{"crate_id":6,"path":["libc"],"kind":"module"},"20:8034:2665":{"crate_id":20,"path":["libc","unix","linux_like","linux","arch","generic","SO_BROADCAST"],"kind":"constant"},"2:2829:15131":{"crate_id":2,"path":["core","error","Request"],"kind":"struct"},"6:1507:3284":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"16:8134:14246":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"5:2048:3837":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"1:8228:3894":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"2:15:1832":{"crate_id":2,"path":["core","write"],"kind":"macro"},"2:44462:14410":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"16:7621:23032":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"2:43970:14382":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"17:4773:14946":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolIterator"],"kind":"struct"},"1:11175:3940":{"crate_id":1,"path":["std","sys","pal","unix","time","SystemTime"],"kind":"struct"},"20:6467:9039":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"2:44350:14406":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"5:3217:14261":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"2:47620:13921":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"17:10102:12188":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"16:3065:12091":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"5:1495:15110":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"1:7917:15179":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"17:15253:12817":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"6:501:4405":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"2:38336:3923":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"20:1583:5232":{"crate_id":20,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"1:3735:3041":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"2:41962:2171":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"2:22656:32797":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"20:1083:3117":{"crate_id":20,"path":["libc","unix","linux_like","TCP_KEEPIDLE"],"kind":"constant"},"1:8288:10810":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"5:1270:14228":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"2:4385:15136":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"2:6483:14293":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindows"],"kind":"struct"},"2:8290:34183":{"crate_id":2,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"16:5419:12185":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"17:401:14934":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"6:7343:4361":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"18:521:27231":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"5:2975:13563":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"20:7355:9473":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"1:8893:13970":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"2:40499:13798":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"6:6248:9099":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"5:7331:10481":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"15:306:22116":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"1:6540:14783":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"20:103:2774":{"crate_id":20,"path":["libc","unix","IPPROTO_IP"],"kind":"constant"},"17:10988:14960":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"19:0:1132":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"20:5177:8303":{"crate_id":20,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"2:2703:142":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"14:0:3676":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"2:22743:14311":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"5:7549:14283":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"6:6263:9100":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"17:13297:12348":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"11:351:36171":{"crate_id":11,"path":["hashbrown","raw","FullBucketsIndices"],"kind":"struct"},"5:2972:10536":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"17:3251:14943":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"20:1038:2966":{"crate_id":20,"path":["libc","unix","linux_like","IPV6_V6ONLY"],"kind":"constant"},"6:4375:8268":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"5:266:11007":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"17:11617:14073":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsection"],"kind":"struct"},"1:7646:13947":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"5:1115:36119":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"6:4902:8323":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"18:660:14927":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"6:6120:9054":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"5:3343:11044":{"crate_id":5,"path":["alloc","collections","btree","set","ExtractIf"],"kind":"struct"},"1:6466:11108":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"17:12273:12308":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"20:962:2873":{"crate_id":20,"path":["libc","unix","linux_like","IP_MULTICAST_TTL"],"kind":"constant"},"1:9452:15177":{"crate_id":1,"path":["std","sys","pal","unix","fs","ReadDir"],"kind":"struct"},"17:11755:14999":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"5:6687:11007":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"20:7442:9474":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"2:3132:140":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"2:48243:13933":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"20:6771:9067":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","iocb"],"kind":"struct"},"5:1455:10481":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"17:11215:14063":{"crate_id":17,"path":["object","read","coff","import","ImportObjectData"],"kind":"struct"},"17:15117:12784":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"20:7542:9481":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"18:599:36207":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"2:32409:14315":{"crate_id":2,"path":["core","error","Source"],"kind":"struct"},"20:4912:8277":{"crate_id":20,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"6:5974:9042":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"2:22548:13573":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"20:5170:3981":{"crate_id":20,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"17:15049:12764":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"2:3409:3937":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"17:14509:12580":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"6:6114:9053":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"17:13765:12444":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"2:21445:16247":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"5:7619:11044":{"crate_id":5,"path":["alloc","vec","extract_if","ExtractIf"],"kind":"struct"},"6:6764:5349":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"16:7792:23033":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"1:7645:16247":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"6:1664:5237":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"17:12758:12306":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"20:558:4409":{"crate_id":20,"path":["libc","unix","sigval"],"kind":"struct"},"2:44166:14390":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"17:11412:14976":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"20:7362:4190":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"2:43253:3953":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"16:5712:14112":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"20:8290:8521":{"crate_id":20,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"11:1603:15112":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"2:22920:193":{"crate_id":2,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"11:2469:11044":{"crate_id":11,"path":["hashbrown","table","ExtractIf"],"kind":"struct"},"5:5392:10552":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"17:13882:12233":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"2:40681:14333":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"20:4820:8269":{"crate_id":20,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"17:11991:12263":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"17:16170:12348":{"crate_id":17,"path":["object","xcoff","Rel32"],"kind":"struct"},"16:5384:23021":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"2:40630:10558":{"crate_id":2,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"16:7513:14232":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"2:39613:217":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"2:1814:1189":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"12:0:3675":{"crate_id":12,"path":["rustc_std_workspace_alloc"],"kind":"module"},"5:3184:3969":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"2:3129:139":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"10:36:13481":{"crate_id":10,"path":["adler","algo","U32X4"],"kind":"struct"},"2:23305:191":{"crate_id":2,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"20:4866:8272":{"crate_id":20,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"17:12255:14088":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"20:5639:8352":{"crate_id":20,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"17:13056:12326":{"crate_id":17,"path":["object","archive","AixFileHeader"],"kind":"struct"},"6:5152:8356":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"1:11292:11124":{"crate_id":1,"path":["std","sys_common","once","futex","CompletionGuard"],"kind":"struct"},"1:9252:10860":{"crate_id":1,"path":["std","sys","pal","unix","args","Args"],"kind":"struct"},"1:8008:15181":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"16:6041:23025":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"17:15301:12832":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"6:6228:8182":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"20:1488:3111":{"crate_id":20,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"20:8255:8516":{"crate_id":20,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"1:1550:14259":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"17:256:14932":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"16:6545:13181":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"20:5118:8299":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"20:5060:8295":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"20:5142:8301":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"17:12380:12279":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"16:5588:13110":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"16:2472:13087":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"17:13754:12443":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"5:7307:11018":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"2:22214:16416":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr"],"kind":"trait"},"6:4955:8329":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"2:43477:13822":{"crate_id":2,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"2:44831:234":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"1:1821:15162":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"2:3080:3934":{"crate_id":2,"path":["core","ops","coroutine","Coroutine"],"kind":"trait"},"6:6798:9474":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"16:5696:23022":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"16:8239:13280":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"5:212:11005":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"11:2304:14228":{"crate_id":11,"path":["hashbrown","table","Entry"],"kind":"enum"},"2:3254:218":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"2:22226:2025":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_addr"],"kind":"foreign_type"},"1:11342:13990":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"17:10962:14958":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"11:434:36165":{"crate_id":11,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"1:9050:27440":{"crate_id":1,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"17:12290:14090":{"crate_id":17,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"6:4939:1102":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"2:10136:3950":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"1:11212:159":{"crate_id":1,"path":["std","sys","pal","unix","time","Instant"],"kind":"struct"},"16:6226:15054":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"17:11485:14985":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"6:6107:9052":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"6:580:4411":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"11:710:15096":{"crate_id":11,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"20:5453:8332":{"crate_id":20,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"16:5673:13111":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"17:16076:13049":{"crate_id":17,"path":["object","xcoff","FunAux32"],"kind":"struct"},"17:12166:15015":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"11:1582:15111":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"6:6136:11868":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"17:10852:23103":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"16:6376:23026":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"20:4928:8279":{"crate_id":20,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"11:1676:11001":{"crate_id":11,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"16:6513:14182":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"15:327:22120":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"11:1883:3969":{"crate_id":11,"path":["hashbrown","set","Iter"],"kind":"struct"},"20:5553:8343":{"crate_id":20,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"2:42281:97":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"1:11455:11126":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"16:4527:13144":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"1:1541:11026":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"17:13365:12356":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"2:7281:32849":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"18:766:27230":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"17:435:12143":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"20:8025:9856":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"11:1051:15106":{"crate_id":11,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"20:472:4403":{"crate_id":20,"path":["libc","unix","utimbuf"],"kind":"struct"},"20:1508:1864":{"crate_id":20,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"2:7879:10035":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"20:840:1889":{"crate_id":20,"path":["libc","unix","linux_like","AF_INET"],"kind":"constant"},"17:16160:13066":{"crate_id":17,"path":["object","xcoff","DwarfAux64"],"kind":"struct"},"16:7782:14235":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"16:7862:14236":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"11:1903:14259":{"crate_id":11,"path":["hashbrown","set","Intersection"],"kind":"struct"},"17:16109:13056":{"crate_id":17,"path":["object","xcoff","BlockAux32"],"kind":"struct"},"5:2062:15120":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"1:8804:206":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"2:46760:13865":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"20:1031:2950":{"crate_id":20,"path":["libc","unix","linux_like","IPV6_MULTICAST_LOOP"],"kind":"constant"},"2:44124:14389":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"17:11932:15001":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"16:7554:13122":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"20:101:1934":{"crate_id":20,"path":["libc","unix","IPPROTO_TCP"],"kind":"constant"},"2:42070:10572":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"2:9888:10646":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"1:8310:10811":{"crate_id":1,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"17:14904:12736":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"2:13066:33889":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"1:3323:3830":{"crate_id":1,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"1:3732:2379":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"2:9890:10647":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"20:8038:2708":{"crate_id":20,"path":["libc","unix","linux_like","linux","arch","generic","SO_OOBINLINE"],"kind":"constant"},"20:1494:3284":{"crate_id":20,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"17:14145:12518":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"1:7897:126":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"1:12048:798":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"20:8037:2683":{"crate_id":20,"path":["libc","unix","linux_like","linux","arch","generic","SO_KEEPALIVE"],"kind":"constant"},"6:7639:8520":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"6:5829:8969":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"20:5649:8353":{"crate_id":20,"path":["libc","unix","linux_like","linux","sched_attr"],"kind":"struct"},"20:1637:5236":{"crate_id":20,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"20:5473:8335":{"crate_id":20,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"16:8181:13127":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"2:21219:34047":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"17:14266:12536":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"11:2569:3972":{"crate_id":11,"path":["hashbrown","TryReserveError"],"kind":"enum"},"17:11399:14975":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"20:637:2178":{"crate_id":20,"path":["libc","unix","linux_like","sa_family_t"],"kind":"type_alias"},"20:7425:5347":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"20:5396:8327":{"crate_id":20,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"16:7054:14223":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"17:15321:12838":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"2:46440:13855":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"5:786:102":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"}},"external_crates":{"20":{"name":"libc","html_root_url":null},"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":28}