{"root":"0:0:2260","crate_version":"0.5.6","includes_private":false,"index":{"a:2:32165:4101-0:670:2127":{"id":"a:2:32165:4101-0:670:2127","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32165:4101","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Protocol","id":"0:670:2127","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:5:736-0:616:2073":{"id":"b:5:736-0:616:2073","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2641:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:732:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"SockAddr","id":"0:616:2073","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:738:10797","5:739:10798","5:740:10799"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:610":{"id":"0:610","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[725,0],"end":[729,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(target_os = \"redox\"))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'name","kind":{"lifetime":{"outlives":[]}}},{"name":"'bufs","kind":{"lifetime":{"outlives":[]}}},{"name":"'control","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10279:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MsgHdrMut","id":"0:595:2250","args":{"angle_bracketed":{"args":[{"lifetime":"'name"},{"lifetime":"'bufs"},{"lifetime":"'control"}],"bindings":[]}}}},"items":["0:614:788"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2898-0:616:2073":{"id":"b:2:2898-0:616:2073","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2875:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2872:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"SockAddr","id":"0:616:2073","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2901:2498"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:74":{"id":"0:74","crate_id":0,"name":null,"span":{"filename":"src/sockaddr.rs","begin":[382,0],"end":[382,23]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"2:2680:133","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"SockAddr","id":"0:616:2073","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13213:28281":{"id":"2:13213:28281","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"1:12332:459","self::pattern":"2:12848:21495"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitInclusive","id":"2:12663:10846","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12854:15249","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:41968:10351-0:692:2181":{"id":"a:2:41968:10351-0:692:2181","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:41968:10351","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TcpKeepalive","id":"0:692:2181","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:697:788":{"id":"0:697:788","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[426,9],"end":[426,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:10253:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:10234:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:41968:10351-0:681:2161":{"id":"a:2:41968:10351-0:681:2161","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:41968:10351","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RecvFlags","id":"0:681:2161","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:135:2649":{"id":"0:135:2649","crate_id":0,"name":"set_nonblocking","span":{"filename":"src/socket.rs","begin":[385,4],"end":[387,5]},"visibility":"public","docs":"Moves this socket into or out of nonblocking mode.\n\n# Notes\n\nOn Unix this corresponds to calling `fcntl` (un)setting `O_NONBLOCK`.\n\nOn Windows this corresponds to calling `ioctlsocket` (un)setting\n`FIONBIO`.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["nonblocking",{"primitive":"bool"}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3055:225","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:658:686":{"id":"0:658:686","crate_id":0,"name":"eq","span":{"filename":"src/lib.rs","begin":[208,26],"end":[208,35]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Domain","id":"0:648:2088","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:684":{"id":"0:684","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[368,9],"end":[368,13]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"2:3116:117","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RecvFlags","id":"0:681:2161","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:32165:4101-0:575:2213":{"id":"a:2:32165:4101-0:575:2213","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'addr","kind":{"lifetime":{"outlives":[]}}},{"name":"'bufs","kind":{"lifetime":{"outlives":[]}}},{"name":"'control","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32165:4101","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MsgHdr","id":"0:575:2213","args":{"angle_bracketed":{"args":[{"lifetime":"'addr"},{"lifetime":"'bufs"},{"lifetime":"'control"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:2:32165:4101-0:554:2171":{"id":"a:2:32165:4101-0:554:2171","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32165:4101","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MaybeUninitSlice","id":"0:554:2171","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:13189:33264":{"id":"2:13189:33264","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"2:13188:33270"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitAsciiWhitespace","id":"2:44039:14481","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13278:35046":{"id":"2:13278:35046","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"2:12809:135","`FromStr`":"2:12808:4214"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:42007:225","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"FromStr","id":"2:12808:4214","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"2:12808:4214","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:616:2073":{"id":"0:616:2073","crate_id":0,"name":"SockAddr","span":{"filename":"src/sockaddr.rs","begin":[21,0],"end":[24,1]},"visibility":"public","docs":"The address of a socket.\n\n`SockAddr`s may be constructed directly to and from the standard library\n[`SocketAddr`], [`SocketAddrV4`], and [`SocketAddrV6`] types.","links":{"`SocketAddr`":"2:41814:2022","`SocketAddrV4`":"2:41836:2376","`SocketAddrV6`":"2:41854:2377"},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["0:42","0:425","a:2:32106:236-0:616:2073","a:2:3121:246-0:616:2073","a:2:3156:4097-0:616:2073","a:2:32165:4101-0:616:2073","a:2:41968:10351-0:616:2073","a:2:41969:10350-0:616:2073","b:2:2913-0:616:2073","b:2:2898-0:616:2073","b:2:2625-0:616:2073","b:2:2902-0:616:2073","b:2:2628-0:616:2073","b:2:3737-0:616:2073","b:2:2908-0:616:2073","b:5:736-0:616:2073","0:72","0:75","0:66","0:619","0:64","0:74","0:68","0:70"]}}},"b:2:3737-0:270:2075":{"id":"b:2:3737-0:270:2075","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:32107:4100","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3735:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"SockRef","id":"0:270:2075","args":{"angle_bracketed":{"args":[{"lifetime":"'s"}],"bindings":[]}}}},"items":["2:3739:1803"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:282":{"id":"0:282","crate_id":0,"name":null,"span":{"filename":"src/sockref.rs","begin":[115,0],"end":[123,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10279:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"SockRef","id":"0:270:2075","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"items":["0:283:788"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:76:858":{"id":"0:76:858","crate_id":0,"name":"hash","span":{"filename":"src/sockaddr.rs","begin":[385,4],"end":[387,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["state",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"H"}}}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"H","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"std::hash::Hasher","id":"2:10503:156","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:659:2104":{"id":"0:659:2104","crate_id":0,"name":"Type","span":{"filename":"src/lib.rs","begin":[252,0],"end":[252,23]},"visibility":"public","docs":"Specification of communication semantics on a socket.\n\nThis is a newtype wrapper around an integer which provides a nicer API in\naddition to an injection point for documentation. Convenience constants such\nas [`Type::STREAM`], [`Type::DGRAM`], etc, are provided to avoid reaching\ninto libc for various constants.\n\nThis type is freely interconvertible with C's `int` type, however, if a raw\nvalue needs to be provided.","links":{"`Type::DGRAM`":"0:537:2111","`Type::STREAM`":"0:536:2107"},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"tuple":[null]},"generics":{"params":[],"where_predicates":[]},"impls":["0:535","a:2:32106:236-0:659:2104","a:2:3121:246-0:659:2104","a:2:3156:4097-0:659:2104","a:2:32165:4101-0:659:2104","a:2:41968:10351-0:659:2104","a:2:41969:10350-0:659:2104","b:2:2913-0:659:2104","b:2:2898-0:659:2104","b:2:2625-0:659:2104","b:2:2902-0:659:2104","b:2:2628-0:659:2104","b:2:3737-0:659:2104","b:2:2908-0:659:2104","b:5:736-0:659:2104","0:540","0:538","0:644","0:668","0:663","0:662","0:667","0:665"]}}},"a:2:3121:246-0:692:2181":{"id":"a:2:3121:246-0:692:2181","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3121:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TcpKeepalive","id":"0:692:2181","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:589:2243":{"id":"0:589:2243","crate_id":0,"name":"with_flags","span":{"filename":"src/lib.rs","begin":[650,4],"end":[653,5]},"visibility":"public","docs":"Set the flags of the message.\n\nCorresponds to setting `msg_flags` on Unix and `dwFlags` on Windows.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["flags",{"resolved_path":{"name":"libc::c_int","id":"20:44:2072","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2628-0:595:2250":{"id":"b:2:2628-0:595:2250","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32107:4100","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2622:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"MsgHdrMut","id":"0:595:2250","args":{"angle_bracketed":{"args":[{"lifetime":"'addr"},{"lifetime":"'bufs"},{"lifetime":"'control"}],"bindings":[]}}}},"items":["2:2630:27461"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:426:3427":{"id":"0:426:3427","crate_id":0,"name":"is_unnamed","span":{"filename":"src/sys/unix.rs","begin":[752,4],"end":[764,5]},"visibility":"public","docs":"Returns true if this address is an unnamed address from the `AF_UNIX` family (for local\ninterprocess communication), false otherwise.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:41969:10350-0:670:2127":{"id":"a:2:41969:10350-0:670:2127","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:41969:10350","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Protocol","id":"0:670:2127","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:2:41968:10351-0:616:2073":{"id":"a:2:41968:10351-0:616:2073","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:41968:10351","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"SockAddr","id":"0:616:2073","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2913-0:621:2080":{"id":"b:2:2913-0:621:2080","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2872:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2882:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"InterfaceIndexOrAddress","id":"0:621:2080","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2916:136","2:2917:1788"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:270:2075":{"id":"0:270:2075","crate_id":0,"name":"SockRef","span":{"filename":"src/sockref.rs","begin":[61,0],"end":[69,1]},"visibility":"public","docs":"A reference to a [`Socket`] that can be used to configure socket types other\nthan the `Socket` type itself.\n\nThis allows for example a [`TcpStream`], found in the standard library, to\nbe configured using all the additional methods found in the [`Socket`] API.\n\n`SockRef` can be created from any socket type that implements [`AsFd`]\n(Unix) or [`AsSocket`] (Windows) using the [`From`] implementation.\n\n[`TcpStream`]: std::net::TcpStream\n[`AsFd`]: https://doc.rust-lang.org/stable/std/os/unix/io/trait.AsFd.html\n[`AsSocket`]: https://doc.rust-lang.org/stable/std/os/windows/io/trait.AsSocket.html\n\n# Examples\n\nBelow is an example of converting a [`TcpStream`] into a [`SockRef`].\n\n```\nuse std::net::{TcpStream, SocketAddr};\n\nuse socket2::SockRef;\n\n# fn main() -> Result<(), Box<dyn std::error::Error>> {\n// Create `TcpStream` from the standard library.\nlet address: SocketAddr = \"127.0.0.1:1234\".parse()?;\n# let b1 = std::sync::Arc::new(std::sync::Barrier::new(2));\n# let b2 = b1.clone();\n# let handle = std::thread::spawn(move || {\n#    let listener = std::net::TcpListener::bind(address).unwrap();\n#    b2.wait();\n#    let (stream, _) = listener.accept().unwrap();\n#    std::thread::sleep(std::time::Duration::from_millis(10));\n#    drop(stream);\n# });\n# b1.wait();\nlet stream = TcpStream::connect(address)?;\n\n// Create a `SockRef`erence to the stream.\nlet socket_ref = SockRef::from(&stream);\n// Use `Socket::set_nodelay` on the stream.\nsocket_ref.set_nodelay(true)?;\ndrop(socket_ref);\n\nassert_eq!(stream.nodelay()?, true);\n# handle.join().unwrap();\n# Ok(())\n# }\n```","links":{"`SockRef`":"0:270:2075","`From`":"2:2875:143","`Socket`":"0:114:2074","std::net::TcpStream":"1:3893:2584"},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'s","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"impls":["a:2:32106:236-0:270:2075","a:2:3121:246-0:270:2075","a:2:3156:4097-0:270:2075","a:2:32165:4101-0:270:2075","a:2:41968:10351-0:270:2075","a:2:41969:10350-0:270:2075","b:2:2913-0:270:2075","b:2:2898-0:270:2075","b:2:2625-0:270:2075","b:2:2902-0:270:2075","b:2:2628-0:270:2075","b:2:3737-0:270:2075","b:2:2908-0:270:2075","0:282","0:274","0:278"]}}},"0:608:2239":{"id":"0:608:2239","crate_id":0,"name":"with_control","span":{"filename":"src/lib.rs","begin":[713,4],"end":[716,5]},"visibility":"public","docs":"Set the mutable control buffer of the message.\n\nCorresponds to setting `msg_control` and `msg_controllen` on Unix and\n`Control` on Windows.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["buf",{"borrowed_ref":{"lifetime":"'control","mutable":true,"type":{"slice":{"resolved_path":{"name":"MaybeUninit","id":"2:30489:2020","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u8"}}],"bindings":[]}}}}}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3737-0:621:2080":{"id":"b:2:3737-0:621:2080","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:32107:4100","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3735:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"InterfaceIndexOrAddress","id":"0:621:2080","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3739:1803"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:528:2093":{"id":"0:528:2093","crate_id":0,"name":"IPV6","span":{"filename":"src/lib.rs","begin":[216,4],"end":[216,51]},"visibility":"public","docs":"Domain for IPv6 communication, corresponding to `AF_INET6`.","links":{},"attrs":[],"deprecation":null,"inner":{"assoc_const":{"type":{"resolved_path":{"name":"Domain","id":"0:648:2088","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"default":"_"}}},"b:2:2913-0:595:2250":{"id":"b:2:2913-0:595:2250","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2872:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2882:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"MsgHdrMut","id":"0:595:2250","args":{"angle_bracketed":{"args":[{"lifetime":"'addr"},{"lifetime":"'bufs"},{"lifetime":"'control"}],"bindings":[]}}}},"items":["2:2916:136","2:2917:1788"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:128:2664":{"id":"0:128:2664","crate_id":0,"name":"accept","span":{"filename":"src/socket.rs","begin":[265,4],"end":[299,5]},"visibility":"public","docs":"Accept a new incoming connection from this listener.\n\nThis function uses `accept4(2)` on platforms that support it and\n`accept(2)` platforms that do not.\n\nThis function sets the same flags as in done for [`Socket::new`],\n[`Socket::accept_raw`] can be used if you don't want to set those flags.\n\nAdditional documentation can be found in manual of the OS:\n\n * DragonFly BSD: <https://man.dragonflybsd.org/?command=accept&section=2>\n * FreeBSD: <https://www.freebsd.org/cgi/man.cgi?query=accept&sektion=2>\n * Linux: <https://man7.org/linux/man-pages/man2/accept.2.html>\n * macOS: <https://developer.apple.com/library/archive/documentation/System/Conceptual/ManPages_iPhoneOS/man2/accept.2.html> (archived, actually for iOS)\n * NetBSD: <https://man.netbsd.org/accept.2>\n * OpenBSD: <https://man.openbsd.org/accept.2>\n * iOS: <https://developer.apple.com/library/archive/documentation/System/Conceptual/ManPages_iPhoneOS/man2/accept.2.html> (archived)\n * illumos: <https://illumos.org/man/3SOCKET/accept>\n * Windows: <https://docs.microsoft.com/en-us/windows/win32/api/winsock2/nf-winsock2-accept>","links":{"`Socket::accept_raw`":"0:129:2667","`Socket::new`":"0:121:1163"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3055:225","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"resolved_path":{"name":"Socket","id":"0:114:2074","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},{"resolved_path":{"name":"SockAddr","id":"0:616:2073","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:3156:4097-0:670:2127":{"id":"a:2:3156:4097-0:670:2127","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"2:3156:4097","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Protocol","id":"0:670:2127","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2898-0:114:2074":{"id":"b:2:2898-0:114:2074","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2875:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2872:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Socket","id":"0:114:2074","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2901:2498"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:241:3265":{"id":"0:241:3265","crate_id":0,"name":"read","span":{"filename":"src/socket.rs","begin":[2105,4],"end":[2110,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["buf",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3055:225","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:32165:4101-0:270:2075":{"id":"a:2:32165:4101-0:270:2075","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'s","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32165:4101","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"SockRef","id":"0:270:2075","args":{"angle_bracketed":{"args":[{"lifetime":"'s"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:13253:35038":{"id":"2:13253:35038","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:142:2764":{"id":"0:142:2764","crate_id":0,"name":"peek","span":{"filename":"src/socket.rs","begin":[516,4],"end":[518,5]},"visibility":"public","docs":"Receives data on the socket from the remote adress to which it is\nconnected, without removing that data from the queue. On success,\nreturns the number of bytes peeked.\n\nSuccessive calls return the same data. This is accomplished by passing\n`MSG_PEEK` as a flag to the underlying `recv` system call.\n\n# Safety\n\n`peek` makes the same safety guarantees regarding the `buf`fer as\n[`recv`].\n\n[`recv`]: Socket::recv","links":{"Socket::recv":"0:137:2714"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["buf",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"resolved_path":{"name":"MaybeUninit","id":"2:30489:2020","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u8"}}],"bindings":[]}}}}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3055:225","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:73:686":{"id":"0:73:686","crate_id":0,"name":"eq","span":{"filename":"src/sockaddr.rs","begin":[377,4],"end":[379,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2625-0:595:2250":{"id":"b:2:2625-0:595:2250","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32107:4100","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2619:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"MsgHdrMut","id":"0:595:2250","args":{"angle_bracketed":{"args":[{"lifetime":"'addr"},{"lifetime":"'bufs"},{"lifetime":"'control"}],"bindings":[]}}}},"items":["2:2627:3998"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:32106:236-0:114:2074":{"id":"a:2:32106:236-0:114:2074","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:32106:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Socket","id":"0:114:2074","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:2:41969:10350-0:114:2074":{"id":"a:2:41969:10350-0:114:2074","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:41969:10350","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Socket","id":"0:114:2074","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:634":{"id":"0:634","crate_id":0,"name":null,"span":{"filename":"src/socket.rs","begin":[2180,0],"end":[2180,29]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2875:143","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UdpSocket","id":"1:3998:3271","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Socket","id":"0:114:2074","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:635:818"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:512:3321":{"id":"0:512:3321","crate_id":0,"name":"as_raw_fd","span":{"filename":"src/sys/unix.rs","begin":[3055,4],"end":[3057,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"c_int","id":"20:44:2072","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:566:248":{"id":"0:566:248","crate_id":0,"name":"Target","span":{"filename":"src/lib.rs","begin":[410,4],"end":[410,36]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"slice":{"resolved_path":{"name":"MaybeUninit","id":"2:30489:2020","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u8"}}],"bindings":[]}}}}}}}},"0:212:3125":{"id":"0:212:3125","crate_id":0,"name":"recv_tos","span":{"filename":"src/socket.rs","begin":[1609,4],"end":[1614,5]},"visibility":"public","docs":"Get the value of the `IP_RECVTOS` option for this socket.\n\nFor more information about this option, see [`set_recv_tos`].\n\n[`set_recv_tos`]: Socket::set_recv_tos","links":{"Socket::set_recv_tos":"0:211:3124"},"attrs":["#[cfg(not(any(target_os = \"aix\", target_os = \"dragonfly\", target_os =\n\"fuchsia\", target_os = \"hurd\", target_os = \"illumos\", target_os = \"netbsd\",\ntarget_os = \"openbsd\", target_os = \"redox\", target_os = \"solaris\", target_os =\n\"haiku\", target_os = \"nto\", target_os = \"espidf\", target_os = \"vita\",)))]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3055:225","args":{"angle_bracketed":{"args":[{"type":{"primitive":"bool"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:642":{"id":"0:642","crate_id":0,"name":null,"span":{"filename":"src/sys/unix.rs","begin":[377,0],"end":[392,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10279:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"crate::Domain","id":"0:648:2088","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:643:788"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2913-0:692:2181":{"id":"b:2:2913-0:692:2181","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2872:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2882:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"TcpKeepalive","id":"0:692:2181","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2916:136","2:2917:1788"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2913-0:575:2213":{"id":"b:2:2913-0:575:2213","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2872:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2882:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"MsgHdr","id":"0:575:2213","args":{"angle_bracketed":{"args":[{"lifetime":"'addr"},{"lifetime":"'bufs"},{"lifetime":"'control"}],"bindings":[]}}}},"items":["2:2916:136","2:2917:1788"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2625-0:114:2074":{"id":"b:2:2625-0:114:2074","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32107:4100","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2619:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Socket","id":"0:114:2074","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2627:3998"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"5:5630:4085":{"id":"5:5630:4085","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7642:242"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7642:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:165:2875":{"id":"0:165:2875","crate_id":0,"name":"set_broadcast","span":{"filename":"src/socket.rs","begin":[854,4],"end":[863,5]},"visibility":"public","docs":"Set the value of the `SO_BROADCAST` option for this socket.\n\nWhen enabled, this socket is allowed to send packets to a broadcast\naddress.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["broadcast",{"primitive":"bool"}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3055:225","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:198:3079":{"id":"0:198:3079","crate_id":0,"name":"set_multicast_if_v4","span":{"filename":"src/socket.rs","begin":[1431,4],"end":[1441,5]},"visibility":"public","docs":"Set the value of the `IP_MULTICAST_IF` option for this socket.\n\nSpecifies the interface to use for routing multicast packets.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["interface",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Ipv4Addr","id":"2:41636:2515","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3055:225","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:283:788":{"id":"0:283:788","crate_id":0,"name":"fmt","span":{"filename":"src/sockref.rs","begin":[116,4],"end":[122,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"2:10253:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"2:10234:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:276:248":{"id":"0:276:248","crate_id":0,"name":"Target","span":{"filename":"src/sockref.rs","begin":[72,4],"end":[72,25]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Socket","id":"0:114:2074","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"0:563:1163":{"id":"0:563:1163","crate_id":0,"name":"new","span":{"filename":"src/lib.rs","begin":[404,4],"end":[406,5]},"visibility":"public","docs":"Creates a new `MaybeUninitSlice` wrapping a byte slice.\n\n# Panics\n\nPanics on Windows if the slice is larger than 4GB.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["buf",{"borrowed_ref":{"lifetime":"'a","mutable":true,"type":{"slice":{"resolved_path":{"name":"MaybeUninit","id":"2:30489:2020","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u8"}}],"bindings":[]}}}}}}}]],"output":{"resolved_path":{"name":"MaybeUninitSlice","id":"0:554:2171","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:133:34":{"id":"0:133:34","crate_id":0,"name":"type","span":{"filename":"src/socket.rs","begin":[342,4],"end":[344,5]},"visibility":"public","docs":"Returns the [`Type`] of this socket by checking the `SO_TYPE` option on\nthis socket.","links":{"`Type`":"0:659:2104"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3055:225","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Type","id":"0:659:2104","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2898-0:670:2127":{"id":"b:2:2898-0:670:2127","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2875:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2872:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Protocol","id":"0:670:2127","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2901:2498"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:32106:236-0:681:2161":{"id":"a:2:32106:236-0:681:2161","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:32106:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RecvFlags","id":"0:681:2161","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:144:2771":{"id":"0:144:2771","crate_id":0,"name":"recv_from_with_flags","span":{"filename":"src/socket.rs","begin":[538,4],"end":[544,5]},"visibility":"public","docs":"Identical to [`recv_from`] but allows for specification of arbitrary\nflags to the underlying `recvfrom` call.\n\n[`recv_from`]: Socket::recv_from","links":{"Socket::recv_from":"0:143:2770"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["buf",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"resolved_path":{"name":"MaybeUninit","id":"2:30489:2020","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u8"}}],"bindings":[]}}}}}}}],["flags",{"resolved_path":{"name":"c_int","id":"20:44:2072","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3055:225","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"primitive":"usize"},{"resolved_path":{"name":"SockAddr","id":"0:616:2073","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:3156:4097-0:659:2104":{"id":"a:2:3156:4097-0:659:2104","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"2:3156:4097","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Type","id":"0:659:2104","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:568":{"id":"0:568","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[417,0],"end":[421,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"DerefMut","id":"2:3342:2024","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MaybeUninitSlice","id":"0:554:2171","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["0:570:620"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:3156:4097-0:692:2181":{"id":"a:2:3156:4097-0:692:2181","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"2:3156:4097","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TcpKeepalive","id":"0:692:2181","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2628-0:114:2074":{"id":"b:2:2628-0:114:2074","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32107:4100","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2622:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Socket","id":"0:114:2074","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2630:27461"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:229:3194":{"id":"0:229:3194","crate_id":0,"name":"only_v6","span":{"filename":"src/socket.rs","begin":[1820,4],"end":[1825,5]},"visibility":"public","docs":"Get the value of the `IPV6_V6ONLY` option for this socket.\n\nFor more information about this option, see [`set_only_v6`].\n\n[`set_only_v6`]: Socket::set_only_v6","links":{"Socket::set_only_v6":"0:231:3202"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3055:225","args":{"angle_bracketed":{"args":[{"type":{"primitive":"bool"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:628":{"id":"0:628","crate_id":0,"name":null,"span":{"filename":"src/socket.rs","begin":[824,9],"end":[824,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10279:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"InterfaceIndexOrAddress","id":"0:621:2080","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:629:788"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:544:2132":{"id":"0:544:2132","crate_id":0,"name":"ICMPV6","span":{"filename":"src/lib.rs","begin":[313,4],"end":[313,63]},"visibility":"public","docs":"Protocol corresponding to `ICMPv6`.","links":{},"attrs":[],"deprecation":null,"inner":{"assoc_const":{"type":{"resolved_path":{"name":"Protocol","id":"0:670:2127","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"default":"_"}}},"2:13166:2496":{"id":"2:13166:2496","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:12395:21496"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:621:2080":{"id":"0:621:2080","crate_id":0,"name":"InterfaceIndexOrAddress","span":{"filename":"src/socket.rs","begin":[825,0],"end":[830,1]},"visibility":"public","docs":"A local interface specified by its index or an address assigned to it.\n\n`Index(0)` and `Address(Ipv4Addr::UNSPECIFIED)` are equivalent and indicate\nthat an appropriate interface should be selected by the system.","links":{},"attrs":["#[cfg(not(any(target_os = \"haiku\", target_os = \"illumos\", target_os =\n\"netbsd\", target_os = \"redox\", target_os = \"solaris\",)))]"],"deprecation":null,"inner":{"enum":{"generics":{"params":[],"where_predicates":[]},"variants_stripped":false,"variants":["0:622:2860","0:625:2862"],"impls":["a:2:32106:236-0:621:2080","a:2:3121:246-0:621:2080","a:2:3156:4097-0:621:2080","a:2:32165:4101-0:621:2080","a:2:41968:10351-0:621:2080","a:2:41969:10350-0:621:2080","b:2:2913-0:621:2080","b:2:2898-0:621:2080","b:2:2625-0:621:2080","b:2:2902-0:621:2080","b:2:2628-0:621:2080","b:2:3737-0:621:2080","b:2:2908-0:621:2080","0:628"]}}},"2:13181:28274":{"id":"2:13181:28274","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_mut_checked`](str::split_at_mut_checked).\n\n# Examples\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"2:13180:28273","str::split_at_mut_checked":"2:13183:28278"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13285:28146":{"id":"2:13285:28146","crate_id":2,"name":"trim_ascii_start","span":null,"visibility":"public","docs":"Returns a string slice with leading ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\" \\t \\u{3000}hello world\\n\".trim_ascii_start(), \"\\u{3000}hello world\\n\");\nassert_eq!(\"  \".trim_ascii_start(), \"\");\nassert_eq!(\"\".trim_ascii_start(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:992:39257"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:543:2129":{"id":"0:543:2129","crate_id":0,"name":"ICMPV4","span":{"filename":"src/lib.rs","begin":[310,4],"end":[310,61]},"visibility":"public","docs":"Protocol corresponding to `ICMPv4`.","links":{},"attrs":[],"deprecation":null,"inner":{"assoc_const":{"type":{"resolved_path":{"name":"Protocol","id":"0:670:2127","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"default":"_"}}},"0:124:2621":{"id":"0:124:2621","crate_id":0,"name":"bind","span":{"filename":"src/socket.rs","begin":[186,4],"end":[188,5]},"visibility":"public","docs":"Binds this socket to the specified address.\n\nThis function directly corresponds to the `bind(2)` function on Windows\nand Unix.\n\nAdditional documentation can be found in manual of the OS:\n\n * DragonFly BSD: <https://man.dragonflybsd.org/?command=bind&section=2>\n * FreeBSD: <https://www.freebsd.org/cgi/man.cgi?query=bind&sektion=2>\n * Linux: <https://man7.org/linux/man-pages/man2/bind.2.html>\n * macOS: <https://developer.apple.com/library/archive/documentation/System/Conceptual/ManPages_iPhoneOS/man2/bind.2.html> (archived, actually for iOS)\n * NetBSD: <https://man.netbsd.org/bind.2>\n * OpenBSD: <https://man.openbsd.org/bind.2>\n * iOS: <https://developer.apple.com/library/archive/documentation/System/Conceptual/ManPages_iPhoneOS/man2/bind.2.html> (archived)\n * illumos: <https://illumos.org/man/3SOCKET/bind>\n * Windows: <https://docs.microsoft.com/en-us/windows/win32/api/winsock2/nf-winsock2-bind>","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["address",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"SockAddr","id":"0:616:2073","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3055:225","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3737-0:595:2250":{"id":"b:2:3737-0:595:2250","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:32107:4100","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3735:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MsgHdrMut","id":"0:595:2250","args":{"angle_bracketed":{"args":[{"lifetime":"'addr"},{"lifetime":"'bufs"},{"lifetime":"'control"}],"bindings":[]}}}},"items":["2:3739:1803"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"5:740:10799":{"id":"5:740:10799","crate_id":5,"name":"clone_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["target",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:651":{"id":"0:651","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[208,9],"end":[208,13]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"2:3116:117","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Domain","id":"0:648:2088","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13257:35041":{"id":"2:13257:35041","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"1:12332:459","self::pattern":"2:12848:21495"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12854:15249","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12854:15249","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"2:12874:21492","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:169:2892":{"id":"0:169:2892","crate_id":0,"name":"set_keepalive","span":{"filename":"src/socket.rs","begin":[893,4],"end":[902,5]},"visibility":"public","docs":"Set value for the `SO_KEEPALIVE` option on this socket.\n\nEnable sending of keep-alive messages on connection-oriented sockets.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["keepalive",{"primitive":"bool"}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3055:225","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:32106:236-0:648:2088":{"id":"a:2:32106:236-0:648:2088","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:32106:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Domain","id":"0:648:2088","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:2:32165:4101-0:692:2181":{"id":"a:2:32165:4101-0:692:2181","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32165:4101","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TcpKeepalive","id":"0:692:2181","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:13167:35027":{"id":"2:13167:35027","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"b:5:736-0:659:2104":{"id":"b:5:736-0:659:2104","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2641:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:732:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Type","id":"0:659:2104","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:738:10797","5:739:10798","5:740:10799"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:538":{"id":"0:538","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[286,0],"end":[290,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2875:143","args":{"angle_bracketed":{"args":[{"type":{"primitive":"i32"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Type","id":"0:659:2104","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:539:818"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:32106:236-0:595:2250":{"id":"a:2:32106:236-0:595:2250","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'addr","kind":{"lifetime":{"outlives":[]}}},{"name":"'bufs","kind":{"lifetime":{"outlives":[]}}},{"name":"'control","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:32106:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MsgHdrMut","id":"0:595:2250","args":{"angle_bracketed":{"args":[{"lifetime":"'addr"},{"lifetime":"'bufs"},{"lifetime":"'control"}],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"5:5628:35745":{"id":"5:5628:35745","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:7642:242"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7642:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:180:2946":{"id":"0:180:2946","crate_id":0,"name":"reuse_address","span":{"filename":"src/socket.rs","begin":[1016,4],"end":[1021,5]},"visibility":"public","docs":"Get the value of the `SO_REUSEADDR` option on this socket.\n\nFor more information about this option, see [`set_reuse_address`].\n\n[`set_reuse_address`]: Socket::set_reuse_address","links":{"Socket::set_reuse_address":"0:182:2952"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3055:225","args":{"angle_bracketed":{"args":[{"type":{"primitive":"bool"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:192:3029":{"id":"0:192:3029","crate_id":0,"name":"leave_multicast_v4","span":{"filename":"src/socket.rs","begin":[1220,4],"end":[1233,5]},"visibility":"public","docs":"Leave a multicast group using `IP_DROP_MEMBERSHIP` option on this socket.\n\nFor more information about this option, see [`join_multicast_v4`].\n\n[`join_multicast_v4`]: Socket::join_multicast_v4","links":{"Socket::join_multicast_v4":"0:191:3018"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["multiaddr",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Ipv4Addr","id":"2:41636:2515","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],["interface",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Ipv4Addr","id":"2:41636:2515","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3055:225","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:277:618":{"id":"0:277:618","crate_id":0,"name":"deref","span":{"filename":"src/sockref.rs","begin":[74,4],"end":[76,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Target","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"2:3329:124","args":null}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:546:2138":{"id":"0:546:2138","crate_id":0,"name":"UDP","span":{"filename":"src/lib.rs","begin":[319,4],"end":[319,57]},"visibility":"public","docs":"Protocol corresponding to `UDP`.","links":{},"attrs":[],"deprecation":null,"inner":{"assoc_const":{"type":{"resolved_path":{"name":"Protocol","id":"0:670:2127","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"default":"_"}}},"0:43:1163":{"id":"0:43:1163","crate_id":0,"name":"new","span":{"filename":"src/sockaddr.rs","begin":[73,4],"end":[75,5]},"visibility":"public","docs":"Create a `SockAddr` from the underlying storage and its length.\n\n# Safety\n\nCaller must ensure that the address family and length match the type of\nstorage address. For example if `storage.ss_family` is set to `AF_INET`\nthe `storage` must be initialised as `sockaddr_in`, setting the content\nand length appropriately.\n\n# Examples\n\n```\n# fn main() -> std::io::Result<()> {\n# #[cfg(unix)] {\nuse std::io;\nuse std::mem;\nuse std::os::unix::io::AsRawFd;\n\nuse socket2::{SockAddr, Socket, Domain, Type};\n\nlet socket = Socket::new(Domain::IPV4, Type::STREAM, None)?;\n\n// Initialise a `SocketAddr` byte calling `getsockname(2)`.\nlet mut addr_storage: libc::sockaddr_storage = unsafe { mem::zeroed() };\nlet mut len = mem::size_of_val(&addr_storage) as libc::socklen_t;\n\n// The `getsockname(2)` system call will intiliase `storage` for\n// us, setting `len` to the correct length.\nlet res = unsafe {\n    libc::getsockname(\n        socket.as_raw_fd(),\n        (&mut addr_storage as *mut libc::sockaddr_storage).cast(),\n        &mut len,\n    )\n};\nif res == -1 {\n    return Err(io::Error::last_os_error());\n}\n\nlet address = unsafe { SockAddr::new(addr_storage, len) };\n# drop(address);\n# }\n# Ok(())\n# }\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["storage",{"resolved_path":{"name":"sockaddr_storage","id":"20:1697:2386","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}],["len",{"resolved_path":{"name":"socklen_t","id":"20:1862:2387","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"SockAddr","id":"0:616:2073","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:533":{"id":"0:533","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[236,0],"end":[240,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2875:143","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Domain","id":"0:648:2088","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"libc::c_int","id":"20:44:2072","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:534:818"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:41969:10350-0:621:2080":{"id":"a:2:41969:10350-0:621:2080","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:41969:10350","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"InterfaceIndexOrAddress","id":"0:621:2080","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:259:788":{"id":"0:259:788","crate_id":0,"name":"fmt","span":{"filename":"src/socket.rs","begin":[2169,4],"end":[2175,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"2:10253:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"2:10234:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:41968:10351-0:270:2075":{"id":"a:2:41968:10351-0:270:2075","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'s","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:41968:10351","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"SockRef","id":"0:270:2075","args":{"angle_bracketed":{"args":[{"lifetime":"'s"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:250:2034":{"id":"0:250:2034","crate_id":0,"name":"write","span":{"filename":"src/socket.rs","begin":[2139,4],"end":[2141,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["buf",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3055:225","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:143:2770":{"id":"0:143:2770","crate_id":0,"name":"recv_from","span":{"filename":"src/socket.rs","begin":[530,4],"end":[532,5]},"visibility":"public","docs":"Receives data from the socket. On success, returns the number of bytes\nread and the address from whence the data came.\n\nAdditional documentation can be found in manual of the OS:\n\n * DragonFly BSD: <https://man.dragonflybsd.org/?command=recvfrom&section=2>\n * FreeBSD: <https://www.freebsd.org/cgi/man.cgi?query=recvfrom&sektion=2>\n * Linux: <https://man7.org/linux/man-pages/man2/recvfrom.2.html>\n * macOS: <https://developer.apple.com/library/archive/documentation/System/Conceptual/ManPages_iPhoneOS/man2/recvfrom.2.html> (archived, actually for iOS)\n * NetBSD: <https://man.netbsd.org/recvfrom.2>\n * OpenBSD: <https://man.openbsd.org/recvfrom.2>\n * iOS: <https://developer.apple.com/library/archive/documentation/System/Conceptual/ManPages_iPhoneOS/man2/recvfrom.2.html> (archived)\n * illumos: <https://illumos.org/man/3SOCKET/recvfrom>\n * Windows: <https://docs.microsoft.com/en-us/windows/win32/api/winsock2/nf-winsock2-recvfrom>\n\n# Safety\n\n`recv_from` makes the same safety guarantees regarding the `buf`fer as\n[`recv`].\n\n[`recv`]: Socket::recv","links":{"Socket::recv":"0:137:2714"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["buf",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"resolved_path":{"name":"MaybeUninit","id":"2:30489:2020","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u8"}}],"bindings":[]}}}}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3055:225","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"primitive":"usize"},{"resolved_path":{"name":"SockAddr","id":"0:616:2073","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:41968:10351-0:114:2074":{"id":"a:2:41968:10351-0:114:2074","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:41968:10351","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Socket","id":"0:114:2074","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:560:788":{"id":"0:560:788","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[393,4],"end":[395,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["fmt",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"2:10253:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"2:10234:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13216:28283":{"id":"2:13216:28283","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"2:12848:21495","`DoubleEndedIterator`":"2:8230:129","prim@char":"1:12332:459","str::split":"2:13210:28279"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplit","id":"2:43774:10840","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12854:15249","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12854:15249","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12869:21493","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:581":{"id":"0:581","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[607,0],"end":[654,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(target_os = \"redox\"))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'addr","kind":{"lifetime":{"outlives":[]}}},{"name":"'bufs","kind":{"lifetime":{"outlives":[]}}},{"name":"'control","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"MsgHdr","id":"0:575:2213","args":{"angle_bracketed":{"args":[{"lifetime":"'addr"},{"lifetime":"'bufs"},{"lifetime":"'control"}],"bindings":[]}}}},"items":["0:585:1163","0:586:2227","0:587:2233","0:588:2239","0:589:2243"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:154:2829":{"id":"0:154:2829","crate_id":0,"name":"send_out_of_band","span":{"filename":"src/socket.rs","begin":[694,4],"end":[696,5]},"visibility":"public","docs":"Sends out-of-band (OOB) data on the socket to connected peer\nby setting the `MSG_OOB` flag for this call.\n\nFor more information, see [`send`], [`out_of_band_inline`].\n\n[`send`]: Socket::send\n[`out_of_band_inline`]: Socket::out_of_band_inline","links":{"Socket::send":"0:150:2814","Socket::out_of_band_inline":"0:172:2913"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["buf",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3055:225","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2628-0:648:2088":{"id":"b:2:2628-0:648:2088","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32107:4100","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2622:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Domain","id":"0:648:2088","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2630:27461"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:653:463":{"id":"0:653:463","crate_id":0,"name":"clone","span":{"filename":"src/lib.rs","begin":[208,15],"end":[208,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Domain","id":"0:648:2088","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:69:818":{"id":"0:69:818","crate_id":0,"name":"from","span":{"filename":"src/sockaddr.rs","begin":[310,4],"end":[349,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["addr",{"resolved_path":{"name":"SocketAddrV6","id":"2:41854:2377","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"SockAddr","id":"0:616:2073","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:691:686":{"id":"0:691:686","crate_id":0,"name":"eq","span":{"filename":"src/lib.rs","begin":[368,26],"end":[368,35]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"RecvFlags","id":"0:681:2161","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:624:1956":{"id":"0:624:1956","crate_id":0,"name":"0","span":{"filename":"src/socket.rs","begin":[827,10],"end":[827,13]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"struct_field":{"primitive":"u32"}}},"b:2:2625-0:554:2171":{"id":"b:2:2625-0:554:2171","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32107:4100","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2619:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"MaybeUninitSlice","id":"0:554:2171","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:2627:3998"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:585:1163":{"id":"0:585:1163","crate_id":0,"name":"new","span":{"filename":"src/lib.rs","begin":[610,4],"end":[616,5]},"visibility":"public","docs":"Create a new `MsgHdr` with all empty/zero fields.","links":{},"attrs":["#[allow(clippy::new_without_default)]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"MsgHdr","id":"0:575:2213","args":{"angle_bracketed":{"args":[{"lifetime":"'addr"},{"lifetime":"'bufs"},{"lifetime":"'control"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5629:35746":{"id":"5:5629:35746","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:304:10277","`String`":"5:7642:242"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:304:10277","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"5:7642:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2625-0:621:2080":{"id":"b:2:2625-0:621:2080","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32107:4100","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2619:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"InterfaceIndexOrAddress","id":"0:621:2080","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2627:3998"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2913-0:554:2171":{"id":"b:2:2913-0:554:2171","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2872:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2882:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"MaybeUninitSlice","id":"0:554:2171","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:2916:136","2:2917:1788"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:3737-0:575:2213":{"id":"b:2:3737-0:575:2213","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:32107:4100","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3735:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MsgHdr","id":"0:575:2213","args":{"angle_bracketed":{"args":[{"lifetime":"'addr"},{"lifetime":"'bufs"},{"lifetime":"'control"}],"bindings":[]}}}},"items":["2:3739:1803"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13158:983":{"id":"2:13158:983","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"1:12332:459"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:197:3075":{"id":"0:197:3075","crate_id":0,"name":"multicast_if_v4","span":{"filename":"src/socket.rs","begin":[1422,4],"end":[1426,5]},"visibility":"public","docs":"Get the value of the `IP_MULTICAST_IF` option for this socket.\n\nFor more information about this option, see [`set_multicast_if_v4`].\n\n[`set_multicast_if_v4`]: Socket::set_multicast_if_v4","links":{"Socket::set_multicast_if_v4":"0:198:3079"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3055:225","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Ipv4Addr","id":"2:41636:2515","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:511":{"id":"0:511","crate_id":0,"name":null,"span":{"filename":"src/sys/unix.rs","begin":[3054,0],"end":[3058,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"AsRawFd","id":"1:4912:3274","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"crate::Socket","id":"0:114:2074","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:512:3321"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13202:10777":{"id":"2:13202:10777","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"2:41876:190","prim@char":"1:12332:459","self::pattern":"2:12848:21495"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41874:193","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12854:15249","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:432:3442":{"id":"0:432:3442","crate_id":0,"name":"as_unix","span":{"filename":"src/sys/unix.rs","begin":[807,4],"end":[812,5]},"visibility":"public","docs":"Returns this address as Unix `SocketAddr` if it is an `AF_UNIX` pathname\naddress, otherwise returns `None`.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41874:193","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"std::os::unix::net::SocketAddr","id":"1:8593:2022","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:675:463":{"id":"0:675:463","crate_id":0,"name":"clone","span":{"filename":"src/lib.rs","begin":[305,15],"end":[305,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Protocol","id":"0:670:2127","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:527:2090":{"id":"0:527:2090","crate_id":0,"name":"IPV4","span":{"filename":"src/lib.rs","begin":[213,4],"end":[213,50]},"visibility":"public","docs":"Domain for IPv4 communication, corresponding to `AF_INET`.","links":{},"attrs":[],"deprecation":null,"inner":{"assoc_const":{"type":{"resolved_path":{"name":"Domain","id":"0:648:2088","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"default":"_"}}},"0:225:3184":{"id":"0:225:3184","crate_id":0,"name":"set_multicast_loop_v6","span":{"filename":"src/socket.rs","begin":[1780,4],"end":[1789,5]},"visibility":"public","docs":"Set the value of the `IPV6_MULTICAST_LOOP` option for this socket.\n\nControls whether this socket sees the multicast packets it sends itself.\nNote that this may not have any affect on IPv4 sockets.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["loop_v6",{"primitive":"bool"}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3055:225","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:41969:10350-0:681:2161":{"id":"a:2:41969:10350-0:681:2161","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:41969:10350","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RecvFlags","id":"0:681:2161","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:246:3265":{"id":"0:246:3265","crate_id":0,"name":"read","span":{"filename":"src/socket.rs","begin":[2124,4],"end":[2128,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["buf",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3055:225","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2902-0:595:2250":{"id":"b:2:2902-0:595:2250","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2875:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"MsgHdrMut","id":"0:595:2250","args":{"angle_bracketed":{"args":[{"lifetime":"'addr"},{"lifetime":"'bufs"},{"lifetime":"'control"}],"bindings":[]}}}},"items":["2:2904:818"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2913-0:670:2127":{"id":"b:2:2913-0:670:2127","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2872:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2882:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Protocol","id":"0:670:2127","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2916:136","2:2917:1788"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:3156:4097-0:575:2213":{"id":"a:2:3156:4097-0:575:2213","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'addr","kind":{"lifetime":{"outlives":[]}}},{"name":"'bufs","kind":{"lifetime":{"outlives":[]}}},{"name":"'control","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"2:3156:4097","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MsgHdr","id":"0:575:2213","args":{"angle_bracketed":{"args":[{"lifetime":"'addr"},{"lifetime":"'bufs"},{"lifetime":"'control"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:228:3190":{"id":"0:228:3190","crate_id":0,"name":"set_unicast_hops_v6","span":{"filename":"src/socket.rs","begin":[1804,4],"end":[1813,5]},"visibility":"public","docs":"Set the value for the `IPV6_UNICAST_HOPS` option on this socket.\n\nSpecifies the hop limit for ipv6 unicast packets","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["hops",{"primitive":"u32"}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3055:225","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:687":{"id":"0:687","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[368,22],"end":[368,24]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"2:2680:133","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RecvFlags","id":"0:681:2161","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:237:3256":{"id":"0:237:3256","crate_id":0,"name":"nodelay","span":{"filename":"src/socket.rs","begin":[2078,4],"end":[2083,5]},"visibility":"public","docs":"Get the value of the `TCP_NODELAY` option on this socket.\n\nFor more information about this option, see [`set_nodelay`].\n\n[`set_nodelay`]: Socket::set_nodelay","links":{"Socket::set_nodelay":"0:239:3264"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3055:225","args":{"angle_bracketed":{"args":[{"type":{"primitive":"bool"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:3156:4097-0:681:2161":{"id":"a:2:3156:4097-0:681:2161","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"2:3156:4097","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RecvFlags","id":"0:681:2161","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:614:788":{"id":"0:614:788","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[726,4],"end":[728,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["fmt",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"2:10253:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"2:10234:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13192:33442":{"id":"2:13192:33442","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EncodeUtf16","id":"2:44048:14482","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:171:2908":{"id":"0:171:2908","crate_id":0,"name":"set_linger","span":{"filename":"src/socket.rs","begin":[930,4],"end":[933,5]},"visibility":"public","docs":"Set value for the `SO_LINGER` option on this socket.\n\nIf `linger` is not `None`, a close(2) or shutdown(2) will not return\nuntil all queued messages for the socket have been successfully sent or\nthe linger timeout has been reached. Otherwise, the call returns\nimmediately and the closing is done in the background. When the socket\nis closed as part of exit(2), it always lingers in the background.\n\n# Notes\n\nOn most OSs the duration only has a precision of seconds and will be\nsilently truncated.\n\nOn Apple platforms (e.g. macOS, iOS, etc) this uses `SO_LINGER_SEC`.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["linger",{"resolved_path":{"name":"Option","id":"2:41874:193","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Duration","id":"2:44524:130","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3055:225","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2913-0:270:2075":{"id":"b:2:2913-0:270:2075","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2872:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2882:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"SockRef","id":"0:270:2075","args":{"angle_bracketed":{"args":[{"lifetime":"'s"}],"bindings":[]}}}},"items":["2:2916:136","2:2917:1788"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:570:620":{"id":"0:570:620","crate_id":0,"name":"deref_mut","span":{"filename":"src/lib.rs","begin":[418,4],"end":[420,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"resolved_path":{"name":"MaybeUninit","id":"2:30489:2020","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u8"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2908-0:595:2250":{"id":"b:2:2908-0:595:2250","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2882:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2878:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"MsgHdrMut","id":"0:595:2250","args":{"angle_bracketed":{"args":[{"lifetime":"'addr"},{"lifetime":"'bufs"},{"lifetime":"'control"}],"bindings":[]}}}},"items":["2:2911:136","2:2912:1790"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:641:818":{"id":"0:641:818","crate_id":0,"name":"from","span":{"filename":"src/socket.rs","begin":[2183,0],"end":[2183,29]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["socket",{"resolved_path":{"name":"Socket","id":"0:114:2074","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"net::UdpSocket","id":"1:3998:3271","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:3121:246-0:595:2250":{"id":"a:2:3121:246-0:595:2250","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'addr","kind":{"lifetime":{"outlives":[]}}},{"name":"'bufs","kind":{"lifetime":{"outlives":[]}}},{"name":"'control","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3121:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MsgHdrMut","id":"0:595:2250","args":{"angle_bracketed":{"args":[{"lifetime":"'addr"},{"lifetime":"'bufs"},{"lifetime":"'control"}],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"2:13169:2255":{"id":"2:13169:2255","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:12351:1833"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2912:1790":{"id":"2:2912:1790","crate_id":2,"name":"try_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Result","id":"2:42007:225","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"2:2882:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:664:463":{"id":"0:664:463","crate_id":0,"name":"clone","span":{"filename":"src/lib.rs","begin":[251,15],"end":[251,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Type","id":"0:659:2104","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:523-0:114:2074":{"id":"0:523-0:114:2074","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[187,0],"end":[187,23]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"socket::Socket","name":"Socket","id":"0:114:2074","glob":false}}},"0:645:788":{"id":"0:645:788","crate_id":0,"name":"fmt","span":{"filename":"src/sys/unix.rs","begin":[488,0],"end":[522,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"std::fmt::Formatter","id":"2:10253:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"std::fmt::Result","id":"2:10234:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2913-0:648:2088":{"id":"b:2:2913-0:648:2088","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2872:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2882:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Domain","id":"0:648:2088","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2916:136","2:2917:1788"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:696":{"id":"0:696","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[426,9],"end":[426,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10279:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TcpKeepalive","id":"0:692:2181","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:697:788"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:125:2627":{"id":"0:125:2627","crate_id":0,"name":"connect","span":{"filename":"src/socket.rs","begin":[205,4],"end":[207,5]},"visibility":"public","docs":"Initiate a connection on this socket to the specified address.\n\nThis function directly corresponds to the `connect(2)` function on\nWindows and Unix.\n\nAn error will be returned if `listen` or `connect` has already been\ncalled on this builder.\n\nAdditional documentation can be found in manual of the OS:\n\n * DragonFly BSD: <https://man.dragonflybsd.org/?command=connect&section=2>\n * FreeBSD: <https://www.freebsd.org/cgi/man.cgi?query=connect&sektion=2>\n * Linux: <https://man7.org/linux/man-pages/man2/connect.2.html>\n * macOS: <https://developer.apple.com/library/archive/documentation/System/Conceptual/ManPages_iPhoneOS/man2/connect.2.html> (archived, actually for iOS)\n * NetBSD: <https://man.netbsd.org/connect.2>\n * OpenBSD: <https://man.openbsd.org/connect.2>\n * iOS: <https://developer.apple.com/library/archive/documentation/System/Conceptual/ManPages_iPhoneOS/man2/connect.2.html> (archived)\n * illumos: <https://illumos.org/man/3SOCKET/connect>\n * Windows: <https://docs.microsoft.com/en-us/windows/win32/api/winsock2/nf-winsock2-connect>\n\n# Notes\n\nWhen using a non-blocking connect (by setting the socket into\nnon-blocking mode before calling this function), socket option can't be\nset *while connecting*. This will cause errors on Windows. Socket\noptions can be safely set before and after connecting the socket.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["address",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"SockAddr","id":"0:616:2073","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3055:225","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:153:2821":{"id":"0:153:2821","crate_id":0,"name":"send_vectored_with_flags","span":{"filename":"src/socket.rs","begin":[678,4],"end":[684,5]},"visibility":"public","docs":"Identical to [`send_vectored`] but allows for specification of arbitrary\nflags to the underlying `sendmsg`/`WSASend` call.\n\nAdditional documentation can be found in manual of the OS:\n\n * DragonFly BSD: <https://man.dragonflybsd.org/?command=sendmsg&section=2>\n * FreeBSD: <https://www.freebsd.org/cgi/man.cgi?query=sendmsg&sektion=2>\n * Linux: <https://man7.org/linux/man-pages/man2/sendmsg.2.html>\n * macOS: <https://developer.apple.com/library/archive/documentation/System/Conceptual/ManPages_iPhoneOS/man2/sendmsg.2.html> (archived, actually for iOS)\n * NetBSD: <https://man.netbsd.org/sendmsg.2>\n * OpenBSD: <https://man.openbsd.org/sendmsg.2>\n * iOS: <https://developer.apple.com/library/archive/documentation/System/Conceptual/ManPages_iPhoneOS/man2/sendmsg.2.html> (archived)\n * illumos: <https://illumos.org/man/3SOCKET/sendmsg>\n * Windows: <https://docs.microsoft.com/en-us/windows/win32/api/winsock2/nf-winsock2-sendmsg>\n\n[`send_vectored`]: Socket::send_vectored","links":{"Socket::send_vectored":"0:152:2820"},"attrs":["#[cfg(not(target_os = \"redox\"))]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["bufs",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"IoSlice","id":"1:8482:2017","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}}],["flags",{"resolved_path":{"name":"c_int","id":"20:44:2072","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3055:225","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:5:736-0:648:2088":{"id":"b:5:736-0:648:2088","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2641:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:732:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Domain","id":"0:648:2088","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:738:10797","5:739:10798","5:740:10799"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:211:3124":{"id":"0:211:3124","crate_id":0,"name":"set_recv_tos","span":{"filename":"src/socket.rs","begin":[1578,4],"end":[1587,5]},"visibility":"public","docs":"Set the value of the `IP_RECVTOS` option for this socket.\n\nIf enabled, the `IP_TOS` ancillary message is passed with\nincoming packets. It contains a byte which specifies the\nType of Service/Precedence field of the packet header.","links":{},"attrs":["#[cfg(not(any(target_os = \"aix\", target_os = \"dragonfly\", target_os =\n\"fuchsia\", target_os = \"hurd\", target_os = \"illumos\", target_os = \"netbsd\",\ntarget_os = \"openbsd\", target_os = \"redox\", target_os = \"solaris\", target_os =\n\"haiku\", target_os = \"nto\", target_os = \"espidf\", target_os = \"vita\",)))]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["recv_tos",{"primitive":"bool"}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3055:225","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:685":{"id":"0:685","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[368,15],"end":[368,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2641:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RecvFlags","id":"0:681:2161","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:686:463"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:681:2161":{"id":"0:681:2161","crate_id":0,"name":"RecvFlags","span":{"filename":"src/lib.rs","begin":[369,0],"end":[369,28]},"visibility":"public","docs":"Flags for incoming messages.\n\nFlags provide additional information about incoming messages.","links":{},"attrs":["#[cfg(not(target_os = \"redox\"))]"],"deprecation":null,"inner":{"struct":{"kind":{"tuple":[null]},"generics":{"params":[],"where_predicates":[]},"impls":["0:399","0:552","a:2:32106:236-0:681:2161","a:2:3121:246-0:681:2161","a:2:3156:4097-0:681:2161","a:2:32165:4101-0:681:2161","a:2:41968:10351-0:681:2161","a:2:41969:10350-0:681:2161","b:2:2913-0:681:2161","b:2:2898-0:681:2161","b:2:2625-0:681:2161","b:2:2902-0:681:2161","b:2:2628-0:681:2161","b:2:3737-0:681:2161","b:2:2908-0:681:2161","b:5:736-0:681:2161","0:402","0:687","0:685","0:690","0:689","0:684"]}}},"a:2:3121:246-0:575:2213":{"id":"a:2:3121:246-0:575:2213","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'addr","kind":{"lifetime":{"outlives":[]}}},{"name":"'bufs","kind":{"lifetime":{"outlives":[]}}},{"name":"'control","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3121:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MsgHdr","id":"0:575:2213","args":{"angle_bracketed":{"args":[{"lifetime":"'addr"},{"lifetime":"'bufs"},{"lifetime":"'control"}],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"0:692:2181":{"id":"0:692:2181","crate_id":0,"name":"TcpKeepalive","span":{"filename":"src/lib.rs","begin":[427,0],"end":[454,1]},"visibility":"public","docs":"Configures a socket's TCP keepalive parameters.\n\nSee [`Socket::set_tcp_keepalive`].","links":{"`Socket::set_tcp_keepalive`":"0:236:3251"},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["0:571","a:2:32106:236-0:692:2181","a:2:3121:246-0:692:2181","a:2:3156:4097-0:692:2181","a:2:32165:4101-0:692:2181","a:2:41968:10351-0:692:2181","a:2:41969:10350-0:692:2181","b:2:2913-0:692:2181","b:2:2898-0:692:2181","b:2:2625-0:692:2181","b:2:2902-0:692:2181","b:2:2628-0:692:2181","b:2:3737-0:692:2181","b:2:2908-0:692:2181","b:5:736-0:692:2181","0:696","0:698"]}}},"2:13179:35029":{"id":"2:13179:35029","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"1:12338:1704","crate::ops::IndexMut":"2:3397:4167","str::slice_unchecked":"2:13178:35028"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:155:2834":{"id":"0:155:2834","crate_id":0,"name":"send_to","span":{"filename":"src/socket.rs","begin":[703,4],"end":[705,5]},"visibility":"public","docs":"Sends data on the socket to the given address. On success, returns the\nnumber of bytes written.\n\nThis is typically used on UDP or datagram-oriented sockets.\n\nAdditional documentation can be found in manual of the OS:\n\n * DragonFly BSD: <https://man.dragonflybsd.org/?command=sendto&section=2>\n * FreeBSD: <https://www.freebsd.org/cgi/man.cgi?query=sendto&sektion=2>\n * Linux: <https://man7.org/linux/man-pages/man2/sendto.2.html>\n * macOS: <https://developer.apple.com/library/archive/documentation/System/Conceptual/ManPages_iPhoneOS/man2/sendto.2.html> (archived, actually for iOS)\n * NetBSD: <https://man.netbsd.org/sendto.2>\n * OpenBSD: <https://man.openbsd.org/sendto.2>\n * iOS: <https://developer.apple.com/library/archive/documentation/System/Conceptual/ManPages_iPhoneOS/man2/sendto.2.html> (archived)\n * illumos: <https://illumos.org/man/3SOCKET/sendto>\n * Windows: <https://docs.microsoft.com/en-us/windows/win32/api/winsock2/nf-winsock2-sendto>","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["buf",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}],["addr",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"SockAddr","id":"0:616:2073","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3055:225","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2902-0:692:2181":{"id":"b:2:2902-0:692:2181","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2875:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"TcpKeepalive","id":"0:692:2181","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2904:818"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:643:788":{"id":"0:643:788","crate_id":0,"name":"fmt","span":{"filename":"src/sys/unix.rs","begin":[377,0],"end":[392,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"std::fmt::Formatter","id":"2:10253:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"std::fmt::Result","id":"2:10234:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:537:2111":{"id":"0:537:2111","crate_id":0,"name":"DGRAM","span":{"filename":"src/lib.rs","begin":[263,4],"end":[263,50]},"visibility":"public","docs":"Type corresponding to `SOCK_DGRAM`.\n\nUsed for protocols such as UDP.","links":{},"attrs":[],"deprecation":null,"inner":{"assoc_const":{"type":{"resolved_path":{"name":"Type","id":"0:659:2104","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"default":"_"}}},"0:669:686":{"id":"0:669:686","crate_id":0,"name":"eq","span":{"filename":"src/lib.rs","begin":[251,26],"end":[251,35]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Type","id":"0:659:2104","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2625-0:659:2104":{"id":"b:2:2625-0:659:2104","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32107:4100","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2619:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Type","id":"0:659:2104","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2627:3998"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"5:5632:29533":{"id":"5:5632:29533","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"2:13284:28144"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7642:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:122:2605":{"id":"0:122:2605","crate_id":0,"name":"new_raw","span":{"filename":"src/socket.rs","begin":[140,4],"end":[143,5]},"visibility":"public","docs":"Creates a new socket ready to be configured.\n\nThis function corresponds to `socket(2)` on Unix and `WSASocketW` on\nWindows and simply creates a new socket, no other configuration is done.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["domain",{"resolved_path":{"name":"Domain","id":"0:648:2088","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}],["ty",{"resolved_path":{"name":"Type","id":"0:659:2104","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}],["protocol",{"resolved_path":{"name":"Option","id":"2:41874:193","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Protocol","id":"0:670:2127","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3055:225","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Socket","id":"0:114:2074","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:194:3040":{"id":"0:194:3040","crate_id":0,"name":"leave_multicast_v4_n","span":{"filename":"src/socket.rs","begin":[1286,4],"end":[1300,5]},"visibility":"public","docs":"Leave a multicast group using `IP_DROP_MEMBERSHIP` option on this socket.\n\nFor more information about this option, see [`join_multicast_v4_n`].\n\n[`join_multicast_v4_n`]: Socket::join_multicast_v4_n","links":{"Socket::join_multicast_v4_n":"0:193:3035"},"attrs":["#[cfg(not(any(target_os = \"aix\", target_os = \"haiku\", target_os = \"illumos\",\ntarget_os = \"netbsd\", target_os = \"openbsd\", target_os = \"redox\", target_os =\n\"solaris\", target_os = \"nto\", target_os = \"espidf\", target_os = \"vita\",)))]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["multiaddr",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Ipv4Addr","id":"2:41636:2515","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],["interface",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"InterfaceIndexOrAddress","id":"0:621:2080","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3055:225","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13188:33270":{"id":"2:13188:33270","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"2:13189:33264"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitWhitespace","id":"2:44030:14480","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2908-0:681:2161":{"id":"b:2:2908-0:681:2161","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2882:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2878:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RecvFlags","id":"0:681:2161","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2911:136","2:2912:1790"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2908-0:575:2213":{"id":"b:2:2908-0:575:2213","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2882:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2878:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"MsgHdr","id":"0:575:2213","args":{"angle_bracketed":{"args":[{"lifetime":"'addr"},{"lifetime":"'bufs"},{"lifetime":"'control"}],"bindings":[]}}}},"items":["2:2911:136","2:2912:1790"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:3737-0:554:2171":{"id":"b:2:3737-0:554:2171","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:32107:4100","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3735:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MaybeUninitSlice","id":"0:554:2171","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:3739:1803"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:32165:4101-0:681:2161":{"id":"a:2:32165:4101-0:681:2161","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32165:4101","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RecvFlags","id":"0:681:2161","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:257:3268":{"id":"0:257:3268","crate_id":0,"name":"flush","span":{"filename":"src/socket.rs","begin":[2163,4],"end":[2165,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3055:225","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:550":{"id":"0:550","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[357,0],"end":[361,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2875:143","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Protocol","id":"0:670:2127","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"libc::c_int","id":"20:44:2072","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:551:818"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:132:2682":{"id":"0:132:2682","crate_id":0,"name":"peer_addr","span":{"filename":"src/socket.rs","begin":[336,4],"end":[338,5]},"visibility":"public","docs":"Returns the socket address of the remote peer of this socket.\n\nThis function directly corresponds to the `getpeername(2)` function on\nWindows and Unix.\n\nAdditional documentation can be found in manual of the OS:\n\n * DragonFly BSD: <https://man.dragonflybsd.org/?command=getpeername&section=2>\n * FreeBSD: <https://www.freebsd.org/cgi/man.cgi?query=getpeername&sektion=2>\n * Linux: <https://man7.org/linux/man-pages/man2/getpeername.2.html>\n * macOS: <https://developer.apple.com/library/archive/documentation/System/Conceptual/ManPages_iPhoneOS/man2/getpeername.2.html> (archived, actually for iOS)\n * NetBSD: <https://man.netbsd.org/getpeername.2>\n * OpenBSD: <https://man.openbsd.org/getpeername.2>\n * iOS: <https://developer.apple.com/library/archive/documentation/System/Conceptual/ManPages_iPhoneOS/man2/getpeername.2.html> (archived)\n * illumos: <https://illumos.org/man/3SOCKET/getpeername>\n * Windows: <https://docs.microsoft.com/en-us/windows/win32/api/winsock2/nf-winsock2-getpeername>\n\n# Notes\n\nThis returns an error if the socket is not [`connect`ed].\n\n[`connect`ed]: Socket::connect","links":{"Socket::connect":"0:125:2627"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3055:225","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"SockAddr","id":"0:616:2073","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:239:3264":{"id":"0:239:3264","crate_id":0,"name":"set_nodelay","span":{"filename":"src/socket.rs","begin":[2092,4],"end":[2101,5]},"visibility":"public","docs":"Set the value of the `TCP_NODELAY` option on this socket.\n\nIf set, this option disables the Nagle algorithm. This means that\nsegments are always sent as soon as possible, even if there is only a\nsmall amount of data. When not set, data is buffered until there is a\nsufficient amount to send out, thereby avoiding the frequent sending of\nsmall packets.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["nodelay",{"primitive":"bool"}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3055:225","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:56:2466":{"id":"0:56:2466","crate_id":0,"name":"as_storage","span":{"filename":"src/sockaddr.rs","begin":[187,4],"end":[189,5]},"visibility":"public","docs":"Retuns the address as the storage.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"sockaddr_storage","id":"20:1697:2386","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:177:2930":{"id":"0:177:2930","crate_id":0,"name":"set_recv_buffer_size","span":{"filename":"src/socket.rs","begin":[984,4],"end":[993,5]},"visibility":"public","docs":"Set value for the `SO_RCVBUF` option on this socket.\n\nChanges the size of the operating system's receive buffer associated\nwith the socket.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["size",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3055:225","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:573:2196":{"id":"0:573:2196","crate_id":0,"name":"with_time","span":{"filename":"src/lib.rs","begin":[496,4],"end":[501,5]},"visibility":"public","docs":"Set the amount of time after which TCP keepalive probes will be sent on\nidle connections.\n\nThis will set `TCP_KEEPALIVE` on macOS and iOS, and\n`TCP_KEEPIDLE` on all other Unix operating systems, except\nOpenBSD and Haiku which don't support any way to set this\noption. On Windows, this sets the value of the `tcp_keepalive`\nstruct's `keepalivetime` field.\n\nSome platforms specify this value in seconds, so sub-second\nspecifications may be omitted.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["time",{"resolved_path":{"name":"Duration","id":"2:44524:130","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:41969:10350-0:692:2181":{"id":"a:2:41969:10350-0:692:2181","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:41969:10350","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TcpKeepalive","id":"0:692:2181","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2628-0:575:2213":{"id":"b:2:2628-0:575:2213","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32107:4100","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2622:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"MsgHdr","id":"0:575:2213","args":{"angle_bracketed":{"args":[{"lifetime":"'addr"},{"lifetime":"'bufs"},{"lifetime":"'control"}],"bindings":[]}}}},"items":["2:2630:27461"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:44:2441":{"id":"0:44:2441","crate_id":0,"name":"try_init","span":{"filename":"src/sockaddr.rs","begin":[122,4],"end":[144,5]},"visibility":"public","docs":"Initialise a `SockAddr` by calling the function `init`.\n\nThe type of the address storage and length passed to the function `init`\nis OS/architecture specific.\n\nThe address is zeroed before `init` is called and is thus valid to\ndereference and read from. The length initialised to the maximum length\nof the storage.\n\n# Safety\n\nCaller must ensure that the address family and length match the type of\nstorage address. For example if `storage.ss_family` is set to `AF_INET`\nthe `storage` must be initialised as `sockaddr_in`, setting the content\nand length appropriately.\n\n# Examples\n\n```\n# fn main() -> std::io::Result<()> {\n# #[cfg(unix)] {\nuse std::io;\nuse std::os::unix::io::AsRawFd;\n\nuse socket2::{SockAddr, Socket, Domain, Type};\n\nlet socket = Socket::new(Domain::IPV4, Type::STREAM, None)?;\n\n// Initialise a `SocketAddr` byte calling `getsockname(2)`.\nlet (_, address) = unsafe {\n    SockAddr::try_init(|addr_storage, len| {\n        // The `getsockname(2)` system call will intiliase `storage` for\n        // us, setting `len` to the correct length.\n        if libc::getsockname(socket.as_raw_fd(), addr_storage.cast(), len) == -1 {\n            Err(io::Error::last_os_error())\n        } else {\n            Ok(())\n        }\n    })\n}?;\n# drop(address);\n# }\n# Ok(())\n# }\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["init",{"generic":"F"}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3055:225","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"generic":"T"},{"resolved_path":{"name":"SockAddr","id":"0:616:2073","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"2:3368:141","args":{"parenthesized":{"inputs":[{"raw_pointer":{"mutable":true,"type":{"resolved_path":{"name":"sockaddr_storage","id":"20:1697:2386","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},{"raw_pointer":{"mutable":true,"type":{"resolved_path":{"name":"socklen_t","id":"20:1862:2387","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"output":{"resolved_path":{"name":"io::Result","id":"1:3055:225","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:13163:35026":{"id":"2:13163:35026","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nIf `index` is greater than the length of the string, this returns the length of the string.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"2:13161:35025"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:646":{"id":"0:646","crate_id":0,"name":null,"span":{"filename":"src/sys/unix.rs","begin":[524,0],"end":[548,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10279:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"crate::Protocol","id":"0:670:2127","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:647:788"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13228:28287":{"id":"2:13228:28287","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"1:12332:459","str::splitn":"2:13225:28285","self::pattern":"2:12848:21495"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitN","id":"2:43878:10842","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12854:15249","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12854:15249","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12869:21493","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:670:2127":{"id":"0:670:2127","crate_id":0,"name":"Protocol","span":{"filename":"src/lib.rs","begin":[306,0],"end":[306,27]},"visibility":"public","docs":"Protocol specification used for creating sockets via `Socket::new`.\n\nThis is a newtype wrapper around an integer which provides a nicer API in\naddition to an injection point for documentation.\n\nThis type is freely interconvertible with C's `int` type, however, if a raw\nvalue needs to be provided.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"tuple":[null]},"generics":{"params":[],"where_predicates":[]},"impls":["0:542","a:2:32106:236-0:670:2127","a:2:3121:246-0:670:2127","a:2:3156:4097-0:670:2127","a:2:32165:4101-0:670:2127","a:2:41968:10351-0:670:2127","a:2:41969:10350-0:670:2127","b:2:2913-0:670:2127","b:2:2898-0:670:2127","b:2:2625-0:670:2127","b:2:2902-0:670:2127","b:2:2628-0:670:2127","b:2:3737-0:670:2127","b:2:2908-0:670:2127","b:5:736-0:670:2127","0:678","0:646","0:548","0:676","0:673","0:674","0:550","0:679"]}}},"0:54:983":{"id":"0:54:983","crate_id":0,"name":"len","span":{"filename":"src/sockaddr.rs","begin":[177,4],"end":[179,5]},"visibility":"public","docs":"Returns the size of this address in bytes.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"socklen_t","id":"20:1862:2387","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:71:788":{"id":"0:71:788","crate_id":0,"name":"fmt","span":{"filename":"src/sockaddr.rs","begin":[353,4],"end":[373,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["fmt",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"2:10253:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"2:10234:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:136:2708":{"id":"0:136:2708","crate_id":0,"name":"shutdown","span":{"filename":"src/socket.rs","begin":[394,4],"end":[396,5]},"visibility":"public","docs":"Shuts down the read, write, or both halves of this connection.\n\nThis function will cause all pending and future I/O on the specified\nportions to return immediately with an appropriate value.\n\nAdditional documentation can be found in manual of the OS:\n\n * DragonFly BSD: <https://man.dragonflybsd.org/?command=shutdown&section=2>\n * FreeBSD: <https://www.freebsd.org/cgi/man.cgi?query=shutdown&sektion=2>\n * Linux: <https://man7.org/linux/man-pages/man2/shutdown.2.html>\n * macOS: <https://developer.apple.com/library/archive/documentation/System/Conceptual/ManPages_iPhoneOS/man2/shutdown.2.html> (archived, actually for iOS)\n * NetBSD: <https://man.netbsd.org/shutdown.2>\n * OpenBSD: <https://man.openbsd.org/shutdown.2>\n * iOS: <https://developer.apple.com/library/archive/documentation/System/Conceptual/ManPages_iPhoneOS/man2/shutdown.2.html> (archived)\n * illumos: <https://illumos.org/man/3SOCKET/shutdown>\n * Windows: <https://docs.microsoft.com/en-us/windows/win32/api/winsock2/nf-winsock2-shutdown>","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["how",{"resolved_path":{"name":"Shutdown","id":"1:8559:2551","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3055:225","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3737-0:648:2088":{"id":"b:2:3737-0:648:2088","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:32107:4100","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3735:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Domain","id":"0:648:2088","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3739:1803"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:433:2518":{"id":"0:433:2518","crate_id":0,"name":"as_pathname","span":{"filename":"src/sys/unix.rs","begin":[816,4],"end":[823,5]},"visibility":"public","docs":"Returns this address as a `Path` reference if it is an `AF_UNIX`\npathname address, otherwise returns `None`.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41874:193","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Path","id":"1:5436:202","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5631:29532":{"id":"5:5631:29532","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"2:13283:28143"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7642:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13243:35034":{"id":"2:13243:35034","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"2:12848:21495","`DoubleEndedIterator`":"2:8230:129","prim@char":"1:12332:459","str::rmatch_indices":"2:13246:35035"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"MatchIndices","id":"2:43906:14474","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12854:15249","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:739:10798":{"id":"5:739:10798","crate_id":5,"name":"to_owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13255:35039":{"id":"2:13255:35039","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:41968:10351-0:670:2127":{"id":"a:2:41968:10351-0:670:2127","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:41968:10351","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Protocol","id":"0:670:2127","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:549:818":{"id":"0:549:818","crate_id":0,"name":"from","span":{"filename":"src/lib.rs","begin":[352,4],"end":[354,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["p",{"resolved_path":{"name":"c_int","id":"20:44:2072","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Protocol","id":"0:670:2127","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2898-0:692:2181":{"id":"b:2:2898-0:692:2181","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2875:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2872:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"TcpKeepalive","id":"0:692:2181","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2901:2498"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2628-0:554:2171":{"id":"b:2:2628-0:554:2171","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32107:4100","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2622:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"MaybeUninitSlice","id":"0:554:2171","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:2630:27461"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:137:2714":{"id":"0:137:2714","crate_id":0,"name":"recv","span":{"filename":"src/socket.rs","begin":[419,4],"end":[421,5]},"visibility":"public","docs":"Receives data on the socket from the remote address to which it is\nconnected.\n\nThe [`connect`] method will connect this socket to a remote address.\nThis method might fail if the socket is not connected.\n\nAdditional documentation can be found in manual of the OS:\n\n * DragonFly BSD: <https://man.dragonflybsd.org/?command=recv&section=2>\n * FreeBSD: <https://www.freebsd.org/cgi/man.cgi?query=recv&sektion=2>\n * Linux: <https://man7.org/linux/man-pages/man2/recv.2.html>\n * macOS: <https://developer.apple.com/library/archive/documentation/System/Conceptual/ManPages_iPhoneOS/man2/recv.2.html> (archived, actually for iOS)\n * NetBSD: <https://man.netbsd.org/recv.2>\n * OpenBSD: <https://man.openbsd.org/recv.2>\n * iOS: <https://developer.apple.com/library/archive/documentation/System/Conceptual/ManPages_iPhoneOS/man2/recv.2.html> (archived)\n * illumos: <https://illumos.org/man/3SOCKET/recv>\n * Windows: <https://docs.microsoft.com/en-us/windows/win32/api/winsock2/nf-winsock2-recv>\n\n[`connect`]: Socket::connect\n\n# Safety\n\nNormally casting a `&mut [u8]` to `&mut [MaybeUninit<u8>]` would be\nunsound, as that allows us to write uninitialised bytes to the buffer.\nHowever this implementation promises to not write uninitialised bytes to\nthe `buf`fer and passes it directly to `recv(2)` system call. This\npromise ensures that this function can be called using a `buf`fer of\ntype `&mut [u8]`.\n\nNote that the [`io::Read::read`] implementation calls this function with\na `buf`fer of type `&mut [u8]`, allowing initialised buffers to be used\nwithout using `unsafe`.","links":{"`io::Read::read`":"1:3583:3265","Socket::connect":"0:125:2627"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["buf",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"resolved_path":{"name":"MaybeUninit","id":"2:30489:2020","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u8"}}],"bindings":[]}}}}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3055:225","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:41969:10350-0:270:2075":{"id":"a:2:41969:10350-0:270:2075","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'s","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:41969:10350","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"SockRef","id":"0:270:2075","args":{"angle_bracketed":{"args":[{"lifetime":"'s"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:13263:27774":{"id":"2:13263:27774","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns the substring after the prefix,\nwrapped in `Some`. Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12332:459","self::pattern":"2:12848:21495"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["prefix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41874:193","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12854:15249","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:41968:10351-0:648:2088":{"id":"a:2:41968:10351-0:648:2088","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:41968:10351","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Domain","id":"0:648:2088","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:0:2260":{"id":"0:0:2260","crate_id":0,"name":"socket2","span":{"filename":"src/lib.rs","begin":[9,0],"end":[729,1]},"visibility":"public","docs":"Utilities for creating and using sockets.\n\nThe goal of this crate is to create and use a socket using advanced\nconfiguration options (those that are not available in the types in the\nstandard library) without using any unsafe code.\n\nThis crate provides as direct as possible access to the system's\nfunctionality for sockets, this means little effort to provide\ncross-platform utilities. It is up to the user to know how to use sockets\nwhen using this crate. *If you don't know how to create a socket using\nlibc/system calls then this crate is not for you*. Most, if not all,\nfunctions directly relate to the equivalent system call with no error\nhandling applied, so no handling errors such as [`EINTR`]. As a result using\nthis crate can be a little wordy, but it should give you maximal flexibility\nover configuration of sockets.\n\n[`EINTR`]: std::io::ErrorKind::Interrupted\n\n# Examples\n\n```no_run\n# fn main() -> std::io::Result<()> {\nuse std::net::{SocketAddr, TcpListener};\nuse socket2::{Socket, Domain, Type};\n\n// Create a TCP listener bound to two addresses.\nlet socket = Socket::new(Domain::IPV6, Type::STREAM, None)?;\n\nsocket.set_only_v6(false)?;\nlet address: SocketAddr = \"[::1]:12345\".parse().unwrap();\nsocket.bind(&address.into())?;\nsocket.listen(128)?;\n\nlet listener: TcpListener = socket.into();\n// ...\n# drop(listener);\n# Ok(()) }\n```\n\n## Features\n\nThis crate has a single feature `all`, which enables all functions even ones\nthat are not available on all OSs.","links":{"std::io::ErrorKind::Interrupted":"1:8414:3467"},"attrs":["#![deny(missing_docs, missing_debug_implementations, rust_2018_idioms)]","#![doc(test(attr(deny(warnings))))]"],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:522-0:616:2073","0:523-0:114:2074","0:524-0:270:2075","0:525-0:621:2080","0:648:2088","0:659:2104","0:670:2127","0:681:2161","0:554:2171","0:692:2181","0:575:2213","0:595:2250"],"is_stripped":false}}},"2:3739:1803":{"id":"2:3739:1803","crate_id":2,"name":"type_id","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"TypeId","id":"2:39589:13691","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13237:4008":{"id":"2:13237:4008","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::rmatches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"2:12848:21495","`DoubleEndedIterator`":"2:8230:129","prim@char":"1:12332:459","str::rmatches":"2:13240:35033"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Matches","id":"2:43960:14477","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12854:15249","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:686:463":{"id":"0:686:463","crate_id":0,"name":"clone","span":{"filename":"src/lib.rs","begin":[368,15],"end":[368,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"RecvFlags","id":"0:681:2161","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:644":{"id":"0:644","crate_id":0,"name":null,"span":{"filename":"src/sys/unix.rs","begin":[488,0],"end":[522,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10279:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"crate::Type","id":"0:659:2104","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:645:788"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:647:788":{"id":"0:647:788","crate_id":0,"name":"fmt","span":{"filename":"src/sys/unix.rs","begin":[524,0],"end":[548,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"std::fmt::Formatter","id":"2:10253:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"std::fmt::Result","id":"2:10234:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13266:28292":{"id":"2:13266:28292","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12332:459","self::pattern":"2:12848:21495"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["suffix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41874:193","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12854:15249","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12854:15249","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12869:21493","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2902-0:681:2161":{"id":"b:2:2902-0:681:2161","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2875:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RecvFlags","id":"0:681:2161","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2904:818"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:199:3083":{"id":"0:199:3083","crate_id":0,"name":"multicast_loop_v4","span":{"filename":"src/socket.rs","begin":[1448,4],"end":[1453,5]},"visibility":"public","docs":"Get the value of the `IP_MULTICAST_LOOP` option for this socket.\n\nFor more information about this option, see [`set_multicast_loop_v4`].\n\n[`set_multicast_loop_v4`]: Socket::set_multicast_loop_v4","links":{"Socket::set_multicast_loop_v4":"0:201:3089"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3055:225","args":{"angle_bracketed":{"args":[{"type":{"primitive":"bool"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:402":{"id":"0:402","crate_id":0,"name":null,"span":{"filename":"src/sys/unix.rs","begin":[579,0],"end":[589,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(target_os = \"redox\"))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10279:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"crate::RecvFlags","id":"0:681:2161","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:403:788"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2898-0:595:2250":{"id":"b:2:2898-0:595:2250","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2875:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2872:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"MsgHdrMut","id":"0:595:2250","args":{"angle_bracketed":{"args":[{"lifetime":"'addr"},{"lifetime":"'bufs"},{"lifetime":"'control"}],"bindings":[]}}}},"items":["2:2901:2498"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:179:2940":{"id":"0:179:2940","crate_id":0,"name":"set_read_timeout","span":{"filename":"src/socket.rs","begin":[1007,4],"end":[1009,5]},"visibility":"public","docs":"Set value for the `SO_RCVTIMEO` option on this socket.\n\nIf `timeout` is `None`, then `read` and `recv` calls will block\nindefinitely.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["duration",{"resolved_path":{"name":"Option","id":"2:41874:193","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Duration","id":"2:44524:130","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3055:225","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:529:2096":{"id":"0:529:2096","crate_id":0,"name":"UNIX","span":{"filename":"src/lib.rs","begin":[219,4],"end":[219,50]},"visibility":"public","docs":"Domain for Unix socket communication, corresponding to `AF_UNIX`.","links":{},"attrs":[],"deprecation":null,"inner":{"assoc_const":{"type":{"resolved_path":{"name":"Domain","id":"0:648:2088","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"default":"_"}}},"2:13225:28285":{"id":"2:13225:28285","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"1:12332:459","self::pattern":"2:12848:21495","str::rsplitn":"2:13228:28287"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitN","id":"2:43860:10844","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12854:15249","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:159:2824":{"id":"0:159:2824","crate_id":0,"name":"sendmsg","span":{"filename":"src/socket.rs","begin":[748,4],"end":[750,5]},"visibility":"public","docs":"Send a message on a socket using a message structure.\n\nAdditional documentation can be found in manual of the OS:\n\n * DragonFly BSD: <https://man.dragonflybsd.org/?command=sendmsg&section=2>\n * FreeBSD: <https://www.freebsd.org/cgi/man.cgi?query=sendmsg&sektion=2>\n * Linux: <https://man7.org/linux/man-pages/man2/sendmsg.2.html>\n * macOS: <https://developer.apple.com/library/archive/documentation/System/Conceptual/ManPages_iPhoneOS/man2/sendmsg.2.html> (archived, actually for iOS)\n * NetBSD: <https://man.netbsd.org/sendmsg.2>\n * OpenBSD: <https://man.openbsd.org/sendmsg.2>\n * iOS: <https://developer.apple.com/library/archive/documentation/System/Conceptual/ManPages_iPhoneOS/man2/sendmsg.2.html> (archived)\n * illumos: <https://illumos.org/man/3SOCKET/sendmsg>\n * Windows: <https://docs.microsoft.com/en-us/windows/win32/api/winsock2/nf-winsock2-sendmsg>","links":{},"attrs":["#[cfg(not(target_os = \"redox\"))]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["msg",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"MsgHdr","id":"0:575:2213","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"lifetime":"'_"},{"lifetime":"'_"}],"bindings":[]}}}}}}],["flags",{"resolved_path":{"name":"libc::c_int","id":"20:44:2072","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3055:225","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2628-0:681:2161":{"id":"b:2:2628-0:681:2161","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32107:4100","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2622:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RecvFlags","id":"0:681:2161","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2630:27461"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2902-0:554:2171":{"id":"b:2:2902-0:554:2171","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2875:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"MaybeUninitSlice","id":"0:554:2171","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:2904:818"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:150:2814":{"id":"0:150:2814","crate_id":0,"name":"send","span":{"filename":"src/socket.rs","begin":[652,4],"end":[654,5]},"visibility":"public","docs":"Sends data on the socket to a connected peer.\n\nThis is typically used on TCP sockets or datagram sockets which have\nbeen connected.\n\nOn success returns the number of bytes that were sent.\n\nAdditional documentation can be found in manual of the OS:\n\n * DragonFly BSD: <https://man.dragonflybsd.org/?command=send&section=2>\n * FreeBSD: <https://www.freebsd.org/cgi/man.cgi?query=send&sektion=2>\n * Linux: <https://man7.org/linux/man-pages/man2/send.2.html>\n * macOS: <https://developer.apple.com/library/archive/documentation/System/Conceptual/ManPages_iPhoneOS/man2/send.2.html> (archived, actually for iOS)\n * NetBSD: <https://man.netbsd.org/send.2>\n * OpenBSD: <https://man.openbsd.org/send.2>\n * iOS: <https://developer.apple.com/library/archive/documentation/System/Conceptual/ManPages_iPhoneOS/man2/send.2.html> (archived)\n * illumos: <https://illumos.org/man/3SOCKET/send>\n * Windows: <https://docs.microsoft.com/en-us/windows/win32/api/winsock2/nf-winsock2-send>","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["buf",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3055:225","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:526":{"id":"0:526","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[211,0],"end":[228,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Domain","id":"0:648:2088","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:527:2090","0:528:2093","0:529:2096","0:530:2099"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:252:3268":{"id":"0:252:3268","crate_id":0,"name":"flush","span":{"filename":"src/socket.rs","begin":[2148,4],"end":[2150,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3055:225","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:126:2647":{"id":"0:126:2647","crate_id":0,"name":"connect_timeout","span":{"filename":"src/socket.rs","begin":[228,4],"end":[242,5]},"visibility":"public","docs":"Initiate a connection on this socket to the specified address, only\nonly waiting for a certain period of time for the connection to be\nestablished.\n\nUnlike many other methods on `Socket`, this does *not* correspond to a\nsingle C function. It sets the socket to nonblocking mode, connects via\nconnect(2), and then waits for the connection to complete with poll(2)\non Unix and select on Windows. When the connection is complete, the\nsocket is set back to blocking mode. On Unix, this will loop over\n`EINTR` errors.\n\n# Warnings\n\nThe non-blocking state of the socket is overridden by this function -\nit will be returned in blocking mode on success, and in an indeterminate\nstate on failure.\n\nIf the connection request times out, it may still be processing in the\nbackground - a second call to `connect` or `connect_timeout` may fail.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["addr",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"SockAddr","id":"0:616:2073","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],["timeout",{"resolved_path":{"name":"Duration","id":"2:44524:130","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3055:225","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:525-0:621:2080":{"id":"0:525-0:621:2080","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[197,0],"end":[197,40]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(not(any(target_os = \"haiku\", target_os = \"illumos\", target_os =\n\"netbsd\", target_os = \"redox\", target_os = \"solaris\",)))]"],"deprecation":null,"inner":{"import":{"source":"socket::InterfaceIndexOrAddress","name":"InterfaceIndexOrAddress","id":"0:621:2080","glob":false}}},"a:2:3121:246-0:648:2088":{"id":"a:2:3121:246-0:648:2088","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3121:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Domain","id":"0:648:2088","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:2:32165:4101-0:648:2088":{"id":"a:2:32165:4101-0:648:2088","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32165:4101","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Domain","id":"0:648:2088","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2898-0:681:2161":{"id":"b:2:2898-0:681:2161","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2875:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2872:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RecvFlags","id":"0:681:2161","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2901:2498"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13185:14483":{"id":"2:13185:14483","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:12332:459"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chars","id":"2:43726:14464","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13260:35042":{"id":"2:13260:35042","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12332:459","self::pattern":"2:12848:21495"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12854:15249","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3737-0:659:2104":{"id":"b:2:3737-0:659:2104","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:32107:4100","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3735:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Type","id":"0:659:2104","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3739:1803"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13199:27796":{"id":"2:13199:27796","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"1:12332:459","self::pattern":"2:12848:21495"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12854:15249","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12854:15249","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12869:21493","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:401:3386":{"id":"0:401:3386","crate_id":0,"name":"is_out_of_band","span":{"filename":"src/sys/unix.rs","begin":[573,4],"end":[575,5]},"visibility":"public","docs":"Check if the message contains out-of-band data.\n\nThis is useful for protocols where you receive out-of-band data\nmixed in with the normal data stream.\n\nOn Unix this corresponds to the `MSG_OOB` flag.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:158:2842":{"id":"0:158:2842","crate_id":0,"name":"send_to_vectored_with_flags","span":{"filename":"src/socket.rs","begin":[735,4],"end":[742,5]},"visibility":"public","docs":"Identical to [`send_to_vectored`] but allows for specification of\narbitrary flags to the underlying `sendmsg`/`WSASendTo` call.\n\n[`send_to_vectored`]: Socket::send_to_vectored","links":{"Socket::send_to_vectored":"0:157:2841"},"attrs":["#[cfg(not(target_os = \"redox\"))]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["bufs",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"IoSlice","id":"1:8482:2017","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}}],["addr",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"SockAddr","id":"0:616:2073","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],["flags",{"resolved_path":{"name":"c_int","id":"20:44:2072","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3055:225","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:545:2135":{"id":"0:545:2135","crate_id":0,"name":"TCP","span":{"filename":"src/lib.rs","begin":[316,4],"end":[316,57]},"visibility":"public","docs":"Protocol corresponding to `TCP`.","links":{},"attrs":[],"deprecation":null,"inner":{"assoc_const":{"type":{"resolved_path":{"name":"Protocol","id":"0:670:2127","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"default":"_"}}},"0:215:3136":{"id":"0:215:3136","crate_id":0,"name":"join_multicast_v6","span":{"filename":"src/socket.rs","begin":[1631,4],"end":[1645,5]},"visibility":"public","docs":"Join a multicast group using `IPV6_ADD_MEMBERSHIP` option on this socket.\n\nSome OSs use `IPV6_JOIN_GROUP` for this option.\n\nThis function specifies a new multicast group for this socket to join.\nThe address must be a valid multicast address, and `interface` is the\nindex of the interface to join/leave (or 0 to indicate any interface).","links":{},"attrs":["#[cfg(not(target_os = \"nto\"))]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["multiaddr",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Ipv6Addr","id":"2:41652:2521","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],["interface",{"primitive":"u32"}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3055:225","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:575:2213":{"id":"0:575:2213","crate_id":0,"name":"MsgHdr","span":{"filename":"src/lib.rs","begin":[600,0],"end":[604,1]},"visibility":"public","docs":"Configuration of a `sendmsg(2)` system call.\n\nThis wraps `msghdr` on Unix and `WSAMSG` on Windows. Also see [`MsgHdrMut`]\nfor the variant used by `recvmsg(2)`.","links":{"`MsgHdrMut`":"0:595:2250"},"attrs":["#[cfg(not(target_os = \"redox\"))]"],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'addr","kind":{"lifetime":{"outlives":[]}}},{"name":"'bufs","kind":{"lifetime":{"outlives":[]}}},{"name":"'control","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"impls":["0:581","a:2:32106:236-0:575:2213","a:2:3121:246-0:575:2213","a:2:3156:4097-0:575:2213","a:2:32165:4101-0:575:2213","a:2:41968:10351-0:575:2213","a:2:41969:10350-0:575:2213","b:2:2913-0:575:2213","b:2:2898-0:575:2213","b:2:2625-0:575:2213","b:2:2902-0:575:2213","b:2:2628-0:575:2213","b:2:3737-0:575:2213","b:2:2908-0:575:2213","0:590"]}}},"2:13222:35032":{"id":"2:13222:35032","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"2:12848:21495","str::split":"2:13210:28279","prim@char":"1:12332:459","str::split_terminator":"2:13219:35031"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitTerminator","id":"2:43824:14471","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12854:15249","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12854:15249","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12869:21493","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13234:28290":{"id":"2:13234:28290","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41874:193","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12854:15249","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12854:15249","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12869:21493","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:541:818":{"id":"0:541:818","crate_id":0,"name":"from","span":{"filename":"src/lib.rs","begin":[293,4],"end":[295,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["t",{"resolved_path":{"name":"Type","id":"0:659:2104","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"c_int","id":"20:44:2072","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:516:2039":{"id":"0:516:2039","crate_id":0,"name":"into_raw_fd","span":{"filename":"src/sys/unix.rs","begin":[3070,4],"end":[3072,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"c_int","id":"20:44:2072","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:3156:4097-0:595:2250":{"id":"a:2:3156:4097-0:595:2250","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'addr","kind":{"lifetime":{"outlives":[]}}},{"name":"'bufs","kind":{"lifetime":{"outlives":[]}}},{"name":"'control","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"2:3156:4097","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MsgHdrMut","id":"0:595:2250","args":{"angle_bracketed":{"args":[{"lifetime":"'addr"},{"lifetime":"'bufs"},{"lifetime":"'control"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:162":{"id":"0:162","crate_id":0,"name":null,"span":{"filename":"src/socket.rs","begin":[837,0],"end":[1081,1]},"visibility":"default","docs":"Socket options get/set using `SOL_SOCKET`.\n\nAdditional documentation can be found in documentation of the OS.\n* Linux: <https://man7.org/linux/man-pages/man7/socket.7.html>\n* Windows: <https://docs.microsoft.com/en-us/windows/win32/winsock/sol-socket-socket-options>","links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Socket","id":"0:114:2074","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:163:2870","0:165:2875","0:166:2880","0:167:2888","0:169:2892","0:170:2896","0:171:2908","0:172:2913","0:174:2921","0:175:2925","0:177:2930","0:178:2934","0:179:2940","0:180:2946","0:182:2952","0:183:2956","0:185:2961","0:186:2964","0:187:2968"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:656":{"id":"0:656","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[208,26],"end":[208,35]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"2:32108:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Domain","id":"0:648:2088","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:72":{"id":"0:72","crate_id":0,"name":null,"span":{"filename":"src/sockaddr.rs","begin":[376,0],"end":[380,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"2:2675:200","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"SockAddr","id":"0:616:2073","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:73:686"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:226:3187":{"id":"0:226:3187","crate_id":0,"name":"unicast_hops_v6","span":{"filename":"src/socket.rs","begin":[1794,4],"end":[1799,5]},"visibility":"public","docs":"Get the value of the `IPV6_UNICAST_HOPS` option for this socket.\n\nSpecifies the hop limit for ipv6 unicast packets","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3055:225","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u32"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:255:2034":{"id":"0:255:2034","crate_id":0,"name":"write","span":{"filename":"src/socket.rs","begin":[2154,4],"end":[2156,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["buf",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3055:225","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:32106:236-0:616:2073":{"id":"a:2:32106:236-0:616:2073","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:32106:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"SockAddr","id":"0:616:2073","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:3737-0:681:2161":{"id":"b:2:3737-0:681:2161","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:32107:4100","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3735:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RecvFlags","id":"0:681:2161","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3739:1803"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13240:35033":{"id":"2:13240:35033","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"2:12848:21495","`DoubleEndedIterator`":"2:8230:129","prim@char":"1:12332:459","str::matches":"2:13237:4008"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatches","id":"2:43978:14478","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12854:15249","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12854:15249","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12869:21493","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13256:35040":{"id":"2:13256:35040","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13159:10738":{"id":"2:13159:10738","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:274":{"id":"0:274","crate_id":0,"name":null,"span":{"filename":"src/sockref.rs","begin":[71,0],"end":[77,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'s","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Deref","id":"2:3329:124","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"SockRef","id":"0:270:2075","args":{"angle_bracketed":{"args":[{"lifetime":"'s"}],"bindings":[]}}}},"items":["0:276:248","0:277:618"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13180:28273":{"id":"2:13180:28273","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_checked`](str::split_at_checked).\n\n# Examples\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_checked":"2:13182:28277","str::split_at_mut":"2:13181:28274"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:156:2835":{"id":"0:156:2835","crate_id":0,"name":"send_to_with_flags","span":{"filename":"src/socket.rs","begin":[711,4],"end":[718,5]},"visibility":"public","docs":"Identical to [`send_to`] but allows for specification of arbitrary flags\nto the underlying `sendto` call.\n\n[`send_to`]: Socket::send_to","links":{"Socket::send_to":"0:155:2834"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["buf",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}],["addr",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"SockAddr","id":"0:616:2073","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],["flags",{"resolved_path":{"name":"c_int","id":"20:44:2072","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3055:225","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2902-0:621:2080":{"id":"b:2:2902-0:621:2080","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2875:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"InterfaceIndexOrAddress","id":"0:621:2080","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2904:818"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:32106:236-0:270:2075":{"id":"a:2:32106:236-0:270:2075","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'s","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:32106:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"SockRef","id":"0:270:2075","args":{"angle_bracketed":{"args":[{"lifetime":"'s"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:167:2888":{"id":"0:167:2888","crate_id":0,"name":"keepalive","span":{"filename":"src/socket.rs","begin":[883,4],"end":[888,5]},"visibility":"public","docs":"Get the value of the `SO_KEEPALIVE` option on this socket.\n\nFor more information about this option, see [`set_keepalive`].\n\n[`set_keepalive`]: Socket::set_keepalive","links":{"Socket::set_keepalive":"0:169:2892"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3055:225","args":{"angle_bracketed":{"args":[{"type":{"primitive":"bool"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:51:2455":{"id":"0:51:2455","crate_id":0,"name":"set_length","span":{"filename":"src/sockaddr.rs","begin":[162,4],"end":[164,5]},"visibility":"public","docs":"Set the length of the address.\n\n# Safety\n\nCaller must ensure that the address up to `length` bytes are properly\ninitialised.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["length",{"resolved_path":{"name":"socklen_t","id":"20:1862:2387","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:3121:246-0:670:2127":{"id":"a:2:3121:246-0:670:2127","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3121:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Protocol","id":"0:670:2127","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:509":{"id":"0:509","crate_id":0,"name":null,"span":{"filename":"src/sys/unix.rs","begin":[3046,0],"end":[3051,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"AsFd","id":"1:4993:3273","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"crate::Socket","id":"0:114:2074","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:510:3320"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:3121:246-0:270:2075":{"id":"a:2:3121:246-0:270:2075","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'s","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3121:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"SockRef","id":"0:270:2075","args":{"angle_bracketed":{"args":[{"lifetime":"'s"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:13168:334":{"id":"2:13168:334","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"2:13169:2255","`u8`":"1:12351:1833"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13170:3627":{"id":"2:13170:3627","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:41876:190"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:41874:193","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10938:238","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10938:238","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:654":{"id":"0:654","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[208,22],"end":[208,24]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"2:2680:133","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Domain","id":"0:648:2088","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:68":{"id":"0:68","crate_id":0,"name":null,"span":{"filename":"src/sockaddr.rs","begin":[309,0],"end":[350,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2875:143","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"SocketAddrV6","id":"2:41854:2377","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"SockAddr","id":"0:616:2073","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:69:818"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13231:28289":{"id":"2:13231:28289","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41874:193","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12854:15249","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2902-0:616:2073":{"id":"b:2:2902-0:616:2073","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2875:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"SockAddr","id":"0:616:2073","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2904:818"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:635:818":{"id":"0:635:818","crate_id":0,"name":"from","span":{"filename":"src/socket.rs","begin":[2180,0],"end":[2180,29]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["socket",{"resolved_path":{"name":"net::UdpSocket","id":"1:3998:3271","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Socket","id":"0:114:2074","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:690":{"id":"0:690","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[368,26],"end":[368,35]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"2:2675:200","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RecvFlags","id":"0:681:2161","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:691:686"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:41968:10351-0:595:2250":{"id":"a:2:41968:10351-0:595:2250","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'addr","kind":{"lifetime":{"outlives":[]}}},{"name":"'bufs","kind":{"lifetime":{"outlives":[]}}},{"name":"'control","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:41968:10351","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MsgHdrMut","id":"0:595:2250","args":{"angle_bracketed":{"args":[{"lifetime":"'addr"},{"lifetime":"'bufs"},{"lifetime":"'control"}],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"0:220:3168":{"id":"0:220:3168","crate_id":0,"name":"multicast_if_v6","span":{"filename":"src/socket.rs","begin":[1741,4],"end":[1746,5]},"visibility":"public","docs":"Get the value of the `IPV6_MULTICAST_IF` option for this socket.\n\nFor more information about this option, see [`set_multicast_if_v6`].\n\n[`set_multicast_if_v6`]: Socket::set_multicast_if_v6","links":{"Socket::set_multicast_if_v6":"0:222:3174"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3055:225","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u32"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2898-0:621:2080":{"id":"b:2:2898-0:621:2080","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2875:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2872:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"InterfaceIndexOrAddress","id":"0:621:2080","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2901:2498"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:57:2468":{"id":"0:57:2468","crate_id":0,"name":"is_ipv4","span":{"filename":"src/sockaddr.rs","begin":[192,4],"end":[194,5]},"visibility":"public","docs":"Returns true if this address is in the `AF_INET` (IPv4) family, false otherwise.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:129:2667":{"id":"0:129:2667","crate_id":0,"name":"accept_raw","span":{"filename":"src/socket.rs","begin":[305,4],"end":[307,5]},"visibility":"public","docs":"Accept a new incoming connection from this listener.\n\nThis function directly corresponds to the `accept(2)` function on\nWindows and Unix.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3055:225","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"resolved_path":{"name":"Socket","id":"0:114:2074","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},{"resolved_path":{"name":"SockAddr","id":"0:616:2073","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:178:2934":{"id":"0:178:2934","crate_id":0,"name":"read_timeout","span":{"filename":"src/socket.rs","begin":[999,4],"end":[1001,5]},"visibility":"public","docs":"Get value for the `SO_RCVTIMEO` option on this socket.\n\nIf the returned timeout is `None`, then `read` and `recv` calls will\nblock indefinitely.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3055:225","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Option","id":"2:41874:193","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Duration","id":"2:44524:130","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:195:3045":{"id":"0:195:3045","crate_id":0,"name":"join_ssm_v4","span":{"filename":"src/socket.rs","begin":[1321,4],"end":[1340,5]},"visibility":"public","docs":"Join a multicast SSM channel using `IP_ADD_SOURCE_MEMBERSHIP` option on this socket.\n\nThis function specifies a new multicast channel for this socket to join.\nThe group must be a valid SSM group address, the source must be the address of the sender\nand `interface` is the address of the local interface with which the system should join the\nmulticast group. If it's [`Ipv4Addr::UNSPECIFIED`] (`INADDR_ANY`) then\nan appropriate interface is chosen by the system.","links":{"`Ipv4Addr::UNSPECIFIED`":"2:8736:3518"},"attrs":["#[cfg(not(any(target_os = \"dragonfly\", target_os = \"haiku\", target_os =\n\"hurd\", target_os = \"netbsd\", target_os = \"openbsd\", target_os = \"redox\",\ntarget_os = \"fuchsia\", target_os = \"nto\", target_os = \"espidf\", target_os =\n\"vita\",)))]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["source",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Ipv4Addr","id":"2:41636:2515","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],["group",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Ipv4Addr","id":"2:41636:2515","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],["interface",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Ipv4Addr","id":"2:41636:2515","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3055:225","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:253":{"id":"0:253","crate_id":0,"name":null,"span":{"filename":"src/socket.rs","begin":[2153,0],"end":[2166,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["write_all","is_write_vectored","write_fmt","write_all_vectored","by_ref","write_vectored"],"trait":{"name":"Write","id":"1:3639:2549","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"resolved_path":{"name":"Socket","id":"0:114:2074","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"items":["0:255:2034","0:256:3267","0:257:3268"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:247:3266":{"id":"0:247:3266","crate_id":0,"name":"read_vectored","span":{"filename":"src/socket.rs","begin":[2131,4],"end":[2135,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(target_os = \"redox\"))]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["bufs",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"resolved_path":{"name":"IoSliceMut","id":"1:3600:2550","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3055:225","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:138:2732":{"id":"0:138:2732","crate_id":0,"name":"recv_out_of_band","span":{"filename":"src/socket.rs","begin":[431,4],"end":[433,5]},"visibility":"public","docs":"Receives out-of-band (OOB) data on the socket from the remote address to\nwhich it is connected by setting the `MSG_OOB` flag for this call.\n\nFor more information, see [`recv`], [`out_of_band_inline`].\n\n[`recv`]: Socket::recv\n[`out_of_band_inline`]: Socket::out_of_band_inline","links":{"Socket::recv":"0:137:2714","Socket::out_of_band_inline":"0:172:2913"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["buf",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"resolved_path":{"name":"MaybeUninit","id":"2:30489:2020","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u8"}}],"bindings":[]}}}}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3055:225","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:403:788":{"id":"0:403:788","crate_id":0,"name":"fmt","span":{"filename":"src/sys/unix.rs","begin":[580,4],"end":[588,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"std::fmt::Formatter","id":"2:10253:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"std::fmt::Result","id":"2:10234:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:66":{"id":"0:66","crate_id":0,"name":null,"span":{"filename":"src/sockaddr.rs","begin":[276,0],"end":[307,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2875:143","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"SocketAddrV4","id":"2:41836:2376","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"SockAddr","id":"0:616:2073","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:67:818"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:242:3266":{"id":"0:242:3266","crate_id":0,"name":"read_vectored","span":{"filename":"src/socket.rs","begin":[2113,4],"end":[2120,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(target_os = \"redox\"))]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["bufs",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"resolved_path":{"name":"IoSliceMut","id":"1:3600:2550","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3055:225","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5613:35742":{"id":"5:5613:35742","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:304:10277","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"5:304:10277","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13196:27794":{"id":"2:13196:27794","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, in which case this function will return true if\nthe `&str` is a prefix of this string slice.\n\nThe [pattern] can also be a [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\nThese will only be checked against the first character of this string slice.\nLook at the second example below regarding behavior for slices of [`char`]s.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```\n\n```\nlet bananas = \"bananas\";\n\n// Note that both of these assert successfully.\nassert!(bananas.starts_with(&['b', 'a', 'n', 'a']));\nassert!(bananas.starts_with(&['a', 'b', 'c', 'd']));\n```","links":{"prim@char":"1:12332:459","self::pattern":"2:12848:21495"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12854:15249","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:170:2896":{"id":"0:170:2896","crate_id":0,"name":"linger","span":{"filename":"src/socket.rs","begin":[909,4],"end":[914,5]},"visibility":"public","docs":"Get the value of the `SO_LINGER` option on this socket.\n\nFor more information about this option, see [`set_linger`].\n\n[`set_linger`]: Socket::set_linger","links":{"Socket::set_linger":"0:171:2908"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3055:225","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Option","id":"2:41874:193","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Duration","id":"2:44524:130","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:738:10797":{"id":"5:738:10797","crate_id":5,"name":"Owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"0:425":{"id":"0:425","crate_id":0,"name":null,"span":{"filename":"src/sys/unix.rs","begin":[707,0],"end":[843,1]},"visibility":"default","docs":"Unix only API.","links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"crate::SockAddr","id":"0:616:2073","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:426:3427","0:432:3442","0:433:2518","0:436:2519"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2908-0:554:2171":{"id":"b:2:2908-0:554:2171","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2882:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2878:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"MaybeUninitSlice","id":"0:554:2171","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:2911:136","2:2912:1790"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:629:788":{"id":"0:629:788","crate_id":0,"name":"fmt","span":{"filename":"src/socket.rs","begin":[824,9],"end":[824,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:10253:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:10234:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:193:3035":{"id":"0:193:3035","crate_id":0,"name":"join_multicast_v4_n","span":{"filename":"src/socket.rs","begin":[1253,4],"end":[1267,5]},"visibility":"public","docs":"Join a multicast group using `IP_ADD_MEMBERSHIP` option on this socket.\n\nThis function specifies a new multicast group for this socket to join.\nThe address must be a valid multicast address, and `interface` specifies\nthe local interface with which the system should join the multicast\ngroup. See [`InterfaceIndexOrAddress`].","links":{"`InterfaceIndexOrAddress`":"0:621:2080"},"attrs":["#[cfg(not(any(target_os = \"aix\", target_os = \"haiku\", target_os = \"illumos\",\ntarget_os = \"netbsd\", target_os = \"openbsd\", target_os = \"redox\", target_os =\n\"solaris\", target_os = \"nto\", target_os = \"espidf\", target_os = \"vita\",)))]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["multiaddr",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Ipv4Addr","id":"2:41636:2515","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],["interface",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"InterfaceIndexOrAddress","id":"0:621:2080","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3055:225","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2908-0:114:2074":{"id":"b:2:2908-0:114:2074","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2882:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2878:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Socket","id":"0:114:2074","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2911:136","2:2912:1790"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:648:2088":{"id":"0:648:2088","crate_id":0,"name":"Domain","span":{"filename":"src/lib.rs","begin":[209,0],"end":[209,25]},"visibility":"public","docs":"Specification of the communication domain for a socket.\n\nThis is a newtype wrapper around an integer which provides a nicer API in\naddition to an injection point for documentation. Convenience constants such\nas [`Domain::IPV4`], [`Domain::IPV6`], etc, are provided to avoid reaching\ninto libc for various constants.\n\nThis type is freely interconvertible with C's `int` type, however, if a raw\nvalue needs to be provided.","links":{"`Domain::IPV4`":"0:527:2090","`Domain::IPV6`":"0:528:2093"},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"tuple":[null]},"generics":{"params":[],"where_predicates":[]},"impls":["0:396","0:526","a:2:32106:236-0:648:2088","a:2:3121:246-0:648:2088","a:2:3156:4097-0:648:2088","a:2:32165:4101-0:648:2088","a:2:41968:10351-0:648:2088","a:2:41969:10350-0:648:2088","b:2:2913-0:648:2088","b:2:2898-0:648:2088","b:2:2625-0:648:2088","b:2:2902-0:648:2088","b:2:2628-0:648:2088","b:2:3737-0:648:2088","b:2:2908-0:648:2088","b:5:736-0:648:2088","0:652","0:642","0:651","0:654","0:656","0:531","0:533","0:657"]}}},"0:536:2107":{"id":"0:536:2107","crate_id":0,"name":"STREAM","span":{"filename":"src/lib.rs","begin":[258,4],"end":[258,52]},"visibility":"public","docs":"Type corresponding to `SOCK_STREAM`.\n\nUsed for protocols such as TCP.","links":{},"attrs":[],"deprecation":null,"inner":{"assoc_const":{"type":{"resolved_path":{"name":"Type","id":"0:659:2104","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"default":"_"}}},"0:60:2477":{"id":"0:60:2477","crate_id":0,"name":"as_socket","span":{"filename":"src/sockaddr.rs","begin":[210,4],"end":[238,5]},"visibility":"public","docs":"Returns this address as a `SocketAddr` if it is in the `AF_INET` (IPv4)\nor `AF_INET6` (IPv6) family, otherwise returns `None`.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41874:193","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"SocketAddr","id":"2:41814:2022","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:3121:246-0:621:2080":{"id":"a:2:3121:246-0:621:2080","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3121:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"InterfaceIndexOrAddress","id":"0:621:2080","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:157:2841":{"id":"0:157:2841","crate_id":0,"name":"send_to_vectored","span":{"filename":"src/socket.rs","begin":[725,4],"end":[727,5]},"visibility":"public","docs":"Send data to a peer listening on `addr`. Returns the amount of bytes\nwritten.\n\nAdditional documentation can be found in manual of the OS:\n\n * DragonFly BSD: <https://man.dragonflybsd.org/?command=sendmsg&section=2>\n * FreeBSD: <https://www.freebsd.org/cgi/man.cgi?query=sendmsg&sektion=2>\n * Linux: <https://man7.org/linux/man-pages/man2/sendmsg.2.html>\n * macOS: <https://developer.apple.com/library/archive/documentation/System/Conceptual/ManPages_iPhoneOS/man2/sendmsg.2.html> (archived, actually for iOS)\n * NetBSD: <https://man.netbsd.org/sendmsg.2>\n * OpenBSD: <https://man.openbsd.org/sendmsg.2>\n * iOS: <https://developer.apple.com/library/archive/documentation/System/Conceptual/ManPages_iPhoneOS/man2/sendmsg.2.html> (archived)\n * illumos: <https://illumos.org/man/3SOCKET/sendmsg>\n * Windows: <https://docs.microsoft.com/en-us/windows/win32/api/winsock2/nf-winsock2-sendmsg>","links":{},"attrs":["#[cfg(not(target_os = \"redox\"))]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["bufs",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"IoSlice","id":"1:8482:2017","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}}],["addr",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"SockAddr","id":"0:616:2073","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3055:225","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:55:334":{"id":"0:55:334","crate_id":0,"name":"as_ptr","span":{"filename":"src/sockaddr.rs","begin":[182,4],"end":[184,5]},"visibility":"public","docs":"Returns a raw pointer to the address.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"resolved_path":{"name":"sockaddr","id":"20:1508:2066","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2913-0:681:2161":{"id":"b:2:2913-0:681:2161","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2872:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2882:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RecvFlags","id":"0:681:2161","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2916:136","2:2917:1788"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:567:618":{"id":"0:567:618","crate_id":0,"name":"deref","span":{"filename":"src/lib.rs","begin":[412,4],"end":[414,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"MaybeUninit","id":"2:30489:2020","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u8"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2908-0:270:2075":{"id":"b:2:2908-0:270:2075","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2882:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2878:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"SockRef","id":"0:270:2075","args":{"angle_bracketed":{"args":[{"lifetime":"'s"}],"bindings":[]}}}},"items":["2:2911:136","2:2912:1790"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:3121:246-0:114:2074":{"id":"a:2:3121:246-0:114:2074","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3121:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Socket","id":"0:114:2074","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:13178:35028":{"id":"2:13178:35028","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"1:12338:1704","str::slice_mut_unchecked":"2:13179:35029","crate::ops::Index":"2:39420:2860"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:590":{"id":"0:590","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[657,0],"end":[661,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(target_os = \"redox\"))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'name","kind":{"lifetime":{"outlives":[]}}},{"name":"'bufs","kind":{"lifetime":{"outlives":[]}}},{"name":"'control","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10279:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MsgHdr","id":"0:575:2213","args":{"angle_bracketed":{"args":[{"lifetime":"'name"},{"lifetime":"'bufs"},{"lifetime":"'control"}],"bindings":[]}}}},"items":["0:594:788"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13284:28144":{"id":"2:13284:28144","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2625-0:692:2181":{"id":"b:2:2625-0:692:2181","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32107:4100","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2619:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"TcpKeepalive","id":"0:692:2181","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2627:3998"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:620:463":{"id":"0:620:463","crate_id":0,"name":"clone","span":{"filename":"src/sockaddr.rs","begin":[20,9],"end":[20,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SockAddr","id":"0:616:2073","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:572:1163":{"id":"0:572:1163","crate_id":0,"name":"new","span":{"filename":"src/lib.rs","begin":[458,4],"end":[483,5]},"visibility":"public","docs":"Returns a new, empty set of TCP keepalive parameters.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"TcpKeepalive","id":"0:692:2181","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:574:2205":{"id":"0:574:2205","crate_id":0,"name":"with_interval","span":{"filename":"src/lib.rs","begin":[541,4],"end":[546,5]},"visibility":"public","docs":"Set the value of the `TCP_KEEPINTVL` option. On Windows, this sets the\nvalue of the `tcp_keepalive` struct's `keepaliveinterval` field.\n\nSets the time interval between TCP keepalive probes.\n\nSome platforms specify this value in seconds, so sub-second\nspecifications may be omitted.","links":{},"attrs":["#[cfg(any(target_os = \"android\", target_os = \"dragonfly\", target_os =\n\"freebsd\", target_os = \"fuchsia\", target_os = \"illumos\", target_os = \"ios\",\ntarget_os = \"linux\", target_os = \"macos\", target_os = \"netbsd\", target_os =\n\"tvos\", target_os = \"watchos\", target_os = \"windows\",))]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["interval",{"resolved_path":{"name":"Duration","id":"2:44524:130","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:638":{"id":"0:638","crate_id":0,"name":null,"span":{"filename":"src/socket.rs","begin":[2182,0],"end":[2182,31]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2875:143","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Socket","id":"0:114:2074","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"net::TcpListener","id":"1:3896:3270","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:639:818"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13251:35037":{"id":"2:13251:35037","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:400:3380":{"id":"0:400:3380","crate_id":0,"name":"is_end_of_record","span":{"filename":"src/sys/unix.rs","begin":[563,4],"end":[565,5]},"visibility":"public","docs":"Check if the message terminates a record.\n\nNot all socket types support the notion of records. For socket types\nthat do support it (such as [`SEQPACKET`]), a record is terminated by\nsending a message with the end-of-record flag set.\n\nOn Unix this corresponds to the `MSG_EOR` flag.\n\n[`SEQPACKET`]: Type::SEQPACKET","links":{},"attrs":["#[cfg(not(target_os = \"espidf\"))]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13157":{"id":"2:13157","crate_id":2,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["2:13158:983","2:13159:10738","2:13160:35024","2:13161:35025","2:13163:35026","2:13166:2496","2:13167:35027","2:13168:334","2:13169:2255","2:13170:3627","2:13172:28248","2:13174:28249","2:13176:28250","2:13178:35028","2:13179:35029","2:13180:28273","2:13181:28274","2:13182:28277","2:13183:28278","2:13185:14483","2:13186:14493","2:13187:3396","2:13188:33270","2:13189:33264","2:13190:31823","2:13191:35030","2:13192:33442","2:13193:28291","2:13196:27794","2:13199:27796","2:13202:10777","2:13206:10737","2:13210:28279","2:13213:28281","2:13216:28283","2:13219:35031","2:13222:35032","2:13225:28285","2:13228:28287","2:13231:28289","2:13234:28290","2:13237:4008","2:13240:35033","2:13243:35034","2:13246:35035","2:13249:35036","2:13251:35037","2:13253:35038","2:13255:35039","2:13256:35040","2:13257:35041","2:13260:35042","2:13263:27774","2:13266:28292","2:13269:35043","2:13272:35044","2:13275:35045","2:13278:35046","2:13280:28139","2:13281:28140","2:13282:28142","2:13283:28143","2:13284:28144","2:13285:28146","2:13286:28147","2:13287:28148","2:13288:35047","2:13290:16179","2:13291:35048"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:5:736-0:692:2181":{"id":"b:5:736-0:692:2181","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2641:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:732:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TcpKeepalive","id":"0:692:2181","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:738:10797","5:739:10798","5:740:10799"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:5:736-0:681:2161":{"id":"b:5:736-0:681:2161","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2641:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:732:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RecvFlags","id":"0:681:2161","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:738:10797","5:739:10798","5:740:10799"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:32106:236-0:659:2104":{"id":"a:2:32106:236-0:659:2104","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:32106:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Type","id":"0:659:2104","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:513":{"id":"0:513","crate_id":0,"name":null,"span":{"filename":"src/sys/unix.rs","begin":[3061,0],"end":[3066,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2875:143","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Socket","id":"0:114:2074","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"std::os::unix::io::OwnedFd","id":"1:4970:3333","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:514:818"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13187:3396":{"id":"2:13187:3396","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"2:43742:4059","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:140:2750":{"id":"0:140:2750","crate_id":0,"name":"recv_vectored","span":{"filename":"src/socket.rs","begin":[475,4],"end":[480,5]},"visibility":"public","docs":"Receives data on the socket from the remote address to which it is\nconnected. Unlike [`recv`] this allows passing multiple buffers.\n\nThe [`connect`] method will connect this socket to a remote address.\nThis method might fail if the socket is not connected.\n\nIn addition to the number of bytes read, this function returns the flags\nfor the received message. See [`RecvFlags`] for more information about\nthe returned flags.\n\nAdditional documentation can be found in manual of the OS:\n\n * DragonFly BSD: <https://man.dragonflybsd.org/?command=recvmsg&section=2>\n * FreeBSD: <https://www.freebsd.org/cgi/man.cgi?query=recvmsg&sektion=2>\n * Linux: <https://man7.org/linux/man-pages/man2/recvmsg.2.html>\n * macOS: <https://developer.apple.com/library/archive/documentation/System/Conceptual/ManPages_iPhoneOS/man2/recvmsg.2.html> (archived, actually for iOS)\n * NetBSD: <https://man.netbsd.org/recvmsg.2>\n * OpenBSD: <https://man.openbsd.org/recvmsg.2>\n * iOS: <https://developer.apple.com/library/archive/documentation/System/Conceptual/ManPages_iPhoneOS/man2/recvmsg.2.html> (archived)\n * illumos: <https://illumos.org/man/3SOCKET/recvmsg>\n * Windows: <https://docs.microsoft.com/en-us/windows/win32/api/winsock2/nf-winsock2-recvmsg>\n\n[`recv`]: Socket::recv\n[`connect`]: Socket::connect\n\n# Safety\n\nNormally casting a `IoSliceMut` to `MaybeUninitSlice` would be unsound,\nas that allows us to write uninitialised bytes to the buffer. However\nthis implementation promises to not write uninitialised bytes to the\n`bufs` and passes it directly to `recvmsg(2)` system call. This promise\nensures that this function can be called using `bufs` of type `&mut\n[IoSliceMut]`.\n\nNote that the [`io::Read::read_vectored`] implementation calls this\nfunction with `buf`s of type `&mut [IoSliceMut]`, allowing initialised\nbuffers to be used without using `unsafe`.","links":{"`RecvFlags`":"0:681:2161","Socket::recv":"0:137:2714","Socket::connect":"0:125:2627","`io::Read::read_vectored`":"1:3584:3266"},"attrs":["#[cfg(not(target_os = \"redox\"))]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["bufs",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"resolved_path":{"name":"MaybeUninitSlice","id":"0:554:2171","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3055:225","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"primitive":"usize"},{"resolved_path":{"name":"RecvFlags","id":"0:681:2161","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:232:3206":{"id":"0:232:3206","crate_id":0,"name":"recv_tclass_v6","span":{"filename":"src/socket.rs","begin":[1864,4],"end":[1869,5]},"visibility":"public","docs":"Get the value of the `IPV6_RECVTCLASS` option for this socket.\n\nFor more information about this option, see [`set_recv_tclass_v6`].\n\n[`set_recv_tclass_v6`]: Socket::set_recv_tclass_v6","links":{"Socket::set_recv_tclass_v6":"0:234:3213"},"attrs":["#[cfg(not(any(target_os = \"dragonfly\", target_os = \"fuchsia\", target_os =\n\"illumos\", target_os = \"netbsd\", target_os = \"openbsd\", target_os = \"redox\",\ntarget_os = \"solaris\", target_os = \"haiku\", target_os = \"hurd\", target_os =\n\"espidf\", target_os = \"vita\",)))]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3055:225","args":{"angle_bracketed":{"args":[{"type":{"primitive":"bool"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:223:3178":{"id":"0:223:3178","crate_id":0,"name":"multicast_loop_v6","span":{"filename":"src/socket.rs","begin":[1769,4],"end":[1774,5]},"visibility":"public","docs":"Get the value of the `IPV6_MULTICAST_LOOP` option for this socket.\n\nFor more information about this option, see [`set_multicast_loop_v6`].\n\n[`set_multicast_loop_v6`]: Socket::set_multicast_loop_v6","links":{"Socket::set_multicast_loop_v6":"0:225:3184"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3055:225","args":{"angle_bracketed":{"args":[{"type":{"primitive":"bool"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:216:3146":{"id":"0:216:3146","crate_id":0,"name":"leave_multicast_v6","span":{"filename":"src/socket.rs","begin":[1655,4],"end":[1669,5]},"visibility":"public","docs":"Leave a multicast group using `IPV6_DROP_MEMBERSHIP` option on this socket.\n\nSome OSs use `IPV6_LEAVE_GROUP` for this option.\n\nFor more information about this option, see [`join_multicast_v6`].\n\n[`join_multicast_v6`]: Socket::join_multicast_v6","links":{"Socket::join_multicast_v6":"0:215:3136"},"attrs":["#[cfg(not(target_os = \"nto\"))]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["multiaddr",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Ipv6Addr","id":"2:41652:2521","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],["interface",{"primitive":"u32"}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3055:225","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:174:2921":{"id":"0:174:2921","crate_id":0,"name":"set_out_of_band_inline","span":{"filename":"src/socket.rs","begin":[957,4],"end":[966,5]},"visibility":"public","docs":"Set value for the `SO_OOBINLINE` option on this socket.\n\nIf this option is enabled, out-of-band data is directly placed into the\nreceive data stream. Otherwise, out-of-band data is passed only when the\n`MSG_OOB` flag is set during receiving. As per RFC6093, TCP sockets\nusing the Urgent mechanism are encouraged to set this flag.","links":{},"attrs":["#[cfg(not(target_os = \"redox\"))]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["oob_inline",{"primitive":"bool"}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3055:225","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13182:28277":{"id":"2:13182:28277","crate_id":2,"name":"split_at_checked","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that’s not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut_checked`]\nmethod.\n\n[`split_at_mut_checked`]: str::split_at_mut_checked\n\n# Examples\n\n```\n#![feature(split_at_checked)]\n\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at_checked(3).unwrap();\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n\nassert_eq!(None, s.split_at_checked(13));  // Inside “ö”\nassert_eq!(None, s.split_at_checked(16));  // Beyond the string length\n```","links":{"str::split_at_mut_checked":"2:13183:28278"},"attrs":["#[must_use]","#[unstable(feature = \"split_at_checked\", reason = \"new API\", issue =\n\"119128\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"2:41874:193","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2908-0:621:2080":{"id":"b:2:2908-0:621:2080","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2882:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2878:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"InterfaceIndexOrAddress","id":"0:621:2080","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2911:136","2:2912:1790"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:32165:4101-0:616:2073":{"id":"a:2:32165:4101-0:616:2073","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32165:4101","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"SockAddr","id":"0:616:2073","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2625-0:648:2088":{"id":"b:2:2625-0:648:2088","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32107:4100","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2619:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Domain","id":"0:648:2088","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2627:3998"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:548":{"id":"0:548","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[351,0],"end":[355,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2875:143","args":{"angle_bracketed":{"args":[{"type":{"primitive":"i32"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Protocol","id":"0:670:2127","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:549:818"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:605:1163":{"id":"0:605:1163","crate_id":0,"name":"new","span":{"filename":"src/lib.rs","begin":[682,4],"end":[688,5]},"visibility":"public","docs":"Create a new `MsgHdrMut` with all empty/zero fields.","links":{},"attrs":["#[allow(clippy::new_without_default)]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"MsgHdrMut","id":"0:595:2250","args":{"angle_bracketed":{"args":[{"lifetime":"'addr"},{"lifetime":"'bufs"},{"lifetime":"'control"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:183:2956":{"id":"0:183:2956","crate_id":0,"name":"send_buffer_size","span":{"filename":"src/socket.rs","begin":[1044,4],"end":[1049,5]},"visibility":"public","docs":"Get the value of the `SO_SNDBUF` option on this socket.\n\nFor more information about this option, see [`set_send_buffer_size`].\n\n[`set_send_buffer_size`]: Socket::set_send_buffer_size","links":{"Socket::set_send_buffer_size":"0:185:2961"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3055:225","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13206:10737":{"id":"2:13206:10737","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"2:41876:190","prim@char":"1:12332:459","self::pattern":"2:12848:21495"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41874:193","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12854:15249","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12854:15249","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12869:21493","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:196:3055":{"id":"0:196:3055","crate_id":0,"name":"leave_ssm_v4","span":{"filename":"src/socket.rs","begin":[1359,4],"end":[1378,5]},"visibility":"public","docs":"Leave a multicast group using `IP_DROP_SOURCE_MEMBERSHIP` option on this socket.\n\nFor more information about this option, see [`join_ssm_v4`].\n\n[`join_ssm_v4`]: Socket::join_ssm_v4","links":{"Socket::join_ssm_v4":"0:195:3045"},"attrs":["#[cfg(not(any(target_os = \"dragonfly\", target_os = \"haiku\", target_os =\n\"hurd\", target_os = \"netbsd\", target_os = \"openbsd\", target_os = \"redox\",\ntarget_os = \"fuchsia\", target_os = \"nto\", target_os = \"espidf\", target_os =\n\"vita\",)))]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["source",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Ipv4Addr","id":"2:41636:2515","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],["group",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Ipv4Addr","id":"2:41636:2515","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],["interface",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Ipv4Addr","id":"2:41636:2515","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3055:225","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:595:2250":{"id":"0:595:2250","crate_id":0,"name":"MsgHdrMut","span":{"filename":"src/lib.rs","begin":[668,0],"end":[676,1]},"visibility":"public","docs":"Configuration of a `recvmsg(2)` system call.\n\nThis wraps `msghdr` on Unix and `WSAMSG` on Windows. Also see [`MsgHdr`] for\nthe variant used by `sendmsg(2)`.","links":{"`MsgHdr`":"0:575:2213"},"attrs":["#[cfg(not(target_os = \"redox\"))]"],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'addr","kind":{"lifetime":{"outlives":[]}}},{"name":"'bufs","kind":{"lifetime":{"outlives":[]}}},{"name":"'control","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"impls":["0:601","a:2:32106:236-0:595:2250","a:2:3121:246-0:595:2250","a:2:3156:4097-0:595:2250","a:2:32165:4101-0:595:2250","a:2:41968:10351-0:595:2250","a:2:41969:10350-0:595:2250","b:2:2913-0:595:2250","b:2:2898-0:595:2250","b:2:2625-0:595:2250","b:2:2902-0:595:2250","b:2:2628-0:595:2250","b:2:3737-0:595:2250","b:2:2908-0:595:2250","0:610"]}}},"0:149:2740":{"id":"0:149:2740","crate_id":0,"name":"recvmsg","span":{"filename":"src/socket.rs","begin":[641,4],"end":[643,5]},"visibility":"public","docs":"Receive a message from a socket using a message structure.\n\nThis is not supported on Windows as calling `WSARecvMsg` (the `recvmsg`\nequivalent) is not straight forward on Windows. See\n<https://github.com/microsoft/Windows-classic-samples/blob/7cbd99ac1d2b4a0beffbaba29ea63d024ceff700/Samples/Win7Samples/netds/winsock/recvmsg/rmmc.cpp>\nfor an example (in C++).\n\nAdditional documentation can be found in manual of the OS:\n\n * DragonFly BSD: <https://man.dragonflybsd.org/?command=recvmsg&section=2>\n * FreeBSD: <https://www.freebsd.org/cgi/man.cgi?query=recvmsg&sektion=2>\n * Linux: <https://man7.org/linux/man-pages/man2/recvmsg.2.html>\n * macOS: <https://developer.apple.com/library/archive/documentation/System/Conceptual/ManPages_iPhoneOS/man2/recvmsg.2.html> (archived, actually for iOS)\n * NetBSD: <https://man.netbsd.org/recvmsg.2>\n * OpenBSD: <https://man.openbsd.org/recvmsg.2>\n * iOS: <https://developer.apple.com/library/archive/documentation/System/Conceptual/ManPages_iPhoneOS/man2/recvmsg.2.html> (archived)\n * illumos: <https://illumos.org/man/3SOCKET/recvmsg>\n * Windows: <https://docs.microsoft.com/en-us/windows/win32/api/winsock2/nf-winsock2-recvmsg>","links":{},"attrs":["#[cfg(all(unix, not(target_os = \"redox\")))]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["msg",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"MsgHdrMut","id":"0:595:2250","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"lifetime":"'_"},{"lifetime":"'_"}],"bindings":[]}}}}}}],["flags",{"resolved_path":{"name":"libc::c_int","id":"20:44:2072","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3055:225","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:42":{"id":"0:42","crate_id":0,"name":null,"span":{"filename":"src/sockaddr.rs","begin":[27,0],"end":[265,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[allow(clippy::len_without_is_empty)]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"SockAddr","id":"0:616:2073","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:43:1163","0:44:2441","0:49:1857","0:51:2455","0:52:2458","0:53:2461","0:54:983","0:55:334","0:56:2466","0:57:2468","0:58:2471","0:59:2474","0:60:2477","0:61:2492","0:62:2494"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:67:818":{"id":"0:67:818","crate_id":0,"name":"from","span":{"filename":"src/sockaddr.rs","begin":[277,4],"end":[306,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["addr",{"resolved_path":{"name":"SocketAddrV4","id":"2:41836:2376","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"SockAddr","id":"0:616:2073","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:514:818":{"id":"0:514:818","crate_id":0,"name":"from","span":{"filename":"src/sys/unix.rs","begin":[3062,4],"end":[3065,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["sock",{"resolved_path":{"name":"crate::Socket","id":"0:114:2074","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"OwnedFd","id":"1:4970:3333","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:622:2860":{"id":"0:622:2860","crate_id":0,"name":"Index","span":{"filename":"src/socket.rs","begin":[827,4],"end":[827,14]},"visibility":"default","docs":"An interface index.","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":{"tuple":["0:624:1956"]},"discriminant":null}}},"0:52:2458":{"id":"0:52:2458","crate_id":0,"name":"family","span":{"filename":"src/sockaddr.rs","begin":[167,4],"end":[169,5]},"visibility":"public","docs":"Returns this address's family.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"sa_family_t","id":"20:637:2383","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:191:3018":{"id":"0:191:3018","crate_id":0,"name":"join_multicast_v4","span":{"filename":"src/socket.rs","begin":[1207,4],"end":[1213,5]},"visibility":"public","docs":"Join a multicast group using `IP_ADD_MEMBERSHIP` option on this socket.\n\nThis function specifies a new multicast group for this socket to join.\nThe address must be a valid multicast address, and `interface` is the\naddress of the local interface with which the system should join the\nmulticast group. If it's [`Ipv4Addr::UNSPECIFIED`] (`INADDR_ANY`) then\nan appropriate interface is chosen by the system.","links":{"`Ipv4Addr::UNSPECIFIED`":"2:8736:3518"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["multiaddr",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Ipv4Addr","id":"2:41636:2515","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],["interface",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Ipv4Addr","id":"2:41636:2515","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3055:225","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13161:35025":{"id":"2:13161:35025","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13280:28139":{"id":"2:13280:28139","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2628-0:692:2181":{"id":"b:2:2628-0:692:2181","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32107:4100","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2622:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"TcpKeepalive","id":"0:692:2181","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2630:27461"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:699:463":{"id":"0:699:463","crate_id":0,"name":"clone","span":{"filename":"src/lib.rs","begin":[426,16],"end":[426,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"TcpKeepalive","id":"0:692:2181","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2913-0:114:2074":{"id":"b:2:2913-0:114:2074","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2872:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2882:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Socket","id":"0:114:2074","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2916:136","2:2917:1788"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:558":{"id":"0:558","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[392,0],"end":[396,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10279:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MaybeUninitSlice","id":"0:554:2171","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["0:560:788"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:235":{"id":"0:235","crate_id":0,"name":null,"span":{"filename":"src/socket.rs","begin":[1906,0],"end":[2102,1]},"visibility":"default","docs":"Socket options for TCP sockets, get/set using `IPPROTO_TCP`.\n\nAdditional documentation can be found in documentation of the OS.\n* Linux: <https://man7.org/linux/man-pages/man7/tcp.7.html>\n* Windows: <https://docs.microsoft.com/en-us/windows/win32/winsock/ipproto-tcp-socket-options>","links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Socket","id":"0:114:2074","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:236:3251","0:237:3256","0:239:3264"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:201:3089":{"id":"0:201:3089","crate_id":0,"name":"set_multicast_loop_v4","span":{"filename":"src/socket.rs","begin":[1459,4],"end":[1468,5]},"visibility":"public","docs":"Set the value of the `IP_MULTICAST_LOOP` option for this socket.\n\nIf enabled, multicast packets will be looped back to the local socket.\nNote that this may not have any affect on IPv6 sockets.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["loop_v4",{"primitive":"bool"}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3055:225","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:209:3115":{"id":"0:209:3115","crate_id":0,"name":"tos","span":{"filename":"src/socket.rs","begin":[1552,4],"end":[1556,5]},"visibility":"public","docs":"Get the value of the `IP_TOS` option for this socket.\n\nFor more information about this option, see [`set_tos`].\n\nNOTE: <https://docs.microsoft.com/en-us/windows/win32/winsock/ipproto-ip-socket-options>\ndocuments that not all versions of windows support `IP_TOS`.\n\n[`set_tos`]: Socket::set_tos","links":{"Socket::set_tos":"0:208:3114"},"attrs":["#[cfg(not(any(target_os = \"fuchsia\", target_os = \"redox\", target_os =\n\"solaris\", target_os = \"illumos\", target_os = \"haiku\",)))]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3055:225","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u32"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:114:2074":{"id":"0:114:2074","crate_id":0,"name":"Socket","span":{"filename":"src/socket.rs","begin":[75,0],"end":[77,1]},"visibility":"public","docs":"Owned wrapper around a system socket.\n\nThis type simply wraps an instance of a file descriptor (`c_int`) on Unix\nand an instance of `SOCKET` on Windows. This is the main type exported by\nthis crate and is intended to mirror the raw semantics of sockets on\nplatforms as closely as possible. Almost all methods correspond to\nprecisely one libc or OS API call which is essentially just a \"Rustic\ntranslation\" of what's below.\n\n## Converting to and from other types\n\nThis type can be freely converted into the network primitives provided by\nthe standard library, such as [`TcpStream`] or [`UdpSocket`], using the\n[`From`] trait, see the example below.\n\n[`TcpStream`]: std::net::TcpStream\n[`UdpSocket`]: std::net::UdpSocket\n\n# Notes\n\nSome methods that set options on `Socket` require two system calls to set\ntheir options without overwriting previously set options. We do this by\nfirst getting the current settings, applying the desired changes, and then\nupdating the settings. This means that the operation is **not** atomic. This\ncan lead to a data race when two threads are changing options in parallel.\n\n# Examples\n```no_run\n# fn main() -> std::io::Result<()> {\nuse std::net::{SocketAddr, TcpListener};\nuse socket2::{Socket, Domain, Type};\n\n// create a TCP listener\nlet socket = Socket::new(Domain::IPV6, Type::STREAM, None)?;\n\nlet address: SocketAddr = \"[::1]:12345\".parse().unwrap();\nlet address = address.into();\nsocket.bind(&address)?;\nsocket.listen(128)?;\n\nlet listener: TcpListener = socket.into();\n// ...\n# drop(listener);\n# Ok(()) }\n```","links":{"`From`":"2:2875:143","std::net::UdpSocket":"1:3998:3271","std::net::TcpStream":"1:3893:2584"},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["0:117","0:162","0:190","0:214","0:235","a:2:32106:236-0:114:2074","a:2:3121:246-0:114:2074","a:2:3156:4097-0:114:2074","a:2:32165:4101-0:114:2074","a:2:41968:10351-0:114:2074","a:2:41969:10350-0:114:2074","b:2:2913-0:114:2074","b:2:2898-0:114:2074","b:2:2625-0:114:2074","b:2:2902-0:114:2074","b:2:2628-0:114:2074","b:2:3737-0:114:2074","b:2:2908-0:114:2074","0:517","0:634","0:632","0:253","0:513","0:638","0:630","0:249","0:509","0:258","0:636","0:244","0:515","0:240","0:640","0:519","0:511"]}}},"0:609:2244":{"id":"0:609:2244","crate_id":0,"name":"flags","span":{"filename":"src/lib.rs","begin":[719,4],"end":[721,5]},"visibility":"public","docs":"Returns the flags of the message.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"RecvFlags","id":"0:681:2161","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:217:3151":{"id":"0:217:3151","crate_id":0,"name":"multicast_hops_v6","span":{"filename":"src/socket.rs","begin":[1676,4],"end":[1681,5]},"visibility":"public","docs":"Get the value of the `IPV6_MULTICAST_HOPS` option for this socket\n\nFor more information about this option, see [`set_multicast_hops_v6`].\n\n[`set_multicast_hops_v6`]: Socket::set_multicast_hops_v6","links":{"Socket::set_multicast_hops_v6":"0:219:3156"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3055:225","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u32"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:663":{"id":"0:663","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[251,15],"end":[251,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2641:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Type","id":"0:659:2104","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:664:463"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:236:3251":{"id":"0:236:3251","crate_id":0,"name":"set_tcp_keepalive","span":{"filename":"src/socket.rs","begin":[2068,4],"end":[2071,5]},"visibility":"public","docs":"Set parameters configuring TCP keepalive probes for this socket.\n\nThe supported parameters depend on the operating system, and are\nconfigured using the [`TcpKeepalive`] struct. At a minimum, all systems\nsupport configuring the [keepalive time]: the time after which the OS\nwill start sending keepalive messages on an idle connection.\n\n[keepalive time]: TcpKeepalive::with_time\n\n# Notes\n\n* This will enable `SO_KEEPALIVE` on this socket, if it is not already\n  enabled.\n* On some platforms, such as Windows, any keepalive parameters *not*\n  configured by the `TcpKeepalive` struct passed to this function may be\n  overwritten with their default values. Therefore, this function should\n  either only be called once per socket, or the same parameters should\n  be passed every time it is called.\n\n# Examples\n\n```\nuse std::time::Duration;\n\nuse socket2::{Socket, TcpKeepalive, Domain, Type};\n\n# fn main() -> std::io::Result<()> {\nlet socket = Socket::new(Domain::IPV4, Type::STREAM, None)?;\nlet keepalive = TcpKeepalive::new()\n    .with_time(Duration::from_secs(4));\n    // Depending on the target operating system, we may also be able to\n    // configure the keepalive probe interval and/or the number of\n    // retries here as well.\n\nsocket.set_tcp_keepalive(&keepalive)?;\n# Ok(()) }\n```\n","links":{"`TcpKeepalive`":"0:692:2181","TcpKeepalive::with_time":"0:573:2196"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["params",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"TcpKeepalive","id":"0:692:2181","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3055:225","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:141:2751":{"id":"0:141:2751","crate_id":0,"name":"recv_vectored_with_flags","span":{"filename":"src/socket.rs","begin":[495,4],"end":[501,5]},"visibility":"public","docs":"Identical to [`recv_vectored`] but allows for specification of arbitrary\nflags to the underlying `recvmsg`/`WSARecv` call.\n\n[`recv_vectored`]: Socket::recv_vectored\n\n# Safety\n\n`recv_from_vectored` makes the same safety guarantees regarding `bufs`\nas [`recv_vectored`].\n\n[`recv_vectored`]: Socket::recv_vectored","links":{"Socket::recv_vectored":"0:140:2750"},"attrs":["#[cfg(not(target_os = \"redox\"))]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["bufs",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"resolved_path":{"name":"MaybeUninitSlice","id":"0:554:2171","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}}],["flags",{"resolved_path":{"name":"c_int","id":"20:44:2072","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3055:225","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"primitive":"usize"},{"resolved_path":{"name":"RecvFlags","id":"0:681:2161","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2628-0:659:2104":{"id":"b:2:2628-0:659:2104","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32107:4100","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2622:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Type","id":"0:659:2104","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2630:27461"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2898-0:270:2075":{"id":"b:2:2898-0:270:2075","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2875:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2872:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"SockRef","id":"0:270:2075","args":{"angle_bracketed":{"args":[{"lifetime":"'s"}],"bindings":[]}}}},"items":["2:2901:2498"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2908-0:659:2104":{"id":"b:2:2908-0:659:2104","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2882:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2878:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Type","id":"0:659:2104","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2911:136","2:2912:1790"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:552":{"id":"0:552","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[372,0],"end":[384,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(target_os = \"redox\"))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"RecvFlags","id":"0:681:2161","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:553:2167"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13246:35035":{"id":"2:13246:35035","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"2:12848:21495","`DoubleEndedIterator`":"2:8230:129","prim@char":"1:12332:459","str::match_indices":"2:13243:35034"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatchIndices","id":"2:43924:14475","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12854:15249","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12854:15249","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12869:21493","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13176:28250":{"id":"2:13176:28250","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10938:238","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10938:238","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:61:2492":{"id":"0:61:2492","crate_id":0,"name":"as_socket_ipv4","span":{"filename":"src/sockaddr.rs","begin":[242,4],"end":[247,5]},"visibility":"public","docs":"Returns this address as a [`SocketAddrV4`] if it is in the `AF_INET`\nfamily.","links":{"`SocketAddrV4`":"2:41836:2376"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41874:193","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"SocketAddrV4","id":"2:41836:2376","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:561":{"id":"0:561","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[398,0],"end":[407,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"MaybeUninitSlice","id":"0:554:2171","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["0:563:1163"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:163:2870":{"id":"0:163:2870","crate_id":0,"name":"broadcast","span":{"filename":"src/socket.rs","begin":[843,4],"end":[848,5]},"visibility":"public","docs":"Get the value of the `SO_BROADCAST` option for this socket.\n\nFor more information about this option, see [`set_broadcast`].\n\n[`set_broadcast`]: Socket::set_broadcast","links":{"Socket::set_broadcast":"0:165:2875"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3055:225","args":{"angle_bracketed":{"args":[{"type":{"primitive":"bool"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3737-0:616:2073":{"id":"b:2:3737-0:616:2073","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:32107:4100","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3735:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"SockAddr","id":"0:616:2073","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3739:1803"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:219:3156":{"id":"0:219:3156","crate_id":0,"name":"set_multicast_hops_v6","span":{"filename":"src/socket.rs","begin":[1688,4],"end":[1697,5]},"visibility":"public","docs":"Set the value of the `IPV6_MULTICAST_HOPS` option for this socket\n\nIndicates the number of \"routers\" multicast packets will transit for\nthis socket. The default value is 1 which means that multicast packets\ndon't leave the local network unless explicitly requested.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["hops",{"primitive":"u32"}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3055:225","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:627:1956":{"id":"0:627:1956","crate_id":0,"name":"0","span":{"filename":"src/socket.rs","begin":[829,12],"end":[829,20]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"struct_field":{"resolved_path":{"name":"std::net::Ipv4Addr","id":"2:41636:2515","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"0:175:2925":{"id":"0:175:2925","crate_id":0,"name":"recv_buffer_size","span":{"filename":"src/socket.rs","begin":[973,4],"end":[978,5]},"visibility":"public","docs":"Get value for the `SO_RCVBUF` option on this socket.\n\nFor more information about this option, see [`set_recv_buffer_size`].\n\n[`set_recv_buffer_size`]: Socket::set_recv_buffer_size","links":{"Socket::set_recv_buffer_size":"0:177:2930"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3055:225","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2628-0:670:2127":{"id":"b:2:2628-0:670:2127","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32107:4100","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2622:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Protocol","id":"0:670:2127","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2630:27461"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:32106:236-0:670:2127":{"id":"a:2:32106:236-0:670:2127","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:32106:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Protocol","id":"0:670:2127","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:13172:28248":{"id":"2:13172:28248","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:41876:190"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:41874:193","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10938:238","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10938:238","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:3156:4097-0:270:2075":{"id":"a:2:3156:4097-0:270:2075","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'s","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"2:3156:4097","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"SockRef","id":"0:270:2075","args":{"angle_bracketed":{"args":[{"lifetime":"'s"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2908-0:616:2073":{"id":"b:2:2908-0:616:2073","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2882:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2878:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"SockAddr","id":"0:616:2073","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2911:136","2:2912:1790"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:679":{"id":"0:679","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[305,26],"end":[305,35]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"2:2675:200","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Protocol","id":"0:670:2127","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:680:686"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:281:818":{"id":"0:281:818","crate_id":0,"name":"from","span":{"filename":"src/sockref.rs","begin":[87,4],"end":[94,5]},"visibility":"default","docs":"The caller must ensure `S` is actually a socket.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["socket",{"borrowed_ref":{"lifetime":"'s","mutable":false,"type":{"generic":"S"}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2908-0:692:2181":{"id":"b:2:2908-0:692:2181","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2882:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2878:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"TcpKeepalive","id":"0:692:2181","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2911:136","2:2912:1790"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13288:35047":{"id":"2:13288:35047","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"2:4925:35047"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDebug","id":"2:44055:14413","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:3156:4097-0:114:2074":{"id":"a:2:3156:4097-0:114:2074","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"2:3156:4097","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Socket","id":"0:114:2074","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:166:2880":{"id":"0:166:2880","crate_id":0,"name":"take_error","span":{"filename":"src/socket.rs","begin":[870,4],"end":[876,5]},"visibility":"public","docs":"Get the value of the `SO_ERROR` option on this socket.\n\nThis will retrieve the stored error in the underlying socket, clearing\nthe field in the process. This can be useful for checking errors between\ncalls.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3055:225","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Option","id":"2:41874:193","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"io::Error","id":"1:3057:136","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2625-0:575:2213":{"id":"b:2:2625-0:575:2213","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32107:4100","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2619:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"MsgHdr","id":"0:575:2213","args":{"angle_bracketed":{"args":[{"lifetime":"'addr"},{"lifetime":"'bufs"},{"lifetime":"'control"}],"bindings":[]}}}},"items":["2:2627:3998"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"5:5614:4115":{"id":"5:5614:4115","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7642:242"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["from",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7642:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12854:15249","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2902-0:648:2088":{"id":"b:2:2902-0:648:2088","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2875:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Domain","id":"0:648:2088","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2904:818"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:3156:4097-0:616:2073":{"id":"a:2:3156:4097-0:616:2073","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"2:3156:4097","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"SockAddr","id":"0:616:2073","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:2:41969:10350-0:616:2073":{"id":"a:2:41969:10350-0:616:2073","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:41969:10350","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"SockAddr","id":"0:616:2073","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:2:32106:236-0:575:2213":{"id":"a:2:32106:236-0:575:2213","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'addr","kind":{"lifetime":{"outlives":[]}}},{"name":"'bufs","kind":{"lifetime":{"outlives":[]}}},{"name":"'control","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:32106:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MsgHdr","id":"0:575:2213","args":{"angle_bracketed":{"args":[{"lifetime":"'addr"},{"lifetime":"'bufs"},{"lifetime":"'control"}],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"a:2:32165:4101-0:595:2250":{"id":"a:2:32165:4101-0:595:2250","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'addr","kind":{"lifetime":{"outlives":[]}}},{"name":"'bufs","kind":{"lifetime":{"outlives":[]}}},{"name":"'control","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32165:4101","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MsgHdrMut","id":"0:595:2250","args":{"angle_bracketed":{"args":[{"lifetime":"'addr"},{"lifetime":"'bufs"},{"lifetime":"'control"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:667":{"id":"0:667","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[251,26],"end":[251,35]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"2:32108:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Type","id":"0:659:2104","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:571":{"id":"0:571","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[456,0],"end":[593,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"TcpKeepalive","id":"0:692:2181","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:572:1163","0:573:2196","0:574:2205"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:657":{"id":"0:657","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[208,26],"end":[208,35]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"2:2675:200","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Domain","id":"0:648:2088","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:658:686"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:3737-0:114:2074":{"id":"b:2:3737-0:114:2074","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:32107:4100","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3735:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Socket","id":"0:114:2074","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3739:1803"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:256:3267":{"id":"0:256:3267","crate_id":0,"name":"write_vectored","span":{"filename":"src/socket.rs","begin":[2159,4],"end":[2161,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(target_os = \"redox\"))]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["bufs",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"IoSlice","id":"1:8482:2017","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3055:225","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5617:35743":{"id":"5:5617:35743","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7642:242"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["count",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7642:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12854:15249","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:231:3202":{"id":"0:231:3202","crate_id":0,"name":"set_only_v6","span":{"filename":"src/socket.rs","begin":[1835,4],"end":[1844,5]},"visibility":"public","docs":"Set the value for the `IPV6_V6ONLY` option on this socket.\n\nIf this is set to `true` then the socket is restricted to sending and\nreceiving IPv6 packets only. In this case two IPv4 and IPv6 applications\ncan bind the same port at the same time.\n\nIf this is set to `false` then the socket can be used to send and\nreceive packets from an IPv4-mapped IPv6 address.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["only_v6",{"primitive":"bool"}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3055:225","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:652":{"id":"0:652","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[208,15],"end":[208,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2641:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Domain","id":"0:648:2088","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:653:463"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:547:2141":{"id":"0:547:2141","crate_id":0,"name":"MPTCP","span":{"filename":"src/lib.rs","begin":[323,4],"end":[323,61]},"visibility":"public","docs":"Protocol corresponding to `MPTCP`.","links":{},"attrs":["#[cfg(target_os = \"linux\")]"],"deprecation":null,"inner":{"assoc_const":{"type":{"resolved_path":{"name":"Protocol","id":"0:670:2127","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"default":"_"}}},"0:58:2471":{"id":"0:58:2471","crate_id":0,"name":"is_ipv6","span":{"filename":"src/sockaddr.rs","begin":[198,4],"end":[200,5]},"visibility":"public","docs":"Returns true if this address is in the `AF_INET6` (IPv6) family, false\notherwise.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13283:28143":{"id":"2:13283:28143","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:689":{"id":"0:689","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[368,26],"end":[368,35]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"2:32108:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RecvFlags","id":"0:681:2161","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:186:2964":{"id":"0:186:2964","crate_id":0,"name":"write_timeout","span":{"filename":"src/socket.rs","begin":[1070,4],"end":[1072,5]},"visibility":"public","docs":"Get value for the `SO_SNDTIMEO` option on this socket.\n\nIf the returned timeout is `None`, then `write` and `send` calls will\nblock indefinitely.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3055:225","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Option","id":"2:41874:193","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Duration","id":"2:44524:130","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2911:136":{"id":"2:2911:136","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"2:2882:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}}},"b:5:736-0:670:2127":{"id":"b:5:736-0:670:2127","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2641:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:732:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Protocol","id":"0:670:2127","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:738:10797","5:739:10798","5:740:10799"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13269:35043":{"id":"2:13269:35043","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12332:459","self::pattern":"2:12848:21495"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12854:15249","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12854:15249","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12869:21493","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:662":{"id":"0:662","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[251,9],"end":[251,13]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"2:3116:117","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Type","id":"0:659:2104","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:631:818":{"id":"0:631:818","crate_id":0,"name":"from","span":{"filename":"src/socket.rs","begin":[2178,0],"end":[2178,29]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["socket",{"resolved_path":{"name":"net::TcpStream","id":"1:3893:2584","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Socket","id":"0:114:2074","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13287:28148":{"id":"2:13287:28148","crate_id":2,"name":"trim_ascii","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing ASCII whitespace\nremoved.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\"\\r hello world\\n \".trim_ascii(), \"hello world\");\nassert_eq!(\"  \".trim_ascii(), \"\");\nassert_eq!(\"\".trim_ascii(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:992:39257"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:520:2038":{"id":"0:520:2038","crate_id":0,"name":"from_raw_fd","span":{"filename":"src/sys/unix.rs","begin":[3085,4],"end":[3087,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["fd",{"resolved_path":{"name":"c_int","id":"20:44:2072","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"crate::Socket","id":"0:114:2074","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:32106:236-0:554:2171":{"id":"a:2:32106:236-0:554:2171","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:32106:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MaybeUninitSlice","id":"0:554:2171","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:2901:2498":{"id":"2:2901:2498","crate_id":2,"name":"into","span":null,"visibility":"default","docs":"Calls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of\n<code>[From]&lt;T&gt; for U</code> chooses to do.","links":{"From":"2:2875:143"},"attrs":["#[track_caller]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"U"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:698":{"id":"0:698","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[426,16],"end":[426,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2641:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TcpKeepalive","id":"0:692:2181","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:699:463"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:553:2167":{"id":"0:553:2167","crate_id":0,"name":"is_truncated","span":{"filename":"src/lib.rs","begin":[381,4],"end":[383,5]},"visibility":"public","docs":"Check if the message contains a truncated datagram.\n\nThis flag is only used for datagram-based sockets,\nnot for stream sockets.\n\nOn Unix this corresponds to the `MSG_TRUNC` flag.\nOn Windows this corresponds to the `WSAEMSGSIZE` error code.","links":{},"attrs":["#[cfg(not(target_os = \"espidf\"))]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2902-0:270:2075":{"id":"b:2:2902-0:270:2075","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2875:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"SockRef","id":"0:270:2075","args":{"angle_bracketed":{"args":[{"lifetime":"'s"}],"bindings":[]}}}},"items":["2:2904:818"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:208:3114":{"id":"0:208:3114","crate_id":0,"name":"set_tos","span":{"filename":"src/socket.rs","begin":[1533,4],"end":[1535,5]},"visibility":"public","docs":"Set the value of the `IP_TOS` option for this socket.\n\nThis value sets the type-of-service field that is used in every packet\nsent from this socket.\n\nNOTE: <https://docs.microsoft.com/en-us/windows/win32/winsock/ipproto-ip-socket-options>\ndocuments that not all versions of windows support `IP_TOS`.","links":{},"attrs":["#[cfg(not(any(target_os = \"fuchsia\", target_os = \"redox\", target_os =\n\"solaris\", target_os = \"illumos\", target_os = \"haiku\",)))]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["tos",{"primitive":"u32"}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3055:225","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:240":{"id":"0:240","crate_id":0,"name":null,"span":{"filename":"src/socket.rs","begin":[2104,0],"end":[2121,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["chain","take","read_exact","bytes","read_to_string","by_ref","read_buf","read_vectored","is_read_vectored","read_buf_exact","read_to_end"],"trait":{"name":"Read","id":"1:3582:2548","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Socket","id":"0:114:2074","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:241:3265","0:242:3266"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:234:3213":{"id":"0:234:3213","crate_id":0,"name":"set_recv_tclass_v6","span":{"filename":"src/socket.rs","begin":[1889,4],"end":[1898,5]},"visibility":"public","docs":"Set the value of the `IPV6_RECVTCLASS` option for this socket.\n\nIf enabled, the `IPV6_TCLASS` ancillary message is passed with incoming\npackets. It contains a byte which specifies the traffic class field of\nthe packet header.","links":{},"attrs":["#[cfg(not(any(target_os = \"dragonfly\", target_os = \"fuchsia\", target_os =\n\"illumos\", target_os = \"netbsd\", target_os = \"openbsd\", target_os = \"redox\",\ntarget_os = \"solaris\", target_os = \"haiku\", target_os = \"hurd\", target_os =\n\"espidf\", target_os = \"vita\",)))]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["recv_tclass",{"primitive":"bool"}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3055:225","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:3156:4097-0:554:2171":{"id":"a:2:3156:4097-0:554:2171","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"2:3156:4097","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MaybeUninitSlice","id":"0:554:2171","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:522-0:616:2073":{"id":"0:522-0:616:2073","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[186,0],"end":[186,27]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"sockaddr::SockAddr","name":"SockAddr","id":"0:616:2073","glob":false}}},"0:151:2815":{"id":"0:151:2815","crate_id":0,"name":"send_with_flags","span":{"filename":"src/socket.rs","begin":[660,4],"end":[662,5]},"visibility":"public","docs":"Identical to [`send`] but allows for specification of arbitrary flags to the underlying\n`send` call.\n\n[`send`]: Socket::send","links":{"Socket::send":"0:150:2814"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["buf",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}],["flags",{"resolved_path":{"name":"c_int","id":"20:44:2072","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3055:225","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:680:686":{"id":"0:680:686","crate_id":0,"name":"eq","span":{"filename":"src/lib.rs","begin":[305,26],"end":[305,35]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Protocol","id":"0:670:2127","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2628-0:616:2073":{"id":"b:2:2628-0:616:2073","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32107:4100","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2622:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"SockAddr","id":"0:616:2073","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2630:27461"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2625-0:681:2161":{"id":"b:2:2625-0:681:2161","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32107:4100","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2619:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RecvFlags","id":"0:681:2161","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2627:3998"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13282:28142":{"id":"2:13282:28142","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:62:2494":{"id":"0:62:2494","crate_id":0,"name":"as_socket_ipv6","span":{"filename":"src/sockaddr.rs","begin":[251,4],"end":[256,5]},"visibility":"public","docs":"Returns this address as a [`SocketAddrV6`] if it is in the `AF_INET6`\nfamily.","links":{"`SocketAddrV6`":"2:41854:2377"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41874:193","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"SocketAddrV6","id":"2:41854:2377","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13291:35048":{"id":"2:13291:35048","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"2:4923:35048"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeUnicode","id":"2:44073:14412","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13210:28279":{"id":"2:13210:28279","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"2:12848:21495","`DoubleEndedIterator`":"2:8230:129","prim@char":"1:12332:459","str::split_whitespace":"2:13188:33270","str::rsplit":"2:13216:28283"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Split","id":"2:43756:4060","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12854:15249","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:636":{"id":"0:636","crate_id":0,"name":null,"span":{"filename":"src/socket.rs","begin":[2181,0],"end":[2181,29]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2875:143","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Socket","id":"0:114:2074","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"net::TcpStream","id":"1:3893:2584","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:637:818"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:131:2676":{"id":"0:131:2676","crate_id":0,"name":"local_addr","span":{"filename":"src/socket.rs","begin":[321,4],"end":[323,5]},"visibility":"public","docs":"Returns the socket address of the local half of this socket.\n\nThis function directly corresponds to the `getsockname(2)` function on\nWindows and Unix.\n\nAdditional documentation can be found in manual of the OS:\n\n * DragonFly BSD: <https://man.dragonflybsd.org/?command=getsockname&section=2>\n * FreeBSD: <https://www.freebsd.org/cgi/man.cgi?query=getsockname&sektion=2>\n * Linux: <https://man7.org/linux/man-pages/man2/getsockname.2.html>\n * macOS: <https://developer.apple.com/library/archive/documentation/System/Conceptual/ManPages_iPhoneOS/man2/getsockname.2.html> (archived, actually for iOS)\n * NetBSD: <https://man.netbsd.org/getsockname.2>\n * OpenBSD: <https://man.openbsd.org/getsockname.2>\n * iOS: <https://developer.apple.com/library/archive/documentation/System/Conceptual/ManPages_iPhoneOS/man2/getsockname.2.html> (archived)\n * illumos: <https://illumos.org/man/3SOCKET/getsockname>\n * Windows: <https://docs.microsoft.com/en-us/windows/win32/api/winsock2/nf-winsock2-getsockname>\n\n# Notes\n\nDepending on the OS this may return an error if the socket is not\n[bound].\n\n[bound]: Socket::bind","links":{"Socket::bind":"0:124:2621"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3055:225","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"SockAddr","id":"0:616:2073","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:640":{"id":"0:640","crate_id":0,"name":null,"span":{"filename":"src/socket.rs","begin":[2183,0],"end":[2183,29]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2875:143","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Socket","id":"0:114:2074","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"net::UdpSocket","id":"1:3998:3271","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:641:818"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:531":{"id":"0:531","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[230,0],"end":[234,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2875:143","args":{"angle_bracketed":{"args":[{"type":{"primitive":"i32"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Domain","id":"0:648:2088","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:532:818"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:3121:246-0:554:2171":{"id":"a:2:3121:246-0:554:2171","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3121:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MaybeUninitSlice","id":"0:554:2171","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:214":{"id":"0:214","crate_id":0,"name":null,"span":{"filename":"src/socket.rs","begin":[1622,0],"end":[1899,1]},"visibility":"default","docs":"Socket options for IPv6 sockets, get/set using `IPPROTO_IPV6`.\n\nAdditional documentation can be found in documentation of the OS.\n* Linux: <https://man7.org/linux/man-pages/man7/ipv6.7.html>\n* Windows: <https://docs.microsoft.com/en-us/windows/win32/winsock/ipproto-ipv6-socket-options>","links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Socket","id":"0:114:2074","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:215:3136","0:216:3146","0:217:3151","0:219:3156","0:220:3168","0:222:3174","0:223:3178","0:225:3184","0:226:3187","0:228:3190","0:229:3194","0:231:3202","0:232:3206","0:234:3213"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13272:35044":{"id":"2:13272:35044","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12332:459","self::pattern":"2:12848:21495"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12854:15249","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2917:1788":{"id":"2:2917:1788","crate_id":2,"name":"try_from","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["value",{"generic":"U"}]],"output":{"resolved_path":{"name":"Result","id":"2:42007:225","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"T"},"trait":{"name":"TryFrom","id":"2:2882:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:222:3174":{"id":"0:222:3174","crate_id":0,"name":"set_multicast_if_v6","span":{"filename":"src/socket.rs","begin":[1753,4],"end":[1762,5]},"visibility":"public","docs":"Set the value of the `IPV6_MULTICAST_IF` option for this socket.\n\nSpecifies the interface to use for routing multicast packets. Unlike\nipv4, this is generally required in ipv6 contexts where network routing\nprefixes may overlap.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["interface",{"primitive":"u32"}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3055:225","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:32106:236-0:692:2181":{"id":"a:2:32106:236-0:692:2181","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:32106:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TcpKeepalive","id":"0:692:2181","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:13290:16179":{"id":"2:13290:16179","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"2:4926:16179"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDefault","id":"2:44064:14407","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:70":{"id":"0:70","crate_id":0,"name":null,"span":{"filename":"src/sockaddr.rs","begin":[352,0],"end":[374,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10279:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"SockAddr","id":"0:616:2073","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:71:788"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:121:1163":{"id":"0:121:1163","crate_id":0,"name":"new","span":{"filename":"src/socket.rs","begin":[131,4],"end":[134,5]},"visibility":"public","docs":"Creates a new socket and sets common flags.\n\nThis function corresponds to `socket(2)` on Unix and `WSASocketW` on\nWindows.\n\nOn Unix-like systems, the close-on-exec flag is set on the new socket.\nAdditionally, on Apple platforms `SOCK_NOSIGPIPE` is set. On Windows,\nthe socket is made non-inheritable.\n\n[`Socket::new_raw`] can be used if you don't want these flags to be set.\n\nAdditional documentation can be found in manual of the OS:\n\n * DragonFly BSD: <https://man.dragonflybsd.org/?command=socket&section=2>\n * FreeBSD: <https://www.freebsd.org/cgi/man.cgi?query=socket&sektion=2>\n * Linux: <https://man7.org/linux/man-pages/man2/socket.2.html>\n * macOS: <https://developer.apple.com/library/archive/documentation/System/Conceptual/ManPages_iPhoneOS/man2/socket.2.html> (archived, actually for iOS)\n * NetBSD: <https://man.netbsd.org/socket.2>\n * OpenBSD: <https://man.openbsd.org/socket.2>\n * iOS: <https://developer.apple.com/library/archive/documentation/System/Conceptual/ManPages_iPhoneOS/man2/socket.2.html> (archived)\n * illumos: <https://illumos.org/man/3SOCKET/socket>\n * Windows: <https://docs.microsoft.com/en-us/windows/win32/api/winsock2/nf-winsock2-socket>","links":{"`Socket::new_raw`":"0:122:2605"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["domain",{"resolved_path":{"name":"Domain","id":"0:648:2088","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}],["ty",{"resolved_path":{"name":"Type","id":"0:659:2104","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}],["protocol",{"resolved_path":{"name":"Option","id":"2:41874:193","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Protocol","id":"0:670:2127","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3055:225","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Socket","id":"0:114:2074","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:539:818":{"id":"0:539:818","crate_id":0,"name":"from","span":{"filename":"src/lib.rs","begin":[287,4],"end":[289,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["t",{"resolved_path":{"name":"c_int","id":"20:44:2072","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Type","id":"0:659:2104","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:41969:10350-0:554:2171":{"id":"a:2:41969:10350-0:554:2171","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:41969:10350","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MaybeUninitSlice","id":"0:554:2171","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2628-0:270:2075":{"id":"b:2:2628-0:270:2075","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32107:4100","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2622:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"SockRef","id":"0:270:2075","args":{"angle_bracketed":{"args":[{"lifetime":"'s"}],"bindings":[]}}}},"items":["2:2630:27461"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:542":{"id":"0:542","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[308,0],"end":[349,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Protocol","id":"0:670:2127","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:543:2129","0:544:2132","0:545:2135","0:546:2138","0:547:2141"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:249":{"id":"0:249","crate_id":0,"name":null,"span":{"filename":"src/socket.rs","begin":[2138,0],"end":[2151,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["write_all","is_write_vectored","write_fmt","write_all_vectored","by_ref","write_vectored"],"trait":{"name":"Write","id":"1:3639:2549","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Socket","id":"0:114:2074","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:250:2034","0:251:3267","0:252:3268"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2898-0:554:2171":{"id":"b:2:2898-0:554:2171","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2875:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2872:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"MaybeUninitSlice","id":"0:554:2171","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:2901:2498"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:586:2227":{"id":"0:586:2227","crate_id":0,"name":"with_addr","span":{"filename":"src/lib.rs","begin":[622,4],"end":[625,5]},"visibility":"public","docs":"Set the address (name) of the message.\n\nCorresponds to setting `msg_name` and `msg_namelen` on Unix and `name`\nand `namelen` on Windows.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["addr",{"borrowed_ref":{"lifetime":"'addr","mutable":false,"type":{"resolved_path":{"name":"SockAddr","id":"0:616:2073","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:145:2778":{"id":"0:145:2778","crate_id":0,"name":"recv_from_vectored","span":{"filename":"src/socket.rs","begin":[561,4],"end":[566,5]},"visibility":"public","docs":"Receives data from the socket. Returns the amount of bytes read, the\n[`RecvFlags`] and the remote address from the data is coming. Unlike\n[`recv_from`] this allows passing multiple buffers.\n\nAdditional documentation can be found in manual of the OS:\n\n * DragonFly BSD: <https://man.dragonflybsd.org/?command=recvmsg&section=2>\n * FreeBSD: <https://www.freebsd.org/cgi/man.cgi?query=recvmsg&sektion=2>\n * Linux: <https://man7.org/linux/man-pages/man2/recvmsg.2.html>\n * macOS: <https://developer.apple.com/library/archive/documentation/System/Conceptual/ManPages_iPhoneOS/man2/recvmsg.2.html> (archived, actually for iOS)\n * NetBSD: <https://man.netbsd.org/recvmsg.2>\n * OpenBSD: <https://man.openbsd.org/recvmsg.2>\n * iOS: <https://developer.apple.com/library/archive/documentation/System/Conceptual/ManPages_iPhoneOS/man2/recvmsg.2.html> (archived)\n * illumos: <https://illumos.org/man/3SOCKET/recvmsg>\n * Windows: <https://docs.microsoft.com/en-us/windows/win32/api/winsock2/nf-winsock2-recvmsg>\n\n[`recv_from`]: Socket::recv_from\n\n# Safety\n\n`recv_from_vectored` makes the same safety guarantees regarding `bufs`\nas [`recv_vectored`].\n\n[`recv_vectored`]: Socket::recv_vectored","links":{"Socket::recv_vectored":"0:140:2750","`RecvFlags`":"0:681:2161","Socket::recv_from":"0:143:2770"},"attrs":["#[cfg(not(target_os = \"redox\"))]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["bufs",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"resolved_path":{"name":"MaybeUninitSlice","id":"0:554:2171","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3055:225","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"primitive":"usize"},{"resolved_path":{"name":"RecvFlags","id":"0:681:2161","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},{"resolved_path":{"name":"SockAddr","id":"0:616:2073","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:127:2658":{"id":"0:127:2658","crate_id":0,"name":"listen","span":{"filename":"src/socket.rs","begin":[253,4],"end":[255,5]},"visibility":"public","docs":"Mark a socket as ready to accept incoming connection requests using\n[`Socket::accept()`].\n\nThis function directly corresponds to the `listen(2)` function on\nWindows and Unix.\n\nAn error will be returned if `listen` or `connect` has already been\ncalled on this builder.\n\nAdditional documentation can be found in manual of the OS:\n\n * DragonFly BSD: <https://man.dragonflybsd.org/?command=listen&section=2>\n * FreeBSD: <https://www.freebsd.org/cgi/man.cgi?query=listen&sektion=2>\n * Linux: <https://man7.org/linux/man-pages/man2/listen.2.html>\n * macOS: <https://developer.apple.com/library/archive/documentation/System/Conceptual/ManPages_iPhoneOS/man2/listen.2.html> (archived, actually for iOS)\n * NetBSD: <https://man.netbsd.org/listen.2>\n * OpenBSD: <https://man.openbsd.org/listen.2>\n * iOS: <https://developer.apple.com/library/archive/documentation/System/Conceptual/ManPages_iPhoneOS/man2/listen.2.html> (archived)\n * illumos: <https://illumos.org/man/3SOCKET/listen>\n * Windows: <https://docs.microsoft.com/en-us/windows/win32/api/winsock2/nf-winsock2-listen>","links":{"`Socket::accept()`":"0:128:2664"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["backlog",{"resolved_path":{"name":"c_int","id":"20:44:2072","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3055:225","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:32165:4101-0:621:2080":{"id":"a:2:32165:4101-0:621:2080","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32165:4101","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"InterfaceIndexOrAddress","id":"0:621:2080","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:436:2519":{"id":"0:436:2519","crate_id":0,"name":"as_abstract_namespace","span":{"filename":"src/sys/unix.rs","begin":[830,4],"end":[842,5]},"visibility":"public","docs":"Returns this address as a slice of bytes representing an abstract address if it is an\n`AF_UNIX` abstract address, otherwise returns `None`.\n\nAbstract addresses are a Linux extension, so this method returns `None` on all non-Linux\nplatforms.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41874:193","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:630":{"id":"0:630","crate_id":0,"name":null,"span":{"filename":"src/socket.rs","begin":[2178,0],"end":[2178,29]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2875:143","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"TcpStream","id":"1:3893:2584","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Socket","id":"0:114:2074","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:631:818"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:244":{"id":"0:244","crate_id":0,"name":null,"span":{"filename":"src/socket.rs","begin":[2123,0],"end":[2136,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["chain","take","read_exact","bytes","read_to_string","by_ref","read_buf","read_vectored","is_read_vectored","read_buf_exact","read_to_end"],"trait":{"name":"Read","id":"1:3582:2548","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"resolved_path":{"name":"Socket","id":"0:114:2074","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"items":["0:246:3265","0:247:3266"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:202:3093":{"id":"0:202:3093","crate_id":0,"name":"multicast_ttl_v4","span":{"filename":"src/socket.rs","begin":[1475,4],"end":[1480,5]},"visibility":"public","docs":"Get the value of the `IP_MULTICAST_TTL` option for this socket.\n\nFor more information about this option, see [`set_multicast_ttl_v4`].\n\n[`set_multicast_ttl_v4`]: Socket::set_multicast_ttl_v4","links":{"Socket::set_multicast_ttl_v4":"0:204:3100"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3055:225","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u32"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2908-0:648:2088":{"id":"b:2:2908-0:648:2088","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2882:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2878:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Domain","id":"0:648:2088","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2911:136","2:2912:1790"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2625-0:616:2073":{"id":"b:2:2625-0:616:2073","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32107:4100","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2619:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"SockAddr","id":"0:616:2073","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2627:3998"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2898-0:659:2104":{"id":"b:2:2898-0:659:2104","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2875:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2872:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Type","id":"0:659:2104","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2901:2498"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:41968:10351-0:575:2213":{"id":"a:2:41968:10351-0:575:2213","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'addr","kind":{"lifetime":{"outlives":[]}}},{"name":"'bufs","kind":{"lifetime":{"outlives":[]}}},{"name":"'control","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:41968:10351","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MsgHdr","id":"0:575:2213","args":{"angle_bracketed":{"args":[{"lifetime":"'addr"},{"lifetime":"'bufs"},{"lifetime":"'control"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2628-0:621:2080":{"id":"b:2:2628-0:621:2080","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32107:4100","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2622:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"InterfaceIndexOrAddress","id":"0:621:2080","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2630:27461"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:540":{"id":"0:540","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[292,0],"end":[296,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2875:143","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Type","id":"0:659:2104","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"libc::c_int","id":"20:44:2072","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:541:818"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:2630:27461":{"id":"2:2630:27461","crate_id":2,"name":"borrow_mut","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2916:136":{"id":"2:2916:136","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Infallible","id":"2:32030:13487","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"2:13275:35045":{"id":"2:13275:35045","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12332:459","self::pattern":"2:12848:21495"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12854:15249","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12854:15249","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12869:21493","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:75":{"id":"0:75","crate_id":0,"name":null,"span":{"filename":"src/sockaddr.rs","begin":[384,0],"end":[388,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["hash_slice"],"trait":{"name":"Hash","id":"2:10495:152","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"SockAddr","id":"0:616:2073","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:76:858"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:53:2461":{"id":"0:53:2461","crate_id":0,"name":"domain","span":{"filename":"src/sockaddr.rs","begin":[172,4],"end":[174,5]},"visibility":"public","docs":"Returns this address's `Domain`.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Domain","id":"0:648:2088","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:148:2803":{"id":"0:148:2803","crate_id":0,"name":"peek_sender","span":{"filename":"src/socket.rs","begin":[628,4],"end":[630,5]},"visibility":"public","docs":"Retrieve the sender for the data at the head of the receive queue.\n\nThis is equivalent to calling [`peek_from`] with a zero-sized buffer,\nbut suppresses the `WSAEMSGSIZE` error on Windows.\n\n[`peek_from`]: Socket::peek_from","links":{"Socket::peek_from":"0:147:2798"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3055:225","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"SockAddr","id":"0:616:2073","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:632":{"id":"0:632","crate_id":0,"name":null,"span":{"filename":"src/socket.rs","begin":[2179,0],"end":[2179,31]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2875:143","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"TcpListener","id":"1:3896:3270","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Socket","id":"0:114:2074","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:633:818"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:510:3320":{"id":"0:510:3320","crate_id":0,"name":"as_fd","span":{"filename":"src/sys/unix.rs","begin":[3047,4],"end":[3050,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"BorrowedFd","id":"1:8670:3332","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:187:2968":{"id":"0:187:2968","crate_id":0,"name":"set_write_timeout","span":{"filename":"src/socket.rs","begin":[1078,4],"end":[1080,5]},"visibility":"public","docs":"Set value for the `SO_SNDTIMEO` option on this socket.\n\nIf `timeout` is `None`, then `write` and `send` calls will block\nindefinitely.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["duration",{"resolved_path":{"name":"Option","id":"2:41874:193","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Duration","id":"2:44524:130","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3055:225","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2913-0:616:2073":{"id":"b:2:2913-0:616:2073","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2872:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2882:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"SockAddr","id":"0:616:2073","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2916:136","2:2917:1788"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:519":{"id":"0:519","crate_id":0,"name":null,"span":{"filename":"src/sys/unix.rs","begin":[3084,0],"end":[3088,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"FromRawFd","id":"1:4914:2553","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"crate::Socket","id":"0:114:2074","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:520:2038"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2902-0:670:2127":{"id":"b:2:2902-0:670:2127","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2875:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Protocol","id":"0:670:2127","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2904:818"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13160:35024":{"id":"2:13160:35024","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2898-0:575:2213":{"id":"b:2:2898-0:575:2213","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2875:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2872:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"MsgHdr","id":"0:575:2213","args":{"angle_bracketed":{"args":[{"lifetime":"'addr"},{"lifetime":"'bufs"},{"lifetime":"'control"}],"bindings":[]}}}},"items":["2:2901:2498"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:41968:10351-0:621:2080":{"id":"a:2:41968:10351-0:621:2080","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:41968:10351","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"InterfaceIndexOrAddress","id":"0:621:2080","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:207:3108":{"id":"0:207:3108","crate_id":0,"name":"set_ttl","span":{"filename":"src/socket.rs","begin":[1515,4],"end":[1517,5]},"visibility":"public","docs":"Set the value of the `IP_TTL` option for this socket.\n\nThis value sets the time-to-live field that is used in every packet sent\nfrom this socket.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["ttl",{"primitive":"u32"}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3055:225","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:64":{"id":"0:64","crate_id":0,"name":null,"span":{"filename":"src/sockaddr.rs","begin":[267,0],"end":[274,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2875:143","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"SocketAddr","id":"2:41814:2022","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"SockAddr","id":"0:616:2073","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:65:818"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:41969:10350-0:659:2104":{"id":"a:2:41969:10350-0:659:2104","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:41969:10350","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Type","id":"0:659:2104","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2625-0:270:2075":{"id":"b:2:2625-0:270:2075","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32107:4100","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2619:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"SockRef","id":"0:270:2075","args":{"angle_bracketed":{"args":[{"lifetime":"'s"}],"bindings":[]}}}},"items":["2:2627:3998"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13249:35036":{"id":"2:13249:35036","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13281:28140":{"id":"2:13281:28140","crate_id":2,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"2:39775:21569","Self::is_ascii":"2:13280:28139"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41874:193","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"AsciiChar","id":"2:39775:21569","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:205:3095":{"id":"0:205:3095","crate_id":0,"name":"ttl","span":{"filename":"src/socket.rs","begin":[1505,4],"end":[1509,5]},"visibility":"public","docs":"Get the value of the `IP_TTL` option for this socket.\n\nFor more information about this option, see [`set_ttl`].\n\n[`set_ttl`]: Socket::set_ttl","links":{"Socket::set_ttl":"0:207:3108"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3055:225","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u32"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13191:35030":{"id":"2:13191:35030","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\", suggestion =\n\"lines\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinesAny","id":"2:44020:14479","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:530:2099":{"id":"0:530:2099","crate_id":0,"name":"for_address","span":{"filename":"src/lib.rs","begin":[222,4],"end":[227,5]},"visibility":"public","docs":"Returns the correct domain for `address`.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["address",{"resolved_path":{"name":"SocketAddr","id":"2:41814:2022","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Domain","id":"0:648:2088","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:152:2820":{"id":"0:152:2820","crate_id":0,"name":"send_vectored","span":{"filename":"src/socket.rs","begin":[667,4],"end":[669,5]},"visibility":"public","docs":"Send data to the connected peer. Returns the amount of bytes written.","links":{},"attrs":["#[cfg(not(target_os = \"redox\"))]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["bufs",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"IoSlice","id":"1:8482:2017","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3055:225","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:637:818":{"id":"0:637:818","crate_id":0,"name":"from","span":{"filename":"src/socket.rs","begin":[2181,0],"end":[2181,29]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["socket",{"resolved_path":{"name":"Socket","id":"0:114:2074","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"net::TcpStream","id":"1:3893:2584","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:3121:246-0:616:2073":{"id":"a:2:3121:246-0:616:2073","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3121:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"SockAddr","id":"0:616:2073","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:146:2779":{"id":"0:146:2779","crate_id":0,"name":"recv_from_vectored_with_flags","span":{"filename":"src/socket.rs","begin":[581,4],"end":[587,5]},"visibility":"public","docs":"Identical to [`recv_from_vectored`] but allows for specification of\narbitrary flags to the underlying `recvmsg`/`WSARecvFrom` call.\n\n[`recv_from_vectored`]: Socket::recv_from_vectored\n\n# Safety\n\n`recv_from_vectored` makes the same safety guarantees regarding `bufs`\nas [`recv_vectored`].\n\n[`recv_vectored`]: Socket::recv_vectored","links":{"Socket::recv_vectored":"0:140:2750","Socket::recv_from_vectored":"0:145:2778"},"attrs":["#[cfg(not(target_os = \"redox\"))]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["bufs",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"resolved_path":{"name":"MaybeUninitSlice","id":"0:554:2171","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}}],["flags",{"resolved_path":{"name":"c_int","id":"20:44:2072","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3055:225","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"primitive":"usize"},{"resolved_path":{"name":"RecvFlags","id":"0:681:2161","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},{"resolved_path":{"name":"SockAddr","id":"0:616:2073","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:674":{"id":"0:674","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[305,15],"end":[305,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2641:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Protocol","id":"0:670:2127","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:675:463"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:32165:4101-0:659:2104":{"id":"a:2:32165:4101-0:659:2104","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32165:4101","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Type","id":"0:659:2104","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:625:2862":{"id":"0:625:2862","crate_id":0,"name":"Address","span":{"filename":"src/socket.rs","begin":[829,4],"end":[829,21]},"visibility":"default","docs":"An address assigned to an interface.","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":{"tuple":["0:627:1956"]},"discriminant":null}}},"0:678":{"id":"0:678","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[305,26],"end":[305,35]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"2:32108:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Protocol","id":"0:670:2127","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:594:788":{"id":"0:594:788","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[658,4],"end":[660,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["fmt",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"2:10253:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"2:10234:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:606:2227":{"id":"0:606:2227","crate_id":0,"name":"with_addr","span":{"filename":"src/lib.rs","begin":[695,4],"end":[698,5]},"visibility":"public","docs":"Set the mutable address (name) of the message.\n\nCorresponds to setting `msg_name` and `msg_namelen` on Unix and `name`\nand `namelen` on Windows.","links":{},"attrs":["#[allow(clippy::needless_pass_by_ref_mut)]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["addr",{"borrowed_ref":{"lifetime":"'addr","mutable":true,"type":{"resolved_path":{"name":"SockAddr","id":"0:616:2073","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2913-0:659:2104":{"id":"b:2:2913-0:659:2104","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2872:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2882:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Type","id":"0:659:2104","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2916:136","2:2917:1788"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:32165:4101-0:114:2074":{"id":"a:2:32165:4101-0:114:2074","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32165:4101","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Socket","id":"0:114:2074","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2898-0:648:2088":{"id":"b:2:2898-0:648:2088","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2875:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2872:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Domain","id":"0:648:2088","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2901:2498"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:49:1857":{"id":"0:49:1857","crate_id":0,"name":"unix","span":{"filename":"src/sockaddr.rs","begin":[149,4],"end":[154,5]},"visibility":"public","docs":"Constructs a `SockAddr` with the family `AF_UNIX` and the provided path.\n\nReturns an error if the path is longer than `SUN_LEN`.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["path",{"generic":"P"}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3055:225","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"SockAddr","id":"0:616:2073","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"2:2866:77","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Path","id":"1:5436:202","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:134:2695":{"id":"0:134:2695","crate_id":0,"name":"try_clone","span":{"filename":"src/socket.rs","begin":[359,4],"end":[361,5]},"visibility":"public","docs":"Creates a new independently owned handle to the underlying socket.\n\n# Notes\n\nOn Unix this uses `F_DUPFD_CLOEXEC` and thus sets the `FD_CLOEXEC` on\nthe returned socket.\n\nOn Windows this uses `WSA_FLAG_NO_HANDLE_INHERIT` setting inheriting to\nfalse.\n\nOn Windows this can **not** be used function cannot be used on a\nQOS-enabled socket, see\n<https://docs.microsoft.com/en-us/windows/win32/api/winsock2/nf-winsock2-wsaduplicatesocketw>.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3055:225","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Socket","id":"0:114:2074","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:524-0:270:2075":{"id":"0:524-0:270:2075","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[188,0],"end":[188,25]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"sockref::SockRef","name":"SockRef","id":"0:270:2075","glob":false}}},"a:2:3156:4097-0:648:2088":{"id":"a:2:3156:4097-0:648:2088","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"2:3156:4097","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Domain","id":"0:648:2088","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:3737-0:692:2181":{"id":"b:2:3737-0:692:2181","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:32107:4100","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3735:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TcpKeepalive","id":"0:692:2181","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3739:1803"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:2904:818":{"id":"2:2904:818","crate_id":2,"name":"from","span":null,"visibility":"default","docs":"Returns the argument unchanged.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["t",{"generic":"T"}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:607:2233":{"id":"0:607:2233","crate_id":0,"name":"with_buffers","span":{"filename":"src/lib.rs","begin":[704,4],"end":[707,5]},"visibility":"public","docs":"Set the mutable buffer(s) of the message.\n\nCorresponds to setting `msg_iov` and `msg_iovlen` on Unix and `lpBuffers`\nand `dwBufferCount` on Windows.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["bufs",{"borrowed_ref":{"lifetime":"'bufs","mutable":true,"type":{"slice":{"resolved_path":{"name":"MaybeUninitSlice","id":"0:554:2171","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13183:28278":{"id":"2:13183:28278","crate_id":2,"name":"split_at_mut_checked","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that’s not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at_checked`] method.\n\n[`split_at_checked`]: str::split_at_checked\n\n# Examples\n\n```\n#![feature(split_at_checked)]\n\nlet mut s = \"Per Martin-Löf\".to_string();\nif let Some((first, last)) = s.split_at_mut_checked(3) {\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n\nassert_eq!(None, s.split_at_mut_checked(13));  // Inside “ö”\nassert_eq!(None, s.split_at_mut_checked(16));  // Beyond the string length\n```","links":{"str::split_at_checked":"2:13182:28277"},"attrs":["#[must_use]","#[unstable(feature = \"split_at_checked\", reason = \"new API\", issue =\n\"119128\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"2:41874:193","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2627:3998":{"id":"2:2627:3998","crate_id":2,"name":"borrow","span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[rustc_diagnostic_item = \"noop_method_borrow\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:676":{"id":"0:676","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[305,22],"end":[305,24]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"2:2680:133","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Protocol","id":"0:670:2127","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:251:3267":{"id":"0:251:3267","crate_id":0,"name":"write_vectored","span":{"filename":"src/socket.rs","begin":[2144,4],"end":[2146,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(target_os = \"redox\"))]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["bufs",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"IoSlice","id":"1:8482:2017","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3055:225","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:139:2725":{"id":"0:139:2725","crate_id":0,"name":"recv_with_flags","span":{"filename":"src/socket.rs","begin":[439,4],"end":[445,5]},"visibility":"public","docs":"Identical to [`recv`] but allows for specification of arbitrary flags to\nthe underlying `recv` call.\n\n[`recv`]: Socket::recv","links":{"Socket::recv":"0:137:2714"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["buf",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"resolved_path":{"name":"MaybeUninit","id":"2:30489:2020","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u8"}}],"bindings":[]}}}}}}}],["flags",{"resolved_path":{"name":"libc::c_int","id":"20:44:2072","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3055:225","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:278":{"id":"0:278","crate_id":0,"name":null,"span":{"filename":"src/sockref.rs","begin":[82,0],"end":[95,1]},"visibility":"default","docs":"On Windows, a corresponding `From<&impl AsSocket>` implementation exists.","links":{},"attrs":["#[cfg(unix)]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'s","kind":{"lifetime":{"outlives":[]}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"AsFd","id":"1:4993:3273","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2875:143","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'s","mutable":false,"type":{"generic":"S"}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"SockRef","id":"0:270:2075","args":{"angle_bracketed":{"args":[{"lifetime":"'s"}],"bindings":[]}}}},"items":["0:281:818"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:258":{"id":"0:258","crate_id":0,"name":null,"span":{"filename":"src/socket.rs","begin":[2168,0],"end":[2176,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10279:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Socket","id":"0:114:2074","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:259:788"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:535":{"id":"0:535","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[254,0],"end":[284,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Type","id":"0:659:2104","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:536:2107","0:537:2111"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:587:2233":{"id":"0:587:2233","crate_id":0,"name":"with_buffers","span":{"filename":"src/lib.rs","begin":[631,4],"end":[635,5]},"visibility":"public","docs":"Set the buffer(s) of the message.\n\nCorresponds to setting `msg_iov` and `msg_iovlen` on Unix and `lpBuffers`\nand `dwBufferCount` on Windows.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["bufs",{"borrowed_ref":{"lifetime":"'bufs","mutable":false,"type":{"slice":{"resolved_path":{"name":"IoSlice","id":"1:8482:2017","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:41968:10351-0:659:2104":{"id":"a:2:41968:10351-0:659:2104","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:41968:10351","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Type","id":"0:659:2104","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:13286:28147":{"id":"2:13286:28147","crate_id":2,"name":"trim_ascii_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\"\\r hello world\\u{3000}\\n \".trim_ascii_end(), \"\\r hello world\\u{3000}\");\nassert_eq!(\"  \".trim_ascii_end(), \"\");\nassert_eq!(\"\".trim_ascii_end(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:992:39257"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:204:3100":{"id":"0:204:3100","crate_id":0,"name":"set_multicast_ttl_v4","span":{"filename":"src/socket.rs","begin":[1489,4],"end":[1498,5]},"visibility":"public","docs":"Set the value of the `IP_MULTICAST_TTL` option for this socket.\n\nIndicates the time-to-live value of outgoing multicast packets for\nthis socket. The default value is 1 which means that multicast packets\ndon't leave the local network unless explicitly requested.\n\nNote that this may not have any affect on IPv6 sockets.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["ttl",{"primitive":"u32"}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3055:225","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:532:818":{"id":"0:532:818","crate_id":0,"name":"from","span":{"filename":"src/lib.rs","begin":[231,4],"end":[233,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["d",{"resolved_path":{"name":"c_int","id":"20:44:2072","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Domain","id":"0:648:2088","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:551:818":{"id":"0:551:818","crate_id":0,"name":"from","span":{"filename":"src/lib.rs","begin":[358,4],"end":[360,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["p",{"resolved_path":{"name":"Protocol","id":"0:670:2127","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"c_int","id":"20:44:2072","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:633:818":{"id":"0:633:818","crate_id":0,"name":"from","span":{"filename":"src/socket.rs","begin":[2179,0],"end":[2179,31]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["socket",{"resolved_path":{"name":"net::TcpListener","id":"1:3896:3270","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Socket","id":"0:114:2074","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:41968:10351-0:554:2171":{"id":"a:2:41968:10351-0:554:2171","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:41968:10351","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MaybeUninitSlice","id":"0:554:2171","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"b:2:2902-0:659:2104":{"id":"b:2:2902-0:659:2104","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2875:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Type","id":"0:659:2104","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2904:818"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:399":{"id":"0:399","crate_id":0,"name":null,"span":{"filename":"src/sys/unix.rs","begin":[552,0],"end":[576,1]},"visibility":"default","docs":"Unix-only API.","links":{},"attrs":["#[cfg(not(target_os = \"redox\"))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"crate::RecvFlags","id":"0:681:2161","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:400:3380","0:401:3386"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:32106:236-0:621:2080":{"id":"a:2:32106:236-0:621:2080","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:32106:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"InterfaceIndexOrAddress","id":"0:621:2080","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:396":{"id":"0:396","crate_id":0,"name":null,"span":{"filename":"src/sys/unix.rs","begin":[353,0],"end":[375,1]},"visibility":"default","docs":"Unix only API.","links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"crate::Domain","id":"0:648:2088","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:673":{"id":"0:673","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[305,9],"end":[305,13]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"2:3116:117","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Protocol","id":"0:670:2127","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:182:2952":{"id":"0:182:2952","crate_id":0,"name":"set_reuse_address","span":{"filename":"src/socket.rs","begin":[1028,4],"end":[1037,5]},"visibility":"public","docs":"Set value for the `SO_REUSEADDR` option on this socket.\n\nThis indicates that futher calls to `bind` may allow reuse of local\naddresses. For IPv4 sockets this means that a socket may bind even when\nthere's a socket already listening on this port.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["reuse",{"primitive":"bool"}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3055:225","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:639:818":{"id":"0:639:818","crate_id":0,"name":"from","span":{"filename":"src/socket.rs","begin":[2182,0],"end":[2182,31]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["socket",{"resolved_path":{"name":"Socket","id":"0:114:2074","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"net::TcpListener","id":"1:3896:3270","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:65:818":{"id":"0:65:818","crate_id":0,"name":"from","span":{"filename":"src/sockaddr.rs","begin":[268,4],"end":[273,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["addr",{"resolved_path":{"name":"SocketAddr","id":"2:41814:2022","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"SockAddr","id":"0:616:2073","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:564":{"id":"0:564","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[409,0],"end":[415,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Deref","id":"2:3329:124","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MaybeUninitSlice","id":"0:554:2171","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["0:566:248","0:567:618"],"negative":false,"synthetic":false,"blanket_impl":null}}},"5:5612":{"id":"5:5612","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["5:5613:35742","5:5614:4115","5:5617:35743","5:5620:35744","5:5628:35745","5:5629:35746","5:5630:4085","5:5631:29532","5:5632:29533"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13190:31823":{"id":"2:13190:31823","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nNote that any carriage return (`\\r`) not immediately followed by a\nline feed (`\\n`) does not split a line. These carriage returns are\nthereby included in the produced lines.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\r\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\n// Trailing carriage return is included in the last line\nassert_eq!(Some(\"baz\\r\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line does not require any ending:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Lines","id":"2:44010:4056","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3737-0:670:2127":{"id":"b:2:3737-0:670:2127","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:32107:4100","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3735:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Protocol","id":"0:670:2127","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3739:1803"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:185:2961":{"id":"0:185:2961","crate_id":0,"name":"set_send_buffer_size","span":{"filename":"src/socket.rs","begin":[1055,4],"end":[1064,5]},"visibility":"public","docs":"Set value for the `SO_SNDBUF` option on this socket.\n\nChanges the size of the operating system's send buffer associated with\nthe socket.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["size",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3055:225","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:517":{"id":"0:517","crate_id":0,"name":null,"span":{"filename":"src/sys/unix.rs","begin":[3076,0],"end":[3081,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2875:143","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"OwnedFd","id":"1:4970:3333","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"crate::Socket","id":"0:114:2074","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:518:818"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2625-0:670:2127":{"id":"b:2:2625-0:670:2127","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32107:4100","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2619:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Protocol","id":"0:670:2127","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2627:3998"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:59:2474":{"id":"0:59:2474","crate_id":0,"name":"is_unix","span":{"filename":"src/sockaddr.rs","begin":[204,4],"end":[206,5]},"visibility":"public","docs":"Returns true if this address is of a unix socket (for local interprocess communication),\ni.e. it is from the `AF_UNIX` family, false otherwise.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:147:2798":{"id":"0:147:2798","crate_id":0,"name":"peek_from","span":{"filename":"src/socket.rs","begin":[618,4],"end":[620,5]},"visibility":"public","docs":"Receives data from the socket, without removing it from the queue.\n\nSuccessive calls return the same data. This is accomplished by passing\n`MSG_PEEK` as a flag to the underlying `recvfrom` system call.\n\nOn success, returns the number of bytes peeked and the address from\nwhence the data came.\n\n# Safety\n\n`peek_from` makes the same safety guarantees regarding the `buf`fer as\n[`recv`].\n\n# Note: Datagram Sockets\nFor datagram sockets, the behavior of this method when `buf` is smaller than\nthe datagram at the head of the receive queue differs between Windows and\nUnix-like platforms (Linux, macOS, BSDs, etc: colloquially termed \"*nix\").\n\nOn *nix platforms, the datagram is truncated to the length of `buf`.\n\nOn Windows, an error corresponding to `WSAEMSGSIZE` will be returned.\n\nFor consistency between platforms, be sure to provide a sufficiently large buffer to avoid\ntruncation; the exact size required depends on the underlying protocol.\n\nIf you just want to know the sender of the data, try [`peek_sender`].\n\n[`recv`]: Socket::recv\n[`peek_sender`]: Socket::peek_sender","links":{"Socket::recv":"0:137:2714","Socket::peek_sender":"0:148:2803"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["buf",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"resolved_path":{"name":"MaybeUninit","id":"2:30489:2020","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u8"}}],"bindings":[]}}}}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3055:225","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"primitive":"usize"},{"resolved_path":{"name":"SockAddr","id":"0:616:2073","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:3121:246-0:659:2104":{"id":"a:2:3121:246-0:659:2104","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3121:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Type","id":"0:659:2104","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:668":{"id":"0:668","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[251,26],"end":[251,35]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"2:2675:200","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Type","id":"0:659:2104","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:669:686"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:41969:10350-0:575:2213":{"id":"a:2:41969:10350-0:575:2213","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'addr","kind":{"lifetime":{"outlives":[]}}},{"name":"'bufs","kind":{"lifetime":{"outlives":[]}}},{"name":"'control","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:41969:10350","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MsgHdr","id":"0:575:2213","args":{"angle_bracketed":{"args":[{"lifetime":"'addr"},{"lifetime":"'bufs"},{"lifetime":"'control"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2902-0:575:2213":{"id":"b:2:2902-0:575:2213","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2875:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"MsgHdr","id":"0:575:2213","args":{"angle_bracketed":{"args":[{"lifetime":"'addr"},{"lifetime":"'bufs"},{"lifetime":"'control"}],"bindings":[]}}}},"items":["2:2904:818"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:117":{"id":"0:117","crate_id":0,"name":null,"span":{"filename":"src/socket.rs","begin":[82,0],"end":[751,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Socket","id":"0:114:2074","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:121:1163","0:122:2605","0:124:2621","0:125:2627","0:126:2647","0:127:2658","0:128:2664","0:129:2667","0:131:2676","0:132:2682","0:133:34","0:134:2695","0:135:2649","0:136:2708","0:137:2714","0:138:2732","0:139:2725","0:140:2750","0:141:2751","0:142:2764","0:143:2770","0:144:2771","0:145:2778","0:146:2779","0:147:2798","0:148:2803","0:149:2740","0:150:2814","0:151:2815","0:152:2820","0:153:2821","0:154:2829","0:155:2834","0:156:2835","0:157:2841","0:158:2842","0:159:2824"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2902-0:114:2074":{"id":"b:2:2902-0:114:2074","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2875:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Socket","id":"0:114:2074","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2904:818"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:3121:246-0:681:2161":{"id":"a:2:3121:246-0:681:2161","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3121:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RecvFlags","id":"0:681:2161","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:13174:28249":{"id":"2:13174:28249","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10938:238","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10938:238","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:190":{"id":"0:190","crate_id":0,"name":null,"span":{"filename":"src/socket.rs","begin":[1109,0],"end":[1615,1]},"visibility":"default","docs":"Socket options for IPv4 sockets, get/set using `IPPROTO_IP`.\n\nAdditional documentation can be found in documentation of the OS.\n* Linux: <https://man7.org/linux/man-pages/man7/ip.7.html>\n* Windows: <https://docs.microsoft.com/en-us/windows/win32/winsock/ipproto-ip-socket-options>","links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Socket","id":"0:114:2074","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:191:3018","0:192:3029","0:193:3035","0:194:3040","0:195:3045","0:196:3055","0:197:3075","0:198:3079","0:199:3083","0:201:3089","0:202:3093","0:204:3100","0:205:3095","0:207:3108","0:208:3114","0:209:3115","0:211:3124","0:212:3125"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:41969:10350-0:595:2250":{"id":"a:2:41969:10350-0:595:2250","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'addr","kind":{"lifetime":{"outlives":[]}}},{"name":"'bufs","kind":{"lifetime":{"outlives":[]}}},{"name":"'control","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:41969:10350","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MsgHdrMut","id":"0:595:2250","args":{"angle_bracketed":{"args":[{"lifetime":"'addr"},{"lifetime":"'bufs"},{"lifetime":"'control"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:665":{"id":"0:665","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[251,22],"end":[251,24]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"2:2680:133","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Type","id":"0:659:2104","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:41969:10350-0:648:2088":{"id":"a:2:41969:10350-0:648:2088","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:41969:10350","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Domain","id":"0:648:2088","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:13193:28291":{"id":"2:13193:28291","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"1:12332:459","self::pattern":"2:12848:21495"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12854:15249","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:172:2913":{"id":"0:172:2913","crate_id":0,"name":"out_of_band_inline","span":{"filename":"src/socket.rs","begin":[942,4],"end":[947,5]},"visibility":"public","docs":"Get value for the `SO_OOBINLINE` option on this socket.\n\nFor more information about this option, see [`set_out_of_band_inline`].\n\n[`set_out_of_band_inline`]: Socket::set_out_of_band_inline","links":{"Socket::set_out_of_band_inline":"0:174:2921"},"attrs":["#[cfg(not(target_os = \"redox\"))]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3055:225","args":{"angle_bracketed":{"args":[{"type":{"primitive":"bool"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:515":{"id":"0:515","crate_id":0,"name":null,"span":{"filename":"src/sys/unix.rs","begin":[3069,0],"end":[3073,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"IntoRawFd","id":"1:4916:2554","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"crate::Socket","id":"0:114:2074","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:516:2039"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2908-0:670:2127":{"id":"b:2:2908-0:670:2127","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2882:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2878:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Protocol","id":"0:670:2127","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2911:136","2:2912:1790"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"5:5620:35744":{"id":"5:5620:35744","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7642:242"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7642:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:534:818":{"id":"0:534:818","crate_id":0,"name":"from","span":{"filename":"src/lib.rs","begin":[237,4],"end":[239,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["d",{"resolved_path":{"name":"Domain","id":"0:648:2088","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"c_int","id":"20:44:2072","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:518:818":{"id":"0:518:818","crate_id":0,"name":"from","span":{"filename":"src/sys/unix.rs","begin":[3077,4],"end":[3080,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["fd",{"resolved_path":{"name":"OwnedFd","id":"1:4970:3333","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"crate::Socket","id":"0:114:2074","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13186:14493":{"id":"2:13186:14493","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the previous character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:12332:459"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CharIndices","id":"2:43732:14465","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:601":{"id":"0:601","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[679,0],"end":[722,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(target_os = \"redox\"))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'addr","kind":{"lifetime":{"outlives":[]}}},{"name":"'bufs","kind":{"lifetime":{"outlives":[]}}},{"name":"'control","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"MsgHdrMut","id":"0:595:2250","args":{"angle_bracketed":{"args":[{"lifetime":"'addr"},{"lifetime":"'bufs"},{"lifetime":"'control"}],"bindings":[]}}}},"items":["0:605:1163","0:606:2227","0:607:2233","0:608:2239","0:609:2244"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:619":{"id":"0:619","crate_id":0,"name":null,"span":{"filename":"src/sockaddr.rs","begin":[20,9],"end":[20,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2641:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"SockAddr","id":"0:616:2073","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:620:463"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:588:2239":{"id":"0:588:2239","crate_id":0,"name":"with_control","span":{"filename":"src/lib.rs","begin":[641,4],"end":[645,5]},"visibility":"public","docs":"Set the control buffer of the message.\n\nCorresponds to setting `msg_control` and `msg_controllen` on Unix and\n`Control` on Windows.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["buf",{"borrowed_ref":{"lifetime":"'control","mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:554:2171":{"id":"0:554:2171","crate_id":0,"name":"MaybeUninitSlice","span":{"filename":"src/lib.rs","begin":[390,0],"end":[390,59]},"visibility":"public","docs":"A version of [`IoSliceMut`] that allows the buffer to be uninitialised.\n\n[`IoSliceMut`]: std::io::IoSliceMut","links":{"std::io::IoSliceMut":"1:3600:2550"},"attrs":["#[repr(transparent)]"],"deprecation":null,"inner":{"struct":{"kind":{"tuple":[null]},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"impls":["0:561","a:2:32106:236-0:554:2171","a:2:3121:246-0:554:2171","a:2:3156:4097-0:554:2171","a:2:32165:4101-0:554:2171","a:2:41968:10351-0:554:2171","a:2:41969:10350-0:554:2171","b:2:2913-0:554:2171","b:2:2898-0:554:2171","b:2:2625-0:554:2171","b:2:2902-0:554:2171","b:2:2628-0:554:2171","b:2:3737-0:554:2171","b:2:2908-0:554:2171","0:558","0:564","0:568"]}}},"2:13219:35031":{"id":"2:13219:35031","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"2:12848:21495","str::split":"2:13210:28279","prim@char":"1:12332:459","`DoubleEndedIterator`":"2:8230:129","str::rsplit_terminator":"2:13222:35032"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitTerminator","id":"2:43806:14470","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12854:15249","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:3156:4097-0:621:2080":{"id":"a:2:3156:4097-0:621:2080","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"2:3156:4097","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"InterfaceIndexOrAddress","id":"0:621:2080","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}}},"paths":{"5:3801:4074":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"6:6562:9285":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"6:1628:5473":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"17:12707:15117":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"1:1103:15202":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"6:497:4645":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"2:43683:10838":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"6:5102:8537":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"2:10253:142":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"17:14066:12481":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"16:4424:13147":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"20:5455:8573":{"crate_id":20,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"2:22716:14392":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"2:6870:14379":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindows"],"kind":"struct"},"1:8243:15308":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"20:1684:5479":{"crate_id":20,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"2:46897:13979":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"17:10997:12207":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"2:46108:13902":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"17:13568:12390":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"6:491:4644":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"2:42063:10742":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"17:13146:12331":{"crate_id":17,"path":["object","archive","AixFileHeader"],"kind":"struct"},"5:7402:15204":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"1:4875:16279":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"20:4950:8521":{"crate_id":20,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"20:1721:5481":{"crate_id":20,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"2:2872:162":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"20:961:3076":{"crate_id":20,"path":["libc","unix","linux_like","IP_MULTICAST_IF"],"kind":"constant"},"2:43978:14478":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"2:12869:21493":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"1:8208:138":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"6:5361:8563":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"6:8351:3338":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"2:45869:13881":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"17:12508:12288":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"2:46923:13981":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"2:46429:13931":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"11:2304:14295":{"crate_id":11,"path":["hashbrown","table","Entry"],"kind":"enum"},"17:15582:12904":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"17:11443:12225":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"2:22383:2227":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_addr"],"kind":"function"},"2:43924:14475":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"17:10573:36525":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"1:11601:27480":{"crate_id":1,"path":["std","sys","thread_local","fast_local","DtorState"],"kind":"enum"},"1:1094:15199":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"20:5217:8548":{"crate_id":20,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"2:41874:193":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"1:10487:113":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Command"],"kind":"struct"},"17:12824:23120":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"20:1651:5475":{"crate_id":20,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"20:6754:9304":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","xdp_statistics_v1"],"kind":"struct"},"2:5981:4037":{"crate_id":2,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"20:1033:3147":{"crate_id":20,"path":["libc","unix","linux_like","IPV6_DROP_MEMBERSHIP"],"kind":"constant"},"11:742:15190":{"crate_id":11,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"20:56:3337":{"crate_id":20,"path":["libc","unix","ssize_t"],"kind":"type_alias"},"5:3247:4210":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"20:5050:8534":{"crate_id":20,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"1:10909:14535":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileAttr"],"kind":"struct"},"11:1142:15201":{"crate_id":11,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"2:5228:4090":{"crate_id":2,"path":["core","io","borrowed_buf","BorrowedBuf"],"kind":"struct"},"17:10720:36520":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"17:16105:13039":{"crate_id":17,"path":["object","xcoff","FileAux32"],"kind":"struct"},"17:15273:12806":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"17:11367:12210":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"1:9414:15301":{"crate_id":1,"path":["std","sync","rwlock","MappedRwLockReadGuard"],"kind":"struct"},"1:11579:15337":{"crate_id":1,"path":["std","sys","thread_local","fast_local","Key"],"kind":"struct"},"6:5515:8580":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_chacha20_poly1305"],"kind":"struct"},"20:4798:8507":{"crate_id":20,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"15:306:22139":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"6:6775:9307":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","iocb"],"kind":"struct"},"2:9933:33192":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"2:46038:13898":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"16:6480:13114":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"17:15616:12916":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"17:12371:12313":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"5:1073:36051":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"11:2548:13485":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"20:5350:8562":{"crate_id":20,"path":["libc","unix","linux_like","linux","seccomp_notif_addfd"],"kind":"struct"},"1:8542:4056":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"20:840:2091":{"crate_id":20,"path":["libc","unix","linux_like","AF_INET"],"kind":"constant"},"16:2508:13094":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"2:40379:14416":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"17:11142:12221":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"6:4916:8517":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"16:7727:13130":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"1:3383:4082":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"2:42449:97":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"18:573:12064":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"17:256:15023":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"6:6768:9306":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_desc"],"kind":"struct"},"16:7321:10347":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"17:14436:12561":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"1:4916:2554":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"16:5307:13169":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"2:46866:13976":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"5:6965:21526":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstDataSrcBufDrop"],"kind":"struct"},"11:2554:36481":{"crate_id":11,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"6:4932:8519":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"6:5260:8552":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"1:11100:31738":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"2:4765:10962":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"16:3329:13137":{"crate_id":16,"path":["gimli","arch","LoongArch"],"kind":"struct"},"20:1028:3188":{"crate_id":20,"path":["libc","unix","linux_like","IPV6_UNICAST_HOPS"],"kind":"constant"},"2:13743:151":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"2:747:16259":{"crate_id":2,"path":["core","num","nonzero","ZeroablePrimitive"],"kind":"trait"},"6:7412:5587":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"6:5064:8535":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"5:835:101":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"16:5347:13170":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"2:32083:15257":{"crate_id":2,"path":["core","error","tags","MaybeSizedValue"],"kind":"struct"},"2:46819:13973":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"2:11132:4060":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"5:6048:14351":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"2:34092:4153":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"6:7602:9725":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"1:7138:16342":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"2:10718:34257":{"crate_id":2,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"18:689:14113":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"2:2869:76":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"17:15214:12792":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"1:11612:14543":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"16:6278:15130":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"1:12339:1793":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"1:4796:16274":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"1:2460:10367":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"2:22918:16255":{"crate_id":2,"path":["core","num","nonzero","private","Sealed"],"kind":"trait"},"16:2612:13099":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"1:11353:15336":{"crate_id":1,"path":["std","sys","os_str","bytes","Slice"],"kind":"struct"},"17:11825:15086":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"1:2478:16247":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"2:44667:149":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"7:78:22024":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"1:367:15263":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"2:42836:10387":{"crate_id":2,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"1:671:15271":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"16:3925:13144":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"0:681:2161":{"crate_id":0,"path":["socket2","RecvFlags"],"kind":"struct"},"2:40604:14427":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"2:4:1241":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"16:8259:13288":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"16:6026:14205":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"17:15281:12807":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"16:6648:14259":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"20:7337:9711":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"3:234:225":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"17:11051:15048":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"11:1566:22113":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"1:1071:14295":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"17:15023:12748":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"16:6940:13230":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"17:10710:15042":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"11:832:15203":{"crate_id":11,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"2:43347:10823":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"5:1320:14295":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"2:8283:10275":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"2:23010:13611":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroUsizeInner"],"kind":"struct"},"6:6670:9294":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"2:40291:14407":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"14:187:22126":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"2:22424:16434":{"crate_id":2,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr"],"kind":"trait"},"2:46317:13927":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"20:1697:2386":{"crate_id":20,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"17:12887:14161":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"1:8022:12236":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"16:6606:14257":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"6:5244:8551":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"2:11926:10828":{"crate_id":2,"path":["core","slice","iter","ChunkByMut"],"kind":"struct"},"20:522:4646":{"crate_id":20,"path":["libc","unix","hostent"],"kind":"struct"},"2:13686:14387":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"2:38127:4159":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"2:32090:10961":{"crate_id":2,"path":["core","error","tags","Ref"],"kind":"struct"},"2:46976:13986":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"2:41614:169":{"crate_id":2,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"5:3046:16007":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"2:30457:3272":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"1:5591:14863":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"16:6317:15148":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"9:482:22030":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"6:7389:5602":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"5:7619:4241":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"2:9317:10349":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"17:12683:15115":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegmentIterator"],"kind":"struct"},"1:426:184":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"1:1893:15278":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"17:12289:12273":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"6:4979:8525":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"20:104:3140":{"crate_id":20,"path":["libc","unix","IPPROTO_IPV6"],"kind":"constant"},"1:12304:16186":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"16:6802:14264":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"14:214:14316":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"2:40887:14445":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"6:1503:3343":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"11:2498:22108":{"crate_id":11,"path":["hashbrown","Equivalent"],"kind":"trait"},"2:44486:14515":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"17:13064:12323":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"20:5622:8590":{"crate_id":20,"path":["libc","unix","linux_like","linux","__c_anonymous_ifc_ifcu"],"kind":"union"},"16:8073:13345":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"5:1200:35965":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"1:10914:14537":{"crate_id":1,"path":["std","sys","pal","unix","fs","StatxExtraFields"],"kind":"struct"},"16:2572:13097":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"17:14868:12700":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"6:4909:8516":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"1:2317:4046":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"16:4531:13150":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"20:8292:8761":{"crate_id":20,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"20:4835:8510":{"crate_id":20,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"20:1494:3516":{"crate_id":20,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"17:9807:23101":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"2:8188:144":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"20:5210:8547":{"crate_id":20,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"20:8349:3338":{"crate_id":20,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"17:12993:23121":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"1:7867:12185":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"16:7813:14302":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"6:5653:8594":{"crate_id":6,"path":["libc","unix","linux_like","linux","sched_attr"],"kind":"struct"},"1:7917:31733":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"2:4346:15244":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"6:8012:10095":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"2:40585:14424":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"2:44064:14407":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"17:12494:12285":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"18:0:3912":{"crate_id":18,"path":["memchr"],"kind":"module"},"2:44342:14500":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"2:22438:10376":{"crate_id":2,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr","with_exposed_provenance"],"kind":"function"},"2:22357:16255":{"crate_id":2,"path":["core","core_simd","simd","num","sealed","Sealed"],"kind":"trait"},"2:10286:10901":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"18:726:12086":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"6:6678:9295":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"11:430:36483":{"crate_id":11,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"17:14051:12478":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"1:2488:16252":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"1:10639:31731":{"crate_id":1,"path":["std","sys","pal","unix","stack_overflow","Handler"],"kind":"struct"},"17:15799:12964":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"5:3881:15218":{"crate_id":5,"path":["alloc","collections","linked_list","ExtractIf"],"kind":"struct"},"20:44:2072":{"crate_id":20,"path":["libc","unix","c_int"],"kind":"type_alias"},"2:22755:14396":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"2:45700:13865":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"20:6744:9303":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","xdp_statistics"],"kind":"struct"},"6:7537:9720":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"1:10956:14043":{"crate_id":1,"path":["std","sys","pal","unix","fs","Mode"],"kind":"struct"},"2:11366:10844":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"6:7306:4687":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"2:11107:10835":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"17:11574:14332":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"17:11755:14142":{"crate_id":17,"path":["object","read","elf","attributes","AttributeIndexIterator"],"kind":"struct"},"17:12433:12280":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"17:11799:15081":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"20:5342:8561":{"crate_id":20,"path":["libc","unix","linux_like","linux","seccomp_notif_resp"],"kind":"struct"},"6:5219:8548":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"20:1083:3348":{"crate_id":20,"path":["libc","unix","linux_like","TCP_KEEPIDLE"],"kind":"constant"},"2:7907:4087":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"2:46123:13903":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"20:4963:8523":{"crate_id":20,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"16:4062:13145":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"6:5031:8531":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"16:7355:13270":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"17:2175:23175":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"2:13538:15252":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"2:11967:2497":{"crate_id":2,"path":["core","slice","raw","from_raw_parts"],"kind":"function"},"17:12557:12210":{"crate_id":17,"path":["object","read","xcoff","section","SectionTable"],"kind":"struct"},"1:6706:14528":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"2:39532:215":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"20:585:4652":{"crate_id":20,"path":["libc","unix","protoent"],"kind":"struct"},"16:7686:15180":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"17:11524:15067":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"2:22251:16430":{"crate_id":2,"path":["core","core_simd","simd","num","float","SimdFloat"],"kind":"trait"},"1:7471:31238":{"crate_id":1,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"16:2808:13108":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"2:45749:13870":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"5:7129:36080":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"6:5400:8568":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"20:6439:9277":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"20:4940:8520":{"crate_id":20,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"6:6524:9282":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"2:43135:14460":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"6:5306:3771":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"20:5380:8566":{"crate_id":20,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"2:1954:4117":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"16:7857:13307":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"11:2542:13484":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"17:11661:14133":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"11:2536:13483":{"crate_id":11,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"2:30895:4232":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"16:3810:13141":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"6:8006:10094":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"17:13235:12341":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"2:13082:119":{"crate_id":2,"path":["core","str","lossy","Debug"],"kind":"struct"},"6:479:3489":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"17:11063:15049":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"1:11922:14552":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"6:5565:8585":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"17:11026:23130":{"crate_id":17,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"2:46379:13929":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"17:10439:12199":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"17:14325:12536":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"17:12454:14158":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"2:4701:14362":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"2:22516:16425":{"crate_id":2,"path":["core","core_simd","simd","cmp","ord","SimdOrd"],"kind":"trait"},"2:46334:13928":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"17:12201:15100":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"1:5696:14862":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"2:3365:140":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"6:5052:8534":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"17:13877:12456":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"17:9671:23096":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"17:12399:14155":{"crate_id":17,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"16:6758:13212":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"17:13723:12427":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"1:8670:3332":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"1:2006:771":{"crate_id":1,"path":["std","ffi"],"kind":"module"},"20:5368:8564":{"crate_id":20,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"17:11115:15052":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"20:4785:8506":{"crate_id":20,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"2:22483:16426":{"crate_id":2,"path":["core","core_simd","simd","cmp","eq","SimdPartialEq"],"kind":"trait"},"5:6955:21525":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"17:14503:12568":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"5:5226:14351":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"17:12251:15104":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"17:12969:12315":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"20:1501:3343":{"crate_id":20,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"20:1483:3339":{"crate_id":20,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"6:8253:8755":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"6:4811:8508":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"2:45802:13877":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"17:3597:15036":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"2:13513:204":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"6:6609:9287":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"20:6433:9276":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"1:5504:128":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"20:6766:9306":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","xdp_desc"],"kind":"struct"},"2:23021:13612":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI8Inner"],"kind":"struct"},"17:15116:12766":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"1:5087:16287":{"crate_id":1,"path":["std","os","net","linux_ext","socket","UnixSocketExt"],"kind":"trait"},"17:13509:12367":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"20:6530:9283":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"6:6729:9301":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_umem_reg"],"kind":"struct"},"17:12318:12277":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"17:13344:12348":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"1:9364:14040":{"crate_id":1,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"6:4864:8511":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"2:22886:14401":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"17:13387:12353":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"6:6650:9291":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"20:6619:9288":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"5:7548:16195":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"20:6712:9299":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","xdp_ring_offset_v1"],"kind":"struct"},"1:3896:3270":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"6:7429:5585":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"10:0:3905":{"crate_id":10,"path":["adler"],"kind":"module"},"1:10949:138":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileType"],"kind":"struct"},"16:7580:14301":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"16:7006:15160":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"11:856:15194":{"crate_id":11,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"2:3609:4177":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"2:39424:4168":{"crate_id":2,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"20:4822:8509":{"crate_id":20,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"17:16176:13060":{"crate_id":17,"path":["object","xcoff","FunAux64"],"kind":"struct"},"16:7144:23054":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"6:5283:8555":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"6:5528:8581":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"6:5423:8570":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"5:3042:16006":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"17:14079:12482":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"20:563:4649":{"crate_id":20,"path":["libc","unix","itimerval"],"kind":"struct"},"11:2383:4210":{"crate_id":11,"path":["hashbrown","table","Iter"],"kind":"struct"},"6:5329:8559":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_sizes"],"kind":"struct"},"1:12357:1894":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"18:659:15018":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"2:22038:33137":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"1:10713:4082":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stdout"],"kind":"struct"},"1:9463:4182":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"11:396:16003":{"crate_id":11,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"20:7312:5426":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"7:0:1884":{"crate_id":7,"path":["unwind"],"kind":"module"},"1:11193:14029":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","ExitStatus"],"kind":"struct"},"20:5470:8575":{"crate_id":20,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"1:11243:4181":{"crate_id":1,"path":["std","sys","pal","unix","time","SystemTime"],"kind":"struct"},"5:1586:15217":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"17:11075:12210":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"18:80:27292":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"1:11094:31737":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"6:6788:11866":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"2:4816:10963":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"20:5388:8567":{"crate_id":20,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"2:40423:21750":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"1:5953:15291":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"11:1107:15200":{"crate_id":11,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"17:9916:23114":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"11:811:15218":{"crate_id":11,"path":["hashbrown","map","ExtractIf"],"kind":"struct"},"1:0:1696":{"crate_id":1,"path":["std"],"kind":"module"},"1:12342:722":{"crate_id":1,"path":["std","f16"],"kind":"primitive"},"2:3347:4162":{"crate_id":2,"path":["core","ops","deref","DerefPure"],"kind":"trait"},"17:15748:12953":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"17:14977:12740":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"17:12530:15110":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSectionIterator"],"kind":"struct"},"2:12379:15250":{"crate_id":2,"path":["core","slice","GetManyMutError"],"kind":"struct"},"14:40:12341":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"17:13753:12434":{"crate_id":17,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"1:11690:14550":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"17:11392:15062":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"1:9311:15321":{"crate_id":1,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"20:6476:9280":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"2:6058:14368":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"2:7620:21566":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"2:21515:33133":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"16:2438:13091":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"2:3156:4097":{"crate_id":2,"path":["core","marker","Freeze"],"kind":"trait"},"2:44331:21508":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"16:7570:13127":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"2:44494:14517":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"16:6231:14235":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"10:36:13490":{"crate_id":10,"path":["adler","algo","U32X4"],"kind":"struct"},"2:22333:16432":{"crate_id":2,"path":["core","core_simd","simd","num","uint","SimdUint"],"kind":"trait"},"2:44670:163":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"17:15138:12770":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"1:11206:14030":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"2:8151:21718":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"1:3667:4050":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"16:4614:13153":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"11:351:36477":{"crate_id":11,"path":["hashbrown","raw","FullBucketsIndices"],"kind":"struct"},"20:4914:8517":{"crate_id":20,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"6:5039:8532":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"2:41893:172":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"20:1678:5478":{"crate_id":20,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"1:10504:16012":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Argv"],"kind":"struct"},"20:4883:8514":{"crate_id":20,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"16:7014:23053":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"17:16269:12358":{"crate_id":17,"path":["object","xcoff","Rel64"],"kind":"struct"},"2:2711:194":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"20:637:2383":{"crate_id":20,"path":["libc","unix","linux_like","sa_family_t"],"kind":"type_alias"},"20:5596:8588":{"crate_id":20,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"16:6442:14241":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"17:2037:15029":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"17:11153:15043":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"1:3549:4037":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"1:2712:31744":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"2:13706:14389":{"crate_id":2,"path":["core","task","wake","LocalWaker"],"kind":"struct"},"16:6098:23047":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"2:41902:4210":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"2:42593:10901":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"16:5781:13117":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"16:2528:13095":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"17:13424:12359":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"17:14587:12579":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"1:3639:2549":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"1:12349:889":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"6:4924:8518":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"2:21498:33140":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"2:750:189":{"crate_id":2,"path":["core","num","nonzero","NonZero"],"kind":"struct"},"2:23043:13614":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI32Inner"],"kind":"struct"},"2:41999:11086":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"16:4940:13163":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"6:6519:9281":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"1:11005:14862":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Stdio"],"kind":"enum"},"17:11016:15046":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"20:5669:8596":{"crate_id":20,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"5:304:10277":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"6:6621:9288":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"6:4885:8514":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"6:6763:9305":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_options"],"kind":"struct"},"18:608:15017":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"1:8085:15305":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"2:7684:33626":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"11:2423:10742":{"crate_id":11,"path":["hashbrown","table","IntoIter"],"kind":"struct"},"1:8230:4190":{"crate_id":1,"path":["std","hash","random","RandomState"],"kind":"struct"},"20:7559:9722":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"2:39376:4176":{"crate_id":2,"path":["core","ops","coroutine","CoroutineState"],"kind":"enum"},"20:6761:9305":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","xdp_options"],"kind":"struct"},"2:21620:13585":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"5:4511:36071":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"20:5312:3773":{"crate_id":20,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"1:524:16165":{"crate_id":1,"path":["std","thread","PanicGuard"],"kind":"struct"},"6:5160:8542":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"17:16079:13033":{"crate_id":17,"path":["object","xcoff","Symbol32"],"kind":"struct"},"1:9290:27477":{"crate_id":1,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"1:8720:4205":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"6:5598:8588":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"6:5445:8572":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"2:40407:106":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"2:21999:16255":{"crate_id":2,"path":["core","core_simd","to_bytes","sealed","Sealed"],"kind":"trait"},"2:43654:10836":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"1:8703:16296":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"20:8257:8756":{"crate_id":20,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"1:9318:15322":{"crate_id":1,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"1:8846:4209":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"5:1489:10835":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"20:4990:8527":{"crate_id":20,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"2:33534:4147":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"17:12949:12277":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"1:12299:31308":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"17:11405:15063":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"17:14788:12639":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"5:5073:4037":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"1:12359:13":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"2:3202:4166":{"crate_id":2,"path":["core","ops","async_function","AsyncFnOnce"],"kind":"trait"},"17:15434:12848":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"2:4711:10961":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"17:11547:12137":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"20:100:2133":{"crate_id":20,"path":["libc","unix","IPPROTO_ICMPV6"],"kind":"constant"},"17:14575:12280":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"16:7539:13126":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"6:5020:8530":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"6:0:988":{"crate_id":6,"path":["libc"],"kind":"module"},"2:10501:152":{"crate_id":2,"path":["core","hash","macros","Hash"],"kind":"proc_derive"},"17:13046:12320":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"20:5579:8586":{"crate_id":20,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"2:11287:10840":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"17:16223:13068":{"crate_id":17,"path":["object","xcoff","StatAux"],"kind":"struct"},"2:3121:246":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"5:3816:15219":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"2:40863:4058":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"17:11497:15065":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"1:11673:14596":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"16:7428:23055":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"5:7390:14353":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"2:32166:4103":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"1:588:15267":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"2:4510:14361":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"20:1545:5466":{"crate_id":20,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"2:4370:109":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"1:3385:4083":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"17:15324:12819":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"17:14475:12564":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"16:7656:23056":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"2:45717:13868":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"2:2675:200":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"17:12408:12279":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"20:5110:8538":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"2:44794:13860":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"2:10288:10900":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"5:1536:14327":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"2:43113:156":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"17:15646:12923":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"2:12863:14116":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"18:113:27294":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"17:13538:12378":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"6:564:4649":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"20:8036:2871":{"crate_id":20,"path":["libc","unix","linux_like","linux","arch","generic","SO_BROADCAST"],"kind":"constant"},"20:464:3047":{"crate_id":20,"path":["libc","unix","group"],"kind":"struct"},"2:46446:13932":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"17:11189:12214":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"1:3600:2550":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"20:5487:8578":{"crate_id":20,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_128"],"kind":"struct"},"6:5002:8528":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"16:6976:13233":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"16:6263:14238":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"20:4930:8519":{"crate_id":20,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"5:680:15211":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"11:1883:4210":{"crate_id":11,"path":["hashbrown","set","Iter"],"kind":"struct"},"17:12792:12159":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"17:9938:23115":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"18:718:12083":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"20:8251:8755":{"crate_id":20,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"2:40738:14441":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"20:7387:5602":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"20:5172:8543":{"crate_id":20,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"1:11895:14055":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"2:3646:4178":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"0:659:2104":{"crate_id":0,"path":["socket2","Type"],"kind":"struct"},"17:16235:13071":{"crate_id":17,"path":["object","xcoff","DwarfAux32"],"kind":"struct"},"2:3564:253":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"2:42096:89":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"17:14147:12492":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"2:21547:16255":{"crate_id":2,"path":["core","core_simd","cast","sealed","Sealed"],"kind":"trait"},"16:7085:14287":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"17:13363:12349":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"16:2548:13096":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"17:15944:12340":{"crate_id":17,"path":["object","xcoff","FileHeader64"],"kind":"struct"},"1:7395:15473":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"2:8650:11085":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"2:40627:14431":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"6:6629:9289":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"20:6819:9309":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"2:43104:4194":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"17:15092:12764":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"5:1555:15189":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"20:8004:10094":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"1:7999:15303":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"16:8155:14313":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"6:6756:9304":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_statistics_v1"],"kind":"struct"},"1:12335:1299":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"17:10155:12188":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"1:10710:4080":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stdin"],"kind":"struct"},"17:15445:12852":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"5:3259:35873":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"1:9165:15316":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"11:1887:10742":{"crate_id":11,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"6:1565:5468":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"2:22839:33403":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"16:7648:15179":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"6:8294:8761":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"20:8034:2881":{"crate_id":20,"path":["libc","unix","linux_like","linux","arch","generic","SO_ERROR"],"kind":"constant"},"2:32076:13288":{"crate_id":2,"path":["core","error","tags","Value"],"kind":"struct"},"1:8648:4429":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"2:10543:4193":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"16:6895:13224":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"2:4756:21546":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"16:2936:22186":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"1:4808:11952":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"function"},"17:13674:12402":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"1:4314:11071":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"17:16069:13032":{"crate_id":17,"path":["object","xcoff","SymbolBytes"],"kind":"struct"},"1:9720:16011":{"crate_id":1,"path":["std","sys","pal","unix","fs","Dir"],"kind":"struct"},"2:45977:13895":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"1:6497:219":{"crate_id":1,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"2:4628:220":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"20:531:3387":{"crate_id":20,"path":["libc","unix","iovec"],"kind":"struct"},"2:42586:10900":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"1:5436:202":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"17:14372:12543":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"2:3575:4172":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"17:10534:36519":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"20:5544:8583":{"crate_id":20,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"11:1896:15218":{"crate_id":11,"path":["hashbrown","set","ExtractIf"],"kind":"struct"},"2:9746:84":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"15:327:22143":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"20:8038:2926":{"crate_id":20,"path":["libc","unix","linux_like","linux","arch","generic","SO_RCVBUF"],"kind":"constant"},"6:7314:5426":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"6:5314:3773":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"16:4502:13149":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"1:11037:14031":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","ExitCode"],"kind":"struct"},"16:6342:36515":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"17:15400:12841":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"6:6597:9286":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"6:5636:8592":{"crate_id":6,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"2:15:2034":{"crate_id":2,"path":["core","write"],"kind":"macro"},"2:39589:13691":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"6:7339:9711":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"1:4201:16276":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"2:46840:13974":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"2:2619:102":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"6:5624:8590":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifc_ifcu"],"kind":"union"},"2:22804:33396":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"6:517:3340":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"1:6346:14387":{"crate_id":1,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"2:4269:4037":{"crate_id":2,"path":["core","array","Guard"],"kind":"struct"},"17:15957:12989":{"crate_id":17,"path":["object","xcoff","AuxHeader32"],"kind":"struct"},"16:5863:23046":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"2:1773:2019":{"crate_id":2,"path":["core","mem"],"kind":"module"},"6:1699:2386":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"2:3329:124":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"5:7422:14354":{"crate_id":5,"path":["alloc","collections","btree","map","UnorderedKeyError"],"kind":"struct"},"17:9737:23095":{"crate_id":17,"path":["object","common","SubArchitecture"],"kind":"enum"},"2:43096:14459":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"1:4205:16277":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"1:12332:459":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"1:12333:1855":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"2:41990:10681":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"17:11269:23147":{"crate_id":17,"path":["object","read","coff","import","ImportName"],"kind":"enum"},"20:7465:9717":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"16:7111:14293":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"6:6721:9300":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_mmap_offsets_v1"],"kind":"struct"},"1:11818:3270":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"2:40508:4091":{"crate_id":2,"path":["core","io","borrowed_buf","BorrowedCursor"],"kind":"struct"},"17:15734:12946":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"20:6445:9278":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"20:7410:5587":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"2:40544:4057":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"1:8169:12138":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"5:219:15210":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"20:6503:9238":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"16:6560:13115":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"2:2521:10377":{"crate_id":2,"path":["core","ptr","with_exposed_provenance_mut"],"kind":"function"},"6:5502:8579":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_256"],"kind":"struct"},"5:4278:4037":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"1:1633:14330":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"17:14356:12542":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"2:22988:13609":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU64Inner"],"kind":"struct"},"1:1840:683":{"crate_id":1,"path":["std","env"],"kind":"module"},"17:11715:14137":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsection"],"kind":"struct"},"17:16198:13062":{"crate_id":17,"path":["object","xcoff","BlockAux32"],"kind":"struct"},"16:2592:13098":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"17:11313:14127":{"crate_id":17,"path":["object","read","coff","import","ImportObjectData"],"kind":"struct"},"2:40193:14408":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"6:570:4650":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"17:15151:12776":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"2:3311:4175":{"crate_id":2,"path":["core","ops","coroutine","Coroutine"],"kind":"trait"},"2:42007:225":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"2:40345:14415":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"17:12264:15105":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"17:10828:36521":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"2:42907:136":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"2:22999:13610":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU128Inner"],"kind":"struct"},"2:12848:21495":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"20:5327:8559":{"crate_id":20,"path":["libc","unix","linux_like","linux","seccomp_notif_sizes"],"kind":"struct"},"20:1705:5480":{"crate_id":20,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"17:15655:12925":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"1:12356:952":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"16:3614:13139":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"17:10671:36517":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"16:8136:14310":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"20:5018:8530":{"crate_id":20,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"17:15249:12798":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"20:5037:8532":{"crate_id":20,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"20:5288:8556":{"crate_id":20,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"2:46857:13975":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"17:10887:36518":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"1:12343:725":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"16:2323:22184":{"crate_id":16,"path":["gimli","common","Vendor"],"kind":"enum"},"1:10890:15335":{"crate_id":1,"path":["std","sys","pal","unix","fd","FileDesc"],"kind":"struct"},"20:472:4642":{"crate_id":20,"path":["libc","unix","utimbuf"],"kind":"struct"},"6:5277:8554":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"16:6991:36509":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"2:44506:13856":{"crate_id":2,"path":["core","time","Nanoseconds"],"kind":"struct"},"2:45898:13883":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"2:22004:16350":{"crate_id":2,"path":["core","core_simd","to_bytes","ToBytes"],"kind":"trait"},"2:22873:13605":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"2:32637:4142":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"17:16121:13044":{"crate_id":17,"path":["object","xcoff","FileAux64"],"kind":"struct"},"1:10997:15305":{"crate_id":1,"path":["std","sys","pal","unix","os","JoinPathsError"],"kind":"struct"},"17:12422:14156":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"0:670:2127":{"crate_id":0,"path":["socket2","Protocol"],"kind":"struct"},"1:8605:11076":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"17:12278:15106":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"17:15356:12830":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"20:102:2139":{"crate_id":20,"path":["libc","unix","IPPROTO_UDP"],"kind":"constant"},"2:2866:77":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"16:2768:13106":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"1:3764:2021":{"crate_id":1,"path":["std","net"],"kind":"module"},"17:13738:12430":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"11:2352:15199":{"crate_id":11,"path":["hashbrown","table","VacantEntry"],"kind":"struct"},"6:8029:10096":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"2:33467:4148":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"6:553:2896":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"2:10495:152":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"2:21608:16347":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"16:7379:36514":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"1:2069:197":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"2:40306:21562":{"crate_id":2,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"1:8512:4057":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"17:13526:12375":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"5:2245:14340":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"20:6719:9300":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","xdp_mmap_offsets_v1"],"kind":"struct"},"20:1030:3152":{"crate_id":20,"path":["libc","unix","linux_like","IPV6_MULTICAST_HOPS"],"kind":"constant"},"20:5563:8585":{"crate_id":20,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"11:2369:15209":{"crate_id":11,"path":["hashbrown","table","AbsentEntry"],"kind":"struct"},"6:5407:1228":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"6:5581:8586":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"6:6821:9309":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"1:9277:115":{"crate_id":1,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"2:4479:15246":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"1:11778:2584":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"17:12150:12271":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"20:7357:9713":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"2:23054:13615":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI64Inner"],"kind":"struct"},"17:14177:12511":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"17:13211:12340":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"20:537:3454":{"crate_id":20,"path":["libc","unix","pollfd"],"kind":"struct"},"1:9331:14037":{"crate_id":1,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"20:7600:9725":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"2:44478:14513":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"20:6595:9286":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"2:10938:238":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"17:15769:12959":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"17:10877:15044":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"2:43571:10833":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"6:1653:5475":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"11:1917:14330":{"crate_id":11,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"6:6636:9290":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"2:3358:4163":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"1:8548:4130":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"16:6398:13112":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"20:5628:8591":{"crate_id":20,"path":["libc","unix","linux_like","linux","ifconf"],"kind":"struct"},"16:5037:13166":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"2:2875:143":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"17:15836:12971":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"2:22766:33399":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"1:9427:161":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"20:5242:8551":{"crate_id":20,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"2:13486:34308":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"20:1038:3195":{"crate_id":20,"path":["libc","unix","linux_like","IPV6_V6ONLY"],"kind":"constant"},"17:12485:23243":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"6:523:4646":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"17:15596:12910":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"7:31:22017":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"16:6335:15156":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"17:14260:12528":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"1:4343:11074":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"16:8118:14307":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"5:1437:99":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"16:872:15024":{"crate_id":16,"path":["gimli","read","endian_slice","DebugLen"],"kind":"struct"},"16:7590:13128":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"17:11674:14134":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"20:5044:8533":{"crate_id":20,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"6:5370:8564":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"1:4143:16272":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"2:43726:14464":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"16:5897:13173":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"2:39492:214":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"2:44692:206":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"20:6773:9307":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","iocb"],"kind":"struct"},"20:963:3084":{"crate_id":20,"path":["libc","unix","linux_like","IP_MULTICAST_LOOP"],"kind":"constant"},"1:4914:2553":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"6:5122:8539":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"1:940:15203":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"5:7412:15237":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"6:1547:5466":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"1:2313:3265":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"2:39552:4169":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"16:2788:13107":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"2:8201:10276":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"5:3314:14331":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"2:3491:210":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"2:40394:13823":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"5:5418:36051":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"9:238:4206":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"1:10345:15327":{"crate_id":1,"path":["std","sys","pal","unix","os","Env"],"kind":"struct"},"19:0:1276":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"1:11907:29845":{"crate_id":1,"path":["std","panicking","panic_count","MustAbort"],"kind":"enum"},"17:11605:12229":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"2:9751:91":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"2:40636:14432":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"1:4093:4254":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"2:10652:21772":{"crate_id":2,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"6:4837:8510":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"2:43562:10829":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"17:11702:14136":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsectionIterator"],"kind":"struct"},"1:9409:234":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"2:10279:119":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"2:44783:14522":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"17:14545:12572":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"6:5390:8567":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"2:41854:2377":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"20:948:3126":{"crate_id":20,"path":["libc","unix","linux_like","IP_RECVTOS"],"kind":"constant"},"17:11567:15070":{"crate_id":17,"path":["object","read","elf","note","GnuProperty"],"kind":"struct"},"2:4632:15247":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"17:13766:12436":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"20:8195:10235":{"crate_id":20,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"17:14298:12532":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"16:4587:13152":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"20:7582:9724":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"1:8004:14010":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"1:4683:16280":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"6:5112:8538":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"2:44674:218":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"1:982:15197":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"2:44474:14512":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"16:3899:13143":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"17:403:15025":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"0:648:2088":{"crate_id":0,"path":["socket2","Domain"],"kind":"struct"},"5:2766:13576":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"5:5462:10813":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"20:8040:2914":{"crate_id":20,"path":["libc","unix","linux_like","linux","arch","generic","SO_OOBINLINE"],"kind":"constant"},"16:7528:14296":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"1:8593:2022":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"1:8464:4087":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"6:8247:8754":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"2:0:551":{"crate_id":2,"path":["core"],"kind":"module"},"20:5062:8535":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"2:40557:14419":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"20:5334:8560":{"crate_id":20,"path":["libc","unix","linux_like","linux","seccomp_notif"],"kind":"struct"},"3:0:493":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"2:46467:13933":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"2:22788:13593":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"18:635:12082":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"20:6736:9302":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","xdp_umem_reg_v1"],"kind":"struct"},"11:2562:13488":{"crate_id":11,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"2:40714:12080":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"20:5615:8589":{"crate_id":20,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"17:10759:12221":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"5:7382:10742":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"1:12337:1670":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"1:2308:137":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"1:676:16181":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"18:698:14114":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"2:10538:4191":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"1:4129:16271":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"16:4718:13155":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"1:11839:3271":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"2:25928:266":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"20:569:4650":{"crate_id":20,"path":["libc","unix","tms"],"kind":"struct"},"20:8037:2957":{"crate_id":20,"path":["libc","unix","linux_like","linux","arch","generic","SO_SNDBUF"],"kind":"constant"},"1:5157:16292":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"1:8619:4130":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"6:5083:8536":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"1:8482:2017":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"1:4476:3335":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"2:43774:10840":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"6:1585:5470":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"14:31:15185":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"17:4986:15038":{"crate_id":17,"path":["object","read","xcoff","relocation","XcoffRelocationIterator"],"kind":"struct"},"17:15473:12860":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"1:3022:15283":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"16:5769:14177":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"1:6841:14871":{"crate_id":1,"path":["std","sync","reentrant_lock","ReentrantLock"],"kind":"struct"},"1:3648:31369":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"16:3669:12095":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"2:42213:93":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"2:21600:16255":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"1:12336:333":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"17:15289:12808":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"1:4761:16285":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"1:9208:16317":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"1:10968:2017":{"crate_id":1,"path":["std","sys","pal","unix","io","IoSlice"],"kind":"struct"},"2:22:803":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"17:12056:12265":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"2:7967:14529":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"1:8338:15310":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"2:44188:14494":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"2:41102:4088":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"2:44055:14413":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"6:6657:9292":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"1:6362:31751":{"crate_id":1,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"17:15390:12838":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"17:12478:12284":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"20:1563:5468":{"crate_id":20,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"2:43715:14463":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"20:8326:8765":{"crate_id":20,"path":["libc","unix","linux_like","linux","canxl_frame"],"kind":"struct"},"1:668:15269":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"17:11647:14132":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"17:9886:23113":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"17:12043:15092":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"6:7359:9713":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"20:5481:8577":{"crate_id":20,"path":["libc","unix","linux_like","linux","tls_crypto_info"],"kind":"struct"},"2:41958:10348":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"18:623:36534":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"17:16050:12344":{"crate_id":17,"path":["object","xcoff","SectionHeader64"],"kind":"struct"},"16:2303:22158":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"5:2123:15220":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMutKey"],"kind":"struct"},"6:5415:8569":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"5:3670:10835":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"2:46059:13899":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"2:3114:4095":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"20:1862:2387":{"crate_id":20,"path":["libc","unix","linux_like","linux","socklen_t"],"kind":"type_alias"},"1:3831:4128":{"crate_id":1,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"17:13089:12324":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"1:754:153":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"2:40679:14436":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"17:13173:12338":{"crate_id":17,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"17:16259:12353":{"crate_id":17,"path":["object","xcoff","Rel32"],"kind":"struct"},"18:754:14123":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"17:11214:15054":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"17:13946:12462":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"20:1031:3179":{"crate_id":20,"path":["libc","unix","linux_like","IPV6_MULTICAST_LOOP"],"kind":"constant"},"2:4412:21538":{"crate_id":2,"path":["core","async_iter","async_iter","IntoAsyncIterator"],"kind":"trait"},"6:4942:8520":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"17:14968:12737":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"2:44498:14518":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"17:15569:12898":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"6:5457:8573":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"1:6670:15298":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"17:10524:15039":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"5:4083:15204":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"2:33333:4146":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"17:12808:12309":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"16:2902:22185":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"18:96:27293":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"2:44767:179":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"20:6809:9308":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"6:6714:9299":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_ring_offset_v1"],"kind":"struct"},"17:15521:12897":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"17:12671:15114":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatSectionIterator"],"kind":"struct"},"17:16151:13052":{"crate_id":17,"path":["object","xcoff","CsectAux64"],"kind":"struct"},"17:1207:15028":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"5:3036:36050":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"1:976:15196":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"1:8064:16185":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"17:12621:12291":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbol"],"kind":"struct"},"6:4800:8507":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"6:1621:5472":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"20:7304:4687":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"1:8251:4072":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"2:3342:2024":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"6:5250:3418":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"1:10756:12236":{"crate_id":1,"path":["std","sys","pal","unix","thread","Thread"],"kind":"struct"},"16:5686:13113":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"17:11812:15084":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"1:890:10742":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"16:7306:36513":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"1:9715:15306":{"crate_id":1,"path":["std","sys","pal","unix","fs","ReadDir"],"kind":"struct"},"1:5324:203":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"17:10769:36523":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"5:40:16210":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"2:39420:2860":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"5:3657:4210":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"17:1098:15027":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"2:8656:21716":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"13:229:13482":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"20:6786:11866":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"5:1577:209":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"17:10317:12195":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"6:5536:8582":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"17:15333:12822":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"2:42853:33426":{"crate_id":2,"path":["core","fmt","rt","Count"],"kind":"enum"},"16:2708:13103":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"2:2878:257":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"17:11242:15056":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"17:13899:12457":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"5:5931:15204":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"20:544:4647":{"crate_id":20,"path":["libc","unix","winsize"],"kind":"struct"},"17:15376:12836":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"17:12572:12221":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolTable"],"kind":"struct"},"17:10457:137":{"crate_id":17,"path":["object","read","any","File"],"kind":"enum"},"5:6411:16436":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"1:6187:219":{"crate_id":1,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"16:6066:14208":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"6:1517:2384":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"20:5586:8587":{"crate_id":20,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"16:2998:13134":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"16:6079:14167":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"18:563:12071":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"1:8856:4210":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"2:43756:4060":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"2:22469:16255":{"crate_id":2,"path":["core","core_simd","simd","ptr","sealed","Sealed"],"kind":"trait"},"17:14341:12538":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"1:10919:14532":{"crate_id":1,"path":["std","sys","pal","unix","fs","OpenOptions"],"kind":"struct"},"17:15368:12833":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"20:1508:2066":{"crate_id":20,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"1:11645:14054":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"2:21461:4232":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"2:46886:13978":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"6:7452:9715":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"2:2505:660":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"6:6900:9339":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"18:651:12064":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"2:44548:4185":{"crate_id":2,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"16:4856:13160":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"20:1591:5471":{"crate_id":20,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"6:1526:2385":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"16:4976:13164":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"2:22732:13588":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"17:15301:12814":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"2:32165:4101":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"20:1619:5472":{"crate_id":20,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"2:2048:10389":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"17:14012:12473":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"2:23065:13616":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI128Inner"],"kind":"struct"},"1:9149:14031":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"2:44280:14498":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"2:41968:10351":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"1:7323:31754":{"crate_id":1,"path":["std","sys","thread_local","abort_on_dtor_unwind","DtorUnwindGuard"],"kind":"struct"},"1:497:31749":{"crate_id":1,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"1:10716:4078":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stderr"],"kind":"struct"},"6:4897:8515":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"6:5191:8545":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"20:8315:8764":{"crate_id":20,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"20:484:4643":{"crate_id":20,"path":["libc","unix","timespec"],"kind":"struct"},"2:42135:96":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"17:10170:12189":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"16:7132:14294":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"17:15992:13019":{"crate_id":17,"path":["object","xcoff","AuxHeader64"],"kind":"struct"},"1:8791:4207":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"6:6915:9340":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"6:4965:8523":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"1:9223:16316":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"1:8186:14011":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"1:9136:14030":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"2:12363:21761":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"17:12584:15043":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolIterator"],"kind":"struct"},"20:6878:8422":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"17:3473:15035":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"20:8280:8759":{"crate_id":20,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"17:15222:12794":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"16:7888:14303":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"1:9392:15295":{"crate_id":1,"path":["std","sync","mutex","MappedMutexGuard"],"kind":"struct"},"6:5225:8549":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"2:42607:10909":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"17:12464:23242":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"5:7446:10742":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"1:12347:877":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"2:42890:10387":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"11:1891:15204":{"crate_id":11,"path":["hashbrown","set","Drain"],"kind":"struct"},"16:6160:22157":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"1:2462:16243":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"2:45927:13885":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"14:160:15185":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"1:5767:16300":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"2:7619:21565":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccess"],"kind":"trait"},"1:11755:16013":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"2:9428:15249":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"17:14986:12741":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"20:4862:8511":{"crate_id":20,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"2:2258:10391":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"20:1029:3169":{"crate_id":20,"path":["libc","unix","linux_like","IPV6_MULTICAST_IF"],"kind":"constant"},"1:12348:883":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"1:5839:14526":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"5:2535:13569":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"1:4661:16279":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"2:2725:3326":{"crate_id":2,"path":["core","cmp","min"],"kind":"function"},"6:6478:9280":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"6:1686:5479":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"1:1638:14331":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"2:42928:10899":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"5:4113:36051":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"18:589:12072":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"1:9179:14032":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"1:8235:2546":{"crate_id":1,"path":["std","hash","random","DefaultHasher"],"kind":"struct"},"5:2298:35946":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"16:4743:13156":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"5:7665:15239":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"2:45670:13861":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"20:5359:8563":{"crate_id":20,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"16:860:15120":{"crate_id":16,"path":["gimli","read","endian_slice","DebugBytes"],"kind":"struct"},"1:2227:128":{"crate_id":1,"path":["std","ffi","os_str","Display"],"kind":"struct"},"1:652:15268":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"2:43088:4192":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"2:43860:10844":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"2:3197:4165":{"crate_id":2,"path":["core","ops","async_function","AsyncFnMut"],"kind":"trait"},"2:44205:14495":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"1:5946:15287":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"6:5266:8553":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"1:3893:2584":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"6:5489:8578":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_128"],"kind":"struct"},"5:6430:16437":{"crate_id":5,"path":["alloc","task","LocalWake"],"kind":"trait"},"16:2636:13100":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"5:7373:10819":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"2:46621:13967":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"20:1626:5473":{"crate_id":20,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"2:3362:139":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"1:12330:405":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"20:6377:9209":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"16:7509:15171":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"20:5275:8554":{"crate_id":20,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"6:5557:8584":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"5:3406:15218":{"crate_id":5,"path":["alloc","collections","btree","set","ExtractIf"],"kind":"struct"},"2:43732:14465":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"2:40234:33395":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"17:15383:12837":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"14:165:22119":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"16:7497:13290":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"17:13252:12343":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"17:0:3911":{"crate_id":17,"path":["object"],"kind":"module"},"20:5318:8558":{"crate_id":20,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"16:8093:13346":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"17:11354:15061":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"18:515:12067":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"16:6353:13179":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"1:7980:16255":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"2:46991:13987":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"20:101:2136":{"crate_id":20,"path":["libc","unix","IPPROTO_TCP"],"kind":"constant"},"2:12625:14476":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"5:1336:15199":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"16:7741:13131":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"2:32107:4100":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"16:6574:13132":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"20:6469:9279":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"6:7330:4523":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"2:46267:13925":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"1:3287:15786":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"20:848:2094":{"crate_id":20,"path":["libc","unix","linux_like","AF_INET6"],"kind":"constant"},"20:5189:8545":{"crate_id":20,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"16:6813:14265":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"1:1616:15218":{"crate_id":1,"path":["std","collections","hash","set","ExtractIf"],"kind":"struct"},"2:22511:16427":{"crate_id":2,"path":["core","core_simd","simd","cmp","ord","SimdPartialOrd"],"kind":"trait"},"5:5726:21524":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"20:6458:2218":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"17:14212:12523":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"6:5344:8561":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_resp"],"kind":"struct"},"1:7715:31314":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"2:11214:10834":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"1:2698:4071":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"16:7769:13299":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"2:11325:10841":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"2:2641:112":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"17:15418:12845":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"17:12443:12283":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"2:22701:13587":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"5:2216:14337":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"6:5200:8546":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"5:1351:15198":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"2:2950:123":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"12:0:3907":{"crate_id":12,"path":["rustc_std_workspace_alloc"],"kind":"module"},"20:8032:2947":{"crate_id":20,"path":["libc","unix","linux_like","linux","arch","generic","SO_REUSEADDR"],"kind":"constant"},"11:490:153":{"crate_id":11,"path":["hashbrown","map","HashMap"],"kind":"struct"},"5:7724:15218":{"crate_id":5,"path":["alloc","vec","extract_if","ExtractIf"],"kind":"struct"},"17:13553:12384":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"20:552:2896":{"crate_id":20,"path":["libc","unix","linger"],"kind":"struct"},"2:42826:13836":{"crate_id":2,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"6:6664:9293":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"1:1605:4210":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"2:23528:235":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"2:44559:21805":{"crate_id":2,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"11:774:14326":{"crate_id":11,"path":["hashbrown","map","Keys"],"kind":"struct"},"18:765:27304":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"6:5352:8562":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_addfd"],"kind":"struct"},"16:4771:13157":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"1:924:15204":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"17:11841:15088":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"17:13785:12441":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"18:521:27305":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"1:4292:31241":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"14:7:15185":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"2:40478:4253":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"5:6016:71":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"11:2469:15218":{"crate_id":11,"path":["hashbrown","table","ExtractIf"],"kind":"struct"},"16:8188:15184":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"2:40613:14428":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"2:44317:14499":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"17:11102:15051":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"5:732:249":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"17:14284:12531":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"16:7052:15161":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"2:42174:86":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"11:2140:15198":{"crate_id":11,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"1:8179:14532":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"1:3290:15808":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"17:11256:14124":{"crate_id":17,"path":["object","read","coff","import","ImportFile"],"kind":"struct"},"1:1918:15280":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"6:7584:9724":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"20:8339:10271":{"crate_id":20,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"4:0:3902":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"17:16165:13055":{"crate_id":17,"path":["object","xcoff","FunAux32"],"kind":"struct"},"2:45994:13896":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"2:2882:256":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"11:1582:15205":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"2:3172:4145":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"18:735:27303":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"16:5107:13168":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"17:13024:23122":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"20:490:4644":{"crate_id":20,"path":["libc","unix","rlimit"],"kind":"struct"},"1:3055:225":{"crate_id":1,"path":["std","io","error","Result"],"kind":"type_alias"},"1:9387:186":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"11:1160:15202":{"crate_id":11,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"1:8768:4206":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"1:373:15265":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"1:6449:14525":{"crate_id":1,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"20:6676:9295":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"1:8492:4055":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"1:7936:31747":{"crate_id":1,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"17:12929:12313":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"6:4870:8512":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"2:23076:13617":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroIsizeInner"],"kind":"struct"},"17:11557:15069":{"crate_id":17,"path":["object","read","elf","note","GnuPropertyIterator"],"kind":"struct"},"1:8625:11070":{"crate_id":1,"path":["std","os","unix","net","ucred","UCred"],"kind":"struct"},"17:12900:12312":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"2:46140:13904":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"6:1559:5467":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"20:7427:5585":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"6:5212:8547":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"20:964:3025":{"crate_id":20,"path":["libc","unix","linux_like","IP_ADD_MEMBERSHIP"],"kind":"constant"},"2:32849:4141":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"2:42055:10835":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"2:12395:21496":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"17:11341:15060":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"17:16032:12343":{"crate_id":17,"path":["object","xcoff","SectionHeader32"],"kind":"struct"},"2:21726:16345":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"2:44482:14514":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"1:11415:13548":{"crate_id":1,"path":["std","sys","os_str","bytes","Buf"],"kind":"struct"},"17:12089:12268":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"16:5722:13118":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"2:43906:14474":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"6:6738:9302":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_umem_reg_v1"],"kind":"struct"},"17:11089:15050":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"9:0:3904":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"20:5000:8528":{"crate_id":20,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"16:5995:14199":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"6:4824:8509":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"2:43343:14462":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"16:5756:15121":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"2:42047:4210":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"2:3594:34510":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"5:7563:4236":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"17:13292:12345":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"9:424:22033":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"2:3581:4174":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"2:30510:10387":{"crate_id":2,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"2:45764:13871":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"20:5675:8597":{"crate_id":20,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"17:9858:23112":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"2:3735:70":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"2:10503:156":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"17:14189:12514":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"20:5248:3418":{"crate_id":20,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"17:13272:12344":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"2:21728:13585":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"1:1916:15279":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"1:7981:14009":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"17:12189:15099":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"20:4868:8512":{"crate_id":20,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"2:7735:21712":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"1:12350:870":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"1:12358:1402":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"11:710:15189":{"crate_id":11,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"2:47053:14004":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"17:13308:12346":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"6:6706:9298":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_mmap_offsets"],"kind":"struct"},"6:538:3454":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"2:42369:95":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"2:44725:14658":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"6:7467:9717":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"5:6690:10742":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"20:8263:8757":{"crate_id":20,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"6:4952:8521":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"17:14847:12691":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"16:3778:13140":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"16:5960:14196":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"6:5382:8566":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"2:23032:13613":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI16Inner"],"kind":"struct"},"2:12549:14467":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"11:673:4210":{"crate_id":11,"path":["hashbrown","map","Iter"],"kind":"struct"},"17:13015:12280":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"2:41927:10347":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"2:44470:14511":{"crate_id":2,"path":["core","str","LinesMap"],"kind":"struct"},"16:2355:13082":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"20:5434:8571":{"crate_id":20,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"17:15342:12823":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"20:7514:9719":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"1:8554:4129":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"17:15313:12815":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"13:0:3901":{"crate_id":13,"path":["std_detect"],"kind":"module"},"1:12283:14597":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"2:41969:10350":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"1:6666:14449":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"17:11537:15068":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"11:844:16196":{"crate_id":11,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"20:103:2980":{"crate_id":20,"path":["libc","unix","IPPROTO_IP"],"kind":"constant"},"1:9419:15302":{"crate_id":1,"path":["std","sync","rwlock","MappedRwLockWriteGuard"],"kind":"struct"},"17:14912:12731":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"1:4157:16274":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"16:8226:23059":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"17:9755:23093":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"17:16249:13072":{"crate_id":17,"path":["object","xcoff","DwarfAux64"],"kind":"struct"},"6:1639:5474":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"16:6948:13122":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"2:1919:1666":{"crate_id":2,"path":["core","mem","size_of"],"kind":"function"},"2:42881:73":{"crate_id":2,"path":["core","fmt","rt","Argument"],"kind":"struct"},"16:6962:13123":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"1:11308:14047":{"crate_id":1,"path":["std","sys","personality","dwarf","eh","EHContext"],"kind":"struct"},"17:12213:15101":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"20:5443:8572":{"crate_id":20,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"17:10661:15041":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"2:40666:14435":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"2:46296:13926":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"2:33746:4151":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"2:40728:14440":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"16:7604:13129":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"2:3194:4164":{"crate_id":2,"path":["core","ops","async_function","AsyncFn"],"kind":"trait"},"6:6874:9338":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"17:11877:12231":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"11:2124:14295":{"crate_id":11,"path":["hashbrown","set","Entry"],"kind":"enum"},"2:12922:21501":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"6:5436:8571":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"2:10290:10908":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"2:3116:117":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"17:14529:12570":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"6:7461:9716":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"17:12238:15103":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"11:434:36484":{"crate_id":11,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"2:40386:14417":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"struct"},"17:11743:14139":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsection"],"kind":"struct"},"20:1637:5474":{"crate_id":20,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"2:41802:4131":{"crate_id":2,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"5:6772:36051":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"6:5483:8577":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls_crypto_info"],"kind":"struct"},"1:8473:4089":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"20:5258:8552":{"crate_id":20,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"17:13999:12471":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"2:40657:14434":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"1:4395:3334":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"18:491:14106":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"17:14311:12533":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"5:5333:1670":{"crate_id":5,"path":["alloc","slice"],"kind":"module"},"20:5120:8539":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"17:12076:15094":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"5:3280:14330":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"16:2458:13092":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"2:40272:14411":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"17:15701:12939":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"2:43602:10822":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"20:5413:8569":{"crate_id":20,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"20:5663:8595":{"crate_id":20,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"17:10612:15040":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"1:4330:11073":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"5:1527:14326":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"6:4971:8524":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"1:8862:4211":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"2:43960:14477":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"20:7364:4429":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"20:5081:8536":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"2:8155:21717":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"20:8010:10095":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"5:6173:4037":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"16:4882:13161":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"1:10939:14011":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileTimes"],"kind":"struct"},"17:597:12185":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"5:3035:10797":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"17:13581:12394":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"20:99:2130":{"crate_id":20,"path":["libc","unix","IPPROTO_ICMP"],"kind":"constant"},"2:11408:10843":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"20:7030:2112":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","SOCK_DGRAM"],"kind":"constant"},"16:2418:13090":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"16:3014:22187":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"2:6681:14371":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"2:30489:2020":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"5:3288:14328":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"16:2338:13080":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"20:8051:2965":{"crate_id":20,"path":["libc","unix","linux_like","linux","arch","generic","SO_SNDTIMEO"],"kind":"constant"},"2:8694:33196":{"crate_id":2,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"2:41836:2376":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"17:12516:15108":{"crate_id":17,"path":["object","read","xcoff","file","XcoffFile"],"kind":"struct"},"11:0:3906":{"crate_id":11,"path":["hashbrown"],"kind":"module"},"20:6727:9301":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","xdp_umem_reg"],"kind":"struct"},"2:40698:14438":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"2:22966:13607":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU16Inner"],"kind":"struct"},"6:5376:8565":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"16:6634:13120":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"5:1474:4210":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"6:6447:9278":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"17:12362:14153":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"6:5472:8575":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"1:3998:3271":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"20:5234:8550":{"crate_id":20,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"5:1545:15203":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"11:787:14327":{"crate_id":11,"path":["hashbrown","map","Values"],"kind":"struct"},"2:11380:10842":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"17:12543:15111":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSection"],"kind":"struct"},"20:6696:9297":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","xdp_ring_offset"],"kind":"struct"},"1:4213:16278":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"2:44524:130":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"17:13986:12470":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"2:43328:13850":{"crate_id":2,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"2:1871:4037":{"crate_id":2,"path":["core","mem","maybe_uninit","Guard"],"kind":"struct"},"1:10326:15278":{"crate_id":1,"path":["std","sys","pal","unix","os","SplitPaths"],"kind":"struct"},"5:4447:36071":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"1:867:4210":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"2:39474:211":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"5:2318:14345":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"2:45685:13864":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"2:8647:148":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"2:47014:13988":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"17:11293:23148":{"crate_id":17,"path":["object","read","coff","import","ImportType"],"kind":"enum"},"20:5534:8582":{"crate_id":20,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"20:915:2733":{"crate_id":20,"path":["libc","unix","linux_like","MSG_OOB"],"kind":"constant"},"6:7485:9718":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"17:13844:12448":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"20:5651:8594":{"crate_id":20,"path":["libc","unix","linux_like","linux","sched_attr"],"kind":"struct"},"6:5671:8596":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"1:4872:16289":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"2:32197:114":{"crate_id":2,"path":["core","marker","ConstParamTy"],"kind":"trait"},"2:41129:14452":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"18:706:14116":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"2:21549:16348":{"crate_id":2,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"2:41096:14450":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"11:1923:14331":{"crate_id":11,"path":["hashbrown","set","Union"],"kind":"struct"},"5:7454:209":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"2:2071:10388":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"1:3332:4081":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"2:11083:4210":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"20:5398:8568":{"crate_id":20,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"6:5477:8576":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"1:12345:720":{"crate_id":1,"path":["std","f128"],"kind":"primitive"},"17:10419:12198":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"16:5802:23045":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"1:11505:31739":{"crate_id":1,"path":["std","sys","sync","once","futex","CompletionGuard"],"kind":"struct"},"2:46877:13977":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"11:1007:14295":{"crate_id":11,"path":["hashbrown","map","Entry"],"kind":"enum"},"16:5385:12188":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"20:478:3489":{"crate_id":20,"path":["libc","unix","timeval"],"kind":"struct"},"5:7655:14359":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"17:11764:14143":{"crate_id":17,"path":["object","read","elf","attributes","AttributeReader"],"kind":"struct"},"6:5546:8583":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"1:10977:31657":{"crate_id":1,"path":["std","sys","pal","unix","kernel_copy","FdHandle"],"kind":"enum"},"16:6120:23048":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"5:4318:4210":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"1:1999:16238":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"1:8529:4059":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"2:46190:13906":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"2:41073:14447":{"crate_id":2,"path":["core","iter","sources","from_coroutine","FromCoroutine"],"kind":"struct"},"2:44684:226":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"2:46666:13968":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"16:7549:14299":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"11:1910:14329":{"crate_id":11,"path":["hashbrown","set","Difference"],"kind":"struct"},"5:879:16197":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"2:12874:21492":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"2:45831:13879":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"5:7579:4239":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"2:46076:13900":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"16:2748:13105":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"2:45913:13884":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"16:4641:13154":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"6:8317:8764":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"2:32030:13487":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"2:32097:14405":{"crate_id":2,"path":["core","error","Source"],"kind":"struct"},"2:9938:34713":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"2:1984:1342":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"17:15463:12855":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"1:564:16101":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"0:595:2250":{"crate_id":0,"path":["socket2","MsgHdrMut"],"kind":"struct"},"2:21483:33135":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_elements_right","Rotate"],"kind":"struct"},"20:5374:8565":{"crate_id":20,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"2:12586:14472":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"2:42291:94":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"2:21471:33135":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_elements_left","Rotate"],"kind":"struct"},"1:9106:15315":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"1:5825:219":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"6:6532:9283":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"1:6270:31735":{"crate_id":1,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"16:7559:14300":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"18:598:36532":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"1:3428:4079":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"2:8230:129":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"1:9283:2582":{"crate_id":1,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"1:2534:2016":{"crate_id":1,"path":["std","io"],"kind":"module"},"1:8535:4060":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"20:4889:8348":{"crate_id":20,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"2:3368:141":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"5:4844:788":{"crate_id":5,"path":["alloc","fmt"],"kind":"module"},"6:6417:9275":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"6:5146:8541":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"1:4993:3273":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"6:6471:9279":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"2:4996:21556":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"17:11493:15064":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"2:11175:10846":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"17:11634:14131":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"1:8611:11068":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"17:11166:12212":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"6:7575:9723":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"16:2838:13109":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"2:43806:14470":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"9:357:22046":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"2:10235:2549":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"17:12659:15113":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdat"],"kind":"struct"},"2:4558:10960":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"16:6532:14247":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"2:42252:87":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"2:44039:14481":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"6:5665:8595":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"17:15624:12917":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"1:12118:15474":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"1:3426:4078":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"17:11467:12227":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"1:1609:10742":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"13:110:36489":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"20:6634:9290":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"11:2403:10835":{"crate_id":11,"path":["hashbrown","table","IterMut"],"kind":"struct"},"1:953:15191":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"6:1663:5476":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"17:261:15024":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"2:41652:2521":{"crate_id":2,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"2:12663:10846":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"17:10982:23129":{"crate_id":17,"path":["object","read","archive","Members"],"kind":"enum"},"20:8304:8763":{"crate_id":20,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"1:5278:15285":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"20:5281:8555":{"crate_id":20,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"2:44020:14479":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"17:13497:12366":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"16:6620:13189":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"16:8313:136":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"5:6069:16008":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"20:6517:9281":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"6:7366:4429":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"16:6246:205":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"20:4874:8513":{"crate_id":20,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"17:12127:12270":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"17:14876:12701":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"20:5634:8592":{"crate_id":20,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"1:8559:2551":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"15:288:22138":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"16:5817:14179":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"1:8343:2650":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"1:12346:895":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"20:7450:9715":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"16:3196:13079":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"2:2717:201":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"1:3519:4088":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"16:7633:36510":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"6:1490:3342":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"2:39340:4179":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"17:15678:12938":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"16:8216:14315":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"20:7982:4600":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"16:2374:13088":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"17:15058:12752":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"2:22977:13608":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU32Inner"],"kind":"struct"},"6:6746:9303":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_statistics"],"kind":"struct"},"1:4970:3333":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"17:14463:12563":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"20:5641:8593":{"crate_id":20,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"16:7098:14290":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"1:5078:16286":{"crate_id":1,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"11:364:16001":{"crate_id":11,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"2:21529:33142":{"crate_id":2,"path":["core","core_simd","swizzle","resize","Resize"],"kind":"struct"},"11:1051:15199":{"crate_id":11,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"20:1080:3257":{"crate_id":20,"path":["libc","unix","linux_like","TCP_NODELAY"],"kind":"constant"},"6:465:3047":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"2:22824:33440":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"6:7546:9721":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"16:4560:13151":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"2:46169:13905":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"2:46091:13901":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"11:123:14319":{"crate_id":11,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"2:43591:10832":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"1:1621:14328":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"6:5336:8560":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif"],"kind":"struct"},"1:11684:14549":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"2:3975:10742":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"20:5464:8574":{"crate_id":20,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"18:481:14105":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"5:1505:10742":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"6:4959:8522":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"2:43673:10837":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"1:5642:113":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"2:3182:4143":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"1:2734:4062":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"20:4895:8515":{"crate_id":20,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"2:46408:13930":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"2:5885:4037":{"crate_id":2,"path":["core","iter","adapters","filter","next_chunk","Guard"],"kind":"struct"},"2:43125:4206":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"17:12647:15112":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatIterator"],"kind":"struct"},"17:2234:15033":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"6:473:4642":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"2:40223:14409":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"2:39602:13692":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"6:8300:8762":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"6:6689:9296":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sockaddr_xdp"],"kind":"struct"},"2:6172:14370":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"1:5247:15285":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"17:14235:12524":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"11:800:15204":{"crate_id":11,"path":["hashbrown","map","Drain"],"kind":"struct"},"20:8027:10096":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"17:12851:14160":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"1:8644:14866":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"6:1485:3339":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"1:1627:14329":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"5:7432:35871":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"2:43702:13852":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"1:9400:4037":{"crate_id":1,"path":["std","sync","poison","Guard"],"kind":"struct"},"6:5296:8557":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"6:8328:8765":{"crate_id":6,"path":["libc","unix","linux_like","linux","canxl_frame"],"kind":"struct"},"17:13187:12339":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"1:12352:1815":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"20:6407:9274":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"2:21716:16255":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"1:898:14326":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"5:7104:36087":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"1:9708:137":{"crate_id":1,"path":["std","sys","pal","unix","fs","File"],"kind":"struct"},"17:11583:15075":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"16:4802:13158":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"16:4830:13159":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"17:11510:15066":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"2:30240:16258":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"5:6609:36051":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"17:11898:12233":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"6:1535:5465":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"5:4432:264":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"17:12863:12311":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"17:12597:12290":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolTable"],"kind":"struct"},"18:548:152":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"2:3167:4140":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"6:4876:8513":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"2:6881:14376":{"crate_id":2,"path":["core","iter","adapters","map_windows","Buffer"],"kind":"struct"},"20:6489:9237":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"11:2569:4213":{"crate_id":11,"path":["hashbrown","TryReserveError"],"kind":"enum"},"2:46938:13982":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"17:12695:15116":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegment"],"kind":"struct"},"16:2660:13101":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"16:7711:209":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"2:46544:13966":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"2:3163:4099":{"crate_id":2,"path":["core","marker","FnPtr"],"kind":"trait"},"6:6491:9237":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"9:392:22032":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"6:8306:8763":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"6:5677:8597":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"17:14131:12487":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"11:687:10835":{"crate_id":11,"path":["hashbrown","map","IterMut"],"kind":"struct"},"18:538:12069":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"20:5405:1228":{"crate_id":20,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"6:8288:8760":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"16:6300:15145":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"17:11865:15090":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"11:875:15196":{"crate_id":11,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"2:39775:21569":{"crate_id":2,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"20:6560:9285":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"1:10596:15315":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","CommandArgs"],"kind":"struct"},"17:15197:12789":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"1:12338:1704":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"1:2476:16246":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"1:5627:14865":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"17:11621:14129":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"15:394:22149":{"crate_id":15,"path":["addr2line","DebugFile"],"kind":"enum"},"2:7514:10750":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"2:22159:16346":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"5:4248:4037":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"17:15814:12965":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"1:5101:16288":{"crate_id":1,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"11:700:10742":{"crate_id":11,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"5:741:118":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"2:13798:10818":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"6:5236:8550":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"11:1087:36482":{"crate_id":11,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"1:11217:31653":{"crate_id":1,"path":["std","sys","pal","unix","thread","cgroups","Cgroup"],"kind":"enum"},"1:9173:10742":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"6:5466:8574":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"6:6698:9297":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_ring_offset"],"kind":"struct"},"1:7352:27776":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"20:7444:9714":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"1:3330:4080":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"9:330:13528":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"20:1661:5476":{"crate_id":20,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"2:10296:10906":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"17:11419:12221":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"5:3038:13573":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"20:7544:9721":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"2:40535:15258":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"2:40689:14437":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"20:8039:2889":{"crate_id":20,"path":["libc","unix","linux_like","linux","arch","generic","SO_KEEPALIVE"],"kind":"constant"},"17:11915:23217":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"6:4992:8527":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"5:2112:15219":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"2:22157:16255":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"20:577:4651":{"crate_id":20,"path":["libc","unix","servent"],"kind":"struct"},"20:1578:5469":{"crate_id":20,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"5:1566:15190":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"2:40412:4237":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"2:1947:659":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"20:1058:3207":{"crate_id":20,"path":["libc","unix","linux_like","IPV6_RECVTCLASS"],"kind":"constant"},"6:1496:3516":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"2:33061:4144":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"2:41918:10742":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"17:9781:23111":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"20:936:3116":{"crate_id":20,"path":["libc","unix","linux_like","IP_TOS"],"kind":"constant"},"2:22295:16431":{"crate_id":2,"path":["core","core_simd","simd","num","int","SimdInt"],"kind":"trait"},"18:581:4232":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"1:8259:4074":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"18:613:36531":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"5:6563:15204":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"2:10735:31744":{"crate_id":2,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"5:6931:21524":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"17:14933:12736":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"17:14091:12483":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"17:12107:12221":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"1:5832:14525":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"1:9123:14029":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"16:2728:13104":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"20:0:988":{"crate_id":20,"path":["libc"],"kind":"module"},"17:13959:12465":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"17:14402:12548":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"20:558:4648":{"crate_id":20,"path":["libc","unix","sigval"],"kind":"struct"},"18:531:14107":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"2:42330:88":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"17:14414:12550":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"16:7397:36512":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"17:13855:12449":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"16:6665:23051":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"16:6433:14240":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"17:11042:15047":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"2:44048:14482":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"5:7462:14355":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"2:3554:4170":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"1:9344:27487":{"crate_id":1,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"8:0:3903":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"2:3252:4154":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"2:44352:14504":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"0:554:2171":{"crate_id":0,"path":["socket2","MaybeUninitSlice"],"kind":"struct"},"1:9323:15323":{"crate_id":1,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"1:9196:14033":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"1:9545:15279":{"crate_id":1,"path":["std","sys","pal","unix","args","Args"],"kind":"struct"},"11:328:14323":{"crate_id":11,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"2:11252:10847":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"1:9238:16318":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"17:14723:12588":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"5:1180:16005":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"6:6880:8422":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"20:1515:2384":{"crate_id":20,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"6:1723:5481":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"11:883:15197":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"6:1692:3393":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"2:46961:13985":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"5:289:36051":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"2:4358:15245":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"16:5831:14182":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"6:7446:9714":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"1:880:10835":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"2:2622:103":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"20:8286:8760":{"crate_id":20,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"20:968:3051":{"crate_id":20,"path":["libc","unix","linux_like","IP_ADD_SOURCE_MEMBERSHIP"],"kind":"constant"},"1:4322:11072":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"11:1728:155":{"crate_id":11,"path":["hashbrown","set","HashSet"],"kind":"struct"},"6:6409:9274":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"16:8202:13133":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"2:44138:21507":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"2:44502:14519":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"5:7490:10742":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"16:4468:13148":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"1:11260:14046":{"crate_id":1,"path":["std","sys","pal","unix","time","Timespec"],"kind":"struct"},"11:1676:15471":{"crate_id":11,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"2:43641:10821":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"2:39582:4171":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"2:43502:15261":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"2:3397:4167":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"1:959:16196":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"1:10347:15326":{"crate_id":1,"path":["std","sys","pal","unix","os","EnvStrDebug"],"kind":"struct"},"1:4099:3330":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"1:3582:2548":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"1:5980:15292":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"1:5764:4378":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"2:46207:13907":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"17:15190:12787":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"17:15635:12922":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"6:4787:8506":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"5:5466:10814":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"2:22780:13592":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"17:10905:15045":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"20:6540:9284":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"5:4158:10835":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"2:40873:14444":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"16:7473:13289":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"16:6749:14263":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"2:22866:14398":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"1:1085:15198":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"1:6025:15293":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"2:21500:33128":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"6:8271:8758":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"14:0:3908":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"1:4191:16275":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"2:41121:13824":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"2:4393:21476":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"2:44174:14491":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"16:6047:15123":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"17:10018:23097":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"16:5742:14172":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"17:11128:12178":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"2:40283:14412":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"2:21517:33131":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"11:102:14318":{"crate_id":11,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"1:6560:185":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"6:4891:8348":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"17:12768:23098":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"17:12353:14152":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"1:2773:4073":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"6:6435:9276":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"20:516:3340":{"crate_id":20,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"16:5846:14184":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"2:44806:14523":{"crate_id":2,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"20:8031:2685":{"crate_id":20,"path":["libc","unix","linux_like","linux","arch","generic","SOL_SOCKET"],"kind":"constant"},"17:13832:12446":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"1:8806:4208":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"20:8245:8754":{"crate_id":20,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"2:41814:2022":{"crate_id":2,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"17:15456:12853":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"2:3569:145":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"20:5100:8537":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"2:42865:13322":{"crate_id":2,"path":["core","fmt","rt","Flag"],"kind":"enum"},"2:40187:14407":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"16:4913:13162":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"20:8050:2936":{"crate_id":20,"path":["libc","unix","linux_like","linux","arch","generic","SO_RCVTIMEO"],"kind":"constant"},"6:8282:8759":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"1:12344:741":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"1:11914:14552":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"17:10092:23118":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"17:14246:12526":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"20:4969:8524":{"crate_id":20,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"1:6910:232":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"2:43742:4059":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"11:2151:15199":{"crate_id":11,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"17:15931:12339":{"crate_id":17,"path":["object","xcoff","FileHeader32"],"kind":"struct"},"6:6379:9209":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"5:7482:10742":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"5:1839:15218":{"crate_id":5,"path":["alloc","collections","btree","map","ExtractIf"],"kind":"struct"},"2:44383:14510":{"crate_id":2,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"1:11618:15339":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"2:4785:4105":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"2:46711:13969":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"17:12388:14154":{"crate_id":17,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"11:1603:15206":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"6:5174:8543":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"2:45732:13869":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"1:9157:4210":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"16:6504:14245":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"2:41696:13832":{"crate_id":2,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"5:0:307":{"crate_id":5,"path":["alloc"],"kind":"module"},"5:7631:15238":{"crate_id":5,"path":["alloc","rc","UniqueRc"],"kind":"struct"},"20:5158:8542":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"6:7348:9712":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"2:46769:13971":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"2:43663:10839":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"2:21602:16344":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"16:5700:13116":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"6:1510:2066":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"20:6415:9275":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"6:532:3387":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"2:43581:10831":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"2:38761:4161":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"6:5046:8533":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"1:1612:15204":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"20:962:3094":{"crate_id":20,"path":["libc","unix","linux_like","IP_MULTICAST_TTL"],"kind":"constant"},"2:3002:15243":{"crate_id":2,"path":["core","error","Request"],"kind":"struct"},"2:40595:14425":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"6:6811:9308":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"1:12351:1833":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"16:5415:13171":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"2:46009:13897":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"2:8338:177":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"1:8174:15306":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"17:12724:23119":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"17:15039:12751":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"2:46740:13970":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"0:692:2181":{"crate_id":0,"path":["socket2","TcpKeepalive"],"kind":"struct"},"17:15426:12847":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"1:4912:3274":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"1:8333:15309":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"17:10044:23117":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"18:643:12064":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"1:12331:1159":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"17:14111:12486":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"17:14560:12576":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"20:6872:9338":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"16:7168:14037":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"1:11225:13856":{"crate_id":1,"path":["std","sys","pal","unix","time","Nanoseconds"],"kind":"struct"},"17:10399:4059":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"17:13774:12438":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"2:40566:14421":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"16:7618:13292":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"17:15102:12765":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"1:10986:31655":{"crate_id":1,"path":["std","sys","pal","unix","kernel_copy","SpliceMode"],"kind":"enum"},"20:1583:5470":{"crate_id":20,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"17:11324:15057":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"2:41087:14449":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"2:46222:13908":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"17:10185:12190":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"16:2478:13093":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"1:8050:16184":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"20:5513:8580":{"crate_id":20,"path":["libc","unix","linux_like","linux","tls12_crypto_info_chacha20_poly1305"],"kind":"struct"},"9:502:13551":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"5:3644:181":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"2:44010:4056":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"20:4957:8522":{"crate_id":20,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"17:14855:12694":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"17:15206:12790":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"16:2684:13102":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"17:12328:14144":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"17:12300:23241":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"1:10930:14542":{"crate_id":1,"path":["std","sys","pal","unix","fs","FilePermissions"],"kind":"struct"},"1:9259:14036":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"1:8600:11075":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"17:9984:23116":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"17:13473:12362":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"17:10915:36522":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"20:5304:3771":{"crate_id":20,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"1:3476:4065":{"crate_id":1,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"6:5617:8589":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"1:4151:16273":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"17:10954:23128":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"20:965:3030":{"crate_id":20,"path":["libc","unix","linux_like","IP_DROP_MEMBERSHIP"],"kind":"constant"},"9:53:22049":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"2:22026:13586":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"6:5630:8591":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifconf"],"kind":"struct"},"1:5611:14864":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"5:4934:216":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"0:0:2260":{"crate_id":0,"path":["socket2"],"kind":"module"},"5:2098:4074":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"17:10818:15043":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"5:5861:250":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"2:10078:10898":{"crate_id":2,"path":["core","fmt","builders","FormatterFn"],"kind":"struct"},"2:44253:14497":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"5:7607:4240":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"17:15410:12844":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"20:1669:5477":{"crate_id":20,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"6:7984:4600":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"5:3254:14329":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"1:3657:4047":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"17:14994:12742":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"6:559:4648":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"1:9737:127":{"crate_id":1,"path":["std","sys","pal","unix","fs","DirBuilder"],"kind":"struct"},"2:22595:14390":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"1:6394:15294":{"crate_id":1,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"2:44159:14485":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"2:39512:213":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"20:8043:2897":{"crate_id":20,"path":["libc","unix","linux_like","linux","arch","generic","SO_LINGER"],"kind":"constant"},"2:44733:13857":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"1:1477:155":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"2:45817:13878":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"1:11659:14547":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"1:1857:15277":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"1:8070:16228":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"2:34265:4155":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"2:40460:4242":{"crate_id":2,"path":["core","ffi","c_char"],"kind":"type_alias"},"2:43628:10820":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"20:8033:2686":{"crate_id":20,"path":["libc","unix","linux_like","linux","arch","generic","SO_TYPE"],"kind":"constant"},"5:7642:242":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"11:1025:15198":{"crate_id":11,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"16:3029:12090":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"0:575:2213":{"crate_id":0,"path":["socket2","MsgHdr"],"kind":"struct"},"16:8301:13357":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"6:5014:8529":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"5:935:16198":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"1:3293:15809":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"17:16212:13066":{"crate_id":17,"path":["object","xcoff","BlockAux64"],"kind":"struct"},"16:5914:14189":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"17:16187:13061":{"crate_id":17,"path":["object","xcoff","ExpAux"],"kind":"struct"},"16:867:15023":{"crate_id":16,"path":["gimli","read","endian_slice","DebugByte"],"kind":"struct"},"20:1557:5467":{"crate_id":20,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"2:41111:14451":{"crate_id":2,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"1:4810:11954":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"function"},"5:2206:16165":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"1:6171:14525":{"crate_id":1,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"1:10219:2074":{"crate_id":1,"path":["std","sys","pal","unix","net","Socket"],"kind":"struct"},"2:11893:10827":{"crate_id":2,"path":["core","slice","iter","ChunkBy"],"kind":"struct"},"2:44490:14516":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"15:0:3909":{"crate_id":15,"path":["addr2line"],"kind":"module"},"20:7483:9718":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"17:15176:12784":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"16:6927:13228":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"2:2137:188":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"2:41080:14448":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"1:9404:233":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"1:6787:16312":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"17:13412:12358":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"20:8269:8758":{"crate_id":20,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"2:38072:4158":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"20:1007:2142":{"crate_id":20,"path":["libc","unix","linux_like","IPPROTO_MPTCP"],"kind":"constant"},"16:5075:13167":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"17:10068:23100":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"17:13399:12356":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"6:1680:5478":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"2:12609:14473":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"17:10350:12196":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"2:44030:14480":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"17:12711:136":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"2:2680:133":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"20:5144:8541":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"20:1032:3141":{"crate_id":20,"path":["libc","unix","linux_like","IPV6_ADD_MEMBERSHIP"],"kind":"constant"},"20:7573:9723":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"5:3218:100":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"20:4983:8526":{"crate_id":20,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"17:14025:12474":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"2:30868:195":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"2:40299:14413":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"5:839:15212":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"2:12808:4214":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"2:30495:4120":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"6:5588:8587":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"2:40249:13822":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"16:5006:13165":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"6:578:4651":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"1:11083:31752":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"17:12030:15091":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"2:43824:14471":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"17:4821:15037":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolIterator"],"kind":"struct"},"2:44757:15262":{"crate_id":2,"path":["core","task","wake","ContextBuilder"],"kind":"struct"},"1:4806:11950":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"function"},"2:12854:15249":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"2:2845:16255":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"17:15126:12767":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"6:4985:8526":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"16:4352:13146":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"2:40515:10820":{"crate_id":2,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"1:2628:4070":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"2:22648:14391":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"17:14449:12562":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"17:10137:23094":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"17:14386:12545":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"1:9445:4181":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"17:15168:12781":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"9:447:22031":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"2:40488:4252":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"2:3126:2018":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"20:919:2168":{"crate_id":20,"path":["libc","unix","linux_like","MSG_TRUNC"],"kind":"constant"},"17:13922:12461":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"2:40450:4059":{"crate_id":2,"path":["core","ffi","c_str","Bytes"],"kind":"struct"},"17:14489:12565":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"17:14599:12586":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"6:6542:9284":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"20:5526:8581":{"crate_id":20,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"6:1707:5480":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"16:7799:13119":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"2:8192:164":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"11:837:15191":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"1:949:15190":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"17:13594:12395":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"17:11595:12228":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"16:7823:23057":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"2:40262:14410":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"2:45852:13880":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"2:42410:90":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"17:15822:12968":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"18:670:15022":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"1:2310:15281":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"1:8873:4212":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"17:15010:12743":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"17:16093:13037":{"crate_id":17,"path":["object","xcoff","Symbol64"],"kind":"struct"},"2:22371:16433":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr"],"kind":"trait"},"2:40438:4238":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"20:5012:8529":{"crate_id":20,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"20:6648:9291":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"2:10284:128":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"1:1970:14859":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"6:5320:8558":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"20:5132:8540":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"1:7877:15342":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"5:7740:14661":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"20:7535:9720":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"16:6543:14248":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"20:6522:9282":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"5:952:4210":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"20:1533:5465":{"crate_id":20,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"2:44365:14508":{"crate_id":2,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"20:6898:9339":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"2:40575:14422":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"2:2519:10376":{"crate_id":2,"path":["core","ptr","with_exposed_provenance"],"kind":"function"},"20:8298:8762":{"crate_id":20,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"20:6704:9298":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","xdp_mmap_offsets"],"kind":"struct"},"2:46912:13980":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"5:4477:4037":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"2:43878:10842":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"2:32106:236":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"1:970:15194":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"2:46798:13972":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"20:1524:2385":{"crate_id":20,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"17:15760:12955":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"2:41910:10835":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"16:3475:13138":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"2:3842:15204":{"crate_id":2,"path":["core","array","drain","Drain"],"kind":"struct"},"20:5029:8531":{"crate_id":20,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"20:5475:8576":{"crate_id":20,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"20:7346:9712":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"20:5500:8579":{"crate_id":20,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_256"],"kind":"struct"},"2:10750:33452":{"crate_id":2,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"2:4637:15248":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"2:22385:10376":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_exposed_provenance"],"kind":"function"},"16:5367:23044":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"11:1903:14328":{"crate_id":11,"path":["hashbrown","set","Intersection"],"kind":"struct"},"20:5264:8553":{"crate_id":20,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"2:38017:4157":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"1:911:14327":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"20:4977:8525":{"crate_id":20,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"20:496:4645":{"crate_id":20,"path":["libc","unix","rusage"],"kind":"struct"},"1:945:15189":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"6:8341:10271":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"16:6412:23049":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCacheStrategy"],"kind":"enum"},"1:3057:136":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"5:3293:35875":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"11:2326:15198":{"crate_id":11,"path":["hashbrown","table","OccupiedEntry"],"kind":"struct"},"20:1690:3393":{"crate_id":20,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"16:6494:14244":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"1:11020:27469":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","ProgramKind"],"kind":"enum"},"1:11278:161":{"crate_id":1,"path":["std","sys","pal","unix","time","Instant"],"kind":"struct"},"2:41636:2515":{"crate_id":2,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"17:10284:12194":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"20:6655:9292":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"17:437:12145":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"20:6913:9340":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"5:3750:36051":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"1:10413:14879":{"crate_id":1,"path":["std","sys","pal","unix","pipe","AnonPipe"],"kind":"struct"},"2:42488:14858":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"20:5555:8584":{"crate_id":20,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"2:32108:243":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"2:10294:205":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"2:38182:4160":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"17:2203:15030":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"1:12355:1809":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"17:13116:12327":{"crate_id":17,"path":["object","archive","AixHeader"],"kind":"struct"},"2:32072:15256":{"crate_id":2,"path":["core","error","private","Internal"],"kind":"struct"},"2:10292:10909":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"2:32195:4102":{"crate_id":2,"path":["core","marker","Tuple"],"kind":"trait"},"20:7029:2108":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","SOCK_STREAM"],"kind":"constant"},"17:11730:14138":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsectionIterator"],"kind":"struct"},"16:542:14165":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"14:202:21509":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"2:44073:14412":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"16:7910:23058":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"2:2961:136":{"crate_id":2,"path":["core","error","Error"],"kind":"trait"},"2:45956:13894":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"6:545:4647":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"2:10234:225":{"crate_id":2,"path":["core","fmt","Result"],"kind":"type_alias"},"1:12315:27474":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"17:11788:15080":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"17:513:15026":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"2:5270:963":{"crate_id":2,"path":["core","iter"],"kind":"module"},"16:150:14163":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"18:680:14110":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"2:33400:4150":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"2:39437:212":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"17:13325:12347":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"17:12175:15095":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"16:0:3910":{"crate_id":16,"path":["gimli"],"kind":"module"},"2:33919:4152":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"17:11853:15089":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"2:36141:4156":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"1:12354:1827":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"16:6849:14276":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"20:7328:4523":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"2:2062:13580":{"crate_id":2,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"6:8197:10235":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"11:1066:22112":{"crate_id":11,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"16:8175:15181":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"17:13437:12360":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"2:40645:14433":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"17:12342:14148":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"20:838:2097":{"crate_id":20,"path":["libc","unix","linux_like","AF_UNIX"],"kind":"constant"},"17:13606:12398":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"2:10298:10907":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"18:507:12064":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"2:41780:33407":{"crate_id":2,"path":["core","net","parser","AddrKind"],"kind":"enum"},"1:6784:14869":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"17:15266:12805":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"6:6441:9277":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"17:11773:12295":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"5:7056:263":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"17:15608:12913":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"20:5294:8557":{"crate_id":20,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"20:6627:9289":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"1:2072:196":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"20:6662:9293":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"2:39452:209":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"2:42072:195":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"20:1488:3342":{"crate_id":20,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"9:178:22098":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"16:6466:13186":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"2:45884:13882":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"1:5577:15286":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"2:6876:14378":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindowsInner"],"kind":"struct"},"5:1164:35964":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"2:41668:4127":{"crate_id":2,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"17:13972:12238":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"1:934:15218":{"crate_id":1,"path":["std","collections","hash","map","ExtractIf"],"kind":"struct"},"16:5927:14190":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"6:5290:8556":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"17:10251:12193":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"6:5643:8593":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"17:15078:12760":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"17:11227:15055":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"6:6505:9238":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"16:2854:13110":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"1:8196:14533":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"6:8265:8757":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"11:2443:15204":{"crate_id":11,"path":["hashbrown","table","Drain"],"kind":"struct"},"17:14516:12569":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"20:969:3056":{"crate_id":20,"path":["libc","unix","linux_like","IP_DROP_SOURCE_MEMBERSHIP"],"kind":"constant"},"17:3264:15034":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"6:7516:9719":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"2:42600:10908":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"1:9112:198":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"6:485:4643":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"17:12225:15102":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"2:22955:13606":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU8Inner"],"kind":"struct"},"2:43553:10830":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"5:1735:36051":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"20:6687:9296":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","sockaddr_xdp"],"kind":"struct"},"16:6588:14249":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"2:13663:115":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"14:220:13434":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"17:13485:12365":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"16:6456:23050":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"1:4550:3336":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"1:12353:1821":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"20:6668:9294":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"2:2846:21568":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"11:2231:14332":{"crate_id":11,"path":["hashbrown","table","HashTable"],"kind":"struct"},"11:299:14320":{"crate_id":11,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"16:7755:13121":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"2:22897:16270":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"17:13375:12352":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"16:6872:14277":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"20:4809:8508":{"crate_id":20,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"20:6607:9287":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"5:1365:15202":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"2:44746:34433":{"crate_id":2,"path":["core","task","wake","ExtData"],"kind":"enum"},"17:11688:14135":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSection"],"kind":"struct"},"1:619:16178":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"1:1855:15276":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"20:5179:8544":{"crate_id":20,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"20:7459:9716":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"6:1593:5471":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"2:10928:16255":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"17:10218:12192":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"16:6385:13182":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"17:15778:12961":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"20:5223:8549":{"crate_id":20,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"6:586:4652":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"6:7561:9722":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"20:5198:8546":{"crate_id":20,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"5:7537:4213":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"1:8224:127":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"17:13455:12361":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"20:916:2765":{"crate_id":20,"path":["libc","unix","linux_like","MSG_PEEK"],"kind":"constant"},"6:1671:5477":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"17:10622:36524":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"20:4907:8516":{"crate_id":20,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"17:14038:12476":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"17:14271:12529":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"1:9272:15317":{"crate_id":1,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"2:5169:423":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"1:6855:15299":{"crate_id":1,"path":["std","sync","reentrant_lock","ReentrantLockGuard"],"kind":"struct"},"1:8522:4058":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"16:3842:13142":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"16:7061:13238":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"6:6460:2218":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"16:7695:13296":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"16:2878:13111":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"17:13814:12445":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"20:4922:8518":{"crate_id":20,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"16:5400:12189":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"6:1580:5469":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"16:6782:23052":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"5:7592:21750":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"6:5181:8544":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"17:16138:13046":{"crate_id":17,"path":["object","xcoff","CsectAux32"],"kind":"struct"},"10:44:13491":{"crate_id":10,"path":["adler","Adler32"],"kind":"struct"},"16:2394:13089":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"2:30521:33413":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum"],"kind":"enum"},"2:43143:14461":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"17:15720:12944":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"2:33601:4149":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"6:5134:8540":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"17:13797:12442":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"2:5190:34301":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"20:5421:8570":{"crate_id":20,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"16:6427:15159":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"20:937:3104":{"crate_id":20,"path":["libc","unix","linux_like","IP_TTL"],"kind":"constant"},"2:11394:10845":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"2:45785:13876":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"17:14752:12608":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"6:8259:8756":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"}},"external_crates":{"20":{"name":"libc","html_root_url":null},"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":29}