{"root":"0:0:1806","crate_version":"0.5.0","includes_private":false,"index":{"0:513":{"id":"0:513","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[300,0],"end":[325,1]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"Protocol","id":"0:603:1730","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:514:1732","0:515:1735","0:516:1738","0:517:1741","0:518:1744"],"negative":false,"synthetic":false,"blanket_impl":null}},"a:2:2715:3673-0:261:1678":{"id":"a:2:2715:3673-0:261:1678","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'s","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2715:3673","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"SockRef","id":"0:261:1678","args":{"angle_bracketed":{"args":[{"lifetime":"'s"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:213:2676":{"id":"0:213:2676","crate_id":0,"name":"set_multicast_if_v6","span":{"filename":"src/socket.rs","begin":[1622,4],"end":[1631,5]},"visibility":"public","docs":"Set the value of the `IPV6_MULTICAST_IF` option for this socket.\n\nSpecifies the interface to use for routing multicast packets. Unlike\nipv4, this is generally required in ipv6 contexts where network routing\nprefixes may overlap.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["interface",{"kind":"primitive","inner":"u32"}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:2907:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:199:2624":{"id":"0:199:2624","crate_id":0,"name":"set_tos","span":{"filename":"src/socket.rs","begin":[1446,4],"end":[1448,5]},"visibility":"public","docs":"Set the value of the `IP_TOS` option for this socket.\n\nThis value sets the type-of-service field that is used in every packet\nsent from this socket.\n\nNOTE: <https://docs.microsoft.com/en-us/windows/win32/winsock/ipproto-ip-socket-options>\ndocuments that not all versions of windows support `IP_TOS`.","links":{},"attrs":["#[cfg(not(any(target_os = \"fuchsia\", target_os = \"redox\", target_os =\n\"solaris\", target_os = \"illumos\",)))]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["tos",{"kind":"primitive","inner":"u32"}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:2907:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:261:1678":{"id":"0:261:1678","crate_id":0,"name":"SockRef","span":{"filename":"src/sockref.rs","begin":[61,0],"end":[69,1]},"visibility":"public","docs":"A reference to a [`Socket`] that can be used to configure socket types other\nthan the `Socket` type itself.\n\nThis allows for example a [`TcpStream`], found in the standard library, to\nbe configured using all the additional methods found in the [`Socket`] API.\n\n`SockRef` can be created from any socket type that implements [`AsFd`]\n(Unix) or [`AsSocket`] (Windows) using the [`From`] implementation.\n\n[`TcpStream`]: std::net::TcpStream\n[`AsFd`]: https://doc.rust-lang.org/stable/std/os/unix/io/trait.AsFd.html\n[`AsSocket`]: https://doc.rust-lang.org/stable/std/os/windows/io/trait.AsSocket.html\n\n# Examples\n\nBelow is an example of converting a [`TcpStream`] into a [`SockRef`].\n\n```\nuse std::net::{TcpStream, SocketAddr};\n\nuse socket2::SockRef;\n\n# fn main() -> Result<(), Box<dyn std::error::Error>> {\n// Create `TcpStream` from the standard library.\nlet address: SocketAddr = \"127.0.0.1:1234\".parse()?;\n# let b1 = std::sync::Arc::new(std::sync::Barrier::new(2));\n# let b2 = b1.clone();\n# let handle = std::thread::spawn(move || {\n#    let listener = std::net::TcpListener::bind(address).unwrap();\n#    b2.wait();\n#    let (stream, _) = listener.accept().unwrap();\n#    std::thread::sleep(std::time::Duration::from_millis(10));\n#    drop(stream);\n# });\n# b1.wait();\nlet stream = TcpStream::connect(address)?;\n\n// Create a `SockRef`erence to the stream.\nlet socket_ref = SockRef::from(&stream);\n// Use `Socket::set_nodelay` on the stream.\nsocket_ref.set_nodelay(true)?;\ndrop(socket_ref);\n\nassert_eq!(stream.nodelay()?, true);\n# handle.join().unwrap();\n# Ok(())\n# }\n```","links":{"std::net::TcpStream":"1:4019:2115","`SockRef`":"0:261:1678","`From`":"2:2483:132","`Socket`":"0:107:1677"},"attrs":[],"deprecation":null,"kind":"struct","inner":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'s","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"impls":["a:2:2651:217-0:261:1678","a:2:7786:9761-0:261:1678","a:2:2715:3673-0:261:1678","a:2:2665:225-0:261:1678","a:2:7787:9760-0:261:1678","b:2:2237-0:261:1678","b:2:2510-0:261:1678","b:2:2234-0:261:1678","b:2:2516-0:261:1678","b:2:2506-0:261:1678","b:2:3306-0:261:1678","b:2:2521-0:261:1678","0:265","0:269","0:273"]}},"0:153":{"id":"0:153","crate_id":0,"name":null,"span":{"filename":"src/socket.rs","begin":[808,0],"end":[1052,1]},"visibility":{"restricted":{"parent":"0:73:1640","path":"::socket"}},"docs":"Socket options get/set using `SOL_SOCKET`.\n\nAdditional documentation can be found in documentation of the OS.\n* Linux: <https://man7.org/linux/man-pages/man7/socket.7.html>\n* Windows: <https://docs.microsoft.com/en-us/windows/win32/winsock/sol-socket-socket-options>","links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"Socket","id":"0:107:1677","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:154:2394","0:156:2399","0:157:2404","0:158:2412","0:160:2416","0:161:2420","0:162:2432","0:163:2437","0:165:2445","0:166:2449","0:168:2454","0:169:2458","0:170:2464","0:171:2470","0:173:2477","0:174:2481","0:176:2486","0:177:2489","0:178:2493"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:524:1761":{"id":"0:524:1761","crate_id":0,"name":"is_truncated","span":{"filename":"src/lib.rs","begin":[356,4],"end":[358,5]},"visibility":"public","docs":"Check if the message contains a truncated datagram.\n\nThis flag is only used for datagram-based sockets,\nnot for stream sockets.\n\nOn Unix this corresponds to the `MSG_TRUNC` flag.\nOn Windows this corresponds to the `WSAEMSGSIZE` error code.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:124:2207":{"id":"0:124:2207","crate_id":0,"name":"local_addr","span":{"filename":"src/socket.rs","begin":[319,4],"end":[321,5]},"visibility":"public","docs":"Returns the socket address of the local half of this socket.\n\nThis function directly corresponds to the `getsockname(2)` function on\nWindows and Unix.\n\nAdditional documentation can be found in manual of the OS:\n\n * DragonFly BSD: <https://man.dragonflybsd.org/?command=getsockname&section=2>\n * FreeBSD: <https://www.freebsd.org/cgi/man.cgi?query=getsockname&sektion=2>\n * Linux: <https://man7.org/linux/man-pages/man2/getsockname.2.html>\n * macOS: <https://developer.apple.com/library/archive/documentation/System/Conceptual/ManPages_iPhoneOS/man2/getsockname.2.html> (archived, actually for iOS)\n * NetBSD: <https://man.netbsd.org/getsockname.2>\n * OpenBSD: <https://man.openbsd.org/getsockname.2>\n * iOS: <https://developer.apple.com/library/archive/documentation/System/Conceptual/ManPages_iPhoneOS/man2/getsockname.2.html> (archived)\n * illumos: <https://illumos.org/man/3SOCKET/getsockname>\n * Windows: <https://docs.microsoft.com/en-us/windows/win32/api/winsock2/nf-winsock2-getsockname>\n\n# Notes\n\nDepending on the OS this may return an error if the socket is not\n[bound].\n\n[bound]: Socket::bind","links":{"Socket::bind":"0:117:2152"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:2907:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"SockAddr","id":"0:547:1676","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5302:35374":{"id":"5:5302:35374","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`String`":"5:7157:221","`Box<str>`":"5:288:9688"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:288:9688","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:6908:10211","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7157:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:207:2656":{"id":"0:207:2656","crate_id":0,"name":"leave_multicast_v6","span":{"filename":"src/socket.rs","begin":[1561,4],"end":[1575,5]},"visibility":"public","docs":"Leave a multicast group using `IPV6_DROP_MEMBERSHIP` option on this socket.\n\nSome OSs use `IPV6_LEAVE_GROUP` for this option.\n\nFor more information about this option, see [`join_multicast_v6`].\n\n[`join_multicast_v6`]: Socket::join_multicast_v6","links":{"Socket::join_multicast_v6":"0:206:2646"},"attrs":["#[cfg(not(target_os = \"nto\"))]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["multiaddr",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"Ipv6Addr","id":"1:8523:2050","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],["interface",{"kind":"primitive","inner":"u32"}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:2907:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11585:34720":{"id":"2:11585:34720","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"`FromStr`":"2:11130:3592","FromStr::Err":"2:11131:126"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:48269:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"F"}},{"type":{"kind":"qualified_path","inner":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"F"},"trait":{"name":"FromStr","id":"2:11130:3592","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"2:11130:3592","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:483:2824":{"id":"0:483:2824","crate_id":0,"name":"as_raw_fd","span":{"filename":"src/sys/unix.rs","begin":[2681,4],"end":[2683,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"c_int","id":"20:43:1675","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2237-0:615:1755":{"id":"b:2:2237-0:615:1755","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2658:2041","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2231:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RecvFlags","id":"0:615:1755","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2239:25165"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:235":{"id":"0:235","crate_id":0,"name":null,"span":{"filename":"src/socket.rs","begin":[1976,0],"end":[1989,1]},"visibility":{"restricted":{"parent":"0:73:1640","path":"::socket"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["read_vectored","read_buf_exact","read_to_end","read_to_string","by_ref","read_exact","bytes","chain","read_buf","is_read_vectored","take"],"trait":{"name":"Read","id":"1:3409:2077","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"resolved_path","inner":{"name":"Socket","id":"0:107:1677","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"items":["0:237:2767","0:238:2768"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:240":{"id":"0:240","crate_id":0,"name":null,"span":{"filename":"src/socket.rs","begin":[1991,0],"end":[2004,1]},"visibility":{"restricted":{"parent":"0:73:1640","path":"::socket"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["write_all_vectored","write_all","write_fmt","write_vectored","is_write_vectored","by_ref"],"trait":{"name":"Write","id":"1:3466:2078","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Socket","id":"0:107:1677","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:241:1637","0:242:2769","0:243:2770"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:177:2489":{"id":"0:177:2489","crate_id":0,"name":"write_timeout","span":{"filename":"src/socket.rs","begin":[1041,4],"end":[1043,5]},"visibility":"public","docs":"Get value for the `SO_SNDTIMEO` option on this socket.\n\nIf the returned timeout is `None`, then `write` and `send` calls will\nblock indefinitely.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:2907:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48125:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Duration","id":"2:50879:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:47:1988":{"id":"0:47:1988","crate_id":0,"name":"family","span":{"filename":"src/sockaddr.rs","begin":[157,4],"end":[159,5]},"visibility":"public","docs":"Returns this address's family.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"sa_family_t","id":"20:643:1914","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:552:1684":{"id":"0:552:1684","crate_id":0,"name":"InterfaceIndexOrAddress","span":{"filename":"src/socket.rs","begin":[796,0],"end":[801,1]},"visibility":"public","docs":"A local interface specified by its index or an address assigned to it.\n\n`Index(0)` and `Address(Ipv4Addr::UNSPECIFIED)` are equivalent and indicate\nthat an appropriate interface should be selected by the system.","links":{},"attrs":["#[cfg(not(any(target_os = \"haiku\", target_os = \"illumos\", target_os =\n\"netbsd\", target_os = \"redox\", target_os = \"solaris\",)))]"],"deprecation":null,"kind":"enum","inner":{"generics":{"params":[],"where_predicates":[]},"variants_stripped":false,"variants":["0:553:2384","0:556:2386"],"impls":["a:2:2651:217-0:552:1684","a:2:7786:9761-0:552:1684","a:2:2715:3673-0:552:1684","a:2:2665:225-0:552:1684","a:2:7787:9760-0:552:1684","b:2:2237-0:552:1684","b:2:2510-0:552:1684","b:2:2234-0:552:1684","b:2:2516-0:552:1684","b:2:2506-0:552:1684","b:2:3306-0:552:1684","b:2:2521-0:552:1684","0:559"]}},"2:11482:29665":{"id":"2:11482:29665","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:48127:176"},"attrs":["#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48125:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:9350:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9350:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3306-0:107:1677":{"id":"b:2:3306-0:107:1677","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2658:2041","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3304:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Socket","id":"0:107:1677","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3308:1451"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:233:2768":{"id":"0:233:2768","crate_id":0,"name":"read_vectored","span":{"filename":"src/socket.rs","begin":[1966,4],"end":[1973,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(target_os = \"redox\"))]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["bufs",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"resolved_path","inner":{"name":"IoSliceMut","id":"1:3427:2080","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:2907:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:56:2022":{"id":"0:56:2022","crate_id":0,"name":"as_socket_ipv6","span":{"filename":"src/sockaddr.rs","begin":[236,4],"end":[241,5]},"visibility":"public","docs":"Returns this address as a [`SocketAddrV6`] if it is in the `AF_INET6`\nfamily.","links":{"`SocketAddrV6`":"1:8660:1907"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48125:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"SocketAddrV6","id":"1:8660:1907","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11544:3456":{"id":"2:11544:3456","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"2:11169:19579","prim@char":"1:12335:409","`DoubleEndedIterator`":"2:7120:120","str::matches":"2:11544:3456"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Matches","id":"2:50313:12846","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11174:13527","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:38":{"id":"0:38","crate_id":0,"name":null,"span":{"filename":"src/sockaddr.rs","begin":[27,0],"end":[242,1]},"visibility":{"restricted":{"parent":"0:12:1669","path":"::sockaddr"}},"docs":null,"links":{},"attrs":["#[allow(clippy :: len_without_is_empty)]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"SockAddr","id":"0:547:1676","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:39:1477","0:41:923","0:42:1976","0:47:1988","0:48:1991","0:49:796","0:50:310","0:51:1997","0:52:2000","0:54:2005","0:55:2020","0:56:2022"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:214:2680":{"id":"0:214:2680","crate_id":0,"name":"multicast_loop_v6","span":{"filename":"src/socket.rs","begin":[1638,4],"end":[1643,5]},"visibility":"public","docs":"Get the value of the `IPV6_MULTICAST_LOOP` option for this socket.\n\nFor more information about this option, see [`set_multicast_loop_v6`].\n\n[`set_multicast_loop_v6`]: Socket::set_multicast_loop_v6","links":{"Socket::set_multicast_loop_v6":"0:216:2686"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:2907:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"bool"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:226":{"id":"0:226","crate_id":0,"name":null,"span":{"filename":"src/socket.rs","begin":[1769,0],"end":[1955,1]},"visibility":{"restricted":{"parent":"0:73:1640","path":"::socket"}},"docs":"Socket options for TCP sockets, get/set using `IPPROTO_TCP`.\n\nAdditional documentation can be found in documentation of the OS.\n* Linux: <https://man7.org/linux/man-pages/man7/tcp.7.html>\n* Windows: <https://docs.microsoft.com/en-us/windows/win32/winsock/ipproto-tcp-socket-options>","links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"Socket","id":"0:107:1677","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:227:2753","0:228:2758","0:230:2766"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:63":{"id":"0:63","crate_id":0,"name":null,"span":{"filename":"src/sockaddr.rs","begin":[295,0],"end":[317,1]},"visibility":{"restricted":{"parent":"0:12:1669","path":"::sockaddr"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:8649:111","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"SockAddr","id":"0:547:1676","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:64:656"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:11588:26765":{"id":"2:11588:26765","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2239:25165":{"id":"2:2239:25165","crate_id":2,"name":"borrow_mut","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3306-0:591:1708":{"id":"b:2:3306-0:591:1708","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2658:2041","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3304:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Type","id":"0:591:1708","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3308:1451"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:2237-0:591:1708":{"id":"b:2:2237-0:591:1708","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2658:2041","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2231:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Type","id":"0:591:1708","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2239:25165"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:200:2625":{"id":"0:200:2625","crate_id":0,"name":"tos","span":{"filename":"src/socket.rs","begin":[1464,4],"end":[1468,5]},"visibility":"public","docs":"Get the value of the `IP_TOS` option for this socket.\n\nFor more information about this option, see [`set_tos`].\n\nNOTE: <https://docs.microsoft.com/en-us/windows/win32/winsock/ipproto-ip-socket-options>\ndocuments that not all versions of windows support `IP_TOS`.\n\n[`set_tos`]: Socket::set_tos","links":{"Socket::set_tos":"0:199:2624"},"attrs":["#[cfg(not(any(target_os = \"fuchsia\", target_os = \"redox\", target_os =\n\"solaris\", target_os = \"illumos\",)))]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:2907:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"u32"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:562:680":{"id":"0:562:680","crate_id":0,"name":"from","span":{"filename":"src/socket.rs","begin":[2031,0],"end":[2031,29]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["socket",{"kind":"resolved_path","inner":{"name":"net::TcpStream","id":"1:4019:2115","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Socket","id":"0:107:1677","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:2665:225-0:603:1730":{"id":"a:2:2665:225-0:603:1730","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2665:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Protocol","id":"0:603:1730","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:387":{"id":"0:387","crate_id":0,"name":null,"span":{"filename":"src/sys/unix.rs","begin":[500,0],"end":[523,1]},"visibility":{"restricted":{"parent":"0:275:1673","path":"::sys"}},"docs":"Unix-only API.","links":{},"attrs":["#[cfg(not(target_os = \"redox\"))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"RecvFlags","id":"0:615:1755","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:388:2882","0:389:2888"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:488":{"id":"0:488","crate_id":0,"name":null,"span":{"filename":"src/sys/unix.rs","begin":[2702,0],"end":[2707,1]},"visibility":{"restricted":{"parent":"0:275:1673","path":"::sys"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2483:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"OwnedFd","id":"1:5072:2835","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"crate::Socket","id":"0:107:1677","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:489:680"],"negative":false,"synthetic":false,"blanket_impl":null}},"5:5304:26763":{"id":"5:5304:26763","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"2:11589:26766"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7157:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:62:680":{"id":"0:62:680","crate_id":0,"name":"from","span":{"filename":"src/sockaddr.rs","begin":[270,4],"end":[292,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["addr",{"kind":"resolved_path","inner":{"name":"SocketAddrV6","id":"1:8660:1907","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"SockAddr","id":"0:547:1676","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2520:1438":{"id":"2:2520:1438","crate_id":2,"name":"try_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:48269:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}},{"type":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"U"},"trait":{"name":"TryFrom","id":"2:2490:234","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:633":{"id":"0:633","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[401,16],"end":[401,21]},"visibility":"crate","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2251:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"TcpKeepalive","id":"0:627:1775","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:634:413"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:11541:34706":{"id":"2:11541:34706","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48125:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11174:13527","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11174:13527","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11189:19577","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:65":{"id":"0:65","crate_id":0,"name":null,"span":{"filename":"src/sockaddr.rs","begin":[319,0],"end":[327,1]},"visibility":{"restricted":{"parent":"0:12:1669","path":"::sockaddr"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"2:2280:185","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"SockAddr","id":"0:547:1676","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"SockAddr","id":"0:547:1676","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:66:601"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:11535:29704":{"id":"2:11535:29704","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"self::pattern":"2:11169:19579","prim@char":"1:12335:409","str::splitn":"2:11532:29702"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitN","id":"2:50231:10233","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11174:13527","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11174:13527","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11189:19577","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:196:2605":{"id":"0:196:2605","crate_id":0,"name":"ttl","span":{"filename":"src/socket.rs","begin":[1419,4],"end":[1423,5]},"visibility":"public","docs":"Get the value of the `IP_TTL` option for this socket.\n\nFor more information about this option, see [`set_ttl`].\n\n[`set_ttl`]: Socket::set_ttl","links":{"Socket::set_ttl":"0:198:2618"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:2907:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"u32"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11497:29187":{"id":"2:11497:29187","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\n\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line ending isn't required:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Lines","id":"2:50363:3627","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2510-0:525:1765":{"id":"b:2:2510-0:525:1765","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2483:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"MaybeUninitSlice","id":"0:525:1765","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:2512:680"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:598":{"id":"0:598","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[246,22],"end":[246,24]},"visibility":"crate","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"2:2285:124","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Type","id":"0:591:1708","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"b:2:2234-0:552:1684":{"id":"b:2:2234-0:552:1684","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2658:2041","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2228:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"InterfaceIndexOrAddress","id":"0:552:1684","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2236:3445"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:515:1735":{"id":"0:515:1735","crate_id":0,"name":"ICMPV6","span":{"filename":"src/lib.rs","begin":[305,4],"end":[305,63]},"visibility":"public","docs":"Protocol corresponding to `ICMPv6`.","links":{},"attrs":[],"deprecation":null,"kind":"assoc_const","inner":{"type":{"kind":"resolved_path","inner":{"name":"Protocol","id":"0:603:1730","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"default":"_"}},"b:5:683-0:591:1708":{"id":"b:5:683-0:591:1708","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2251:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:679:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Type","id":"0:591:1708","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:685:10174","5:686:10175","5:687:10176"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:162:2432":{"id":"0:162:2432","crate_id":0,"name":"set_linger","span":{"filename":"src/socket.rs","begin":[901,4],"end":[904,5]},"visibility":"public","docs":"Set value for the `SO_LINGER` option on this socket.\n\nIf `linger` is not `None`, a close(2) or shutdown(2) will not return\nuntil all queued messages for the socket have been successfully sent or\nthe linger timeout has been reached. Otherwise, the call returns\nimmediately and the closing is done in the background. When the socket\nis closed as part of exit(2), it always lingers in the background.\n\n# Notes\n\nOn most OSs the duration only has a precision of seconds and will be\nsilently truncated.\n\nOn Apple platforms (e.g. macOS, iOS, etc) this uses `SO_LINGER_SEC`.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["linger",{"kind":"resolved_path","inner":{"name":"Option","id":"2:48125:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Duration","id":"2:50879:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:2907:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:567":{"id":"0:567","crate_id":0,"name":null,"span":{"filename":"src/socket.rs","begin":[2034,0],"end":[2034,29]},"visibility":{"restricted":{"parent":"0:73:1640","path":"::socket"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2483:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Socket","id":"0:107:1677","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"net::TcpStream","id":"1:4019:2115","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:568:680"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:143:2340":{"id":"0:143:2340","crate_id":0,"name":"send_with_flags","span":{"filename":"src/socket.rs","begin":[644,4],"end":[646,5]},"visibility":"public","docs":"Identical to [`send`] but allows for specification of arbitrary flags to the underlying\n`send` call.\n\n[`send`]: #method.send","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}],["flags",{"kind":"resolved_path","inner":{"name":"c_int","id":"20:43:1675","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:2907:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5305:26764":{"id":"5:5305:26764","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"2:11590:26767"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7157:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2510-0:579:1692":{"id":"b:2:2510-0:579:1692","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2483:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Domain","id":"0:579:1692","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2512:680"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:217:2689":{"id":"0:217:2689","crate_id":0,"name":"unicast_hops_v6","span":{"filename":"src/socket.rs","begin":[1663,4],"end":[1668,5]},"visibility":"public","docs":"Get the value of the `IPV6_UNICAST_HOPS` option for this socket.\n\nSpecifies the hop limit for ipv6 unicast packets","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:2907:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"u32"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2506-0:107:1677":{"id":"b:2:2506-0:107:1677","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2483:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2480:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Socket","id":"0:107:1677","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2509:2023"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:11562:34713":{"id":"2:11562:34713","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:208:2661":{"id":"0:208:2661","crate_id":0,"name":"multicast_hops_v6","span":{"filename":"src/socket.rs","begin":[1582,4],"end":[1587,5]},"visibility":"public","docs":"Get the value of the `IPV6_MULTICAST_HOPS` option for this socket\n\nFor more information about this option, see [`set_multicast_hops_v6`].\n\n[`set_multicast_hops_v6`]: Socket::set_multicast_hops_v6","links":{"Socket::set_multicast_hops_v6":"0:210:2666"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:2907:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"u32"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:223:2708":{"id":"0:223:2708","crate_id":0,"name":"recv_tclass_v6","span":{"filename":"src/socket.rs","begin":[1730,4],"end":[1735,5]},"visibility":"public","docs":"Get the value of the `IPV6_RECVTCLASS` option for this socket.\n\nFor more information about this option, see [`set_recv_tclass_v6`].\n\n[`set_recv_tclass_v6`]: Socket::set_recv_tclass_v6","links":{"Socket::set_recv_tclass_v6":"0:225:2715"},"attrs":["#[cfg(not(any(target_os = \"dragonfly\", target_os = \"fuchsia\", target_os =\n\"illumos\", target_os = \"netbsd\", target_os = \"openbsd\", target_os = \"redox\",\ntarget_os = \"solaris\", target_os = \"haiku\",)))]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:2907:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"bool"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:612":{"id":"0:612","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[297,26],"end":[297,35]},"visibility":"crate","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"2:2661:223","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Protocol","id":"0:603:1730","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"b:5:683-0:547:1676":{"id":"b:5:683-0:547:1676","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2251:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:679:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"SockAddr","id":"0:547:1676","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:685:10174","5:686:10175","5:687:10176"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:11476:2896":{"id":"2:11476:2896","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\nBasic usage:\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:10737:19580"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:608:413":{"id":"0:608:413","crate_id":0,"name":"clone","span":{"filename":"src/lib.rs","begin":[297,15],"end":[297,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Protocol","id":"0:603:1730","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:532":{"id":"0:532","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[373,0],"end":[382,1]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"MaybeUninitSlice","id":"0:525:1765","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["0:534:923"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:631":{"id":"0:631","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[401,9],"end":[401,14]},"visibility":"crate","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:8649:111","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"TcpKeepalive","id":"0:627:1775","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:632:656"],"negative":false,"synthetic":false,"blanket_impl":null}},"5:5293:35372":{"id":"5:5293:35372","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7157:221"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7157:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:384":{"id":"0:384","crate_id":0,"name":null,"span":{"filename":"src/sys/unix.rs","begin":[323,0],"end":[345,1]},"visibility":{"restricted":{"parent":"0:275:1673","path":"::sys"}},"docs":"Unix only API.","links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"Domain","id":"0:579:1692","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:176:2486":{"id":"0:176:2486","crate_id":0,"name":"set_send_buffer_size","span":{"filename":"src/socket.rs","begin":[1026,4],"end":[1035,5]},"visibility":"public","docs":"Set value for the `SO_SNDBUF` option on this socket.\n\nChanges the size of the operating system's send buffer associated with\nthe socket.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["size",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:2907:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11570:27733":{"id":"2:11570:27733","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12335:409","self::pattern":"2:11169:19579"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["prefix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48125:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11174:13527","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5285":{"id":"5:5285","crate_id":5,"name":null,"span":null,"visibility":{"restricted":{"parent":"5:5196:1363","path":"::str"}},"docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["5:5286:35370","5:5287:3485","5:5290:35371","5:5293:35372","5:5301:35373","5:5302:35374","5:5303:3650","5:5304:26763","5:5305:26764"],"negative":false,"synthetic":false,"blanket_impl":null}},"a:2:2651:217-0:552:1684":{"id":"a:2:2651:217-0:552:1684","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2651:217","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"InterfaceIndexOrAddress","id":"0:552:1684","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:11523:29700":{"id":"2:11523:29700","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"2:11169:19579","`DoubleEndedIterator`":"2:7120:120","str::split":"2:11517:29186","prim@char":"1:12335:409"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplit","id":"2:50127:10231","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11174:13527","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11174:13527","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11189:19577","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:634:413":{"id":"0:634:413","crate_id":0,"name":"clone","span":{"filename":"src/lib.rs","begin":[401,16],"end":[401,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"TcpKeepalive","id":"0:627:1775","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:2651:217-0:627:1775":{"id":"a:2:2651:217-0:627:1775","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2651:217","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"TcpKeepalive","id":"0:627:1775","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"b:2:2237-0:107:1677":{"id":"b:2:2237-0:107:1677","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2658:2041","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2231:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Socket","id":"0:107:1677","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2239:25165"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"a:2:2651:217-0:591:1708":{"id":"a:2:2651:217-0:591:1708","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2651:217","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Type","id":"0:591:1708","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:2236:3445":{"id":"2:2236:3445","crate_id":2,"name":"borrow","span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[rustc_diagnostic_item = \"noop_method_borrow\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2510-0:603:1730":{"id":"b:2:2510-0:603:1730","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2483:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Protocol","id":"0:603:1730","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2512:680"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:11489:34701":{"id":"2:11489:34701","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"str::slice_unchecked":"2:11488:34700","crate::ops::IndexMut":"2:2974:3538","`str`":"1:12341:1363"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"0:249":{"id":"0:249","crate_id":0,"name":null,"span":{"filename":"src/socket.rs","begin":[2021,0],"end":[2029,1]},"visibility":{"restricted":{"parent":"0:73:1640","path":"::socket"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:8649:111","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Socket","id":"0:107:1677","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:250:656"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:182:2543":{"id":"0:182:2543","crate_id":0,"name":"join_multicast_v4","span":{"filename":"src/socket.rs","begin":[1168,4],"end":[1174,5]},"visibility":"public","docs":"Join a multicast group using `IP_ADD_MEMBERSHIP` option on this socket.\n\nThis function specifies a new multicast group for this socket to join.\nThe address must be a valid multicast address, and `interface` is the\naddress of the local interface with which the system should join the\nmulticast group. If it's [`Ipv4Addr::UNSPECIFIED`] (`INADDR_ANY`) then\nan appropriate interface is chosen by the system.","links":{"`Ipv4Addr::UNSPECIFIED`":"1:3635:2995"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["multiaddr",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"Ipv4Addr","id":"1:8506:2045","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],["interface",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"Ipv4Addr","id":"1:8506:2045","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:2907:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:2665:225-0:591:1708":{"id":"a:2:2665:225-0:591:1708","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2665:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Type","id":"0:591:1708","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:210:2666":{"id":"0:210:2666","crate_id":0,"name":"set_multicast_hops_v6","span":{"filename":"src/socket.rs","begin":[1594,4],"end":[1603,5]},"visibility":"public","docs":"Set the value of the `IPV6_MULTICAST_HOPS` option for this socket\n\nIndicates the number of \"routers\" multicast packets will transit for\nthis socket. The default value is 1 which means that multicast packets\ndon't leave the local network unless explicitly requested.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["hops",{"kind":"primitive","inner":"u32"}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:2907:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:512:680":{"id":"0:512:680","crate_id":0,"name":"from","span":{"filename":"src/lib.rs","begin":[285,4],"end":[287,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["t",{"kind":"resolved_path","inner":{"name":"Type","id":"0:591:1708","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"c_int","id":"20:43:1675","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:2651:217-0:547:1676":{"id":"a:2:2651:217-0:547:1676","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2651:217","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"SockAddr","id":"0:547:1676","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:543:923":{"id":"0:543:923","crate_id":0,"name":"new","span":{"filename":"src/lib.rs","begin":[424,4],"end":[443,5]},"visibility":"public","docs":"Returns a new, empty set of TCP keepalive parameters.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[],"output":{"kind":"resolved_path","inner":{"name":"TcpKeepalive","id":"0:627:1775","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2516-0:591:1708":{"id":"b:2:2516-0:591:1708","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2490:234","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2486:235","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Type","id":"0:591:1708","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2519:127","2:2520:1438"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:538:541":{"id":"0:538:541","crate_id":0,"name":"deref","span":{"filename":"src/lib.rs","begin":[387,4],"end":[389,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"resolved_path","inner":{"name":"MaybeUninit","id":"2:29621:1624","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"u8"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:480":{"id":"0:480","crate_id":0,"name":null,"span":{"filename":"src/sys/unix.rs","begin":[2672,0],"end":[2677,1]},"visibility":{"restricted":{"parent":"0:275:1673","path":"::sys"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"AsFd","id":"1:5095:2776","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"crate::Socket","id":"0:107:1677","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:481:2823"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:11560:34712":{"id":"2:11560:34712","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:576:656":{"id":"0:576:656","crate_id":0,"name":"fmt","span":{"filename":"src/sys/unix.rs","begin":[449,0],"end":[482,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"std::fmt::Formatter","id":"2:8609:131","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"std::fmt::Result","id":"2:8598:207","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:134:2282":{"id":"0:134:2282","crate_id":0,"name":"recv_vectored_with_flags","span":{"filename":"src/socket.rs","begin":[492,4],"end":[498,5]},"visibility":"public","docs":"Identical to [`recv_vectored`] but allows for specification of arbitrary\nflags to the underlying `recvmsg`/`WSARecv` call.\n\n[`recv_vectored`]: Socket::recv_vectored\n\n# Safety\n\n`recv_from_vectored` makes the same safety guarantees regarding `bufs`\nas [`recv_vectored`].\n\n[`recv_vectored`]: Socket::recv_vectored","links":{"Socket::recv_vectored":"0:133:2280"},"attrs":["#[cfg(not(target_os = \"redox\"))]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["bufs",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"resolved_path","inner":{"name":"MaybeUninitSlice","id":"0:525:1765","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}}],["flags",{"kind":"resolved_path","inner":{"name":"c_int","id":"20:43:1675","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:2907:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"primitive","inner":"usize"},{"kind":"resolved_path","inner":{"name":"RecvFlags","id":"0:615:1755","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:147:2360":{"id":"0:147:2360","crate_id":0,"name":"send_to","span":{"filename":"src/socket.rs","begin":[686,4],"end":[688,5]},"visibility":"public","docs":"Sends data on the socket to the given address. On success, returns the\nnumber of bytes written.\n\nThis is typically used on UDP or datagram-oriented sockets.\n\nAdditional documentation can be found in manual of the OS:\n\n * DragonFly BSD: <https://man.dragonflybsd.org/?command=sendto&section=2>\n * FreeBSD: <https://www.freebsd.org/cgi/man.cgi?query=sendto&sektion=2>\n * Linux: <https://man7.org/linux/man-pages/man2/sendto.2.html>\n * macOS: <https://developer.apple.com/library/archive/documentation/System/Conceptual/ManPages_iPhoneOS/man2/sendto.2.html> (archived, actually for iOS)\n * NetBSD: <https://man.netbsd.org/sendto.2>\n * OpenBSD: <https://man.openbsd.org/sendto.2>\n * iOS: <https://developer.apple.com/library/archive/documentation/System/Conceptual/ManPages_iPhoneOS/man2/sendto.2.html> (archived)\n * illumos: <https://illumos.org/man/3SOCKET/sendto>\n * Windows: <https://docs.microsoft.com/en-us/windows/win32/api/winsock2/nf-winsock2-sendto>","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}],["addr",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"SockAddr","id":"0:547:1676","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:2907:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:181":{"id":"0:181","crate_id":0,"name":null,"span":{"filename":"src/socket.rs","begin":[1080,0],"end":[1521,1]},"visibility":{"restricted":{"parent":"0:73:1640","path":"::socket"}},"docs":"Socket options for IPv4 sockets, get/set using `IPPROTO_IP`.\n\nAdditional documentation can be found in documentation of the OS.\n* Linux: <https://man7.org/linux/man-pages/man7/ip.7.html>\n* Windows: <https://docs.microsoft.com/en-us/windows/win32/winsock/ipproto-ip-socket-options>","links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"Socket","id":"0:107:1677","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:182:2543","0:183:2554","0:184:2560","0:185:2565","0:186:2570","0:187:2580","0:188:2585","0:189:2589","0:190:2593","0:192:2599","0:193:2603","0:195:2610","0:196:2605","0:198:2618","0:199:2624","0:200:2625","0:202:2634","0:203:2635"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:486":{"id":"0:486","crate_id":0,"name":null,"span":{"filename":"src/sys/unix.rs","begin":[2695,0],"end":[2699,1]},"visibility":{"restricted":{"parent":"0:275:1673","path":"::sys"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"IntoRawFd","id":"1:5018:2084","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"crate::Socket","id":"0:107:1677","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:487:1642"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:171:2470":{"id":"0:171:2470","crate_id":0,"name":"reuse_address","span":{"filename":"src/socket.rs","begin":[987,4],"end":[992,5]},"visibility":"public","docs":"Get the value of the `SO_REUSEADDR` option on this socket.\n\nFor more information about this option, see [`set_reuse_address`].\n\n[`set_reuse_address`]: Socket::set_reuse_address","links":{"Socket::set_reuse_address":"0:173:2477"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:2907:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"bool"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:231":{"id":"0:231","crate_id":0,"name":null,"span":{"filename":"src/socket.rs","begin":[1957,0],"end":[1974,1]},"visibility":{"restricted":{"parent":"0:73:1640","path":"::socket"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["read_vectored","read_buf_exact","read_to_end","read_to_string","by_ref","read_exact","bytes","chain","read_buf","is_read_vectored","take"],"trait":{"name":"Read","id":"1:3409:2077","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Socket","id":"0:107:1677","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:232:2767","0:233:2768"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:145:2346":{"id":"0:145:2346","crate_id":0,"name":"send_vectored_with_flags","span":{"filename":"src/socket.rs","begin":[662,4],"end":[668,5]},"visibility":"public","docs":"Identical to [`send_vectored`] but allows for specification of arbitrary\nflags to the underlying `sendmsg`/`WSASend` call.\n\nAdditional documentation can be found in manual of the OS:\n\n * DragonFly BSD: <https://man.dragonflybsd.org/?command=sendmsg&section=2>\n * FreeBSD: <https://www.freebsd.org/cgi/man.cgi?query=sendmsg&sektion=2>\n * Linux: <https://man7.org/linux/man-pages/man2/sendmsg.2.html>\n * macOS: <https://developer.apple.com/library/archive/documentation/System/Conceptual/ManPages_iPhoneOS/man2/sendmsg.2.html> (archived, actually for iOS)\n * NetBSD: <https://man.netbsd.org/sendmsg.2>\n * OpenBSD: <https://man.openbsd.org/sendmsg.2>\n * iOS: <https://developer.apple.com/library/archive/documentation/System/Conceptual/ManPages_iPhoneOS/man2/sendmsg.2.html> (archived)\n * illumos: <https://illumos.org/man/3SOCKET/sendmsg>\n * Windows: <https://docs.microsoft.com/en-us/windows/win32/api/winsock2/nf-winsock2-sendmsg>\n\n[`send_vectored`]: Socket::send_vectored","links":{"Socket::send_vectored":"0:144:2345"},"attrs":["#[cfg(not(target_os = \"redox\"))]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["bufs",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"resolved_path","inner":{"name":"IoSlice","id":"1:8414:2079","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}}],["flags",{"kind":"resolved_path","inner":{"name":"c_int","id":"20:43:1675","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:2907:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11473:34698":{"id":"2:11473:34698","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n# Panics\n\nPanics if `index > self.len()`.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"2:11471:34697"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3306-0:579:1692":{"id":"b:2:3306-0:579:1692","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2658:2041","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3304:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Domain","id":"0:579:1692","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3308:1451"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:170:2464":{"id":"0:170:2464","crate_id":0,"name":"set_read_timeout","span":{"filename":"src/socket.rs","begin":[978,4],"end":[980,5]},"visibility":"public","docs":"Set value for the `SO_RCVTIMEO` option on this socket.\n\nIf `timeout` is `None`, then `read` and `recv` calls will block\nindefinitely.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["duration",{"kind":"resolved_path","inner":{"name":"Option","id":"2:48125:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Duration","id":"2:50879:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:2907:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11513:10116":{"id":"2:11513:10116","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"2:48127:176","self::pattern":"2:11169:19579","prim@char":"1:12335:409"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48125:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11174:13527","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11174:13527","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11189:19577","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:268:541":{"id":"0:268:541","crate_id":0,"name":"deref","span":{"filename":"src/sockref.rs","begin":[74,4],"end":[76,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Target","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"","id":"2:2887:116","args":null}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:506":{"id":"0:506","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[249,0],"end":[276,1]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"Type","id":"0:591:1708","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:507:1711","0:508:1715"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:2509:2023":{"id":"2:2509:2023","crate_id":2,"name":"into","span":null,"visibility":"default","docs":"Calls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of\n<code>[From]&lt;T&gt; for U</code> chooses to do.","links":{"From":"2:2483:132"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"generic","inner":"U"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:7787:9760-0:627:1775":{"id":"a:2:7787:9760-0:627:1775","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:7787:9760","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"TcpKeepalive","id":"0:627:1775","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:115:2136":{"id":"0:115:2136","crate_id":0,"name":"new_raw","span":{"filename":"src/socket.rs","begin":[138,4],"end":[141,5]},"visibility":"public","docs":"Creates a new socket ready to be configured.\n\nThis function corresponds to `socket(2)` on Unix and `WSASocketW` on\nWindows and simply creates a new socket, no other configuration is done.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["domain",{"kind":"resolved_path","inner":{"name":"Domain","id":"0:579:1692","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}],["ty",{"kind":"resolved_path","inner":{"name":"Type","id":"0:591:1708","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}],["protocol",{"kind":"resolved_path","inner":{"name":"Option","id":"2:48125:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Protocol","id":"0:603:1730","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:2907:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Socket","id":"0:107:1677","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2516-0:547:1676":{"id":"b:2:2516-0:547:1676","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2490:234","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2486:235","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"SockAddr","id":"0:547:1676","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2519:127","2:2520:1438"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:603:1730":{"id":"0:603:1730","crate_id":0,"name":"Protocol","span":{"filename":"src/lib.rs","begin":[298,0],"end":[298,27]},"visibility":"public","docs":"Protocol specification used for creating sockets via `Socket::new`.\n\nThis is a newtype wrapper around an integer which provides a nicer API in\naddition to an injection point for documentation.\n\nThis type is freely interconvertible with C's `int` type, however, if a raw\nvalue needs to be provided.","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"kind":{"tuple":[null]},"generics":{"params":[],"where_predicates":[]},"impls":["0:513","a:2:2651:217-0:603:1730","a:2:7786:9761-0:603:1730","a:2:2715:3673-0:603:1730","a:2:2665:225-0:603:1730","a:2:7787:9760-0:603:1730","b:2:2237-0:603:1730","b:2:2510-0:603:1730","b:2:2234-0:603:1730","b:2:2516-0:603:1730","b:2:2506-0:603:1730","b:2:3306-0:603:1730","b:2:2521-0:603:1730","b:5:683-0:603:1730","0:612","0:577","0:613","0:609","0:606","0:610","0:521","0:519","0:607"]}},"0:522:680":{"id":"0:522:680","crate_id":0,"name":"from","span":{"filename":"src/lib.rs","begin":[334,4],"end":[336,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["p",{"kind":"resolved_path","inner":{"name":"Protocol","id":"0:603:1730","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"c_int","id":"20:43:1675","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:508:1715":{"id":"0:508:1715","crate_id":0,"name":"DGRAM","span":{"filename":"src/lib.rs","begin":[258,4],"end":[258,50]},"visibility":"public","docs":"Type corresponding to `SOCK_DGRAM`.\n\nUsed for protocols such as UDP.","links":{},"attrs":[],"deprecation":null,"kind":"assoc_const","inner":{"type":{"kind":"resolved_path","inner":{"name":"Type","id":"0:591:1708","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"default":"_"}},"0:539":{"id":"0:539","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[392,0],"end":[396,1]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"DerefMut","id":"2:2900:1627","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"MaybeUninitSlice","id":"0:525:1765","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["0:541:543"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:542":{"id":"0:542","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[422,0],"end":[553,1]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"TcpKeepalive","id":"0:627:1775","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:543:923","0:544:1790","0:545:1801"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:161:2420":{"id":"0:161:2420","crate_id":0,"name":"linger","span":{"filename":"src/socket.rs","begin":[880,4],"end":[885,5]},"visibility":"public","docs":"Get the value of the `SO_LINGER` option on this socket.\n\nFor more information about this option, see [`set_linger`].\n\n[`set_linger`]: Socket::set_linger","links":{"Socket::set_linger":"0:162:2432"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:2907:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48125:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Duration","id":"2:50879:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:48:1991":{"id":"0:48:1991","crate_id":0,"name":"domain","span":{"filename":"src/sockaddr.rs","begin":[162,4],"end":[164,5]},"visibility":"public","docs":"Returns this address's `Domain`.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Domain","id":"0:579:1692","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3306-0:552:1684":{"id":"b:2:3306-0:552:1684","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2658:2041","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3304:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"InterfaceIndexOrAddress","id":"0:552:1684","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3308:1451"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:601":{"id":"0:601","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[246,26],"end":[246,35]},"visibility":"crate","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"2:2280:185","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Type","id":"0:591:1708","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Type","id":"0:591:1708","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:602:601"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:5:683-0:603:1730":{"id":"b:5:683-0:603:1730","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2251:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:679:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Protocol","id":"0:603:1730","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:685:10174","5:686:10175","5:687:10176"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:148:2361":{"id":"0:148:2361","crate_id":0,"name":"send_to_with_flags","span":{"filename":"src/socket.rs","begin":[694,4],"end":[701,5]},"visibility":"public","docs":"Identical to [`send_to`] but allows for specification of arbitrary flags\nto the underlying `sendto` call.\n\n[`send_to`]: Socket::send_to","links":{"Socket::send_to":"0:147:2360"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}],["addr",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"SockAddr","id":"0:547:1676","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],["flags",{"kind":"resolved_path","inner":{"name":"c_int","id":"20:43:1675","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:2907:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:614:601":{"id":"0:614:601","crate_id":0,"name":"eq","span":{"filename":"src/lib.rs","begin":[297,26],"end":[297,35]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"Protocol","id":"0:603:1730","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:406":{"id":"0:406","crate_id":0,"name":null,"span":{"filename":"src/sys/unix.rs","begin":[614,0],"end":[656,1]},"visibility":{"restricted":{"parent":"0:275:1673","path":"::sys"}},"docs":"Unix only API.","links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"SockAddr","id":"0:547:1676","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:507:1711":{"id":"0:507:1711","crate_id":0,"name":"STREAM","span":{"filename":"src/lib.rs","begin":[253,4],"end":[253,52]},"visibility":"public","docs":"Type corresponding to `SOCK_STREAM`.\n\nUsed for protocols such as TCP.","links":{},"attrs":[],"deprecation":null,"kind":"assoc_const","inner":{"type":{"kind":"resolved_path","inner":{"name":"Type","id":"0:591:1708","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"default":"_"}},"0:114:923":{"id":"0:114:923","crate_id":0,"name":"new","span":{"filename":"src/socket.rs","begin":[129,4],"end":[132,5]},"visibility":"public","docs":"Creates a new socket and sets common flags.\n\nThis function corresponds to `socket(2)` on Unix and `WSASocketW` on\nWindows.\n\nOn Unix-like systems, the close-on-exec flag is set on the new socket.\nAdditionally, on Apple platforms `SOCK_NOSIGPIPE` is set. On Windows,\nthe socket is made non-inheritable.\n\n[`Socket::new_raw`] can be used if you don't want these flags to be set.\n\nAdditional documentation can be found in manual of the OS:\n\n * DragonFly BSD: <https://man.dragonflybsd.org/?command=socket&section=2>\n * FreeBSD: <https://www.freebsd.org/cgi/man.cgi?query=socket&sektion=2>\n * Linux: <https://man7.org/linux/man-pages/man2/socket.2.html>\n * macOS: <https://developer.apple.com/library/archive/documentation/System/Conceptual/ManPages_iPhoneOS/man2/socket.2.html> (archived, actually for iOS)\n * NetBSD: <https://man.netbsd.org/socket.2>\n * OpenBSD: <https://man.openbsd.org/socket.2>\n * iOS: <https://developer.apple.com/library/archive/documentation/System/Conceptual/ManPages_iPhoneOS/man2/socket.2.html> (archived)\n * illumos: <https://illumos.org/man/3SOCKET/socket>\n * Windows: <https://docs.microsoft.com/en-us/windows/win32/api/winsock2/nf-winsock2-socket>","links":{"`Socket::new_raw`":"0:115:2136"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["domain",{"kind":"resolved_path","inner":{"name":"Domain","id":"0:579:1692","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}],["ty",{"kind":"resolved_path","inner":{"name":"Type","id":"0:591:1708","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}],["protocol",{"kind":"resolved_path","inner":{"name":"Option","id":"2:48125:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Protocol","id":"0:603:1730","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:2907:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Socket","id":"0:107:1677","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:519":{"id":"0:519","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[327,0],"end":[331,1]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2483:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"i32"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Protocol","id":"0:603:1730","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:520:680"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:169:2458":{"id":"0:169:2458","crate_id":0,"name":"read_timeout","span":{"filename":"src/socket.rs","begin":[970,4],"end":[972,5]},"visibility":"public","docs":"Get value for the `SO_RCVTIMEO` option on this socket.\n\nIf the returned timeout is `None`, then `read` and `recv` calls will\nblock indefinitely.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:2907:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48125:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Duration","id":"2:50879:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11590:26767":{"id":"2:11590:26767","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11495:31684":{"id":"2:11495:31684","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"2:11496:31675"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitWhitespace","id":"2:50383:12849","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:504":{"id":"0:504","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[231,0],"end":[235,1]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2483:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Domain","id":"0:579:1692","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"c_int","id":"20:43:1675","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:505:680"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:618":{"id":"0:618","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[344,9],"end":[344,13]},"visibility":"crate","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"2:2663:108","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RecvFlags","id":"0:615:1755","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"a:2:7786:9761-0:552:1684":{"id":"a:2:7786:9761-0:552:1684","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:7786:9761","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"InterfaceIndexOrAddress","id":"0:552:1684","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:50:310":{"id":"0:50:310","crate_id":0,"name":"as_ptr","span":{"filename":"src/sockaddr.rs","begin":[172,4],"end":[174,5]},"visibility":"public","docs":"Returns a raw pointer to the address.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"sockaddr","id":"20:1529:1669","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2234-0:615:1755":{"id":"b:2:2234-0:615:1755","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2658:2041","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2228:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RecvFlags","id":"0:615:1755","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2236:3445"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:534:923":{"id":"0:534:923","crate_id":0,"name":"new","span":{"filename":"src/lib.rs","begin":[379,4],"end":[381,5]},"visibility":"public","docs":"Creates a new `MaybeUninitSlice` wrapping a byte slice.\n\n# Panics\n\nPanics on Windows if the slice is larger than 4GB.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["buf",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":true,"type":{"kind":"slice","inner":{"kind":"resolved_path","inner":{"name":"MaybeUninit","id":"2:29621:1624","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"u8"}}],"bindings":[]}}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"MaybeUninitSlice","id":"0:525:1765","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2516-0:579:1692":{"id":"b:2:2516-0:579:1692","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2490:234","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2486:235","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Domain","id":"0:579:1692","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2519:127","2:2520:1438"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"a:2:7787:9760-0:579:1692":{"id":"a:2:7787:9760-0:579:1692","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:7787:9760","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Domain","id":"0:579:1692","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:11589:26766":{"id":"2:11589:26766","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:505:680":{"id":"0:505:680","crate_id":0,"name":"from","span":{"filename":"src/lib.rs","begin":[232,4],"end":[234,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["d",{"kind":"resolved_path","inner":{"name":"Domain","id":"0:579:1692","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"c_int","id":"20:43:1675","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:242:2769":{"id":"0:242:2769","crate_id":0,"name":"write_vectored","span":{"filename":"src/socket.rs","begin":[1997,4],"end":[1999,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(target_os = \"redox\"))]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["bufs",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"resolved_path","inner":{"name":"IoSlice","id":"1:8414:2079","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:2907:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:57":{"id":"0:57","crate_id":0,"name":null,"span":{"filename":"src/sockaddr.rs","begin":[244,0],"end":[251,1]},"visibility":{"restricted":{"parent":"0:12:1669","path":"::sockaddr"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2483:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"SocketAddr","id":"1:8625:1626","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"SockAddr","id":"0:547:1676","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:58:680"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:575":{"id":"0:575","crate_id":0,"name":null,"span":{"filename":"src/sys/unix.rs","begin":[449,0],"end":[482,1]},"visibility":{"restricted":{"parent":"0:275:1673","path":"::sys"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:8649:111","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Type","id":"0:591:1708","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:576:656"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:568:680":{"id":"0:568:680","crate_id":0,"name":"from","span":{"filename":"src/socket.rs","begin":[2034,0],"end":[2034,29]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["socket",{"kind":"resolved_path","inner":{"name":"Socket","id":"0:107:1677","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"net::TcpStream","id":"1:4019:2115","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3306-0:261:1678":{"id":"b:2:3306-0:261:1678","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2658:2041","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3304:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"SockRef","id":"0:261:1678","args":{"angle_bracketed":{"args":[{"lifetime":"'s"}],"bindings":[]}}}},"items":["2:3308:1451"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:131:2262":{"id":"0:131:2262","crate_id":0,"name":"recv_out_of_band","span":{"filename":"src/socket.rs","begin":[428,4],"end":[430,5]},"visibility":"public","docs":"Receives out-of-band (OOB) data on the socket from the remote address to\nwhich it is connected by setting the `MSG_OOB` flag for this call.\n\nFor more information, see [`recv`], [`out_of_band_inline`].\n\n[`recv`]: Socket::recv\n[`out_of_band_inline`]: Socket::out_of_band_inline","links":{"Socket::recv":"0:130:2245","Socket::out_of_band_inline":"0:163:2437"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"resolved_path","inner":{"name":"MaybeUninit","id":"2:29621:1624","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"u8"}}],"bindings":[]}}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:2907:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:560:656":{"id":"0:560:656","crate_id":0,"name":"fmt","span":{"filename":"src/socket.rs","begin":[795,9],"end":[795,14]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Formatter","id":"2:8609:131","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Result","id":"2:8598:207","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2234-0:579:1692":{"id":"b:2:2234-0:579:1692","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2658:2041","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2228:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Domain","id":"0:579:1692","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2236:3445"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:160:2416":{"id":"0:160:2416","crate_id":0,"name":"set_keepalive","span":{"filename":"src/socket.rs","begin":[864,4],"end":[873,5]},"visibility":"public","docs":"Set value for the `SO_KEEPALIVE` option on this socket.\n\nEnable sending of keep-alive messages on connection-oriented sockets.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["keepalive",{"kind":"primitive","inner":"bool"}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:2907:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:501:1703":{"id":"0:501:1703","crate_id":0,"name":"for_address","span":{"filename":"src/lib.rs","begin":[217,4],"end":[222,5]},"visibility":"public","docs":"Returns the correct domain for `address`.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["address",{"kind":"resolved_path","inner":{"name":"SocketAddr","id":"1:8625:1626","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Domain","id":"0:579:1692","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:491:1641":{"id":"0:491:1641","crate_id":0,"name":"from_raw_fd","span":{"filename":"src/sys/unix.rs","begin":[2711,4],"end":[2713,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["fd",{"kind":"resolved_path","inner":{"name":"c_int","id":"20:43:1675","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"crate::Socket","id":"0:107:1677","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2521-0:547:1676":{"id":"b:2:2521-0:547:1676","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2480:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2490:234","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"SockAddr","id":"0:547:1676","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2524:127","2:2525:1437"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:247:2769":{"id":"0:247:2769","crate_id":0,"name":"write_vectored","span":{"filename":"src/socket.rs","begin":[2012,4],"end":[2014,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(target_os = \"redox\"))]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["bufs",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"resolved_path","inner":{"name":"IoSlice","id":"1:8414:2079","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:2907:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:138:2309":{"id":"0:138:2309","crate_id":0,"name":"recv_from_vectored","span":{"filename":"src/socket.rs","begin":[558,4],"end":[563,5]},"visibility":"public","docs":"Receives data from the socket. Returns the amount of bytes read, the\n[`RecvFlags`] and the remote address from the data is coming. Unlike\n[`recv_from`] this allows passing multiple buffers.\n\nAdditional documentation can be found in manual of the OS:\n\n * DragonFly BSD: <https://man.dragonflybsd.org/?command=recvmsg&section=2>\n * FreeBSD: <https://www.freebsd.org/cgi/man.cgi?query=recvmsg&sektion=2>\n * Linux: <https://man7.org/linux/man-pages/man2/recvmsg.2.html>\n * macOS: <https://developer.apple.com/library/archive/documentation/System/Conceptual/ManPages_iPhoneOS/man2/recvmsg.2.html> (archived, actually for iOS)\n * NetBSD: <https://man.netbsd.org/recvmsg.2>\n * OpenBSD: <https://man.openbsd.org/recvmsg.2>\n * iOS: <https://developer.apple.com/library/archive/documentation/System/Conceptual/ManPages_iPhoneOS/man2/recvmsg.2.html> (archived)\n * illumos: <https://illumos.org/man/3SOCKET/recvmsg>\n * Windows: <https://docs.microsoft.com/en-us/windows/win32/api/winsock2/nf-winsock2-recvmsg>\n\n[`recv_from`]: Socket::recv_from\n\n# Safety\n\n`recv_from_vectored` makes the same safety guarantees regarding `bufs`\nas [`recv_vectored`].\n\n[`recv_vectored`]: Socket::recv_vectored","links":{"Socket::recv_from":"0:136:2301","Socket::recv_vectored":"0:133:2280","`RecvFlags`":"0:615:1755"},"attrs":["#[cfg(not(target_os = \"redox\"))]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["bufs",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"resolved_path","inner":{"name":"MaybeUninitSlice","id":"0:525:1765","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:2907:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"primitive","inner":"usize"},{"kind":"resolved_path","inner":{"name":"RecvFlags","id":"0:615:1755","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},{"kind":"resolved_path","inner":{"name":"SockAddr","id":"0:547:1676","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:494-0:107:1677":{"id":"0:494-0:107:1677","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[182,0],"end":[182,23]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"socket::Socket","name":"Socket","id":"0:107:1677","glob":false}},"0:39:1477":{"id":"0:39:1477","crate_id":0,"name":"unix","span":{"filename":"src/sockaddr.rs","begin":[31,4],"end":[36,5]},"visibility":"public","docs":"Constructs a `SockAddr` with the family `AF_UNIX` and the provided path.\n\nReturns an error if the path is longer than `SUN_LEN`.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["path",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:2907:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"SockAddr","id":"0:547:1676","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"2:2474:75","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Path","id":"1:5517:187","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11470:34696":{"id":"2:11470:34696","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]","#[rustc_const_unstable(feature = \"const_is_char_boundary\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:484":{"id":"0:484","crate_id":0,"name":null,"span":{"filename":"src/sys/unix.rs","begin":[2687,0],"end":[2692,1]},"visibility":{"restricted":{"parent":"0:275:1673","path":"::sys"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2483:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Socket","id":"0:107:1677","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OwnedFd","id":"1:5072:2835","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:485:680"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:2:2510-0:547:1676":{"id":"b:2:2510-0:547:1676","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2483:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"SockAddr","id":"0:547:1676","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2512:680"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:551:413":{"id":"0:551:413","crate_id":0,"name":"clone","span":{"filename":"src/sockaddr.rs","begin":[20,9],"end":[20,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SockAddr","id":"0:547:1676","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:2665:225-0:579:1692":{"id":"a:2:2665:225-0:579:1692","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2665:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Domain","id":"0:579:1692","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:206:2646":{"id":"0:206:2646","crate_id":0,"name":"join_multicast_v6","span":{"filename":"src/socket.rs","begin":[1537,4],"end":[1551,5]},"visibility":"public","docs":"Join a multicast group using `IPV6_ADD_MEMBERSHIP` option on this socket.\n\nSome OSs use `IPV6_JOIN_GROUP` for this option.\n\nThis function specifies a new multicast group for this socket to join.\nThe address must be a valid multicast address, and `interface` is the\nindex of the interface to join/leave (or 0 to indicate any interface).","links":{},"attrs":["#[cfg(not(target_os = \"nto\"))]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["multiaddr",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"Ipv6Addr","id":"1:8523:2050","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],["interface",{"kind":"primitive","inner":"u32"}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:2907:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2516-0:603:1730":{"id":"b:2:2516-0:603:1730","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2490:234","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2486:235","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Protocol","id":"0:603:1730","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2519:127","2:2520:1438"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"a:2:2665:225-0:107:1677":{"id":"a:2:2665:225-0:107:1677","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2665:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Socket","id":"0:107:1677","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:107:1677":{"id":"0:107:1677","crate_id":0,"name":"Socket","span":{"filename":"src/socket.rs","begin":[73,0],"end":[75,1]},"visibility":"public","docs":"Owned wrapper around a system socket.\n\nThis type simply wraps an instance of a file descriptor (`c_int`) on Unix\nand an instance of `SOCKET` on Windows. This is the main type exported by\nthis crate and is intended to mirror the raw semantics of sockets on\nplatforms as closely as possible. Almost all methods correspond to\nprecisely one libc or OS API call which is essentially just a \"Rustic\ntranslation\" of what's below.\n\n## Converting to and from other types\n\nThis type can be freely converted into the network primitives provided by\nthe standard library, such as [`TcpStream`] or [`UdpSocket`], using the\n[`From`] trait, see the example below.\n\n[`TcpStream`]: std::net::TcpStream\n[`UdpSocket`]: std::net::UdpSocket\n\n# Notes\n\nSome methods that set options on `Socket` require two system calls to set\nthere options without overwriting previously set options. We do this by\nfirst getting the current settings, applying the desired changes and than\nupdating the settings. This means that the operation is **not** atomic. This\ncan lead to a data race when two threads are changing options in parallel.\n\n# Examples\n```no_run\n# fn main() -> std::io::Result<()> {\nuse std::net::{SocketAddr, TcpListener};\nuse socket2::{Socket, Domain, Type};\n\n// create a TCP listener\nlet socket = Socket::new(Domain::IPV6, Type::STREAM, None)?;\n\nlet address: SocketAddr = \"[::1]:12345\".parse().unwrap();\nlet address = address.into();\nsocket.bind(&address)?;\nsocket.listen(128)?;\n\nlet listener: TcpListener = socket.into();\n// ...\n# drop(listener);\n# Ok(()) }\n```","links":{"std::net::UdpSocket":"1:4122:2773","`From`":"2:2483:132","std::net::TcpStream":"1:4019:2115"},"attrs":[],"deprecation":null,"kind":"struct","inner":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["0:110","0:153","0:181","0:205","0:226","a:2:2651:217-0:107:1677","a:2:7786:9761-0:107:1677","a:2:2715:3673-0:107:1677","a:2:2665:225-0:107:1677","a:2:7787:9760-0:107:1677","b:2:2237-0:107:1677","b:2:2510-0:107:1677","b:2:2234-0:107:1677","b:2:2516-0:107:1677","b:2:2506-0:107:1677","b:2:3306-0:107:1677","b:2:2521-0:107:1677","0:244","0:231","0:567","0:240","0:569","0:235","0:484","0:488","0:482","0:480","0:563","0:561","0:486","0:571","0:249","0:490","0:565"]}},"0:553:2384":{"id":"0:553:2384","crate_id":0,"name":"Index","span":{"filename":"src/socket.rs","begin":[798,4],"end":[798,14]},"visibility":"default","docs":"An interface index.","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"kind":{"tuple":["0:555:1564"]},"discriminant":null}},"b:2:2234-0:591:1708":{"id":"b:2:2234-0:591:1708","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2658:2041","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2228:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Type","id":"0:591:1708","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2236:3445"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:500:1700":{"id":"0:500:1700","crate_id":0,"name":"UNIX","span":{"filename":"src/lib.rs","begin":[214,4],"end":[214,50]},"visibility":"public","docs":"Domain for Unix socket communication, corresponding to `AF_UNIX`.","links":{},"attrs":[],"deprecation":null,"kind":"assoc_const","inner":{"type":{"kind":"resolved_path","inner":{"name":"Domain","id":"0:579:1692","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"default":"_"}},"5:687:10176":{"id":"5:687:10176","crate_id":5,"name":"clone_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["target",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"T"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:7786:9761-0:525:1765":{"id":"a:2:7786:9761-0:525:1765","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:7786:9761","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"MaybeUninitSlice","id":"0:525:1765","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}},"0:497":{"id":"0:497","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[206,0],"end":[223,1]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"Domain","id":"0:579:1692","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:498:1694","0:499:1697","0:500:1700","0:501:1703"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:136:2301":{"id":"0:136:2301","crate_id":0,"name":"recv_from","span":{"filename":"src/socket.rs","begin":[527,4],"end":[529,5]},"visibility":"public","docs":"Receives data from the socket. On success, returns the number of bytes\nread and the address from whence the data came.\n\nAdditional documentation can be found in manual of the OS:\n\n * DragonFly BSD: <https://man.dragonflybsd.org/?command=recvfrom&section=2>\n * FreeBSD: <https://www.freebsd.org/cgi/man.cgi?query=recvfrom&sektion=2>\n * Linux: <https://man7.org/linux/man-pages/man2/recvfrom.2.html>\n * macOS: <https://developer.apple.com/library/archive/documentation/System/Conceptual/ManPages_iPhoneOS/man2/recvfrom.2.html> (archived, actually for iOS)\n * NetBSD: <https://man.netbsd.org/recvfrom.2>\n * OpenBSD: <https://man.openbsd.org/recvfrom.2>\n * iOS: <https://developer.apple.com/library/archive/documentation/System/Conceptual/ManPages_iPhoneOS/man2/recvfrom.2.html> (archived)\n * illumos: <https://illumos.org/man/3SOCKET/recvfrom>\n * Windows: <https://docs.microsoft.com/en-us/windows/win32/api/winsock2/nf-winsock2-recvfrom>\n\n# Safety\n\n`recv_from` makes the same safety guarantees regarding the `buf`fer as\n[`recv`].\n\n[`recv`]: Socket::recv","links":{"Socket::recv":"0:130:2245"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"resolved_path","inner":{"name":"MaybeUninit","id":"2:29621:1624","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"u8"}}],"bindings":[]}}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:2907:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"primitive","inner":"usize"},{"kind":"resolved_path","inner":{"name":"SockAddr","id":"0:547:1676","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:186:2570":{"id":"0:186:2570","crate_id":0,"name":"join_ssm_v4","span":{"filename":"src/socket.rs","begin":[1275,4],"end":[1294,5]},"visibility":"public","docs":"Join a multicast SSM channel using `IP_ADD_SOURCE_MEMBERSHIP` option on this socket.\n\nThis function specifies a new multicast channel for this socket to join.\nThe group must be a valid SSM group address, the source must be the address of the sender\nand `interface` is the address of the local interface with which the system should join the\nmulticast group. If it's [`Ipv4Addr::UNSPECIFIED`] (`INADDR_ANY`) then\nan appropriate interface is chosen by the system.","links":{"`Ipv4Addr::UNSPECIFIED`":"1:3635:2995"},"attrs":["#[cfg(not(any(target_os = \"dragonfly\", target_os = \"haiku\", target_os =\n\"netbsd\", target_os = \"openbsd\", target_os = \"redox\", target_os = \"fuchsia\",\ntarget_os = \"nto\",)))]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["source",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"Ipv4Addr","id":"1:8506:2045","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],["group",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"Ipv4Addr","id":"1:8506:2045","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],["interface",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"Ipv4Addr","id":"1:8506:2045","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:2907:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11579:34718":{"id":"2:11579:34718","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12335:409","self::pattern":"2:11169:19579"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11174:13527","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:122:2198":{"id":"0:122:2198","crate_id":0,"name":"accept_raw","span":{"filename":"src/socket.rs","begin":[303,4],"end":[305,5]},"visibility":"public","docs":"Accept a new incoming connection from this listener.\n\nThis function directly corresponds to the `accept(2)` function on\nWindows and Unix.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:2907:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"resolved_path","inner":{"name":"Socket","id":"0:107:1677","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},{"kind":"resolved_path","inner":{"name":"SockAddr","id":"0:547:1676","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11492:12852":{"id":"2:11492:12852","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:12335:409"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Chars","id":"2:50079:12833","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:238:2768":{"id":"0:238:2768","crate_id":0,"name":"read_vectored","span":{"filename":"src/socket.rs","begin":[1984,4],"end":[1988,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(target_os = \"redox\"))]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["bufs",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"resolved_path","inner":{"name":"IoSliceMut","id":"1:3427:2080","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:2907:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2506-0:552:1684":{"id":"b:2:2506-0:552:1684","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2483:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2480:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"InterfaceIndexOrAddress","id":"0:552:1684","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2509:2023"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"a:2:7787:9760-0:107:1677":{"id":"a:2:7787:9760-0:107:1677","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:7787:9760","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Socket","id":"0:107:1677","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:613":{"id":"0:613","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[297,26],"end":[297,35]},"visibility":"crate","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"2:2280:185","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Protocol","id":"0:603:1730","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Protocol","id":"0:603:1730","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:614:601"],"negative":false,"synthetic":false,"blanket_impl":null}},"a:2:2715:3673-0:615:1755":{"id":"a:2:2715:3673-0:615:1755","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2715:3673","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RecvFlags","id":"0:615:1755","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"b:2:3306-0:627:1775":{"id":"b:2:3306-0:627:1775","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2658:2041","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3304:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"TcpKeepalive","id":"0:627:1775","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3308:1451"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:544:1790":{"id":"0:544:1790","crate_id":0,"name":"with_time","span":{"filename":"src/lib.rs","begin":[456,4],"end":[461,5]},"visibility":"public","docs":"Set the amount of time after which TCP keepalive probes will be sent on\nidle connections.\n\nThis will set `TCP_KEEPALIVE` on macOS and iOS, and\n`TCP_KEEPIDLE` on all other Unix operating systems, except\nOpenBSD and Haiku which don't support any way to set this\noption. On Windows, this sets the value of the `tcp_keepalive`\nstruct's `keepalivetime` field.\n\nSome platforms specify this value in seconds, so sub-second\nspecifications may be omitted.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["time",{"kind":"resolved_path","inner":{"name":"Duration","id":"2:50879:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:2715:3673-0:525:1765":{"id":"a:2:2715:3673-0:525:1765","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2715:3673","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"MaybeUninitSlice","id":"0:525:1765","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:509":{"id":"0:509","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[278,0],"end":[282,1]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2483:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"i32"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Type","id":"0:591:1708","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:510:680"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:2:2521-0:603:1730":{"id":"b:2:2521-0:603:1730","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2480:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2490:234","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Protocol","id":"0:603:1730","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2524:127","2:2525:1437"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:129:2239":{"id":"0:129:2239","crate_id":0,"name":"shutdown","span":{"filename":"src/socket.rs","begin":[392,4],"end":[394,5]},"visibility":"public","docs":"Shuts down the read, write, or both halves of this connection.\n\nThis function will cause all pending and future I/O on the specified\nportions to return immediately with an appropriate value.\n\nAdditional documentation can be found in manual of the OS:\n\n * DragonFly BSD: <https://man.dragonflybsd.org/?command=shutdown&section=2>\n * FreeBSD: <https://www.freebsd.org/cgi/man.cgi?query=shutdown&sektion=2>\n * Linux: <https://man7.org/linux/man-pages/man2/shutdown.2.html>\n * macOS: <https://developer.apple.com/library/archive/documentation/System/Conceptual/ManPages_iPhoneOS/man2/shutdown.2.html> (archived, actually for iOS)\n * NetBSD: <https://man.netbsd.org/shutdown.2>\n * OpenBSD: <https://man.openbsd.org/shutdown.2>\n * iOS: <https://developer.apple.com/library/archive/documentation/System/Conceptual/ManPages_iPhoneOS/man2/shutdown.2.html> (archived)\n * illumos: <https://illumos.org/man/3SOCKET/shutdown>\n * Windows: <https://docs.microsoft.com/en-us/windows/win32/api/winsock2/nf-winsock2-shutdown>","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["how",{"kind":"resolved_path","inner":{"name":"Shutdown","id":"1:8685:2081","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:2907:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11564:34715":{"id":"2:11564:34715","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"1:12335:409","self::pattern":"2:11169:19579"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11174:13527","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11174:13527","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"2:11194:19576","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11576:34717":{"id":"2:11576:34717","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12335:409","self::pattern":"2:11169:19579"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11174:13527","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11174:13527","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11189:19577","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:174:2481":{"id":"0:174:2481","crate_id":0,"name":"send_buffer_size","span":{"filename":"src/socket.rs","begin":[1015,4],"end":[1020,5]},"visibility":"public","docs":"Get the value of the `SO_SNDBUF` option on this socket.\n\nFor more information about this option, see [`set_send_buffer_size`].\n\n[`set_send_buffer_size`]: Socket::set_send_buffer_size","links":{"Socket::set_send_buffer_size":"0:176:2486"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:2907:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:220:2696":{"id":"0:220:2696","crate_id":0,"name":"only_v6","span":{"filename":"src/socket.rs","begin":[1689,4],"end":[1694,5]},"visibility":"public","docs":"Get the value of the `IPV6_V6ONLY` option for this socket.\n\nFor more information about this option, see [`set_only_v6`].\n\n[`set_only_v6`]: Socket::set_only_v6","links":{"Socket::set_only_v6":"0:222:2704"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:2907:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"bool"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:602:601":{"id":"0:602:601","crate_id":0,"name":"eq","span":{"filename":"src/lib.rs","begin":[246,26],"end":[246,35]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"Type","id":"0:591:1708","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2510-0:261:1678":{"id":"b:2:2510-0:261:1678","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2483:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"SockRef","id":"0:261:1678","args":{"angle_bracketed":{"args":[{"lifetime":"'s"}],"bindings":[]}}}},"items":["2:2512:680"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:632:656":{"id":"0:632:656","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[401,9],"end":[401,14]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Formatter","id":"2:8609:131","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Result","id":"2:8598:207","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3306-0:603:1730":{"id":"b:2:3306-0:603:1730","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2658:2041","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3304:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Protocol","id":"0:603:1730","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3308:1451"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:244":{"id":"0:244","crate_id":0,"name":null,"span":{"filename":"src/socket.rs","begin":[2006,0],"end":[2019,1]},"visibility":{"restricted":{"parent":"0:73:1640","path":"::socket"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["write_all_vectored","write_all","write_fmt","write_vectored","is_write_vectored","by_ref"],"trait":{"name":"Write","id":"1:3466:2078","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"resolved_path","inner":{"name":"Socket","id":"0:107:1677","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"items":["0:246:1637","0:247:2769","0:248:2770"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:241:1637":{"id":"0:241:1637","crate_id":0,"name":"write","span":{"filename":"src/socket.rs","begin":[1992,4],"end":[1994,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:2907:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:590:601":{"id":"0:590:601","crate_id":0,"name":"eq","span":{"filename":"src/lib.rs","begin":[203,26],"end":[203,35]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"Domain","id":"0:579:1692","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:54:2005":{"id":"0:54:2005","crate_id":0,"name":"as_socket","span":{"filename":"src/sockaddr.rs","begin":[195,4],"end":[223,5]},"visibility":"public","docs":"Returns this address as a `SocketAddr` if it is in the `AF_INET` (IPv4)\nor `AF_INET6` (IPv6) family, otherwise returns `None`.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48125:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"SocketAddr","id":"1:8625:1626","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11558:34711":{"id":"2:11558:34711","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11498:34702":{"id":"2:11498:34702","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"LinesAny","id":"2:50373:12848","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:482":{"id":"0:482","crate_id":0,"name":null,"span":{"filename":"src/sys/unix.rs","begin":[2680,0],"end":[2684,1]},"visibility":{"restricted":{"parent":"0:275:1673","path":"::sys"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"AsRawFd","id":"1:5014:2777","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"crate::Socket","id":"0:107:1677","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:483:2824"],"negative":false,"synthetic":false,"blanket_impl":null}},"a:2:7787:9760-0:552:1684":{"id":"a:2:7787:9760-0:552:1684","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:7787:9760","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"InterfaceIndexOrAddress","id":"0:552:1684","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:135:2295":{"id":"0:135:2295","crate_id":0,"name":"peek","span":{"filename":"src/socket.rs","begin":[513,4],"end":[515,5]},"visibility":"public","docs":"Receives data on the socket from the remote adress to which it is\nconnected, without removing that data from the queue. On success,\nreturns the number of bytes peeked.\n\nSuccessive calls return the same data. This is accomplished by passing\n`MSG_PEEK` as a flag to the underlying `recv` system call.\n\n# Safety\n\n`peek` makes the same safety guarantees regarding the `buf`fer as\n[`recv`].\n\n[`recv`]: Socket::recv","links":{"Socket::recv":"0:130:2245"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"resolved_path","inner":{"name":"MaybeUninit","id":"2:29621:1624","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"u8"}}],"bindings":[]}}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:2907:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5286:35370":{"id":"5:5286:35370","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:288:9688","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:6908:10211","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Box","id":"5:288:9688","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:6908:10211","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:49:796":{"id":"0:49:796","crate_id":0,"name":"len","span":{"filename":"src/sockaddr.rs","begin":[167,4],"end":[169,5]},"visibility":"public","docs":"Returns the size of this address in bytes.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"socklen_t","id":"20:1856:1918","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:541:543":{"id":"0:541:543","crate_id":0,"name":"deref_mut","span":{"filename":"src/lib.rs","begin":[393,4],"end":[395,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"resolved_path","inner":{"name":"MaybeUninit","id":"2:29621:1624","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"u8"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11477:34699":{"id":"2:11477:34699","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2506-0:615:1755":{"id":"b:2:2506-0:615:1755","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2483:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2480:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RecvFlags","id":"0:615:1755","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2509:2023"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:2521-0:579:1692":{"id":"b:2:2521-0:579:1692","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2480:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2490:234","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Domain","id":"0:579:1692","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2524:127","2:2525:1437"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"5:5303:3650":{"id":"5:5303:3650","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7157:221"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7157:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:589":{"id":"0:589","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[203,26],"end":[203,35]},"visibility":"crate","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"2:2280:185","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Domain","id":"0:579:1692","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Domain","id":"0:579:1692","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:590:601"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:510:680":{"id":"0:510:680","crate_id":0,"name":"from","span":{"filename":"src/lib.rs","begin":[279,4],"end":[281,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["t",{"kind":"resolved_path","inner":{"name":"c_int","id":"20:43:1675","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Type","id":"0:591:1708","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:146:2355":{"id":"0:146:2355","crate_id":0,"name":"send_out_of_band","span":{"filename":"src/socket.rs","begin":[677,4],"end":[679,5]},"visibility":"public","docs":"Sends out-of-band (OOB) data on the socket to connected peer\nby setting the `MSG_OOB` flag for this call.\n\nFor more information, see [`send`], [`out_of_band_inline`].\n\n[`send`]: #method.send\n[`out_of_band_inline`]: #method.out_of_band_inline","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:2907:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:7787:9760-0:525:1765":{"id":"a:2:7787:9760-0:525:1765","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:7787:9760","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"MaybeUninitSlice","id":"0:525:1765","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:11500:29706":{"id":"2:11500:29706","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"1:12335:409","self::pattern":"2:11169:19579"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11174:13527","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11468:796":{"id":"2:11468:796","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\nBasic usage:\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"1:12335:409"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2237-0:547:1676":{"id":"b:2:2237-0:547:1676","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2658:2041","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2231:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"SockAddr","id":"0:547:1676","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2239:25165"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:273":{"id":"0:273","crate_id":0,"name":null,"span":{"filename":"src/sockref.rs","begin":[115,0],"end":[123,1]},"visibility":{"restricted":{"parent":"0:251:1670","path":"::sockref"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:8649:111","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"SockRef","id":"0:261:1678","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"items":["0:274:656"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:157:2404":{"id":"0:157:2404","crate_id":0,"name":"take_error","span":{"filename":"src/socket.rs","begin":[841,4],"end":[847,5]},"visibility":"public","docs":"Get the value of the `SO_ERROR` option on this socket.\n\nThis will retrieve the stored error in the underlying socket, clearing\nthe field in the process. This can be useful for checking errors between\ncalls.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:2907:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48125:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"io::Error","id":"1:2909:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:222:2704":{"id":"0:222:2704","crate_id":0,"name":"set_only_v6","span":{"filename":"src/socket.rs","begin":[1704,4],"end":[1713,5]},"visibility":"public","docs":"Set the value for the `IPV6_V6ONLY` option on this socket.\n\nIf this is set to `true` then the socket is restricted to sending and\nreceiving IPv6 packets only. In this case two IPv4 and IPv6 applications\ncan bind the same port at the same time.\n\nIf this is set to `false` then the socket can be used to send and\nreceive packets from an IPv4-mapped IPv6 address.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["only_v6",{"kind":"primitive","inner":"bool"}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:2907:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:120:2189":{"id":"0:120:2189","crate_id":0,"name":"listen","span":{"filename":"src/socket.rs","begin":[251,4],"end":[253,5]},"visibility":"public","docs":"Mark a socket as ready to accept incoming connection requests using\n[`Socket::accept()`].\n\nThis function directly corresponds to the `listen(2)` function on\nWindows and Unix.\n\nAn error will be returned if `listen` or `connect` has already been\ncalled on this builder.\n\nAdditional documentation can be found in manual of the OS:\n\n * DragonFly BSD: <https://man.dragonflybsd.org/?command=listen&section=2>\n * FreeBSD: <https://www.freebsd.org/cgi/man.cgi?query=listen&sektion=2>\n * Linux: <https://man7.org/linux/man-pages/man2/listen.2.html>\n * macOS: <https://developer.apple.com/library/archive/documentation/System/Conceptual/ManPages_iPhoneOS/man2/listen.2.html> (archived, actually for iOS)\n * NetBSD: <https://man.netbsd.org/listen.2>\n * OpenBSD: <https://man.openbsd.org/listen.2>\n * iOS: <https://developer.apple.com/library/archive/documentation/System/Conceptual/ManPages_iPhoneOS/man2/listen.2.html> (archived)\n * illumos: <https://illumos.org/man/3SOCKET/listen>\n * Windows: <https://docs.microsoft.com/en-us/windows/win32/api/winsock2/nf-winsock2-listen>","links":{"`Socket::accept()`":"0:121:2195"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["backlog",{"kind":"resolved_path","inner":{"name":"c_int","id":"20:43:1675","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:2907:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:119:2178":{"id":"0:119:2178","crate_id":0,"name":"connect_timeout","span":{"filename":"src/socket.rs","begin":[226,4],"end":[240,5]},"visibility":"public","docs":"Initiate a connection on this socket to the specified address, only\nonly waiting for a certain period of time for the connection to be\nestablished.\n\nUnlike many other methods on `Socket`, this does *not* correspond to a\nsingle C function. It sets the socket to nonblocking mode, connects via\nconnect(2), and then waits for the connection to complete with poll(2)\non Unix and select on Windows. When the connection is complete, the\nsocket is set back to blocking mode. On Unix, this will loop over\n`EINTR` errors.\n\n# Warnings\n\nThe non-blocking state of the socket is overridden by this function -\nit will be returned in blocking mode on success, and in an indeterminate\nstate on failure.\n\nIf the connection request times out, it may still be processing in the\nbackground - a second call to `connect` or `connect_timeout` may fail.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["addr",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"SockAddr","id":"0:547:1676","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],["timeout",{"kind":"resolved_path","inner":{"name":"Duration","id":"2:50879:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:2907:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:125:2213":{"id":"0:125:2213","crate_id":0,"name":"peer_addr","span":{"filename":"src/socket.rs","begin":[334,4],"end":[336,5]},"visibility":"public","docs":"Returns the socket address of the remote peer of this socket.\n\nThis function directly corresponds to the `getpeername(2)` function on\nWindows and Unix.\n\nAdditional documentation can be found in manual of the OS:\n\n * DragonFly BSD: <https://man.dragonflybsd.org/?command=getpeername&section=2>\n * FreeBSD: <https://www.freebsd.org/cgi/man.cgi?query=getpeername&sektion=2>\n * Linux: <https://man7.org/linux/man-pages/man2/getpeername.2.html>\n * macOS: <https://developer.apple.com/library/archive/documentation/System/Conceptual/ManPages_iPhoneOS/man2/getpeername.2.html> (archived, actually for iOS)\n * NetBSD: <https://man.netbsd.org/getpeername.2>\n * OpenBSD: <https://man.openbsd.org/getpeername.2>\n * iOS: <https://developer.apple.com/library/archive/documentation/System/Conceptual/ManPages_iPhoneOS/man2/getpeername.2.html> (archived)\n * illumos: <https://illumos.org/man/3SOCKET/getpeername>\n * Windows: <https://docs.microsoft.com/en-us/windows/win32/api/winsock2/nf-winsock2-getpeername>\n\n# Notes\n\nThis returns an error if the socket is not [`connect`ed].\n\n[`connect`ed]: Socket::connect","links":{"Socket::connect":"0:118:2158"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:2907:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"SockAddr","id":"0:547:1676","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:7786:9761-0:627:1775":{"id":"a:2:7786:9761-0:627:1775","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:7786:9761","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"TcpKeepalive","id":"0:627:1775","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"b:2:2521-0:615:1755":{"id":"b:2:2521-0:615:1755","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2480:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2490:234","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RecvFlags","id":"0:615:1755","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2524:127","2:2525:1437"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"a:2:7786:9761-0:579:1692":{"id":"a:2:7786:9761-0:579:1692","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:7786:9761","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Domain","id":"0:579:1692","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:531:656":{"id":"0:531:656","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[368,4],"end":[370,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["fmt",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"fmt::Formatter","id":"2:8609:131","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"fmt::Result","id":"2:8598:207","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2506-0:261:1678":{"id":"b:2:2506-0:261:1678","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2483:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2480:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"SockRef","id":"0:261:1678","args":{"angle_bracketed":{"args":[{"lifetime":"'s"}],"bindings":[]}}}},"items":["2:2509:2023"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"a:2:2715:3673-0:547:1676":{"id":"a:2:2715:3673-0:547:1676","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2715:3673","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"SockAddr","id":"0:547:1676","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:555:1564":{"id":"0:555:1564","crate_id":0,"name":"0","span":{"filename":"src/socket.rs","begin":[798,10],"end":[798,13]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"struct_field","inner":{"kind":"primitive","inner":"u32"}},"0:139:2310":{"id":"0:139:2310","crate_id":0,"name":"recv_from_vectored_with_flags","span":{"filename":"src/socket.rs","begin":[578,4],"end":[584,5]},"visibility":"public","docs":"Identical to [`recv_from_vectored`] but allows for specification of\narbitrary flags to the underlying `recvmsg`/`WSARecvFrom` call.\n\n[`recv_from_vectored`]: Socket::recv_from_vectored\n\n# Safety\n\n`recv_from_vectored` makes the same safety guarantees regarding `bufs`\nas [`recv_vectored`].\n\n[`recv_vectored`]: Socket::recv_vectored","links":{"Socket::recv_from_vectored":"0:138:2309","Socket::recv_vectored":"0:133:2280"},"attrs":["#[cfg(not(target_os = \"redox\"))]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["bufs",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"resolved_path","inner":{"name":"MaybeUninitSlice","id":"0:525:1765","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}}],["flags",{"kind":"resolved_path","inner":{"name":"c_int","id":"20:43:1675","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:2907:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"primitive","inner":"usize"},{"kind":"resolved_path","inner":{"name":"RecvFlags","id":"0:615:1755","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},{"kind":"resolved_path","inner":{"name":"SockAddr","id":"0:547:1676","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:686:10175":{"id":"5:686:10175","crate_id":5,"name":"to_owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"generic","inner":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:126:34":{"id":"0:126:34","crate_id":0,"name":"type","span":{"filename":"src/socket.rs","begin":[340,4],"end":[342,5]},"visibility":"public","docs":"Returns the [`Type`] of this socket by checking the `SO_TYPE` option on\nthis socket.","links":{"`Type`":"0:591:1708"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:2907:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Type","id":"0:591:1708","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:390":{"id":"0:390","crate_id":0,"name":null,"span":{"filename":"src/sys/unix.rs","begin":[526,0],"end":[534,1]},"visibility":{"restricted":{"parent":"0:275:1673","path":"::sys"}},"docs":null,"links":{},"attrs":["#[cfg(not(target_os = \"redox\"))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:8649:111","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RecvFlags","id":"0:615:1755","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:391:656"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:2:2516-0:627:1775":{"id":"b:2:2516-0:627:1775","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2490:234","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2486:235","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"TcpKeepalive","id":"0:627:1775","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2519:127","2:2520:1438"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:594":{"id":"0:594","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[246,9],"end":[246,13]},"visibility":"crate","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"2:2663:108","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Type","id":"0:591:1708","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:193:2603":{"id":"0:193:2603","crate_id":0,"name":"multicast_ttl_v4","span":{"filename":"src/socket.rs","begin":[1389,4],"end":[1394,5]},"visibility":"public","docs":"Get the value of the `IP_MULTICAST_TTL` option for this socket.\n\nFor more information about this option, see [`set_multicast_ttl_v4`].\n\n[`set_multicast_ttl_v4`]: Socket::set_multicast_ttl_v4","links":{"Socket::set_multicast_ttl_v4":"0:195:2610"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:2907:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"u32"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2237-0:525:1765":{"id":"b:2:2237-0:525:1765","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2658:2041","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2231:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"MaybeUninitSlice","id":"0:525:1765","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:2239:25165"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:183:2554":{"id":"0:183:2554","crate_id":0,"name":"leave_multicast_v4","span":{"filename":"src/socket.rs","begin":[1181,4],"end":[1194,5]},"visibility":"public","docs":"Leave a multicast group using `IP_DROP_MEMBERSHIP` option on this socket.\n\nFor more information about this option, see [`join_multicast_v4`].\n\n[`join_multicast_v4`]: Socket::join_multicast_v4","links":{"Socket::join_multicast_v4":"0:182:2543"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["multiaddr",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"Ipv4Addr","id":"1:8506:2045","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],["interface",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"Ipv4Addr","id":"1:8506:2045","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:2907:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2234-0:547:1676":{"id":"b:2:2234-0:547:1676","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2658:2041","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2228:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"SockAddr","id":"0:547:1676","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2236:3445"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:11573:29709":{"id":"2:11573:29709","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"self::pattern":"2:11169:19579","prim@char":"1:12335:409"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["suffix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48125:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11174:13527","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11174:13527","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11189:19577","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:579:1692":{"id":"0:579:1692","crate_id":0,"name":"Domain","span":{"filename":"src/lib.rs","begin":[204,0],"end":[204,25]},"visibility":"public","docs":"Specification of the communication domain for a socket.\n\nThis is a newtype wrapper around an integer which provides a nicer API in\naddition to an injection point for documentation. Convenience constants such\nas [`Domain::IPV4`], [`Domain::IPV6`], etc, are provided to avoid reaching\ninto libc for various constants.\n\nThis type is freely interconvertible with C's `int` type, however, if a raw\nvalue needs to be provided.","links":{"`Domain::IPV4`":"0:498:1694","`Domain::IPV6`":"0:499:1697"},"attrs":[],"deprecation":null,"kind":"struct","inner":{"kind":{"tuple":[null]},"generics":{"params":[],"where_predicates":[]},"impls":["0:384","0:497","a:2:2651:217-0:579:1692","a:2:7786:9761-0:579:1692","a:2:2715:3673-0:579:1692","a:2:2665:225-0:579:1692","a:2:7787:9760-0:579:1692","b:2:2237-0:579:1692","b:2:2510-0:579:1692","b:2:2234-0:579:1692","b:2:2516-0:579:1692","b:2:2506-0:579:1692","b:2:3306-0:579:1692","b:2:2521-0:579:1692","b:5:683-0:579:1692","0:585","0:582","0:504","0:586","0:502","0:589","0:573","0:588","0:583"]}},"2:11493:12862":{"id":"2:11493:12862","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the last character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:12335:409"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"CharIndices","id":"2:50085:12834","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:485:680":{"id":"0:485:680","crate_id":0,"name":"from","span":{"filename":"src/sys/unix.rs","begin":[2688,4],"end":[2691,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["sock",{"kind":"resolved_path","inner":{"name":"crate::Socket","id":"0:107:1677","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"OwnedFd","id":"1:5072:2835","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:110":{"id":"0:110","crate_id":0,"name":null,"span":{"filename":"src/socket.rs","begin":[80,0],"end":[726,1]},"visibility":{"restricted":{"parent":"0:73:1640","path":"::socket"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"Socket","id":"0:107:1677","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:114:923","0:115:2136","0:117:2152","0:118:2158","0:119:2178","0:120:2189","0:121:2195","0:122:2198","0:124:2207","0:125:2213","0:126:34","0:127:2226","0:128:2180","0:129:2239","0:130:2245","0:131:2262","0:132:2256","0:133:2280","0:134:2282","0:135:2295","0:136:2301","0:137:2302","0:138:2309","0:139:2310","0:140:2329","0:141:2334","0:142:2339","0:143:2340","0:144:2345","0:145:2346","0:146:2355","0:147:2360","0:148:2361","0:149:2367","0:150:2368"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:388:2882":{"id":"0:388:2882","crate_id":0,"name":"is_end_of_record","span":{"filename":"src/sys/unix.rs","begin":[510,4],"end":[512,5]},"visibility":"public","docs":"Check if the message terminates a record.\n\nNot all socket types support the notion of records. For socket types\nthat do support it (such as [`SEQPACKET`]), a record is terminated by\nsending a message with the end-of-record flag set.\n\nOn Unix this corresponds to the `MSG_EOR` flag.\n\n[`SEQPACKET`]: Type::SEQPACKET","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:0:1806":{"id":"0:0:1806","crate_id":0,"name":"socket2","span":{"filename":"src/lib.rs","begin":[9,0],"end":[553,1]},"visibility":"public","docs":"Utilities for creating and using sockets.\n\nThe goal of this crate is to create and use a socket using advanced\nconfiguration options (those that are not available in the types in the\nstandard library) without using any unsafe code.\n\nThis crate provides as direct as possible access to the system's\nfunctionality for sockets, this means little effort to provide\ncross-platform utilities. It is up to the user to know how to use sockets\nwhen using this crate. *If you don't know how to create a socket using\nlibc/system calls then this crate is not for you*. Most, if not all,\nfunctions directly relate to the equivalent system call with no error\nhandling applied, so no handling errors such as [`EINTR`]. As a result using\nthis crate can be a little wordy, but it should give you maximal flexibility\nover configuration of sockets.\n\n[`EINTR`]: std::io::ErrorKind::Interrupted\n\n# Examples\n\n```no_run\n# fn main() -> std::io::Result<()> {\nuse std::net::{SocketAddr, TcpListener};\nuse socket2::{Socket, Domain, Type};\n\n// Create a TCP listener bound to two addresses.\nlet socket = Socket::new(Domain::IPV6, Type::STREAM, None)?;\n\nsocket.set_only_v6(false)?;\nlet address: SocketAddr = \"[::1]:12345\".parse().unwrap();\nsocket.bind(&address.into())?;\nsocket.listen(128)?;\n\nlet listener: TcpListener = socket.into();\n// ...\n# drop(listener);\n# Ok(()) }\n```\n\n## Features\n\nThis crate has a single feature `all`, which enables all functions even ones\nthat are not available on all OSs.","links":{"std::io::ErrorKind::Interrupted":"1:8333:2933"},"attrs":["#![doc(html_root_url = \"https://docs.rs/socket2/0.4\")]","#![deny(missing_docs, missing_debug_implementations, rust_2018_idioms)]","#![doc(test(attr(deny(warnings))))]"],"deprecation":null,"kind":"module","inner":{"is_crate":true,"items":["0:493-0:547:1676","0:494-0:107:1677","0:495-0:261:1678","0:496-0:552:1684","0:579:1692","0:591:1708","0:603:1730","0:615:1755","0:525:1765","0:627:1775"],"is_stripped":false}},"0:158:2412":{"id":"0:158:2412","crate_id":0,"name":"keepalive","span":{"filename":"src/socket.rs","begin":[854,4],"end":[859,5]},"visibility":"public","docs":"Get the value of the `SO_KEEPALIVE` option on this socket.\n\nFor more information about this option, see [`set_keepalive`].\n\n[`set_keepalive`]: Socket::set_keepalive","links":{"Socket::set_keepalive":"0:160:2416"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:2907:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"bool"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2516-0:107:1677":{"id":"b:2:2516-0:107:1677","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2490:234","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2486:235","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Socket","id":"0:107:1677","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2519:127","2:2520:1438"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:66:601":{"id":"0:66:601","crate_id":0,"name":"eq","span":{"filename":"src/sockaddr.rs","begin":[320,4],"end":[326,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2512:680":{"id":"2:2512:680","crate_id":2,"name":"from","span":null,"visibility":"default","docs":"Returns the argument unchanged.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["t",{"kind":"generic","inner":"T"}]],"output":{"kind":"generic","inner":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:216:2686":{"id":"0:216:2686","crate_id":0,"name":"set_multicast_loop_v6","span":{"filename":"src/socket.rs","begin":[1649,4],"end":[1658,5]},"visibility":"public","docs":"Set the value of the `IPV6_MULTICAST_LOOP` option for this socket.\n\nControls whether this socket sees the multicast packets it sends itself.\nNote that this may not have any affect on IPv4 sockets.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["loop_v6",{"kind":"primitive","inner":"bool"}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:2907:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11494:2894":{"id":"2:11494:2894","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Bytes","id":"2:50095:3624","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2234-0:107:1677":{"id":"b:2:2234-0:107:1677","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2658:2041","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2228:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Socket","id":"0:107:1677","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2236:3445"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:42:1976":{"id":"0:42:1976","crate_id":0,"name":"try_init","span":{"filename":"src/sockaddr.rs","begin":[132,4],"end":[154,5]},"visibility":"public","docs":"Initialise a `SockAddr` by calling the function `init`.\n\nThe type of the address storage and length passed to the function `init`\nis OS/architecture specific.\n\nThe address is zeroed before `init` is called and is thus valid to\ndereference and read from. The length initialised to the maximum length\nof the storage.\n\n# Safety\n\nCaller must ensure that the address family and length match the type of\nstorage address. For example if `storage.ss_family` is set to `AF_INET`\nthe `storage` must be initialised as `sockaddr_in`, setting the content\nand length appropriately.\n\n# Examples\n\n```\n# fn main() -> std::io::Result<()> {\n# #[cfg(unix)] {\nuse std::io;\nuse std::os::unix::io::AsRawFd;\n\nuse socket2::{SockAddr, Socket, Domain, Type};\n\nlet socket = Socket::new(Domain::IPV4, Type::STREAM, None)?;\n\n// Initialise a `SocketAddr` byte calling `getsockname(2)`.\nlet (_, address) = unsafe {\n    SockAddr::try_init(|addr_storage, len| {\n        // The `getsockname(2)` system call will intiliase `storage` for\n        // us, setting `len` to the correct length.\n        if libc::getsockname(socket.as_raw_fd(), addr_storage.cast(), len) == -1 {\n            Err(io::Error::last_os_error())\n        } else {\n            Ok(())\n        }\n    })\n}?;\n# drop(address);\n# }\n# Ok(())\n# }\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["init",{"kind":"generic","inner":"F"}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:2907:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"generic","inner":"T"},{"kind":"resolved_path","inner":{"name":"SockAddr","id":"0:547:1676","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"2:2921:1979","args":{"parenthesized":{"inputs":[{"kind":"raw_pointer","inner":{"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"sockaddr_storage","id":"20:1718:1917","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},{"kind":"raw_pointer","inner":{"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"socklen_t","id":"20:1856:1918","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:2907:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"a:2:7786:9761-0:615:1755":{"id":"a:2:7786:9761-0:615:1755","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:7786:9761","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RecvFlags","id":"0:615:1755","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:61":{"id":"0:61","crate_id":0,"name":null,"span":{"filename":"src/sockaddr.rs","begin":[269,0],"end":[293,1]},"visibility":{"restricted":{"parent":"0:12:1669","path":"::sockaddr"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2483:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"SocketAddrV6","id":"1:8660:1907","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"SockAddr","id":"0:547:1676","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:62:680"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:132:2256":{"id":"0:132:2256","crate_id":0,"name":"recv_with_flags","span":{"filename":"src/socket.rs","begin":[436,4],"end":[442,5]},"visibility":"public","docs":"Identical to [`recv`] but allows for specification of arbitrary flags to\nthe underlying `recv` call.\n\n[`recv`]: Socket::recv","links":{"Socket::recv":"0:130:2245"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"resolved_path","inner":{"name":"MaybeUninit","id":"2:29621:1624","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"u8"}}],"bindings":[]}}}}}}}],["flags",{"kind":"resolved_path","inner":{"name":"sys::c_int","id":"20:43:1675","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:2907:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:68":{"id":"0:68","crate_id":0,"name":null,"span":{"filename":"src/sockaddr.rs","begin":[331,0],"end":[338,1]},"visibility":{"restricted":{"parent":"0:12:1669","path":"::sockaddr"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["hash_slice"],"trait":{"name":"Hash","id":"2:8872:140","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"SockAddr","id":"0:547:1676","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:69:714"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:51:1997":{"id":"0:51:1997","crate_id":0,"name":"is_ipv4","span":{"filename":"src/sockaddr.rs","begin":[177,4],"end":[179,5]},"visibility":"public","docs":"Returns true if this address is in the `AF_INET` (IPv4) family, false otherwise.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:574:656":{"id":"0:574:656","crate_id":0,"name":"fmt","span":{"filename":"src/sys/unix.rs","begin":[347,0],"end":[362,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"std::fmt::Formatter","id":"2:8609:131","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"std::fmt::Result","id":"2:8598:207","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2506-0:627:1775":{"id":"b:2:2506-0:627:1775","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2483:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2480:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"TcpKeepalive","id":"0:627:1775","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2509:2023"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:615:1755":{"id":"0:615:1755","crate_id":0,"name":"RecvFlags","span":{"filename":"src/lib.rs","begin":[345,0],"end":[345,28]},"visibility":"public","docs":"Flags for incoming messages.\n\nFlags provide additional information about incoming messages.","links":{},"attrs":["#[cfg(not(target_os = \"redox\"))]"],"deprecation":null,"kind":"struct","inner":{"kind":{"tuple":[null]},"generics":{"params":[],"where_predicates":[]},"impls":["0:387","0:523","a:2:2651:217-0:615:1755","a:2:7786:9761-0:615:1755","a:2:2715:3673-0:615:1755","a:2:2665:225-0:615:1755","a:2:7787:9760-0:615:1755","b:2:2237-0:615:1755","b:2:2510-0:615:1755","b:2:2234-0:615:1755","b:2:2516-0:615:1755","b:2:2506-0:615:1755","b:2:3306-0:615:1755","b:2:2521-0:615:1755","b:5:683-0:615:1755","0:624","0:618","0:619","0:625","0:621","0:390","0:622"]}},"a:2:7786:9761-0:261:1678":{"id":"a:2:7786:9761-0:261:1678","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'s","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:7786:9761","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"SockRef","id":"0:261:1678","args":{"angle_bracketed":{"args":[{"lifetime":"'s"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:11491:29690":{"id":"2:11491:29690","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"2:11490:29689"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:572:680":{"id":"0:572:680","crate_id":0,"name":"from","span":{"filename":"src/socket.rs","begin":[2036,0],"end":[2036,29]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["socket",{"kind":"resolved_path","inner":{"name":"Socket","id":"0:107:1677","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"net::UdpSocket","id":"1:4122:2773","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:58:680":{"id":"0:58:680","crate_id":0,"name":"from","span":{"filename":"src/sockaddr.rs","begin":[245,4],"end":[250,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["addr",{"kind":"resolved_path","inner":{"name":"SocketAddr","id":"1:8625:1626","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"SockAddr","id":"0:547:1676","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:550":{"id":"0:550","crate_id":0,"name":null,"span":{"filename":"src/sockaddr.rs","begin":[20,9],"end":[20,14]},"visibility":{"restricted":{"parent":"0:12:1669","path":"::sockaddr"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2251:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"SockAddr","id":"0:547:1676","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:551:413"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:517:1741":{"id":"0:517:1741","crate_id":0,"name":"UDP","span":{"filename":"src/lib.rs","begin":[311,4],"end":[311,57]},"visibility":"public","docs":"Protocol corresponding to `UDP`.","links":{},"attrs":[],"deprecation":null,"kind":"assoc_const","inner":{"type":{"kind":"resolved_path","inner":{"name":"Protocol","id":"0:603:1730","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"default":"_"}},"0:586":{"id":"0:586","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[203,22],"end":[203,24]},"visibility":"crate","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"2:2285:124","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Domain","id":"0:579:1692","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:184:2560":{"id":"0:184:2560","crate_id":0,"name":"join_multicast_v4_n","span":{"filename":"src/socket.rs","begin":[1212,4],"end":[1226,5]},"visibility":"public","docs":"Join a multicast group using `IP_ADD_MEMBERSHIP` option on this socket.\n\nThis function specifies a new multicast group for this socket to join.\nThe address must be a valid multicast address, and `interface` specifies\nthe local interface with which the system should join the multicast\ngroup. See [`InterfaceIndexOrAddress`].","links":{"`InterfaceIndexOrAddress`":"0:552:1684"},"attrs":["#[cfg(not(any(target_os = \"aix\", target_os = \"haiku\", target_os = \"illumos\",\ntarget_os = \"netbsd\", target_os = \"openbsd\", target_os = \"redox\", target_os =\n\"solaris\", target_os = \"nto\",)))]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["multiaddr",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"Ipv4Addr","id":"1:8506:2045","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],["interface",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"InterfaceIndexOrAddress","id":"0:552:1684","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:2907:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:619":{"id":"0:619","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[344,15],"end":[344,20]},"visibility":"crate","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2251:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RecvFlags","id":"0:615:1755","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:620:413"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:2:2237-0:603:1730":{"id":"b:2:2237-0:603:1730","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2658:2041","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2231:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Protocol","id":"0:603:1730","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2239:25165"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:11484:29666":{"id":"2:11484:29666","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":["#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:9350:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9350:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"0:573":{"id":"0:573","crate_id":0,"name":null,"span":{"filename":"src/sys/unix.rs","begin":[347,0],"end":[362,1]},"visibility":{"restricted":{"parent":"0:275:1673","path":"::sys"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:8649:111","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Domain","id":"0:579:1692","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:574:656"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:571":{"id":"0:571","crate_id":0,"name":null,"span":{"filename":"src/socket.rs","begin":[2036,0],"end":[2036,29]},"visibility":{"restricted":{"parent":"0:73:1640","path":"::socket"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2483:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Socket","id":"0:107:1677","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"net::UdpSocket","id":"1:4122:2773","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:572:680"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:232:2767":{"id":"0:232:2767","crate_id":0,"name":"read","span":{"filename":"src/socket.rs","begin":[1958,4],"end":[1963,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:2907:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:502":{"id":"0:502","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[225,0],"end":[229,1]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2483:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"i32"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Domain","id":"0:579:1692","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:503:680"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:610":{"id":"0:610","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[297,22],"end":[297,24]},"visibility":"crate","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"2:2285:124","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Protocol","id":"0:603:1730","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:559":{"id":"0:559","crate_id":0,"name":null,"span":{"filename":"src/socket.rs","begin":[795,9],"end":[795,14]},"visibility":{"restricted":{"parent":"0:73:1640","path":"::socket"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:8649:111","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"InterfaceIndexOrAddress","id":"0:552:1684","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:560:656"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:490":{"id":"0:490","crate_id":0,"name":null,"span":{"filename":"src/sys/unix.rs","begin":[2710,0],"end":[2714,1]},"visibility":{"restricted":{"parent":"0:275:1673","path":"::sys"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"FromRawFd","id":"1:5016:2083","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"crate::Socket","id":"0:107:1677","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:491:1641"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:2:2237-0:552:1684":{"id":"b:2:2237-0:552:1684","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2658:2041","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2231:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"InterfaceIndexOrAddress","id":"0:552:1684","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2239:25165"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:3308:1451":{"id":"2:3308:1451","crate_id":2,"name":"type_id","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"TypeId","id":"2:46617:12289","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:178:2493":{"id":"0:178:2493","crate_id":0,"name":"set_write_timeout","span":{"filename":"src/socket.rs","begin":[1049,4],"end":[1051,5]},"visibility":"public","docs":"Set value for the `SO_SNDTIMEO` option on this socket.\n\nIf `timeout` is `None`, then `write` and `send` calls will block\nindefinitely.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["duration",{"kind":"resolved_path","inner":{"name":"Option","id":"2:48125:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Duration","id":"2:50879:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:2907:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:237:2767":{"id":"0:237:2767","crate_id":0,"name":"read","span":{"filename":"src/socket.rs","begin":[1977,4],"end":[1981,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:2907:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2519:127":{"id":"2:2519:127","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"U"},"trait":{"name":"TryFrom","id":"2:2490:234","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}}}}},"2:11479:1982":{"id":"2:11479:1982","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:12352:1459"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":true,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:7787:9760-0:261:1678":{"id":"a:2:7787:9760-0:261:1678","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'s","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:7787:9760","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"SockRef","id":"0:261:1678","args":{"angle_bracketed":{"args":[{"lifetime":"'s"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"a:2:2651:217-0:603:1730":{"id":"a:2:2651:217-0:603:1730","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2651:217","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Protocol","id":"0:603:1730","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"a:2:7787:9760-0:547:1676":{"id":"a:2:7787:9760-0:547:1676","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:7787:9760","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"SockAddr","id":"0:547:1676","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:11529:34704":{"id":"2:11529:34704","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"str::split_terminator":"2:11526:34703","self::pattern":"2:11169:19579","prim@char":"1:12335:409","str::split":"2:11517:29186"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitTerminator","id":"2:50177:12840","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11174:13527","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11174:13527","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11189:19577","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11538:34705":{"id":"2:11538:34705","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48125:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11174:13527","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11556:34710":{"id":"2:11556:34710","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2237-0:261:1678":{"id":"b:2:2237-0:261:1678","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2658:2041","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2231:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"SockRef","id":"0:261:1678","args":{"angle_bracketed":{"args":[{"lifetime":"'s"}],"bindings":[]}}}},"items":["2:2239:25165"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:173:2477":{"id":"0:173:2477","crate_id":0,"name":"set_reuse_address","span":{"filename":"src/socket.rs","begin":[999,4],"end":[1008,5]},"visibility":"public","docs":"Set value for the `SO_REUSEADDR` option on this socket.\n\nThis indicates that futher calls to `bind` may allow reuse of local\naddresses. For IPv4 sockets this means that a socket may bind even when\nthere's a socket already listening on this port.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["reuse",{"kind":"primitive","inner":"bool"}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:2907:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:267:227":{"id":"0:267:227","crate_id":0,"name":"Target","span":{"filename":"src/sockref.rs","begin":[72,4],"end":[72,25]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"resolved_path","inner":{"name":"Socket","id":"0:107:1677","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"0:597":{"id":"0:597","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[246,22],"end":[246,24]},"visibility":"crate","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralEq","id":"2:2662:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Type","id":"0:591:1708","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:496-0:552:1684":{"id":"0:496-0:552:1684","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[192,0],"end":[192,40]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(not(any(target_os = \"haiku\", target_os = \"illumos\", target_os =\n\"netbsd\", target_os = \"redox\", target_os = \"solaris\",)))]"],"deprecation":null,"kind":"import","inner":{"source":"socket::InterfaceIndexOrAddress","name":"InterfaceIndexOrAddress","id":"0:552:1684","glob":false}},"2:2525:1437":{"id":"2:2525:1437","crate_id":2,"name":"try_from","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["value",{"kind":"generic","inner":"U"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:48269:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"T"},"trait":{"name":"TryFrom","id":"2:2490:234","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5290:35371":{"id":"5:5290:35371","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7157:221"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}],["count",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7157:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11174:13527","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:188:2585":{"id":"0:188:2585","crate_id":0,"name":"multicast_if_v4","span":{"filename":"src/socket.rs","begin":[1336,4],"end":[1340,5]},"visibility":"public","docs":"Get the value of the `IP_MULTICAST_IF` option for this socket.\n\nFor more information about this option, see [`set_multicast_if_v4`].\n\n[`set_multicast_if_v4`]: Socket::set_multicast_if_v4","links":{"Socket::set_multicast_if_v4":"0:189:2589"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:2907:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Ipv4Addr","id":"1:8506:2045","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:150:2368":{"id":"0:150:2368","crate_id":0,"name":"send_to_vectored_with_flags","span":{"filename":"src/socket.rs","begin":[718,4],"end":[725,5]},"visibility":"public","docs":"Identical to [`send_to_vectored`] but allows for specification of\narbitrary flags to the underlying `sendmsg`/`WSASendTo` call.\n\n[`send_to_vectored`]: Socket::send_to_vectored","links":{"Socket::send_to_vectored":"0:149:2367"},"attrs":["#[cfg(not(target_os = \"redox\"))]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["bufs",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"resolved_path","inner":{"name":"IoSlice","id":"1:8414:2079","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}}],["addr",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"SockAddr","id":"0:547:1676","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],["flags",{"kind":"resolved_path","inner":{"name":"c_int","id":"20:43:1675","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:2907:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11526:34703":{"id":"2:11526:34703","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"2:11169:19579","prim@char":"1:12335:409","`DoubleEndedIterator`":"2:7120:120","str::split":"2:11517:29186","str::rsplit_terminator":"2:11529:34704"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitTerminator","id":"2:50159:12839","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11174:13527","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:2651:217-0:107:1677":{"id":"a:2:2651:217-0:107:1677","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2651:217","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Socket","id":"0:107:1677","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:569":{"id":"0:569","crate_id":0,"name":null,"span":{"filename":"src/socket.rs","begin":[2035,0],"end":[2035,31]},"visibility":{"restricted":{"parent":"0:73:1640","path":"::socket"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2483:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Socket","id":"0:107:1677","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"net::TcpListener","id":"1:4022:2772","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:570:680"],"negative":false,"synthetic":false,"blanket_impl":null}},"5:685:10174":{"id":"5:685:10174","crate_id":5,"name":"Owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"generic","inner":"T"}}},"0:248:2770":{"id":"0:248:2770","crate_id":0,"name":"flush","span":{"filename":"src/socket.rs","begin":[2016,4],"end":[2018,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:2907:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:2715:3673-0:107:1677":{"id":"a:2:2715:3673-0:107:1677","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2715:3673","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Socket","id":"0:107:1677","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:582":{"id":"0:582","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[203,9],"end":[203,13]},"visibility":"crate","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"2:2663:108","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Domain","id":"0:579:1692","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"b:2:2234-0:627:1775":{"id":"b:2:2234-0:627:1775","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2658:2041","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2228:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"TcpKeepalive","id":"0:627:1775","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2236:3445"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:243:2770":{"id":"0:243:2770","crate_id":0,"name":"flush","span":{"filename":"src/socket.rs","begin":[2001,4],"end":[2003,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:2907:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5287:3485":{"id":"5:5287:3485","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7157:221"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["from",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7157:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11174:13527","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11469:10117":{"id":"2:11469:10117","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:566:680":{"id":"0:566:680","crate_id":0,"name":"from","span":{"filename":"src/socket.rs","begin":[2033,0],"end":[2033,29]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["socket",{"kind":"resolved_path","inner":{"name":"net::UdpSocket","id":"1:4122:2773","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Socket","id":"0:107:1677","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2237-0:579:1692":{"id":"b:2:2237-0:579:1692","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2658:2041","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2231:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Domain","id":"0:579:1692","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2239:25165"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:265":{"id":"0:265","crate_id":0,"name":null,"span":{"filename":"src/sockref.rs","begin":[71,0],"end":[77,1]},"visibility":{"restricted":{"parent":"0:251:1670","path":"::sockref"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'s","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Deref","id":"2:2887:116","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"SockRef","id":"0:261:1678","args":{"angle_bracketed":{"args":[{"lifetime":"'s"}],"bindings":[]}}}},"items":["0:267:227","0:268:541"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:11496:31675":{"id":"2:11496:31675","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"2:11495:31684"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitAsciiWhitespace","id":"2:50392:12850","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:225:2715":{"id":"0:225:2715","crate_id":0,"name":"set_recv_tclass_v6","span":{"filename":"src/socket.rs","begin":[1752,4],"end":[1761,5]},"visibility":"public","docs":"Set the value of the `IPV6_RECVTCLASS` option for this socket.\n\nIf enabled, the `IPV6_TCLASS` ancillary message is passed with incoming\npackets. It contains a byte which specifies the traffic class field of\nthe packet header.","links":{},"attrs":["#[cfg(not(any(target_os = \"dragonfly\", target_os = \"fuchsia\", target_os =\n\"illumos\", target_os = \"netbsd\", target_os = \"openbsd\", target_os = \"redox\",\ntarget_os = \"solaris\", target_os = \"haiku\",)))]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["recv_tclass",{"kind":"primitive","inner":"bool"}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:2907:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2521-0:525:1765":{"id":"b:2:2521-0:525:1765","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2480:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2490:234","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"MaybeUninitSlice","id":"0:525:1765","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:2524:127","2:2525:1437"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:11499:31721":{"id":"2:11499:31721","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EncodeUtf16","id":"2:50401:12851","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:189:2589":{"id":"0:189:2589","crate_id":0,"name":"set_multicast_if_v4","span":{"filename":"src/socket.rs","begin":[1345,4],"end":[1355,5]},"visibility":"public","docs":"Set the value of the `IP_MULTICAST_IF` option for this socket.\n\nSpecifies the interface to use for routing multicast packets.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["interface",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"Ipv4Addr","id":"1:8506:2045","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:2907:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2521-0:107:1677":{"id":"b:2:2521-0:107:1677","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2480:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2490:234","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Socket","id":"0:107:1677","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2524:127","2:2525:1437"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"a:2:2651:217-0:579:1692":{"id":"a:2:2651:217-0:579:1692","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2651:217","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Domain","id":"0:579:1692","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:11471:34697":{"id":"2:11471:34697","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:2715:3673-0:591:1708":{"id":"a:2:2715:3673-0:591:1708","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2715:3673","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Type","id":"0:591:1708","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:489:680":{"id":"0:489:680","crate_id":0,"name":"from","span":{"filename":"src/sys/unix.rs","begin":[2703,4],"end":[2706,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["fd",{"kind":"resolved_path","inner":{"name":"OwnedFd","id":"1:5072:2835","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"crate::Socket","id":"0:107:1677","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11594:34722":{"id":"2:11594:34722","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"2:4493:34722"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeUnicode","id":"2:50426:12778","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:520:680":{"id":"0:520:680","crate_id":0,"name":"from","span":{"filename":"src/lib.rs","begin":[328,4],"end":[330,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["p",{"kind":"resolved_path","inner":{"name":"c_int","id":"20:43:1675","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Protocol","id":"0:603:1730","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2510-0:107:1677":{"id":"b:2:2510-0:107:1677","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2483:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Socket","id":"0:107:1677","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2512:680"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:219:2692":{"id":"0:219:2692","crate_id":0,"name":"set_unicast_hops_v6","span":{"filename":"src/socket.rs","begin":[1673,4],"end":[1682,5]},"visibility":"public","docs":"Set the value for the `IPV6_UNICAST_HOPS` option on this socket.\n\nSpecifies the hop limit for ipv6 unicast packets","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["hops",{"kind":"primitive","inner":"u32"}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:2907:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:481:2823":{"id":"0:481:2823","crate_id":0,"name":"as_fd","span":{"filename":"src/sys/unix.rs","begin":[2673,4],"end":[2676,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"BorrowedFd","id":"1:8798:2834","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:69:714":{"id":"0:69:714","crate_id":0,"name":"hash","span":{"filename":"src/sockaddr.rs","begin":[332,4],"end":[337,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["state",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"H"}}}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"H","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"std::hash::Hasher","id":"2:8886:144","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:205":{"id":"0:205","crate_id":0,"name":null,"span":{"filename":"src/socket.rs","begin":[1528,0],"end":[1762,1]},"visibility":{"restricted":{"parent":"0:73:1640","path":"::socket"}},"docs":"Socket options for IPv6 sockets, get/set using `IPPROTO_IPV6`.\n\nAdditional documentation can be found in documentation of the OS.\n* Linux: <https://man7.org/linux/man-pages/man7/ipv6.7.html>\n* Windows: <https://docs.microsoft.com/en-us/windows/win32/winsock/ipproto-ipv6-socket-options>","links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"Socket","id":"0:107:1677","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:206:2646","0:207:2656","0:208:2661","0:210:2666","0:211:2670","0:213:2676","0:214:2680","0:216:2686","0:217:2689","0:219:2692","0:220:2696","0:222:2704","0:223:2708","0:225:2715"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:2:2521-0:261:1678":{"id":"b:2:2521-0:261:1678","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2480:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2490:234","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"SockRef","id":"0:261:1678","args":{"angle_bracketed":{"args":[{"lifetime":"'s"}],"bindings":[]}}}},"items":["2:2524:127","2:2525:1437"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:5:683-0:627:1775":{"id":"b:5:683-0:627:1775","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2251:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:679:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"TcpKeepalive","id":"0:627:1775","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:685:10174","5:686:10175","5:687:10176"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:11506:29708":{"id":"2:11506:29708","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"1:12335:409","self::pattern":"2:11169:19579"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11174:13527","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11174:13527","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11189:19577","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:55:2020":{"id":"0:55:2020","crate_id":0,"name":"as_socket_ipv4","span":{"filename":"src/sockaddr.rs","begin":[227,4],"end":[232,5]},"visibility":"public","docs":"Returns this address as a [`SocketAddrV4`] if it is in the `AF_INET`\nfamily.","links":{"`SocketAddrV4`":"1:8648:1906"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48125:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"SocketAddrV4","id":"1:8648:1906","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11553:34709":{"id":"2:11553:34709","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"2:11169:19579","prim@char":"1:12335:409","`DoubleEndedIterator`":"2:7120:120","str::match_indices":"2:11550:34708"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatchIndices","id":"2:50277:12844","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11174:13527","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11174:13527","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11189:19577","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11587:26762":{"id":"2:11587:26762","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:60:680":{"id":"0:60:680","crate_id":0,"name":"from","span":{"filename":"src/sockaddr.rs","begin":[254,4],"end":[266,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["addr",{"kind":"resolved_path","inner":{"name":"SocketAddrV4","id":"1:8648:1906","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"SockAddr","id":"0:547:1676","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:192:2599":{"id":"0:192:2599","crate_id":0,"name":"set_multicast_loop_v4","span":{"filename":"src/socket.rs","begin":[1373,4],"end":[1382,5]},"visibility":"public","docs":"Set the value of the `IP_MULTICAST_LOOP` option for this socket.\n\nIf enabled, multicast packets will be looped back to the local socket.\nNote that this may not have any affect on IPv6 sockets.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["loop_v4",{"kind":"primitive","inner":"bool"}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:2907:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2234-0:261:1678":{"id":"b:2:2234-0:261:1678","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2658:2041","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2228:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"SockRef","id":"0:261:1678","args":{"angle_bracketed":{"args":[{"lifetime":"'s"}],"bindings":[]}}}},"items":["2:2236:3445"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:503:680":{"id":"0:503:680","crate_id":0,"name":"from","span":{"filename":"src/lib.rs","begin":[226,4],"end":[228,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["d",{"kind":"resolved_path","inner":{"name":"c_int","id":"20:43:1675","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Domain","id":"0:579:1692","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11591:34721":{"id":"2:11591:34721","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"2:4495:34721"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDebug","id":"2:50408:12786","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2237-0:627:1775":{"id":"b:2:2237-0:627:1775","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2658:2041","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2231:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"TcpKeepalive","id":"0:627:1775","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2239:25165"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:499:1697":{"id":"0:499:1697","crate_id":0,"name":"IPV6","span":{"filename":"src/lib.rs","begin":[211,4],"end":[211,51]},"visibility":"public","docs":"Domain for IPv6 communication, corresponding to `AF_INET6`.","links":{},"attrs":[],"deprecation":null,"kind":"assoc_const","inner":{"type":{"kind":"resolved_path","inner":{"name":"Domain","id":"0:579:1692","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"default":"_"}},"0:583":{"id":"0:583","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[203,15],"end":[203,20]},"visibility":"crate","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2251:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Domain","id":"0:579:1692","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:584:413"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:11550:34708":{"id":"2:11550:34708","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"prim@char":"1:12335:409","`DoubleEndedIterator`":"2:7120:120","str::rmatch_indices":"2:11553:34709","self::pattern":"2:11169:19579"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"MatchIndices","id":"2:50259:12843","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11174:13527","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:570:680":{"id":"0:570:680","crate_id":0,"name":"from","span":{"filename":"src/socket.rs","begin":[2035,0],"end":[2035,31]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["socket",{"kind":"resolved_path","inner":{"name":"Socket","id":"0:107:1677","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"net::TcpListener","id":"1:4022:2772","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2524:127":{"id":"2:2524:127","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"resolved_path","inner":{"name":"Infallible","id":"2:39377:12084","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"b:2:2521-0:552:1684":{"id":"b:2:2521-0:552:1684","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2480:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2490:234","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"InterfaceIndexOrAddress","id":"0:552:1684","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2524:127","2:2525:1437"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:142:2339":{"id":"0:142:2339","crate_id":0,"name":"send","span":{"filename":"src/socket.rs","begin":[636,4],"end":[638,5]},"visibility":"public","docs":"Sends data on the socket to a connected peer.\n\nThis is typically used on TCP sockets or datagram sockets which have\nbeen connected.\n\nOn success returns the number of bytes that were sent.\n\nAdditional documentation can be found in manual of the OS:\n\n * DragonFly BSD: <https://man.dragonflybsd.org/?command=send&section=2>\n * FreeBSD: <https://www.freebsd.org/cgi/man.cgi?query=send&sektion=2>\n * Linux: <https://man7.org/linux/man-pages/man2/send.2.html>\n * macOS: <https://developer.apple.com/library/archive/documentation/System/Conceptual/ManPages_iPhoneOS/man2/send.2.html> (archived, actually for iOS)\n * NetBSD: <https://man.netbsd.org/send.2>\n * OpenBSD: <https://man.openbsd.org/send.2>\n * iOS: <https://developer.apple.com/library/archive/documentation/System/Conceptual/ManPages_iPhoneOS/man2/send.2.html> (archived)\n * illumos: <https://illumos.org/man/3SOCKET/send>\n * Windows: <https://docs.microsoft.com/en-us/windows/win32/api/winsock2/nf-winsock2-send>","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:2907:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2506-0:547:1676":{"id":"b:2:2506-0:547:1676","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2483:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2480:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"SockAddr","id":"0:547:1676","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2509:2023"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"5:5301:35373":{"id":"5:5301:35373","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:7157:221"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7157:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:2665:225-0:615:1755":{"id":"a:2:2665:225-0:615:1755","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2665:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RecvFlags","id":"0:615:1755","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:11582:34719":{"id":"2:11582:34719","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12335:409","self::pattern":"2:11169:19579"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11174:13527","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11174:13527","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11189:19577","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:128:2180":{"id":"0:128:2180","crate_id":0,"name":"set_nonblocking","span":{"filename":"src/socket.rs","begin":[383,4],"end":[385,5]},"visibility":"public","docs":"Moves this socket into or out of nonblocking mode.\n\n# Notes\n\nOn Unix this corresponds to calling `fcntl` (un)setting `O_NONBLOCK`.\n\nOn Windows this corresponds to calling `ioctlsocket` (un)setting\n`FIONBIO`.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["nonblocking",{"kind":"primitive","inner":"bool"}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:2907:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:5:683-0:615:1755":{"id":"b:5:683-0:615:1755","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2251:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:679:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RecvFlags","id":"0:615:1755","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:685:10174","5:686:10175","5:687:10176"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:11593:14312":{"id":"2:11593:14312","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"2:4496:14312"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDefault","id":"2:50417:12773","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:621":{"id":"0:621","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[344,22],"end":[344,24]},"visibility":"crate","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralEq","id":"2:2662:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RecvFlags","id":"0:615:1755","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"a:2:7786:9761-0:603:1730":{"id":"a:2:7786:9761-0:603:1730","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:7786:9761","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Protocol","id":"0:603:1730","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"a:2:7787:9760-0:615:1755":{"id":"a:2:7787:9760-0:615:1755","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:7787:9760","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RecvFlags","id":"0:615:1755","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"a:2:2665:225-0:627:1775":{"id":"a:2:2665:225-0:627:1775","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2665:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"TcpKeepalive","id":"0:627:1775","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:487:1642":{"id":"0:487:1642","crate_id":0,"name":"into_raw_fd","span":{"filename":"src/sys/unix.rs","begin":[2696,4],"end":[2698,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"c_int","id":"20:43:1675","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2521-0:591:1708":{"id":"b:2:2521-0:591:1708","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2480:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2490:234","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Type","id":"0:591:1708","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2524:127","2:2525:1437"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:564:680":{"id":"0:564:680","crate_id":0,"name":"from","span":{"filename":"src/socket.rs","begin":[2032,0],"end":[2032,31]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["socket",{"kind":"resolved_path","inner":{"name":"net::TcpListener","id":"1:4022:2772","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Socket","id":"0:107:1677","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:2665:225-0:552:1684":{"id":"a:2:2665:225-0:552:1684","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2665:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"InterfaceIndexOrAddress","id":"0:552:1684","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:52:2000":{"id":"0:52:2000","crate_id":0,"name":"is_ipv6","span":{"filename":"src/sockaddr.rs","begin":[183,4],"end":[185,5]},"visibility":"public","docs":"Returns true if this address is in the `AF_INET6` (IPv6) family, false\notherwise.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2516-0:261:1678":{"id":"b:2:2516-0:261:1678","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2490:234","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2486:235","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"SockRef","id":"0:261:1678","args":{"angle_bracketed":{"args":[{"lifetime":"'s"}],"bindings":[]}}}},"items":["2:2519:127","2:2520:1438"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:563":{"id":"0:563","crate_id":0,"name":null,"span":{"filename":"src/socket.rs","begin":[2032,0],"end":[2032,31]},"visibility":{"restricted":{"parent":"0:73:1640","path":"::socket"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2483:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"TcpListener","id":"1:4022:2772","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Socket","id":"0:107:1677","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:564:680"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:64:656":{"id":"0:64:656","crate_id":0,"name":"fmt","span":{"filename":"src/sockaddr.rs","begin":[296,4],"end":[316,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["fmt",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"fmt::Formatter","id":"2:8609:131","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"fmt::Result","id":"2:8598:207","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:190:2593":{"id":"0:190:2593","crate_id":0,"name":"multicast_loop_v4","span":{"filename":"src/socket.rs","begin":[1362,4],"end":[1367,5]},"visibility":"public","docs":"Get the value of the `IP_MULTICAST_LOOP` option for this socket.\n\nFor more information about this option, see [`set_multicast_loop_v4`].\n\n[`set_multicast_loop_v4`]: Socket::set_multicast_loop_v4","links":{"Socket::set_multicast_loop_v4":"0:192:2599"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:2907:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"bool"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:272:680":{"id":"0:272:680","crate_id":0,"name":"from","span":{"filename":"src/sockref.rs","begin":[87,4],"end":[94,5]},"visibility":"default","docs":"The caller must ensure `S` is actually a socket.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["socket",{"kind":"borrowed_ref","inner":{"lifetime":"'s","mutable":false,"type":{"kind":"generic","inner":"S"}}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:7786:9761-0:547:1676":{"id":"a:2:7786:9761-0:547:1676","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:7786:9761","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"SockAddr","id":"0:547:1676","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:577":{"id":"0:577","crate_id":0,"name":null,"span":{"filename":"src/sys/unix.rs","begin":[484,0],"end":[496,1]},"visibility":{"restricted":{"parent":"0:275:1673","path":"::sys"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:8649:111","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Protocol","id":"0:603:1730","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:578:656"],"negative":false,"synthetic":false,"blanket_impl":null}},"a:2:2651:217-0:261:1678":{"id":"a:2:2651:217-0:261:1678","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'s","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2651:217","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"SockRef","id":"0:261:1678","args":{"angle_bracketed":{"args":[{"lifetime":"'s"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"b:2:2510-0:591:1708":{"id":"b:2:2510-0:591:1708","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2483:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Type","id":"0:591:1708","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2512:680"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:2510-0:552:1684":{"id":"b:2:2510-0:552:1684","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2483:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"InterfaceIndexOrAddress","id":"0:552:1684","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2512:680"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:2516-0:615:1755":{"id":"b:2:2516-0:615:1755","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2490:234","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2486:235","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RecvFlags","id":"0:615:1755","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2519:127","2:2520:1438"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:11517:29186":{"id":"2:11517:29186","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"str::split_whitespace":"2:11495:31684","prim@char":"1:12335:409","self::pattern":"2:11169:19579","`DoubleEndedIterator`":"2:7120:120","str::rsplit":"2:11523:29700"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Split","id":"2:50109:3626","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11174:13527","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11509:10156":{"id":"2:11509:10156","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"prim@char":"1:12335:409","`None`":"2:48127:176","self::pattern":"2:11169:19579"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48125:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11174:13527","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2516-0:525:1765":{"id":"b:2:2516-0:525:1765","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2490:234","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2486:235","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"MaybeUninitSlice","id":"0:525:1765","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:2519:127","2:2520:1438"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:609":{"id":"0:609","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[297,22],"end":[297,24]},"visibility":"crate","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralEq","id":"2:2662:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Protocol","id":"0:603:1730","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"a:2:2715:3673-0:579:1692":{"id":"a:2:2715:3673-0:579:1692","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2715:3673","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Domain","id":"0:579:1692","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"a:2:2665:225-0:261:1678":{"id":"a:2:2665:225-0:261:1678","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'s","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2665:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"SockRef","id":"0:261:1678","args":{"angle_bracketed":{"args":[{"lifetime":"'s"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"a:2:2715:3673-0:627:1775":{"id":"a:2:2715:3673-0:627:1775","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2715:3673","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"TcpKeepalive","id":"0:627:1775","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:521":{"id":"0:521","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[333,0],"end":[337,1]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2483:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Protocol","id":"0:603:1730","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"c_int","id":"20:43:1675","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:522:680"],"negative":false,"synthetic":false,"blanket_impl":null}},"a:2:2665:225-0:547:1676":{"id":"a:2:2665:225-0:547:1676","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2665:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"SockAddr","id":"0:547:1676","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:622":{"id":"0:622","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[344,22],"end":[344,24]},"visibility":"crate","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"2:2285:124","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RecvFlags","id":"0:615:1755","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:620:413":{"id":"0:620:413","crate_id":0,"name":"clone","span":{"filename":"src/lib.rs","begin":[344,15],"end":[344,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"RecvFlags","id":"0:615:1755","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11547:34707":{"id":"2:11547:34707","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"2:11169:19579","str::matches":"2:11544:3456","prim@char":"1:12335:409","`DoubleEndedIterator`":"2:7120:120"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatches","id":"2:50331:12847","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11174:13527","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11174:13527","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11189:19577","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11467":{"id":"2:11467","crate_id":2,"name":null,"span":null,"visibility":{"restricted":{"parent":"2:10732:1363","path":"::str"}},"docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["2:11468:796","2:11469:10117","2:11470:34696","2:11471:34697","2:11473:34698","2:11476:2896","2:11477:34699","2:11478:310","2:11479:1982","2:11480:3100","2:11482:29665","2:11484:29666","2:11486:29667","2:11488:34700","2:11489:34701","2:11490:29689","2:11491:29690","2:11492:12852","2:11493:12862","2:11494:2894","2:11495:31684","2:11496:31675","2:11497:29187","2:11498:34702","2:11499:31721","2:11500:29706","2:11503:29707","2:11506:29708","2:11509:10156","2:11513:10116","2:11517:29186","2:11520:29698","2:11523:29700","2:11526:34703","2:11529:34704","2:11532:29702","2:11535:29704","2:11538:34705","2:11541:34706","2:11544:3456","2:11547:34707","2:11550:34708","2:11553:34709","2:11556:34710","2:11558:34711","2:11560:34712","2:11562:34713","2:11563:34714","2:11564:34715","2:11567:34716","2:11570:27733","2:11573:29709","2:11576:34717","2:11579:34718","2:11582:34719","2:11585:34720","2:11587:26762","2:11588:26765","2:11589:26766","2:11590:26767","2:11591:34721","2:11593:14312","2:11594:34722"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:498:1694":{"id":"0:498:1694","crate_id":0,"name":"IPV4","span":{"filename":"src/lib.rs","begin":[208,4],"end":[208,50]},"visibility":"public","docs":"Domain for IPv4 communication, corresponding to `AF_INET`.","links":{},"attrs":[],"deprecation":null,"kind":"assoc_const","inner":{"type":{"kind":"resolved_path","inner":{"name":"Domain","id":"0:579:1692","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"default":"_"}},"0:535":{"id":"0:535","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[384,0],"end":[390,1]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Deref","id":"2:2887:116","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"MaybeUninitSlice","id":"0:525:1765","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["0:537:227","0:538:541"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:195:2610":{"id":"0:195:2610","crate_id":0,"name":"set_multicast_ttl_v4","span":{"filename":"src/socket.rs","begin":[1403,4],"end":[1412,5]},"visibility":"public","docs":"Set the value of the `IP_MULTICAST_TTL` option for this socket.\n\nIndicates the time-to-live value of outgoing multicast packets for\nthis socket. The default value is 1 which means that multicast packets\ndon't leave the local network unless explicitly requested.\n\nNote that this may not have any affect on IPv6 sockets.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["ttl",{"kind":"primitive","inner":"u32"}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:2907:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:591:1708":{"id":"0:591:1708","crate_id":0,"name":"Type","span":{"filename":"src/lib.rs","begin":[247,0],"end":[247,23]},"visibility":"public","docs":"Specification of communication semantics on a socket.\n\nThis is a newtype wrapper around an integer which provides a nicer API in\naddition to an injection point for documentation. Convenience constants such\nas [`Type::STREAM`], [`Type::DGRAM`], etc, are provided to avoid reaching\ninto libc for various constants.\n\nThis type is freely interconvertible with C's `int` type, however, if a raw\nvalue needs to be provided.","links":{"`Type::STREAM`":"0:507:1711","`Type::DGRAM`":"0:508:1715"},"attrs":[],"deprecation":null,"kind":"struct","inner":{"kind":{"tuple":[null]},"generics":{"params":[],"where_predicates":[]},"impls":["0:506","a:2:2651:217-0:591:1708","a:2:7786:9761-0:591:1708","a:2:2715:3673-0:591:1708","a:2:2665:225-0:591:1708","a:2:7787:9760-0:591:1708","b:2:2237-0:591:1708","b:2:2510-0:591:1708","b:2:2234-0:591:1708","b:2:2516-0:591:1708","b:2:2506-0:591:1708","b:2:3306-0:591:1708","b:2:2521-0:591:1708","b:5:683-0:591:1708","0:597","0:600","0:594","0:601","0:598","0:595","0:509","0:575","0:511"]}},"0:565":{"id":"0:565","crate_id":0,"name":null,"span":{"filename":"src/socket.rs","begin":[2033,0],"end":[2033,29]},"visibility":{"restricted":{"parent":"0:73:1640","path":"::socket"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2483:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"UdpSocket","id":"1:4122:2773","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Socket","id":"0:107:1677","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:566:680"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:118:2158":{"id":"0:118:2158","crate_id":0,"name":"connect","span":{"filename":"src/socket.rs","begin":[203,4],"end":[205,5]},"visibility":"public","docs":"Initiate a connection on this socket to the specified address.\n\nThis function directly corresponds to the `connect(2)` function on\nWindows and Unix.\n\nAn error will be returned if `listen` or `connect` has already been\ncalled on this builder.\n\nAdditional documentation can be found in manual of the OS:\n\n * DragonFly BSD: <https://man.dragonflybsd.org/?command=connect&section=2>\n * FreeBSD: <https://www.freebsd.org/cgi/man.cgi?query=connect&sektion=2>\n * Linux: <https://man7.org/linux/man-pages/man2/connect.2.html>\n * macOS: <https://developer.apple.com/library/archive/documentation/System/Conceptual/ManPages_iPhoneOS/man2/connect.2.html> (archived, actually for iOS)\n * NetBSD: <https://man.netbsd.org/connect.2>\n * OpenBSD: <https://man.openbsd.org/connect.2>\n * iOS: <https://developer.apple.com/library/archive/documentation/System/Conceptual/ManPages_iPhoneOS/man2/connect.2.html> (archived)\n * illumos: <https://illumos.org/man/3SOCKET/connect>\n * Windows: <https://docs.microsoft.com/en-us/windows/win32/api/winsock2/nf-winsock2-connect>\n\n# Notes\n\nWhen using a non-blocking connect (by setting the socket into\nnon-blocking mode before calling this function), socket option can't be\nset *while connecting*. This will cause errors on Windows. Socket\noptions can be safely set before and after connecting the socket.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["address",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"SockAddr","id":"0:547:1676","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:2907:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:561":{"id":"0:561","crate_id":0,"name":null,"span":{"filename":"src/socket.rs","begin":[2031,0],"end":[2031,29]},"visibility":{"restricted":{"parent":"0:73:1640","path":"::socket"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2483:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"TcpStream","id":"1:4019:2115","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Socket","id":"0:107:1677","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:562:680"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:227:2753":{"id":"0:227:2753","crate_id":0,"name":"set_tcp_keepalive","span":{"filename":"src/socket.rs","begin":[1921,4],"end":[1924,5]},"visibility":"public","docs":"Set parameters configuring TCP keepalive probes for this socket.\n\nThe supported parameters depend on the operating system, and are\nconfigured using the [`TcpKeepalive`] struct. At a minimum, all systems\nsupport configuring the [keepalive time]: the time after which the OS\nwill start sending keepalive messages on an idle connection.\n\n[keepalive time]: TcpKeepalive::with_time\n\n# Notes\n\n* This will enable `SO_KEEPALIVE` on this socket, if it is not already\n  enabled.\n* On some platforms, such as Windows, any keepalive parameters *not*\n  configured by the `TcpKeepalive` struct passed to this function may be\n  overwritten with their default values. Therefore, this function should\n  either only be called once per socket, or the same parameters should\n  be passed every time it is called.\n\n# Examples\n\n```\nuse std::time::Duration;\n\nuse socket2::{Socket, TcpKeepalive, Domain, Type};\n\n# fn main() -> std::io::Result<()> {\nlet socket = Socket::new(Domain::IPV4, Type::STREAM, None)?;\nlet keepalive = TcpKeepalive::new()\n    .with_time(Duration::from_secs(4));\n    // Depending on the target operating system, we may also be able to\n    // configure the keepalive probe interval and/or the number of\n    // retries here as well.\n\nsocket.set_tcp_keepalive(&keepalive)?;\n# Ok(()) }\n```\n","links":{"`TcpKeepalive`":"0:627:1775","TcpKeepalive::with_time":"0:544:1790"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["params",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"TcpKeepalive","id":"0:627:1775","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:2907:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:556:2386":{"id":"0:556:2386","crate_id":0,"name":"Address","span":{"filename":"src/socket.rs","begin":[800,4],"end":[800,21]},"visibility":"default","docs":"An address assigned to an interface.","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"kind":{"tuple":["0:558:1564"]},"discriminant":null}},"0:67":{"id":"0:67","crate_id":0,"name":null,"span":{"filename":"src/sockaddr.rs","begin":[329,0],"end":[329,23]},"visibility":{"restricted":{"parent":"0:12:1669","path":"::sockaddr"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"2:2285:124","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"SockAddr","id":"0:547:1676","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:202:2634":{"id":"0:202:2634","crate_id":0,"name":"set_recv_tos","span":{"filename":"src/socket.rs","begin":[1487,4],"end":[1496,5]},"visibility":"public","docs":"Set the value of the `IP_RECVTOS` option for this socket.\n\nIf enabled, the `IP_TOS` ancillary message is passed with\nincoming packets. It contains a byte which specifies the\nType of Service/Precedence field of the packet header.","links":{},"attrs":["#[cfg(not(any(target_os = \"aix\", target_os = \"dragonfly\", target_os =\n\"fuchsia\", target_os = \"illumos\", target_os = \"netbsd\", target_os = \"openbsd\",\ntarget_os = \"redox\", target_os = \"solaris\", target_os = \"haiku\", target_os =\n\"nto\",)))]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["recv_tos",{"kind":"primitive","inner":"bool"}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:2907:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3306-0:615:1755":{"id":"b:2:3306-0:615:1755","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2658:2041","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3304:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RecvFlags","id":"0:615:1755","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3308:1451"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:588":{"id":"0:588","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[203,26],"end":[203,35]},"visibility":"crate","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"2:2661:223","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Domain","id":"0:579:1692","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:596:413":{"id":"0:596:413","crate_id":0,"name":"clone","span":{"filename":"src/lib.rs","begin":[246,15],"end":[246,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Type","id":"0:591:1708","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:2715:3673-0:603:1730":{"id":"a:2:2715:3673-0:603:1730","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2715:3673","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Protocol","id":"0:603:1730","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:59":{"id":"0:59","crate_id":0,"name":null,"span":{"filename":"src/sockaddr.rs","begin":[253,0],"end":[267,1]},"visibility":{"restricted":{"parent":"0:12:1669","path":"::sockaddr"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2483:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"SocketAddrV4","id":"1:8648:1906","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"SockAddr","id":"0:547:1676","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:60:680"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:2:2234-0:603:1730":{"id":"b:2:2234-0:603:1730","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2658:2041","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2228:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Protocol","id":"0:603:1730","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2236:3445"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:627:1775":{"id":"0:627:1775","crate_id":0,"name":"TcpKeepalive","span":{"filename":"src/lib.rs","begin":[402,0],"end":[420,1]},"visibility":"public","docs":"Configures a socket's TCP keepalive parameters.\n\nSee [`Socket::set_tcp_keepalive`].","links":{"`Socket::set_tcp_keepalive`":"0:227:2753"},"attrs":[],"deprecation":null,"kind":"struct","inner":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["0:542","a:2:2651:217-0:627:1775","a:2:7786:9761-0:627:1775","a:2:2715:3673-0:627:1775","a:2:2665:225-0:627:1775","a:2:7787:9760-0:627:1775","b:2:2237-0:627:1775","b:2:2510-0:627:1775","b:2:2234-0:627:1775","b:2:2516-0:627:1775","b:2:2506-0:627:1775","b:2:3306-0:627:1775","b:2:2521-0:627:1775","b:5:683-0:627:1775","0:633","0:631"]}},"0:246:1637":{"id":"0:246:1637","crate_id":0,"name":"write","span":{"filename":"src/socket.rs","begin":[2007,4],"end":[2009,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:2907:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2510-0:627:1775":{"id":"b:2:2510-0:627:1775","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2483:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"TcpKeepalive","id":"0:627:1775","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2512:680"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:547:1676":{"id":"0:547:1676","crate_id":0,"name":"SockAddr","span":{"filename":"src/sockaddr.rs","begin":[21,0],"end":[24,1]},"visibility":"public","docs":"The address of a socket.\n\n`SockAddr`s may be constructed directly to and from the standard library\n[`SocketAddr`], [`SocketAddrV4`], and [`SocketAddrV6`] types.","links":{"`SocketAddr`":"1:8625:1626","`SocketAddrV4`":"1:8648:1906","`SocketAddrV6`":"1:8660:1907"},"attrs":[],"deprecation":null,"kind":"struct","inner":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["0:38","0:406","a:2:2651:217-0:547:1676","a:2:7786:9761-0:547:1676","a:2:2715:3673-0:547:1676","a:2:2665:225-0:547:1676","a:2:7787:9760-0:547:1676","b:2:2237-0:547:1676","b:2:2510-0:547:1676","b:2:2234-0:547:1676","b:2:2516-0:547:1676","b:2:2506-0:547:1676","b:2:3306-0:547:1676","b:2:2521-0:547:1676","b:5:683-0:547:1676","0:550","0:63","0:61","0:57","0:68","0:67","0:65","0:59"]}},"0:269":{"id":"0:269","crate_id":0,"name":null,"span":{"filename":"src/sockref.rs","begin":[82,0],"end":[95,1]},"visibility":{"restricted":{"parent":"0:251:1670","path":"::sockref"}},"docs":"On Windows, a corresponding `From<&impl AsSocket>` implementation exists.","links":{},"attrs":["#[cfg(unix)]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'s","kind":{"lifetime":{"outlives":[]}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"S"},"bounds":[{"trait_bound":{"trait":{"name":"AsFd","id":"1:5095:2776","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2483:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'s","mutable":false,"type":{"kind":"generic","inner":"S"}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"SockRef","id":"0:261:1678","args":{"angle_bracketed":{"args":[{"lifetime":"'s"}],"bindings":[]}}}},"items":["0:272:680"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:595":{"id":"0:595","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[246,15],"end":[246,20]},"visibility":"crate","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2251:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Type","id":"0:591:1708","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:596:413"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:163:2437":{"id":"0:163:2437","crate_id":0,"name":"out_of_band_inline","span":{"filename":"src/socket.rs","begin":[913,4],"end":[918,5]},"visibility":"public","docs":"Get value for the `SO_OOBINLINE` option on this socket.\n\nFor more information about this option, see [`set_out_of_band_inline`].\n\n[`set_out_of_band_inline`]: Socket::set_out_of_band_inline","links":{"Socket::set_out_of_band_inline":"0:165:2445"},"attrs":["#[cfg(not(target_os = \"redox\"))]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:2907:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"bool"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:600":{"id":"0:600","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[246,26],"end":[246,35]},"visibility":"crate","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"2:2661:223","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Type","id":"0:591:1708","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"2:11486:29667":{"id":"2:11486:29667","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":["#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:9350:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9350:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"0:211:2670":{"id":"0:211:2670","crate_id":0,"name":"multicast_if_v6","span":{"filename":"src/socket.rs","begin":[1610,4],"end":[1615,5]},"visibility":"public","docs":"Get the value of the `IPV6_MULTICAST_IF` option for this socket.\n\nFor more information about this option, see [`set_multicast_if_v6`].\n\n[`set_multicast_if_v6`]: Socket::set_multicast_if_v6","links":{"Socket::set_multicast_if_v6":"0:213:2676"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:2907:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"u32"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:391:656":{"id":"0:391:656","crate_id":0,"name":"fmt","span":{"filename":"src/sys/unix.rs","begin":[527,4],"end":[533,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"std::fmt::Formatter","id":"2:8609:131","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"std::fmt::Result","id":"2:8598:207","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:203:2635":{"id":"0:203:2635","crate_id":0,"name":"recv_tos","span":{"filename":"src/socket.rs","begin":[1515,4],"end":[1520,5]},"visibility":"public","docs":"Get the value of the `IP_RECVTOS` option for this socket.\n\nFor more information about this option, see [`set_recv_tos`].\n\n[`set_recv_tos`]: Socket::set_recv_tos","links":{"Socket::set_recv_tos":"0:202:2634"},"attrs":["#[cfg(not(any(target_os = \"aix\", target_os = \"dragonfly\", target_os =\n\"fuchsia\", target_os = \"illumos\", target_os = \"netbsd\", target_os = \"openbsd\",\ntarget_os = \"redox\", target_os = \"solaris\", target_os = \"haiku\", target_os =\n\"nto\",)))]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:2907:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"bool"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:516:1738":{"id":"0:516:1738","crate_id":0,"name":"TCP","span":{"filename":"src/lib.rs","begin":[308,4],"end":[308,57]},"visibility":"public","docs":"Protocol corresponding to `TCP`.","links":{},"attrs":[],"deprecation":null,"kind":"assoc_const","inner":{"type":{"kind":"resolved_path","inner":{"name":"Protocol","id":"0:603:1730","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"default":"_"}},"0:154:2394":{"id":"0:154:2394","crate_id":0,"name":"broadcast","span":{"filename":"src/socket.rs","begin":[814,4],"end":[819,5]},"visibility":"public","docs":"Get the value of the `SO_BROADCAST` option for this socket.\n\nFor more information about this option, see [`set_broadcast`].\n\n[`set_broadcast`]: Socket::set_broadcast","links":{"Socket::set_broadcast":"0:156:2399"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:2907:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"bool"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2521-0:627:1775":{"id":"b:2:2521-0:627:1775","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2480:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2490:234","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"TcpKeepalive","id":"0:627:1775","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2524:127","2:2525:1437"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:141:2334":{"id":"0:141:2334","crate_id":0,"name":"peek_sender","span":{"filename":"src/socket.rs","begin":[625,4],"end":[627,5]},"visibility":"public","docs":"Retrieve the sender for the data at the head of the receive queue.\n\nThis is equivalent to calling [`peek_from`] with a zero-sized buffer,\nbut suppresses the `WSAEMSGSIZE` error on Windows.\n\n[`peek_from`]: Socket::peek_from","links":{"Socket::peek_from":"0:140:2329"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:2907:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"SockAddr","id":"0:547:1676","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:493-0:547:1676":{"id":"0:493-0:547:1676","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[181,0],"end":[181,27]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"sockaddr::SockAddr","name":"SockAddr","id":"0:547:1676","glob":false}},"b:2:2506-0:579:1692":{"id":"b:2:2506-0:579:1692","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2483:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2480:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Domain","id":"0:579:1692","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2509:2023"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:3306-0:525:1765":{"id":"b:2:3306-0:525:1765","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2658:2041","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3304:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"MaybeUninitSlice","id":"0:525:1765","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:3308:1451"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"a:2:7786:9761-0:107:1677":{"id":"a:2:7786:9761-0:107:1677","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:7786:9761","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Socket","id":"0:107:1677","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:545:1801":{"id":"0:545:1801","crate_id":0,"name":"with_interval","span":{"filename":"src/lib.rs","begin":[501,4],"end":[506,5]},"visibility":"public","docs":"Set the value of the `TCP_KEEPINTVL` option. On Windows, this sets the\nvalue of the `tcp_keepalive` struct's `keepaliveinterval` field.\n\nSets the time interval between TCP keepalive probes.\n\nSome platforms specify this value in seconds, so sub-second\nspecifications may be omitted.","links":{},"attrs":["#[cfg(any(target_os = \"android\", target_os = \"dragonfly\", target_os =\n\"freebsd\", target_os = \"fuchsia\", target_os = \"illumos\", target_os = \"ios\",\ntarget_os = \"linux\", target_os = \"macos\", target_os = \"netbsd\", target_os =\n\"tvos\", target_os = \"watchos\", target_os = \"windows\",))]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["interval",{"kind":"resolved_path","inner":{"name":"Duration","id":"2:50879:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:274:656":{"id":"0:274:656","crate_id":0,"name":"fmt","span":{"filename":"src/sockref.rs","begin":[116,4],"end":[122,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"fmt::Formatter","id":"2:8609:131","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"fmt::Result","id":"2:8598:207","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2506-0:603:1730":{"id":"b:2:2506-0:603:1730","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2483:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2480:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Protocol","id":"0:603:1730","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2509:2023"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:606":{"id":"0:606","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[297,9],"end":[297,13]},"visibility":"crate","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"2:2663:108","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Protocol","id":"0:603:1730","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:198:2618":{"id":"0:198:2618","crate_id":0,"name":"set_ttl","span":{"filename":"src/socket.rs","begin":[1429,4],"end":[1431,5]},"visibility":"public","docs":"Set the value of the `IP_TTL` option for this socket.\n\nThis value sets the time-to-live field that is used in every packet sent\nfrom this socket.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["ttl",{"kind":"primitive","inner":"u32"}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:2907:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:185:2565":{"id":"0:185:2565","crate_id":0,"name":"leave_multicast_v4_n","span":{"filename":"src/socket.rs","begin":[1243,4],"end":[1257,5]},"visibility":"public","docs":"Leave a multicast group using `IP_DROP_MEMBERSHIP` option on this socket.\n\nFor more information about this option, see [`join_multicast_v4_n`].\n\n[`join_multicast_v4_n`]: Socket::join_multicast_v4_n","links":{"Socket::join_multicast_v4_n":"0:184:2560"},"attrs":["#[cfg(not(any(target_os = \"aix\", target_os = \"haiku\", target_os = \"illumos\",\ntarget_os = \"netbsd\", target_os = \"openbsd\", target_os = \"redox\", target_os =\n\"solaris\", target_os = \"nto\",)))]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["multiaddr",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"Ipv4Addr","id":"1:8506:2045","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],["interface",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"InterfaceIndexOrAddress","id":"0:552:1684","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:2907:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11480:3100":{"id":"2:11480:3100","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:48127:176"},"attrs":["#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48125:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:9350:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9350:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11503:29707":{"id":"2:11503:29707","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"prim@char":"1:12335:409","self::pattern":"2:11169:19579"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11174:13527","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:537:227":{"id":"0:537:227","crate_id":0,"name":"Target","span":{"filename":"src/lib.rs","begin":[385,4],"end":[385,36]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"slice","inner":{"kind":"resolved_path","inner":{"name":"MaybeUninit","id":"2:29621:1624","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"u8"}}],"bindings":[]}}}}}}},"b:2:2516-0:552:1684":{"id":"b:2:2516-0:552:1684","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2490:234","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2486:235","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"InterfaceIndexOrAddress","id":"0:552:1684","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2519:127","2:2520:1438"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:140:2329":{"id":"0:140:2329","crate_id":0,"name":"peek_from","span":{"filename":"src/socket.rs","begin":[615,4],"end":[617,5]},"visibility":"public","docs":"Receives data from the socket, without removing it from the queue.\n\nSuccessive calls return the same data. This is accomplished by passing\n`MSG_PEEK` as a flag to the underlying `recvfrom` system call.\n\nOn success, returns the number of bytes peeked and the address from\nwhence the data came.\n\n# Safety\n\n`peek_from` makes the same safety guarantees regarding the `buf`fer as\n[`recv`].\n\n# Note: Datagram Sockets\nFor datagram sockets, the behavior of this method when `buf` is smaller than\nthe datagram at the head of the receive queue differs between Windows and\nUnix-like platforms (Linux, macOS, BSDs, etc: colloquially termed \"*nix\").\n\nOn *nix platforms, the datagram is truncated to the length of `buf`.\n\nOn Windows, an error corresponding to `WSAEMSGSIZE` will be returned.\n\nFor consistency between platforms, be sure to provide a sufficiently large buffer to avoid\ntruncation; the exact size required depends on the underlying protocol.\n\nIf you just want to know the sender of the data, try [`peek_sender`].\n\n[`recv`]: Socket::recv\n[`peek_sender`]: Socket::peek_sender","links":{"Socket::peek_sender":"0:141:2334","Socket::recv":"0:130:2245"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"resolved_path","inner":{"name":"MaybeUninit","id":"2:29621:1624","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"u8"}}],"bindings":[]}}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:2907:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"primitive","inner":"usize"},{"kind":"resolved_path","inner":{"name":"SockAddr","id":"0:547:1676","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:511":{"id":"0:511","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[284,0],"end":[288,1]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2483:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Type","id":"0:591:1708","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"c_int","id":"20:43:1675","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:512:680"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:11478:310":{"id":"2:11478:310","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"`u8`":"1:12352:1459","str::as_mut_ptr":"2:11479:1982"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":false,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:7786:9761-0:591:1708":{"id":"a:2:7786:9761-0:591:1708","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:7786:9761","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Type","id":"0:591:1708","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:149:2367":{"id":"0:149:2367","crate_id":0,"name":"send_to_vectored","span":{"filename":"src/socket.rs","begin":[708,4],"end":[710,5]},"visibility":"public","docs":"Send data to a peer listening on `addr`. Returns the amount of bytes\nwritten.\n\nAdditional documentation can be found in manual of the OS:\n\n * DragonFly BSD: <https://man.dragonflybsd.org/?command=sendmsg&section=2>\n * FreeBSD: <https://www.freebsd.org/cgi/man.cgi?query=sendmsg&sektion=2>\n * Linux: <https://man7.org/linux/man-pages/man2/sendmsg.2.html>\n * macOS: <https://developer.apple.com/library/archive/documentation/System/Conceptual/ManPages_iPhoneOS/man2/sendmsg.2.html> (archived, actually for iOS)\n * NetBSD: <https://man.netbsd.org/sendmsg.2>\n * OpenBSD: <https://man.openbsd.org/sendmsg.2>\n * iOS: <https://developer.apple.com/library/archive/documentation/System/Conceptual/ManPages_iPhoneOS/man2/sendmsg.2.html> (archived)\n * illumos: <https://illumos.org/man/3SOCKET/sendmsg>\n * Windows: <https://docs.microsoft.com/en-us/windows/win32/api/winsock2/nf-winsock2-sendmsg>","links":{},"attrs":["#[cfg(not(target_os = \"redox\"))]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["bufs",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"resolved_path","inner":{"name":"IoSlice","id":"1:8414:2079","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}}],["addr",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"SockAddr","id":"0:547:1676","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:2907:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:607":{"id":"0:607","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[297,15],"end":[297,20]},"visibility":"crate","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2251:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Protocol","id":"0:603:1730","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:608:413"],"negative":false,"synthetic":false,"blanket_impl":null}},"a:2:7787:9760-0:603:1730":{"id":"a:2:7787:9760-0:603:1730","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:7787:9760","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Protocol","id":"0:603:1730","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"b:2:2506-0:525:1765":{"id":"b:2:2506-0:525:1765","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2483:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2480:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"MaybeUninitSlice","id":"0:525:1765","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:2509:2023"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:2510-0:615:1755":{"id":"b:2:2510-0:615:1755","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2483:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RecvFlags","id":"0:615:1755","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2512:680"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:585":{"id":"0:585","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[203,22],"end":[203,24]},"visibility":"crate","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralEq","id":"2:2662:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Domain","id":"0:579:1692","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"b:2:3306-0:547:1676":{"id":"b:2:3306-0:547:1676","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2658:2041","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3304:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"SockAddr","id":"0:547:1676","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3308:1451"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:495-0:261:1678":{"id":"0:495-0:261:1678","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[183,0],"end":[183,25]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"sockref::SockRef","name":"SockRef","id":"0:261:1678","glob":false}},"0:41:923":{"id":"0:41:923","crate_id":0,"name":"new","span":{"filename":"src/sockaddr.rs","begin":[83,4],"end":[85,5]},"visibility":"public","docs":"Create a `SockAddr` from the underlying storage and its length.\n\n# Safety\n\nCaller must ensure that the address family and length match the type of\nstorage address. For example if `storage.ss_family` is set to `AF_INET`\nthe `storage` must be initialised as `sockaddr_in`, setting the content\nand length appropriately.\n\n# Examples\n\n```\n# fn main() -> std::io::Result<()> {\n# #[cfg(unix)] {\nuse std::io;\nuse std::mem;\nuse std::os::unix::io::AsRawFd;\n\nuse socket2::{SockAddr, Socket, Domain, Type};\n\nlet socket = Socket::new(Domain::IPV4, Type::STREAM, None)?;\n\n// Initialise a `SocketAddr` byte calling `getsockname(2)`.\nlet mut addr_storage: libc::sockaddr_storage = unsafe { mem::zeroed() };\nlet mut len = mem::size_of_val(&addr_storage) as libc::socklen_t;\n\n// The `getsockname(2)` system call will intiliase `storage` for\n// us, setting `len` to the correct length.\nlet res = unsafe {\n    libc::getsockname(\n        socket.as_raw_fd(),\n        (&mut addr_storage as *mut libc::sockaddr_storage).cast(),\n        &mut len,\n    )\n};\nif res == -1 {\n    return Err(io::Error::last_os_error());\n}\n\nlet address = unsafe { SockAddr::new(addr_storage, len) };\n# drop(address);\n# }\n# Ok(())\n# }\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["storage",{"kind":"resolved_path","inner":{"name":"sockaddr_storage","id":"20:1718:1917","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}],["len",{"kind":"resolved_path","inner":{"name":"socklen_t","id":"20:1856:1918","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"SockAddr","id":"0:547:1676","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"a:2:2651:217-0:615:1755":{"id":"a:2:2651:217-0:615:1755","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2651:217","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RecvFlags","id":"0:615:1755","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:156:2399":{"id":"0:156:2399","crate_id":0,"name":"set_broadcast","span":{"filename":"src/socket.rs","begin":[825,4],"end":[834,5]},"visibility":"public","docs":"Set the value of the `SO_BROADCAST` option for this socket.\n\nWhen enabled, this socket is allowed to send packets to a broadcast\naddress.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["broadcast",{"kind":"primitive","inner":"bool"}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:2907:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:529":{"id":"0:529","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[367,0],"end":[371,1]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:8649:111","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"MaybeUninitSlice","id":"0:525:1765","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["0:531:656"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:5:683-0:579:1692":{"id":"b:5:683-0:579:1692","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2251:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:679:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Domain","id":"0:579:1692","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:685:10174","5:686:10175","5:687:10176"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:187:2580":{"id":"0:187:2580","crate_id":0,"name":"leave_ssm_v4","span":{"filename":"src/socket.rs","begin":[1310,4],"end":[1329,5]},"visibility":"public","docs":"Leave a multicast group using `IP_DROP_SOURCE_MEMBERSHIP` option on this socket.\n\nFor more information about this option, see [`join_ssm_v4`].\n\n[`join_ssm_v4`]: Socket::join_ssm_v4","links":{"Socket::join_ssm_v4":"0:186:2570"},"attrs":["#[cfg(not(any(target_os = \"dragonfly\", target_os = \"haiku\", target_os =\n\"netbsd\", target_os = \"openbsd\", target_os = \"redox\", target_os = \"fuchsia\",\ntarget_os = \"nto\",)))]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["source",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"Ipv4Addr","id":"1:8506:2045","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],["group",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"Ipv4Addr","id":"1:8506:2045","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],["interface",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"Ipv4Addr","id":"1:8506:2045","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:2907:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:2651:217-0:525:1765":{"id":"a:2:2651:217-0:525:1765","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2651:217","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"MaybeUninitSlice","id":"0:525:1765","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:624":{"id":"0:624","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[344,26],"end":[344,35]},"visibility":"crate","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"2:2661:223","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RecvFlags","id":"0:615:1755","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"2:11490:29689":{"id":"2:11490:29689","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_mut":"2:11491:29690"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:133:2280":{"id":"0:133:2280","crate_id":0,"name":"recv_vectored","span":{"filename":"src/socket.rs","begin":[472,4],"end":[477,5]},"visibility":"public","docs":"Receives data on the socket from the remote address to which it is\nconnected. Unlike [`recv`] this allows passing multiple buffers.\n\nThe [`connect`] method will connect this socket to a remote address.\nThis method might fail if the socket is not connected.\n\nIn addition to the number of bytes read, this function returns the flags\nfor the received message. See [`RecvFlags`] for more information about\nthe returned flags.\n\nAdditional documentation can be found in manual of the OS:\n\n * DragonFly BSD: <https://man.dragonflybsd.org/?command=recvmsg&section=2>\n * FreeBSD: <https://www.freebsd.org/cgi/man.cgi?query=recvmsg&sektion=2>\n * Linux: <https://man7.org/linux/man-pages/man2/recvmsg.2.html>\n * macOS: <https://developer.apple.com/library/archive/documentation/System/Conceptual/ManPages_iPhoneOS/man2/recvmsg.2.html> (archived, actually for iOS)\n * NetBSD: <https://man.netbsd.org/recvmsg.2>\n * OpenBSD: <https://man.openbsd.org/recvmsg.2>\n * iOS: <https://developer.apple.com/library/archive/documentation/System/Conceptual/ManPages_iPhoneOS/man2/recvmsg.2.html> (archived)\n * illumos: <https://illumos.org/man/3SOCKET/recvmsg>\n * Windows: <https://docs.microsoft.com/en-us/windows/win32/api/winsock2/nf-winsock2-recvmsg>\n\n[`recv`]: Socket::recv\n[`connect`]: Socket::connect\n\n# Safety\n\nNormally casting a `IoSliceMut` to `MaybeUninitSlice` would be unsound,\nas that allows us to write uninitialised bytes to the buffer. However\nthis implementation promises to not write uninitialised bytes to the\n`bufs` and passes it directly to `recvmsg(2)` system call. This promise\nensures that this function can be called using `bufs` of type `&mut\n[IoSliceMut]`.\n\nNote that the [`io::Read::read_vectored`] implementation calls this\nfunction with `buf`s of type `&mut [IoSliceMut]`, allowing initialised\nbuffers to be used without using `unsafe`.","links":{"Socket::recv":"0:130:2245","Socket::connect":"0:118:2158","`RecvFlags`":"0:615:1755","`io::Read::read_vectored`":"1:3411:2768"},"attrs":["#[cfg(not(target_os = \"redox\"))]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["bufs",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"resolved_path","inner":{"name":"MaybeUninitSlice","id":"0:525:1765","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:2907:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"primitive","inner":"usize"},{"kind":"resolved_path","inner":{"name":"RecvFlags","id":"0:615:1755","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:144:2345":{"id":"0:144:2345","crate_id":0,"name":"send_vectored","span":{"filename":"src/socket.rs","begin":[651,4],"end":[653,5]},"visibility":"public","docs":"Send data to the connected peer. Returns the amount of bytes written.","links":{},"attrs":["#[cfg(not(target_os = \"redox\"))]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["bufs",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"resolved_path","inner":{"name":"IoSlice","id":"1:8414:2079","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:2907:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:514:1732":{"id":"0:514:1732","crate_id":0,"name":"ICMPV4","span":{"filename":"src/lib.rs","begin":[302,4],"end":[302,61]},"visibility":"public","docs":"Protocol corresponding to `ICMPv4`.","links":{},"attrs":[],"deprecation":null,"kind":"assoc_const","inner":{"type":{"kind":"resolved_path","inner":{"name":"Protocol","id":"0:603:1730","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"default":"_"}},"0:558:1564":{"id":"0:558:1564","crate_id":0,"name":"0","span":{"filename":"src/socket.rs","begin":[800,12],"end":[800,20]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"struct_field","inner":{"kind":"resolved_path","inner":{"name":"Ipv4Addr","id":"1:8506:2045","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"0:626:601":{"id":"0:626:601","crate_id":0,"name":"eq","span":{"filename":"src/lib.rs","begin":[344,26],"end":[344,35]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"RecvFlags","id":"0:615:1755","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:228:2758":{"id":"0:228:2758","crate_id":0,"name":"nodelay","span":{"filename":"src/socket.rs","begin":[1931,4],"end":[1936,5]},"visibility":"public","docs":"Get the value of the `TCP_NODELAY` option on this socket.\n\nFor more information about this option, see [`set_nodelay`].\n\n[`set_nodelay`]: Socket::set_nodelay","links":{"Socket::set_nodelay":"0:230:2766"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:2907:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"bool"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:523":{"id":"0:523","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[348,0],"end":[359,1]},"visibility":"crate","docs":null,"links":{},"attrs":["#[cfg(not(target_os = \"redox\"))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"RecvFlags","id":"0:615:1755","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:524:1761"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:11563:34714":{"id":"2:11563:34714","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:250:656":{"id":"0:250:656","crate_id":0,"name":"fmt","span":{"filename":"src/socket.rs","begin":[2022,4],"end":[2028,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"fmt::Formatter","id":"2:8609:131","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"fmt::Result","id":"2:8598:207","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:117:2152":{"id":"0:117:2152","crate_id":0,"name":"bind","span":{"filename":"src/socket.rs","begin":[184,4],"end":[186,5]},"visibility":"public","docs":"Binds this socket to the specified address.\n\nThis function directly corresponds to the `bind(2)` function on Windows\nand Unix.\n\nAdditional documentation can be found in manual of the OS:\n\n * DragonFly BSD: <https://man.dragonflybsd.org/?command=bind&section=2>\n * FreeBSD: <https://www.freebsd.org/cgi/man.cgi?query=bind&sektion=2>\n * Linux: <https://man7.org/linux/man-pages/man2/bind.2.html>\n * macOS: <https://developer.apple.com/library/archive/documentation/System/Conceptual/ManPages_iPhoneOS/man2/bind.2.html> (archived, actually for iOS)\n * NetBSD: <https://man.netbsd.org/bind.2>\n * OpenBSD: <https://man.openbsd.org/bind.2>\n * iOS: <https://developer.apple.com/library/archive/documentation/System/Conceptual/ManPages_iPhoneOS/man2/bind.2.html> (archived)\n * illumos: <https://illumos.org/man/3SOCKET/bind>\n * Windows: <https://docs.microsoft.com/en-us/windows/win32/api/winsock2/nf-winsock2-bind>","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["address",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"SockAddr","id":"0:547:1676","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:2907:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:137:2302":{"id":"0:137:2302","crate_id":0,"name":"recv_from_with_flags","span":{"filename":"src/socket.rs","begin":[535,4],"end":[541,5]},"visibility":"public","docs":"Identical to [`recv_from`] but allows for specification of arbitrary\nflags to the underlying `recvfrom` call.\n\n[`recv_from`]: Socket::recv_from","links":{"Socket::recv_from":"0:136:2301"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"resolved_path","inner":{"name":"MaybeUninit","id":"2:29621:1624","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"u8"}}],"bindings":[]}}}}}}}],["flags",{"kind":"resolved_path","inner":{"name":"c_int","id":"20:43:1675","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:2907:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"primitive","inner":"usize"},{"kind":"resolved_path","inner":{"name":"SockAddr","id":"0:547:1676","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:389:2888":{"id":"0:389:2888","crate_id":0,"name":"is_out_of_band","span":{"filename":"src/sys/unix.rs","begin":[520,4],"end":[522,5]},"visibility":"public","docs":"Check if the message contains out-of-band data.\n\nThis is useful for protocols where you receive out-of-band data\nmixed in with the normal data stream.\n\nOn Unix this corresponds to the `MSG_OOB` flag.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:230:2766":{"id":"0:230:2766","crate_id":0,"name":"set_nodelay","span":{"filename":"src/socket.rs","begin":[1945,4],"end":[1954,5]},"visibility":"public","docs":"Set the value of the `TCP_NODELAY` option on this socket.\n\nIf set, this option disables the Nagle algorithm. This means that\nsegments are always sent as soon as possible, even if there is only a\nsmall amount of data. When not set, data is buffered until there is a\nsufficient amount to send out, thereby avoiding the frequent sending of\nsmall packets.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["nodelay",{"kind":"primitive","inner":"bool"}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:2907:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:7787:9760-0:591:1708":{"id":"a:2:7787:9760-0:591:1708","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:7787:9760","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Type","id":"0:591:1708","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"b:2:2506-0:591:1708":{"id":"b:2:2506-0:591:1708","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2483:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2480:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Type","id":"0:591:1708","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2509:2023"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:121:2195":{"id":"0:121:2195","crate_id":0,"name":"accept","span":{"filename":"src/socket.rs","begin":[263,4],"end":[297,5]},"visibility":"public","docs":"Accept a new incoming connection from this listener.\n\nThis function uses `accept4(2)` on platforms that support it and\n`accept(2)` platforms that do not.\n\nThis function sets the same flags as in done for [`Socket::new`],\n[`Socket::accept_raw`] can be used if you don't want to set those flags.\n\nAdditional documentation can be found in manual of the OS:\n\n * DragonFly BSD: <https://man.dragonflybsd.org/?command=accept&section=2>\n * FreeBSD: <https://www.freebsd.org/cgi/man.cgi?query=accept&sektion=2>\n * Linux: <https://man7.org/linux/man-pages/man2/accept.2.html>\n * macOS: <https://developer.apple.com/library/archive/documentation/System/Conceptual/ManPages_iPhoneOS/man2/accept.2.html> (archived, actually for iOS)\n * NetBSD: <https://man.netbsd.org/accept.2>\n * OpenBSD: <https://man.openbsd.org/accept.2>\n * iOS: <https://developer.apple.com/library/archive/documentation/System/Conceptual/ManPages_iPhoneOS/man2/accept.2.html> (archived)\n * illumos: <https://illumos.org/man/3SOCKET/accept>\n * Windows: <https://docs.microsoft.com/en-us/windows/win32/api/winsock2/nf-winsock2-accept>","links":{"`Socket::accept_raw`":"0:122:2198","`Socket::new`":"0:114:923"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:2907:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"resolved_path","inner":{"name":"Socket","id":"0:107:1677","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},{"kind":"resolved_path","inner":{"name":"SockAddr","id":"0:547:1676","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:2665:225-0:525:1765":{"id":"a:2:2665:225-0:525:1765","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2665:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"MaybeUninitSlice","id":"0:525:1765","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:130:2245":{"id":"0:130:2245","crate_id":0,"name":"recv","span":{"filename":"src/socket.rs","begin":[417,4],"end":[419,5]},"visibility":"public","docs":"Receives data on the socket from the remote address to which it is\nconnected.\n\nThe [`connect`] method will connect this socket to a remote address.\nThis method might fail if the socket is not connected.\n\nAdditional documentation can be found in manual of the OS:\n\n * DragonFly BSD: <https://man.dragonflybsd.org/?command=recv&section=2>\n * FreeBSD: <https://www.freebsd.org/cgi/man.cgi?query=recv&sektion=2>\n * Linux: <https://man7.org/linux/man-pages/man2/recv.2.html>\n * macOS: <https://developer.apple.com/library/archive/documentation/System/Conceptual/ManPages_iPhoneOS/man2/recv.2.html> (archived, actually for iOS)\n * NetBSD: <https://man.netbsd.org/recv.2>\n * OpenBSD: <https://man.openbsd.org/recv.2>\n * iOS: <https://developer.apple.com/library/archive/documentation/System/Conceptual/ManPages_iPhoneOS/man2/recv.2.html> (archived)\n * illumos: <https://illumos.org/man/3SOCKET/recv>\n * Windows: <https://docs.microsoft.com/en-us/windows/win32/api/winsock2/nf-winsock2-recv>\n\n[`connect`]: Socket::connect\n\n# Safety\n\nNormally casting a `&mut [u8]` to `&mut [MaybeUninit<u8>]` would be\nunsound, as that allows us to write uninitialised bytes to the buffer.\nHowever this implementation promises to not write uninitialised bytes to\nthe `buf`fer and passes it directly to `recv(2)` system call. This\npromise ensures that this function can be called using a `buf`fer of\ntype `&mut [u8]`.\n\nNote that the [`io::Read::read`] implementation calls this function with\na `buf`fer of type `&mut [u8]`, allowing initialised buffers to be used\nwithout using `unsafe`.","links":{"Socket::connect":"0:118:2158","`io::Read::read`":"1:3410:2767"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"resolved_path","inner":{"name":"MaybeUninit","id":"2:29621:1624","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"u8"}}],"bindings":[]}}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:2907:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:518:1744":{"id":"0:518:1744","crate_id":0,"name":"MPTCP","span":{"filename":"src/lib.rs","begin":[315,4],"end":[315,61]},"visibility":"public","docs":"Protocol corresponding to `MPTCP`.","links":{},"attrs":["#[cfg(target_os = \"linux\")]"],"deprecation":null,"kind":"assoc_const","inner":{"type":{"kind":"resolved_path","inner":{"name":"Protocol","id":"0:603:1730","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"default":"_"}},"0:625":{"id":"0:625","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[344,26],"end":[344,35]},"visibility":"crate","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"2:2280:185","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"RecvFlags","id":"0:615:1755","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RecvFlags","id":"0:615:1755","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:626:601"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:127:2226":{"id":"0:127:2226","crate_id":0,"name":"try_clone","span":{"filename":"src/socket.rs","begin":[357,4],"end":[359,5]},"visibility":"public","docs":"Creates a new independently owned handle to the underlying socket.\n\n# Notes\n\nOn Unix this uses `F_DUPFD_CLOEXEC` and thus sets the `FD_CLOEXEC` on\nthe returned socket.\n\nOn Windows this uses `WSA_FLAG_NO_HANDLE_INHERIT` setting inheriting to\nfalse.\n\nOn Windows this can **not** be used function cannot be used on a\nQOS-enabled socket, see\n<https://docs.microsoft.com/en-us/windows/win32/api/winsock2/nf-winsock2-wsaduplicatesocketw>.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:2907:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Socket","id":"0:107:1677","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11567:34716":{"id":"2:11567:34716","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"self::pattern":"2:11169:19579","prim@char":"1:12335:409"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11174:13527","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11520:29698":{"id":"2:11520:29698","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"self::pattern":"2:11169:19579","prim@char":"1:12335:409"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitInclusive","id":"2:10993:10237","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11174:13527","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11488:34700":{"id":"2:11488:34700","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"str::slice_mut_unchecked":"2:11489:34701","`str`":"1:12341:1363","crate::ops::Index":"2:2970:2384"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:11532:29702":{"id":"2:11532:29702","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"self::pattern":"2:11169:19579","prim@char":"1:12335:409","str::rsplitn":"2:11535:29704"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitN","id":"2:50213:10235","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11174:13527","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:578:656":{"id":"0:578:656","crate_id":0,"name":"fmt","span":{"filename":"src/sys/unix.rs","begin":[484,0],"end":[496,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"std::fmt::Formatter","id":"2:8609:131","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"std::fmt::Result","id":"2:8598:207","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2234-0:525:1765":{"id":"b:2:2234-0:525:1765","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2658:2041","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2228:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"MaybeUninitSlice","id":"0:525:1765","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:2236:3445"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"a:2:2715:3673-0:552:1684":{"id":"a:2:2715:3673-0:552:1684","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2715:3673","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"InterfaceIndexOrAddress","id":"0:552:1684","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:168:2454":{"id":"0:168:2454","crate_id":0,"name":"set_recv_buffer_size","span":{"filename":"src/socket.rs","begin":[955,4],"end":[964,5]},"visibility":"public","docs":"Set value for the `SO_RCVBUF` option on this socket.\n\nChanges the size of the operating system's receive buffer associated\nwith the socket.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["size",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:2907:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:525:1765":{"id":"0:525:1765","crate_id":0,"name":"MaybeUninitSlice","span":{"filename":"src/lib.rs","begin":[365,0],"end":[365,59]},"visibility":"public","docs":"A version of [`IoSliceMut`] that allows the buffer to be uninitialised.\n\n[`IoSliceMut`]: std::io::IoSliceMut","links":{"std::io::IoSliceMut":"1:3427:2080"},"attrs":["#[repr(transparent)]"],"deprecation":null,"kind":"struct","inner":{"kind":{"tuple":[null]},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"impls":["0:532","a:2:2651:217-0:525:1765","a:2:7786:9761-0:525:1765","a:2:2715:3673-0:525:1765","a:2:2665:225-0:525:1765","a:2:7787:9760-0:525:1765","b:2:2237-0:525:1765","b:2:2510-0:525:1765","b:2:2234-0:525:1765","b:2:2516-0:525:1765","b:2:2506-0:525:1765","b:2:3306-0:525:1765","b:2:2521-0:525:1765","0:529","0:535","0:539"]}},"0:584:413":{"id":"0:584:413","crate_id":0,"name":"clone","span":{"filename":"src/lib.rs","begin":[203,15],"end":[203,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Domain","id":"0:579:1692","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:165:2445":{"id":"0:165:2445","crate_id":0,"name":"set_out_of_band_inline","span":{"filename":"src/socket.rs","begin":[928,4],"end":[937,5]},"visibility":"public","docs":"Set value for the `SO_OOBINLINE` option on this socket.\n\nIf this option is enabled, out-of-band data is directly placed into the\nreceive data stream. Otherwise, out-of-band data is passed only when the\n`MSG_OOB` flag is set during receiving. As per RFC6093, TCP sockets\nusing the Urgent mechanism are encouraged to set this flag.","links":{},"attrs":["#[cfg(not(target_os = \"redox\"))]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["oob_inline",{"kind":"primitive","inner":"bool"}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:2907:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:166:2449":{"id":"0:166:2449","crate_id":0,"name":"recv_buffer_size","span":{"filename":"src/socket.rs","begin":[944,4],"end":[949,5]},"visibility":"public","docs":"Get value for the `SO_RCVBUF` option on this socket.\n\nFor more information about this option, see [`set_recv_buffer_size`].\n\n[`set_recv_buffer_size`]: Socket::set_recv_buffer_size","links":{"Socket::set_recv_buffer_size":"0:168:2454"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:2907:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"paths":{"9:19:20195":{"crate_id":9,"path":["miniz_oxide","deflate","buffer","HashBuffers"],"kind":"struct"},"2:50557:12864":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"6:1541:1916":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"20:505:4089":{"crate_id":20,"path":["libc","unix","rusage"],"kind":"struct"},"1:6954:13564":{"crate_id":1,"path":["std","sync","rwlock","fmt","LockedPlaceholder"],"kind":"struct"},"5:4630:656":{"crate_id":5,"path":["alloc","fmt"],"kind":"module"},"17:10625:11019":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"5:2142:35659":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"1:4771:14408":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"1:3427:2080":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"17:13126:11534":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"2:51970:12327":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"2:50824:12878":{"crate_id":2,"path":["core","str","LinesAnyMap"],"kind":"struct"},"17:13214:11554":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"17:420:10877":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"2:48328:10122":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"16:7211:11892":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"1:8470:3626":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"17:8561:10915":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"16:6284:11738":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"1:5016:2083":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"1:5720:13557":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"16:6109:11788":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"12:353:10577":{"crate_id":12,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"2:2659:3671":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"2:2483:132":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"6:5861:7982":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"2:2900:1627":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"1:8748:3504":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"2:12029:139":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"1:598:13540":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"1:1938:13161":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"2:48210:9757":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"2:7892:13527":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"17:11125:11047":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"14:202:19596":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"1:524:10665":{"crate_id":1,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"17:10532:127":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"2:49907:10222":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"6:1738:4938":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"6:4635:7320":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"1:973:13491":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"16:7435:11899":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"17:9183:13359":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"17:10385:12552":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"2:2794:3527":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"17:11606:11146":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"2:11395:111":{"crate_id":2,"path":["core","str","lossy","Debug"],"kind":"struct"},"16:2631:11707":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"2:2480:147":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"1:11691:12913":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"20:1036:2651":{"crate_id":20,"path":["libc","unix","linux_like","IPV6_ADD_MEMBERSHIP"],"kind":"constant"},"17:11813:11176":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"20:7274:7469":{"crate_id":20,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"14:0:3356":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"2:10919:12841":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"5:961:10588":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"6:4398:7299":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"1:996:13496":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"17:13221:11556":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"6:6322:8359":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"16:3689:11749":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"17:9909:10946":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"2:50177:12840":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"1:8734:14404":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"17:11106:11046":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"2:50860:12311":{"crate_id":2,"path":["core","time","Nanoseconds"],"kind":"struct"},"1:5898:10672":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"2:20095:31842":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"5:1973:13510":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"20:4786:7335":{"crate_id":20,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"17:10949:11037":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"2:54171:12424":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"16:6654:11831":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"20:7013:2405":{"crate_id":20,"path":["libc","unix","linux_like","linux","arch","generic","SO_ERROR"],"kind":"constant"},"6:1678:4933":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"1:5657:13556":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"1:7090:14479":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"12:2053:12690":{"crate_id":12,"path":["hashbrown","set","Entry"],"kind":"enum"},"12:985:12690":{"crate_id":12,"path":["hashbrown","map","Entry"],"kind":"enum"},"5:7140:12743":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"2:47237:12801":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"16:4749:11769":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"2:9340:14394":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"1:1828:13550":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"16:4786:11770":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"9:505:20270":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"1:8017:13532":{"crate_id":1,"path":["std","error","private","Internal"],"kind":"struct"},"1:8477:3627":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"17:11893:11185":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"17:11547:11139":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"6:7208:7461":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"1:7772:11028":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"14:165:20291":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"20:4325:7291":{"crate_id":20,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"2:50079:12833":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"12:1044:20285":{"crate_id":12,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"17:9274:13362":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"17:10434:12554":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"9:188:20175":{"crate_id":9,"path":["miniz_oxide","deflate","core","HuffmanOxide"],"kind":"struct"},"1:10894:3647":{"crate_id":1,"path":["std","sys","unix","stdio","Stdout"],"kind":"struct"},"17:10139:10935":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"20:6310:8357":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"1:11146:12908":{"crate_id":1,"path":["std","sys","unix","fs","FilePermissions"],"kind":"struct"},"17:12730:11434":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"16:2842:11716":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"2:51031:192":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"16:7511:11902":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"17:9712:10943":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"20:4208:7277":{"crate_id":20,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"2:1733:9801":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"2:47005:19656":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"enum"},"12:646:10226":{"crate_id":12,"path":["hashbrown","map","IterMut"],"kind":"struct"},"16:5163:11776":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"2:5412:12746":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"20:4275:7284":{"crate_id":20,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"1:3199:3646":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"1:931:12720":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"20:4134:7271":{"crate_id":20,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"0:591:1708":{"crate_id":0,"path":["socket2","Type"],"kind":"struct"},"18:531:12521":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"3:223:207":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"2:2231:98":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"2:48400:91":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"20:104:1739":{"crate_id":20,"path":["libc","unix","IPPROTO_TCP"],"kind":"constant"},"2:52029:12330":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"20:4514:7307":{"crate_id":20,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"16:7483:11737":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"6:4354:7295":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"1:11133:12893":{"crate_id":1,"path":["std","sys","unix","fs","OpenOptions"],"kind":"struct"},"5:5011:1333":{"crate_id":5,"path":["alloc","slice"],"kind":"module"},"16:7956:11739":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"16:4662:11766":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"5:4103:3583":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"2:7197:156":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"1:8166:13571":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"1:11982:12918":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"2:50067:12832":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"2:53562:12405":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"6:4437:7302":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"12:60:35721":{"crate_id":12,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"17:10062:13405":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"2:47395:12818":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"2:52192:12337":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"2:52640:12349":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"2:47370:12815":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"6:1695:4935":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"16:6903:12471":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"20:1892:5077":{"crate_id":20,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"1:6919:214":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"2:2887:116":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"17:8911:35742":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"1:8660:1907":{"crate_id":1,"path":["std","net","socket_addr","SocketAddrV6"],"kind":"struct"},"1:1615:10579":{"crate_id":1,"path":["std","collections","hash","set","DrainFilter"],"kind":"struct"},"5:6002:14520":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"2:2806:3525":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"20:546:2920":{"crate_id":20,"path":["libc","unix","pollfd"],"kind":"struct"},"6:135:3766":{"crate_id":6,"path":["libc","unix","fpos_t"],"kind":"enum"},"6:4267:7284":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"1:11424:10700":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"17:11939:11209":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"2:50426:12778":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"20:4559:7312":{"crate_id":20,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"2:11183:12530":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"14:215:12710":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"2:50879:121":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"20:921:2263":{"crate_id":20,"path":["libc","unix","linux_like","MSG_OOB"],"kind":"constant"},"17:12361:11283":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"20:5595:7937":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"17:10682:11021":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"6:6538:8369":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"2:53064:12372":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"17:10466:12556":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"7:79:20119":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"17:487:13342":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"2:54133:12422":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"6:4737:7331":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"17:11800:11174":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"2:11130:3592":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"2:21439:12211":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"1:965:13489":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"5:6600:241":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"5:6948:34573":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"17:9362:10935":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"2:49917:10220":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"1:1608:10122":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"17:12695:11433":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"2:48252:10062":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"16:2868:11717":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"17:967:13343":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"1:6815:13170":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"20:561:2420":{"crate_id":20,"path":["libc","unix","linger"],"kind":"struct"},"2:46480:196":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"6:1580:4925":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"2:4749:780":{"crate_id":2,"path":["core","iter"],"kind":"module"},"6:4778:7335":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"1:3475:25287":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"16:7929:13482":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"2:20775:14486":{"crate_id":2,"path":["core","core_simd","ord","SimdPartialOrd"],"kind":"trait"},"6:4346:7294":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"2:49660:10215":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"12:0:3355":{"crate_id":12,"path":["hashbrown"],"kind":"module"},"6:4527:7309":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"1:7884:12434":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"9:977:12160":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"16:5411:11724":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"17:13580:11669":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"2:2911:3535":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"2:58312:12433":{"crate_id":2,"path":["core","core_simd","vector","ptr","SimdMutPtr"],"kind":"struct"},"2:47148:10212":{"crate_id":2,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"1:979:14326":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"16:5793:12564":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"17:12955:11490":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"20:970:2550":{"crate_id":20,"path":["libc","unix","linux_like","IP_ADD_MEMBERSHIP"],"kind":"constant"},"2:49409:12828":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"2:50848:12884":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"17:10350:10991":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"5:3086:3583":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"17:11594:11144":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"20:0:801":{"crate_id":20,"path":["libc"],"kind":"module"},"16:8014:11891":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"1:1620:12721":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"1:3159:14023":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"17:12265:11265":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"20:4673:7324":{"crate_id":20,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"16:5761:13427":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"17:12781:11449":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"7:32:20112":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"17:11639:11154":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"17:9317:13366":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"1:4977:14407":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"16:4817:11771":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"20:4681:7325":{"crate_id":20,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"16:4297:11755":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"1:1604:3583":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"5:1071:14154":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"17:12816:11453":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"1:7974:14315":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"9:920:20127":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"6:1505:2845":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"20:107:2650":{"crate_id":20,"path":["libc","unix","IPPROTO_IPV6"],"kind":"constant"},"16:7452:195":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"6:4139:7272":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"1:9865:13569":{"crate_id":1,"path":["std","sys","unix","fs","ReadDir"],"kind":"struct"},"18:113:25017":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"20:5721:7946":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"17:12046:11228":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"12:2069:13498":{"crate_id":12,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"1:8128:12894":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"6:6293:3968":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"1:11418:10699":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"1:8252:13572":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"2:46998:12788":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"13:220:12080":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"6:4206:7124":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"20:4337:7292":{"crate_id":20,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"2:21846:171":{"crate_id":2,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"2:47640:12295":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"2:2918:3537":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"2:46968:19655":{"crate_id":2,"path":["core","char","EscapeDefaultState"],"kind":"enum"},"1:6665:13564":{"crate_id":1,"path":["std","sync","mutex","fmt","LockedPlaceholder"],"kind":"struct"},"2:49155:109":{"crate_id":2,"path":["core","fmt","rt","v1","Count"],"kind":"enum"},"17:12850:11465":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"16:6743:21213":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"5:679:228":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"17:13459:11640":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"17:9446:13372":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"2:46885:31682":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"20:6487:8365":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"5:3093:12722":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"2:52537:12347":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"5:36:10585":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"1:11706:12955":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"1:969:13490":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"2:3151:3544":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"17:10894:11033":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"15:214:20308":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"20:967:2586":{"crate_id":20,"path":["libc","unix","linux_like","IP_MULTICAST_IF"],"kind":"constant"},"2:48337:180":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"2:4558:19648":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"20:4567:7313":{"crate_id":20,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"2:47071:12793":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"1:11178:118":{"crate_id":1,"path":["std","sys","unix","fs","DirBuilder"],"kind":"struct"},"2:9350:219":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"8:0:3351":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"1:10891:3645":{"crate_id":1,"path":["std","sys","unix","stdio","Stdin"],"kind":"struct"},"10:0:3353":{"crate_id":10,"path":["rustc_std_workspace_alloc"],"kind":"module"},"20:7019:2438":{"crate_id":20,"path":["libc","unix","linux_like","linux","arch","generic","SO_OOBINLINE"],"kind":"constant"},"20:118:3765":{"crate_id":20,"path":["libc","unix","FILE"],"kind":"enum"},"1:3165:14051":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"1:11407:10698":{"crate_id":1,"path":["std","sys","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"20:4193:7275":{"crate_id":20,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"1:9858:128":{"crate_id":1,"path":["std","sys","unix","fs","File"],"kind":"struct"},"6:4191:7276":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"6:1654:4931":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"16:6316:12652":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"1:5018:2084":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"16:7847:11949":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"2:21912:170":{"crate_id":2,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"6:5782:7952":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"1:9312:10122":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"16:7135:35736":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"16:4519:11761":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"20:968:2604":{"crate_id":20,"path":["libc","unix","linux_like","IP_MULTICAST_TTL"],"kind":"constant"},"1:12358:1512":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"2:2781:3521":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"1:11799:10705":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"6:1595:4926":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"2:52384:12343":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"1:10833:10696":{"crate_id":1,"path":["std","sys","unix","stack_overflow","Handler"],"kind":"struct"},"6:4726:7330":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"2:20413:12188":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"2:49417:3567":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"17:9401:10932":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"2:12003:202":{"crate_id":2,"path":["core","task","ready","Ready"],"kind":"struct"},"20:1690:4934":{"crate_id":20,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"20:5790:7952":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"2:9776:10235":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"1:8414:2079":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"20:567:4092":{"crate_id":20,"path":["libc","unix","sigval"],"kind":"struct"},"17:12322:11273":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"20:4265:7283":{"crate_id":20,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"2:51785:12320":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"17:8941:13354":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"2:11169:19579":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"2:46339:3551":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"2:52140:12335":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"1:8740:13574":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"2:50683:19589":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"1:4430:14400":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"12:738:12720":{"crate_id":12,"path":["hashbrown","map","Values"],"kind":"struct"},"2:10958:12845":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"2:3484:10607":{"crate_id":2,"path":["core","array","drain","Drain"],"kind":"struct"},"2:9542:3626":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"1:1091:12690":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"1:5189:14415":{"crate_id":1,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"1:628:14310":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"2:3067:3541":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"2:20050:3679":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"1:5405:188":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"2:53420:12404":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"1:4590:2837":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"2:47269:12806":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"5:5142:10206":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"5:7179:13520":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"18:719:10825":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"20:6517:8367":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"2:51807:12321":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"2:6800:3652":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"16:2509:11702":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"1:4510:2836":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"0:579:1692":{"crate_id":0,"path":["socket2","Domain"],"kind":"struct"},"1:7840:10693":{"crate_id":1,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"1:7997:14345":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"20:4769:7333":{"crate_id":20,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"1:3352:3653":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"2:49641:12306":{"crate_id":2,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"1:12353:1456":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"17:9897:13404":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"16:2771:11713":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"1:11862:2772":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"2:8921:3563":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"16:5664:12592":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"2:50109:3626":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"2:49225:10337":{"crate_id":2,"path":["core","fmt","FlagV1"],"kind":"enum"},"20:4573:2911":{"crate_id":20,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"16:7388:13480":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"2:7120:120":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"2:7467:3591":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"20:4469:7304":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"17:13340:11605":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"1:11503:29409":{"crate_id":1,"path":["std","sys","unix","thread","cgroups","Cgroup"],"kind":"enum"},"16:5525:12578":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"1:8685:2081":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"2:9735:10232":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"20:4698:982":{"crate_id":20,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"1:12317:28500":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"5:3098:34572":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"5:3153:12724":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"2:2828:3530":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"2:47648:12826":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"20:1062:2709":{"crate_id":20,"path":["libc","unix","linux_like","IPV6_RECVTCLASS"],"kind":"constant"},"16:6017:13448":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"1:1637:12724":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"17:9805:11007":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"6:5699:7945":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"1:4215:3689":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"5:4034:3609":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"16:2683:11709":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"1:5691:13166":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"6:4629:3229":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"17:9339:13368":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"6:1511:2993":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"16:6123:11718":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"20:6553:8370":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"6:5504:7932":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"5:2884:14156":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"17:9165:35749":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"2:50704:12872":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"2:9126:10652":{"crate_id":2,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"16:8056:11960":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"1:5905:10673":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"17:10506:11001":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"5:3902:10588":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"2:8598:207":{"crate_id":2,"path":["core","fmt","Result"],"kind":"typedef"},"2:21290:12194":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"17:11515:11132":{"crate_id":17,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"17:9433:13371":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"2:4217:13525":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"1:11511:12311":{"crate_id":1,"path":["std","sys","unix","time","Nanoseconds"],"kind":"struct"},"20:4255:7282":{"crate_id":20,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"5:5615:10607":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"20:4637:3229":{"crate_id":20,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"6:4152:7273":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"20:4239:7280":{"crate_id":20,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"16:2411:11698":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"13:0:3349":{"crate_id":13,"path":["std_detect"],"kind":"module"},"16:6137:12634":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"17:11774:11171":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"6:1714:1917":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"17:13572:11666":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"17:12278:11266":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"1:12351:725":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"2:20078:33988":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_right","Rotate"],"kind":"struct"},"17:13091:11523":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"16:4606:11764":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"6:6277:4865":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"20:4387:7298":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"1:11311:13164":{"crate_id":1,"path":["std","sys","unix","process","process_common","Stdio"],"kind":"enum"},"1:12359:1101":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"16:4545:11762":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"12:1029:13499":{"crate_id":12,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"6:4475:7305":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"2:10723:13529":{"crate_id":2,"path":["core","slice","GetManyMutError"],"kind":"struct"},"2:49927:10221":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"2:48476:88":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"1:10529:13587":{"crate_id":1,"path":["std","sys","unix","os_str","Slice"],"kind":"struct"},"2:21274:12759":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"5:6512:10633":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstBufDrop"],"kind":"struct"},"1:5517:187":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"1:8262:2181":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"2:51869:12323":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"2:54095:12420":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"6:1500:2842":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"2:8802:13528":{"crate_id":2,"path":["core","fmt","fmt","BorrowedPlaceholder"],"kind":"struct"},"18:652:10806":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"2:21237:12191":{"crate_id":2,"path":["core","num","dec2flt","common","AsciiStr"],"kind":"struct"},"2:47043:12792":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"2:1756:9800":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"17:10310:13420":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"17:8212:21268":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"17:9947:21360":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"1:3197:3645":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"17:10520:11004":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"17:8137:21266":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"5:6923:12736":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"2:7046:19798":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"6:6509:8367":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"20:594:4096":{"crate_id":20,"path":["libc","unix","protoent"],"kind":"struct"},"20:1718:1917":{"crate_id":20,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"1:7574:27832":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"17:13039:11508":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"6:1686:4934":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"20:922:2296":{"crate_id":20,"path":["libc","unix","linux_like","MSG_PEEK"],"kind":"constant"},"17:8494:10911":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"12:632:3583":{"crate_id":12,"path":["hashbrown","map","Iter"],"kind":"struct"},"1:10936:10697":{"crate_id":1,"path":["std","sys","unix","thread","Thread"],"kind":"struct"},"2:8211:79":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"20:7174:8884":{"crate_id":20,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"2:7474:19797":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"1:8589:27726":{"crate_id":1,"path":["std","net","parser","AddrKind"],"kind":"enum"},"2:48552:89":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"6:7237:7465":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"2:46915:12776":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"2:52286:12339":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"16:6790:11841":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"17:8951:35744":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"2:8662:10197":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"2:52170:12336":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"6:4644:7321":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"5:1708:10579":{"crate_id":5,"path":["alloc","collections","btree","map","DrainFilter"],"kind":"struct"},"2:49401:3568":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"18:660:13334":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"6:5587:7937":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"5:7127:12741":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"2:51066:13016":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"1:11491:12464":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"17:13366:11614":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"16:5703:12595":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"1:9382:14444":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"12:1872:12724":{"crate_id":12,"path":["hashbrown","set","Union"],"kind":"struct"},"6:608:4096":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"1:2411:14378":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"17:10108:13408":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"17:10476:21386":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"5:1454:195":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"12:697:13490":{"crate_id":12,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"2:47190:12795":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"1:4974:14416":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"2:49938:10214":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"6:4329:7292":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"5:7064:14325":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"5:4264:3609":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"12:1518:20286":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"1:11530:3553":{"crate_id":1,"path":["std","sys","unix","time","SystemTime"],"kind":"struct"},"20:854:1698":{"crate_id":20,"path":["libc","unix","linux_like","AF_INET6"],"kind":"constant"},"2:21714:175":{"crate_id":2,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"2:47346:10822":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"12:1852:12721":{"crate_id":12,"path":["hashbrown","set","Intersection"],"kind":"struct"},"16:3632:11748":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"17:9155:13358":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"17:12972:11493":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"16:5780:12604":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"2:47621:3653":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"17:12073:11230":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"2:29827:31854":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum64"],"kind":"enum"},"1:2385:14369":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"1:918:12719":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"2:8886:144":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"20:1515:2993":{"crate_id":20,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"1:11198:29411":{"crate_id":1,"path":["std","sys","unix","kernel_copy","SpliceMode"],"kind":"enum"},"2:46566:3540":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"2:54054:12417":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"16:2579:11705":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"2:47055:31655":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"2:9697:10231":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"2:51739:12318":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"20:5849:7183":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"2:8660:10196":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"6:5554:7902":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"1:5072:2835":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"17:10845:10996":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"1:1811:598":{"crate_id":1,"path":["std","env"],"kind":"module"},"16:5460:12573":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"16:5472:11723":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"5:1055:34155":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"1:7931:10697":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"17:11070:11044":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"16:2727:11711":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"2:8380:32616":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"6:1887:5077":{"crate_id":6,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"2:48201:10122":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"2:51715:12317":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"1:9566:216":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"9:33:20196":{"crate_id":9,"path":["miniz_oxide","deflate","buffer","LocalBuf"],"kind":"struct"},"5:6502:10632":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"1:11479:12463":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatus"],"kind":"struct"},"5:2604:12182":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"16:6877:21214":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"16:6345:11726":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"2:50095:3624":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"5:3680:10579":{"crate_id":5,"path":["alloc","collections","linked_list","DrainFilter"],"kind":"struct"},"17:10546:21277":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"2:4368:3678":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"2:47085:7984":{"crate_id":2,"path":["core","ffi","c_char"],"kind":"typedef"},"1:12339:308":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"2:2773:3519":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"16:4441:11760":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"1:7883:14394":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"1:3491:3621":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"2:48176:10121":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"6:5660:7941":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"2:20118:31844":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"0:525:1765":{"crate_id":0,"path":["socket2","MaybeUninitSlice"],"kind":"struct"},"2:9818:10234":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"17:13059:11515":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"20:6562:8371":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"16:4262:11754":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"6:6269:4129":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"2:46640:10347":{"crate_id":2,"path":["core","any","tags","Ref"],"kind":"struct"},"2:14:1637":{"crate_id":2,"path":["core","write"],"kind":"macro"},"16:2993:11740":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"16:7319:12696":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"6:6545:8370":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"5:5724:10618":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"2:2437:14394":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"5:3127:12721":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"17:13393:11623":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"2:2280:185":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"1:12360:13":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"1:411:162":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"2:53958:12411":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"2:21780:173":{"crate_id":2,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"5:5549:229":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"1:10685:13557":{"crate_id":1,"path":["std","sys","unix","process","process_common","Command"],"kind":"struct"},"16:4357:11757":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"6:5510:7933":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"2:20944:33992":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"17:12926:11482":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"1:887:3583":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"6:4257:7283":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"2:7092:9687":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"17:1771:13345":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"2:6651:19793":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"17:9071:35746":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"17:11054:11043":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"20:4247:7281":{"crate_id":20,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"17:10270:13417":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"17:1931:13346":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"17:11661:11155":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"2:4284:10640":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"1:12354:1457":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"1:686:14316":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"17:11034:11042":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"1:9472:13583":{"crate_id":1,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"18:538:10811":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"2:2150:578":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"6:1636:4929":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"17:12896:11471":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"2:21879:2831":{"crate_id":2,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"17:12739:11437":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"2:51087:158":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"1:6028:13561":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"17:9501:10928":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"17:12087:11233":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"0:603:1730":{"crate_id":0,"path":["socket2","Protocol"],"kind":"struct"},"2:47024:12294":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"20:106:2505":{"crate_id":20,"path":["libc","unix","IPPROTO_IP"],"kind":"constant"},"17:9118:35741":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"1:719:14248":{"crate_id":1,"path":["std","backtrace","LazilyResolvedCapture"],"kind":"struct"},"1:12340:1333":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"2:50912:19892":{"crate_id":2,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"17:11787:11172":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"5:6644:10624":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"2:54148:12423":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"20:5735:7948":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"17:11174:11056":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"1:6742:10687":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"20:4406:7299":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"5:2876:12181":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"17:9700:13389":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"20:4824:7339":{"crate_id":20,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"2:11812:189":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"20:4497:3668":{"crate_id":20,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"18:671:13338":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"1:4022:2772":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"12:1832:3583":{"crate_id":12,"path":["hashbrown","set","Iter"],"kind":"struct"},"12:1120:13501":{"crate_id":12,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"20:4232:7279":{"crate_id":20,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"17:10490:11000":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"1:6629:163":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"5:784:10590":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"2:21314:12763":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"16:7942:13485":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"1:1826:13549":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"2:8668:10195":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"20:4343:7293":{"crate_id":20,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"2:50392:12850":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"2:49898:10218":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"17:13354:11611":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"2:46500:199":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"2:52010:12329":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"1:5180:14414":{"crate_id":1,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"2:6860:10675":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"17:12485:11285":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"20:4776:7334":{"crate_id":20,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"20:5451:7873":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"1:990:13494":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"1:5328:13555":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"2:53672:12406":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"16:3026:10831":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"17:12860:11466":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"1:8569:12448":{"crate_id":1,"path":["std","net","ip_addr","fmt","Span"],"kind":"struct"},"2:48362:84":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"17:9458:13373":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"2:46440:197":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"16:7557:12697":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"1:11740:10703":{"crate_id":1,"path":["std","sys_common","thread_local_key","Key"],"kind":"struct"},"6:4185:7275":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"1:0:1355":{"crate_id":1,"path":["std"],"kind":"module"},"2:52560:12348":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"2:51909:12325":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"17:12134:11240":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"6:7214:7462":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"1:11676:12480":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"1:6259:203":{"crate_id":1,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"17:11199:11058":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"20:6337:3875":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"17:8822:35745":{"crate_id":17,"path":["object","read","any","FileInternal"],"kind":"enum"},"20:5780:7951":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"2:11189:19577":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"2:2474:75":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"1:954:10579":{"crate_id":1,"path":["std","collections","hash","map","DrainFilter"],"kind":"struct"},"5:0:283":{"crate_id":5,"path":["alloc"],"kind":"module"},"2:2752:3515":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"2:49128:130":{"crate_id":2,"path":["core","fmt","rt","v1","FormatSpec"],"kind":"struct"},"2:29721:31848":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum32"],"kind":"enum"},"17:9303:10928":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"1:8101:10870":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"1:8013:13568":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"17:10207:13409":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"1:5238:14420":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"9:863:20125":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"6:4551:7312":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"2:54080:12419":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"16:4721:11768":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"20:4724:7329":{"crate_id":20,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"2:49104:67":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"5:7234:10579":{"crate_id":5,"path":["alloc","vec","drain_filter","DrainFilter"],"kind":"struct"},"20:969:2594":{"crate_id":20,"path":["libc","unix","linux_like","IP_MULTICAST_LOOP"],"kind":"constant"},"16:6865:12689":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"20:4805:7336":{"crate_id":20,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"2:47278:12807":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"17:9722:10944":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"2:20364:14394":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"5:6669:10636":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"2:53000:12370":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"2:2777:3523":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"6:7266:7469":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"18:507:10806":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"6:1608:4928":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"15:193:20304":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"6:6524:8368":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"16:3599:11747":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"1:11298:13568":{"crate_id":1,"path":["std","sys","unix","os","JoinPathsError"],"kind":"struct"},"2:21326:31695":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"1:9442:27181":{"crate_id":1,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"17:12060:11229":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"16:6829:12685":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"2:2316:179":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"1:9672:13552":{"crate_id":1,"path":["std","sys","unix","args","Args"],"kind":"struct"},"20:1554:4922":{"crate_id":20,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"2:20932:12190":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"16:6517:12659":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"17:13024:11506":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"6:592:4094":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"2:2662:222":{"crate_id":2,"path":["core","marker","StructuralEq"],"kind":"trait"},"17:13141:11538":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"1:10790:13575":{"crate_id":1,"path":["std","sys","unix","process","process_common","CommandArgs"],"kind":"struct"},"6:539:2843":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"20:6383:4866":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"2:50737:12877":{"crate_id":2,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"1:12334:920":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"16:2825:11715":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"2:48261:190":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"2:48742:13160":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"16:7543:11725":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"20:4613:7318":{"crate_id":20,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"6:1518:2846":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"6:5595:7938":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"16:6463:12658":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"17:11997:11221":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"2:2915:3536":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"1:4122:2773":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"12:1555:13505":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"1:11637:12909":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"20:5757:10800":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"17:10774:10991":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"1:11128:12903":{"crate_id":1,"path":["std","sys","unix","fs","StatxExtraFields"],"kind":"struct"},"2:46901:12293":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"6:1525:1669":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"1:5774:13164":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"2:2651:217":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"20:5488:7930":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"1:900:10226":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"17:11576:11143":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"6:7220:7463":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"2:11837:13530":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"20:971:2555":{"crate_id":20,"path":["libc","unix","linux_like","IP_DROP_MEMBERSHIP"],"kind":"constant"},"1:12346:631":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"6:6975:8742":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"2:46617:12289":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"6:586:4093":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"1:3276:3644":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"20:4187:7274":{"crate_id":20,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"9:586:12089":{"crate_id":9,"path":["miniz_oxide","deflate","core","SymFreq"],"kind":"struct"},"20:5680:7942":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"1:12306:14317":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"20:1584:4925":{"crate_id":20,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"6:7255:7468":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"17:8631:10917":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"18:582:3679":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"17:9382:10930":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"2:4103:12745":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"20:4308:7289":{"crate_id":20,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"6:545:4090":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"17:12964:11491":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"1:353:13537":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"17:9422:13370":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"2:50159:12839":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"17:562:11028":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"5:4064:3609":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"2:2330:2829":{"crate_id":2,"path":["core","cmp","min"],"kind":"function"},"2:9804:10236":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"1:8141:129":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"17:10497:21387":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"16:6330:11793":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"14:31:13486":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"2:21432:12765":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"16:6719:35735":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"1:484:10703":{"crate_id":1,"path":["std","thread","local","fast","Key"],"kind":"struct"},"20:493:4087":{"crate_id":20,"path":["libc","unix","timespec"],"kind":"struct"},"2:54210:12425":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"20:943:2614":{"crate_id":20,"path":["libc","unix","linux_like","IP_TTL"],"kind":"constant"},"1:3958:3502":{"crate_id":1,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"17:8991:35750":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"1:8648:1906":{"crate_id":1,"path":["std","net","socket_addr","SocketAddrV4"],"kind":"struct"},"2:10336:10225":{"crate_id":2,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"16:2433:11699":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"1:12341:1363":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"16:5235:11777":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"6:495:4086":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"16:6210:12640":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"17:12514:11305":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"2:21184:12758":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"2:11764:19665":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"2:52338:12341":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"1:10897:3643":{"crate_id":1,"path":["std","sys","unix","stdio","Stderr"],"kind":"struct"},"2:11751:135":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"2:2728:3675":{"crate_id":2,"path":["core","marker","Tuple"],"kind":"trait"},"1:1611:10607":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"2:4145:10346":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"16:2487:11701":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"6:5523:2958":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"1:12345:630":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"2:47330:12812":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"20:5562:7902":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"2:2816:3528":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"17:9930:10948":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"17:10332:21385":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"17:13382:11618":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"20:7287:8912":{"crate_id":20,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"17:11536:11136":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"16:3457:10835":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"20:4734:7330":{"crate_id":20,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"2:2840:3533":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"6:4621:3227":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"17:11684:11159":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"1:11724:12916":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"2:50277:12844":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"1:1476:143":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"20:4818:7338":{"crate_id":20,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"1:3235:3647":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"20:5633:7940":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"9:896:20126":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"2:46873:12775":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"20:1604:4927":{"crate_id":20,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"1:10460:13551":{"crate_id":1,"path":["std","sys","unix","os","SplitPaths"],"kind":"struct"},"16:7357:11895":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"1:4329:14393":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"2:39417:12772":{"crate_id":2,"path":["core","error","Source"],"kind":"struct"},"6:5749:10800":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"6:4212:7278":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"2:29649:67":{"crate_id":2,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"1:910:10122":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"6:4200:7277":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"16:6252:12643":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"17:12291:11267":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"2:8216:86":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"1:7895:29097":{"crate_id":1,"path":["std","thread","local","fast","DtorState"],"kind":"enum"},"12:669:13489":{"crate_id":12,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"2:2785:3520":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"6:6981:8743":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"1:7783:13597":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"17:9031:35743":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"2:3130:3542":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"20:1035:2681":{"crate_id":20,"path":["libc","unix","linux_like","IPV6_MULTICAST_LOOP"],"kind":"constant"},"6:4716:7329":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"6:581:4092":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"16:6676:11728":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"17:12148:11242":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"17:11500:11128":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"2:4394:10349":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"6:4461:7304":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"5:6978:12737":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"16:7288:12694":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"2:50085:12834":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"6:501:2966":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"17:9250:13360":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"2:20247:14489":{"crate_id":2,"path":["core","core_simd","elements","float","SimdFloat"],"kind":"trait"},"20:6423:8361":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"2:0:486":{"crate_id":2,"path":["core"],"kind":"module"},"20:650:4140":{"crate_id":20,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"6:6500:8366":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"1:8106:13569":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"12:725:12719":{"crate_id":12,"path":["hashbrown","map","Keys"],"kind":"struct"},"1:10702:14165":{"crate_id":1,"path":["std","sys","unix","process","process_common","Argv"],"kind":"struct"},"1:8922:3580":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"1:574:10666":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"6:5692:7944":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"5:836:10593":{"crate_id":5,"path":["alloc","collections","binary_heap","retain","RebuildOnDrop"],"kind":"struct"},"16:5558:21207":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"2:2438:19660":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"2:50840:12882":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"16:5614:12585":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"5:4234:10613":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"2:46522:198":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"17:11841:11180":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"9:676:20133":{"crate_id":9,"path":["miniz_oxide","deflate","CompressionLevel"],"kind":"enum"},"6:1643:4930":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"16:3854:11751":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"1:2383:9775":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"6:560:2920":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"1:4259:14387":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"2:2490:234":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"2:50856:12886":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"1:944:10607":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"12:2184:12082":{"crate_id":12,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"2:52718:12365":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"1:8981:3582":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"17:13082:11520":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"17:13168:11545":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"2:50313:12846":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"17:9193:35747":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"17:9553:10935":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"2:21945:167":{"crate_id":2,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"16:5596:11779":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"1:6885:10688":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutexGuard"],"kind":"struct"},"6:4417:7300":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"1:4408:26737":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"1:5671:13165":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"16:7298:12695":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"20:7030:2490":{"crate_id":20,"path":["libc","unix","linux_like","linux","arch","generic","SO_SNDTIMEO"],"kind":"constant"},"17:9738:12538":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"20:5668:7941":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"2:20780:14509":{"crate_id":2,"path":["core","core_simd","ord","SimdOrd"],"kind":"trait"},"17:9293:13364":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"16:2749:11712":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"17:11259:11064":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"17:13148:11539":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"20:5480:7929":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"16:2389:11697":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"1:11957:12482":{"crate_id":1,"path":["std","personality","dwarf","eh","EHContext"],"kind":"struct"},"2:4213:204":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"2:1668:1065":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"18:614:35752":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"2:47592:12821":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"2:39413:13532":{"crate_id":2,"path":["core","error","private","Internal"],"kind":"struct"},"2:46925:12777":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"12:393:35718":{"crate_id":12,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"1:4913:9582":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"17:10455:10999":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"20:4745:7331":{"crate_id":20,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"2:47128:13534":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"6:5605:7939":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"6:6375:4866":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"17:11247:11063":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"1:6569:203":{"crate_id":1,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"9:622:20146":{"crate_id":9,"path":["miniz_oxide","deflate","core","TDEFLFlush"],"kind":"enum"},"12:1681:143":{"crate_id":12,"path":["hashbrown","set","HashSet"],"kind":"struct"},"18:766:25027":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"17:9844:13398":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"16:5949:12629":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"16:7044:35739":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"17:8162:21267":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"2:2670:2774":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"16:4217:11753":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"17:12748:11438":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"17:12884:11468":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"2:50401:12851":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"2:50605:12865":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"20:4661:7322":{"crate_id":20,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"1:9485:12471":{"crate_id":1,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"2:46864:12774":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"1:9242:13575":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"17:10445:10996":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"2:46685:12290":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"17:13594:11672":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"18:521:25028":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"2:2970:2384":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"16:6186:11720":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"1:8118:12439":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"17:8241:21269":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"12:387:35717":{"crate_id":12,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"5:5390:10620":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"2:47381:3623":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"17:9223:21286":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"1:8174:3637":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"2:49189:71":{"crate_id":2,"path":["core","fmt","ArgumentV1"],"kind":"struct"},"9:0:3352":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"2:5656:33833":{"crate_id":2,"path":["core","iter","adapters","flatten","TrustedConstSize"],"kind":"trait"},"17:9627:13380":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"20:1034:2662":{"crate_id":20,"path":["libc","unix","linux_like","IPV6_MULTICAST_HOPS"],"kind":"constant"},"2:48320:10226":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"2:47360:12814":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"1:3091:3655":{"crate_id":1,"path":["std","io","readbuf","BorrowedBuf"],"kind":"struct"},"20:942:2626":{"crate_id":20,"path":["libc","unix","linux_like","IP_TOS"],"kind":"constant"},"20:1084:2759":{"crate_id":20,"path":["libc","unix","linux_like","TCP_NODELAY"],"kind":"constant"},"18:707:12530":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"2:48590:83":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"17:9328:13367":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"1:6243:10672":{"crate_id":1,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"17:8475:21254":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"1:8540:3500":{"crate_id":1,"path":["std","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"1:10479:14164":{"crate_id":1,"path":["std","sys","unix","os","Env"],"kind":"struct"},"16:7267:12691":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"2:3140:231":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"1:3599:25326":{"crate_id":1,"path":["std","net","display_buffer","DisplayBuffer"],"kind":"struct"},"2:7042:19799":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"17:12874:11467":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"1:2248:128":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"5:4938:10618":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"1:12349:728":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"2:50373:12848":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"17:9631:13381":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"16:6034:13451":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"2:50489:19584":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"6:4598:7317":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"2:49889:10219":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"20:1545:1916":{"crate_id":20,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"1:3382:3609":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"2:2757:3514":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"5:219:10587":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"17:11137:11050":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"1:12338:1027":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"20:4375:7297":{"crate_id":20,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"6:4605:7318":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"5:632:13506":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"6:646:4140":{"crate_id":6,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"20:525:2843":{"crate_id":20,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"1:11718:12915":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"16:6668:11833":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"2:1639:3487":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"5:7168:12744":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"1:8523:2050":{"crate_id":1,"path":["std","net","ip_addr","Ipv6Addr"],"kind":"struct"},"1:2516:3635":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"1:8158:118":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"2:11972:10663":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"17:11734:10952":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"2:47177:3622":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"17:9764:12541":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"20:481:4086":{"crate_id":20,"path":["libc","unix","utimbuf"],"kind":"struct"},"1:9405:12470":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"20:4583:7314":{"crate_id":20,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"16:7396:21216":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"6:5443:7873":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"2:7786:9761":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"2:8656:10188":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"2:4294:10347":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"2:20335:14481":{"crate_id":2,"path":["core","core_simd","eq","SimdPartialEq"],"kind":"trait"},"1:3409:2077":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"2:51116:12315":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"5:3611:3639":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"17:9283:13363":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"2:46858:12773":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"16:153:10571":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"2:7143:9686":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"18:609:13333":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"1:9008:3586":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"20:6438:8363":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"2:47289:12808":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"2:47260:12805":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"17:11343:11092":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"1:5014:2777":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"20:7012:2217":{"crate_id":20,"path":["libc","unix","linux_like","linux","arch","generic","SO_TYPE"],"kind":"constant"},"20:7245:7465":{"crate_id":20,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"17:11014:11041":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"17:10159:10984":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"2:2285:124":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"20:6000:1712":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","SOCK_STREAM"],"kind":"constant"},"1:7183:28366":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"16:7343:11735":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"2:4348:10348":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"2:52459:12345":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"20:4706:7327":{"crate_id":20,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"1:4459:14403":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"2:46599:3543":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"2:20492:14394":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","sealed","Sealed"],"kind":"trait"},"5:5740:14157":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"20:5869:7982":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"1:3484:3618":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"17:11951:11211":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"6:6572:8372":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"5:7157:221":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"5:2874:34621":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"2:2801:3524":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"2:29587:2775":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"20:1042:2697":{"crate_id":20,"path":["libc","unix","linux_like","IPV6_V6ONLY"],"kind":"constant"},"2:2822:3529":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"2:21465:14384":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"16:2557:11704":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"2:2769:3516":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"1:8674:3504":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"16:3263:11744":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"1:1123:13502":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"1:2589:10653":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"6:5582:7936":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"2:50669:12867":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"17:11485:11125":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"6:7243:7466":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"16:5374:11719":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"13:108:35722":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"16:6528:12660":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"5:3477:160":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"17:9873:13402":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"17:10088:10979":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"20:6532:8368":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"1:2029:181":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"17:12674:11428":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"5:5094:10588":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"20:7022:2421":{"crate_id":20,"path":["libc","unix","linux_like","linux","arch","generic","SO_LINGER"],"kind":"constant"},"17:11761:11169":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"2:51839:12322":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"1:3237:3648":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"2:50632:12866":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"2:49122:70":{"crate_id":2,"path":["core","fmt","rt","v1","Argument"],"kind":"struct"},"2:4:993":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"17:8596:10916":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"1:2909:127":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"20:1640:4929":{"crate_id":20,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"17:13047:11509":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"9:592:20145":{"crate_id":9,"path":["miniz_oxide","deflate","core","CompressionStrategy"],"kind":"enum"},"17:13413:11626":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"9:649:20147":{"crate_id":9,"path":["miniz_oxide","deflate","core","TDEFLStatus"],"kind":"enum"},"17:9658:13383":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"2:7787:9760":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"1:11883:2773":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"20:4652:7321":{"crate_id":20,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"1:12333:367":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"17:10257:13416":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"17:9601:10942":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"6:4611:7319":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"16:7329:11734":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"1:3274:3643":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"16:4574:11763":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"12:834:13494":{"crate_id":12,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"6:6554:8371":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"20:1529:1669":{"crate_id":20,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"20:4288:7286":{"crate_id":20,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"20:4483:7305":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"12:1628:10583":{"crate_id":12,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"9:111:20140":{"crate_id":9,"path":["miniz_oxide","deflate","core","CompressorOxide"],"kind":"struct"},"6:1701:4936":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"2:53750:12407":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"6:5472:7929":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"6:4367:7297":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"2:49999:10230":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"1:8899:3579":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"2:50331:12847":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"17:9488:13377":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"2:4723:32880":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"2:48243:9758":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"17:10796:11025":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"20:4302:7288":{"crate_id":20,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"1:2253:2767":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"16:7603:11910":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"16:6735:13462":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"2:5877:12749":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"6:4286:7287":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"16:2282:11686":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"2:20284:14490":{"crate_id":2,"path":["core","core_simd","elements","int","SimdInt"],"kind":"trait"},"17:11149:11051":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"20:7017:2450":{"crate_id":20,"path":["libc","unix","linux_like","linux","arch","generic","SO_RCVBUF"],"kind":"constant"},"17:9061:10935":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"6:4506:7307":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"1:6706:13565":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"6:4115:7270":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"1:5837:14428":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"2:51013:202":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"17:10642:21279":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"16:5203:10911":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"20:7016:2482":{"crate_id":20,"path":["libc","unix","linux_like","linux","arch","generic","SO_SNDBUF"],"kind":"constant"},"2:46544:200":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"17:12237:11261":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"5:2162:12733":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"2:9585:10237":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"2:50417:12773":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"20:4523:7308":{"crate_id":20,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"16:7497:11727":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"17:13031:11507":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"20:4629:3227":{"crate_id":20,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"15:0:3357":{"crate_id":15,"path":["addr2line"],"kind":"module"},"2:47599:12822":{"crate_id":2,"path":["core","iter","sources","from_generator","FromGenerator"],"kind":"struct"},"16:4385:11758":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"6:5672:7942":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"2:48514:82":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"16:3716:11750":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"16:4888:11773":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"2:8658:10187":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"17:11235:11060":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"17:9021:13356":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"6:4361:7296":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"6:4565:2911":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"6:6352:4893":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"1:6021:13558":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"5:3699:10588":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"17:12225:11260":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"2:51104:12889":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"1:2579:3636":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"2:10303:10224":{"crate_id":2,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"2:8649:111":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"1:9561:215":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"2:2742:3513":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"16:5510:12575":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"17:11368:11096":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"6:6415:8361":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"16:5996:13434":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"16:7567:21217":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"14:221:12035":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"2:2789:3522":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"1:8457:3623":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"1:9350:14442":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"12:300:12716":{"crate_id":12,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"2:7788:9759":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"12:777:10582":{"crate_id":12,"path":["hashbrown","map","ConsumeAllOnDrop"],"kind":"struct"},"20:2412:1745":{"crate_id":20,"path":["libc","unix","linux_like","linux","IPPROTO_MPTCP"],"kind":"constant"},"1:2250:13554":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"2:56581:14518":{"crate_id":2,"path":["core","core_simd","swizzle","Which"],"kind":"enum"},"2:48628:90":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"17:8752:3624":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"1:2026:182":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"6:62:3717":{"crate_id":6,"path":["libc","unix","DIR"],"kind":"enum"},"6:5498:7931":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"1:6097:10674":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"1:4909:9578":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"1:9870:10695":{"crate_id":1,"path":["std","sys","unix","fs","Dir"],"kind":"struct"},"5:1257:13502":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"2:51074:12312":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"5:6202:10588":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"12:1065:35716":{"crate_id":12,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"2:10942:12842":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"6:1707:2893":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"2:2228:97":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"20:61:3717":{"crate_id":20,"path":["libc","unix","DIR"],"kind":"enum"},"17:8871:13353":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"2:2486:235":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"2:50383:12849":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"5:3245:10579":{"crate_id":5,"path":["alloc","collections","btree","set","DrainFilter"],"kind":"struct"},"2:22044:166":{"crate_id":2,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"17:12836:11461":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"1:1105:13498":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"2:3221:3550":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"6:575:2420":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"18:755:12537":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"2:47118:10642":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"20:1578:4924":{"crate_id":20,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"2:50836:12881":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"20:7251:7466":{"crate_id":20,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"1:9296:3583":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"9:800:12141":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"17:12022:11225":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"2:8599:2078":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"2:1821:9803":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"17:13557:11665":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"2:21403:31690":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"1:4662:2838":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"16:7980:21219":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"17:8666:10918":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"20:6277:4129":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"17:13192:11549":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"1:1864:13551":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"12:1534:13504":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"1:6521:10672":{"crate_id":1,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"17:8295:21271":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"5:4817:3609":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"6:1562:4923":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"20:1612:4928":{"crate_id":20,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"1:8625:1626":{"crate_id":1,"path":["std","net","socket_addr","SocketAddr"],"kind":"enum"},"1:9550:164":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"16:8069:127":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"20:5741:7949":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"1:9288:12465":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"1:2401:14373":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"1:6434:10683":{"crate_id":1,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"2:11194:19576":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"16:5184:20321":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"12:2190:35715":{"crate_id":12,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"3:0:433":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"16:6200:12639":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"16:6690:11729":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"1:5585:119":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"2:8609:131":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"6:4540:7311":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"5:1387:10122":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"6:6424:8362":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"2:49426:144":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"6:4810:7338":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"5:3943:10226":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"12:320:10575":{"crate_id":12,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"1:8754:12449":{"crate_id":1,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"20:4369:7296":{"crate_id":20,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"16:2261:20323":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"12:815:13491":{"crate_id":12,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"20:578:4094":{"crate_id":20,"path":["libc","unix","tms"],"kind":"struct"},"5:1959:3639":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"2:21813:174":{"crate_id":2,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"17:10583:21278":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"2:53214:12373":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"20:4147:7272":{"crate_id":20,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"20:5576:7903":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"5:5138:10205":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"2:52047:12331":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"1:4446:14402":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"1:2871:10671":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"16:3566:11746":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"2:50832:12880":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"12:2198:12085":{"crate_id":12,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"16:2705:11710":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"18:681:12524":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"17:11853:11181":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"2:2251:105":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"16:7890:12705":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"2:4076:13524":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"17:8981:13355":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"1:5834:3824":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"2:20366:14483":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"5:4297:10613":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"2:2661:223":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"20:844:1701":{"crate_id":20,"path":["libc","unix","linux_like","AF_UNIX"],"kind":"constant"},"6:5684:7943":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"20:586:4095":{"crate_id":20,"path":["libc","unix","servent"],"kind":"struct"},"19:0:1009":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"20:4753:7332":{"crate_id":20,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"17:11300:11076":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"5:4219:242":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"2:4702:8913":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"17:11748:11168":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"1:7333:26746":{"crate_id":1,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"2:3304:68":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"20:5613:7939":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"2:3927:3609":{"crate_id":2,"path":["core","array","Guard"],"kind":"struct"},"12:762:10579":{"crate_id":12,"path":["hashbrown","map","DrainFilter"],"kind":"struct"},"20:43:1675":{"crate_id":20,"path":["libc","unix","c_int"],"kind":"typedef"},"16:6070:11785":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"2:53996:12412":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"17:11271:11065":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"20:1566:4923":{"crate_id":20,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"20:643:1914":{"crate_id":20,"path":["libc","unix","linux_like","sa_family_t"],"kind":"typedef"},"11:44:12088":{"crate_id":11,"path":["adler","Adler32"],"kind":"struct"},"5:1329:94":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"1:4911:9580":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"16:7970:12709":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"1:9499:27031":{"crate_id":1,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"17:1962:13349":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"2:2836:3532":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"1:12355:1458":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"2:2952:3547":{"crate_id":2,"path":["core","ops","generator","Generator"],"kind":"trait"},"6:5841:7183":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"2:49656:12831":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"17:8796:10922":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"1:9430:2113":{"crate_id":1,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"2:21040:14484":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"1:11123:12901":{"crate_id":1,"path":["std","sys","unix","fs","FileAttr"],"kind":"struct"},"20:4714:7328":{"crate_id":20,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"1:4267:14388":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"17:386:13341":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"2:20323:14394":{"crate_id":2,"path":["core","core_simd","elements","sealed","Sealed"],"kind":"trait"},"17:9820:13394":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"2:52240:12338":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"17:12909:11477":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"18:590:10814":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"5:1366:3583":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"2:21349:12199":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"5:7111:31655":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"17:13536:11662":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"2:29663:31852":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum16"],"kind":"enum"},"2:49990:10227":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"17:12768:11444":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"1:8772:13168":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"20:7222:7462":{"crate_id":20,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"2:50540:12863":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"2:2665:225":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"18:699:12528":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"17:10822:21280":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"16:6842:12688":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"5:1413:12720":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"1:8447:3622":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"17:10321:10987":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"20:4457:7303":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"2:2571:127":{"crate_id":2,"path":["core","error","Error"],"kind":"trait"},"20:7006:8744":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"2:47228:12800":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"6:4559:7313":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"2:29627:3491":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"17:13231:11561":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"2:49167:127":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"20:4220:7278":{"crate_id":20,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"17:13114:11531":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"18:644:10806":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"6:131:3765":{"crate_id":6,"path":["libc","unix","FILE"],"kind":"enum"},"17:11186:11057":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"6:4745:7332":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"17:13492:11647":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"20:5549:7935":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"17:12164:11245":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"17:13203:11553":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"16:2465:11700":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"18:491:12520":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"17:9778:12542":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"20:5518:7933":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"2:48885:10197":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"2:10737:19580":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"2:3184:3549":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"16:5122:11775":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"20:5707:7945":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"6:4280:7286":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"20:6360:4893":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"17:10528:13422":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"5:1228:13499":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"1:11104:13595":{"crate_id":1,"path":["std","sys","unix","fd","FileDesc"],"kind":"struct"},"6:487:2572":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"12:444:141":{"crate_id":12,"path":["hashbrown","map","HashMap"],"kind":"struct"},"20:7010:2216":{"crate_id":20,"path":["libc","unix","linux_like","linux","arch","generic","SOL_SOCKET"],"kind":"constant"},"16:6619:11827":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"16:4849:11772":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"1:4019:2115":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"2:47311:12810":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"16:5628:12586":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"1:9304:13577":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"17:2916:13350":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"1:8506:2045":{"crate_id":1,"path":["std","net","ip_addr","Ipv4Addr"],"kind":"struct"},"17:9350:10906":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"5:273:10588":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"20:1504:2842":{"crate_id":20,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"5:6350:10588":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"20:4643:7320":{"crate_id":20,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"20:6508:8366":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"20:4104:7268":{"crate_id":20,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"2:3972:13522":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"20:974:2576":{"crate_id":20,"path":["libc","unix","linux_like","IP_ADD_SOURCE_MEMBERSHIP"],"kind":"constant"},"16:7166:21215":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"2:52094:12332":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"2:50511:12854":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"1:4438:14401":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"1:7959:14313":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"17:11528:11134":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"1:9571:2839":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"20:1037:2657":{"crate_id":20,"path":["libc","unix","linux_like","IPV6_DROP_MEMBERSHIP"],"kind":"constant"},"16:6171:11790":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"6:6409:8360":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"2:1747:12185":{"crate_id":2,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"17:12934:11485":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"16:5447:13425":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"17:9475:13376":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"2:52794:12367":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"18:736:25026":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"17:11217:11059":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"1:4307:14390":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"16:3010:20351":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"12:659:10122":{"crate_id":12,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"1:8729:12900":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"17:10670:12559":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"7:0:1502":{"crate_id":7,"path":["unwind"],"kind":"module"},"1:12356:1455":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"2:11174:13527":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"1:6818:14440":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"20:1856:1918":{"crate_id":20,"path":["libc","unix","linux_like","linux","socklen_t"],"kind":"typedef"},"14:7:13486":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"2:54014:12413":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"20:846:1695":{"crate_id":20,"path":["libc","unix","linux_like","AF_INET"],"kind":"constant"},"1:12336:1475":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"1:11302:12157":{"crate_id":1,"path":["std","sys","unix","os_str","Buf"],"kind":"struct"},"17:8393:21274":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"2:2832:3531":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"20:5749:7950":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"1:9318:12466":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"20:553:4091":{"crate_id":20,"path":["libc","unix","winsize"],"kind":"struct"},"5:5813:3609":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"6:5720:7947":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"20:6285:4865":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"2:46991:12787":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"1:4251:14386":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"2:50408:12786":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"16:5541:12580":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"2:2557:115":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"20:7216:7461":{"crate_id":20,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"17:11559:11140":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"17:8814:128":{"crate_id":17,"path":["object","read","any","File"],"kind":"struct"},"20:1087:2851":{"crate_id":20,"path":["libc","unix","linux_like","TCP_KEEPIDLE"],"kind":"constant"},"2:50259:12843":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"20:499:4088":{"crate_id":20,"path":["libc","unix","rlimit"],"kind":"struct"},"1:11822:2115":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"16:2300:11688":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"2:49977:10213":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"6:1722:4937":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"5:1376:10226":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"2:56951:243":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"2:21038:14394":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"2:2702:3672":{"crate_id":2,"path":["core","marker","Freeze"],"kind":"trait"},"17:10075:13406":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"1:11548:12479":{"crate_id":1,"path":["std","sys","unix","time","Timespec"],"kind":"struct"},"17:13176:11546":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"17:12797:11452":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"6:4239:7281":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"17:10121:10982":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"5:7005:10122":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"1:12177:10708":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"16:6146:12635":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"17:12638:11398":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"1:11567:2839":{"crate_id":1,"path":["std","sys","unix","time","inner","Instant"],"kind":"struct"},"2:47246:12802":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"2:4339:10641":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"16:7093:11873":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"2:20523:14487":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"2:47615:12824":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"6:7166:8884":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"12:2205:3590":{"crate_id":12,"path":["hashbrown","TryReserveError"],"kind":"enum"},"6:4804:7337":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"2:9143:10653":{"crate_id":2,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"2:54069:12418":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"2:9043:10649":{"crate_id":2,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"18:690:12527":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"2:46425:3539":{"crate_id":2,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"20:1682:4933":{"crate_id":20,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"17:11974:11220":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"2:48704:92":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"6:1532:1915":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"17:8510:10912":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"12:1003:13498":{"crate_id":12,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"1:2257:3617":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"6:5733:7949":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"16:2341:11695":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"16:6593:12672":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"20:103:1736":{"crate_id":20,"path":["libc","unix","IPPROTO_ICMPV6"],"kind":"constant"},"2:1632:577":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"1:12347:730":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"2:9662:10238":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"20:4160:7273":{"crate_id":20,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"17:12337:10996":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"5:1212:12690":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"20:7029:2460":{"crate_id":20,"path":["libc","unix","linux_like","linux","arch","generic","SO_RCVTIMEO"],"kind":"constant"},"6:4224:7279":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"2:21453:12768":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"1:5891:203":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"17:11436:11100":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"1:11158:12439":{"crate_id":1,"path":["std","sys","unix","fs","FileTimes"],"kind":"struct"},"1:5095:2776":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"6:4300:7289":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"1:4899:14389":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"5:6088:10624":{"crate_id":5,"path":["alloc","vec","drain_filter","drop","BackshiftOnDrop"],"kind":"struct"},"17:10233:13414":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"6:4653:7322":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"18:624:35753":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"6:5727:7948":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"5:6275:10122":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"1:7821:10691":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"12:751:10607":{"crate_id":12,"path":["hashbrown","map","Drain"],"kind":"struct"},"17:8441:21276":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"2:1915:9804":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"1:6163:10676":{"crate_id":1,"path":["std","sync","mpmc","array","Channel"],"kind":"struct"},"2:2477:74":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"20:954:2636":{"crate_id":20,"path":["libc","unix","linux_like","IP_RECVTOS"],"kind":"constant"},"17:9831:13395":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"20:5843:7981":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"6:4706:7328":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"6:1600:4927":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"2:49456:12830":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"1:11341:12465":{"crate_id":1,"path":["std","sys","unix","process","process_common","ExitCode"],"kind":"struct"},"20:487:2966":{"crate_id":20,"path":["libc","unix","timeval"],"kind":"struct"},"2:48878:10196":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"1:6871:14160":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutex"],"kind":"struct"},"2:51023:208":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"16:5388:11722":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"6:4690:982":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"2:1602:1329":{"crate_id":2,"path":["core","mem","size_of"],"kind":"function"},"12:1138:13502":{"crate_id":12,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"2:46633:13533":{"crate_id":2,"path":["core","any","tags","MaybeSizedValue"],"kind":"struct"},"20:102:1733":{"crate_id":20,"path":["libc","unix","IPPROTO_ICMP"],"kind":"constant"},"5:1422:13503":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"20:1705:4936":{"crate_id":20,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"18:574:10806":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"17:10182:10985":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"16:7469:11736":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"5:1091:34156":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"16:5981:12632":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"16:6270:11721":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"20:5700:7944":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"2:20063:33988":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_left","Rotate"],"kind":"struct"},"17:10420:10995":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"17:12617:11391":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"16:6359:12654":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"12:1840:10607":{"crate_id":12,"path":["hashbrown","set","Drain"],"kind":"struct"},"20:4619:7319":{"crate_id":20,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"17:13327:11599":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"2:3145:134":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"17:9671:13384":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"1:9274:12464":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"5:2094:12730":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"1:6342:10676":{"crate_id":1,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"17:10997:11039":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"16:4327:11756":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"9:827:20221":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"6:5772:7951":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"1:10356:1677":{"crate_id":1,"path":["std","sys","unix","net","Socket"],"kind":"struct"},"1:4221:2832":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"2:47038:101":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"2:58291:12432":{"crate_id":2,"path":["core","core_simd","vector","ptr","SimdConstPtr"],"kind":"struct"},"20:5692:7943":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"6:7289:2841":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"20:540:2889":{"crate_id":20,"path":["libc","unix","iovec"],"kind":"struct"},"1:3319:3632":{"crate_id":1,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"2:5489:12748":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"17:13436:11639":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"6:507:4087":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"2:47199:12796":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"6:6392:4869":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"17:12118:11239":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"20:7297:2841":{"crate_id":20,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"9:709:3579":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"6:4427:7301":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"1:960:13503":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"20:1658:4931":{"crate_id":20,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"17:13007:11499":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"1:6418:10663":{"crate_id":1,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"16:2535:11703":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"1:8257:13573":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"18:727:10828":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"1:4317:14391":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"16:7825:11948":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"6:5534:7934":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"1:4321:14392":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"6:4126:7271":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"2:2845:3534":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"17:9751:12540":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"2:1470:1623":{"crate_id":2,"path":["core","mem"],"kind":"module"},"5:1443:13490":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"2:2974:3538":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"6:5713:7946":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"1:12357:774":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"1:11323:27744":{"crate_id":1,"path":["std","sys","unix","process","process_common","ProgramKind"],"kind":"enum"},"20:1032:2690":{"crate_id":20,"path":["libc","unix","linux_like","IPV6_UNICAST_HOPS"],"kind":"constant"},"6:4317:7291":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"2:2763:3517":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"5:1463:13509":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"17:8881:35748":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"17:1903:21318":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"17:8774:10921":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"2:20310:14491":{"crate_id":2,"path":["core","core_simd","elements","uint","SimdUint"],"kind":"trait"},"20:6432:8362":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"2:20497:14482":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","ToBitMask"],"kind":"trait"},"17:13100:11524":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"2:50852:12885":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"17:13518:11656":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"16:4413:11759":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"17:13374:11617":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"17:12948:11488":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"17:12349:11276":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"6:4335:7293":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"1:9419:13578":{"crate_id":1,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"16:5494:21206":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"2:2715:3673":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"17:12008:11223":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"2:21387:31618":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"6:4592:7316":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"5:781:96":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"16:7659:21218":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"6:6302:8357":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"5:2873:10174":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"1:4749:14407":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"5:1243:13498":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"6:5568:7903":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"1:8680:3503":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"2:50019:10229":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"6:5835:7981":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"5:6908:10211":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"0:627:1775":{"crate_id":0,"path":["socket2","TcpKeepalive"],"kind":"struct"},"2:48312:3583":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"2:9158:10658":{"crate_id":2,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"1:9260:12463":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"2:20097:31845":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"20:1726:4937":{"crate_id":20,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"1:4843:14411":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"1:678:13542":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"6:4496:7306":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"17:10921:11034":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"5:3501:10226":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"2:50053:12307":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"2:54023:12414":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"17:12033:11226":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"17:8701:10919":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"20:1536:1915":{"crate_id":20,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"2:22476:12213":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"20:4589:7315":{"crate_id":20,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"2:51992:12328":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"20:55:2840":{"crate_id":20,"path":["libc","unix","ssize_t"],"kind":"typedef"},"2:50526:12860":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"20:4548:7311":{"crate_id":20,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"2:49438:3579":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"2:20372:14485":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"6:6998:8744":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"17:9681:10869":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"17:9577:10940":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"2:51761:12319":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"2:50127:10231":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"6:6430:8363":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"2:48185:3583":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"2:2663:108":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"2:49241:73":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"2:38221:3679":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"2:20516:14394":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"17:10403:11023":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"20:1647:4930":{"crate_id":20,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"2:51695:12316":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"17:9526:13378":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"6:7279:8912":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"20:1522:2846":{"crate_id":20,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"12:853:13496":{"crate_id":12,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"1:8398:3652":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"12:1836:10122":{"crate_id":12,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"17:3249:13352":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"2:48871:10188":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"6:1574:4924":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"12:822:14326":{"crate_id":12,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"16:7872:12702":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"11:36:12087":{"crate_id":11,"path":["adler","algo","U32X4"],"kind":"struct"},"17:10973:11038":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"5:6962:10122":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"20:5884:7983":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"2:21341:12198":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"17:12550:11336":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"6:4797:7336":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"1:1632:12723":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"6:4449:7303":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"2:48864:10187":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"16:6161:21210":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"2:22077:12212":{"crate_id":2,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"6:7226:7464":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"17:12980:11495":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"20:5542:7934":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"6:4673:7325":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"1:8831:14421":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"17:12211:11259":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"18:636:10824":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"5:3057:95":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"2:10707:19850":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"20:5603:7938":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"17:12307:11269":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"1:8464:3624":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"1:8939:3581":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"20:4362:7295":{"crate_id":20,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"2:50363:3627":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"2:50717:12876":{"crate_id":2,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"20:7015:2395":{"crate_id":20,"path":["libc","unix","linux_like","linux","arch","generic","SO_BROADCAST"],"kind":"constant"},"20:4445:7302":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"20:6319:8358":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"2:53812:12408":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"17:8368:21273":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"17:13527:11660":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"2:47208:12797":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"17:12756:11439":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"17:12103:11235":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"12:98:12712":{"crate_id":12,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"2:47409:12819":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"17:10360:12544":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"17:10283:13418":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"20:4606:7317":{"crate_id":20,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"17:9644:13382":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"2:48193:10226":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"1:11620:10701":{"crate_id":1,"path":["std","sys_common","once","futex","CompletionGuard"],"kind":"struct"},"17:11330:11088":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"2:49137:67":{"crate_id":2,"path":["core","fmt","rt","v1","Alignment"],"kind":"enum"},"2:52362:12342":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"2:54043:12416":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"17:9108:13357":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"17:11161:11054":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"2:52764:12366":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"20:1033:2671":{"crate_id":20,"path":["libc","unix","linux_like","IPV6_MULTICAST_IF"],"kind":"constant"},"1:661:13541":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"2:56964:243":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"2:47298:12809":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"6:5480:7930":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"17:11721:11163":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"16:7249:13473":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"20:473:2572":{"crate_id":20,"path":["libc","unix","group"],"kind":"struct"},"17:12176:11247":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"16:7059:9757":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"1:1889:13553":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"16:6298:12644":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"2:4019:19558":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"6:554:2889":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"17:11315:11082":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"16:6052:13459":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"2:20525:12188":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"1:1002:13497":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"2:39426:3674":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"5:3488:3583":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"16:6059:35738":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"17:247:13340":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"20:1509:2845":{"crate_id":20,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"2:25286:12214":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"5:881:3583":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"6:4768:7334":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"1:1114:13499":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"6:4659:7323":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"1:3466:2078":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"16:6567:12671":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"1:2613:3628":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"1:8182:3639":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"2:51891:12324":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"2:50231:10233":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"2:50213:10235":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"20:572:4093":{"crate_id":20,"path":["libc","unix","itimerval"],"kind":"struct"},"16:7117:35737":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"20:925:1762":{"crate_id":20,"path":["libc","unix","linux_like","MSG_TRUNC"],"kind":"constant"},"2:3355:19616":{"crate_id":2,"path":["core","any","Provider"],"kind":"trait"},"1:5359:13555":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"16:6781:13463":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"16:2320:11694":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"2:53874:12409":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"2:9493:3583":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"6:6329:3875":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"16:2894:20349":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"6:4683:7326":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"20:5512:7932":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"20:6580:8372":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"2:54118:12421":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"15:175:20303":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"2:46984:12786":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"16:5433:12569":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"6:0:801":{"crate_id":6,"path":["libc"],"kind":"module"},"17:10875:11030":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"16:4635:11765":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"20:4667:7323":{"crate_id":20,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"20:7263:7468":{"crate_id":20,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"12:119:10573":{"crate_id":12,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"17:10708:12560":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"16:7237:11893":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"2:47630:10648":{"crate_id":2,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"2:52408:12344":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"1:8798:2834":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"2:11961:106":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"2:21:667":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"1:12301:27834":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"16:2930:20350":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"5:4722:201":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"2:46378:3548":{"crate_id":2,"path":["core","ops","generator","GeneratorState"],"kind":"enum"},"5:3132:34568":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"6:4274:7285":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"6:600:4095":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"2:56990:243":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"16:5815:21208":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"1:11188:2079":{"crate_id":1,"path":["std","sys","unix","io","IoSlice"],"kind":"struct"},"2:50900:3558":{"crate_id":2,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"2:8664:191":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"17:10245:13415":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"17:10296:13419":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"16:6376:21211":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"16:5963:191":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"16:5839:21209":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"9:382:20230":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"1:9477:13584":{"crate_id":1,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"6:4489:3668":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"17:242:13339":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"17:13506:11654":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"2:47168:13535":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"1:1967:14366":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"5:2065:12728":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"11:0:3354":{"crate_id":11,"path":["adler"],"kind":"module"},"6:4294:7288":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"12:2178:12081":{"crate_id":12,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"2:12084:10210":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"2:52506:12346":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"2:4222:13526":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"16:5878:20322":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"16:6704:11836":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"1:9424:106":{"crate_id":1,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"2:29621:1624":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"16:7426:13481":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"2:20116:31840":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"2:8926:3564":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"6:6953:4045":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"2:21258:12193":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"2:39377:12084":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"1:11168:129":{"crate_id":1,"path":["std","sys","unix","fs","FileType"],"kind":"struct"},"1:10615:13175":{"crate_id":1,"path":["std","sys","unix","pipe","AnonPipe"],"kind":"struct"},"17:9885:13403":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"5:7080:102":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"2:6469:10130":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"1:8405:3654":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"6:4665:7324":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"2:50844:12883":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"20:1672:4932":{"crate_id":20,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"2:56977:243":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"20:5590:7936":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"14:187:20298":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"20:4504:7306":{"crate_id":20,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"6:4379:7298":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"1:545:10600":{"crate_id":1,"path":["std","thread","PanicGuard"],"kind":"struct"},"2:52954:12369":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"1:6054:13562":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"20:6961:4045":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"2:11240:19586":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"20:4435:7301":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"2:29402:14383":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"20:6989:8743":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"2:50694:12868":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"17:10374:12548":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"16:6816:12682":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"1:4273:14389":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"2:7470:10489":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"20:7018:2413":{"crate_id":20,"path":["libc","unix","linux_like","linux","arch","generic","SO_KEEPALIVE"],"kind":"constant"},"16:2657:11708":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"2:3169:31944":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"20:4425:7300":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"1:12352:1459":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"1:9366:14443":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"1:2399:14372":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"2:47321:12811":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"6:1668:4932":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"20:7234:7464":{"crate_id":20,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"6:4761:7333":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"16:7372:35734":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"20:6983:8742":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"20:1699:4935":{"crate_id":20,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"2:3635:10122":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"6:5876:7983":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"17:8110:21253":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"2:9624:10223":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"17:13184:11548":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"20:4600:7316":{"crate_id":20,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"1:3162:14050":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"16:3188:11743":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"6:4096:7268":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"1:8776:3875":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"2:50009:10228":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"16:6241:12642":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"2:1548:3609":{"crate_id":2,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"5:2055:10600":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"17:3125:13351":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"5:3872:10607":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"5:6999:10122":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"20:1711:2893":{"crate_id":20,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"20:1742:4938":{"crate_id":20,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"1:681:13544":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"20:4354:7294":{"crate_id":20,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"2:48125:178":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"1:359:13538":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"17:8418:21275":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"17:12198:11258":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"17:10854:21281":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"18:80:25015":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"5:6932:10607":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"2:47218:12799":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"2:46456:195":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"1:12350:729":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"17:12609:11388":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"6:513:4088":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"1:8991:3583":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"6:519:4089":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"17:13158:11542":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"2:56938:243":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"12:861:13497":{"crate_id":12,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"20:1599:4926":{"crate_id":20,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"6:7249:7467":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"1:11989:12918":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"20:4542:7310":{"crate_id":20,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"17:9691:13386":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"2:3157:3546":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"20:975:2581":{"crate_id":20,"path":["libc","unix","linux_like","IP_DROP_SOURCE_MEMBERSHIP"],"kind":"constant"},"1:12348:727":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"17:11873:11184":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"2:53920:12410":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"1:12335:409":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"20:4282:7285":{"crate_id":20,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"2:49838:13536":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"20:7257:7467":{"crate_id":20,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"5:7052:3590":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"20:7011:2471":{"crate_id":20,"path":["libc","unix","linux_like","linux","arch","generic","SO_REUSEADDR"],"kind":"constant"},"1:8722:1626":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"17:13134:11537":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"17:11288:11073":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"17:10752:11023":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"6:4816:7339":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"16:4144:11752":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"20:6456:8364":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"17:1021:13344":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"2:8375:33902":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"1:1626:12722":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"1:8997:3585":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"1:7910:12438":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"5:6156:10607":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"17:12251:11262":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"18:0:3360":{"crate_id":18,"path":["memchr"],"kind":"module"},"4:0:3350":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"16:4921:11774":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"2:9517:10226":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"6:4179:7274":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"16:6496:21212":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"5:6917:10122":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"12:1859:12722":{"crate_id":12,"path":["hashbrown","set","Difference"],"kind":"struct"},"1:8612:3501":{"crate_id":1,"path":["std","net","parser","AddrParseError"],"kind":"struct"},"9:956:20128":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"17:8272:21270":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"1:8483:152":{"crate_id":1,"path":["std","net","ip_addr","IpAddr"],"kind":"enum"},"20:5506:7931":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"2:2747:3518":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"1:3574:1625":{"crate_id":1,"path":["std","net"],"kind":"module"},"16:5219:10912":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"2:3984:13523":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"20:4110:7269":{"crate_id":20,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"17:11356:11093":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"1:9590:3553":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"17:12630:11397":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"1:7980:12890":{"crate_id":1,"path":["std","collections","hash","map","RandomState"],"kind":"struct"},"1:9337:12467":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"6:6479:8365":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"17:8055:21255":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"20:6400:4869":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"2:3367:13521":{"crate_id":2,"path":["core","any","Demand"],"kind":"struct"},"6:4247:7282":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"2:6605:33180":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"6:4102:7269":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"2:57003:243":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"2:21366:31653":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"17:11087:11045":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"17:8339:21272":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"1:7905:13566":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"2:46626:11891":{"crate_id":2,"path":["core","any","tags","Value"],"kind":"struct"},"17:13404:11624":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"1:5706:13167":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"1:8849:3569":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"12:1866:12723":{"crate_id":12,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"2:52876:12368":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"18:599:35751":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"5:3623:13510":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"5:6970:195":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"1:9465:13582":{"crate_id":1,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"5:6940:10597":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"18:481:12519":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"17:13478:11645":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"5:6483:10620":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"5:2880:14155":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"17:9791:12543":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"2:22011:169":{"crate_id":2,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"6:5541:7935":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"20:5728:7947":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"6:6311:8358":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"20:4123:7270":{"crate_id":20,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"1:6702:12823":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"17:0:3359":{"crate_id":17,"path":["object"],"kind":"module"},"2:48269:207":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"20:6301:3968":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"20:6546:8369":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"16:2793:11714":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"16:5737:12601":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"2:21747:172":{"crate_id":2,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"2:2658:2041":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"17:10394:12553":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"2:57016:243":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"2:9790:10233":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"2:8884:140":{"crate_id":2,"path":["core","hash","macros","Hash"],"kind":"proc_derive"},"20:6330:8359":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"6:4307:7290":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"5:1404:12719":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"20:122:3766":{"crate_id":20,"path":["libc","unix","fpos_t"],"kind":"enum"},"2:8654:119":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"2:10882:12836":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"2:2811:3526":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"17:11708:11160":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"17:13279:11598":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"16:7909:12708":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"16:7637:12698":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"20:4315:7290":{"crate_id":20,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"2:2322:186":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"2:48666:85":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"18:564:10813":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"17:11617:11147":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"5:5704:69":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"2:54034:12415":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"6:5625:7940":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"1:12342:1441":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"17:8526:10913":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"17:10221:13413":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"20:4199:7276":{"crate_id":20,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"16:2605:11706":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"18:515:10809":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"17:10608:10891":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"17:11828:11179":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"12:1845:10579":{"crate_id":12,"path":["hashbrown","set","DrainFilter"],"kind":"struct"},"1:9609:3554":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"16:0:3358":{"crate_id":16,"path":["gimli"],"kind":"module"},"1:11939:12481":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"2:8872:140":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"2:21131:12757":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"5:3119:12723":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"2:8666:10194":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"20:5531:2958":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"2:46962:12773":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"12:1085:13500":{"crate_id":12,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"2:38204:180":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"20:7228:7463":{"crate_id":20,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"5:7251:10627":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"1:9520:12474":{"crate_id":1,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"1:8111:12893":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"1:8426:3619":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"6:1550:4922":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"2:48438:81":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"2:51940:12326":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"5:1612:10588":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"12:810:13503":{"crate_id":12,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"2:49448:12829":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"20:6417:8360":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"16:6472:11816":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"12:2080:13499":{"crate_id":12,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"20:531:4090":{"crate_id":20,"path":["libc","unix","hostent"],"kind":"struct"},"1:7225:10690":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"1:6466:13563":{"crate_id":1,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"14:40:11039":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"2:53030:12371":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"14:160:13486":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"5:2375:12178":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"2:7083:149":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"0:0:1806":{"crate_id":0,"path":["socket2"],"kind":"module"},"20:105:1742":{"crate_id":20,"path":["libc","unix","IPPROTO_UDP"],"kind":"constant"},"16:7278:11732":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"2:2921:1979":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"6:4581:7315":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"0:615:1755":{"crate_id":0,"path":["socket2","RecvFlags"],"kind":"struct"},"1:7990:2075":{"crate_id":1,"path":["std","collections","hash","map","DefaultHasher"],"kind":"struct"},"2:52316:12340":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"6:4231:7280":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"6:4698:7327":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"20:4214:7124":{"crate_id":20,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"20:4691:7326":{"crate_id":20,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"20:4294:7287":{"crate_id":20,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"12:274:12713":{"crate_id":12,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"16:534:12562":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"2:50828:12879":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"5:1432:13489":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"18:96:25016":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"5:3568:10588":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"17:9857:13400":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"17:11909:11190":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"5:7097:12738":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"18:548:140":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"1:2426:1908":{"crate_id":1,"path":["std","io"],"kind":"module"},"1:2907:207":{"crate_id":1,"path":["std","io","error","Result"],"kind":"typedef"},"6:6448:8364":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"2:7079:133":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"1:2653:3638":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"1:774:141":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"2:46937:12778":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"2:21978:168":{"crate_id":2,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"1:1887:13552":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"6:4575:7314":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"2:3996:103":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"5:688:110":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"2:49964:10212":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"2:47606:12823":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"2:46945:19654":{"crate_id":2,"path":["core","char","EscapeUnicodeState"],"kind":"enum"},"6:4534:7310":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"17:9539:13379":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"20:6001:1716":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","SOCK_DGRAM"],"kind":"constant"},"17:10721:11022":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"2:11785:33095":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"16:3402:11745":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"16:7309:11733":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"5:864:10595":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"17:9263:13361":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"1:11643:13596":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"16:2367:11696":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"1:9248:183":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"2:10993:10237":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"2:6558:19801":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"20:4535:7309":{"crate_id":20,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"6:4515:7308":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"6:5741:7950":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"6:567:4091":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"20:4812:7337":{"crate_id":20,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"17:13071:11516":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"5:288:9688":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"17:9371:13357":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"16:4689:11767":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"1:8365:3656":{"crate_id":1,"path":["std","io","readbuf","BorrowedCursor"],"kind":"struct"}},"external_crates":{"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"20":{"name":"libc","html_root_url":null},"11":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":24}