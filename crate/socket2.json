{"root":"0:0:1824","crate_version":"0.5.2","includes_private":false,"index":{"0:198:2639":{"id":"0:198:2639","crate_id":0,"name":"set_multicast_ttl_v4","span":{"filename":"src/socket.rs","begin":[1409,4],"end":[1418,5]},"visibility":"public","docs":"Set the value of the `IP_MULTICAST_TTL` option for this socket.\n\nIndicates the time-to-live value of outgoing multicast packets for\nthis socket. The default value is 1 which means that multicast packets\ndon't leave the local network unless explicitly requested.\n\nNote that this may not have any affect on IPv6 sockets.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["ttl",{"kind":"primitive","inner":"u32"}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:2865:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2538-0:645:1795":{"id":"b:2:2538-0:645:1795","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2497:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2507:234","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"TcpKeepalive","id":"0:645:1795","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2541:127","2:2542:1453"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:136:2310":{"id":"0:136:2310","crate_id":0,"name":"recv_vectored","span":{"filename":"src/socket.rs","begin":[473,4],"end":[478,5]},"visibility":"public","docs":"Receives data on the socket from the remote address to which it is\nconnected. Unlike [`recv`] this allows passing multiple buffers.\n\nThe [`connect`] method will connect this socket to a remote address.\nThis method might fail if the socket is not connected.\n\nIn addition to the number of bytes read, this function returns the flags\nfor the received message. See [`RecvFlags`] for more information about\nthe returned flags.\n\nAdditional documentation can be found in manual of the OS:\n\n * DragonFly BSD: <https://man.dragonflybsd.org/?command=recvmsg&section=2>\n * FreeBSD: <https://www.freebsd.org/cgi/man.cgi?query=recvmsg&sektion=2>\n * Linux: <https://man7.org/linux/man-pages/man2/recvmsg.2.html>\n * macOS: <https://developer.apple.com/library/archive/documentation/System/Conceptual/ManPages_iPhoneOS/man2/recvmsg.2.html> (archived, actually for iOS)\n * NetBSD: <https://man.netbsd.org/recvmsg.2>\n * OpenBSD: <https://man.openbsd.org/recvmsg.2>\n * iOS: <https://developer.apple.com/library/archive/documentation/System/Conceptual/ManPages_iPhoneOS/man2/recvmsg.2.html> (archived)\n * illumos: <https://illumos.org/man/3SOCKET/recvmsg>\n * Windows: <https://docs.microsoft.com/en-us/windows/win32/api/winsock2/nf-winsock2-recvmsg>\n\n[`recv`]: Socket::recv\n[`connect`]: Socket::connect\n\n# Safety\n\nNormally casting a `IoSliceMut` to `MaybeUninitSlice` would be unsound,\nas that allows us to write uninitialised bytes to the buffer. However\nthis implementation promises to not write uninitialised bytes to the\n`bufs` and passes it directly to `recvmsg(2)` system call. This promise\nensures that this function can be called using `bufs` of type `&mut\n[IoSliceMut]`.\n\nNote that the [`io::Read::read_vectored`] implementation calls this\nfunction with `buf`s of type `&mut [IoSliceMut]`, allowing initialised\nbuffers to be used without using `unsafe`.","links":{"`RecvFlags`":"0:633:1775","Socket::recv":"0:133:2274","Socket::connect":"0:121:2187","`io::Read::read_vectored`":"1:3373:2797"},"attrs":["#[cfg(not(target_os = \"redox\"))]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["bufs",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"resolved_path","inner":{"name":"MaybeUninitSlice","id":"0:543:1785","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:2865:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"primitive","inner":"usize"},{"kind":"resolved_path","inner":{"name":"RecvFlags","id":"0:633:1775","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3327-0:264:1693":{"id":"b:2:3327-0:264:1693","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2675:3548","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3325:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"SockRef","id":"0:264:1693","args":{"angle_bracketed":{"args":[{"lifetime":"'s"}],"bindings":[]}}}},"items":["2:3329:1467"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:553":{"id":"0:553","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[395,0],"end":[401,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Deref","id":"2:2906:116","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"MaybeUninitSlice","id":"0:543:1785","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["0:555:227","0:556:543"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:240:2796":{"id":"0:240:2796","crate_id":0,"name":"read","span":{"filename":"src/socket.rs","begin":[1983,4],"end":[1987,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:2865:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5320:35760":{"id":"5:5320:35760","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7180:221"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}],["count",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7180:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11570:13827","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:53:2021":{"id":"0:53:2021","crate_id":0,"name":"as_storage","span":{"filename":"src/sockaddr.rs","begin":[187,4],"end":[189,5]},"visibility":"public","docs":"Retuns the address as the storage.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"sockaddr_storage","id":"20:1721:1936","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:2732:3710-0:565:1691":{"id":"a:2:2732:3710-0:565:1691","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2732:3710","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"SockAddr","id":"0:565:1691","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"b:2:2527-0:110:1692":{"id":"b:2:2527-0:110:1692","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2500:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Socket","id":"0:110:1692","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2529:684"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:11919:27322":{"id":"2:11919:27322","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"2:11565:19914","`DoubleEndedIterator`":"2:7174:120","prim@char":"1:11857:411","str::split":"2:11913:27318"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplit","id":"2:42604:9674","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11570:13827","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11570:13827","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11585:19912","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:2682:225-0:565:1691":{"id":"a:2:2682:225-0:565:1691","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2682:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"SockAddr","id":"0:565:1691","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:247":{"id":"0:247","crate_id":0,"name":null,"span":{"filename":"src/socket.rs","begin":[2012,0],"end":[2025,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["is_write_vectored","write_fmt","write_all_vectored","by_ref","write_all","write_vectored"],"trait":{"name":"Write","id":"1:3428:2107","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"resolved_path","inner":{"name":"Socket","id":"0:110:1692","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"items":["0:249:1652","0:250:2798","0:251:2799"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:211:2690":{"id":"0:211:2690","crate_id":0,"name":"multicast_hops_v6","span":{"filename":"src/socket.rs","begin":[1588,4],"end":[1593,5]},"visibility":"public","docs":"Get the value of the `IPV6_MULTICAST_HOPS` option for this socket\n\nFor more information about this option, see [`set_multicast_hops_v6`].\n\n[`set_multicast_hops_v6`]: Socket::set_multicast_hops_v6","links":{"Socket::set_multicast_hops_v6":"0:213:2695"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:2865:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"u32"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:590:684":{"id":"0:590:684","crate_id":0,"name":"from","span":{"filename":"src/socket.rs","begin":[2042,0],"end":[2042,29]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["socket",{"kind":"resolved_path","inner":{"name":"Socket","id":"0:110:1692","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"net::UdpSocket","id":"1:3770:2802","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2533-0:110:1692":{"id":"b:2:2533-0:110:1692","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2507:234","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2503:235","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Socket","id":"0:110:1692","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2536:127","2:2537:1454"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:505:1657":{"id":"0:505:1657","crate_id":0,"name":"into_raw_fd","span":{"filename":"src/sys/unix.rs","begin":[2833,4],"end":[2835,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"c_int","id":"20:43:1690","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:604":{"id":"0:604","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[202,22],"end":[202,24]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"2:2302:124","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Domain","id":"0:597:1707","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:530:684":{"id":"0:530:684","crate_id":0,"name":"from","span":{"filename":"src/lib.rs","begin":[284,4],"end":[286,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["t",{"kind":"resolved_path","inner":{"name":"Type","id":"0:609:1723","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"c_int","id":"20:43:1690","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3327-0:543:1785":{"id":"b:2:3327-0:543:1785","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2675:3548","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3325:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"MaybeUninitSlice","id":"0:543:1785","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:3329:1467"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"5:674:9634":{"id":"5:674:9634","crate_id":5,"name":"Owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"generic","inner":"T"}}},"0:541":{"id":"0:541","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[359,0],"end":[370,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(target_os = \"redox\"))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"RecvFlags","id":"0:633:1775","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:542:1781"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:128:2242":{"id":"0:128:2242","crate_id":0,"name":"peer_addr","span":{"filename":"src/socket.rs","begin":[334,4],"end":[336,5]},"visibility":"public","docs":"Returns the socket address of the remote peer of this socket.\n\nThis function directly corresponds to the `getpeername(2)` function on\nWindows and Unix.\n\nAdditional documentation can be found in manual of the OS:\n\n * DragonFly BSD: <https://man.dragonflybsd.org/?command=getpeername&section=2>\n * FreeBSD: <https://www.freebsd.org/cgi/man.cgi?query=getpeername&sektion=2>\n * Linux: <https://man7.org/linux/man-pages/man2/getpeername.2.html>\n * macOS: <https://developer.apple.com/library/archive/documentation/System/Conceptual/ManPages_iPhoneOS/man2/getpeername.2.html> (archived, actually for iOS)\n * NetBSD: <https://man.netbsd.org/getpeername.2>\n * OpenBSD: <https://man.openbsd.org/getpeername.2>\n * iOS: <https://developer.apple.com/library/archive/documentation/System/Conceptual/ManPages_iPhoneOS/man2/getpeername.2.html> (archived)\n * illumos: <https://illumos.org/man/3SOCKET/getpeername>\n * Windows: <https://docs.microsoft.com/en-us/windows/win32/api/winsock2/nf-winsock2-getpeername>\n\n# Notes\n\nThis returns an error if the socket is not [`connect`ed].\n\n[`connect`ed]: Socket::connect","links":{"Socket::connect":"0:121:2187"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:2865:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"SockAddr","id":"0:565:1691","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:615":{"id":"0:615","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[245,22],"end":[245,24]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralEq","id":"2:2679:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Type","id":"0:609:1723","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:172:2487":{"id":"0:172:2487","crate_id":0,"name":"read_timeout","span":{"filename":"src/socket.rs","begin":[972,4],"end":[974,5]},"visibility":"public","docs":"Get value for the `SO_RCVTIMEO` option on this socket.\n\nIf the returned timeout is `None`, then `read` and `recv` calls will\nblock indefinitely.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:2865:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Option","id":"2:40589:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Duration","id":"2:43360:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:631":{"id":"0:631","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[296,26],"end":[296,35]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"2:2297:185","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Protocol","id":"0:621:1745","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Protocol","id":"0:621:1745","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:632:603"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:11916:27320":{"id":"2:11916:27320","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"1:11857:411","self::pattern":"2:11565:19914"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitInclusive","id":"2:11389:9680","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11570:13827","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:277:658":{"id":"0:277:658","crate_id":0,"name":"fmt","span":{"filename":"src/sockref.rs","begin":[116,4],"end":[122,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"fmt::Formatter","id":"2:9010:131","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"fmt::Result","id":"2:8999:207","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:506":{"id":"0:506","crate_id":0,"name":null,"span":{"filename":"src/sys/unix.rs","begin":[2839,0],"end":[2844,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2500:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"OwnedFd","id":"1:4725:2864","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"crate::Socket","id":"0:110:1692","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:507:684"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:120:2181":{"id":"0:120:2181","crate_id":0,"name":"bind","span":{"filename":"src/socket.rs","begin":[184,4],"end":[186,5]},"visibility":"public","docs":"Binds this socket to the specified address.\n\nThis function directly corresponds to the `bind(2)` function on Windows\nand Unix.\n\nAdditional documentation can be found in manual of the OS:\n\n * DragonFly BSD: <https://man.dragonflybsd.org/?command=bind&section=2>\n * FreeBSD: <https://www.freebsd.org/cgi/man.cgi?query=bind&sektion=2>\n * Linux: <https://man7.org/linux/man-pages/man2/bind.2.html>\n * macOS: <https://developer.apple.com/library/archive/documentation/System/Conceptual/ManPages_iPhoneOS/man2/bind.2.html> (archived, actually for iOS)\n * NetBSD: <https://man.netbsd.org/bind.2>\n * OpenBSD: <https://man.openbsd.org/bind.2>\n * iOS: <https://developer.apple.com/library/archive/documentation/System/Conceptual/ManPages_iPhoneOS/man2/bind.2.html> (archived)\n * illumos: <https://illumos.org/man/3SOCKET/bind>\n * Windows: <https://docs.microsoft.com/en-us/windows/win32/api/winsock2/nf-winsock2-bind>","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["address",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"SockAddr","id":"0:565:1691","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:2865:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:185:2572":{"id":"0:185:2572","crate_id":0,"name":"join_multicast_v4","span":{"filename":"src/socket.rs","begin":[1174,4],"end":[1180,5]},"visibility":"public","docs":"Join a multicast group using `IP_ADD_MEMBERSHIP` option on this socket.\n\nThis function specifies a new multicast group for this socket to join.\nThe address must be a valid multicast address, and `interface` is the\naddress of the local interface with which the system should join the\nmulticast group. If it's [`Ipv4Addr::UNSPECIFIED`] (`INADDR_ANY`) then\nan appropriate interface is chosen by the system.","links":{"`Ipv4Addr::UNSPECIFIED`":"2:7598:3052"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["multiaddr",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"Ipv4Addr","id":"2:40421:2072","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],["interface",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"Ipv4Addr","id":"2:40421:2072","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:2865:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:570:1699":{"id":"0:570:1699","crate_id":0,"name":"InterfaceIndexOrAddress","span":{"filename":"src/socket.rs","begin":[798,0],"end":[803,1]},"visibility":"public","docs":"A local interface specified by its index or an address assigned to it.\n\n`Index(0)` and `Address(Ipv4Addr::UNSPECIFIED)` are equivalent and indicate\nthat an appropriate interface should be selected by the system.","links":{},"attrs":["#[cfg(not(any(target_os = \"haiku\", target_os = \"illumos\", target_os =\n\"netbsd\", target_os = \"redox\", target_os = \"solaris\",)))]"],"deprecation":null,"kind":"enum","inner":{"generics":{"params":[],"where_predicates":[]},"variants_stripped":false,"variants":["0:571:2413","0:574:2415"],"impls":["a:2:8187:9223-0:570:1699","a:2:2682:225-0:570:1699","a:2:8186:9224-0:570:1699","a:2:2732:3710-0:570:1699","a:2:2668:217-0:570:1699","b:2:2231-0:570:1699","b:2:3327-0:570:1699","b:2:2527-0:570:1699","b:2:2538-0:570:1699","b:2:2234-0:570:1699","b:2:2533-0:570:1699","b:2:2523-0:570:1699","0:577"]}},"0:117:928":{"id":"0:117:928","crate_id":0,"name":"new","span":{"filename":"src/socket.rs","begin":[129,4],"end":[132,5]},"visibility":"public","docs":"Creates a new socket and sets common flags.\n\nThis function corresponds to `socket(2)` on Unix and `WSASocketW` on\nWindows.\n\nOn Unix-like systems, the close-on-exec flag is set on the new socket.\nAdditionally, on Apple platforms `SOCK_NOSIGPIPE` is set. On Windows,\nthe socket is made non-inheritable.\n\n[`Socket::new_raw`] can be used if you don't want these flags to be set.\n\nAdditional documentation can be found in manual of the OS:\n\n * DragonFly BSD: <https://man.dragonflybsd.org/?command=socket&section=2>\n * FreeBSD: <https://www.freebsd.org/cgi/man.cgi?query=socket&sektion=2>\n * Linux: <https://man7.org/linux/man-pages/man2/socket.2.html>\n * macOS: <https://developer.apple.com/library/archive/documentation/System/Conceptual/ManPages_iPhoneOS/man2/socket.2.html> (archived, actually for iOS)\n * NetBSD: <https://man.netbsd.org/socket.2>\n * OpenBSD: <https://man.openbsd.org/socket.2>\n * iOS: <https://developer.apple.com/library/archive/documentation/System/Conceptual/ManPages_iPhoneOS/man2/socket.2.html> (archived)\n * illumos: <https://illumos.org/man/3SOCKET/socket>\n * Windows: <https://docs.microsoft.com/en-us/windows/win32/api/winsock2/nf-winsock2-socket>","links":{"`Socket::new_raw`":"0:118:2165"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["domain",{"kind":"resolved_path","inner":{"name":"Domain","id":"0:597:1707","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}],["ty",{"kind":"resolved_path","inner":{"name":"Type","id":"0:609:1723","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}],["protocol",{"kind":"resolved_path","inner":{"name":"Option","id":"2:40589:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Protocol","id":"0:621:1745","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:2865:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Socket","id":"0:110:1692","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:191:2614":{"id":"0:191:2614","crate_id":0,"name":"multicast_if_v4","span":{"filename":"src/socket.rs","begin":[1342,4],"end":[1346,5]},"visibility":"public","docs":"Get the value of the `IP_MULTICAST_IF` option for this socket.\n\nFor more information about this option, see [`set_multicast_if_v4`].\n\n[`set_multicast_if_v4`]: Socket::set_multicast_if_v4","links":{"Socket::set_multicast_if_v4":"0:192:2618"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:2865:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Ipv4Addr","id":"2:40421:2072","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:618":{"id":"0:618","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[245,26],"end":[245,35]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"2:2678:223","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Type","id":"0:609:1723","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"b:2:2234-0:570:1699":{"id":"b:2:2234-0:570:1699","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2675:3548","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2228:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"InterfaceIndexOrAddress","id":"0:570:1699","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2236:25454"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:392:2911":{"id":"0:392:2911","crate_id":0,"name":"is_end_of_record","span":{"filename":"src/sys/unix.rs","begin":[537,4],"end":[539,5]},"visibility":"public","docs":"Check if the message terminates a record.\n\nNot all socket types support the notion of records. For socket types\nthat do support it (such as [`SEQPACKET`]), a record is terminated by\nsending a message with the end-of-record flag set.\n\nOn Unix this corresponds to the `MSG_EOR` flag.\n\n[`SEQPACKET`]: Type::SEQPACKET","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:592:658":{"id":"0:592:658","crate_id":0,"name":"fmt","span":{"filename":"src/sys/unix.rs","begin":[358,0],"end":[373,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"std::fmt::Formatter","id":"2:9010:131","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"std::fmt::Result","id":"2:8999:207","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:540:684":{"id":"0:540:684","crate_id":0,"name":"from","span":{"filename":"src/lib.rs","begin":[345,4],"end":[347,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["p",{"kind":"resolved_path","inner":{"name":"Protocol","id":"0:621:1745","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"c_int","id":"20:43:1690","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:642":{"id":"0:642","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[355,26],"end":[355,35]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"2:2678:223","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RecvFlags","id":"0:633:1775","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:523:684":{"id":"0:523:684","crate_id":0,"name":"from","span":{"filename":"src/lib.rs","begin":[231,4],"end":[233,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["d",{"kind":"resolved_path","inner":{"name":"Domain","id":"0:597:1707","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"c_int","id":"20:43:1690","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:586:684":{"id":"0:586:684","crate_id":0,"name":"from","span":{"filename":"src/socket.rs","begin":[2040,0],"end":[2040,29]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["socket",{"kind":"resolved_path","inner":{"name":"Socket","id":"0:110:1692","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"net::TcpStream","id":"1:3665:2144","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11928:27324":{"id":"2:11928:27324","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"1:11857:411","self::pattern":"2:11565:19914","str::rsplitn":"2:11931:27326"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitN","id":"2:42690:9678","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11570:13827","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11956:35101":{"id":"2:11956:35101","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:589":{"id":"0:589","crate_id":0,"name":null,"span":{"filename":"src/socket.rs","begin":[2042,0],"end":[2042,29]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2500:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Socket","id":"0:110:1692","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"net::UdpSocket","id":"1:3770:2802","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:590:684"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:568":{"id":"0:568","crate_id":0,"name":null,"span":{"filename":"src/sockaddr.rs","begin":[20,9],"end":[20,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2248:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"SockAddr","id":"0:565:1691","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:569:415"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:11949:35098":{"id":"2:11949:35098","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"2:11565:19914","`DoubleEndedIterator`":"2:7174:120","prim@char":"1:11857:411","str::match_indices":"2:11946:35097"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatchIndices","id":"2:42754:13125","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11570:13827","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11570:13827","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11585:19912","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2231-0:110:1692":{"id":"b:2:2231-0:110:1692","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2675:3548","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2225:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Socket","id":"0:110:1692","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2233:3502"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:507:684":{"id":"0:507:684","crate_id":0,"name":"from","span":{"filename":"src/sys/unix.rs","begin":[2840,4],"end":[2843,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["fd",{"kind":"resolved_path","inner":{"name":"OwnedFd","id":"1:4725:2864","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"crate::Socket","id":"0:110:1692","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:628":{"id":"0:628","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[296,22],"end":[296,24]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"2:2302:124","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Protocol","id":"0:621:1745","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"2:11909:9575":{"id":"2:11909:9575","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"2:40591:176","prim@char":"1:11857:411","self::pattern":"2:11565:19914"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:40589:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11570:13827","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11570:13827","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11585:19912","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:69:658":{"id":"0:69:658","crate_id":0,"name":"fmt","span":{"filename":"src/sockaddr.rs","begin":[325,4],"end":[345,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["fmt",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"fmt::Formatter","id":"2:9010:131","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"fmt::Result","id":"2:8999:207","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:151:2390":{"id":"0:151:2390","crate_id":0,"name":"send_to_with_flags","span":{"filename":"src/socket.rs","begin":[696,4],"end":[703,5]},"visibility":"public","docs":"Identical to [`send_to`] but allows for specification of arbitrary flags\nto the underlying `sendto` call.\n\n[`send_to`]: Socket::send_to","links":{"Socket::send_to":"0:150:2389"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}],["addr",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"SockAddr","id":"0:565:1691","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],["flags",{"kind":"resolved_path","inner":{"name":"c_int","id":"20:43:1690","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:2865:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2538-0:543:1785":{"id":"b:2:2538-0:543:1785","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2497:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2507:234","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"MaybeUninitSlice","id":"0:543:1785","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:2541:127","2:2542:1453"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:651":{"id":"0:651","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[412,16],"end":[412,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2248:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"TcpKeepalive","id":"0:645:1795","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:652:415"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:118:2165":{"id":"0:118:2165","crate_id":0,"name":"new_raw","span":{"filename":"src/socket.rs","begin":[138,4],"end":[141,5]},"visibility":"public","docs":"Creates a new socket ready to be configured.\n\nThis function corresponds to `socket(2)` on Unix and `WSASocketW` on\nWindows and simply creates a new socket, no other configuration is done.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["domain",{"kind":"resolved_path","inner":{"name":"Domain","id":"0:597:1707","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}],["ty",{"kind":"resolved_path","inner":{"name":"Type","id":"0:609:1723","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}],["protocol",{"kind":"resolved_path","inner":{"name":"Option","id":"2:40589:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Protocol","id":"0:621:1745","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:2865:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Socket","id":"0:110:1692","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2526:2055":{"id":"2:2526:2055","crate_id":2,"name":"into","span":null,"visibility":"default","docs":"Calls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of\n<code>[From]&lt;T&gt; for U</code> chooses to do.","links":{"From":"2:2500:132"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"generic","inner":"U"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2529:684":{"id":"2:2529:684","crate_id":2,"name":"from","span":null,"visibility":"default","docs":"Returns the argument unchanged.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["t",{"kind":"generic","inner":"T"}]],"output":{"kind":"generic","inner":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:140:2332":{"id":"0:140:2332","crate_id":0,"name":"recv_from_with_flags","span":{"filename":"src/socket.rs","begin":[536,4],"end":[542,5]},"visibility":"public","docs":"Identical to [`recv_from`] but allows for specification of arbitrary\nflags to the underlying `recvfrom` call.\n\n[`recv_from`]: Socket::recv_from","links":{"Socket::recv_from":"0:139:2331"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"resolved_path","inner":{"name":"MaybeUninit","id":"2:29935:1639","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"u8"}}],"bindings":[]}}}}}}}],["flags",{"kind":"resolved_path","inner":{"name":"c_int","id":"20:43:1690","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:2865:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"primitive","inner":"usize"},{"kind":"resolved_path","inner":{"name":"SockAddr","id":"0:565:1691","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:511-0:565:1691":{"id":"0:511-0:565:1691","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[180,0],"end":[180,27]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"sockaddr::SockAddr","name":"SockAddr","id":"0:565:1691","glob":false}},"a:2:8186:9224-0:645:1795":{"id":"a:2:8186:9224-0:645:1795","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:8186:9224","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"TcpKeepalive","id":"0:645:1795","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:235:2796":{"id":"0:235:2796","crate_id":0,"name":"read","span":{"filename":"src/socket.rs","begin":[1964,4],"end":[1969,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:2865:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:422:2077":{"id":"0:422:2077","crate_id":0,"name":"as_abstract_namespace","span":{"filename":"src/sys/unix.rs","begin":[769,4],"end":[781,5]},"visibility":"public","docs":"Returns this address as a slice of bytes representing an abstract address if it is an\n`AF_UNIX` abstract address, otherwise returns `None`.\n\nAbstract addresses are a Linux extension, so this method returns `None` on all non-Linux\nplatforms.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:40589:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:213:2695":{"id":"0:213:2695","crate_id":0,"name":"set_multicast_hops_v6","span":{"filename":"src/socket.rs","begin":[1600,4],"end":[1609,5]},"visibility":"public","docs":"Set the value of the `IPV6_MULTICAST_HOPS` option for this socket\n\nIndicates the number of \"routers\" multicast packets will transit for\nthis socket. The default value is 1 which means that multicast packets\ndon't leave the local network unless explicitly requested.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["hops",{"kind":"primitive","inner":"u32"}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:2865:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:2682:225-0:264:1693":{"id":"a:2:2682:225-0:264:1693","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'s","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2682:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"SockRef","id":"0:264:1693","args":{"angle_bracketed":{"args":[{"lifetime":"'s"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:621:1745":{"id":"0:621:1745","crate_id":0,"name":"Protocol","span":{"filename":"src/lib.rs","begin":[297,0],"end":[297,27]},"visibility":"public","docs":"Protocol specification used for creating sockets via `Socket::new`.\n\nThis is a newtype wrapper around an integer which provides a nicer API in\naddition to an injection point for documentation.\n\nThis type is freely interconvertible with C's `int` type, however, if a raw\nvalue needs to be provided.","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"kind":{"tuple":[null]},"generics":{"params":[],"where_predicates":[]},"impls":["0:531","a:2:8187:9223-0:621:1745","a:2:2682:225-0:621:1745","a:2:8186:9224-0:621:1745","a:2:2732:3710-0:621:1745","a:2:2668:217-0:621:1745","b:2:2231-0:621:1745","b:2:3327-0:621:1745","b:2:2527-0:621:1745","b:2:2538-0:621:1745","b:2:2234-0:621:1745","b:2:2533-0:621:1745","b:2:2523-0:621:1745","b:5:672-0:621:1745","0:595","0:625","0:628","0:631","0:630","0:539","0:624","0:537","0:627"]}},"b:2:2533-0:609:1723":{"id":"b:2:2533-0:609:1723","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2507:234","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2503:235","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Type","id":"0:609:1723","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2536:127","2:2537:1454"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:645:1795":{"id":"0:645:1795","crate_id":0,"name":"TcpKeepalive","span":{"filename":"src/lib.rs","begin":[413,0],"end":[431,1]},"visibility":"public","docs":"Configures a socket's TCP keepalive parameters.\n\nSee [`Socket::set_tcp_keepalive`].","links":{"`Socket::set_tcp_keepalive`":"0:230:2782"},"attrs":[],"deprecation":null,"kind":"struct","inner":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["0:560","a:2:8187:9223-0:645:1795","a:2:2682:225-0:645:1795","a:2:8186:9224-0:645:1795","a:2:2732:3710-0:645:1795","a:2:2668:217-0:645:1795","b:2:2231-0:645:1795","b:2:3327-0:645:1795","b:2:2527-0:645:1795","b:2:2538-0:645:1795","b:2:2234-0:645:1795","b:2:2533-0:645:1795","b:2:2523-0:645:1795","b:5:672-0:645:1795","0:649","0:651"]}},"2:11966:26139":{"id":"2:11966:26139","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:11857:411","self::pattern":"2:11565:19914"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["prefix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:40589:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11570:13827","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11863":{"id":"2:11863","crate_id":2,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["2:11864:801","2:11865:9576","2:11866:35085","2:11867:35086","2:11869:35087","2:11872:2053","2:11873:35088","2:11874:311","2:11875:1997","2:11876:3157","2:11878:27285","2:11880:27286","2:11882:27287","2:11884:35089","2:11885:35090","2:11886:27310","2:11887:27311","2:11888:13133","2:11889:13143","2:11890:2927","2:11891:31947","2:11892:31959","2:11893:29401","2:11894:35091","2:11895:31952","2:11896:27328","2:11899:27329","2:11902:27330","2:11905:9615","2:11909:9575","2:11913:27318","2:11916:27320","2:11919:27322","2:11922:35092","2:11925:35093","2:11928:27324","2:11931:27326","2:11934:35094","2:11937:35095","2:11940:3513","2:11943:35096","2:11946:35097","2:11949:35098","2:11952:35099","2:11954:35100","2:11956:35101","2:11958:35102","2:11959:35103","2:11960:35104","2:11963:35105","2:11966:26139","2:11969:27331","2:11972:35106","2:11975:35107","2:11978:35108","2:11981:35109","2:11983:27094","2:11984:27095","2:11985:27091","2:11986:27090","2:11987:35110","2:11989:14660","2:11990:35111"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:412:2950":{"id":"0:412:2950","crate_id":0,"name":"is_unnamed","span":{"filename":"src/sys/unix.rs","begin":[691,4],"end":[703,5]},"visibility":"public","docs":"Returns true if this address is an unnamed address from the `AF_UNIX` family (for local\ninterprocess communication), false otherwise.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2234-0:633:1775":{"id":"b:2:2234-0:633:1775","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2675:3548","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2228:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RecvFlags","id":"0:633:1775","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2236:25454"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:581":{"id":"0:581","crate_id":0,"name":null,"span":{"filename":"src/socket.rs","begin":[2038,0],"end":[2038,31]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2500:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"TcpListener","id":"1:3668:2801","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Socket","id":"0:110:1692","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:582:684"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:251:2799":{"id":"0:251:2799","crate_id":0,"name":"flush","span":{"filename":"src/socket.rs","begin":[2022,4],"end":[2024,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:2865:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2523-0:543:1785":{"id":"b:2:2523-0:543:1785","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2500:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2497:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"MaybeUninitSlice","id":"0:543:1785","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:2526:2055"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:2538-0:565:1691":{"id":"b:2:2538-0:565:1691","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2497:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2507:234","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"SockAddr","id":"0:565:1691","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2541:127","2:2542:1453"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:2536:127":{"id":"2:2536:127","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"U"},"trait":{"name":"TryFrom","id":"2:2507:234","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}}}}},"0:148:2376":{"id":"0:148:2376","crate_id":0,"name":"send_vectored_with_flags","span":{"filename":"src/socket.rs","begin":[663,4],"end":[669,5]},"visibility":"public","docs":"Identical to [`send_vectored`] but allows for specification of arbitrary\nflags to the underlying `sendmsg`/`WSASend` call.\n\nAdditional documentation can be found in manual of the OS:\n\n * DragonFly BSD: <https://man.dragonflybsd.org/?command=sendmsg&section=2>\n * FreeBSD: <https://www.freebsd.org/cgi/man.cgi?query=sendmsg&sektion=2>\n * Linux: <https://man7.org/linux/man-pages/man2/sendmsg.2.html>\n * macOS: <https://developer.apple.com/library/archive/documentation/System/Conceptual/ManPages_iPhoneOS/man2/sendmsg.2.html> (archived, actually for iOS)\n * NetBSD: <https://man.netbsd.org/sendmsg.2>\n * OpenBSD: <https://man.openbsd.org/sendmsg.2>\n * iOS: <https://developer.apple.com/library/archive/documentation/System/Conceptual/ManPages_iPhoneOS/man2/sendmsg.2.html> (archived)\n * illumos: <https://illumos.org/man/3SOCKET/sendmsg>\n * Windows: <https://docs.microsoft.com/en-us/windows/win32/api/winsock2/nf-winsock2-sendmsg>\n\n[`send_vectored`]: Socket::send_vectored","links":{"Socket::send_vectored":"0:147:2375"},"attrs":["#[cfg(not(target_os = \"redox\"))]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["bufs",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"resolved_path","inner":{"name":"IoSlice","id":"1:8101:2108","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}}],["flags",{"kind":"resolved_path","inner":{"name":"c_int","id":"20:43:1690","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:2865:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2538-0:570:1699":{"id":"b:2:2538-0:570:1699","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2497:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2507:234","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"InterfaceIndexOrAddress","id":"0:570:1699","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2541:127","2:2542:1453"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:571:2413":{"id":"0:571:2413","crate_id":0,"name":"Index","span":{"filename":"src/socket.rs","begin":[800,4],"end":[800,14]},"visibility":"default","docs":"An interface index.","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"kind":{"tuple":["0:573:1580"]},"discriminant":null}},"2:11878:27285":{"id":"2:11878:27285","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:40591:176"},"attrs":["#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:40589:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:9746:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9746:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:209:2675":{"id":"0:209:2675","crate_id":0,"name":"join_multicast_v6","span":{"filename":"src/socket.rs","begin":[1543,4],"end":[1557,5]},"visibility":"public","docs":"Join a multicast group using `IPV6_ADD_MEMBERSHIP` option on this socket.\n\nSome OSs use `IPV6_JOIN_GROUP` for this option.\n\nThis function specifies a new multicast group for this socket to join.\nThe address must be a valid multicast address, and `interface` is the\nindex of the interface to join/leave (or 0 to indicate any interface).","links":{},"attrs":["#[cfg(not(target_os = \"nto\"))]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["multiaddr",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"Ipv6Addr","id":"2:40438:2079","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],["interface",{"kind":"primitive","inner":"u32"}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:2865:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2533-0:621:1745":{"id":"b:2:2533-0:621:1745","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2507:234","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2503:235","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Protocol","id":"0:621:1745","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2536:127","2:2537:1454"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:189:2599":{"id":"0:189:2599","crate_id":0,"name":"join_ssm_v4","span":{"filename":"src/socket.rs","begin":[1281,4],"end":[1300,5]},"visibility":"public","docs":"Join a multicast SSM channel using `IP_ADD_SOURCE_MEMBERSHIP` option on this socket.\n\nThis function specifies a new multicast channel for this socket to join.\nThe group must be a valid SSM group address, the source must be the address of the sender\nand `interface` is the address of the local interface with which the system should join the\nmulticast group. If it's [`Ipv4Addr::UNSPECIFIED`] (`INADDR_ANY`) then\nan appropriate interface is chosen by the system.","links":{"`Ipv4Addr::UNSPECIFIED`":"2:7598:3052"},"attrs":["#[cfg(not(any(target_os = \"dragonfly\", target_os = \"haiku\", target_os =\n\"netbsd\", target_os = \"openbsd\", target_os = \"redox\", target_os = \"fuchsia\",\ntarget_os = \"nto\",)))]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["source",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"Ipv4Addr","id":"2:40421:2072","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],["group",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"Ipv4Addr","id":"2:40421:2072","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],["interface",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"Ipv4Addr","id":"2:40421:2072","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:2865:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:675:9635":{"id":"5:675:9635","crate_id":5,"name":"to_owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"generic","inner":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2234-0:110:1692":{"id":"b:2:2234-0:110:1692","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2675:3548","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2228:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Socket","id":"0:110:1692","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2236:25454"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:73":{"id":"0:73","crate_id":0,"name":null,"span":{"filename":"src/sockaddr.rs","begin":[356,0],"end":[360,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["hash_slice"],"trait":{"name":"Hash","id":"2:9274:140","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"SockAddr","id":"0:565:1691","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:74:719"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:2:3327-0:565:1691":{"id":"b:2:3327-0:565:1691","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2675:3548","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3325:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"SockAddr","id":"0:565:1691","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3329:1467"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:0:1824":{"id":"0:0:1824","crate_id":0,"name":"socket2","span":{"filename":"src/lib.rs","begin":[9,0],"end":[564,1]},"visibility":"public","docs":"Utilities for creating and using sockets.\n\nThe goal of this crate is to create and use a socket using advanced\nconfiguration options (those that are not available in the types in the\nstandard library) without using any unsafe code.\n\nThis crate provides as direct as possible access to the system's\nfunctionality for sockets, this means little effort to provide\ncross-platform utilities. It is up to the user to know how to use sockets\nwhen using this crate. *If you don't know how to create a socket using\nlibc/system calls then this crate is not for you*. Most, if not all,\nfunctions directly relate to the equivalent system call with no error\nhandling applied, so no handling errors such as [`EINTR`]. As a result using\nthis crate can be a little wordy, but it should give you maximal flexibility\nover configuration of sockets.\n\n[`EINTR`]: std::io::ErrorKind::Interrupted\n\n# Examples\n\n```no_run\n# fn main() -> std::io::Result<()> {\nuse std::net::{SocketAddr, TcpListener};\nuse socket2::{Socket, Domain, Type};\n\n// Create a TCP listener bound to two addresses.\nlet socket = Socket::new(Domain::IPV6, Type::STREAM, None)?;\n\nsocket.set_only_v6(false)?;\nlet address: SocketAddr = \"[::1]:12345\".parse().unwrap();\nsocket.bind(&address.into())?;\nsocket.listen(128)?;\n\nlet listener: TcpListener = socket.into();\n// ...\n# drop(listener);\n# Ok(()) }\n```\n\n## Features\n\nThis crate has a single feature `all`, which enables all functions even ones\nthat are not available on all OSs.","links":{"std::io::ErrorKind::Interrupted":"1:8020:2990"},"attrs":["#![deny(missing_docs, missing_debug_implementations, rust_2018_idioms)]","#![doc(test(attr(deny(warnings))))]"],"deprecation":null,"kind":"module","inner":{"is_crate":true,"items":["0:511-0:565:1691","0:512-0:110:1692","0:513-0:264:1693","0:514-0:570:1699","0:597:1707","0:609:1723","0:621:1745","0:633:1775","0:543:1785","0:645:1795"],"is_stripped":false}},"a:2:2682:225-0:633:1775":{"id":"a:2:2682:225-0:633:1775","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2682:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RecvFlags","id":"0:633:1775","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:2236:25454":{"id":"2:2236:25454","crate_id":2,"name":"borrow_mut","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:596:658":{"id":"0:596:658","crate_id":0,"name":"fmt","span":{"filename":"src/sys/unix.rs","begin":[501,0],"end":[523,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"std::fmt::Formatter","id":"2:9010:131","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"std::fmt::Result","id":"2:8999:207","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2523-0:645:1795":{"id":"b:2:2523-0:645:1795","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2500:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2497:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"TcpKeepalive","id":"0:645:1795","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2526:2055"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:58:2034":{"id":"0:58:2034","crate_id":0,"name":"as_socket","span":{"filename":"src/sockaddr.rs","begin":[216,4],"end":[244,5]},"visibility":"public","docs":"Returns this address as a `SocketAddr` if it is in the `AF_INET` (IPv4)\nor `AF_INET6` (IPv6) family, otherwise returns `None`.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:40589:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"SocketAddr","id":"2:40540:1641","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:171:2483":{"id":"0:171:2483","crate_id":0,"name":"set_recv_buffer_size","span":{"filename":"src/socket.rs","begin":[957,4],"end":[966,5]},"visibility":"public","docs":"Set value for the `SO_RCVBUF` option on this socket.\n\nChanges the size of the operating system's receive buffer associated\nwith the socket.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["size",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:2865:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:391":{"id":"0:391","crate_id":0,"name":null,"span":{"filename":"src/sys/unix.rs","begin":[527,0],"end":[550,1]},"visibility":"default","docs":"Unix-only API.","links":{},"attrs":["#[cfg(not(target_os = \"redox\"))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"RecvFlags","id":"0:633:1775","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:392:2911","0:393:2917"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:2:2527-0:570:1699":{"id":"b:2:2527-0:570:1699","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2500:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"InterfaceIndexOrAddress","id":"0:570:1699","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2529:684"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:11940:3513":{"id":"2:11940:3513","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"2:11565:19914","`DoubleEndedIterator`":"2:7174:120","prim@char":"1:11857:411","str::matches":"2:11940:3513"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Matches","id":"2:42790:13127","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11570:13827","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:8187:9223-0:110:1692":{"id":"a:2:8187:9223-0:110:1692","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:8187:9223","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Socket","id":"0:110:1692","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"b:5:672-0:597:1707":{"id":"b:5:672-0:597:1707","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2248:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:668:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Domain","id":"0:597:1707","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:674:9634","5:675:9635","5:676:9636"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:60:2051":{"id":"0:60:2051","crate_id":0,"name":"as_socket_ipv6","span":{"filename":"src/sockaddr.rs","begin":[257,4],"end":[262,5]},"visibility":"public","docs":"Returns this address as a [`SocketAddrV6`] if it is in the `AF_INET6`\nfamily.","links":{"`SocketAddrV6`":"2:40575:1926"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:40589:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"SocketAddrV6","id":"2:40575:1926","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2231-0:565:1691":{"id":"b:2:2231-0:565:1691","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2675:3548","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2225:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"SockAddr","id":"0:565:1691","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2233:3502"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:591":{"id":"0:591","crate_id":0,"name":null,"span":{"filename":"src/sys/unix.rs","begin":[358,0],"end":[373,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:9051:111","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Domain","id":"0:597:1707","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:592:658"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:2:2234-0:597:1707":{"id":"b:2:2234-0:597:1707","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2675:3548","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2228:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Domain","id":"0:597:1707","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2236:25454"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:129:34":{"id":"0:129:34","crate_id":0,"name":"type","span":{"filename":"src/socket.rs","begin":[340,4],"end":[342,5]},"visibility":"public","docs":"Returns the [`Type`] of this socket by checking the `SO_TYPE` option on\nthis socket.","links":{"`Type`":"0:609:1723"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:2865:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Type","id":"0:609:1723","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:8187:9223-0:543:1785":{"id":"a:2:8187:9223-0:543:1785","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:8187:9223","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"MaybeUninitSlice","id":"0:543:1785","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:607":{"id":"0:607","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[202,26],"end":[202,35]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"2:2297:185","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Domain","id":"0:597:1707","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Domain","id":"0:597:1707","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:608:603"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:226:2737":{"id":"0:226:2737","crate_id":0,"name":"recv_tclass_v6","span":{"filename":"src/socket.rs","begin":[1736,4],"end":[1741,5]},"visibility":"public","docs":"Get the value of the `IPV6_RECVTCLASS` option for this socket.\n\nFor more information about this option, see [`set_recv_tclass_v6`].\n\n[`set_recv_tclass_v6`]: Socket::set_recv_tclass_v6","links":{"Socket::set_recv_tclass_v6":"0:228:2744"},"attrs":["#[cfg(not(any(target_os = \"dragonfly\", target_os = \"fuchsia\", target_os =\n\"illumos\", target_os = \"netbsd\", target_os = \"openbsd\", target_os = \"redox\",\ntarget_os = \"solaris\", target_os = \"haiku\",)))]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:2865:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"bool"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:8187:9223-0:264:1693":{"id":"a:2:8187:9223-0:264:1693","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'s","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:8187:9223","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"SockRef","id":"0:264:1693","args":{"angle_bracketed":{"args":[{"lifetime":"'s"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:514-0:570:1699":{"id":"0:514-0:570:1699","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[191,0],"end":[191,40]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(not(any(target_os = \"haiku\", target_os = \"illumos\", target_os =\n\"netbsd\", target_os = \"redox\", target_os = \"solaris\",)))]"],"deprecation":null,"kind":"import","inner":{"source":"socket::InterfaceIndexOrAddress","name":"InterfaceIndexOrAddress","id":"0:570:1699","glob":false}},"0:411":{"id":"0:411","crate_id":0,"name":null,"span":{"filename":"src/sys/unix.rs","begin":[646,0],"end":[782,1]},"visibility":"default","docs":"Unix only API.","links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"SockAddr","id":"0:565:1691","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:412:2950","0:418:2965","0:419:2076","0:422:2077"],"negative":false,"synthetic":false,"blanket_impl":null}},"a:2:2682:225-0:110:1692":{"id":"a:2:2682:225-0:110:1692","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2682:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Socket","id":"0:110:1692","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:549:658":{"id":"0:549:658","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[379,4],"end":[381,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["fmt",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"fmt::Formatter","id":"2:9010:131","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"fmt::Result","id":"2:8999:207","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:241:2797":{"id":"0:241:2797","crate_id":0,"name":"read_vectored","span":{"filename":"src/socket.rs","begin":[1990,4],"end":[1994,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(target_os = \"redox\"))]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["bufs",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"resolved_path","inner":{"name":"IoSliceMut","id":"1:3389:2109","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:2865:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:195:2628":{"id":"0:195:2628","crate_id":0,"name":"set_multicast_loop_v4","span":{"filename":"src/socket.rs","begin":[1379,4],"end":[1388,5]},"visibility":"public","docs":"Set the value of the `IP_MULTICAST_LOOP` option for this socket.\n\nIf enabled, multicast packets will be looped back to the local socket.\nNote that this may not have any affect on IPv6 sockets.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["loop_v4",{"kind":"primitive","inner":"bool"}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:2865:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:393:2917":{"id":"0:393:2917","crate_id":0,"name":"is_out_of_band","span":{"filename":"src/sys/unix.rs","begin":[547,4],"end":[549,5]},"visibility":"public","docs":"Check if the message contains out-of-band data.\n\nThis is useful for protocols where you receive out-of-band data\nmixed in with the normal data stream.\n\nOn Unix this corresponds to the `MSG_OOB` flag.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:616":{"id":"0:616","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[245,22],"end":[245,24]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"2:2302:124","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Type","id":"0:609:1723","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:135:2285":{"id":"0:135:2285","crate_id":0,"name":"recv_with_flags","span":{"filename":"src/socket.rs","begin":[437,4],"end":[443,5]},"visibility":"public","docs":"Identical to [`recv`] but allows for specification of arbitrary flags to\nthe underlying `recv` call.\n\n[`recv`]: Socket::recv","links":{"Socket::recv":"0:133:2274"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"resolved_path","inner":{"name":"MaybeUninit","id":"2:29935:1639","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"u8"}}],"bindings":[]}}}}}}}],["flags",{"kind":"resolved_path","inner":{"name":"sys::c_int","id":"20:43:1690","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:2865:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11880:27286":{"id":"2:11880:27286","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":["#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:9746:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9746:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"0:593":{"id":"0:593","crate_id":0,"name":null,"span":{"filename":"src/sys/unix.rs","begin":[466,0],"end":[499,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:9051:111","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Type","id":"0:609:1723","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:594:658"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:74:719":{"id":"0:74:719","crate_id":0,"name":"hash","span":{"filename":"src/sockaddr.rs","begin":[357,4],"end":[359,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["state",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"H"}}}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"H","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"std::hash::Hasher","id":"2:9288:144","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2231-0:633:1775":{"id":"b:2:2231-0:633:1775","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2675:3548","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2225:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RecvFlags","id":"0:633:1775","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2233:3502"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:652:415":{"id":"0:652:415","crate_id":0,"name":"clone","span":{"filename":"src/lib.rs","begin":[412,16],"end":[412,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"TcpKeepalive","id":"0:645:1795","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11958:35102":{"id":"2:11958:35102","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:181:2522":{"id":"0:181:2522","crate_id":0,"name":"set_write_timeout","span":{"filename":"src/socket.rs","begin":[1051,4],"end":[1053,5]},"visibility":"public","docs":"Set value for the `SO_SNDTIMEO` option on this socket.\n\nIf `timeout` is `None`, then `write` and `send` calls will block\nindefinitely.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["duration",{"kind":"resolved_path","inner":{"name":"Option","id":"2:40589:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Duration","id":"2:43360:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:2865:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:8187:9223-0:633:1775":{"id":"a:2:8187:9223-0:633:1775","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:8187:9223","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RecvFlags","id":"0:633:1775","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"b:2:2523-0:597:1707":{"id":"b:2:2523-0:597:1707","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2500:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2497:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Domain","id":"0:597:1707","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2526:2055"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:649":{"id":"0:649","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[412,9],"end":[412,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:9051:111","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"TcpKeepalive","id":"0:645:1795","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:650:658"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:168:2474":{"id":"0:168:2474","crate_id":0,"name":"set_out_of_band_inline","span":{"filename":"src/socket.rs","begin":[930,4],"end":[939,5]},"visibility":"public","docs":"Set value for the `SO_OOBINLINE` option on this socket.\n\nIf this option is enabled, out-of-band data is directly placed into the\nreceive data stream. Otherwise, out-of-band data is passed only when the\n`MSG_OOB` flag is set during receiving. As per RFC6093, TCP sockets\nusing the Urgent mechanism are encouraged to set this flag.","links":{},"attrs":["#[cfg(not(target_os = \"redox\"))]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["oob_inline",{"kind":"primitive","inner":"bool"}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:2865:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:614:415":{"id":"0:614:415","crate_id":0,"name":"clone","span":{"filename":"src/lib.rs","begin":[245,15],"end":[245,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Type","id":"0:609:1723","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:550":{"id":"0:550","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[384,0],"end":[393,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"MaybeUninitSlice","id":"0:543:1785","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["0:552:928"],"negative":false,"synthetic":false,"blanket_impl":null}},"a:2:8186:9224-0:110:1692":{"id":"a:2:8186:9224-0:110:1692","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:8186:9224","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Socket","id":"0:110:1692","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:152:2396":{"id":"0:152:2396","crate_id":0,"name":"send_to_vectored","span":{"filename":"src/socket.rs","begin":[710,4],"end":[712,5]},"visibility":"public","docs":"Send data to a peer listening on `addr`. Returns the amount of bytes\nwritten.\n\nAdditional documentation can be found in manual of the OS:\n\n * DragonFly BSD: <https://man.dragonflybsd.org/?command=sendmsg&section=2>\n * FreeBSD: <https://www.freebsd.org/cgi/man.cgi?query=sendmsg&sektion=2>\n * Linux: <https://man7.org/linux/man-pages/man2/sendmsg.2.html>\n * macOS: <https://developer.apple.com/library/archive/documentation/System/Conceptual/ManPages_iPhoneOS/man2/sendmsg.2.html> (archived, actually for iOS)\n * NetBSD: <https://man.netbsd.org/sendmsg.2>\n * OpenBSD: <https://man.openbsd.org/sendmsg.2>\n * iOS: <https://developer.apple.com/library/archive/documentation/System/Conceptual/ManPages_iPhoneOS/man2/sendmsg.2.html> (archived)\n * illumos: <https://illumos.org/man/3SOCKET/sendmsg>\n * Windows: <https://docs.microsoft.com/en-us/windows/win32/api/winsock2/nf-winsock2-sendmsg>","links":{},"attrs":["#[cfg(not(target_os = \"redox\"))]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["bufs",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"resolved_path","inner":{"name":"IoSlice","id":"1:8101:2108","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}}],["addr",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"SockAddr","id":"0:565:1691","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:2865:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2231-0:597:1707":{"id":"b:2:2231-0:597:1707","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2675:3548","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2225:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Domain","id":"0:597:1707","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2233:3502"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:578:658":{"id":"0:578:658","crate_id":0,"name":"fmt","span":{"filename":"src/socket.rs","begin":[797,9],"end":[797,14]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Formatter","id":"2:9010:131","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Result","id":"2:8999:207","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:521:684":{"id":"0:521:684","crate_id":0,"name":"from","span":{"filename":"src/lib.rs","begin":[225,4],"end":[227,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["d",{"kind":"resolved_path","inner":{"name":"c_int","id":"20:43:1690","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Domain","id":"0:597:1707","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11913:27318":{"id":"2:11913:27318","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"2:11565:19914","`DoubleEndedIterator`":"2:7174:120","prim@char":"1:11857:411","str::split_whitespace":"2:11891:31947","str::rsplit":"2:11919:27322"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Split","id":"2:42586:3673","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11570:13827","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5317:3542":{"id":"5:5317:3542","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7180:221"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["from",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7180:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11570:13827","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:584:684":{"id":"0:584:684","crate_id":0,"name":"from","span":{"filename":"src/socket.rs","begin":[2039,0],"end":[2039,29]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["socket",{"kind":"resolved_path","inner":{"name":"net::UdpSocket","id":"1:3770:2802","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Socket","id":"0:110:1692","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:543:1785":{"id":"0:543:1785","crate_id":0,"name":"MaybeUninitSlice","span":{"filename":"src/lib.rs","begin":[376,0],"end":[376,59]},"visibility":"public","docs":"A version of [`IoSliceMut`] that allows the buffer to be uninitialised.\n\n[`IoSliceMut`]: std::io::IoSliceMut","links":{"std::io::IoSliceMut":"1:3389:2109"},"attrs":["#[repr(transparent)]"],"deprecation":null,"kind":"struct","inner":{"kind":{"tuple":[null]},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"impls":["0:550","a:2:8187:9223-0:543:1785","a:2:2682:225-0:543:1785","a:2:8186:9224-0:543:1785","a:2:2732:3710-0:543:1785","a:2:2668:217-0:543:1785","b:2:2231-0:543:1785","b:2:3327-0:543:1785","b:2:2527-0:543:1785","b:2:2538-0:543:1785","b:2:2234-0:543:1785","b:2:2533-0:543:1785","b:2:2523-0:543:1785","0:553","0:547","0:557"]}},"a:2:8187:9223-0:609:1723":{"id":"a:2:8187:9223-0:609:1723","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:8187:9223","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Type","id":"0:609:1723","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"a:2:2732:3710-0:645:1795":{"id":"a:2:2732:3710-0:645:1795","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2732:3710","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"TcpKeepalive","id":"0:645:1795","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:184":{"id":"0:184","crate_id":0,"name":null,"span":{"filename":"src/socket.rs","begin":[1082,0],"end":[1527,1]},"visibility":"default","docs":"Socket options for IPv4 sockets, get/set using `IPPROTO_IP`.\n\nAdditional documentation can be found in documentation of the OS.\n* Linux: <https://man7.org/linux/man-pages/man7/ip.7.html>\n* Windows: <https://docs.microsoft.com/en-us/windows/win32/winsock/ipproto-ip-socket-options>","links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"Socket","id":"0:110:1692","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:185:2572","0:186:2583","0:187:2589","0:188:2594","0:189:2599","0:190:2609","0:191:2614","0:192:2618","0:193:2622","0:195:2628","0:196:2632","0:198:2639","0:199:2634","0:201:2647","0:202:2653","0:203:2654","0:205:2663","0:206:2664"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:220:2718":{"id":"0:220:2718","crate_id":0,"name":"unicast_hops_v6","span":{"filename":"src/socket.rs","begin":[1669,4],"end":[1674,5]},"visibility":"public","docs":"Get the value of the `IPV6_UNICAST_HOPS` option for this socket.\n\nSpecifies the hop limit for ipv6 unicast packets","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:2865:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"u32"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:8186:9224-0:264:1693":{"id":"a:2:8186:9224-0:264:1693","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'s","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:8186:9224","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"SockRef","id":"0:264:1693","args":{"angle_bracketed":{"args":[{"lifetime":"'s"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:524":{"id":"0:524","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[248,0],"end":[275,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"Type","id":"0:609:1723","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:525:1726","0:526:1730"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:500":{"id":"0:500","crate_id":0,"name":null,"span":{"filename":"src/sys/unix.rs","begin":[2817,0],"end":[2821,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"AsRawFd","id":"1:4667:2806","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"crate::Socket","id":"0:110:1692","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:501:2853"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:2:2523-0:609:1723":{"id":"b:2:2523-0:609:1723","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2500:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2497:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Type","id":"0:609:1723","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2526:2055"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:11864:801":{"id":"2:11864:801","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\nBasic usage:\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"1:11857:411"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:2668:217-0:609:1723":{"id":"a:2:2668:217-0:609:1723","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2668:217","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Type","id":"0:609:1723","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:528:684":{"id":"0:528:684","crate_id":0,"name":"from","span":{"filename":"src/lib.rs","begin":[278,4],"end":[280,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["t",{"kind":"resolved_path","inner":{"name":"c_int","id":"20:43:1690","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Type","id":"0:609:1723","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:612":{"id":"0:612","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[245,9],"end":[245,13]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"2:2680:108","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Type","id":"0:609:1723","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"a:2:8187:9223-0:570:1699":{"id":"a:2:8187:9223-0:570:1699","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:8187:9223","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"InterfaceIndexOrAddress","id":"0:570:1699","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"5:676:9636":{"id":"5:676:9636","crate_id":5,"name":"clone_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["target",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"T"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:2682:225-0:570:1699":{"id":"a:2:2682:225-0:570:1699","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2682:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"InterfaceIndexOrAddress","id":"0:570:1699","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:177:2510":{"id":"0:177:2510","crate_id":0,"name":"send_buffer_size","span":{"filename":"src/socket.rs","begin":[1017,4],"end":[1022,5]},"visibility":"public","docs":"Get the value of the `SO_SNDBUF` option on this socket.\n\nFor more information about this option, see [`set_send_buffer_size`].\n\n[`set_send_buffer_size`]: Socket::set_send_buffer_size","links":{"Socket::set_send_buffer_size":"0:179:2515"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:2865:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:55:2026":{"id":"0:55:2026","crate_id":0,"name":"is_ipv6","span":{"filename":"src/sockaddr.rs","begin":[198,4],"end":[200,5]},"visibility":"public","docs":"Returns true if this address is in the `AF_INET6` (IPv6) family, false\notherwise.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:2668:217-0:110:1692":{"id":"a:2:2668:217-0:110:1692","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2668:217","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Socket","id":"0:110:1692","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"b:2:3327-0:597:1707":{"id":"b:2:3327-0:597:1707","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2675:3548","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3325:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Domain","id":"0:597:1707","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3329:1467"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:11937:35095":{"id":"2:11937:35095","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:40589:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11570:13827","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11570:13827","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11585:19912","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2233:3502":{"id":"2:2233:3502","crate_id":2,"name":"borrow","span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[rustc_diagnostic_item = \"noop_method_borrow\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2231-0:645:1795":{"id":"b:2:2231-0:645:1795","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2675:3548","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2225:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"TcpKeepalive","id":"0:645:1795","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2233:3502"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:238":{"id":"0:238","crate_id":0,"name":null,"span":{"filename":"src/socket.rs","begin":[1982,0],"end":[1995,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["read_vectored","read_buf_exact","read_to_end","by_ref","chain","read_exact","take","read_to_string","bytes","read_buf","is_read_vectored"],"trait":{"name":"Read","id":"1:3371:2106","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"resolved_path","inner":{"name":"Socket","id":"0:110:1692","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"items":["0:240:2796","0:241:2797"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:186:2583":{"id":"0:186:2583","crate_id":0,"name":"leave_multicast_v4","span":{"filename":"src/socket.rs","begin":[1187,4],"end":[1200,5]},"visibility":"public","docs":"Leave a multicast group using `IP_DROP_MEMBERSHIP` option on this socket.\n\nFor more information about this option, see [`join_multicast_v4`].\n\n[`join_multicast_v4`]: Socket::join_multicast_v4","links":{"Socket::join_multicast_v4":"0:185:2572"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["multiaddr",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"Ipv4Addr","id":"2:40421:2072","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],["interface",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"Ipv4Addr","id":"2:40421:2072","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:2865:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2231-0:264:1693":{"id":"b:2:2231-0:264:1693","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2675:3548","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2225:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"SockRef","id":"0:264:1693","args":{"angle_bracketed":{"args":[{"lifetime":"'s"}],"bindings":[]}}}},"items":["2:2233:3502"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:201:2647":{"id":"0:201:2647","crate_id":0,"name":"set_ttl","span":{"filename":"src/socket.rs","begin":[1435,4],"end":[1437,5]},"visibility":"public","docs":"Set the value of the `IP_TTL` option for this socket.\n\nThis value sets the time-to-live field that is used in every packet sent\nfrom this socket.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["ttl",{"kind":"primitive","inner":"u32"}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:2865:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2231-0:543:1785":{"id":"b:2:2231-0:543:1785","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2675:3548","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2225:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"MaybeUninitSlice","id":"0:543:1785","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:2233:3502"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:246:2799":{"id":"0:246:2799","crate_id":0,"name":"flush","span":{"filename":"src/socket.rs","begin":[2007,4],"end":[2009,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:2865:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:602:415":{"id":"0:602:415","crate_id":0,"name":"clone","span":{"filename":"src/lib.rs","begin":[202,15],"end":[202,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Domain","id":"0:597:1707","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2533-0:565:1691":{"id":"b:2:2533-0:565:1691","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2507:234","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2503:235","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"SockAddr","id":"0:565:1691","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2536:127","2:2537:1454"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:2533-0:543:1785":{"id":"b:2:2533-0:543:1785","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2507:234","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2503:235","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"MaybeUninitSlice","id":"0:543:1785","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:2536:127","2:2537:1454"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:11888:13133":{"id":"2:11888:13133","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:11857:411"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Chars","id":"2:42556:13114","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:156":{"id":"0:156","crate_id":0,"name":null,"span":{"filename":"src/socket.rs","begin":[810,0],"end":[1054,1]},"visibility":"default","docs":"Socket options get/set using `SOL_SOCKET`.\n\nAdditional documentation can be found in documentation of the OS.\n* Linux: <https://man7.org/linux/man-pages/man7/socket.7.html>\n* Windows: <https://docs.microsoft.com/en-us/windows/win32/winsock/sol-socket-socket-options>","links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"Socket","id":"0:110:1692","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:157:2423","0:159:2428","0:160:2433","0:161:2441","0:163:2445","0:164:2449","0:165:2461","0:166:2466","0:168:2474","0:169:2478","0:171:2483","0:172:2487","0:173:2493","0:174:2499","0:176:2506","0:177:2510","0:179:2515","0:180:2518","0:181:2522"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:11885:35090":{"id":"2:11885:35090","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"1:11863:1378","crate::ops::IndexMut":"2:2993:3593","str::slice_unchecked":"2:11884:35089"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:11990:35111":{"id":"2:11990:35111","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"2:4512:35111"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeUnicode","id":"2:42903:13054","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:67:684":{"id":"0:67:684","crate_id":0,"name":"from","span":{"filename":"src/sockaddr.rs","begin":[299,4],"end":[321,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["addr",{"kind":"resolved_path","inner":{"name":"SocketAddrV6","id":"2:40575:1926","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"SockAddr","id":"0:565:1691","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:5:672-0:565:1691":{"id":"b:5:672-0:565:1691","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2248:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:668:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"SockAddr","id":"0:565:1691","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:674:9634","5:675:9635","5:676:9636"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"a:2:2732:3710-0:609:1723":{"id":"a:2:2732:3710-0:609:1723","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2732:3710","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Type","id":"0:609:1723","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:276":{"id":"0:276","crate_id":0,"name":null,"span":{"filename":"src/sockref.rs","begin":[115,0],"end":[123,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:9051:111","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"SockRef","id":"0:264:1693","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"items":["0:277:658"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:11886:27310":{"id":"2:11886:27310","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_mut":"2:11887:27311"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3327-0:110:1692":{"id":"b:2:3327-0:110:1692","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2675:3548","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3325:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Socket","id":"0:110:1692","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3329:1467"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:2538-0:621:1745":{"id":"b:2:2538-0:621:1745","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2497:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2507:234","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Protocol","id":"0:621:1745","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2541:127","2:2542:1453"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:190:2609":{"id":"0:190:2609","crate_id":0,"name":"leave_ssm_v4","span":{"filename":"src/socket.rs","begin":[1316,4],"end":[1335,5]},"visibility":"public","docs":"Leave a multicast group using `IP_DROP_SOURCE_MEMBERSHIP` option on this socket.\n\nFor more information about this option, see [`join_ssm_v4`].\n\n[`join_ssm_v4`]: Socket::join_ssm_v4","links":{"Socket::join_ssm_v4":"0:189:2599"},"attrs":["#[cfg(not(any(target_os = \"dragonfly\", target_os = \"haiku\", target_os =\n\"netbsd\", target_os = \"openbsd\", target_os = \"redox\", target_os = \"fuchsia\",\ntarget_os = \"nto\",)))]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["source",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"Ipv4Addr","id":"2:40421:2072","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],["group",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"Ipv4Addr","id":"2:40421:2072","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],["interface",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"Ipv4Addr","id":"2:40421:2072","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:2865:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:579":{"id":"0:579","crate_id":0,"name":null,"span":{"filename":"src/socket.rs","begin":[2037,0],"end":[2037,29]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2500:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"TcpStream","id":"1:3665:2144","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Socket","id":"0:110:1692","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:580:684"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:563:1819":{"id":"0:563:1819","crate_id":0,"name":"with_interval","span":{"filename":"src/lib.rs","begin":[512,4],"end":[517,5]},"visibility":"public","docs":"Set the value of the `TCP_KEEPINTVL` option. On Windows, this sets the\nvalue of the `tcp_keepalive` struct's `keepaliveinterval` field.\n\nSets the time interval between TCP keepalive probes.\n\nSome platforms specify this value in seconds, so sub-second\nspecifications may be omitted.","links":{},"attrs":["#[cfg(any(target_os = \"android\", target_os = \"dragonfly\", target_os =\n\"freebsd\", target_os = \"fuchsia\", target_os = \"illumos\", target_os = \"ios\",\ntarget_os = \"linux\", target_os = \"macos\", target_os = \"netbsd\", target_os =\n\"tvos\", target_os = \"watchos\", target_os = \"windows\",))]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["interval",{"kind":"resolved_path","inner":{"name":"Duration","id":"2:43360:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:526:1730":{"id":"0:526:1730","crate_id":0,"name":"DGRAM","span":{"filename":"src/lib.rs","begin":[257,4],"end":[257,50]},"visibility":"public","docs":"Type corresponding to `SOCK_DGRAM`.\n\nUsed for protocols such as UDP.","links":{},"attrs":[],"deprecation":null,"kind":"assoc_const","inner":{"type":{"kind":"resolved_path","inner":{"name":"Type","id":"0:609:1723","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"default":"_"}},"0:39":{"id":"0:39","crate_id":0,"name":null,"span":{"filename":"src/sockaddr.rs","begin":[27,0],"end":[271,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[allow(clippy :: len_without_is_empty)]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"SockAddr","id":"0:565:1691","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:40:928","0:41:1991","0:46:1493","0:48:2009","0:49:2012","0:50:2015","0:51:801","0:52:311","0:53:2021","0:54:2023","0:55:2026","0:56:2029","0:58:2034","0:59:2049","0:60:2051"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:72":{"id":"0:72","crate_id":0,"name":null,"span":{"filename":"src/sockaddr.rs","begin":[354,0],"end":[354,23]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"2:2302:124","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"SockAddr","id":"0:565:1691","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:71:603":{"id":"0:71:603","crate_id":0,"name":"eq","span":{"filename":"src/sockaddr.rs","begin":[349,4],"end":[351,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2527-0:621:1745":{"id":"b:2:2527-0:621:1745","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2500:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Protocol","id":"0:621:1745","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2529:684"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:539":{"id":"0:539","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[344,0],"end":[348,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2500:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Protocol","id":"0:621:1745","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"c_int","id":"20:43:1690","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:540:684"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:173:2493":{"id":"0:173:2493","crate_id":0,"name":"set_read_timeout","span":{"filename":"src/socket.rs","begin":[980,4],"end":[982,5]},"visibility":"public","docs":"Set value for the `SO_RCVTIMEO` option on this socket.\n\nIf `timeout` is `None`, then `read` and `recv` calls will block\nindefinitely.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["duration",{"kind":"resolved_path","inner":{"name":"Option","id":"2:40589:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Duration","id":"2:43360:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:2865:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11905:9615":{"id":"2:11905:9615","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"2:40591:176","prim@char":"1:11857:411","self::pattern":"2:11565:19914"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:40589:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11570:13827","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:574:2415":{"id":"0:574:2415","crate_id":0,"name":"Address","span":{"filename":"src/socket.rs","begin":[802,4],"end":[802,21]},"visibility":"default","docs":"An address assigned to an interface.","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"kind":{"tuple":["0:576:1580"]},"discriminant":null}},"a:2:2668:217-0:597:1707":{"id":"a:2:2668:217-0:597:1707","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2668:217","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Domain","id":"0:597:1707","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:228:2744":{"id":"0:228:2744","crate_id":0,"name":"set_recv_tclass_v6","span":{"filename":"src/socket.rs","begin":[1758,4],"end":[1767,5]},"visibility":"public","docs":"Set the value of the `IPV6_RECVTCLASS` option for this socket.\n\nIf enabled, the `IPV6_TCLASS` ancillary message is passed with incoming\npackets. It contains a byte which specifies the traffic class field of\nthe packet header.","links":{},"attrs":["#[cfg(not(any(target_os = \"dragonfly\", target_os = \"fuchsia\", target_os =\n\"illumos\", target_os = \"netbsd\", target_os = \"openbsd\", target_os = \"redox\",\ntarget_os = \"solaris\", target_os = \"haiku\",)))]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["recv_tclass",{"kind":"primitive","inner":"bool"}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:2865:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:516:1709":{"id":"0:516:1709","crate_id":0,"name":"IPV4","span":{"filename":"src/lib.rs","begin":[207,4],"end":[207,50]},"visibility":"public","docs":"Domain for IPv4 communication, corresponding to `AF_INET`.","links":{},"attrs":[],"deprecation":null,"kind":"assoc_const","inner":{"type":{"kind":"resolved_path","inner":{"name":"Domain","id":"0:597:1707","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"default":"_"}},"b:2:2527-0:597:1707":{"id":"b:2:2527-0:597:1707","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2500:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Domain","id":"0:597:1707","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2529:684"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:532:1747":{"id":"0:532:1747","crate_id":0,"name":"ICMPV4","span":{"filename":"src/lib.rs","begin":[301,4],"end":[301,61]},"visibility":"public","docs":"Protocol corresponding to `ICMPv4`.","links":{},"attrs":[],"deprecation":null,"kind":"assoc_const","inner":{"type":{"kind":"resolved_path","inner":{"name":"Protocol","id":"0:621:1745","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"default":"_"}},"0:569:415":{"id":"0:569:415","crate_id":0,"name":"clone","span":{"filename":"src/sockaddr.rs","begin":[20,9],"end":[20,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SockAddr","id":"0:565:1691","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11891:31947":{"id":"2:11891:31947","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"2:11892:31959"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitWhitespace","id":"2:42860:13130","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:626:415":{"id":"0:626:415","crate_id":0,"name":"clone","span":{"filename":"src/lib.rs","begin":[296,15],"end":[296,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Protocol","id":"0:621:1745","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:180:2518":{"id":"0:180:2518","crate_id":0,"name":"write_timeout","span":{"filename":"src/socket.rs","begin":[1043,4],"end":[1045,5]},"visibility":"public","docs":"Get value for the `SO_SNDTIMEO` option on this socket.\n\nIf the returned timeout is `None`, then `write` and `send` calls will\nblock indefinitely.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:2865:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Option","id":"2:40589:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Duration","id":"2:43360:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:561:928":{"id":"0:561:928","crate_id":0,"name":"new","span":{"filename":"src/lib.rs","begin":[435,4],"end":[454,5]},"visibility":"public","docs":"Returns a new, empty set of TCP keepalive parameters.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[],"output":{"kind":"resolved_path","inner":{"name":"TcpKeepalive","id":"0:645:1795","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2234-0:264:1693":{"id":"b:2:2234-0:264:1693","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2675:3548","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2228:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"SockRef","id":"0:264:1693","args":{"angle_bracketed":{"args":[{"lifetime":"'s"}],"bindings":[]}}}},"items":["2:2236:25454"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:68":{"id":"0:68","crate_id":0,"name":null,"span":{"filename":"src/sockaddr.rs","begin":[324,0],"end":[346,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:9051:111","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"SockAddr","id":"0:565:1691","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:69:658"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:225:2733":{"id":"0:225:2733","crate_id":0,"name":"set_only_v6","span":{"filename":"src/socket.rs","begin":[1710,4],"end":[1719,5]},"visibility":"public","docs":"Set the value for the `IPV6_V6ONLY` option on this socket.\n\nIf this is set to `true` then the socket is restricted to sending and\nreceiving IPv6 packets only. In this case two IPv4 and IPv6 applications\ncan bind the same port at the same time.\n\nIf this is set to `false` then the socket can be used to send and\nreceive packets from an IPv4-mapped IPv6 address.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["only_v6",{"kind":"primitive","inner":"bool"}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:2865:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:2668:217-0:543:1785":{"id":"a:2:2668:217-0:543:1785","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2668:217","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"MaybeUninitSlice","id":"0:543:1785","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"a:2:8186:9224-0:609:1723":{"id":"a:2:8186:9224-0:609:1723","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:8186:9224","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Type","id":"0:609:1723","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:395:658":{"id":"0:395:658","crate_id":0,"name":"fmt","span":{"filename":"src/sys/unix.rs","begin":[554,4],"end":[560,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"std::fmt::Formatter","id":"2:9010:131","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"std::fmt::Result","id":"2:8999:207","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11981:35109":{"id":"2:11981:35109","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"2:11527:126","`FromStr`":"2:11526:3643"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:40733:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"F"}},{"type":{"kind":"qualified_path","inner":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"F"},"trait":{"name":"FromStr","id":"2:11526:3643","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"2:11526:3643","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:199:2634":{"id":"0:199:2634","crate_id":0,"name":"ttl","span":{"filename":"src/socket.rs","begin":[1425,4],"end":[1429,5]},"visibility":"public","docs":"Get the value of the `IP_TTL` option for this socket.\n\nFor more information about this option, see [`set_ttl`].\n\n[`set_ttl`]: Socket::set_ttl","links":{"Socket::set_ttl":"0:201:2647"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:2865:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"u32"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11960:35104":{"id":"2:11960:35104","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"1:11857:411","self::pattern":"2:11565:19914"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11570:13827","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11570:13827","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"2:11590:19911","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:49:2012":{"id":"0:49:2012","crate_id":0,"name":"family","span":{"filename":"src/sockaddr.rs","begin":[167,4],"end":[169,5]},"visibility":"public","docs":"Returns this address's family.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"sa_family_t","id":"20:644:1933","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:580:684":{"id":"0:580:684","crate_id":0,"name":"from","span":{"filename":"src/socket.rs","begin":[2037,0],"end":[2037,29]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["socket",{"kind":"resolved_path","inner":{"name":"net::TcpStream","id":"1:3665:2144","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Socket","id":"0:110:1692","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2234-0:543:1785":{"id":"b:2:2234-0:543:1785","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2675:3548","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2228:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"MaybeUninitSlice","id":"0:543:1785","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:2236:25454"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:11902:27330":{"id":"2:11902:27330","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"1:11857:411","self::pattern":"2:11565:19914"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11570:13827","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11570:13827","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11585:19912","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2523-0:633:1775":{"id":"b:2:2523-0:633:1775","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2500:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2497:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RecvFlags","id":"0:633:1775","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2526:2055"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:11984:27095":{"id":"2:11984:27095","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11946:35097":{"id":"2:11946:35097","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"2:11565:19914","`DoubleEndedIterator`":"2:7174:120","prim@char":"1:11857:411","str::rmatch_indices":"2:11949:35098"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"MatchIndices","id":"2:42736:13124","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11570:13827","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:66":{"id":"0:66","crate_id":0,"name":null,"span":{"filename":"src/sockaddr.rs","begin":[298,0],"end":[322,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2500:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"SocketAddrV6","id":"2:40575:1926","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"SockAddr","id":"0:565:1691","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:67:684"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:519:1718":{"id":"0:519:1718","crate_id":0,"name":"for_address","span":{"filename":"src/lib.rs","begin":[216,4],"end":[221,5]},"visibility":"public","docs":"Returns the correct domain for `address`.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["address",{"kind":"resolved_path","inner":{"name":"SocketAddr","id":"2:40540:1641","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Domain","id":"0:597:1707","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11983:27094":{"id":"2:11983:27094","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:533:1750":{"id":"0:533:1750","crate_id":0,"name":"ICMPV6","span":{"filename":"src/lib.rs","begin":[304,4],"end":[304,63]},"visibility":"public","docs":"Protocol corresponding to `ICMPv6`.","links":{},"attrs":[],"deprecation":null,"kind":"assoc_const","inner":{"type":{"kind":"resolved_path","inner":{"name":"Protocol","id":"0:621:1745","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"default":"_"}},"2:11986:27090":{"id":"2:11986:27090","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5335:27092":{"id":"5:5335:27092","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"2:11986:27090"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7180:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11865:9576":{"id":"2:11865:9576","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:538:684":{"id":"0:538:684","crate_id":0,"name":"from","span":{"filename":"src/lib.rs","begin":[339,4],"end":[341,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["p",{"kind":"resolved_path","inner":{"name":"c_int","id":"20:43:1690","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Protocol","id":"0:621:1745","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:583":{"id":"0:583","crate_id":0,"name":null,"span":{"filename":"src/socket.rs","begin":[2039,0],"end":[2039,29]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2500:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"UdpSocket","id":"1:3770:2802","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Socket","id":"0:110:1692","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:584:684"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:2:2527-0:609:1723":{"id":"b:2:2527-0:609:1723","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2500:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Type","id":"0:609:1723","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2529:684"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"5:5331:35762":{"id":"5:5331:35762","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:7180:221"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7180:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:174:2499":{"id":"0:174:2499","crate_id":0,"name":"reuse_address","span":{"filename":"src/socket.rs","begin":[989,4],"end":[994,5]},"visibility":"public","docs":"Get the value of the `SO_REUSEADDR` option on this socket.\n\nFor more information about this option, see [`set_reuse_address`].\n\n[`set_reuse_address`]: Socket::set_reuse_address","links":{"Socket::set_reuse_address":"0:176:2506"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:2865:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"bool"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:142:2340":{"id":"0:142:2340","crate_id":0,"name":"recv_from_vectored_with_flags","span":{"filename":"src/socket.rs","begin":[579,4],"end":[585,5]},"visibility":"public","docs":"Identical to [`recv_from_vectored`] but allows for specification of\narbitrary flags to the underlying `recvmsg`/`WSARecvFrom` call.\n\n[`recv_from_vectored`]: Socket::recv_from_vectored\n\n# Safety\n\n`recv_from_vectored` makes the same safety guarantees regarding `bufs`\nas [`recv_vectored`].\n\n[`recv_vectored`]: Socket::recv_vectored","links":{"Socket::recv_vectored":"0:136:2310","Socket::recv_from_vectored":"0:141:2339"},"attrs":["#[cfg(not(target_os = \"redox\"))]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["bufs",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"resolved_path","inner":{"name":"MaybeUninitSlice","id":"0:543:1785","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}}],["flags",{"kind":"resolved_path","inner":{"name":"c_int","id":"20:43:1690","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:2865:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"primitive","inner":"usize"},{"kind":"resolved_path","inner":{"name":"RecvFlags","id":"0:633:1775","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},{"kind":"resolved_path","inner":{"name":"SockAddr","id":"0:565:1691","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5334:27093":{"id":"5:5334:27093","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"2:11985:27091"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7180:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11874:311":{"id":"2:11874:311","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"2:11875:1997","`u8`":"1:11874:1475"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":false,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2234-0:621:1745":{"id":"b:2:2234-0:621:1745","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2675:3548","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2228:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Protocol","id":"0:621:1745","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2236:25454"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:11875:1997":{"id":"2:11875:1997","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:11874:1475"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":true,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:2732:3710-0:264:1693":{"id":"a:2:2732:3710-0:264:1693","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'s","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2732:3710","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"SockRef","id":"0:264:1693","args":{"angle_bracketed":{"args":[{"lifetime":"'s"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:153:2397":{"id":"0:153:2397","crate_id":0,"name":"send_to_vectored_with_flags","span":{"filename":"src/socket.rs","begin":[720,4],"end":[727,5]},"visibility":"public","docs":"Identical to [`send_to_vectored`] but allows for specification of\narbitrary flags to the underlying `sendmsg`/`WSASendTo` call.\n\n[`send_to_vectored`]: Socket::send_to_vectored","links":{"Socket::send_to_vectored":"0:152:2396"},"attrs":["#[cfg(not(target_os = \"redox\"))]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["bufs",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"resolved_path","inner":{"name":"IoSlice","id":"1:8101:2108","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}}],["addr",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"SockAddr","id":"0:565:1691","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],["flags",{"kind":"resolved_path","inner":{"name":"c_int","id":"20:43:1690","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:2865:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:595":{"id":"0:595","crate_id":0,"name":null,"span":{"filename":"src/sys/unix.rs","begin":[501,0],"end":[523,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:9051:111","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Protocol","id":"0:621:1745","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:596:658"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:11887:27311":{"id":"2:11887:27311","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"2:11886:27310"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:230:2782":{"id":"0:230:2782","crate_id":0,"name":"set_tcp_keepalive","span":{"filename":"src/socket.rs","begin":[1927,4],"end":[1930,5]},"visibility":"public","docs":"Set parameters configuring TCP keepalive probes for this socket.\n\nThe supported parameters depend on the operating system, and are\nconfigured using the [`TcpKeepalive`] struct. At a minimum, all systems\nsupport configuring the [keepalive time]: the time after which the OS\nwill start sending keepalive messages on an idle connection.\n\n[keepalive time]: TcpKeepalive::with_time\n\n# Notes\n\n* This will enable `SO_KEEPALIVE` on this socket, if it is not already\n  enabled.\n* On some platforms, such as Windows, any keepalive parameters *not*\n  configured by the `TcpKeepalive` struct passed to this function may be\n  overwritten with their default values. Therefore, this function should\n  either only be called once per socket, or the same parameters should\n  be passed every time it is called.\n\n# Examples\n\n```\nuse std::time::Duration;\n\nuse socket2::{Socket, TcpKeepalive, Domain, Type};\n\n# fn main() -> std::io::Result<()> {\nlet socket = Socket::new(Domain::IPV4, Type::STREAM, None)?;\nlet keepalive = TcpKeepalive::new()\n    .with_time(Duration::from_secs(4));\n    // Depending on the target operating system, we may also be able to\n    // configure the keepalive probe interval and/or the number of\n    // retries here as well.\n\nsocket.set_tcp_keepalive(&keepalive)?;\n# Ok(()) }\n```\n","links":{"`TcpKeepalive`":"0:645:1795","TcpKeepalive::with_time":"0:562:1810"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["params",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"TcpKeepalive","id":"0:645:1795","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:2865:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11873:35088":{"id":"2:11873:35088","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"0:214:2699":{"id":"0:214:2699","crate_id":0,"name":"multicast_if_v6","span":{"filename":"src/socket.rs","begin":[1616,4],"end":[1621,5]},"visibility":"public","docs":"Get the value of the `IPV6_MULTICAST_IF` option for this socket.\n\nFor more information about this option, see [`set_multicast_if_v6`].\n\n[`set_multicast_if_v6`]: Socket::set_multicast_if_v6","links":{"Socket::set_multicast_if_v6":"0:216:2705"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:2865:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"u32"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:275:684":{"id":"0:275:684","crate_id":0,"name":"from","span":{"filename":"src/sockref.rs","begin":[87,4],"end":[94,5]},"visibility":"default","docs":"The caller must ensure `S` is actually a socket.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["socket",{"kind":"borrowed_ref","inner":{"lifetime":"'s","mutable":false,"type":{"kind":"generic","inner":"S"}}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2538-0:264:1693":{"id":"b:2:2538-0:264:1693","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2497:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2507:234","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"SockRef","id":"0:264:1693","args":{"angle_bracketed":{"args":[{"lifetime":"'s"}],"bindings":[]}}}},"items":["2:2541:127","2:2542:1453"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"a:2:2668:217-0:621:1745":{"id":"a:2:2668:217-0:621:1745","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2668:217","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Protocol","id":"0:621:1745","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"b:2:2523-0:621:1745":{"id":"b:2:2523-0:621:1745","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2500:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2497:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Protocol","id":"0:621:1745","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2526:2055"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:627":{"id":"0:627","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[296,22],"end":[296,24]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralEq","id":"2:2679:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Protocol","id":"0:621:1745","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"a:2:2668:217-0:570:1699":{"id":"a:2:2668:217-0:570:1699","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2668:217","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"InterfaceIndexOrAddress","id":"0:570:1699","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"b:2:2527-0:633:1775":{"id":"b:2:2527-0:633:1775","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2500:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RecvFlags","id":"0:633:1775","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2529:684"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:11893:29401":{"id":"2:11893:29401","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\n\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line ending isn't required:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Lines","id":"2:42840:3669","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2523-0:264:1693":{"id":"b:2:2523-0:264:1693","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2500:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2497:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"SockRef","id":"0:264:1693","args":{"angle_bracketed":{"args":[{"lifetime":"'s"}],"bindings":[]}}}},"items":["2:2526:2055"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:2527-0:565:1691":{"id":"b:2:2527-0:565:1691","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2500:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"SockAddr","id":"0:565:1691","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2529:684"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:562:1810":{"id":"0:562:1810","crate_id":0,"name":"with_time","span":{"filename":"src/lib.rs","begin":[467,4],"end":[472,5]},"visibility":"public","docs":"Set the amount of time after which TCP keepalive probes will be sent on\nidle connections.\n\nThis will set `TCP_KEEPALIVE` on macOS and iOS, and\n`TCP_KEEPIDLE` on all other Unix operating systems, except\nOpenBSD and Haiku which don't support any way to set this\noption. On Windows, this sets the value of the `tcp_keepalive`\nstruct's `keepalivetime` field.\n\nSome platforms specify this value in seconds, so sub-second\nspecifications may be omitted.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["time",{"kind":"resolved_path","inner":{"name":"Duration","id":"2:43360:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:187:2589":{"id":"0:187:2589","crate_id":0,"name":"join_multicast_v4_n","span":{"filename":"src/socket.rs","begin":[1218,4],"end":[1232,5]},"visibility":"public","docs":"Join a multicast group using `IP_ADD_MEMBERSHIP` option on this socket.\n\nThis function specifies a new multicast group for this socket to join.\nThe address must be a valid multicast address, and `interface` specifies\nthe local interface with which the system should join the multicast\ngroup. See [`InterfaceIndexOrAddress`].","links":{"`InterfaceIndexOrAddress`":"0:570:1699"},"attrs":["#[cfg(not(any(target_os = \"aix\", target_os = \"haiku\", target_os = \"illumos\",\ntarget_os = \"netbsd\", target_os = \"openbsd\", target_os = \"redox\", target_os =\n\"solaris\", target_os = \"nto\",)))]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["multiaddr",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"Ipv4Addr","id":"2:40421:2072","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],["interface",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"InterfaceIndexOrAddress","id":"0:570:1699","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:2865:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:146:2370":{"id":"0:146:2370","crate_id":0,"name":"send_with_flags","span":{"filename":"src/socket.rs","begin":[645,4],"end":[647,5]},"visibility":"public","docs":"Identical to [`send`] but allows for specification of arbitrary flags to the underlying\n`send` call.\n\n[`send`]: Socket::send","links":{"Socket::send":"0:145:2369"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}],["flags",{"kind":"resolved_path","inner":{"name":"c_int","id":"20:43:1690","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:2865:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:179:2515":{"id":"0:179:2515","crate_id":0,"name":"set_send_buffer_size","span":{"filename":"src/socket.rs","begin":[1028,4],"end":[1037,5]},"visibility":"public","docs":"Set value for the `SO_SNDBUF` option on this socket.\n\nChanges the size of the operating system's send buffer associated with\nthe socket.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["size",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:2865:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:145:2369":{"id":"0:145:2369","crate_id":0,"name":"send","span":{"filename":"src/socket.rs","begin":[637,4],"end":[639,5]},"visibility":"public","docs":"Sends data on the socket to a connected peer.\n\nThis is typically used on TCP sockets or datagram sockets which have\nbeen connected.\n\nOn success returns the number of bytes that were sent.\n\nAdditional documentation can be found in manual of the OS:\n\n * DragonFly BSD: <https://man.dragonflybsd.org/?command=send&section=2>\n * FreeBSD: <https://www.freebsd.org/cgi/man.cgi?query=send&sektion=2>\n * Linux: <https://man7.org/linux/man-pages/man2/send.2.html>\n * macOS: <https://developer.apple.com/library/archive/documentation/System/Conceptual/ManPages_iPhoneOS/man2/send.2.html> (archived, actually for iOS)\n * NetBSD: <https://man.netbsd.org/send.2>\n * OpenBSD: <https://man.openbsd.org/send.2>\n * iOS: <https://developer.apple.com/library/archive/documentation/System/Conceptual/ManPages_iPhoneOS/man2/send.2.html> (archived)\n * illumos: <https://illumos.org/man/3SOCKET/send>\n * Windows: <https://docs.microsoft.com/en-us/windows/win32/api/winsock2/nf-winsock2-send>","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:2865:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:2732:3710-0:597:1707":{"id":"a:2:2732:3710-0:597:1707","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2732:3710","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Domain","id":"0:597:1707","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"a:2:2682:225-0:597:1707":{"id":"a:2:2682:225-0:597:1707","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2682:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Domain","id":"0:597:1707","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:11867:35086":{"id":"2:11867:35086","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11954:35100":{"id":"2:11954:35100","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11989:14660":{"id":"2:11989:14660","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"2:4515:14660"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDefault","id":"2:42894:13049","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:134:2292":{"id":"0:134:2292","crate_id":0,"name":"recv_out_of_band","span":{"filename":"src/socket.rs","begin":[429,4],"end":[431,5]},"visibility":"public","docs":"Receives out-of-band (OOB) data on the socket from the remote address to\nwhich it is connected by setting the `MSG_OOB` flag for this call.\n\nFor more information, see [`recv`], [`out_of_band_inline`].\n\n[`recv`]: Socket::recv\n[`out_of_band_inline`]: Socket::out_of_band_inline","links":{"Socket::recv":"0:133:2274","Socket::out_of_band_inline":"0:166:2466"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"resolved_path","inner":{"name":"MaybeUninit","id":"2:29935:1639","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"u8"}}],"bindings":[]}}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:2865:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:202:2653":{"id":"0:202:2653","crate_id":0,"name":"set_tos","span":{"filename":"src/socket.rs","begin":[1452,4],"end":[1454,5]},"visibility":"public","docs":"Set the value of the `IP_TOS` option for this socket.\n\nThis value sets the type-of-service field that is used in every packet\nsent from this socket.\n\nNOTE: <https://docs.microsoft.com/en-us/windows/win32/winsock/ipproto-ip-socket-options>\ndocuments that not all versions of windows support `IP_TOS`.","links":{},"attrs":["#[cfg(not(any(target_os = \"fuchsia\", target_os = \"redox\", target_os =\n\"solaris\", target_os = \"illumos\",)))]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["tos",{"kind":"primitive","inner":"u32"}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:2865:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5333:3696":{"id":"5:5333:3696","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7180:221"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7180:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:522":{"id":"0:522","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[230,0],"end":[234,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2500:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Domain","id":"0:597:1707","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"c_int","id":"20:43:1690","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:523:684"],"negative":false,"synthetic":false,"blanket_impl":null}},"a:2:8186:9224-0:621:1745":{"id":"a:2:8186:9224-0:621:1745","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:8186:9224","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Protocol","id":"0:621:1745","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"b:2:3327-0:570:1699":{"id":"b:2:3327-0:570:1699","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2675:3548","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3325:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"InterfaceIndexOrAddress","id":"0:570:1699","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3329:1467"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"a:2:2732:3710-0:621:1745":{"id":"a:2:2732:3710-0:621:1745","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2732:3710","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Protocol","id":"0:621:1745","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:577":{"id":"0:577","crate_id":0,"name":null,"span":{"filename":"src/socket.rs","begin":[797,9],"end":[797,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:9051:111","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"InterfaceIndexOrAddress","id":"0:570:1699","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:578:658"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:2:2533-0:570:1699":{"id":"b:2:2533-0:570:1699","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2507:234","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2503:235","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"InterfaceIndexOrAddress","id":"0:570:1699","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2536:127","2:2537:1454"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:576:1580":{"id":"0:576:1580","crate_id":0,"name":"0","span":{"filename":"src/socket.rs","begin":[802,12],"end":[802,20]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"struct_field","inner":{"kind":"resolved_path","inner":{"name":"Ipv4Addr","id":"2:40421:2072","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"0:527":{"id":"0:527","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[277,0],"end":[281,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2500:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"i32"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Type","id":"0:609:1723","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:528:684"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:2542:1453":{"id":"2:2542:1453","crate_id":2,"name":"try_from","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["value",{"kind":"generic","inner":"U"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:40733:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"T"},"trait":{"name":"TryFrom","id":"2:2507:234","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11896:27328":{"id":"2:11896:27328","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"1:11857:411","self::pattern":"2:11565:19914"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11570:13827","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:123:2218":{"id":"0:123:2218","crate_id":0,"name":"listen","span":{"filename":"src/socket.rs","begin":[251,4],"end":[253,5]},"visibility":"public","docs":"Mark a socket as ready to accept incoming connection requests using\n[`Socket::accept()`].\n\nThis function directly corresponds to the `listen(2)` function on\nWindows and Unix.\n\nAn error will be returned if `listen` or `connect` has already been\ncalled on this builder.\n\nAdditional documentation can be found in manual of the OS:\n\n * DragonFly BSD: <https://man.dragonflybsd.org/?command=listen&section=2>\n * FreeBSD: <https://www.freebsd.org/cgi/man.cgi?query=listen&sektion=2>\n * Linux: <https://man7.org/linux/man-pages/man2/listen.2.html>\n * macOS: <https://developer.apple.com/library/archive/documentation/System/Conceptual/ManPages_iPhoneOS/man2/listen.2.html> (archived, actually for iOS)\n * NetBSD: <https://man.netbsd.org/listen.2>\n * OpenBSD: <https://man.openbsd.org/listen.2>\n * iOS: <https://developer.apple.com/library/archive/documentation/System/Conceptual/ManPages_iPhoneOS/man2/listen.2.html> (archived)\n * illumos: <https://illumos.org/man/3SOCKET/listen>\n * Windows: <https://docs.microsoft.com/en-us/windows/win32/api/winsock2/nf-winsock2-listen>","links":{"`Socket::accept()`":"0:124:2224"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["backlog",{"kind":"resolved_path","inner":{"name":"c_int","id":"20:43:1690","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:2865:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:206:2664":{"id":"0:206:2664","crate_id":0,"name":"recv_tos","span":{"filename":"src/socket.rs","begin":[1521,4],"end":[1526,5]},"visibility":"public","docs":"Get the value of the `IP_RECVTOS` option for this socket.\n\nFor more information about this option, see [`set_recv_tos`].\n\n[`set_recv_tos`]: Socket::set_recv_tos","links":{"Socket::set_recv_tos":"0:205:2663"},"attrs":["#[cfg(not(any(target_os = \"aix\", target_os = \"dragonfly\", target_os =\n\"fuchsia\", target_os = \"illumos\", target_os = \"netbsd\", target_os = \"openbsd\",\ntarget_os = \"redox\", target_os = \"solaris\", target_os = \"haiku\", target_os =\n\"nto\",)))]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:2865:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"bool"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:272":{"id":"0:272","crate_id":0,"name":null,"span":{"filename":"src/sockref.rs","begin":[82,0],"end":[95,1]},"visibility":"default","docs":"On Windows, a corresponding `From<&impl AsSocket>` implementation exists.","links":{},"attrs":["#[cfg(unix)]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'s","kind":{"lifetime":{"outlives":[]}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"S"},"bounds":[{"trait_bound":{"trait":{"name":"AsFd","id":"1:4748:2805","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2500:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'s","mutable":false,"type":{"kind":"generic","inner":"S"}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"SockRef","id":"0:264:1693","args":{"angle_bracketed":{"args":[{"lifetime":"'s"}],"bindings":[]}}}},"items":["0:275:684"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:537":{"id":"0:537","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[338,0],"end":[342,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2500:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"i32"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Protocol","id":"0:621:1745","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:538:684"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:557":{"id":"0:557","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[403,0],"end":[407,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"DerefMut","id":"2:2919:1642","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"MaybeUninitSlice","id":"0:543:1785","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["0:559:545"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:264:1693":{"id":"0:264:1693","crate_id":0,"name":"SockRef","span":{"filename":"src/sockref.rs","begin":[61,0],"end":[69,1]},"visibility":"public","docs":"A reference to a [`Socket`] that can be used to configure socket types other\nthan the `Socket` type itself.\n\nThis allows for example a [`TcpStream`], found in the standard library, to\nbe configured using all the additional methods found in the [`Socket`] API.\n\n`SockRef` can be created from any socket type that implements [`AsFd`]\n(Unix) or [`AsSocket`] (Windows) using the [`From`] implementation.\n\n[`TcpStream`]: std::net::TcpStream\n[`AsFd`]: https://doc.rust-lang.org/stable/std/os/unix/io/trait.AsFd.html\n[`AsSocket`]: https://doc.rust-lang.org/stable/std/os/windows/io/trait.AsSocket.html\n\n# Examples\n\nBelow is an example of converting a [`TcpStream`] into a [`SockRef`].\n\n```\nuse std::net::{TcpStream, SocketAddr};\n\nuse socket2::SockRef;\n\n# fn main() -> Result<(), Box<dyn std::error::Error>> {\n// Create `TcpStream` from the standard library.\nlet address: SocketAddr = \"127.0.0.1:1234\".parse()?;\n# let b1 = std::sync::Arc::new(std::sync::Barrier::new(2));\n# let b2 = b1.clone();\n# let handle = std::thread::spawn(move || {\n#    let listener = std::net::TcpListener::bind(address).unwrap();\n#    b2.wait();\n#    let (stream, _) = listener.accept().unwrap();\n#    std::thread::sleep(std::time::Duration::from_millis(10));\n#    drop(stream);\n# });\n# b1.wait();\nlet stream = TcpStream::connect(address)?;\n\n// Create a `SockRef`erence to the stream.\nlet socket_ref = SockRef::from(&stream);\n// Use `Socket::set_nodelay` on the stream.\nsocket_ref.set_nodelay(true)?;\ndrop(socket_ref);\n\nassert_eq!(stream.nodelay()?, true);\n# handle.join().unwrap();\n# Ok(())\n# }\n```","links":{"`SockRef`":"0:264:1693","`From`":"2:2500:132","`Socket`":"0:110:1692","std::net::TcpStream":"1:3665:2144"},"attrs":[],"deprecation":null,"kind":"struct","inner":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'s","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"impls":["a:2:8187:9223-0:264:1693","a:2:2682:225-0:264:1693","a:2:8186:9224-0:264:1693","a:2:2732:3710-0:264:1693","a:2:2668:217-0:264:1693","b:2:2231-0:264:1693","b:2:3327-0:264:1693","b:2:2527-0:264:1693","b:2:2538-0:264:1693","b:2:2234-0:264:1693","b:2:2533-0:264:1693","b:2:2523-0:264:1693","0:268","0:276","0:272"]}},"0:613":{"id":"0:613","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[245,15],"end":[245,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2248:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Type","id":"0:609:1723","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:614:415"],"negative":false,"synthetic":false,"blanket_impl":null}},"a:2:2668:217-0:645:1795":{"id":"a:2:2668:217-0:645:1795","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2668:217","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"TcpKeepalive","id":"0:645:1795","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"b:2:3327-0:633:1775":{"id":"b:2:3327-0:633:1775","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2675:3548","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3325:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RecvFlags","id":"0:633:1775","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3329:1467"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:11876:3157":{"id":"2:11876:3157","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:40591:176"},"attrs":["#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:40589:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:9746:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9746:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11975:35107":{"id":"2:11975:35107","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:11857:411","self::pattern":"2:11565:19914"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11570:13827","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:556:543":{"id":"0:556:543","crate_id":0,"name":"deref","span":{"filename":"src/lib.rs","begin":[398,4],"end":[400,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"resolved_path","inner":{"name":"MaybeUninit","id":"2:29935:1639","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"u8"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11869:35087":{"id":"2:11869:35087","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n# Panics\n\nPanics if `index > self.len()`.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"2:11867:35086"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:131:2209":{"id":"0:131:2209","crate_id":0,"name":"set_nonblocking","span":{"filename":"src/socket.rs","begin":[383,4],"end":[385,5]},"visibility":"public","docs":"Moves this socket into or out of nonblocking mode.\n\n# Notes\n\nOn Unix this corresponds to calling `fcntl` (un)setting `O_NONBLOCK`.\n\nOn Windows this corresponds to calling `ioctlsocket` (un)setting\n`FIONBIO`.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["nonblocking",{"kind":"primitive","inner":"bool"}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:2865:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:585":{"id":"0:585","crate_id":0,"name":null,"span":{"filename":"src/socket.rs","begin":[2040,0],"end":[2040,29]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2500:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Socket","id":"0:110:1692","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"net::TcpStream","id":"1:3665:2144","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:586:684"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:233:2795":{"id":"0:233:2795","crate_id":0,"name":"set_nodelay","span":{"filename":"src/socket.rs","begin":[1951,4],"end":[1960,5]},"visibility":"public","docs":"Set the value of the `TCP_NODELAY` option on this socket.\n\nIf set, this option disables the Nagle algorithm. This means that\nsegments are always sent as soon as possible, even if there is only a\nsmall amount of data. When not set, data is buffered until there is a\nsufficient amount to send out, thereby avoiding the frequent sending of\nsmall packets.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["nodelay",{"kind":"primitive","inner":"bool"}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:2865:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11943:35096":{"id":"2:11943:35096","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"2:11565:19914","`DoubleEndedIterator`":"2:7174:120","prim@char":"1:11857:411","str::matches":"2:11940:3513"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatches","id":"2:42808:13128","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11570:13827","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11570:13827","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11585:19912","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:499:2852":{"id":"0:499:2852","crate_id":0,"name":"as_fd","span":{"filename":"src/sys/unix.rs","begin":[2810,4],"end":[2813,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"BorrowedFd","id":"1:8296:2863","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:534:1753":{"id":"0:534:1753","crate_id":0,"name":"TCP","span":{"filename":"src/lib.rs","begin":[307,4],"end":[307,57]},"visibility":"public","docs":"Protocol corresponding to `TCP`.","links":{},"attrs":[],"deprecation":null,"kind":"assoc_const","inner":{"type":{"kind":"resolved_path","inner":{"name":"Protocol","id":"0:621:1745","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"default":"_"}},"0:624":{"id":"0:624","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[296,9],"end":[296,13]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"2:2680:108","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Protocol","id":"0:621:1745","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:638:415":{"id":"0:638:415","crate_id":0,"name":"clone","span":{"filename":"src/lib.rs","begin":[355,15],"end":[355,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"RecvFlags","id":"0:633:1775","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:132:2268":{"id":"0:132:2268","crate_id":0,"name":"shutdown","span":{"filename":"src/socket.rs","begin":[392,4],"end":[394,5]},"visibility":"public","docs":"Shuts down the read, write, or both halves of this connection.\n\nThis function will cause all pending and future I/O on the specified\nportions to return immediately with an appropriate value.\n\nAdditional documentation can be found in manual of the OS:\n\n * DragonFly BSD: <https://man.dragonflybsd.org/?command=shutdown&section=2>\n * FreeBSD: <https://www.freebsd.org/cgi/man.cgi?query=shutdown&sektion=2>\n * Linux: <https://man7.org/linux/man-pages/man2/shutdown.2.html>\n * macOS: <https://developer.apple.com/library/archive/documentation/System/Conceptual/ManPages_iPhoneOS/man2/shutdown.2.html> (archived, actually for iOS)\n * NetBSD: <https://man.netbsd.org/shutdown.2>\n * OpenBSD: <https://man.openbsd.org/shutdown.2>\n * iOS: <https://developer.apple.com/library/archive/documentation/System/Conceptual/ManPages_iPhoneOS/man2/shutdown.2.html> (archived)\n * illumos: <https://illumos.org/man/3SOCKET/shutdown>\n * Windows: <https://docs.microsoft.com/en-us/windows/win32/api/winsock2/nf-winsock2-shutdown>","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["how",{"kind":"resolved_path","inner":{"name":"Shutdown","id":"1:8181:2110","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:2865:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:5:672-0:645:1795":{"id":"b:5:672-0:645:1795","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2248:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:668:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"TcpKeepalive","id":"0:645:1795","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:674:9634","5:675:9635","5:676:9636"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"a:2:2668:217-0:633:1775":{"id":"a:2:2668:217-0:633:1775","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2668:217","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RecvFlags","id":"0:633:1775","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:231:2787":{"id":"0:231:2787","crate_id":0,"name":"nodelay","span":{"filename":"src/socket.rs","begin":[1937,4],"end":[1942,5]},"visibility":"public","docs":"Get the value of the `TCP_NODELAY` option on this socket.\n\nFor more information about this option, see [`set_nodelay`].\n\n[`set_nodelay`]: Socket::set_nodelay","links":{"Socket::set_nodelay":"0:233:2795"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:2865:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"bool"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:2732:3710-0:570:1699":{"id":"a:2:2732:3710-0:570:1699","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2732:3710","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"InterfaceIndexOrAddress","id":"0:570:1699","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:632:603":{"id":"0:632:603","crate_id":0,"name":"eq","span":{"filename":"src/lib.rs","begin":[296,26],"end":[296,35]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"Protocol","id":"0:621:1745","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:150:2389":{"id":"0:150:2389","crate_id":0,"name":"send_to","span":{"filename":"src/socket.rs","begin":[688,4],"end":[690,5]},"visibility":"public","docs":"Sends data on the socket to the given address. On success, returns the\nnumber of bytes written.\n\nThis is typically used on UDP or datagram-oriented sockets.\n\nAdditional documentation can be found in manual of the OS:\n\n * DragonFly BSD: <https://man.dragonflybsd.org/?command=sendto&section=2>\n * FreeBSD: <https://www.freebsd.org/cgi/man.cgi?query=sendto&sektion=2>\n * Linux: <https://man7.org/linux/man-pages/man2/sendto.2.html>\n * macOS: <https://developer.apple.com/library/archive/documentation/System/Conceptual/ManPages_iPhoneOS/man2/sendto.2.html> (archived, actually for iOS)\n * NetBSD: <https://man.netbsd.org/sendto.2>\n * OpenBSD: <https://man.openbsd.org/sendto.2>\n * iOS: <https://developer.apple.com/library/archive/documentation/System/Conceptual/ManPages_iPhoneOS/man2/sendto.2.html> (archived)\n * illumos: <https://illumos.org/man/3SOCKET/sendto>\n * Windows: <https://docs.microsoft.com/en-us/windows/win32/api/winsock2/nf-winsock2-sendto>","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}],["addr",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"SockAddr","id":"0:565:1691","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:2865:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2231-0:570:1699":{"id":"b:2:2231-0:570:1699","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2675:3548","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2225:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"InterfaceIndexOrAddress","id":"0:570:1699","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2233:3502"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"a:2:2668:217-0:264:1693":{"id":"a:2:2668:217-0:264:1693","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'s","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2668:217","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"SockRef","id":"0:264:1693","args":{"angle_bracketed":{"args":[{"lifetime":"'s"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"b:2:2533-0:264:1693":{"id":"b:2:2533-0:264:1693","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2507:234","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2503:235","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"SockRef","id":"0:264:1693","args":{"angle_bracketed":{"args":[{"lifetime":"'s"}],"bindings":[]}}}},"items":["2:2536:127","2:2537:1454"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:176:2506":{"id":"0:176:2506","crate_id":0,"name":"set_reuse_address","span":{"filename":"src/socket.rs","begin":[1001,4],"end":[1010,5]},"visibility":"public","docs":"Set value for the `SO_REUSEADDR` option on this socket.\n\nThis indicates that futher calls to `bind` may allow reuse of local\naddresses. For IPv4 sockets this means that a socket may bind even when\nthere's a socket already listening on this port.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["reuse",{"kind":"primitive","inner":"bool"}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:2865:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:54:2023":{"id":"0:54:2023","crate_id":0,"name":"is_ipv4","span":{"filename":"src/sockaddr.rs","begin":[192,4],"end":[194,5]},"visibility":"public","docs":"Returns true if this address is in the `AF_INET` (IPv4) family, false otherwise.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:121:2187":{"id":"0:121:2187","crate_id":0,"name":"connect","span":{"filename":"src/socket.rs","begin":[203,4],"end":[205,5]},"visibility":"public","docs":"Initiate a connection on this socket to the specified address.\n\nThis function directly corresponds to the `connect(2)` function on\nWindows and Unix.\n\nAn error will be returned if `listen` or `connect` has already been\ncalled on this builder.\n\nAdditional documentation can be found in manual of the OS:\n\n * DragonFly BSD: <https://man.dragonflybsd.org/?command=connect&section=2>\n * FreeBSD: <https://www.freebsd.org/cgi/man.cgi?query=connect&sektion=2>\n * Linux: <https://man7.org/linux/man-pages/man2/connect.2.html>\n * macOS: <https://developer.apple.com/library/archive/documentation/System/Conceptual/ManPages_iPhoneOS/man2/connect.2.html> (archived, actually for iOS)\n * NetBSD: <https://man.netbsd.org/connect.2>\n * OpenBSD: <https://man.openbsd.org/connect.2>\n * iOS: <https://developer.apple.com/library/archive/documentation/System/Conceptual/ManPages_iPhoneOS/man2/connect.2.html> (archived)\n * illumos: <https://illumos.org/man/3SOCKET/connect>\n * Windows: <https://docs.microsoft.com/en-us/windows/win32/api/winsock2/nf-winsock2-connect>\n\n# Notes\n\nWhen using a non-blocking connect (by setting the socket into\nnon-blocking mode before calling this function), socket option can't be\nset *while connecting*. This will cause errors on Windows. Socket\noptions can be safely set before and after connecting the socket.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["address",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"SockAddr","id":"0:565:1691","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:2865:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:2732:3710-0:633:1775":{"id":"a:2:2732:3710-0:633:1775","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2732:3710","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RecvFlags","id":"0:633:1775","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:11959:35103":{"id":"2:11959:35103","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:222:2721":{"id":"0:222:2721","crate_id":0,"name":"set_unicast_hops_v6","span":{"filename":"src/socket.rs","begin":[1679,4],"end":[1688,5]},"visibility":"public","docs":"Set the value for the `IPV6_UNICAST_HOPS` option on this socket.\n\nSpecifies the hop limit for ipv6 unicast packets","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["hops",{"kind":"primitive","inner":"u32"}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:2865:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:418:2965":{"id":"0:418:2965","crate_id":0,"name":"as_unix","span":{"filename":"src/sys/unix.rs","begin":[746,4],"end":[751,5]},"visibility":"public","docs":"Returns this address as Unix `SocketAddr` if it is an `AF_UNIX` pathname\naddress, otherwise returns `None`.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:40589:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"std::os::unix::net::SocketAddr","id":"1:8218:1641","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:122:2207":{"id":"0:122:2207","crate_id":0,"name":"connect_timeout","span":{"filename":"src/socket.rs","begin":[226,4],"end":[240,5]},"visibility":"public","docs":"Initiate a connection on this socket to the specified address, only\nonly waiting for a certain period of time for the connection to be\nestablished.\n\nUnlike many other methods on `Socket`, this does *not* correspond to a\nsingle C function. It sets the socket to nonblocking mode, connects via\nconnect(2), and then waits for the connection to complete with poll(2)\non Unix and select on Windows. When the connection is complete, the\nsocket is set back to blocking mode. On Unix, this will loop over\n`EINTR` errors.\n\n# Warnings\n\nThe non-blocking state of the socket is overridden by this function -\nit will be returned in blocking mode on success, and in an indeterminate\nstate on failure.\n\nIf the connection request times out, it may still be processing in the\nbackground - a second call to `connect` or `connect_timeout` may fail.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["addr",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"SockAddr","id":"0:565:1691","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],["timeout",{"kind":"resolved_path","inner":{"name":"Duration","id":"2:43360:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:2865:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2234-0:645:1795":{"id":"b:2:2234-0:645:1795","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2675:3548","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2228:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"TcpKeepalive","id":"0:645:1795","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2236:25454"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"a:2:2682:225-0:543:1785":{"id":"a:2:2682:225-0:543:1785","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2682:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"MaybeUninitSlice","id":"0:543:1785","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:2537:1454":{"id":"2:2537:1454","crate_id":2,"name":"try_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:40733:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}},{"type":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"U"},"trait":{"name":"TryFrom","id":"2:2507:234","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:503:684":{"id":"0:503:684","crate_id":0,"name":"from","span":{"filename":"src/sys/unix.rs","begin":[2825,4],"end":[2828,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["sock",{"kind":"resolved_path","inner":{"name":"crate::Socket","id":"0:110:1692","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"OwnedFd","id":"1:4725:2864","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:40:928":{"id":"0:40:928","crate_id":0,"name":"new","span":{"filename":"src/sockaddr.rs","begin":[73,4],"end":[75,5]},"visibility":"public","docs":"Create a `SockAddr` from the underlying storage and its length.\n\n# Safety\n\nCaller must ensure that the address family and length match the type of\nstorage address. For example if `storage.ss_family` is set to `AF_INET`\nthe `storage` must be initialised as `sockaddr_in`, setting the content\nand length appropriately.\n\n# Examples\n\n```\n# fn main() -> std::io::Result<()> {\n# #[cfg(unix)] {\nuse std::io;\nuse std::mem;\nuse std::os::unix::io::AsRawFd;\n\nuse socket2::{SockAddr, Socket, Domain, Type};\n\nlet socket = Socket::new(Domain::IPV4, Type::STREAM, None)?;\n\n// Initialise a `SocketAddr` byte calling `getsockname(2)`.\nlet mut addr_storage: libc::sockaddr_storage = unsafe { mem::zeroed() };\nlet mut len = mem::size_of_val(&addr_storage) as libc::socklen_t;\n\n// The `getsockname(2)` system call will intiliase `storage` for\n// us, setting `len` to the correct length.\nlet res = unsafe {\n    libc::getsockname(\n        socket.as_raw_fd(),\n        (&mut addr_storage as *mut libc::sockaddr_storage).cast(),\n        &mut len,\n    )\n};\nif res == -1 {\n    return Err(io::Error::last_os_error());\n}\n\nlet address = unsafe { SockAddr::new(addr_storage, len) };\n# drop(address);\n# }\n# Ok(())\n# }\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["storage",{"kind":"resolved_path","inner":{"name":"sockaddr_storage","id":"20:1721:1936","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}],["len",{"kind":"resolved_path","inner":{"name":"socklen_t","id":"20:1860:1937","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"SockAddr","id":"0:565:1691","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"0:582:684":{"id":"0:582:684","crate_id":0,"name":"from","span":{"filename":"src/socket.rs","begin":[2038,0],"end":[2038,31]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["socket",{"kind":"resolved_path","inner":{"name":"net::TcpListener","id":"1:3668:2801","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Socket","id":"0:110:1692","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:193:2622":{"id":"0:193:2622","crate_id":0,"name":"multicast_loop_v4","span":{"filename":"src/socket.rs","begin":[1368,4],"end":[1373,5]},"visibility":"public","docs":"Get the value of the `IP_MULTICAST_LOOP` option for this socket.\n\nFor more information about this option, see [`set_multicast_loop_v4`].\n\n[`set_multicast_loop_v4`]: Socket::set_multicast_loop_v4","links":{"Socket::set_multicast_loop_v4":"0:195:2628"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:2865:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"bool"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:606":{"id":"0:606","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[202,26],"end":[202,35]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"2:2678:223","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Domain","id":"0:597:1707","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:542:1781":{"id":"0:542:1781","crate_id":0,"name":"is_truncated","span":{"filename":"src/lib.rs","begin":[367,4],"end":[369,5]},"visibility":"public","docs":"Check if the message contains a truncated datagram.\n\nThis flag is only used for datagram-based sockets,\nnot for stream sockets.\n\nOn Unix this corresponds to the `MSG_TRUNC` flag.\nOn Windows this corresponds to the `WSAEMSGSIZE` error code.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11899:27329":{"id":"2:11899:27329","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"prim@char":"1:11857:411","self::pattern":"2:11565:19914"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11570:13827","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:163:2445":{"id":"0:163:2445","crate_id":0,"name":"set_keepalive","span":{"filename":"src/socket.rs","begin":[866,4],"end":[875,5]},"visibility":"public","docs":"Set value for the `SO_KEEPALIVE` option on this socket.\n\nEnable sending of keep-alive messages on connection-oriented sockets.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["keepalive",{"kind":"primitive","inner":"bool"}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:2865:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11925:35093":{"id":"2:11925:35093","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"2:11565:19914","str::split":"2:11913:27318","prim@char":"1:11857:411","str::split_terminator":"2:11922:35092"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitTerminator","id":"2:42654:13121","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11570:13827","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11570:13827","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11585:19912","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:161:2441":{"id":"0:161:2441","crate_id":0,"name":"keepalive","span":{"filename":"src/socket.rs","begin":[856,4],"end":[861,5]},"visibility":"public","docs":"Get the value of the `SO_KEEPALIVE` option on this socket.\n\nFor more information about this option, see [`set_keepalive`].\n\n[`set_keepalive`]: Socket::set_keepalive","links":{"Socket::set_keepalive":"0:163:2445"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:2865:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"bool"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:113":{"id":"0:113","crate_id":0,"name":null,"span":{"filename":"src/socket.rs","begin":[80,0],"end":[728,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"Socket","id":"0:110:1692","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:117:928","0:118:2165","0:120:2181","0:121:2187","0:122:2207","0:123:2218","0:124:2224","0:125:2227","0:127:2236","0:128:2242","0:129:34","0:130:2255","0:131:2209","0:132:2268","0:133:2274","0:134:2292","0:135:2285","0:136:2310","0:137:2312","0:138:2325","0:139:2331","0:140:2332","0:141:2339","0:142:2340","0:143:2359","0:144:2364","0:145:2369","0:146:2370","0:147:2375","0:148:2376","0:149:2384","0:150:2389","0:151:2390","0:152:2396","0:153:2397"],"negative":false,"synthetic":false,"blanket_impl":null}},"a:2:2682:225-0:645:1795":{"id":"a:2:2682:225-0:645:1795","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2682:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"TcpKeepalive","id":"0:645:1795","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"a:2:2668:217-0:565:1691":{"id":"a:2:2668:217-0:565:1691","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2668:217","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"SockAddr","id":"0:565:1691","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:536:1759":{"id":"0:536:1759","crate_id":0,"name":"MPTCP","span":{"filename":"src/lib.rs","begin":[314,4],"end":[314,61]},"visibility":"public","docs":"Protocol corresponding to `MPTCP`.","links":{},"attrs":["#[cfg(target_os = \"linux\")]"],"deprecation":null,"kind":"assoc_const","inner":{"type":{"kind":"resolved_path","inner":{"name":"Protocol","id":"0:621:1745","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"default":"_"}},"b:2:2527-0:645:1795":{"id":"b:2:2527-0:645:1795","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2500:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"TcpKeepalive","id":"0:645:1795","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2529:684"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:11978:35108":{"id":"2:11978:35108","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:11857:411","self::pattern":"2:11565:19914"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11570:13827","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11570:13827","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11585:19912","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:508":{"id":"0:508","crate_id":0,"name":null,"span":{"filename":"src/sys/unix.rs","begin":[2847,0],"end":[2851,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"FromRawFd","id":"1:4669:2112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"crate::Socket","id":"0:110:1692","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:509:1656"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:644:603":{"id":"0:644:603","crate_id":0,"name":"eq","span":{"filename":"src/lib.rs","begin":[355,26],"end":[355,35]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"RecvFlags","id":"0:633:1775","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:216:2705":{"id":"0:216:2705","crate_id":0,"name":"set_multicast_if_v6","span":{"filename":"src/socket.rs","begin":[1628,4],"end":[1637,5]},"visibility":"public","docs":"Set the value of the `IPV6_MULTICAST_IF` option for this socket.\n\nSpecifies the interface to use for routing multicast packets. Unlike\nipv4, this is generally required in ipv6 contexts where network routing\nprefixes may overlap.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["interface",{"kind":"primitive","inner":"u32"}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:2865:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:620:603":{"id":"0:620:603","crate_id":0,"name":"eq","span":{"filename":"src/lib.rs","begin":[245,26],"end":[245,35]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"Type","id":"0:609:1723","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:48:2009":{"id":"0:48:2009","crate_id":0,"name":"set_length","span":{"filename":"src/sockaddr.rs","begin":[162,4],"end":[164,5]},"visibility":"public","docs":"Set the length of the address.\n\n# Safety\n\nCaller must ensure that the address up to `length` bytes are properly\ninitialised.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["length",{"kind":"resolved_path","inner":{"name":"socklen_t","id":"20:1860:1937","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"0:46:1493":{"id":"0:46:1493","crate_id":0,"name":"unix","span":{"filename":"src/sockaddr.rs","begin":[149,4],"end":[154,5]},"visibility":"public","docs":"Constructs a `SockAddr` with the family `AF_UNIX` and the provided path.\n\nReturns an error if the path is longer than `SUN_LEN`.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["path",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:2865:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"SockAddr","id":"0:565:1691","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"2:2491:75","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Path","id":"1:5168:187","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:205:2663":{"id":"0:205:2663","crate_id":0,"name":"set_recv_tos","span":{"filename":"src/socket.rs","begin":[1493,4],"end":[1502,5]},"visibility":"public","docs":"Set the value of the `IP_RECVTOS` option for this socket.\n\nIf enabled, the `IP_TOS` ancillary message is passed with\nincoming packets. It contains a byte which specifies the\nType of Service/Precedence field of the packet header.","links":{},"attrs":["#[cfg(not(any(target_os = \"aix\", target_os = \"dragonfly\", target_os =\n\"fuchsia\", target_os = \"illumos\", target_os = \"netbsd\", target_os = \"openbsd\",\ntarget_os = \"redox\", target_os = \"solaris\", target_os = \"haiku\", target_os =\n\"nto\",)))]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["recv_tos",{"kind":"primitive","inner":"bool"}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:2865:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:608:603":{"id":"0:608:603","crate_id":0,"name":"eq","span":{"filename":"src/lib.rs","begin":[202,26],"end":[202,35]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"Domain","id":"0:597:1707","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:498":{"id":"0:498","crate_id":0,"name":null,"span":{"filename":"src/sys/unix.rs","begin":[2809,0],"end":[2814,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"AsFd","id":"1:4748:2805","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"crate::Socket","id":"0:110:1692","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:499:2852"],"negative":false,"synthetic":false,"blanket_impl":null}},"a:2:2732:3710-0:110:1692":{"id":"a:2:2732:3710-0:110:1692","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2732:3710","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Socket","id":"0:110:1692","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:11872:2053":{"id":"2:11872:2053","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\nBasic usage:\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:11133:19915"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11952:35099":{"id":"2:11952:35099","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:59:2049":{"id":"0:59:2049","crate_id":0,"name":"as_socket_ipv4","span":{"filename":"src/sockaddr.rs","begin":[248,4],"end":[253,5]},"visibility":"public","docs":"Returns this address as a [`SocketAddrV4`] if it is in the `AF_INET`\nfamily.","links":{"`SocketAddrV4`":"2:40563:1925"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:40589:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"SocketAddrV4","id":"2:40563:1925","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:130:2255":{"id":"0:130:2255","crate_id":0,"name":"try_clone","span":{"filename":"src/socket.rs","begin":[357,4],"end":[359,5]},"visibility":"public","docs":"Creates a new independently owned handle to the underlying socket.\n\n# Notes\n\nOn Unix this uses `F_DUPFD_CLOEXEC` and thus sets the `FD_CLOEXEC` on\nthe returned socket.\n\nOn Windows this uses `WSA_FLAG_NO_HANDLE_INHERIT` setting inheriting to\nfalse.\n\nOn Windows this can **not** be used function cannot be used on a\nQOS-enabled socket, see\n<https://docs.microsoft.com/en-us/windows/win32/api/winsock2/nf-winsock2-wsaduplicatesocketw>.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:2865:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Socket","id":"0:110:1692","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:169:2478":{"id":"0:169:2478","crate_id":0,"name":"recv_buffer_size","span":{"filename":"src/socket.rs","begin":[946,4],"end":[951,5]},"visibility":"public","docs":"Get value for the `SO_RCVBUF` option on this socket.\n\nFor more information about this option, see [`set_recv_buffer_size`].\n\n[`set_recv_buffer_size`]: Socket::set_recv_buffer_size","links":{"Socket::set_recv_buffer_size":"0:171:2483"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:2865:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2523-0:110:1692":{"id":"b:2:2523-0:110:1692","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2500:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2497:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Socket","id":"0:110:1692","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2526:2055"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:559:545":{"id":"0:559:545","crate_id":0,"name":"deref_mut","span":{"filename":"src/lib.rs","begin":[404,4],"end":[406,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"resolved_path","inner":{"name":"MaybeUninit","id":"2:29935:1639","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"u8"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:560":{"id":"0:560","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[433,0],"end":[564,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"TcpKeepalive","id":"0:645:1795","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:561:928","0:562:1810","0:563:1819"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:547":{"id":"0:547","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[378,0],"end":[382,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:9051:111","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"MaybeUninitSlice","id":"0:543:1785","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["0:549:658"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:588:684":{"id":"0:588:684","crate_id":0,"name":"from","span":{"filename":"src/socket.rs","begin":[2041,0],"end":[2041,31]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["socket",{"kind":"resolved_path","inner":{"name":"Socket","id":"0:110:1692","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"net::TcpListener","id":"1:3668:2801","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11931:27326":{"id":"2:11931:27326","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"1:11857:411","str::splitn":"2:11928:27324","self::pattern":"2:11565:19914"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitN","id":"2:42708:9676","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11570:13827","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11570:13827","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11585:19912","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:65:684":{"id":"0:65:684","crate_id":0,"name":"from","span":{"filename":"src/sockaddr.rs","begin":[283,4],"end":[295,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["addr",{"kind":"resolved_path","inner":{"name":"SocketAddrV4","id":"2:40563:1925","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"SockAddr","id":"0:565:1691","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11894:35091":{"id":"2:11894:35091","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"LinesAny","id":"2:42850:13129","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:210:2685":{"id":"0:210:2685","crate_id":0,"name":"leave_multicast_v6","span":{"filename":"src/socket.rs","begin":[1567,4],"end":[1581,5]},"visibility":"public","docs":"Leave a multicast group using `IPV6_DROP_MEMBERSHIP` option on this socket.\n\nSome OSs use `IPV6_LEAVE_GROUP` for this option.\n\nFor more information about this option, see [`join_multicast_v6`].\n\n[`join_multicast_v6`]: Socket::join_multicast_v6","links":{"Socket::join_multicast_v6":"0:209:2675"},"attrs":["#[cfg(not(target_os = \"nto\"))]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["multiaddr",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"Ipv6Addr","id":"2:40438:2079","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],["interface",{"kind":"primitive","inner":"u32"}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:2865:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11922:35092":{"id":"2:11922:35092","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"2:11565:19914","str::split":"2:11913:27318","prim@char":"1:11857:411","`DoubleEndedIterator`":"2:7174:120","str::rsplit_terminator":"2:11925:35093"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitTerminator","id":"2:42636:13120","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11570:13827","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:504":{"id":"0:504","crate_id":0,"name":null,"span":{"filename":"src/sys/unix.rs","begin":[2832,0],"end":[2836,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"IntoRawFd","id":"1:4671:2113","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"crate::Socket","id":"0:110:1692","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:505:1657"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:2:2234-0:565:1691":{"id":"b:2:2234-0:565:1691","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2675:3548","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2228:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"SockAddr","id":"0:565:1691","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2236:25454"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:141:2339":{"id":"0:141:2339","crate_id":0,"name":"recv_from_vectored","span":{"filename":"src/socket.rs","begin":[559,4],"end":[564,5]},"visibility":"public","docs":"Receives data from the socket. Returns the amount of bytes read, the\n[`RecvFlags`] and the remote address from the data is coming. Unlike\n[`recv_from`] this allows passing multiple buffers.\n\nAdditional documentation can be found in manual of the OS:\n\n * DragonFly BSD: <https://man.dragonflybsd.org/?command=recvmsg&section=2>\n * FreeBSD: <https://www.freebsd.org/cgi/man.cgi?query=recvmsg&sektion=2>\n * Linux: <https://man7.org/linux/man-pages/man2/recvmsg.2.html>\n * macOS: <https://developer.apple.com/library/archive/documentation/System/Conceptual/ManPages_iPhoneOS/man2/recvmsg.2.html> (archived, actually for iOS)\n * NetBSD: <https://man.netbsd.org/recvmsg.2>\n * OpenBSD: <https://man.openbsd.org/recvmsg.2>\n * iOS: <https://developer.apple.com/library/archive/documentation/System/Conceptual/ManPages_iPhoneOS/man2/recvmsg.2.html> (archived)\n * illumos: <https://illumos.org/man/3SOCKET/recvmsg>\n * Windows: <https://docs.microsoft.com/en-us/windows/win32/api/winsock2/nf-winsock2-recvmsg>\n\n[`recv_from`]: Socket::recv_from\n\n# Safety\n\n`recv_from_vectored` makes the same safety guarantees regarding `bufs`\nas [`recv_vectored`].\n\n[`recv_vectored`]: Socket::recv_vectored","links":{"Socket::recv_vectored":"0:136:2310","`RecvFlags`":"0:633:1775","Socket::recv_from":"0:139:2331"},"attrs":["#[cfg(not(target_os = \"redox\"))]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["bufs",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"resolved_path","inner":{"name":"MaybeUninitSlice","id":"0:543:1785","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:2865:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"primitive","inner":"usize"},{"kind":"resolved_path","inner":{"name":"RecvFlags","id":"0:633:1775","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},{"kind":"resolved_path","inner":{"name":"SockAddr","id":"0:565:1691","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:147:2375":{"id":"0:147:2375","crate_id":0,"name":"send_vectored","span":{"filename":"src/socket.rs","begin":[652,4],"end":[654,5]},"visibility":"public","docs":"Send data to the connected peer. Returns the amount of bytes written.","links":{},"attrs":["#[cfg(not(target_os = \"redox\"))]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["bufs",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"resolved_path","inner":{"name":"IoSlice","id":"1:8101:2108","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:2865:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:517:1712":{"id":"0:517:1712","crate_id":0,"name":"IPV6","span":{"filename":"src/lib.rs","begin":[210,4],"end":[210,51]},"visibility":"public","docs":"Domain for IPv6 communication, corresponding to `AF_INET6`.","links":{},"attrs":[],"deprecation":null,"kind":"assoc_const","inner":{"type":{"kind":"resolved_path","inner":{"name":"Domain","id":"0:597:1707","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"default":"_"}},"0:636":{"id":"0:636","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[355,9],"end":[355,13]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"2:2680:108","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RecvFlags","id":"0:633:1775","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:133:2274":{"id":"0:133:2274","crate_id":0,"name":"recv","span":{"filename":"src/socket.rs","begin":[417,4],"end":[419,5]},"visibility":"public","docs":"Receives data on the socket from the remote address to which it is\nconnected.\n\nThe [`connect`] method will connect this socket to a remote address.\nThis method might fail if the socket is not connected.\n\nAdditional documentation can be found in manual of the OS:\n\n * DragonFly BSD: <https://man.dragonflybsd.org/?command=recv&section=2>\n * FreeBSD: <https://www.freebsd.org/cgi/man.cgi?query=recv&sektion=2>\n * Linux: <https://man7.org/linux/man-pages/man2/recv.2.html>\n * macOS: <https://developer.apple.com/library/archive/documentation/System/Conceptual/ManPages_iPhoneOS/man2/recv.2.html> (archived, actually for iOS)\n * NetBSD: <https://man.netbsd.org/recv.2>\n * OpenBSD: <https://man.openbsd.org/recv.2>\n * iOS: <https://developer.apple.com/library/archive/documentation/System/Conceptual/ManPages_iPhoneOS/man2/recv.2.html> (archived)\n * illumos: <https://illumos.org/man/3SOCKET/recv>\n * Windows: <https://docs.microsoft.com/en-us/windows/win32/api/winsock2/nf-winsock2-recv>\n\n[`connect`]: Socket::connect\n\n# Safety\n\nNormally casting a `&mut [u8]` to `&mut [MaybeUninit<u8>]` would be\nunsound, as that allows us to write uninitialised bytes to the buffer.\nHowever this implementation promises to not write uninitialised bytes to\nthe `buf`fer and passes it directly to `recv(2)` system call. This\npromise ensures that this function can be called using a `buf`fer of\ntype `&mut [u8]`.\n\nNote that the [`io::Read::read`] implementation calls this function with\na `buf`fer of type `&mut [u8]`, allowing initialised buffers to be used\nwithout using `unsafe`.","links":{"`io::Read::read`":"1:3372:2796","Socket::connect":"0:121:2187"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"resolved_path","inner":{"name":"MaybeUninit","id":"2:29935:1639","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"u8"}}],"bindings":[]}}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:2865:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11882:27287":{"id":"2:11882:27287","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":["#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:9746:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9746:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"0:188:2594":{"id":"0:188:2594","crate_id":0,"name":"leave_multicast_v4_n","span":{"filename":"src/socket.rs","begin":[1249,4],"end":[1263,5]},"visibility":"public","docs":"Leave a multicast group using `IP_DROP_MEMBERSHIP` option on this socket.\n\nFor more information about this option, see [`join_multicast_v4_n`].\n\n[`join_multicast_v4_n`]: Socket::join_multicast_v4_n","links":{"Socket::join_multicast_v4_n":"0:187:2589"},"attrs":["#[cfg(not(any(target_os = \"aix\", target_os = \"haiku\", target_os = \"illumos\",\ntarget_os = \"netbsd\", target_os = \"openbsd\", target_os = \"redox\", target_os =\n\"solaris\", target_os = \"nto\",)))]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["multiaddr",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"Ipv4Addr","id":"2:40421:2072","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],["interface",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"InterfaceIndexOrAddress","id":"0:570:1699","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:2865:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:203:2654":{"id":"0:203:2654","crate_id":0,"name":"tos","span":{"filename":"src/socket.rs","begin":[1470,4],"end":[1474,5]},"visibility":"public","docs":"Get the value of the `IP_TOS` option for this socket.\n\nFor more information about this option, see [`set_tos`].\n\nNOTE: <https://docs.microsoft.com/en-us/windows/win32/winsock/ipproto-ip-socket-options>\ndocuments that not all versions of windows support `IP_TOS`.\n\n[`set_tos`]: Socket::set_tos","links":{"Socket::set_tos":"0:202:2653"},"attrs":["#[cfg(not(any(target_os = \"fuchsia\", target_os = \"redox\", target_os =\n\"solaris\", target_os = \"illumos\",)))]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:2865:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"u32"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:217:2709":{"id":"0:217:2709","crate_id":0,"name":"multicast_loop_v6","span":{"filename":"src/socket.rs","begin":[1644,4],"end":[1649,5]},"visibility":"public","docs":"Get the value of the `IPV6_MULTICAST_LOOP` option for this socket.\n\nFor more information about this option, see [`set_multicast_loop_v6`].\n\n[`set_multicast_loop_v6`]: Socket::set_multicast_loop_v6","links":{"Socket::set_multicast_loop_v6":"0:219:2715"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:2865:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"bool"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:253:658":{"id":"0:253:658","crate_id":0,"name":"fmt","span":{"filename":"src/socket.rs","begin":[2028,4],"end":[2034,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"fmt::Formatter","id":"2:9010:131","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"fmt::Result","id":"2:8999:207","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:531":{"id":"0:531","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[299,0],"end":[336,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"Protocol","id":"0:621:1745","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:532:1747","0:533:1750","0:534:1753","0:535:1756","0:536:1759"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:640":{"id":"0:640","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[355,22],"end":[355,24]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"2:2302:124","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RecvFlags","id":"0:633:1775","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"2:11969:27331":{"id":"2:11969:27331","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:11857:411","self::pattern":"2:11565:19914"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["suffix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:40589:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11570:13827","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11570:13827","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11585:19912","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:639":{"id":"0:639","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[355,22],"end":[355,24]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralEq","id":"2:2679:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RecvFlags","id":"0:633:1775","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"a:2:8186:9224-0:570:1699":{"id":"a:2:8186:9224-0:570:1699","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:8186:9224","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"InterfaceIndexOrAddress","id":"0:570:1699","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:51:801":{"id":"0:51:801","crate_id":0,"name":"len","span":{"filename":"src/sockaddr.rs","begin":[177,4],"end":[179,5]},"visibility":"public","docs":"Returns the size of this address in bytes.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"socklen_t","id":"20:1860:1937","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:70":{"id":"0:70","crate_id":0,"name":null,"span":{"filename":"src/sockaddr.rs","begin":[348,0],"end":[352,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"2:2297:185","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"SockAddr","id":"0:565:1691","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"SockAddr","id":"0:565:1691","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:71:603"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:63:684":{"id":"0:63:684","crate_id":0,"name":"from","span":{"filename":"src/sockaddr.rs","begin":[274,4],"end":[279,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["addr",{"kind":"resolved_path","inner":{"name":"SocketAddr","id":"2:40540:1641","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"SockAddr","id":"0:565:1691","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:609:1723":{"id":"0:609:1723","crate_id":0,"name":"Type","span":{"filename":"src/lib.rs","begin":[246,0],"end":[246,23]},"visibility":"public","docs":"Specification of communication semantics on a socket.\n\nThis is a newtype wrapper around an integer which provides a nicer API in\naddition to an injection point for documentation. Convenience constants such\nas [`Type::STREAM`], [`Type::DGRAM`], etc, are provided to avoid reaching\ninto libc for various constants.\n\nThis type is freely interconvertible with C's `int` type, however, if a raw\nvalue needs to be provided.","links":{"`Type::DGRAM`":"0:526:1730","`Type::STREAM`":"0:525:1726"},"attrs":[],"deprecation":null,"kind":"struct","inner":{"kind":{"tuple":[null]},"generics":{"params":[],"where_predicates":[]},"impls":["0:524","a:2:8187:9223-0:609:1723","a:2:2682:225-0:609:1723","a:2:8186:9224-0:609:1723","a:2:2732:3710-0:609:1723","a:2:2668:217-0:609:1723","b:2:2231-0:609:1723","b:2:3327-0:609:1723","b:2:2527-0:609:1723","b:2:2538-0:609:1723","b:2:2234-0:609:1723","b:2:2533-0:609:1723","b:2:2523-0:609:1723","b:5:672-0:609:1723","0:615","0:616","0:612","0:529","0:619","0:618","0:613","0:527","0:593"]}},"b:2:2533-0:633:1775":{"id":"b:2:2533-0:633:1775","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2507:234","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2503:235","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RecvFlags","id":"0:633:1775","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2536:127","2:2537:1454"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:650:658":{"id":"0:650:658","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[412,9],"end":[412,14]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Formatter","id":"2:9010:131","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Result","id":"2:8999:207","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:270:227":{"id":"0:270:227","crate_id":0,"name":"Target","span":{"filename":"src/sockref.rs","begin":[72,4],"end":[72,25]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"resolved_path","inner":{"name":"Socket","id":"0:110:1692","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"b:2:2527-0:543:1785":{"id":"b:2:2527-0:543:1785","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2500:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"MaybeUninitSlice","id":"0:543:1785","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:2529:684"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:594:658":{"id":"0:594:658","crate_id":0,"name":"fmt","span":{"filename":"src/sys/unix.rs","begin":[466,0],"end":[499,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"std::fmt::Formatter","id":"2:9010:131","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"std::fmt::Result","id":"2:8999:207","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:2682:225-0:609:1723":{"id":"a:2:2682:225-0:609:1723","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2682:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Type","id":"0:609:1723","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"b:5:672-0:621:1745":{"id":"b:5:672-0:621:1745","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2248:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:668:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Protocol","id":"0:621:1745","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:674:9634","5:675:9635","5:676:9636"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:11884:35089":{"id":"2:11884:35089","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"1:11863:1378","str::slice_mut_unchecked":"2:11885:35090","crate::ops::Index":"2:2989:2413"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"0:630":{"id":"0:630","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[296,26],"end":[296,35]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"2:2678:223","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Protocol","id":"0:621:1745","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"5:5315":{"id":"5:5315","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["5:5316:35759","5:5317:3542","5:5320:35760","5:5323:35761","5:5331:35762","5:5332:35763","5:5333:3696","5:5334:27093","5:5335:27092"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:11892:31959":{"id":"2:11892:31959","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"2:11891:31947"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitAsciiWhitespace","id":"2:42869:13131","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:8186:9224-0:543:1785":{"id":"a:2:8186:9224-0:543:1785","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:8186:9224","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"MaybeUninitSlice","id":"0:543:1785","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}},"0:125:2227":{"id":"0:125:2227","crate_id":0,"name":"accept_raw","span":{"filename":"src/socket.rs","begin":[303,4],"end":[305,5]},"visibility":"public","docs":"Accept a new incoming connection from this listener.\n\nThis function directly corresponds to the `accept(2)` function on\nWindows and Unix.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:2865:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"resolved_path","inner":{"name":"Socket","id":"0:110:1692","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},{"kind":"resolved_path","inner":{"name":"SockAddr","id":"0:565:1691","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:144:2364":{"id":"0:144:2364","crate_id":0,"name":"peek_sender","span":{"filename":"src/socket.rs","begin":[626,4],"end":[628,5]},"visibility":"public","docs":"Retrieve the sender for the data at the head of the receive queue.\n\nThis is equivalent to calling [`peek_from`] with a zero-sized buffer,\nbut suppresses the `WSAEMSGSIZE` error on Windows.\n\n[`peek_from`]: Socket::peek_from","links":{"Socket::peek_from":"0:143:2359"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:2865:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"SockAddr","id":"0:565:1691","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:56:2029":{"id":"0:56:2029","crate_id":0,"name":"is_unix","span":{"filename":"src/sockaddr.rs","begin":[204,4],"end":[206,5]},"visibility":"public","docs":"Returns true if this address is of a unix socket (for local interprocess communication),\ni.e. it is from the `AF_UNIX` family, false otherwise.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2234-0:609:1723":{"id":"b:2:2234-0:609:1723","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2675:3548","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2228:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Type","id":"0:609:1723","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2236:25454"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:2523-0:565:1691":{"id":"b:2:2523-0:565:1691","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2500:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2497:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"SockAddr","id":"0:565:1691","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2526:2055"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:11866:35085":{"id":"2:11866:35085","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]","#[rustc_const_unstable(feature = \"const_is_char_boundary\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:243":{"id":"0:243","crate_id":0,"name":null,"span":{"filename":"src/socket.rs","begin":[1997,0],"end":[2010,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["is_write_vectored","write_fmt","write_all_vectored","by_ref","write_all","write_vectored"],"trait":{"name":"Write","id":"1:3428:2107","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Socket","id":"0:110:1692","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:244:1652","0:245:2798","0:246:2799"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:2:2231-0:621:1745":{"id":"b:2:2231-0:621:1745","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2675:3548","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2225:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Protocol","id":"0:621:1745","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2233:3502"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:535:1756":{"id":"0:535:1756","crate_id":0,"name":"UDP","span":{"filename":"src/lib.rs","begin":[310,4],"end":[310,57]},"visibility":"public","docs":"Protocol corresponding to `UDP`.","links":{},"attrs":[],"deprecation":null,"kind":"assoc_const","inner":{"type":{"kind":"resolved_path","inner":{"name":"Protocol","id":"0:621:1745","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"default":"_"}},"0:137:2312":{"id":"0:137:2312","crate_id":0,"name":"recv_vectored_with_flags","span":{"filename":"src/socket.rs","begin":[493,4],"end":[499,5]},"visibility":"public","docs":"Identical to [`recv_vectored`] but allows for specification of arbitrary\nflags to the underlying `recvmsg`/`WSARecv` call.\n\n[`recv_vectored`]: Socket::recv_vectored\n\n# Safety\n\n`recv_from_vectored` makes the same safety guarantees regarding `bufs`\nas [`recv_vectored`].\n\n[`recv_vectored`]: Socket::recv_vectored","links":{"Socket::recv_vectored":"0:136:2310"},"attrs":["#[cfg(not(target_os = \"redox\"))]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["bufs",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"resolved_path","inner":{"name":"MaybeUninitSlice","id":"0:543:1785","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}}],["flags",{"kind":"resolved_path","inner":{"name":"c_int","id":"20:43:1690","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:2865:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"primitive","inner":"usize"},{"kind":"resolved_path","inner":{"name":"RecvFlags","id":"0:633:1775","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:157:2423":{"id":"0:157:2423","crate_id":0,"name":"broadcast","span":{"filename":"src/socket.rs","begin":[816,4],"end":[821,5]},"visibility":"public","docs":"Get the value of the `SO_BROADCAST` option for this socket.\n\nFor more information about this option, see [`set_broadcast`].\n\n[`set_broadcast`]: Socket::set_broadcast","links":{"Socket::set_broadcast":"0:159:2428"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:2865:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"bool"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:234":{"id":"0:234","crate_id":0,"name":null,"span":{"filename":"src/socket.rs","begin":[1963,0],"end":[1980,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["read_vectored","read_buf_exact","read_to_end","by_ref","chain","read_exact","take","read_to_string","bytes","read_buf","is_read_vectored"],"trait":{"name":"Read","id":"1:3371:2106","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Socket","id":"0:110:1692","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:235:2796","0:236:2797"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:223:2725":{"id":"0:223:2725","crate_id":0,"name":"only_v6","span":{"filename":"src/socket.rs","begin":[1695,4],"end":[1700,5]},"visibility":"public","docs":"Get the value of the `IPV6_V6ONLY` option for this socket.\n\nFor more information about this option, see [`set_only_v6`].\n\n[`set_only_v6`]: Socket::set_only_v6","links":{"Socket::set_only_v6":"0:225:2733"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:2865:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"bool"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11889:13143":{"id":"2:11889:13143","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the last character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:11857:411"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"CharIndices","id":"2:42562:13115","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:149:2384":{"id":"0:149:2384","crate_id":0,"name":"send_out_of_band","span":{"filename":"src/socket.rs","begin":[679,4],"end":[681,5]},"visibility":"public","docs":"Sends out-of-band (OOB) data on the socket to connected peer\nby setting the `MSG_OOB` flag for this call.\n\nFor more information, see [`send`], [`out_of_band_inline`].\n\n[`send`]: Socket::send\n[`out_of_band_inline`]: Socket::out_of_band_inline","links":{"Socket::send":"0:145:2369","Socket::out_of_band_inline":"0:166:2466"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:2865:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:110:1692":{"id":"0:110:1692","crate_id":0,"name":"Socket","span":{"filename":"src/socket.rs","begin":[73,0],"end":[75,1]},"visibility":"public","docs":"Owned wrapper around a system socket.\n\nThis type simply wraps an instance of a file descriptor (`c_int`) on Unix\nand an instance of `SOCKET` on Windows. This is the main type exported by\nthis crate and is intended to mirror the raw semantics of sockets on\nplatforms as closely as possible. Almost all methods correspond to\nprecisely one libc or OS API call which is essentially just a \"Rustic\ntranslation\" of what's below.\n\n## Converting to and from other types\n\nThis type can be freely converted into the network primitives provided by\nthe standard library, such as [`TcpStream`] or [`UdpSocket`], using the\n[`From`] trait, see the example below.\n\n[`TcpStream`]: std::net::TcpStream\n[`UdpSocket`]: std::net::UdpSocket\n\n# Notes\n\nSome methods that set options on `Socket` require two system calls to set\nthere options without overwriting previously set options. We do this by\nfirst getting the current settings, applying the desired changes and than\nupdating the settings. This means that the operation is **not** atomic. This\ncan lead to a data race when two threads are changing options in parallel.\n\n# Examples\n```no_run\n# fn main() -> std::io::Result<()> {\nuse std::net::{SocketAddr, TcpListener};\nuse socket2::{Socket, Domain, Type};\n\n// create a TCP listener\nlet socket = Socket::new(Domain::IPV6, Type::STREAM, None)?;\n\nlet address: SocketAddr = \"[::1]:12345\".parse().unwrap();\nlet address = address.into();\nsocket.bind(&address)?;\nsocket.listen(128)?;\n\nlet listener: TcpListener = socket.into();\n// ...\n# drop(listener);\n# Ok(()) }\n```","links":{"`From`":"2:2500:132","std::net::UdpSocket":"1:3770:2802","std::net::TcpStream":"1:3665:2144"},"attrs":[],"deprecation":null,"kind":"struct","inner":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["0:113","0:156","0:184","0:208","0:229","a:2:8187:9223-0:110:1692","a:2:2682:225-0:110:1692","a:2:8186:9224-0:110:1692","a:2:2732:3710-0:110:1692","a:2:2668:217-0:110:1692","b:2:2231-0:110:1692","b:2:3327-0:110:1692","b:2:2527-0:110:1692","b:2:2538-0:110:1692","b:2:2234-0:110:1692","b:2:2533-0:110:1692","b:2:2523-0:110:1692","0:498","0:243","0:508","0:583","0:579","0:506","0:581","0:234","0:247","0:238","0:502","0:587","0:500","0:589","0:252","0:585","0:504"]}},"0:52:311":{"id":"0:52:311","crate_id":0,"name":"as_ptr","span":{"filename":"src/sockaddr.rs","begin":[182,4],"end":[184,5]},"visibility":"public","docs":"Returns a raw pointer to the address.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"sockaddr","id":"20:1532:1684","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:64":{"id":"0:64","crate_id":0,"name":null,"span":{"filename":"src/sockaddr.rs","begin":[282,0],"end":[296,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2500:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"SocketAddrV4","id":"2:40563:1925","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"SockAddr","id":"0:565:1691","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:65:684"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:625":{"id":"0:625","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[296,15],"end":[296,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2248:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Protocol","id":"0:621:1745","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:626:415"],"negative":false,"synthetic":false,"blanket_impl":null}},"5:5323:35761":{"id":"5:5323:35761","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7180:221"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7180:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:229":{"id":"0:229","crate_id":0,"name":null,"span":{"filename":"src/socket.rs","begin":[1775,0],"end":[1961,1]},"visibility":"default","docs":"Socket options for TCP sockets, get/set using `IPPROTO_TCP`.\n\nAdditional documentation can be found in documentation of the OS.\n* Linux: <https://man7.org/linux/man-pages/man7/tcp.7.html>\n* Windows: <https://docs.microsoft.com/en-us/windows/win32/winsock/ipproto-tcp-socket-options>","links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"Socket","id":"0:110:1692","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:230:2782","0:231:2787","0:233:2795"],"negative":false,"synthetic":false,"blanket_impl":null}},"a:2:8187:9223-0:645:1795":{"id":"a:2:8187:9223-0:645:1795","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:8187:9223","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"TcpKeepalive","id":"0:645:1795","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:244:1652":{"id":"0:244:1652","crate_id":0,"name":"write","span":{"filename":"src/socket.rs","begin":[1998,4],"end":[2000,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:2865:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:50:2015":{"id":"0:50:2015","crate_id":0,"name":"domain","span":{"filename":"src/sockaddr.rs","begin":[172,4],"end":[174,5]},"visibility":"public","docs":"Returns this address's `Domain`.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Domain","id":"0:597:1707","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2523-0:570:1699":{"id":"b:2:2523-0:570:1699","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2500:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2497:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"InterfaceIndexOrAddress","id":"0:570:1699","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2526:2055"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:525:1726":{"id":"0:525:1726","crate_id":0,"name":"STREAM","span":{"filename":"src/lib.rs","begin":[252,4],"end":[252,52]},"visibility":"public","docs":"Type corresponding to `SOCK_STREAM`.\n\nUsed for protocols such as TCP.","links":{},"attrs":[],"deprecation":null,"kind":"assoc_const","inner":{"type":{"kind":"resolved_path","inner":{"name":"Type","id":"0:609:1723","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"default":"_"}},"a:2:8186:9224-0:565:1691":{"id":"a:2:8186:9224-0:565:1691","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:8186:9224","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"SockAddr","id":"0:565:1691","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:419:2076":{"id":"0:419:2076","crate_id":0,"name":"as_pathname","span":{"filename":"src/sys/unix.rs","begin":[755,4],"end":[762,5]},"visibility":"public","docs":"Returns this address as a `Path` reference if it is an `AF_UNIX`\npathname address, otherwise returns `None`.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:40589:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"Path","id":"1:5168:187","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:164:2449":{"id":"0:164:2449","crate_id":0,"name":"linger","span":{"filename":"src/socket.rs","begin":[882,4],"end":[887,5]},"visibility":"public","docs":"Get the value of the `SO_LINGER` option on this socket.\n\nFor more information about this option, see [`set_linger`].\n\n[`set_linger`]: Socket::set_linger","links":{"Socket::set_linger":"0:165:2461"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:2865:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Option","id":"2:40589:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Duration","id":"2:43360:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:249:1652":{"id":"0:249:1652","crate_id":0,"name":"write","span":{"filename":"src/socket.rs","begin":[2013,4],"end":[2015,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:2865:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:252":{"id":"0:252","crate_id":0,"name":null,"span":{"filename":"src/socket.rs","begin":[2027,0],"end":[2035,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:9051:111","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Socket","id":"0:110:1692","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:253:658"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:637":{"id":"0:637","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[355,15],"end":[355,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2248:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RecvFlags","id":"0:633:1775","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:638:415"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:520":{"id":"0:520","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[224,0],"end":[228,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2500:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"i32"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Domain","id":"0:597:1707","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:521:684"],"negative":false,"synthetic":false,"blanket_impl":null}},"5:5332:35763":{"id":"5:5332:35763","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:277:9151","`String`":"5:7180:221"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:277:9151","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:6931:9654","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7180:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:8187:9223-0:597:1707":{"id":"a:2:8187:9223-0:597:1707","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:8187:9223","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Domain","id":"0:597:1707","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:62":{"id":"0:62","crate_id":0,"name":null,"span":{"filename":"src/sockaddr.rs","begin":[273,0],"end":[280,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2500:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"SocketAddr","id":"2:40540:1641","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"SockAddr","id":"0:565:1691","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:63:684"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:3329:1467":{"id":"2:3329:1467","crate_id":2,"name":"type_id","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"TypeId","id":"2:38928:12559","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:250:2798":{"id":"0:250:2798","crate_id":0,"name":"write_vectored","span":{"filename":"src/socket.rs","begin":[2018,4],"end":[2020,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(target_os = \"redox\"))]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["bufs",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"resolved_path","inner":{"name":"IoSlice","id":"1:8101:2108","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:2865:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:565:1691":{"id":"0:565:1691","crate_id":0,"name":"SockAddr","span":{"filename":"src/sockaddr.rs","begin":[21,0],"end":[24,1]},"visibility":"public","docs":"The address of a socket.\n\n`SockAddr`s may be constructed directly to and from the standard library\n[`SocketAddr`], [`SocketAddrV4`], and [`SocketAddrV6`] types.","links":{"`SocketAddr`":"2:40540:1641","`SocketAddrV4`":"2:40563:1925","`SocketAddrV6`":"2:40575:1926"},"attrs":[],"deprecation":null,"kind":"struct","inner":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["0:39","0:411","a:2:8187:9223-0:565:1691","a:2:2682:225-0:565:1691","a:2:8186:9224-0:565:1691","a:2:2732:3710-0:565:1691","a:2:2668:217-0:565:1691","b:2:2231-0:565:1691","b:2:3327-0:565:1691","b:2:2527-0:565:1691","b:2:2538-0:565:1691","b:2:2234-0:565:1691","b:2:2533-0:565:1691","b:2:2523-0:565:1691","b:5:672-0:565:1691","0:568","0:72","0:73","0:64","0:66","0:70","0:68","0:62"]}},"2:11985:27091":{"id":"2:11985:27091","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2533-0:645:1795":{"id":"b:2:2533-0:645:1795","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2507:234","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2503:235","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"TcpKeepalive","id":"0:645:1795","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2536:127","2:2537:1454"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:513-0:264:1693":{"id":"0:513-0:264:1693","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[182,0],"end":[182,25]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"sockref::SockRef","name":"SockRef","id":"0:264:1693","glob":false}},"b:2:2538-0:597:1707":{"id":"b:2:2538-0:597:1707","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2497:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2507:234","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Domain","id":"0:597:1707","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2541:127","2:2542:1453"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"a:2:8186:9224-0:597:1707":{"id":"a:2:8186:9224-0:597:1707","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:8186:9224","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Domain","id":"0:597:1707","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:11895:31952":{"id":"2:11895:31952","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EncodeUtf16","id":"2:42878:13132","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:245:2798":{"id":"0:245:2798","crate_id":0,"name":"write_vectored","span":{"filename":"src/socket.rs","begin":[2003,4],"end":[2005,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(target_os = \"redox\"))]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["bufs",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"resolved_path","inner":{"name":"IoSlice","id":"1:8101:2108","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:2865:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3327-0:609:1723":{"id":"b:2:3327-0:609:1723","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2675:3548","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3325:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Type","id":"0:609:1723","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3329:1467"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:160:2433":{"id":"0:160:2433","crate_id":0,"name":"take_error","span":{"filename":"src/socket.rs","begin":[843,4],"end":[849,5]},"visibility":"public","docs":"Get the value of the `SO_ERROR` option on this socket.\n\nThis will retrieve the stored error in the underlying socket, clearing\nthe field in the process. This can be useful for checking errors between\ncalls.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:2865:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Option","id":"2:40589:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"io::Error","id":"1:2867:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2527-0:264:1693":{"id":"b:2:2527-0:264:1693","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2500:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"SockRef","id":"0:264:1693","args":{"angle_bracketed":{"args":[{"lifetime":"'s"}],"bindings":[]}}}},"items":["2:2529:684"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:600":{"id":"0:600","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[202,9],"end":[202,13]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"2:2680:108","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Domain","id":"0:597:1707","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"b:2:3327-0:621:1745":{"id":"b:2:3327-0:621:1745","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2675:3548","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3325:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Protocol","id":"0:621:1745","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3329:1467"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:394":{"id":"0:394","crate_id":0,"name":null,"span":{"filename":"src/sys/unix.rs","begin":[553,0],"end":[561,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(target_os = \"redox\"))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:9051:111","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RecvFlags","id":"0:633:1775","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:395:658"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:587":{"id":"0:587","crate_id":0,"name":null,"span":{"filename":"src/socket.rs","begin":[2041,0],"end":[2041,31]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2500:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Socket","id":"0:110:1692","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"net::TcpListener","id":"1:3668:2801","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:588:684"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:11963:35105":{"id":"2:11963:35105","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:11857:411","self::pattern":"2:11565:19914"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11570:13827","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:124:2224":{"id":"0:124:2224","crate_id":0,"name":"accept","span":{"filename":"src/socket.rs","begin":[263,4],"end":[297,5]},"visibility":"public","docs":"Accept a new incoming connection from this listener.\n\nThis function uses `accept4(2)` on platforms that support it and\n`accept(2)` platforms that do not.\n\nThis function sets the same flags as in done for [`Socket::new`],\n[`Socket::accept_raw`] can be used if you don't want to set those flags.\n\nAdditional documentation can be found in manual of the OS:\n\n * DragonFly BSD: <https://man.dragonflybsd.org/?command=accept&section=2>\n * FreeBSD: <https://www.freebsd.org/cgi/man.cgi?query=accept&sektion=2>\n * Linux: <https://man7.org/linux/man-pages/man2/accept.2.html>\n * macOS: <https://developer.apple.com/library/archive/documentation/System/Conceptual/ManPages_iPhoneOS/man2/accept.2.html> (archived, actually for iOS)\n * NetBSD: <https://man.netbsd.org/accept.2>\n * OpenBSD: <https://man.openbsd.org/accept.2>\n * iOS: <https://developer.apple.com/library/archive/documentation/System/Conceptual/ManPages_iPhoneOS/man2/accept.2.html> (archived)\n * illumos: <https://illumos.org/man/3SOCKET/accept>\n * Windows: <https://docs.microsoft.com/en-us/windows/win32/api/winsock2/nf-winsock2-accept>","links":{"`Socket::accept_raw`":"0:125:2227","`Socket::new`":"0:117:928"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:2865:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"resolved_path","inner":{"name":"Socket","id":"0:110:1692","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},{"kind":"resolved_path","inner":{"name":"SockAddr","id":"0:565:1691","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:143:2359":{"id":"0:143:2359","crate_id":0,"name":"peek_from","span":{"filename":"src/socket.rs","begin":[616,4],"end":[618,5]},"visibility":"public","docs":"Receives data from the socket, without removing it from the queue.\n\nSuccessive calls return the same data. This is accomplished by passing\n`MSG_PEEK` as a flag to the underlying `recvfrom` system call.\n\nOn success, returns the number of bytes peeked and the address from\nwhence the data came.\n\n# Safety\n\n`peek_from` makes the same safety guarantees regarding the `buf`fer as\n[`recv`].\n\n# Note: Datagram Sockets\nFor datagram sockets, the behavior of this method when `buf` is smaller than\nthe datagram at the head of the receive queue differs between Windows and\nUnix-like platforms (Linux, macOS, BSDs, etc: colloquially termed \"*nix\").\n\nOn *nix platforms, the datagram is truncated to the length of `buf`.\n\nOn Windows, an error corresponding to `WSAEMSGSIZE` will be returned.\n\nFor consistency between platforms, be sure to provide a sufficiently large buffer to avoid\ntruncation; the exact size required depends on the underlying protocol.\n\nIf you just want to know the sender of the data, try [`peek_sender`].\n\n[`recv`]: Socket::recv\n[`peek_sender`]: Socket::peek_sender","links":{"Socket::recv":"0:133:2274","Socket::peek_sender":"0:144:2364"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"resolved_path","inner":{"name":"MaybeUninit","id":"2:29935:1639","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"u8"}}],"bindings":[]}}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:2865:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"primitive","inner":"usize"},{"kind":"resolved_path","inner":{"name":"SockAddr","id":"0:565:1691","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:196:2632":{"id":"0:196:2632","crate_id":0,"name":"multicast_ttl_v4","span":{"filename":"src/socket.rs","begin":[1395,4],"end":[1400,5]},"visibility":"public","docs":"Get the value of the `IP_MULTICAST_TTL` option for this socket.\n\nFor more information about this option, see [`set_multicast_ttl_v4`].\n\n[`set_multicast_ttl_v4`]: Socket::set_multicast_ttl_v4","links":{"Socket::set_multicast_ttl_v4":"0:198:2639"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:2865:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"u32"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:509:1656":{"id":"0:509:1656","crate_id":0,"name":"from_raw_fd","span":{"filename":"src/sys/unix.rs","begin":[2848,4],"end":[2850,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["fd",{"kind":"resolved_path","inner":{"name":"c_int","id":"20:43:1690","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"crate::Socket","id":"0:110:1692","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"0:501:2853":{"id":"0:501:2853","crate_id":0,"name":"as_raw_fd","span":{"filename":"src/sys/unix.rs","begin":[2818,4],"end":[2820,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"c_int","id":"20:43:1690","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11972:35106":{"id":"2:11972:35106","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:11857:411","self::pattern":"2:11565:19914"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11570:13827","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11570:13827","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11585:19912","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:236:2797":{"id":"0:236:2797","crate_id":0,"name":"read_vectored","span":{"filename":"src/socket.rs","begin":[1972,4],"end":[1979,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(target_os = \"redox\"))]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["bufs",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"resolved_path","inner":{"name":"IoSliceMut","id":"1:3389:2109","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:2865:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2541:127":{"id":"2:2541:127","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"resolved_path","inner":{"name":"Infallible","id":"2:31689:12355","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"0:165:2461":{"id":"0:165:2461","crate_id":0,"name":"set_linger","span":{"filename":"src/socket.rs","begin":[903,4],"end":[906,5]},"visibility":"public","docs":"Set value for the `SO_LINGER` option on this socket.\n\nIf `linger` is not `None`, a close(2) or shutdown(2) will not return\nuntil all queued messages for the socket have been successfully sent or\nthe linger timeout has been reached. Otherwise, the call returns\nimmediately and the closing is done in the background. When the socket\nis closed as part of exit(2), it always lingers in the background.\n\n# Notes\n\nOn most OSs the duration only has a precision of seconds and will be\nsilently truncated.\n\nOn Apple platforms (e.g. macOS, iOS, etc) this uses `SO_LINGER_SEC`.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["linger",{"kind":"resolved_path","inner":{"name":"Option","id":"2:40589:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Duration","id":"2:43360:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:2865:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2538-0:110:1692":{"id":"b:2:2538-0:110:1692","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2497:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2507:234","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Socket","id":"0:110:1692","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2541:127","2:2542:1453"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:159:2428":{"id":"0:159:2428","crate_id":0,"name":"set_broadcast","span":{"filename":"src/socket.rs","begin":[827,4],"end":[836,5]},"visibility":"public","docs":"Set the value of the `SO_BROADCAST` option for this socket.\n\nWhen enabled, this socket is allowed to send packets to a broadcast\naddress.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["broadcast",{"kind":"primitive","inner":"bool"}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:2865:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:502":{"id":"0:502","crate_id":0,"name":null,"span":{"filename":"src/sys/unix.rs","begin":[2824,0],"end":[2829,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2500:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Socket","id":"0:110:1692","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OwnedFd","id":"1:4725:2864","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:503:684"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:208":{"id":"0:208","crate_id":0,"name":null,"span":{"filename":"src/socket.rs","begin":[1534,0],"end":[1768,1]},"visibility":"default","docs":"Socket options for IPv6 sockets, get/set using `IPPROTO_IPV6`.\n\nAdditional documentation can be found in documentation of the OS.\n* Linux: <https://man7.org/linux/man-pages/man7/ipv6.7.html>\n* Windows: <https://docs.microsoft.com/en-us/windows/win32/winsock/ipproto-ipv6-socket-options>","links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"Socket","id":"0:110:1692","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:209:2675","0:210:2685","0:211:2690","0:213:2695","0:214:2699","0:216:2705","0:217:2709","0:219:2715","0:220:2718","0:222:2721","0:223:2725","0:225:2733","0:226:2737","0:228:2744"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:268":{"id":"0:268","crate_id":0,"name":null,"span":{"filename":"src/sockref.rs","begin":[71,0],"end":[77,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'s","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Deref","id":"2:2906:116","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"SockRef","id":"0:264:1693","args":{"angle_bracketed":{"args":[{"lifetime":"'s"}],"bindings":[]}}}},"items":["0:270:227","0:271:543"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:2:2538-0:609:1723":{"id":"b:2:2538-0:609:1723","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2497:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2507:234","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Type","id":"0:609:1723","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2541:127","2:2542:1453"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"a:2:8187:9223-0:565:1691":{"id":"a:2:8187:9223-0:565:1691","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:8187:9223","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"SockAddr","id":"0:565:1691","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:388":{"id":"0:388","crate_id":0,"name":null,"span":{"filename":"src/sys/unix.rs","begin":[334,0],"end":[356,1]},"visibility":"default","docs":"Unix only API.","links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"Domain","id":"0:597:1707","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:552:928":{"id":"0:552:928","crate_id":0,"name":"new","span":{"filename":"src/lib.rs","begin":[390,4],"end":[392,5]},"visibility":"public","docs":"Creates a new `MaybeUninitSlice` wrapping a byte slice.\n\n# Panics\n\nPanics on Windows if the slice is larger than 4GB.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["buf",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":true,"type":{"kind":"slice","inner":{"kind":"resolved_path","inner":{"name":"MaybeUninit","id":"2:29935:1639","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"u8"}}],"bindings":[]}}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"MaybeUninitSlice","id":"0:543:1785","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:138:2325":{"id":"0:138:2325","crate_id":0,"name":"peek","span":{"filename":"src/socket.rs","begin":[514,4],"end":[516,5]},"visibility":"public","docs":"Receives data on the socket from the remote adress to which it is\nconnected, without removing that data from the queue. On success,\nreturns the number of bytes peeked.\n\nSuccessive calls return the same data. This is accomplished by passing\n`MSG_PEEK` as a flag to the underlying `recv` system call.\n\n# Safety\n\n`peek` makes the same safety guarantees regarding the `buf`fer as\n[`recv`].\n\n[`recv`]: Socket::recv","links":{"Socket::recv":"0:133:2274"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"resolved_path","inner":{"name":"MaybeUninit","id":"2:29935:1639","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"u8"}}],"bindings":[]}}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:2865:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11890:2927":{"id":"2:11890:2927","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Bytes","id":"2:42572:3672","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:41:1991":{"id":"0:41:1991","crate_id":0,"name":"try_init","span":{"filename":"src/sockaddr.rs","begin":[122,4],"end":[144,5]},"visibility":"public","docs":"Initialise a `SockAddr` by calling the function `init`.\n\nThe type of the address storage and length passed to the function `init`\nis OS/architecture specific.\n\nThe address is zeroed before `init` is called and is thus valid to\ndereference and read from. The length initialised to the maximum length\nof the storage.\n\n# Safety\n\nCaller must ensure that the address family and length match the type of\nstorage address. For example if `storage.ss_family` is set to `AF_INET`\nthe `storage` must be initialised as `sockaddr_in`, setting the content\nand length appropriately.\n\n# Examples\n\n```\n# fn main() -> std::io::Result<()> {\n# #[cfg(unix)] {\nuse std::io;\nuse std::os::unix::io::AsRawFd;\n\nuse socket2::{SockAddr, Socket, Domain, Type};\n\nlet socket = Socket::new(Domain::IPV4, Type::STREAM, None)?;\n\n// Initialise a `SocketAddr` byte calling `getsockname(2)`.\nlet (_, address) = unsafe {\n    SockAddr::try_init(|addr_storage, len| {\n        // The `getsockname(2)` system call will intiliase `storage` for\n        // us, setting `len` to the correct length.\n        if libc::getsockname(socket.as_raw_fd(), addr_storage.cast(), len) == -1 {\n            Err(io::Error::last_os_error())\n        } else {\n            Ok(())\n        }\n    })\n}?;\n# drop(address);\n# }\n# Ok(())\n# }\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["init",{"kind":"generic","inner":"F"}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:2865:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"generic","inner":"T"},{"kind":"resolved_path","inner":{"name":"SockAddr","id":"0:565:1691","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"2:2940:1994","args":{"parenthesized":{"inputs":[{"kind":"raw_pointer","inner":{"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"sockaddr_storage","id":"20:1721:1936","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},{"kind":"raw_pointer","inner":{"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"socklen_t","id":"20:1860:1937","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:2865:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3327-0:645:1795":{"id":"b:2:3327-0:645:1795","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2675:3548","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3325:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"TcpKeepalive","id":"0:645:1795","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3329:1467"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:271:543":{"id":"0:271:543","crate_id":0,"name":"deref","span":{"filename":"src/sockref.rs","begin":[74,4],"end":[76,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Target","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"","id":"2:2906:116","args":null}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:192:2618":{"id":"0:192:2618","crate_id":0,"name":"set_multicast_if_v4","span":{"filename":"src/socket.rs","begin":[1351,4],"end":[1361,5]},"visibility":"public","docs":"Set the value of the `IP_MULTICAST_IF` option for this socket.\n\nSpecifies the interface to use for routing multicast packets.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["interface",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"Ipv4Addr","id":"2:40421:2072","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:2865:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:219:2715":{"id":"0:219:2715","crate_id":0,"name":"set_multicast_loop_v6","span":{"filename":"src/socket.rs","begin":[1655,4],"end":[1664,5]},"visibility":"public","docs":"Set the value of the `IPV6_MULTICAST_LOOP` option for this socket.\n\nControls whether this socket sees the multicast packets it sends itself.\nNote that this may not have any affect on IPv4 sockets.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["loop_v6",{"kind":"primitive","inner":"bool"}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:2865:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:518:1715":{"id":"0:518:1715","crate_id":0,"name":"UNIX","span":{"filename":"src/lib.rs","begin":[213,4],"end":[213,50]},"visibility":"public","docs":"Domain for Unix socket communication, corresponding to `AF_UNIX`.","links":{},"attrs":[],"deprecation":null,"kind":"assoc_const","inner":{"type":{"kind":"resolved_path","inner":{"name":"Domain","id":"0:597:1707","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"default":"_"}},"0:643":{"id":"0:643","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[355,26],"end":[355,35]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"2:2297:185","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"RecvFlags","id":"0:633:1775","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RecvFlags","id":"0:633:1775","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:644:603"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:11987:35110":{"id":"2:11987:35110","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"2:4514:35110"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDebug","id":"2:42885:13062","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:603":{"id":"0:603","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[202,22],"end":[202,24]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralEq","id":"2:2679:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Domain","id":"0:597:1707","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:127:2236":{"id":"0:127:2236","crate_id":0,"name":"local_addr","span":{"filename":"src/socket.rs","begin":[319,4],"end":[321,5]},"visibility":"public","docs":"Returns the socket address of the local half of this socket.\n\nThis function directly corresponds to the `getsockname(2)` function on\nWindows and Unix.\n\nAdditional documentation can be found in manual of the OS:\n\n * DragonFly BSD: <https://man.dragonflybsd.org/?command=getsockname&section=2>\n * FreeBSD: <https://www.freebsd.org/cgi/man.cgi?query=getsockname&sektion=2>\n * Linux: <https://man7.org/linux/man-pages/man2/getsockname.2.html>\n * macOS: <https://developer.apple.com/library/archive/documentation/System/Conceptual/ManPages_iPhoneOS/man2/getsockname.2.html> (archived, actually for iOS)\n * NetBSD: <https://man.netbsd.org/getsockname.2>\n * OpenBSD: <https://man.openbsd.org/getsockname.2>\n * iOS: <https://developer.apple.com/library/archive/documentation/System/Conceptual/ManPages_iPhoneOS/man2/getsockname.2.html> (archived)\n * illumos: <https://illumos.org/man/3SOCKET/getsockname>\n * Windows: <https://docs.microsoft.com/en-us/windows/win32/api/winsock2/nf-winsock2-getsockname>\n\n# Notes\n\nDepending on the OS this may return an error if the socket is not\n[bound].\n\n[bound]: Socket::bind","links":{"Socket::bind":"0:120:2181"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:2865:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"SockAddr","id":"0:565:1691","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2538-0:633:1775":{"id":"b:2:2538-0:633:1775","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2497:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2507:234","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RecvFlags","id":"0:633:1775","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2541:127","2:2542:1453"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:139:2331":{"id":"0:139:2331","crate_id":0,"name":"recv_from","span":{"filename":"src/socket.rs","begin":[528,4],"end":[530,5]},"visibility":"public","docs":"Receives data from the socket. On success, returns the number of bytes\nread and the address from whence the data came.\n\nAdditional documentation can be found in manual of the OS:\n\n * DragonFly BSD: <https://man.dragonflybsd.org/?command=recvfrom&section=2>\n * FreeBSD: <https://www.freebsd.org/cgi/man.cgi?query=recvfrom&sektion=2>\n * Linux: <https://man7.org/linux/man-pages/man2/recvfrom.2.html>\n * macOS: <https://developer.apple.com/library/archive/documentation/System/Conceptual/ManPages_iPhoneOS/man2/recvfrom.2.html> (archived, actually for iOS)\n * NetBSD: <https://man.netbsd.org/recvfrom.2>\n * OpenBSD: <https://man.openbsd.org/recvfrom.2>\n * iOS: <https://developer.apple.com/library/archive/documentation/System/Conceptual/ManPages_iPhoneOS/man2/recvfrom.2.html> (archived)\n * illumos: <https://illumos.org/man/3SOCKET/recvfrom>\n * Windows: <https://docs.microsoft.com/en-us/windows/win32/api/winsock2/nf-winsock2-recvfrom>\n\n# Safety\n\n`recv_from` makes the same safety guarantees regarding the `buf`fer as\n[`recv`].\n\n[`recv`]: Socket::recv","links":{"Socket::recv":"0:133:2274"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"resolved_path","inner":{"name":"MaybeUninit","id":"2:29935:1639","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"u8"}}],"bindings":[]}}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:2865:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"primitive","inner":"usize"},{"kind":"resolved_path","inner":{"name":"SockAddr","id":"0:565:1691","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:2732:3710-0:543:1785":{"id":"a:2:2732:3710-0:543:1785","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2732:3710","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"MaybeUninitSlice","id":"0:543:1785","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"5:5316:35759":{"id":"5:5316:35759","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:277:9151","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:6931:9654","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Box","id":"5:277:9151","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:6931:9654","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2231-0:609:1723":{"id":"b:2:2231-0:609:1723","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2675:3548","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2225:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Type","id":"0:609:1723","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2233:3502"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:166:2466":{"id":"0:166:2466","crate_id":0,"name":"out_of_band_inline","span":{"filename":"src/socket.rs","begin":[915,4],"end":[920,5]},"visibility":"public","docs":"Get value for the `SO_OOBINLINE` option on this socket.\n\nFor more information about this option, see [`set_out_of_band_inline`].\n\n[`set_out_of_band_inline`]: Socket::set_out_of_band_inline","links":{"Socket::set_out_of_band_inline":"0:168:2474"},"attrs":["#[cfg(not(target_os = \"redox\"))]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:2865:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"bool"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:5:672-0:609:1723":{"id":"b:5:672-0:609:1723","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2248:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:668:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Type","id":"0:609:1723","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:674:9634","5:675:9635","5:676:9636"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"a:2:8187:9223-0:621:1745":{"id":"a:2:8187:9223-0:621:1745","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:8187:9223","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Protocol","id":"0:621:1745","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"a:2:8186:9224-0:633:1775":{"id":"a:2:8186:9224-0:633:1775","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:8186:9224","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RecvFlags","id":"0:633:1775","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:11934:35094":{"id":"2:11934:35094","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:40589:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11570:13827","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:515":{"id":"0:515","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[205,0],"end":[222,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"Domain","id":"0:597:1707","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:516:1709","0:517:1712","0:518:1715","0:519:1718"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:5:672-0:633:1775":{"id":"b:5:672-0:633:1775","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2248:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:668:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RecvFlags","id":"0:633:1775","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:674:9634","5:675:9635","5:676:9636"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:573:1580":{"id":"0:573:1580","crate_id":0,"name":"0","span":{"filename":"src/socket.rs","begin":[800,10],"end":[800,13]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"struct_field","inner":{"kind":"primitive","inner":"u32"}},"0:529":{"id":"0:529","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[283,0],"end":[287,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2500:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Type","id":"0:609:1723","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"c_int","id":"20:43:1690","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:530:684"],"negative":false,"synthetic":false,"blanket_impl":null}},"a:2:2682:225-0:621:1745":{"id":"a:2:2682:225-0:621:1745","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2682:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Protocol","id":"0:621:1745","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:597:1707":{"id":"0:597:1707","crate_id":0,"name":"Domain","span":{"filename":"src/lib.rs","begin":[203,0],"end":[203,25]},"visibility":"public","docs":"Specification of the communication domain for a socket.\n\nThis is a newtype wrapper around an integer which provides a nicer API in\naddition to an injection point for documentation. Convenience constants such\nas [`Domain::IPV4`], [`Domain::IPV6`], etc, are provided to avoid reaching\ninto libc for various constants.\n\nThis type is freely interconvertible with C's `int` type, however, if a raw\nvalue needs to be provided.","links":{"`Domain::IPV4`":"0:516:1709","`Domain::IPV6`":"0:517:1712"},"attrs":[],"deprecation":null,"kind":"struct","inner":{"kind":{"tuple":[null]},"generics":{"params":[],"where_predicates":[]},"impls":["0:388","0:515","a:2:8187:9223-0:597:1707","a:2:2682:225-0:597:1707","a:2:8186:9224-0:597:1707","a:2:2732:3710-0:597:1707","a:2:2668:217-0:597:1707","b:2:2231-0:597:1707","b:2:3327-0:597:1707","b:2:2527-0:597:1707","b:2:2538-0:597:1707","b:2:2234-0:597:1707","b:2:2533-0:597:1707","b:2:2523-0:597:1707","b:5:672-0:597:1707","0:601","0:520","0:522","0:607","0:604","0:600","0:603","0:591","0:606"]}},"b:2:2533-0:597:1707":{"id":"b:2:2533-0:597:1707","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2507:234","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2503:235","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Domain","id":"0:597:1707","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2536:127","2:2537:1454"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:601":{"id":"0:601","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[202,15],"end":[202,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2248:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Domain","id":"0:597:1707","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:602:415"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:555:227":{"id":"0:555:227","crate_id":0,"name":"Target","span":{"filename":"src/lib.rs","begin":[396,4],"end":[396,36]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"slice","inner":{"kind":"resolved_path","inner":{"name":"MaybeUninit","id":"2:29935:1639","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"u8"}}],"bindings":[]}}}}}}},"0:619":{"id":"0:619","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[245,26],"end":[245,35]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"2:2297:185","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Type","id":"0:609:1723","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Type","id":"0:609:1723","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:620:603"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:633:1775":{"id":"0:633:1775","crate_id":0,"name":"RecvFlags","span":{"filename":"src/lib.rs","begin":[356,0],"end":[356,28]},"visibility":"public","docs":"Flags for incoming messages.\n\nFlags provide additional information about incoming messages.","links":{},"attrs":["#[cfg(not(target_os = \"redox\"))]"],"deprecation":null,"kind":"struct","inner":{"kind":{"tuple":[null]},"generics":{"params":[],"where_predicates":[]},"impls":["0:391","0:541","a:2:8187:9223-0:633:1775","a:2:2682:225-0:633:1775","a:2:8186:9224-0:633:1775","a:2:2732:3710-0:633:1775","a:2:2668:217-0:633:1775","b:2:2231-0:633:1775","b:2:3327-0:633:1775","b:2:2527-0:633:1775","b:2:2538-0:633:1775","b:2:2234-0:633:1775","b:2:2533-0:633:1775","b:2:2523-0:633:1775","b:5:672-0:633:1775","0:643","0:639","0:637","0:642","0:394","0:636","0:640"]}},"0:512-0:110:1692":{"id":"0:512-0:110:1692","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[181,0],"end":[181,23]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"socket::Socket","name":"Socket","id":"0:110:1692","glob":false}}},"paths":{"16:2487:11970":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"17:11800:11443":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"5:1339:3638":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"16:6567:12945":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"5:7134:33152":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"1:11166:13900":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"17:11828:11448":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"2:44805:12621":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"6:540:2918":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"2:9736:14742":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"17:9021:13656":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"2:39391:3745":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"16:4441:12029":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"1:8176:3558":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"16:3689:12018":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"12:632:3638":{"crate_id":12,"path":["hashbrown","map","Iter"],"kind":"struct"},"17:11787:11441":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"17:13024:11775":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"2:38834:198":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"17:13354:11880":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"17:12781:11718":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"6:546:2977":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"12:1628:10050":{"crate_id":12,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"16:5780:12878":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"1:1083:13802":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"6:4743:3283":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"16:7980:21536":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"1:11052:3608":{"crate_id":1,"path":["std","sys","unix","time","SystemTime"],"kind":"struct"},"20:4351:7475":{"crate_id":20,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"6:1645:4979":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"1:7944:13874":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"16:153:10038":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"20:7243:8977":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"17:10520:11273":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"20:4466:7489":{"crate_id":20,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"16:7847:12218":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"12:1859:12996":{"crate_id":12,"path":["hashbrown","set","Difference"],"kind":"struct"},"1:11143:10172":{"crate_id":1,"path":["std","sys_common","once","futex","CompletionGuard"],"kind":"struct"},"17:9339:13668":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"16:7357:12164":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"20:1650:4980":{"crate_id":20,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"1:2385:1927":{"crate_id":1,"path":["std","io"],"kind":"module"},"1:10458:10167":{"crate_id":1,"path":["std","sys","unix","thread","Thread"],"kind":"struct"},"16:6463:12932":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"20:4551:7499":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"1:10645:13177":{"crate_id":1,"path":["std","sys","unix","fs","FileAttr"],"kind":"struct"},"5:7163:3729":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"1:8963:13886":{"crate_id":1,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"2:6655:33632":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"2:38651:3606":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"20:499:4137":{"crate_id":20,"path":["libc","unix","rlimit"],"kind":"struct"},"16:5510:12849":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"16:6284:12007":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"9:977:12431":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"16:4786:12039":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"20:4699:7510":{"crate_id":20,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"2:44398:12606":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"17:10434:12828":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"6:5902:8178":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"1:8092:3700":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"17:8393:21591":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"16:6816:12956":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"20:4429:7484":{"crate_id":20,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"1:4748:2805":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"2:22189:2860":{"crate_id":2,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"16:7637:12972":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"1:4667:2806":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"5:7120:3730":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"20:4801:3285":{"crate_id":20,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"20:6685:8597":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"2:4232:204":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"1:3157:3691":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"16:7543:11994":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"20:4526:7496":{"crate_id":20,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"17:9601:11211":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"5:7001:13013":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"17:9644:13682":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"18:564:11082":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"6:493:4136":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"1:6538:10158":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutexGuard"],"kind":"struct"},"2:21462:13032":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"2:2934:3591":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"1:1988:181":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"6:525:2872":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"12:861:13797":{"crate_id":12,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"16:6298:12918":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"20:5801:8170":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"2:39472:13071":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"2:39603:13088":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"1:1849:13852":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"5:5726:69":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"16:5163:12045":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"5:3076:95":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"2:2574:115":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"16:5949:12903":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"2:1647:1073":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"12:2080:13799":{"crate_id":12,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"6:4274:7474":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"17:10139:11204":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"20:972:2584":{"crate_id":20,"path":["libc","unix","linux_like","IP_DROP_MEMBERSHIP"],"kind":"constant"},"1:1065:13798":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"1:2360:14721":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"6:7452:7696":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"2:39271:13064":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"1:1580:12995":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"1:8151:3672":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"2:41066:83":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"16:2842:11985":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"20:6613:4942":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"17:12896:11740":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"17:13413:11895":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"2:2930:3590":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"18:624:36128":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"2:42708:9676":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"17:8418:21592":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"6:586:4144":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"2:42364:9662":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"20:4971:7539":{"crate_id":20,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"6:7511:9146":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"20:4731:7514":{"crate_id":20,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"2:11354:13126":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"2:12368:10135":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"5:6175:10078":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"6:4571:7504":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"1:3437:26935":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"1:3921:14736":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"5:7028:9581":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"16:4262:12023":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"1:10668:13184":{"crate_id":1,"path":["std","sys","unix","fs","FilePermissions"],"kind":"struct"},"2:8188:9222":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"2:43563:12593":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"20:505:4138":{"crate_id":20,"path":["libc","unix","rusage"],"kind":"struct"},"1:1436:143":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"20:4533:7497":{"crate_id":20,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"6:487:3023":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"2:9527:10124":{"crate_id":2,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"14:187:20615":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"20:7529:7701":{"crate_id":20,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"2:4:1000":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"18:548:140":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"6:7195:8976":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"1:8113:3668":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"20:4950:7537":{"crate_id":20,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"6:1571:4973":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"12:119:10040":{"crate_id":12,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"17:12909:11746":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"20:1602:4976":{"crate_id":20,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"17:12073:11499":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"5:0:283":{"crate_id":5,"path":["alloc"],"kind":"module"},"2:2675:3548":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"2:46622:12703":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"17:11149:11320":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"2:42690:9678":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"2:44184:12597":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"2:11338:13123":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"5:35:10052":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"1:4084:9892":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"12:725:12993":{"crate_id":12,"path":["hashbrown","map","Keys"],"kind":"struct"},"5:3732:10056":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"1:4402:14743":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"17:11368:11365":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"5:6955:10078":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"17:13059:11784":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"2:39519:13078":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"17:9488:13677":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"16:7567:21534":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"17:9885:13703":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"2:2761:3568":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"20:6806:8605":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"2:42869:13131":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"6:1677:4982":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"2:21:671":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"20:572:4142":{"crate_id":20,"path":["libc","unix","itimerval"],"kind":"struct"},"12:1085:13800":{"crate_id":12,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"20:5045:7546":{"crate_id":20,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"6:5660:8104":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"1:6395:10157":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"16:3263:12013":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"2:42494:9672":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"2:39903:10119":{"crate_id":2,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"1:11699:10179":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"2:9913:9669":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"5:1030:35941":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"17:10108:13708":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"5:4298:3655":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"17:11330:11357":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"17:10546:21594":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"14:31:13786":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"16:7603:12179":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"2:42850:13129":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"2:42885:13062":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"2:39218:19984":{"crate_id":2,"path":["core","char","EscapeUnicodeState"],"kind":"enum"},"9:111:20458":{"crate_id":9,"path":["miniz_oxide","deflate","core","CompressorOxide"],"kind":"struct"},"6:6521:8592":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"18:515:11078":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"2:4092:13824":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"16:6517:12933":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"5:7277:10099":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"17:13192:11818":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"6:4429:7491":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"7:79:20437":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"17:9328:13667":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"5:6931:9654":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"20:4753:7516":{"crate_id":20,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"20:1569:4973":{"crate_id":20,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"5:1420:13789":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"18:636:11093":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"2:3171:3599":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"5:3713:10046":{"crate_id":5,"path":["alloc","collections","linked_list","DrainFilter"],"kind":"struct"},"2:38958:12560":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"20:6636:4915":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"17:10321:11256":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"2:41922:3634":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"17:10822:21597":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"6:5890:8177":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"17:9501:11197":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"18:574:11075":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"1:2358:14720":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"2:43593:13170":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"20:1685:4983":{"crate_id":20,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"17:9071:36124":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"2:21600:12464":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"2:39510:13077":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"2:39879:13099":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"1:8772:12735":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"5:2104:13004":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"20:4870:7528":{"crate_id":20,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"12:1840:10078":{"crate_id":12,"path":["hashbrown","set","Drain"],"kind":"struct"},"6:1541:1934":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"20:6785:8603":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"2:44459:12608":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"2:44583:12613":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"16:7288:12968":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"2:45553:12653":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"2:12147:135":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"20:4837:7525":{"crate_id":20,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"17:11070:11313":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"20:4747:7515":{"crate_id":20,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"2:20428:33857":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"16:5525:12852":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"12:1555:13805":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"17:9631:13681":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"2:9010:131":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"2:39137:13050":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"1:7788:11139":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"5:7150:3728":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"1:11025:26156":{"crate_id":1,"path":["std","sys","unix","thread","cgroups","Cgroup"],"kind":"enum"},"6:4261:7473":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"2:2792:3574":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"1:1564:3638":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"2:2491:75":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"5:262:10056":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"16:2993:12009":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"2:42465:9670":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"20:923:2326":{"crate_id":20,"path":["libc","unix","linux_like","MSG_PEEK"],"kind":"constant"},"1:6355:13099":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"9:896:20447":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"16:4921:12043":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"2:45365:12649":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"20:6770:8602":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"2:43317:13162":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"2:41226:13459":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"2:40986:82":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"20:4472:7490":{"crate_id":20,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"16:4545:12031":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"1:10940:10170":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"1:956:13796":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"2:2800:3576":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"6:5698:8165":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"17:13436:11908":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"2:42586:3673":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"6:7446:7695":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"2:44481:12609":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"1:8786:12736":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"20:493:4136":{"crate_id":20,"path":["libc","unix","timespec"],"kind":"struct"},"6:4733:7520":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"1:11823:31656":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"17:10752:11292":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"2:44328:12603":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"17:12926:11751":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"6:4962:7543":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"17:12874:11736":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"6:5813:8173":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"2:44629:12616":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"6:6649:8598":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"1:7661:14664":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"2:40707:9221":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"2:7525:9942":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"17:9371:13657":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"16:6877:21531":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"2:46569:12700":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"6:6094:8218":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"17:12134:11509":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"12:1534:13804":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"2:38690:3603":{"crate_id":2,"path":["core","ops","generator","GeneratorState"],"kind":"enum"},"5:2624:12453":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"2:4024:19895":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"6:4649:7510":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"6:6719:8601":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"2:21676:33140":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"2:46161:12687":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"1:6071:10135":{"crate_id":1,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"5:3504:160":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"17:8666:11187":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"17:13091:11792":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"20:5952:8179":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"20:7284:2519":{"crate_id":20,"path":["libc","unix","linux_like","linux","arch","generic","SO_SNDTIMEO"],"kind":"constant"},"2:10093:9674":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"2:4236:13825":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"6:4618:7507":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"2:50235:12714":{"crate_id":2,"path":["core","core_simd","vector","ptr","SimdMutPtr"],"kind":"struct"},"1:7667:13171":{"crate_id":1,"path":["std","collections","hash","map","RandomState"],"kind":"struct"},"17:8110:21570":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"6:473:2601":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"2:39235:13049":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"16:5219:11181":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"16:4144:12021":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"20:975:2605":{"crate_id":20,"path":["libc","unix","linux_like","IP_ADD_SOURCE_MEMBERSHIP"],"kind":"constant"},"18:681:12798":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"17:9458:13673":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"2:11579:12804":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"18:719:11094":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"6:6548:3924":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"5:1431:13790":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"17:11300:11345":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"5:1410:13803":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"1:1788:13850":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"2:42402:9664":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"1:11876:1473":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"16:6241:12916":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"17:13518:11925":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"2:43309:13160":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"1:3121:14400":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"6:4751:3285":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"17:8701:11188":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"5:2177:13009":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"20:1661:4981":{"crate_id":20,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"20:1548:1935":{"crate_id":20,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"16:5411:11993":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"17:8631:11186":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"2:11133:19915":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"1:7805:12717":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"12:1872:12998":{"crate_id":12,"path":["hashbrown","set","Union"],"kind":"struct"},"20:1643:4979":{"crate_id":20,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"17:11125:11316":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"2:39463:13070":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"20:5012:7543":{"crate_id":20,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"1:9069:2868":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"16:0:3415":{"crate_id":16,"path":["gimli"],"kind":"module"},"17:12265:11534":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"17:11161:11323":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"2:5527:13021":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"17:9061:11204":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"2:2676:3708":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"20:5794:8169":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"2:39188:13052":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"16:6171:12059":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"2:42544:13113":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"6:1534:1684":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"2:46558:12699":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"17:13527:11929":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"17:10854:21598":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"16:5541:12854":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"17:9263:13661":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"2:44518:12611":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"2:45129:12630":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"1:10700:118":{"crate_id":1,"path":["std","sys","unix","fs","DirBuilder"],"kind":"struct"},"1:7853:13872":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"16:5472:11992":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"17:12349:11545":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"17:11014:11310":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"1:2548:10125":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"2:2297:185":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"20:1532:1684":{"crate_id":20,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"17:13382:11887":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"17:12797:11721":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"16:8069:127":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"17:12850:11734":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"1:3961:14738":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"20:4324:7474":{"crate_id":20,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"2:31729:13047":{"crate_id":2,"path":["core","error","Source"],"kind":"struct"},"5:5762:14507":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"17:13168:11814":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"1:6174:10145":{"crate_id":1,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"2:41348:9732":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"5:6946:13012":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"2:43305:13159":{"crate_id":2,"path":["core","str","LinesMap"],"kind":"struct"},"1:4164:2865":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"20:4793:3283":{"crate_id":20,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"17:12816:11722":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"1:11229:13230":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"1:1985:182":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"1:4244:2866":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"6:4369:7483":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"18:531:12795":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"2:29977:33142":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum16"],"kind":"enum"},"2:11565:19914":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"20:1860:1937":{"crate_id":20,"path":["libc","unix","linux_like","linux","socklen_t"],"kind":"typedef"},"17:12322:11542":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"1:7030:31034":{"crate_id":1,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"17:9350:11175":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"14:221:12304":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"1:2867:127":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"5:803:10061":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"12:738:12994":{"crate_id":12,"path":["hashbrown","map","Values"],"kind":"struct"},"20:5814:8132":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"5:868:3638":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"17:10642:21596":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"16:2930:20667":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"2:2776:3569":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"5:5835:3655":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"9:622:20464":{"crate_id":9,"path":["miniz_oxide","deflate","core","TDEFLFlush"],"kind":"enum"},"17:11661:11424":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"16:2683:11978":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"18:671:13638":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"2:39584:13086":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"17:11576:11412":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"6:4910:7538":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"16:7278:12001":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"20:481:4135":{"crate_id":20,"path":["libc","unix","utimbuf"],"kind":"struct"},"1:11839:26153":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"18:652:11075":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"5:1704:10046":{"crate_id":5,"path":["alloc","collections","btree","map","DrainFilter"],"kind":"struct"},"17:11087:11314":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"17:8796:11191":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"16:2465:11969":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"2:2804:3575":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"2:10214:9677":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"2:40716:9520":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"2:3640:9581":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"5:5418:10092":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"16:7872:12976":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"5:1451:13809":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"2:39682:13095":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"17:11034:11311":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"2:41621:67":{"crate_id":2,"path":["core","fmt","rt","v1","Alignment"],"kind":"enum"},"16:7117:36112":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"20:4706:7511":{"crate_id":20,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"2:10172:9678":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"6:5823:8174":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"16:5664:12866":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"16:6034:13751":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"17:10796:11294":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"16:4749:12038":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"18:690:12801":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"20:586:4144":{"crate_id":20,"path":["libc","unix","servent"],"kind":"struct"},"2:42840:3669":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"1:3983:14741":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"2:38910:3598":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"2:39501:13075":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"1:9378:13870":{"crate_id":1,"path":["std","sys","unix","fs","ReadDir"],"kind":"struct"},"1:361:13839":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"16:6330:12062":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"1:8970:13887":{"crate_id":1,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"2:39401:3744":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"17:386:13641":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"6:5843:8175":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"1:10134:13475":{"crate_id":1,"path":["std","sys","unix","pipe","AnonPipe"],"kind":"struct"},"1:5491:14766":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"1:5708:13862":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"2:2820:3579":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"17:13082:11789":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"1:1927:14714":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"6:4871:7533":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"17:10476:21701":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"5:4331:10084":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"1:4564:10965":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"20:5944:8178":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"20:531:4139":{"crate_id":20,"path":["libc","unix","hostent"],"kind":"struct"},"20:7215:4094":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"2:20828:14819":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","ToBitMask"],"kind":"trait"},"1:7271:31663":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"1:1786:13849":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"2:42140:13112":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"20:1512:2874":{"crate_id":20,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"20:4633:7505":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"6:4775:7523":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"17:10973:11307":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"2:39146:13051":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"6:4882:7535":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"17:9553:11204":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"2:20578:14826":{"crate_id":2,"path":["core","core_simd","elements","float","SimdFloat"],"kind":"trait"},"17:11547:11408":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"2:42530:12588":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"1:11879:779":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"6:1663:4981":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"17:1931:13646":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"20:4311:7473":{"crate_id":20,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"2:6519:9589":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"20:1085:2788":{"crate_id":20,"path":["libc","unix","linux_like","TCP_NODELAY"],"kind":"constant"},"1:11504:13194":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"20:7511:7698":{"crate_id":20,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"17:12211:11528":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"2:20394:33818":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_left","Rotate"],"kind":"struct"},"16:3457:11104":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"20:4452:7487":{"crate_id":20,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"17:10528:13722":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"17:10708:12834":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"2:40504:33145":{"crate_id":2,"path":["core","net","parser","AddrKind"],"kind":"enum"},"2:3325:68":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"2:2680:108":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"6:123:3815":{"crate_id":6,"path":["libc","unix","fpos_t"],"kind":"enum"},"16:6668:12102":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"6:4416:7489":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"6:4389:7485":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"6:505:4138":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"20:4539:7498":{"crate_id":20,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"6:6512:4018":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"2:9274:140":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"1:5343:13466":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"2:38937:12160":{"crate_id":2,"path":["core","any","tags","Value"],"kind":"struct"},"2:21263:12462":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"2:9062:9741":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"2:39533:13081":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"6:1520:3050":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"17:242:13639":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"17:13492:11916":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"20:4995:7541":{"crate_id":20,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"16:2705:11979":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"17:10506:11270":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"2:7132:133":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"2:12233:13831":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"20:561:2449":{"crate_id":20,"path":["libc","unix","linger"],"kind":"struct"},"1:4725:2864":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"2:38856:200":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"1:11199:12754":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"2:9746:219":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"20:1043:2726":{"crate_id":20,"path":["libc","unix","linux_like","IPV6_V6ONLY"],"kind":"constant"},"2:1449:1638":{"crate_id":2,"path":["core","mem"],"kind":"module"},"2:3160:231":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"17:10221:13713":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"17:10159:11253":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"5:1046:14504":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"2:20409:33818":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_right","Rotate"],"kind":"struct"},"2:42808:13128":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"2:22090:173":{"crate_id":2,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"2:2454:14742":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"2:12357:106":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"17:13176:11815":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"20:1525:2875":{"crate_id":20,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"6:6530:8593":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"16:5596:12048":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"20:4446:7486":{"crate_id":20,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"1:10863:12736":{"crate_id":1,"path":["std","sys","unix","process","process_common","ExitCode"],"kind":"struct"},"6:481:4135":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"17:967:13643":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"1:9874:1692":{"crate_id":1,"path":["std","sys","unix","net","Socket"],"kind":"struct"},"2:10200:9679":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"17:13134:11806":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"16:4662:12035":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"6:119:3814":{"crate_id":6,"path":["libc","unix","FILE"],"kind":"enum"},"2:40438:2079":{"crate_id":2,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"17:11939:11478":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"2:46543:12698":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"1:4566:10967":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"1:9059:215":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"17:9539:13679":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"6:4539:7501":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"1:6823:10174":{"crate_id":1,"path":["std","sys","common","thread_local","fast_local","fast","Key"],"kind":"struct"},"2:40575:1926":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"2:2668:217":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"2:43038:13145":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"20:1693:4984":{"crate_id":20,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"17:8981:13655":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"0:597:1707":{"crate_id":0,"path":["socket2","Domain"],"kind":"struct"},"1:7684:14703":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"1:1575:10046":{"crate_id":1,"path":["std","collections","hash","set","DrainFilter"],"kind":"struct"},"2:48874:243":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"2:2864:3589":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"2:7099:20127":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"6:4795:7526":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"17:13231:11830":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"5:6940:9581":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"17:12955:11759":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"17:8752:3672":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"15:175:20620":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"5:668:228":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"16:2282:11955":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"2:41932:13110":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"1:3197:3693":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"20:1675:4982":{"crate_id":20,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"6:6634:8596":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"2:22321:169":{"crate_id":2,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"17:9820:13694":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"2:8776:33171":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"20:6583:8594":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"6:6541:8594":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"1:11872:734":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"1:6222:203":{"crate_id":1,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"17:9422:13670":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"1:11855:368":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"2:40792:9581":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"2:45703:12654":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"6:4703:7516":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"1:7939:13873":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"2:4001:103":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"6:5000:7548":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"1:7469:11297":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"2:43185:13153":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"1:11001:12734":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatus"],"kind":"struct"},"1:1771:600":{"crate_id":1,"path":["std","env"],"kind":"module"},"6:4757:7521":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"12:1832:3638":{"crate_id":12,"path":["hashbrown","set","Iter"],"kind":"struct"},"2:41651:127":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"2:22024:175":{"crate_id":2,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"6:5917:8180":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"2:9066:191":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"20:1036:2710":{"crate_id":20,"path":["libc","unix","linux_like","IPV6_MULTICAST_LOOP"],"kind":"constant"},"17:13126:11803":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"20:1557:4972":{"crate_id":20,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"1:8274:3924":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"20:1518:3050":{"crate_id":20,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"6:6594:4915":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"1:5428:13464":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"5:3172:12998":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"1:3124:14401":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"5:6221:10056":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"2:40657:9669":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"20:7428:9118":{"crate_id":20,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"1:534:10138":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"14:160:13786":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"2:7145:9150":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"16:6829:12959":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"16:6252:12917":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"14:7:13786":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"16:7659:21535":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"17:11594:11413":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"1:5374:13857":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"5:1600:10056":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"1:10412:3691":{"crate_id":1,"path":["std","sys","unix","stdio","Stdin"],"kind":"struct"},"2:4721:3743":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"12:669:13789":{"crate_id":12,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"17:9274:13662":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"17:2916:13650":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"2:40866:91":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"2:2906:116":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"16:2868:11986":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"1:11869:735":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"1:11511:13194":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"2:43360:121":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"17:12748:11707":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"2:10131:9675":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"1:8903:12741":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"17:13279:11867":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"16:2749:11981":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"17:12756:11708":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"2:21651:12468":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"1:11263:10174":{"crate_id":1,"path":["std","sys_common","thread_local_key","Key"],"kind":"struct"},"1:8230:9897":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"2:46485:12693":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"5:7103:102":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"6:1710:4986":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"17:11515:11401":{"crate_id":17,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"20:4932:7535":{"crate_id":20,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"1:9181:9956":{"crate_id":1,"path":["std","sys","unix","args","Args"],"kind":"struct"},"0:645:1795":{"crate_id":0,"path":["socket2","TcpKeepalive"],"kind":"struct"},"2:21763:13043":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"2:42894:13049":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"2:9204:13828":{"crate_id":2,"path":["core","fmt","fmt","BorrowedPlaceholder"],"kind":"struct"},"12:320:10042":{"crate_id":12,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"1:11089:2868":{"crate_id":1,"path":["std","sys","unix","time","inner","Instant"],"kind":"struct"},"17:9627:13680":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"2:8293:13827":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"17:8561:11184":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"2:21584:13034":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"1:8052:3702":{"crate_id":1,"path":["std","io","readbuf","BorrowedCursor"],"kind":"struct"},"12:853:13796":{"crate_id":12,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"5:6623:241":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"2:1611:579":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"12:810:13803":{"crate_id":12,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"2:29963:67":{"crate_id":2,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"2:20856:12460":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"2:45519:12652":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"12:353:10044":{"crate_id":12,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"1:8085:3698":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"20:4960:7538":{"crate_id":20,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"17:9844:13698":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"2:41910:144":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"1:10205:13857":{"crate_id":1,"path":["std","sys","unix","process","process_common","Command"],"kind":"struct"},"16:5494:21523":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"20:6538:4914":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"2:22255:167":{"crate_id":2,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"6:4301:7475":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"1:7815:13175":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"6:6773:8606":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"6:6079:8217":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"2:2788:3571":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"9:592:20463":{"crate_id":9,"path":["miniz_oxide","deflate","core","CompressionStrategy"],"kind":"enum"},"2:42903:13054":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"17:11259:11333":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"16:2300:11957":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"1:7861:3683":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"2:40776:3638":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"2:2500:132":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"2:2302:124":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"6:4921:7539":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"20:5865:8174":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"16:2771:11982":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"12:444:141":{"crate_id":12,"path":["hashbrown","map","HashMap"],"kind":"struct"},"17:11774:11440":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"1:4627:14754":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"16:2727:11980":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"17:3125:13651":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"20:118:3814":{"crate_id":20,"path":["libc","unix","FILE"],"kind":"enum"},"17:12485:11554":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"17:12609:11657":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"6:6764:8605":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"5:6535:10105":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstBufDrop"],"kind":"struct"},"16:3010:20668":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"5:3644:3685":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"2:29901:2804":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"16:7249:13773":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"17:9446:13672":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"1:9018:12745":{"crate_id":1,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"2:42313:13837":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"2:38878:3595":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"6:7173:4094":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"9:382:20548":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"9:586:12360":{"crate_id":9,"path":["miniz_oxide","deflate","core","SymFreq"],"kind":"struct"},"16:7435:12168":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"17:9764:12815":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"1:878:12993":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"5:1354:9669":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"20:107:2679":{"crate_id":20,"path":["libc","unix","IPPROTO_IPV6"],"kind":"constant"},"17:10774:11260":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"16:6200:12913":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"6:5722:8167":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"9:33:20514":{"crate_id":9,"path":["miniz_oxide","deflate","buffer","LocalBuf"],"kind":"struct"},"2:46363:12690":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"1:3428:2107":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"1:7949:2210":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"1:7618:10167":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"1:10310:13879":{"crate_id":1,"path":["std","sys","unix","process","process_common","CommandArgs"],"kind":"struct"},"1:10415:3693":{"crate_id":1,"path":["std","sys","unix","stdio","Stdout"],"kind":"struct"},"20:5959:8180":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"17:8494:11180":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"17:12046:11497":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"20:4668:7507":{"crate_id":20,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"2:2993:3593":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"6:4313:7477":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"6:4812:988":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"16:3599:12016":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"20:971:2579":{"crate_id":20,"path":["libc","unix","linux_like","IP_ADD_MEMBERSHIP"],"kind":"constant"},"1:8922:106":{"crate_id":1,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"16:3716:12019":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"20:1539:1934":{"crate_id":20,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"17:8510:11181":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"2:22387:12482":{"crate_id":2,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"1:860:9669":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"1:5309:13856":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"20:4807:7521":{"crate_id":20,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"2:43605:12596":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"1:2209:13853":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"1:3236:3689":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"2:20615:14827":{"crate_id":2,"path":["core","core_simd","elements","int","SimdInt"],"kind":"trait"},"17:8339:21589":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"2:7174:120":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"2:31738:3715":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"2:46409:12691":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"16:6186:11989":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"1:891:12994":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"2:3087:3596":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"17:11559:11409":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"20:845:1716":{"crate_id":20,"path":["libc","unix","linux_like","AF_UNIX"],"kind":"constant"},"20:7505:7697":{"crate_id":20,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"1:641:13844":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"2:43086:13146":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"2:46503:12694":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"12:2069:13798":{"crate_id":12,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"1:7798:13174":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"2:44659:12617":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"6:7440:7694":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"17:10207:13709":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"5:3264:10046":{"crate_id":5,"path":["alloc","collections","btree","set","DrainFilter"],"kind":"struct"},"16:5963:191":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"16:2367:11965":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"12:2178:12352":{"crate_id":12,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"2:20703:14822":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"6:4422:7490":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"20:4831:7524":{"crate_id":20,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"16:4888:12042":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"2:45253:12647":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"5:4139:3638":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"20:1034:2700":{"crate_id":20,"path":["libc","unix","linux_like","IPV6_MULTICAST_IF"],"kind":"constant"},"17:10283:13718":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"2:2225:97":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"17:11721:11432":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"2:42144:9658":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"20:5770:8168":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"9:676:20454":{"crate_id":9,"path":["miniz_oxide","deflate","CompressionLevel"],"kind":"enum"},"20:5764:8167":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"2:39654:3671":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"20:4507:7494":{"crate_id":20,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"17:11606:11415":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"1:6572:214":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"20:4912:7532":{"crate_id":20,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"6:1527:2875":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"20:7476:7693":{"crate_id":20,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"2:20426:33853":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"2:30141:33153":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum64"],"kind":"enum"},"20:4501:7493":{"crate_id":20,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"2:2940:1994":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"20:4878:7529":{"crate_id":20,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"2:2455:19990":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"17:10420:11264":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"20:4900:7531":{"crate_id":20,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"2:39278:19986":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"enum"},"3:0:435":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"20:6042:8187":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"16:7970:12983":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"1:11878:1471":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"17:13007:11768":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"2:9288:144":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"2:2813:3582":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"3:229:207":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"2:39257:13062":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"17:9250:13660":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"1:4113:9895":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"17:12022:11494":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"2:43576:158":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"16:6359:12928":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"20:7264:2245":{"crate_id":20,"path":["libc","unix","linux_like","linux","arch","generic","SOL_SOCKET"],"kind":"constant"},"16:6719:36109":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"16:5703:12869":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"20:6653:4918":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"2:42439:9655":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"1:8181:2110":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"5:7022:9581":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"1:8420:3635":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"6:4820:7528":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"2:11119:13829":{"crate_id":2,"path":["core","slice","GetManyMutError"],"kind":"struct"},"6:4361:7482":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"17:12225:11529":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"20:6095:8216":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"2:21624:13038":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"6:1589:4975":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"17:1021:13644":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"2:2507:234":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"2:40563:1925":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"2:9000:2107":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"6:5990:8186":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"12:393:36090":{"crate_id":12,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"20:4783:7520":{"crate_id":20,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"2:5697:34240":{"crate_id":2,"path":["core","iter","adapters","flatten","TrustedConstSize"],"kind":"trait"},"2:7566:33172":{"crate_id":2,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"17:13366:11883":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"16:6496:21529":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"5:3979:9669":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"2:39594:13087":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"1:1571:10078":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"2:40421:2072":{"crate_id":2,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"17:11536:11405":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"2:39913:12565":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"1:10929:10169":{"crate_id":1,"path":["std","sys","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"6:567:4141":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"20:4764:7517":{"crate_id":20,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"20:7273:2467":{"crate_id":20,"path":["libc","unix","linux_like","linux","arch","generic","SO_OOBINLINE"],"kind":"constant"},"1:10680:12717":{"crate_id":1,"path":["std","sys","unix","fs","FileTimes"],"kind":"struct"},"20:922:2293":{"crate_id":20,"path":["libc","unix","linux_like","MSG_OOB"],"kind":"constant"},"6:4805:7527":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"20:102:1748":{"crate_id":20,"path":["libc","unix","IPPROTO_ICMP"],"kind":"constant"},"6:4628:7508":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"2:40665:9581":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"2:0:488":{"crate_id":2,"path":["core"],"kind":"module"},"17:9283:13663":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"2:22222:170":{"crate_id":2,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"17:11137:11319":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"20:944:2643":{"crate_id":20,"path":["libc","unix","linux_like","IP_TTL"],"kind":"constant"},"2:2825:3580":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"6:4611:3706":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"17:8212:21585":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"16:6619:12096":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"1:8940:25759":{"crate_id":1,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"12:2198:12356":{"crate_id":12,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"17:9433:13671":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"2:9051:111":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"2:40649:3638":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"17:8272:21587":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"17:11485:11394":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"16:7267:12965":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"17:1771:13645":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"16:3854:12020":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"16:7929:13782":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"6:4218:7469":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"6:4720:7518":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"17:9751:12814":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"2:3388:13821":{"crate_id":2,"path":["core","any","Demand"],"kind":"struct"},"6:4408:7488":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"20:4891:7530":{"crate_id":20,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"6:4501:7499":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"2:43313:13161":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"17:10270:13717":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"17:9691:13686":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"5:7075:3641":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"1:8134:3670":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"1:3344:3655":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"6:4697:7515":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"2:41893:13109":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"2:4313:9793":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"1:11875:1472":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"2:43150:13148":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"1:10655:13174":{"crate_id":1,"path":["std","sys","unix","fs","OpenOptions"],"kind":"struct"},"5:7260:10046":{"crate_id":5,"path":["alloc","vec","drain_filter","DrainFilter"],"kind":"struct"},"6:4346:7480":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"1:558:13840":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"20:6676:8596":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"2:46051:12686":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"2:43198:13157":{"crate_id":2,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"17:12337:11265":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"1:3049:3701":{"crate_id":1,"path":["std","io","readbuf","BorrowedBuf"],"kind":"struct"},"16:4606:12033":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"1:8218:1641":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"1:8802:13881":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"1:3371:2106":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"17:11054:11312":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"1:7646:14663":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"1:2342:9236":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"2:41612:130":{"crate_id":2,"path":["core","fmt","rt","v1","FormatSpec"],"kind":"struct"},"17:8055:21572":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"5:7205:13820":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"20:4723:7513":{"crate_id":20,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"1:10710:2108":{"crate_id":1,"path":["std","sys","unix","io","IoSlice"],"kind":"struct"},"6:531:4139":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"2:41885:3621":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"16:3402:12014":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"9:0:3409":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"18:582:3723":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"16:5981:12906":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"2:41606:70":{"crate_id":2,"path":["core","fmt","rt","v1","Argument"],"kind":"struct"},"2:39633:13090":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"1:3159:3692":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"2:42373:9661":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"20:6799:8604":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"17:9873:13702":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"2:2989:2413":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"2:39131:13049":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"17:12198:11527":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"17:12617:11660":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"6:4379:7484":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"17:12148:11511":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"6:4714:7517":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"16:7093:12142":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"2:44250:12600":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"17:11174:11325":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"1:7597:12716":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"2:45049:12629":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"17:9118:36115":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"6:0:806":{"crate_id":6,"path":["libc"],"kind":"module"},"17:10360:12818":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"17:12008:11492":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"2:11315:13122":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"1:5675:13858":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"1:4062:31033":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"2:1735:9259":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"1:10720:26158":{"crate_id":1,"path":["std","sys","unix","kernel_copy","SpliceMode"],"kind":"enum"},"6:4328:7322":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"17:12033:11495":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"2:2497:147":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"20:1088:2880":{"crate_id":20,"path":["libc","unix","linux_like","TCP_KEEPIDLE"],"kind":"constant"},"20:1897:5129":{"crate_id":20,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"6:4929:7540":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"12:1836:9581":{"crate_id":12,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"1:11856:925":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"2:12399:202":{"crate_id":2,"path":["core","task","ready","Ready"],"kind":"struct"},"2:20654:14742":{"crate_id":2,"path":["core","core_simd","elements","sealed","Sealed"],"kind":"trait"},"2:22288:168":{"crate_id":2,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"2:39264:13063":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"16:5122:12044":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"1:10353:10166":{"crate_id":1,"path":["std","sys","unix","stack_overflow","Handler"],"kind":"struct"},"2:41106:90":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"17:8137:21583":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"16:2341:11964":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"17:10257:13716":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"2:39894:3699":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"2:39450:3670":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"2:48504:14855":{"crate_id":2,"path":["core","core_simd","swizzle","Which"],"kind":"enum"},"17:9193:36118":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"2:5450:13019":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"16:5433:12843":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"2:2971:3602":{"crate_id":2,"path":["core","ops","generator","Generator"],"kind":"trait"},"17:9947:21675":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"17:11639:11423":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"20:1587:4975":{"crate_id":20,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"5:3117:35912":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"12:2190:36095":{"crate_id":12,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"1:8329:14762":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"2:2919:1642":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"12:697:13790":{"crate_id":12,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"17:11288:11342":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"2:2719:3709":{"crate_id":2,"path":["core","marker","Freeze"],"kind":"trait"},"20:4419:7483":{"crate_id":20,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"2:41639:109":{"crate_id":2,"path":["core","fmt","rt","v1","Count"],"kind":"enum"},"6:572:4142":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"2:39311:101":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"16:6052:13759":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"1:6743:14816":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"1:8489:3638":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"17:11235:11329":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"1:5896:10145":{"crate_id":1,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"6:4681:7514":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"2:22156:171":{"crate_id":2,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"6:4662:7512":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"2:2796:3578":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"1:11828:14665":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"2:2937:3592":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"16:2509:11971":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"2:45909:12685":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"17:12630:11666":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"20:1615:4978":{"crate_id":20,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"6:6611:4918":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"16:5447:13725":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"20:4372:7478":{"crate_id":20,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"16:7511:12171":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"17:13327:11868":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"20:7523:7700":{"crate_id":20,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"2:12181:34354":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"17:9317:13666":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"2:6608:20130":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"12:2205:3641":{"crate_id":12,"path":["hashbrown","TryReserveError"],"kind":"enum"},"2:2503:235":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"5:4253:242":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"5:3937:10056":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"1:904:10078":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"17:9108:13657":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"6:1609:4977":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"1:3199:3694":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"2:44681:12618":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"1:7581:12715":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"2:44729:12619":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"5:6963:10067":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"20:7488:7695":{"crate_id":20,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"2:2732:3710":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"6:4850:7531":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"1:8928:2142":{"crate_id":1,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"12:815:13791":{"crate_id":12,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"6:6743:8603":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"6:7386:9118":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"1:4842:14753":{"crate_id":1,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"6:1747:4988":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"2:45443:12650":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"17:13184:11817":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"6:4439:7492":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"20:6253:1731":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","SOCK_DGRAM"],"kind":"constant"},"2:44296:12602":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"2:4164:9792":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"6:4945:7541":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"5:6525:10104":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"16:6654:12100":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"1:1568:9581":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"16:7956:12008":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"2:8608:79":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"1:8164:3669":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"2:44380:12605":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"1:5168:187":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"1:11343:2144":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"5:2893:9634":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"20:5987:8183":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"20:4570:7500":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"6:7475:7699":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"20:943:2655":{"crate_id":20,"path":["libc","unix","linux_like","IP_TOS"],"kind":"constant"},"17:13071:11785":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"2:38928:12559":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"1:5359:13467":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"1:3238:3690":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"16:7452:195":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"20:1607:4977":{"crate_id":20,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"1:11461:12755":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"1:3899:14734":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"17:10445:11265":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"1:413:162":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"1:3971:14739":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"20:6032:8186":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"6:4900:7537":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"2:39344:13068":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"17:12118:11508":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"1:4100:9894":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"5:6692:10108":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"2:14:1652":{"crate_id":2,"path":["core","write"],"kind":"macro"},"17:10121:11251":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"17:10625:11288":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"17:11708:11429":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"2:11526:3643":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"2:45026:12628":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"2:1581:1344":{"crate_id":2,"path":["core","mem","size_of"],"kind":"function"},"17:8871:13653":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"2:42125:12586":{"crate_id":2,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"17:9909:11215":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"20:546:2977":{"crate_id":20,"path":["libc","unix","pollfd"],"kind":"struct"},"2:1712:9260":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"2:22123:174":{"crate_id":2,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"17:10385:12826":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"20:1581:4974":{"crate_id":20,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"18:80:25330":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"20:4979:7540":{"crate_id":20,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"17:11734:11221":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"17:9671:13684":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"17:8441:21593":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"20:5783:3015":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"1:962:13797":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"20:578:4143":{"crate_id":20,"path":["libc","unix","tms"],"kind":"struct"},"17:9165:36117":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"1:3446:3664":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"20:104:1754":{"crate_id":20,"path":["libc","unix","IPPROTO_TCP"],"kind":"constant"},"2:4577:19978":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"20:7260:8978":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"20:4479:7491":{"crate_id":20,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"5:4847:3655":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"2:21106:14823":{"crate_id":2,"path":["core","core_simd","ord","SimdPartialOrd"],"kind":"trait"},"1:11874:1475":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"9:188:20486":{"crate_id":9,"path":["miniz_oxide","deflate","core","HuffmanOxide"],"kind":"struct"},"16:2793:11983":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"14:0:3413":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"1:7580:14742":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"1:847:3638":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"5:2904:14506":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"2:44204:12598":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"6:1559:4972":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"1:2212:2796":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"2:48926:243":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"2:11278:13117":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"2:38944:13834":{"crate_id":2,"path":["core","any","tags","MaybeSizedValue"],"kind":"struct"},"16:4817:12040":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"16:6137:12908":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"17:12176:11516":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"2:2129:580":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"1:10845:26122":{"crate_id":1,"path":["std","sys","unix","process","process_common","ProgramKind"],"kind":"enum"},"16:2657:11977":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"17:11500:11397":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"2:3989:13823":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"2:2859:3588":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"6:6059:7386":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"1:4891:14758":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"20:7271:2479":{"crate_id":20,"path":["libc","unix","linux_like","linux","arch","generic","SO_RCVBUF"],"kind":"constant"},"1:4552:14737":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"1:10690:129":{"crate_id":1,"path":["std","sys","unix","fs","FileType"],"kind":"struct"},"17:12674:11697":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"2:11791:111":{"crate_id":2,"path":["core","str","lossy","Debug"],"kind":"struct"},"2:39562:13084":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"12:274:12987":{"crate_id":12,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"5:677:110":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"17:10403:11292":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"17:11343:11361":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"6:7498:7702":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"1:8975:13888":{"crate_id":1,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"2:44358:12604":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"6:653:4189":{"crate_id":6,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"6:4597:7506":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"17:12836:11730":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"16:7890:12979":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"16:5614:12859":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"20:4921:7533":{"crate_id":20,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"1:0:1370":{"crate_id":1,"path":["std"],"kind":"module"},"14:215:12984":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"17:11841:11449":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"18:590:11083":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"2:43393:20215":{"crate_id":2,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"1:10626:13899":{"crate_id":1,"path":["std","sys","unix","fd","FileDesc"],"kind":"struct"},"16:4849:12041":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"16:6528:12934":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"18:614:36130":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"2:11389:9680":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"17:12964:11760":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"17:8241:21586":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"16:7059:9220":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"20:105:1757":{"crate_id":20,"path":["libc","unix","IPPROTO_UDP"],"kind":"constant"},"5:6985:9581":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"2:2757:3714":{"crate_id":2,"path":["core","marker","FnPtr"],"kind":"trait"},"1:1824:13851":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"2:46637:12704":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"12:822:14674":{"crate_id":12,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"2:39551:13083":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"2:2678:223":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"2:3165:134":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"2:45489:12651":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"2:41146:85":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"17:13158:11811":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"1:7845:118":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"20:2433:1760":{"crate_id":20,"path":["libc","unix","linux_like","linux","IPPROTO_MPTCP"],"kind":"constant"},"0:621:1745":{"crate_id":0,"path":["socket2","Protocol"],"kind":"struct"},"6:4781:7524":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"20:4489:7492":{"crate_id":20,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"2:50214:12713":{"crate_id":2,"path":["core","core_simd","vector","ptr","SimdConstPtr"],"kind":"struct"},"16:5235:12046":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"7:32:20430":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"6:6053:8216":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"1:8758:12734":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"1:929:13790":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"16:2389:11966":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"1:10833:13464":{"crate_id":1,"path":["std","sys","unix","process","process_common","Stdio"],"kind":"enum"},"18:491:12794":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"1:5323:13465":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"20:4770:7518":{"crate_id":20,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"18:538:11080":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"17:9805:11276":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"17:13047:11778":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"16:2261:20640":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"17:9293:13664":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"2:29712:14731":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"2:46584:12701":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"6:1687:4983":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"1:11873:730":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"1:5912:203":{"crate_id":1,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"1:11864:1457":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"1:5236:119":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"20:644:1933":{"crate_id":20,"path":["libc","unix","linux_like","sa_family_t"],"kind":"typedef"},"20:7270:2511":{"crate_id":20,"path":["libc","unix","linux_like","linux","arch","generic","SO_SNDBUF"],"kind":"constant"},"20:4621:7504":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"2:48887:243":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"17:11748:11437":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"1:2572:3674":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"2:42636:13120":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"6:4353:7481":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"2:2347:2858":{"crate_id":2,"path":["core","cmp","min"],"kind":"function"},"6:5786:8133":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"17:10875:11299":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"6:62:3766":{"crate_id":6,"path":["libc","unix","DIR"],"kind":"enum"},"20:5973:8181":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"16:6270:11990":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"2:44536:12612":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"16:2579:11974":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"6:7428:7692":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"2:46447:12692":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"1:3668:2801":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"1:4630:14743":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"16:7044:36113":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"2:38752:197":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"2:3242:3605":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"17:11356:11362":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"1:10824:12428":{"crate_id":1,"path":["std","sys","unix","os_str","Buf"],"kind":"struct"},"2:25596:12484":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"2:9323:3616":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"17:9223:21604":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"1:2865:207":{"crate_id":1,"path":["std","io","error","Result"],"kind":"typedef"},"16:2605:11975":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"12:1138:13802":{"crate_id":12,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"2:42382:9665":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"16:6735:13762":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"20:4777:7519":{"crate_id":20,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"2:20847:14742":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"2:44851:12623":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"1:8157:3673":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"6:4687:2941":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"20:4687:7509":{"crate_id":20,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"17:10583:21595":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"2:9286:140":{"crate_id":2,"path":["core","hash","macros","Hash"],"kind":"proc_derive"},"20:6691:8598":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"16:6743:21530":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"1:4424:14744":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"1:2538:3682":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"5:2157:34819":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"20:7470:7692":{"crate_id":20,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"20:7272:2442":{"crate_id":20,"path":["libc","unix","linux_like","linux","arch","generic","SO_KEEPALIVE"],"kind":"constant"},"17:10532:127":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"20:4458:7488":{"crate_id":20,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"16:4689:12036":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"2:1726:12456":{"crate_id":2,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"2:9064:9742":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"17:10949:11306":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"2:39174:12563":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"2:43512:208":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"2:44775:12620":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"1:9383:10165":{"crate_id":1,"path":["std","sys","unix","fs","Dir"],"kind":"struct"},"1:3863:3746":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"6:4988:7546":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"16:6376:21528":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"0:543:1785":{"crate_id":0,"path":["socket2","MaybeUninitSlice"],"kind":"struct"},"1:1592:12997":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"17:12361:11552":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"20:4737:2941":{"crate_id":20,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"20:847:1710":{"crate_id":20,"path":["libc","unix","linux_like","AF_INET"],"kind":"constant"},"6:1723:1936":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"20:106:2534":{"crate_id":20,"path":["libc","unix","IPPROTO_IP"],"kind":"constant"},"2:43164:19927":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"1:3913:14735":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"2:22354:166":{"crate_id":2,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"18:96:25331":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"1:11863:1378":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"1:1586:12996":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"1:2475:3681":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"20:5038:7545":{"crate_id":20,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"1:8835:12738":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"17:10894:11302":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"12:659:9581":{"crate_id":12,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"20:4411:7482":{"crate_id":20,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"20:1033:2719":{"crate_id":20,"path":["libc","unix","linux_like","IPV6_UNICAST_HOPS"],"kind":"constant"},"2:41362:9741":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"17:10921:11303":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"2:2766:3573":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"2:2782:3572":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"17:12948:11757":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"16:5737:12875":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"20:5980:8182":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"17:8368:21590":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"6:4766:7522":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"12:985:12964":{"crate_id":12,"path":["hashbrown","map","Entry"],"kind":"enum"},"17:10466:12830":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"17:13039:11777":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"2:3932:3655":{"crate_id":2,"path":["core","array","Guard"],"kind":"struct"},"1:8848:14783":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"6:6791:8607":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"18:0:3417":{"crate_id":18,"path":["memchr"],"kind":"module"},"2:22786:12483":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"20:6670:8595":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"5:7180:221":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"16:6781:13763":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"16:6865:12963":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"1:6359:13865":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"12:777:10049":{"crate_id":12,"path":["hashbrown","map","ConsumeAllOnDrop"],"kind":"struct"},"2:12208:189":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"1:7700:13869":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"20:4298:7472":{"crate_id":20,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"16:7497:11996":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"2:46660:12705":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"1:3665:2144":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"2:4367:9794":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"1:11877:1474":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"20:5702:8104":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"6:578:4143":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"1:6468:13470":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"17:12237:11530":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"2:4768:785":{"crate_id":2,"path":["core","iter"],"kind":"module"},"20:553:4140":{"crate_id":20,"path":["libc","unix","winsize"],"kind":"struct"},"6:561:2449":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"2:7136:149":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"18:755:12811":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"17:12638:11667":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"16:4413:12028":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"16:3566:12015":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"1:8917:13882":{"crate_id":1,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"2:40906:81":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"1:5682:13861":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"20:7266:2246":{"crate_id":20,"path":["libc","unix","linux_like","linux","arch","generic","SO_TYPE"],"kind":"constant"},"1:933:13791":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"2:9889:3638":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"5:6667:10096":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"2:43337:13167":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"2:42790:13127":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"2:40733:207":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"5:4664:658":{"crate_id":5,"path":["alloc","fmt"],"kind":"module"},"12:1518:20603":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"17:8911:36123":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"15:0:3414":{"crate_id":15,"path":["addr2line"],"kind":"module"},"2:12160:19995":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"17:11436:11369":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"2:2745:3711":{"crate_id":2,"path":["core","marker","Tuple"],"kind":"trait"},"2:48939:243":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"1:8144:3671":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"2:39421:9655":{"crate_id":2,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"16:5460:12847":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"2:11585:19912":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"5:3656:13810":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"17:13536:11931":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"11:36:12358":{"crate_id":11,"path":["adler","algo","U32X4"],"kind":"struct"},"2:2847:3585":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"17:9382:11199":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"20:5057:7548":{"crate_id":20,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"1:3118:14375":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"5:1216:13798":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"1:4671:2113":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"1:7793:13870":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"1:9115:26147":{"crate_id":1,"path":["std","sys","common","thread_local","fast_local","fast","DtorState"],"kind":"enum"},"1:5056:188":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"2:39441:13835":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"6:4673:7513":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"1:3927:14737":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"5:1401:12994":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"12:1065:36094":{"crate_id":12,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"1:2612:3684":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"2:42413:9657":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"5:621:13806":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"20:540:2918":{"crate_id":20,"path":["libc","unix","iovec"],"kind":"struct"},"8:0:3408":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"16:2320:11963":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"2:41588:67":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"2:43218:13158":{"crate_id":2,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"16:5184:20638":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"17:13374:11886":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"16:3632:12017":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"16:7237:12162":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"20:4357:7476":{"crate_id":20,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"2:39481:13072":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"6:5800:8171":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"18:507:11075":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"17:9155:13658":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"1:870:9581":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"17:11684:11428":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"12:1029:13799":{"crate_id":12,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"2:2687:2803":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"17:13214:11823":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"5:5041:1348":{"crate_id":5,"path":["alloc","slice"],"kind":"module"},"20:1721:1936":{"crate_id":20,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"1:6880:26210":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"2:2248:105":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"17:11893:11454":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"17:10310:13720":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"1:621:13841":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"2:9056:119":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"2:6851:3698":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"2:42484:9671":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"16:6146:12909":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"17:12980:11764":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"6:6000:8187":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"17:9183:13659":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"2:46239:12688":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"20:525:2872":{"crate_id":20,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"20:567:4141":{"crate_id":20,"path":["libc","unix","sigval"],"kind":"struct"},"2:39643:13091":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"17:13580:11938":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"5:3595:10056":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"17:12307:11538":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"2:12480:9653":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"20:5993:8184":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"1:11013:12735":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"1:6119:13863":{"crate_id":1,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"6:4457:7494":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"16:7388:13780":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"1:3314:3699":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"17:9526:13678":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"6:6757:8604":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"1:8437:3636":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"20:7553:9146":{"crate_id":20,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"6:4787:7525":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"2:20697:14820":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"1:11870:732":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"2:39198:13053":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"20:4403:7481":{"crate_id":20,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"17:10721:11291":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"1:355:13838":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"20:976:2610":{"crate_id":20,"path":["libc","unix","linux_like","IP_DROP_SOURCE_MEMBERSHIP"],"kind":"constant"},"16:6210:12914":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"1:8225:9896":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"17:8596:11185":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"20:4287:7471":{"crate_id":20,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"6:7521:2870":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"6:4322:7478":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"17:247:13640":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"1:484:10137":{"crate_id":1,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"1:11881:1110":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"20:4862:988":{"crate_id":20,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"6:4559:7503":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"17:8941:13654":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"20:4816:7522":{"crate_id":20,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"20:1729:4987":{"crate_id":20,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"2:2682:225":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"5:2065:10071":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"6:1550:1935":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"17:11271:11334":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"1:950:13794":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"2:2339:186":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"2:21371:14821":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"2:21713:33136":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"16:7557:12971":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"6:4307:7476":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"2:9058:9733":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"11:0:3411":{"crate_id":11,"path":["adler"],"kind":"module"},"2:40826:84":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"2:11103:20174":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"2:42452:9656":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"2:20823:14742":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","sealed","Sealed"],"kind":"trait"},"20:4589:7501":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"2:10732:9668":{"crate_id":2,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"6:4468:7495":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"17:10997:11308":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"5:768:96":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"16:6842:12962":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"5:1370:9581":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"16:7942:13785":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"16:3026:11100":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"17:11199:11327":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"16:7298:12969":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"2:44274:12601":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"2:2494:74":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"12:1845:10046":{"crate_id":12,"path":["hashbrown","set","DrainFilter"],"kind":"struct"},"17:11528:11403":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"16:4635:12034":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"2:12425:139":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"17:13221:11825":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"17:9362:11204":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"17:11106:11315":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"2:44228:12599":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"17:8822:36116":{"crate_id":17,"path":["object","read","any","FileInternal"],"kind":"enum"},"6:7481:7700":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"12:1044:20602":{"crate_id":12,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"6:5805:8172":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"18:727:11097":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"5:2894:35897":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"20:4647:7506":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"2:40801:180":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"17:12291:11536":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"16:6790:12110":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"1:9064:216":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"2:8781:32591":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"6:4841:7530":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"20:6563:8592":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"17:10075:13706":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"2:39888:13100":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"1:7518:10161":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"1:8864:14782":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"16:5388:11991":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"17:10682:11290":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"20:955:2665":{"crate_id":20,"path":["libc","unix","linux_like","IP_RECVTOS"],"kind":"constant"},"9:863:20446":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"5:3105:3638":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"20:7276:2450":{"crate_id":20,"path":["libc","unix","linux_like","linux","arch","generic","SO_LINGER"],"kind":"constant"},"17:8774:11190":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"2:39921:13102":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"20:5855:8173":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"1:10047:13891":{"crate_id":1,"path":["std","sys","unix","os_str","Slice"],"kind":"struct"},"6:5878:8176":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"2:43520:192":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"6:5690:8164":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"20:4927:7534":{"crate_id":20,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"1:8347:3633":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"20:7283:2489":{"crate_id":20,"path":["libc","unix","linux_like","linux","arch","generic","SO_RCVTIMEO"],"kind":"constant"},"2:22057:172":{"crate_id":2,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"5:1201:13799":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"2:3150:3597":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"16:4357:12026":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"2:46699:12706":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"5:4268:10084":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"20:6554:4018":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"16:4385:12027":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"17:12087:11502":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"5:4751:201":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"2:2333:179":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"1:9978:13851":{"crate_id":1,"path":["std","sys","unix","os","SplitPaths"],"kind":"struct"},"5:6107:10096":{"crate_id":5,"path":["alloc","vec","drain_filter","drop","BackshiftOnDrop"],"kind":"struct"},"2:2851:3586":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"16:6059:36111":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"14:40:11308":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"17:9857:13700":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"20:4712:7512":{"crate_id":20,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"18:113:25332":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"6:5752:8169":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"20:5885:8175":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"2:20854:14824":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"2:43175:13149":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"17:10088:11248":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"18:766:25342":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"2:9559:10130":{"crate_id":2,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"16:6676:11997":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"2:39865:13097":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"2:2835:3583":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"1:8506:3640":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"18:644:11075":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"1:7704:13833":{"crate_id":1,"path":["std","error","private","Internal"],"kind":"struct"},"2:43555:13315":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"5:3138:12997":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"17:12768:11713":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"16:7909:12982":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"17:11909:11459":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"17:10608:11160":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"1:8983:12742":{"crate_id":1,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"6:7218:8978":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"2:1894:9263":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"20:4599:7502":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"1:5751:10147":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"6:4451:7493":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"1:679:14598":{"crate_id":1,"path":["std","backtrace","LazilyResolvedCapture"],"kind":"struct"},"16:2894:20666":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"9:19:20513":{"crate_id":9,"path":["miniz_oxide","deflate","buffer","HashBuffers"],"kind":"struct"},"12:834:13794":{"crate_id":12,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"1:11160:13185":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"1:8880:14784":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"20:4609:7503":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"5:1230:13802":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"1:11880:1528":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"1:9371:128":{"crate_id":1,"path":["std","sys","unix","fs","File"],"kind":"struct"},"18:736:25341":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"1:3603:3557":{"crate_id":1,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"2:29935:1639":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"17:0:3416":{"crate_id":17,"path":["object"],"kind":"module"},"12:646:9669":{"crate_id":12,"path":["hashbrown","map","IterMut"],"kind":"struct"},"2:9068:9739":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"1:10222:14515":{"crate_id":1,"path":["std","sys","unix","process","process_common","Argv"],"kind":"struct"},"2:41901:3620":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"2:2679:222":{"crate_id":2,"path":["core","marker","StructuralEq"],"kind":"trait"},"5:5124:10056":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"17:13203:11822":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"1:11857:411":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"20:6833:8607":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"16:7211:12161":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"1:8810:9581":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"5:4968:10090":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"2:3177:3601":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"5:1983:13810":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"17:12695:11702":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"16:6316:12926":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"17:13148:11808":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"16:4297:12024":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"13:110:36096":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"2:4358:10113":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"2:39571:13085":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"2:39872:13098":{"crate_id":2,"path":["core","iter","sources","from_generator","FromGenerator"],"kind":"struct"},"1:9088:3608":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"16:6161:21527":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"1:925:13789":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"16:6903:12742":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"2:1618:3544":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"17:9930:11217":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"20:5031:7544":{"crate_id":20,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"2:41673:71":{"crate_id":2,"path":["core","fmt","ArgumentV1"],"kind":"struct"},"17:13100:11793":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"1:6318:13864":{"crate_id":1,"path":["std","sync","mutex","fmt","LockedPlaceholder"],"kind":"struct"},"2:10020:9666":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"2:40725:190":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"20:6252:1727":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","SOCK_STREAM"],"kind":"constant"},"16:6123:11987":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"18:599:36131":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"18:609:13633":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"20:122:3815":{"crate_id":20,"path":["libc","unix","fpos_t"],"kind":"enum"},"1:4833:14752":{"crate_id":1,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"5:951:10056":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"2:21515:13033":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"17:11315:11351":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"2:40540:1641":{"crate_id":2,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"12:1852:12995":{"crate_id":12,"path":["hashbrown","set","Intersection"],"kind":"struct"},"2:41725:73":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"1:8236:9891":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"1:5995:10149":{"crate_id":1,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"6:1899:5129":{"crate_id":6,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"16:5996:13734":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"2:38768:195":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"16:7135:36114":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"16:7396:21533":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"16:4217:12022":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"1:920:13803":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"2:20641:14828":{"crate_id":2,"path":["core","core_simd","elements","uint","SimdUint"],"kind":"trait"},"1:7592:13867":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"5:7194:13017":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"2:43321:13163":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"2:43333:13166":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"1:10650:13179":{"crate_id":1,"path":["std","sys","unix","fs","StatxExtraFields"],"kind":"struct"},"6:4981:7544":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"2:21275:33821":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"6:5759:8170":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"20:7269:2424":{"crate_id":20,"path":["libc","unix","linux_like","linux","arch","generic","SO_BROADCAST"],"kind":"constant"},"6:5951:8184":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"6:4862:7532":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"2:31725:13833":{"crate_id":2,"path":["core","error","private","Internal"],"kind":"struct"},"2:39297:12564":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"1:4092:9893":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"0:633:1775":{"crate_id":0,"path":["socket2","RecvFlags"],"kind":"struct"},"17:13393:11892":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"2:42654:13121":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"15:214:20625":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"20:970:2623":{"crate_id":20,"path":["libc","unix","linux_like","IP_MULTICAST_LOOP"],"kind":"constant"},"6:5959:8185":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"1:1597:12998":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"2:40398:152":{"crate_id":2,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"1:11882:13":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"2:1527:3655":{"crate_id":2,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"6:6643:8597":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"6:1514:2874":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"17:8475:21571":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"1:11862:1348":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"1:4316:2867":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"17:9791:12817":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"2:46301:12689":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"19:0:1017":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"17:11873:11453":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"20:968:2615":{"crate_id":20,"path":["libc","unix","linux_like","IP_MULTICAST_IF"],"kind":"constant"},"6:4483:7497":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"5:2900:14505":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"1:4669:2112":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"5:2896:12452":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"17:10374:12822":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"1:8746:183":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"1:6471:14778":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"2:42572:3672":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"2:41940:13111":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"6:5772:8132":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"13:0:3406":{"crate_id":13,"path":["std_detect"],"kind":"module"},"12:1003:13798":{"crate_id":12,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"20:6101:7386":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"6:7487:7701":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"2:43021:13144":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"20:5828:8133":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"2:8999:207":{"crate_id":2,"path":["core","fmt","Result"],"kind":"typedef"},"6:4583:7505":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"2:42392:9663":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"17:3249:13652":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"17:12972:11762":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"17:11186:11326":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"2:5921:13022":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"6:5728:8168":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"1:6922:10160":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"17:10182:11254":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"2:20449:33855":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"17:1903:21633":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"16:7483:12006":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"2:3505:10078":{"crate_id":2,"path":["core","array","drain","Drain"],"kind":"struct"},"16:5761:13727":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"5:4069:3655":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"1:10418:3689":{"crate_id":1,"path":["std","sys","unix","stdio","Stderr"],"kind":"struct"},"1:8740:13879":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"13:226:12351":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"14:202:19928":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"2:7197:9149":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"1:734:141":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"17:10845:11265":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"2:39542:13082":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"20:5002:7542":{"crate_id":20,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"1:8101:2108":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"2:41355:9733":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"5:6506:10092":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"12:2053:12964":{"crate_id":12,"path":["hashbrown","set","Entry"],"kind":"enum"},"17:11951:11480":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"17:13478:11914":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"9:920:20445":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"1:8296:2863":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"20:7494:7696":{"crate_id":20,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"17:10296:13719":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"6:4637:7509":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"2:40946:88":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"20:6121:8217":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"2:39668:13094":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"5:2075:13002":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"20:6136:8218":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"20:6572:8593":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"20:6530:4178":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"20:4396:7480":{"crate_id":20,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"16:4327:12025":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"17:12550:11605":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"20:5847:8172":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"2:9445:10121":{"crate_id":2,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"20:6761:8601":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"16:4721:12037":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"17:8162:21584":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"5:208:10054":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"2:4742:33311":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"1:5552:10145":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"17:12103:11504":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"17:9401:11201":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"2:40589:178":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"2:9981:9680":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"1:4979:13855":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"9:956:20444":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"16:7372:36108":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"2:42970:19926":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"2:21749:12481":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"0:0:1824":{"crate_id":0,"path":["socket2"],"kind":"module"},"17:12934:11754":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"18:521:25343":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"2:43341:12592":{"crate_id":2,"path":["core","time","Nanoseconds"],"kind":"struct"},"2:41186:92":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"1:3281:3678":{"crate_id":1,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"1:1074:13799":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"6:4656:7511":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"20:1708:4986":{"crate_id":20,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"5:3515:3638":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"1:7869:3685":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"2:46532:12697":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"1:505:10071":{"crate_id":1,"path":["std","thread","PanicGuard"],"kind":"struct"},"6:553:4140":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"6:4476:7496":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"2:48861:243":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"6:6728:8602":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"2:42556:13114":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"20:6590:3924":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"18:481:12793":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"12:300:12990":{"crate_id":12,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"12:60:36093":{"crate_id":12,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"1:9107:3609":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"17:9577:11209":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"6:4396:7486":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"1:8252:9898":{"crate_id":1,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"1:10946:10171":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"9:827:20545":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"17:9031:36120":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"16:5203:11180":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"18:699:12802":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"16:7469:12005":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"20:5932:8177":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"2:3977:13822":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"17:13459:11909":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"15:193:20621":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"12:98:12986":{"crate_id":12,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"6:7469:7698":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"2:43007:13141":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"17:10490:11269":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"18:707:12804":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"17:8991:36121":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"5:1442:195":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"5:3907:10078":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"2:10186:9676":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"2:11636:19920":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"2:42754:13125":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"20:4661:3706":{"crate_id":20,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"16:6017:13748":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"17:10233:13714":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"2:11570:13827":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"18:660:13634":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"2:21775:14732":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"1:5545:203":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"2:39491:13074":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"5:6993:195":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"2:21697:33156":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"5:6294:9581":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"6:4248:7472":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"9:800:12412":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"1:11070:12753":{"crate_id":1,"path":["std","sys","unix","time","Timespec"],"kind":"struct"},"20:7517:7699":{"crate_id":20,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"20:6009:10879":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"6:6667:8599":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"20:4825:7523":{"crate_id":20,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"2:10058:9681":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"20:7237:8976":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"20:4384:7479":{"crate_id":20,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"1:11867:632":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"2:45207:12646":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"20:7265:2500":{"crate_id":20,"path":["libc","unix","linux_like","linux","arch","generic","SO_REUSEADDR"],"kind":"constant"},"2:4303:10112":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"1:11860:1035":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"2:8186:9224":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"17:9712:11212":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"16:5793:12838":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"2:2830:3581":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"2:43329:13165":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"17:11813:11445":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"6:4402:7487":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"6:6698:8600":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"17:9722:11213":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"17:9831:13695":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"6:7463:7697":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"20:4940:7536":{"crate_id":20,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"2:42860:13130":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"2:39158:33154":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"20:5920:8176":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"17:12278:11535":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"1:5010:13855":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"2:9060:9732":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"6:7434:7693":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"16:7825:12217":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"1:2216:3663":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"20:5842:8171":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"6:1704:4985":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"20:1063:2738":{"crate_id":20,"path":["libc","unix","linux_like","IPV6_RECVTCLASS"],"kind":"constant"},"20:651:4189":{"crate_id":20,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"6:5716:8166":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"16:5558:21524":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"9:505:20587":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"2:8187:9223":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"6:4549:7502":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"1:7828:129":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"16:7166:21532":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"1:3453:3666":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"20:5758:8166":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"17:12060:11498":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"1:939:14674":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"1:7677:2104":{"crate_id":1,"path":["std","collections","hash","map","DefaultHasher"],"kind":"struct"},"6:1604:4976":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"9:709:3634":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"20:6709:8599":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"20:7482:7694":{"crate_id":20,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"1:11247:13192":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"6:6496:4914":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"2:44429:12607":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"20:1702:4985":{"crate_id":20,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"20:7540:7702":{"crate_id":20,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"2:43381:3612":{"crate_id":2,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"2:20447:33858":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"17:10350:11260":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"2:7252:156":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"20:61:3766":{"crate_id":20,"path":["libc","unix","DIR"],"kind":"enum"},"1:1847:9956":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"2:40674:9220":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"16:4519:12030":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"1:646:14662":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"17:9681:11138":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"2:7522:3642":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"6:5741:3015":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"2:8613:86":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"2:48913:243":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"20:4845:7526":{"crate_id":20,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"6:1509:2871":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"17:8526:11182":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"6:4334:7479":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"1:3975:14740":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"2:40455:3556":{"crate_id":2,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"2:2588:127":{"crate_id":2,"path":["core","error","Error"],"kind":"trait"},"17:12730:11703":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"2:41369:9742":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"17:11247:11332":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"6:5938:8182":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"11:44:12359":{"crate_id":11,"path":["adler","Adler32"],"kind":"struct"},"16:7309:12002":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"2:48900:243":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"2:43502:202":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"17:8951:36119":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"5:6971:34814":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"16:5374:11988":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"2:44827:12622":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"2:4387:3716":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"16:3188:12012":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"17:420:11146":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"6:4890:7536":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"20:6001:8185":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"2:44499:12610":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"17:12514:11574":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"1:3536:1640":{"crate_id":1,"path":["std","net"],"kind":"module"},"1:3389:2109":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"17:13594:11941":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"2:42992:13135":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"2:2771:3570":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"5:851:10063":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"5:5746:10090":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"6:499:4137":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"1:3770:2802":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"17:8881:36122":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"2:2841:3584":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"1:8495:3639":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"17:10332:21700":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"16:5839:21526":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"16:6070:12054":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"20:4439:7485":{"crate_id":20,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"2:44873:12624":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"4:0:3407":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"16:6472:12085":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"2:40640:9580":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"16:5878:20639":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"6:5910:8179":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"6:4489:7498":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"5:1969:3685":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"17:10497:21702":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"20:43:1690":{"crate_id":20,"path":["libc","unix","c_int"],"kind":"typedef"},"2:9070:9740":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"17:9475:13676":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"1:914:10046":{"crate_id":1,"path":["std","collections","hash","map","DrainFilter"],"kind":"struct"},"12:387:36089":{"crate_id":12,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"2:20695:14742":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"1:2370:14726":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"2:42878:13132":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"20:1035:2691":{"crate_id":20,"path":["libc","unix","linux_like","IPV6_MULTICAST_HOPS"],"kind":"constant"},"1:11868:633":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"16:7329:12003":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"17:9658:13683":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"6:4994:7547":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"5:3528:9669":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"6:7201:8977":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"1:8479:3637":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"2:39619:11091":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"16:8056:12229":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"20:4274:7470":{"crate_id":20,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"17:8295:21588":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"6:594:4145":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"2:46512:12695":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"20:855:1713":{"crate_id":20,"path":["libc","unix","linux_like","AF_INET6"],"kind":"constant"},"2:1800:9262":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"5:5574:229":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"2:20666:14818":{"crate_id":2,"path":["core","core_simd","eq","SimdPartialEq"],"kind":"trait"},"12:0:3412":{"crate_id":12,"path":["hashbrown"],"kind":"module"},"1:7480:13901":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"17:11217:11328":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"2:38737:3594":{"crate_id":2,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"17:11761:11438":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"2:3190:33852":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"2:6911:10148":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"6:6488:4178":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"2:9938:3673":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"17:13114:11800":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"20:4518:7495":{"crate_id":20,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"20:4678:7508":{"crate_id":20,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"1:1051:12964":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"20:926:1782":{"crate_id":20,"path":["libc","unix","linux_like","MSG_TRUNC"],"kind":"constant"},"5:3146:12995":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"1:11479:12756":{"crate_id":1,"path":["std","personality","dwarf","eh","EHContext"],"kind":"struct"},"17:9778:12816":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"1:10820:13869":{"crate_id":1,"path":["std","sys","unix","os","JoinPathsError"],"kind":"struct"},"6:1695:4984":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"2:2808:3577":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"5:5640:10078":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"2:41026:89":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"17:13340:11874":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"12:1866:12997":{"crate_id":12,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"20:5732:8164":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"2:9544:10125":{"crate_id":2,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"2:30516:180":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"16:8014:12160":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"2:6702:20122":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"2:39328:33152":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"6:4224:7470":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"17:12884:11737":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"1:7537:10163":{"crate_id":1,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"2:3376:19947":{"crate_id":2,"path":["core","any","Provider"],"kind":"trait"},"5:771:10058":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"16:2631:11976":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"1:9048:164":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"16:7343:12004":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"2:20744:12460":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"20:5051:7547":{"crate_id":20,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"16:2535:11972":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"6:6628:8595":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"2:42736:13124":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"2:40527:3560":{"crate_id":2,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"17:13572:11935":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"12:1120:13801":{"crate_id":12,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"2:9328:3617":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"20:6815:8606":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"2:29941:3549":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"2:38951:9793":{"crate_id":2,"path":["core","any","tags","Ref"],"kind":"struct"},"17:13557:11934":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"2:2228:98":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"20:487:3023":{"crate_id":20,"path":["libc","unix","timeval"],"kind":"struct"},"16:4574:12032":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"17:10394:12827":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"16:7426:13781":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"16:6109:12057":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"5:1066:35942":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"1:8997:25723":{"crate_id":1,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"2:4241:13826":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"2:21568:12463":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"1:5488:3873":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"1:2207:128":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"2:38792:196":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"20:4855:7527":{"crate_id":20,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"2:7095:20128":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"20:1038:2686":{"crate_id":20,"path":["libc","unix","linux_like","IPV6_DROP_MEMBERSHIP"],"kind":"constant"},"17:13404:11893":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"1:8397:3634":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"1:2344:14717":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"5:4099:3655":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"5:1185:12964":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"16:5815:21525":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"16:534:12836":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"2:4413:9795":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"5:1392:12993":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"2:3205:3604":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"1:4562:10963":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"16:6704:12105":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"20:7563:2870":{"crate_id":20,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"16:2411:11967":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"16:2433:11968":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"5:1302:94":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"2:7529:20126":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"20:4268:7469":{"crate_id":20,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"17:9303:11197":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"1:1898:13460":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"12:762:10046":{"crate_id":12,"path":["hashbrown","map","DrainFilter"],"kind":"struct"},"1:8170:3559":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"1:5559:10146":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"20:594:4145":{"crate_id":20,"path":["libc","unix","protoent"],"kind":"struct"},"1:588:14659":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"6:4828:7529":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"5:7087:14673":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"2:21111:14846":{"crate_id":2,"path":["core","core_simd","ord","SimdOrd"],"kind":"trait"},"17:10062:13705":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"1:11033:12592":{"crate_id":1,"path":["std","sys","unix","time","Nanoseconds"],"kind":"struct"},"1:11858:1491":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"6:5931:8181":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"1:4496:14749":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"2:43325:13164":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"12:751:10078":{"crate_id":12,"path":["hashbrown","map","Drain"],"kind":"struct"},"2:21636:33132":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"20:103:1751":{"crate_id":20,"path":["libc","unix","IPPROTO_ICMPV6"],"kind":"constant"},"2:39358:3732":{"crate_id":2,"path":["core","ffi","c_char"],"kind":"typedef"},"20:4363:7477":{"crate_id":20,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"0:609:1723":{"crate_id":0,"path":["socket2","Type"],"kind":"struct"},"1:11384:2801":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"5:2395:12449":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"17:12860:11735":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"12:1681:143":{"crate_id":12,"path":["hashbrown","set","HashSet"],"kind":"struct"},"2:11590:19911":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"1:11214:13189":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"7:0:1518":{"crate_id":7,"path":["unwind"],"kind":"module"},"6:6571:4942":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"2:2855:3587":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"1:6607:13864":{"crate_id":1,"path":["std","sync","rwlock","fmt","LockedPlaceholder"],"kind":"struct"},"20:1745:4988":{"crate_id":20,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"17:11974:11489":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"20:7267:2434":{"crate_id":20,"path":["libc","unix","linux_like","linux","arch","generic","SO_ERROR"],"kind":"constant"},"20:1037:2680":{"crate_id":20,"path":["libc","unix","linux_like","IPV6_ADD_MEMBERSHIP"],"kind":"constant"},"14:165:20608":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"6:4952:7542":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"1:8794:3638":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"6:1617:4978":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"16:2557:11973":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"10:0:3410":{"crate_id":10,"path":["rustc_std_workspace_alloc"],"kind":"module"},"2:45283:12648":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"5:277:9151":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"2:42474:9673":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"2:41709:9791":{"crate_id":2,"path":["core","fmt","FlagV1"],"kind":"enum"},"2:4122:13018":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"6:5967:10879":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"17:9738:12812":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"17:10245:13715":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"2:44897:12625":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"6:1652:4980":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"1:11405:2802":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"17:487:13642":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"2:39241:19985":{"crate_id":2,"path":["core","char","EscapeDefaultState"],"kind":"enum"},"17:11853:11450":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"6:5945:8183":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"1:638:13842":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"5:3151:35911":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"6:1716:2924":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"1:11241:13191":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"1:2830:10144":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"17:9897:13704":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"17:11997:11490":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"6:4877:7534":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"16:7319:12970":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"2:39316:3731":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"1:11320:10176":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"1:9997:14514":{"crate_id":1,"path":["std","sys","unix","os","Env"],"kind":"struct"},"20:55:2869":{"crate_id":20,"path":["libc","unix","ssize_t"],"kind":"typedef"},"2:43113:13147":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"2:46607:12702":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"6:1583:4974":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"2:31689:12355":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"6:4520:7500":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"1:8270:13468":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"20:473:2601":{"crate_id":20,"path":["libc","unix","group"],"kind":"struct"},"5:5168:9648":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"20:0:806":{"crate_id":20,"path":["libc"],"kind":"module"},"17:13506:11923":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"1:11871:733":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"2:44995:12627":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"2:39210:13054":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"2:40484:12573":{"crate_id":2,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"2:21369:14742":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"2:44948:12626":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"17:13031:11776":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"2:30035:33150":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum32"],"kind":"enum"},"1:6087:10153":{"crate_id":1,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"17:9700:13689":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"6:1731:4987":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"2:30533:3723":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"12:2184:12353":{"crate_id":12,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"17:13141:11807":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"5:6024:14857":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"17:12164:11514":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"5:6373:10056":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"20:6740:8600":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"1:11861:309":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"16:2825:11984":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"17:12739:11706":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"16:6345:11995":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"5:3112:12996":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"20:1507:2871":{"crate_id":20,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"20:5740:8165":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"16:5628:12860":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"5:5172:9649":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"9:649:20465":{"crate_id":9,"path":["miniz_oxide","deflate","core","TDEFLStatus"],"kind":"enum"},"1:6524:14510":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutex"],"kind":"struct"},"2:38812:199":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"2:40784:9669":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"17:1962:13649":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"6:4727:7519":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"2:42604:9674":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"2:46523:12696":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"20:1714:2924":{"crate_id":20,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"2:21659:12469":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"20:4378:7322":{"crate_id":20,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"2:21742:13040":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"20:969:2633":{"crate_id":20,"path":["libc","unix","linux_like","IP_MULTICAST_TTL"],"kind":"constant"},"17:10670:12833":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"2:20381:3723":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"17:11617:11416":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"2:10699:9667":{"crate_id":2,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"17:8814:128":{"crate_id":17,"path":["object","read","any","File"],"kind":"struct"},"1:8816:12737":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"16:6690:11998":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"1:3869:2861":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"16:6593:12946":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"17:10455:11268":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"2:42562:13115":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"17:562:11297":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"6:4237:7471":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"17:12251:11531":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"1:6282:163":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"1:8244:3559":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"}},"external_crates":{"20":{"name":"libc","html_root_url":null},"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":24}