{"root":"0:0:1706","crate_version":"0.4.4","includes_private":false,"index":{"1:6345:9631":{"id":"1:6345:9631","crate_id":1,"name":"CommandExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6346:8583","1:6347:8584","1:6348:13575","1:6349:57878","1:6351:57882","1:6353:57879","1:6354:57880","1:6356:57881"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10429:9634","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:304:2510":{"id":"0:304:2510","crate_id":0,"name":"set_only_v6","span":{"filename":"src/socket.rs","begin":[1504,4],"end":[1513,5]},"visibility":"public","docs":"Set the value for the `IPV6_V6ONLY` option on this socket.\n\nIf this is set to `true` then the socket is restricted to sending and\nreceiving IPv6 packets only. In this case two IPv4 and IPv6 applications\ncan bind the same port at the same time.\n\nIf this is set to `false` then the socket can be used to send and\nreceive packets from an IPv4-mapped IPv6 address.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["only_v6",{"kind":"primitive","inner":"bool"}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:3953:190","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3906-0:863:1678":{"id":"b:2:3906-0:863:1678","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3182:3177","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Any","id":"2:3904:68","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"TcpKeepalive","id":"0:863:1678","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3908:1397"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:3121-0:77:1595":{"id":"b:2:3121-0:77:1595","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:3080:144","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:3090:211","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"SockAddr","id":"0:77:1595","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3124:122","2:3125:1383"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:330:639":{"id":"0:330:639","crate_id":0,"name":"fmt","span":{"filename":"src/socket.rs","begin":[1767,4],"end":[1773,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"fmt::Formatter","id":"2:10058:129","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"fmt::Result","id":"2:10047:190","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:5555:9659":{"id":"1:5555:9659","crate_id":1,"name":"OsStringExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5556:55669","1:5557:10565"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10429:9634","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"a:2:9119:9067-0:837:1642":{"id":"a:2:9119:9067-0:837:1642","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"RefUnwindSafe","id":"2:9119:9067","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Protocol","id":"0:837:1642","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:3074:74":{"id":"2:3074:74","crate_id":2,"name":"AsRef","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3076:288"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3182:3177","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"2:8659:9570":{"id":"2:8659:9570","crate_id":2,"name":"FusedIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"2:8384:152","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"5:6025:3172":{"id":"5:6025:3172","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:8276:200"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["from",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8276:200","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12825:10002","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:4621:3262":{"id":"1:4621:3262","crate_id":1,"name":"BufRead","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4622:55353","1:4623:55354","1:4624:55356","1:4626:3261","1:4627:55355","1:4629:54169","1:4630:10815"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Read","id":"1:4539:1932","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:255:2302":{"id":"0:255:2302","crate_id":0,"name":"reuse_address","span":{"filename":"src/socket.rs","begin":[919,4],"end":[924,5]},"visibility":"public","docs":"Get the value of the `SO_REUSEADDR` option on this socket.\n\nFor more information about this option, see [`set_reuse_address`].\n\n[`set_reuse_address`]: Socket::set_reuse_address","links":{"Socket::set_reuse_address":"0:188:1596"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:3953:190","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"bool"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2783-0:188:1596":{"id":"b:2:2783-0:188:1596","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3182:3177","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"BorrowMut","id":"2:2777:9396","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Socket","id":"0:188:1596","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:2785:53607"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:859":{"id":"0:859","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[271,26],"end":[271,35]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"StructuralPartialEq","id":"2:3185:202","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"RecvFlags","id":"0:850:1658","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:89:287":{"id":"0:89:287","crate_id":0,"name":"as_ptr","span":{"filename":"src/sockaddr.rs","begin":[152,4],"end":[154,5]},"visibility":"public","docs":"Returns a raw pointer to the address.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"sockaddr","id":"20:1539:1588","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3121-0:850:1658":{"id":"b:2:3121-0:850:1658","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:3080:144","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:3090:211","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"RecvFlags","id":"0:850:1658","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3124:122","2:3125:1383"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:5:776-0:811:1611":{"id":"b:5:776-0:811:1611","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2799:100","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"kind":"resolved_path","inner":{"name":"ToOwned","id":"5:772:206","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Domain","id":"0:811:1611","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["5:778:9281","5:779:9282","5:780:9283"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"a:2:3218:3315-0:863:1678":{"id":"a:2:3218:3315-0:863:1678","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Unpin","id":"2:3218:3315","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"TcpKeepalive","id":"0:863:1678","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:188:1596":{"id":"0:188:1596","crate_id":0,"name":"Socket","span":{"filename":"src/socket.rs","begin":[72,0],"end":[74,1]},"visibility":"public","docs":"Owned wrapper around a system socket.\n\nThis type simply wraps an instance of a file descriptor (`c_int`) on Unix\nand an instance of `SOCKET` on Windows. This is the main type exported by\nthis crate and is intended to mirror the raw semantics of sockets on\nplatforms as closely as possible. Almost all methods correspond to\nprecisely one libc or OS API call which is essentially just a \"Rustic\ntranslation\" of what's below.\n\n## Converting to and from other types\n\nThis type can be freely converted into the network primitives provided by\nthe standard library, such as [`TcpStream`] or [`UdpSocket`], using the\n[`From`] trait, see the example below.\n\n[`TcpStream`]: std::net::TcpStream\n[`UdpSocket`]: std::net::UdpSocket\n\n# Notes\n\nSome methods that set options on `Socket` require two system calls to set\nthere options without overwriting previously set options. We do this by\nfirst getting the current settings, applying the desired changes and than\nupdating the settings. This means that the operation is **not** atomic. This\ncan lead to a data race when two threads are changing options in parallel.\n\n# Examples\n```no_run\n# fn main() -> std::io::Result<()> {\nuse std::net::{SocketAddr, TcpListener};\nuse socket2::{Socket, Domain, Type};\n\n// create a TCP listener bound to two addresses\nlet socket = Socket::new(Domain::IPV4, Type::STREAM, None)?;\n\nlet address: SocketAddr = \"[::1]:12345\".parse().unwrap();\nlet address = address.into();\nsocket.bind(&address)?;\nsocket.bind(&address)?;\nsocket.listen(128)?;\n\nlet listener: TcpListener = socket.into();\n// ...\n# drop(listener);\n# Ok(()) }\n```","links":{"std::net::TcpStream":"1:5281:1970","`From`":"2:3083:130","std::net::UdpSocket":"1:5406:2568"},"attrs":[],"deprecation":null,"kind":"struct","inner":{"struct_type":"plain","generics":{"params":[],"where_predicates":[]},"fields_stripped":true,"fields":[],"impls":["0:191","0:237","0:265","0:287","0:305","0:713","a:2:3177:195-0:188:1596","a:2:9118:9068-0:188:1596","a:2:9119:9067-0:188:1596","a:2:3189:204-0:188:1596","a:2:3218:3315-0:188:1596","b:2:3116-0:188:1596","b:2:3106-0:188:1596","b:2:3906-0:188:1596","b:2:3121-0:188:1596","b:2:3110-0:188:1596","b:2:2783-0:188:1596","b:2:2780-0:188:1596","0:311","0:315","0:320","0:324","0:329","0:793","0:795","0:797","0:799","0:801","0:803","0:717","0:719","0:721"]}},"0:758":{"id":"0:758","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[254,0],"end":[258,1]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"From","id":"2:3083:130","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"i32"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Protocol","id":"0:837:1642","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:759:660"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:718:2629":{"id":"0:718:2629","crate_id":0,"name":"as_raw_fd","span":{"filename":"src/sys/unix.rs","begin":[1998,4],"end":[2000,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"c_int","id":"20:63:1594","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:6367:9652":{"id":"1:6367:9652","crate_id":1,"name":"ExitStatusExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6368:1975","1:6369:3612","1:6370:57265","1:6371:57266","1:6372:57267","1:6373:1980"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10429:9634","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:820":{"id":"0:820","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[153,26],"end":[153,35]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"StructuralPartialEq","id":"2:3185:202","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Domain","id":"0:811:1611","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:229:2180":{"id":"0:229:2180","crate_id":0,"name":"send_vectored_with_flags","span":{"filename":"src/socket.rs","begin":[601,4],"end":[607,5]},"visibility":"public","docs":"Identical to [`send_vectored`] but allows for specification of arbitrary\nflags to the underlying `sendmsg`/`WSASend` call.\n\n[`send_vectored`]: Socket::send_vectored","links":{"Socket::send_vectored":"0:188:1596"},"attrs":["#[cfg(not(target_os = \"redox\"))]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["bufs",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"resolved_path","inner":{"name":"IoSlice","id":"1:10932:1934","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}}],["flags",{"kind":"resolved_path","inner":{"name":"c_int","id":"20:63:1594","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:3953:190","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:855:391":{"id":"0:855:391","crate_id":0,"name":"clone","span":{"filename":"src/lib.rs","begin":[271,15],"end":[271,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"RecvFlags","id":"0:850:1658","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:761:660":{"id":"0:761:660","crate_id":0,"name":"from","span":{"filename":"src/lib.rs","begin":[261,4],"end":[263,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["p",{"kind":"resolved_path","inner":{"name":"Protocol","id":"0:837:1642","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}]],"output":{"kind":"resolved_path","inner":{"name":"c_int","id":"20:63:1594","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13246:54176":{"id":"2:13246:54176","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"str::splitn":"1:15728:3066","prim@char":"1:15722:3061","self::pattern":"2:12815:10001"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitN","id":"2:49241:9423","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12825:10002","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12825:10002","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:12840:10005","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:3189:204-0:811:1611":{"id":"a:2:3189:204-0:811:1611","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Sync","id":"2:3189:204","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Domain","id":"0:811:1611","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:100":{"id":"0:100","crate_id":0,"name":null,"span":{"filename":"src/sockaddr.rs","begin":[291,0],"end":[310,1]},"visibility":{"restricted":{"parent":"0:24:1588","path":"::sockaddr"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Debug","id":"2:10098:105","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"SockAddr","id":"0:77:1595","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:101:639"],"negative":false,"synthetic":false,"blanket_impl":null}},"5:5775:9391":{"id":"5:5775:9391","crate_id":5,"name":"Concat","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:5777:166","5:5778:414"],"generics":{"params":[{"name":"Item","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Item"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3182:3177","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"0:308:2553":{"id":"0:308:2553","crate_id":0,"name":"nodelay","span":{"filename":"src/socket.rs","begin":[1676,4],"end":[1681,5]},"visibility":"public","docs":"Get the value of the `TCP_NODELAY` option on this socket.\n\nFor more information about this option, see [`set_nodelay`].\n\n[`set_nodelay`]: Socket::set_nodelay","links":{"Socket::set_nodelay":"0:188:1596"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:3953:190","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"bool"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:3189:204-0:863:1678":{"id":"a:2:3189:204-0:863:1678","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Sync","id":"2:3189:204","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"TcpKeepalive","id":"0:863:1678","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:831":{"id":"0:831","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[193,22],"end":[193,24]},"visibility":"crate","docs":null,"links":{},"attrs":["#[automatically_derived]","#[allow(unused_qualifications)]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"kind":"resolved_path","inner":{"name":"Eq","id":"2:2834:119","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Type","id":"0:824:1624","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"2:13261:59244":{"id":"2:13261:59244","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"prim@char":"1:15722:3061","str::rmatch_indices":"1:15728:3066","`DoubleEndedIterator`":"2:8233:115","self::pattern":"2:12815:10001"},"attrs":["#[stable(feature = \"str_match_indices\", since = \"1.5.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"MatchIndices","id":"2:49269:10321","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12825:10002","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2783-0:850:1658":{"id":"b:2:2783-0:850:1658","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3182:3177","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"BorrowMut","id":"2:2777:9396","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"RecvFlags","id":"0:850:1658","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:2785:53607"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:13927:136":{"id":"2:13927:136","crate_id":2,"name":"GlobalAlloc","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:13928:261","2:13929:500","2:13930:264","2:13931:1057"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"b:2:2780-0:784:1603":{"id":"b:2:2780-0:784:1603","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3182:3177","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Borrow","id":"2:2774:93","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"InterfaceIndexOrAddress","id":"0:784:1603","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:2782:3131"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:3644:3226":{"id":"2:3644:3226","crate_id":2,"name":"Residual","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3646:56345"],"generics":{"params":[{"name":"O","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:4899:3185":{"id":"1:4899:3185","crate_id":1,"name":"ToSocketAddrs","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4900:9415","1:4901:57594"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"a:2:3177:195-0:850:1658":{"id":"a:2:3177:195-0:850:1658","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Send","id":"2:3177:195","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"RecvFlags","id":"0:850:1658","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:13180:9226":{"id":"2:13180:9226","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"const_str_is_empty\", since = \"1.39.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:12262:10474":{"id":"2:12262:10474","crate_id":2,"name":"SlicePattern","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:12263:9230","2:12264:1670"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13237:59239":{"id":"2:13237:59239","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"prim@char":"1:15722:3061","`DoubleEndedIterator`":"2:8233:115","str::rsplit_terminator":"1:15728:3066","str::split":"1:15728:3066","self::pattern":"2:12815:10001"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitTerminator","id":"2:49169:10317","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12825:10002","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:816:391":{"id":"0:816:391","crate_id":0,"name":"clone","span":{"filename":"src/lib.rs","begin":[153,15],"end":[153,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Domain","id":"0:811:1611","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:96":{"id":"0:96","crate_id":0,"name":null,"span":{"filename":"src/sockaddr.rs","begin":[222,0],"end":[248,1]},"visibility":{"restricted":{"parent":"0:24:1588","path":"::sockaddr"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"From","id":"2:3083:130","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"SocketAddrV4","id":"1:11026:1802","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"SockAddr","id":"0:77:1595","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:97:660"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:237":{"id":"0:237","crate_id":0,"name":null,"span":{"filename":"src/socket.rs","begin":[740,0],"end":[984,1]},"visibility":{"restricted":{"parent":"0:102:1583","path":"::socket"}},"docs":"Socket options get/set using `SOL_SOCKET`.\n\nAdditional documentation can be found in documentation of the OS.\n* Linux: <https://man7.org/linux/man-pages/man7/socket.7.html>\n* Windows: <https://docs.microsoft.com/en-us/windows/win32/winsock/sol-socket-socket-options>","links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"Socket","id":"0:188:1596","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:238:2226","0:240:2231","0:241:2236","0:242:2244","0:244:2248","0:245:2252","0:246:2264","0:247:2269","0:249:2277","0:250:2281","0:252:2286","0:253:2290","0:254:2296","0:255:2302","0:257:2309","0:258:2313","0:260:2318","0:261:2321","0:262:2325"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:295:2482":{"id":"0:295:2482","crate_id":0,"name":"set_multicast_if_v6","span":{"filename":"src/socket.rs","begin":[1422,4],"end":[1431,5]},"visibility":"public","docs":"Set the value of the `IPV6_MULTICAST_IF` option for this socket.\n\nSpecifies the interface to use for routing multicast packets. Unlike\nipv4, this is generally required in ipv6 contexts where network routing\nprefixes may overlap.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["interface",{"kind":"primitive","inner":"u32"}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:3953:190","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3121-0:811:1611":{"id":"b:2:3121-0:811:1611","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:3080:144","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:3090:211","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Domain","id":"0:811:1611","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3124:122","2:3125:1383"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:13274:59250":{"id":"2:13274:59250","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:3177:195-0:188:1596":{"id":"a:2:3177:195-0:188:1596","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Send","id":"2:3177:195","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Socket","id":"0:188:1596","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:13206:37346":{"id":"2:13206:37346","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```","links":{"str::split_ascii_whitespace":"1:15728:3066"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"split_whitespace\", since = \"1.1.0\")]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitWhitespace","id":"2:49393:10327","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3288:3205":{"id":"2:3288:3205","crate_id":2,"name":"DivAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3290:539"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"b:2:3110-0:863:1678":{"id":"b:2:3110-0:863:1678","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"From","id":"2:3083:130","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"TcpKeepalive","id":"0:863:1678","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3112:660"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:3086:212":{"id":"2:3086:212","crate_id":2,"name":"TryInto","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3088:122","2:3089:1384"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:82:1867":{"id":"0:82:1867","crate_id":0,"name":"init","span":{"filename":"src/sockaddr.rs","begin":[117,4],"end":[139,5]},"visibility":"public","docs":"Initialise a `SockAddr` by calling the function `init`.\n\nThe type of the address storage and length passed to the function `init`\nis OS/architecture specific.\n\nThe address is zeroed before `init` is called and is thus valid to\ndereference and read from. The length initialised to the maximum length\nof the storage.\n\n# Safety\n\nCaller must ensure that the address family and length match the type of\nstorage address. For example if `storage.ss_family` is set to `AF_INET`\nthe `storage` must be initialised as `sockaddr_in`, setting the content\nand length appropriately.\n\n# Examples\n\n```\n# fn main() -> std::io::Result<()> {\n# #[cfg(unix)] {\nuse std::io;\nuse std::os::unix::io::AsRawFd;\n\nuse socket2::{SockAddr, Socket, Domain, Type};\n\nlet socket = Socket::new(Domain::IPV4, Type::STREAM, None)?;\n\n// Initialise a `SocketAddr` byte calling `getsockname(2)`.\nlet (_, address) = unsafe {\n    SockAddr::init(|addr_storage, len| {\n        // The `getsockname(2)` system call will intiliase `storage` for\n        // us, setting `len` to the correct length.\n        if libc::getsockname(socket.as_raw_fd(), addr_storage.cast(), len) == -1 {\n            Err(io::Error::last_os_error())\n        } else {\n            Ok(())\n        }\n    })\n}?;\n# drop(address);\n# }\n# Ok(())\n# }\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["init",{"kind":"generic","inner":"F"}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:3953:190","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"generic","inner":"T"},{"kind":"resolved_path","inner":{"name":"SockAddr","id":"0:77:1595","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}]}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FnOnce","id":"2:3429:127","args":{"parenthesized":{"inputs":[{"kind":"raw_pointer","inner":{"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"sockaddr_storage","id":"20:1728:1808","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},{"kind":"raw_pointer","inner":{"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"socklen_t","id":"20:1864:1809","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:3953:190","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}}}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:13302:59256":{"id":"2:13302:59256","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"1:15722:3061"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"str_escape\", since = \"1.34.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDebug","id":"2:49418:10330","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:222:2151":{"id":"0:222:2151","crate_id":0,"name":"recv_from_with_flags","span":{"filename":"src/socket.rs","begin":[502,4],"end":[508,5]},"visibility":"public","docs":"Identical to [`recv_from`] but allows for specification of arbitrary\nflags to the underlying `recvfrom` call.\n\n[`recv_from`]: Socket::recv_from","links":{"Socket::recv_from":"0:188:1596"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"resolved_path","inner":{"name":"MaybeUninit","id":"2:32028:1567","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"u8"}}],"bindings":[]}},"param_names":[]}}}}}],["flags",{"kind":"resolved_path","inner":{"name":"c_int","id":"20:63:1594","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:3953:190","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"primitive","inner":"usize"},{"kind":"resolved_path","inner":{"name":"SockAddr","id":"0:77:1595","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}]}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:8666:10101":{"id":"2:8666:10101","crate_id":2,"name":"TrustedStep","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Step","id":"2:7713:10102","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:284:2440":{"id":"0:284:2440","crate_id":0,"name":"set_tos","span":{"filename":"src/socket.rs","begin":[1300,4],"end":[1302,5]},"visibility":"public","docs":"Set the value of the `IP_TOS` option for this socket.\n\nThis value sets the type-of-service field that is used in every packet\nsent from this socket.\n\nNOTE: <https://docs.microsoft.com/en-us/windows/win32/winsock/ipproto-ip-socket-options>\ndocuments that not all versions of windows support `IP_TOS`.","links":{},"attrs":["#[cfg(not(any(target_os = \"fuschia\", target_os = \"redox\", target_os =\n\"solaris\", target_os = \"illumos\",)))]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["tos",{"kind":"primitive","inner":"u32"}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:3953:190","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:10716:198":{"id":"2:10716:198","crate_id":2,"name":"SliceIndex","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:10718:166","2:10719:2916","2:10720:54139","2:10721:54140","2:10722:54141","2:10723:730","2:10724:731"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3182:3177","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:10707:9634","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:223:2158":{"id":"0:223:2158","crate_id":0,"name":"recv_from_vectored","span":{"filename":"src/socket.rs","begin":[524,4],"end":[529,5]},"visibility":"public","docs":"Receives data from the socket. Returns the amount of bytes read, the\n[`RecvFlags`] and the remote address from the data is coming. Unlike\n[`recv_from`] this allows passing multiple buffers.\n\n[`recv_from`]: Socket::recv_from\n\n# Safety\n\n`recv_from_vectored` makes the same safety guarantees regarding `bufs`\nas [`recv_vectored`].\n\n[`recv_vectored`]: Socket::recv_vectored","links":{"Socket::recv_from":"0:188:1596","Socket::recv_vectored":"0:188:1596","`RecvFlags`":"0:850:1658"},"attrs":["#[cfg(not(target_os = \"redox\"))]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["bufs",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"resolved_path","inner":{"name":"MaybeUninitSlice","id":"0:764:1668","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:3953:190","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"primitive","inner":"usize"},{"kind":"resolved_path","inner":{"name":"RecvFlags","id":"0:850:1658","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},{"kind":"resolved_path","inner":{"name":"SockAddr","id":"0:77:1595","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}]}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:846":{"id":"0:846","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[237,26],"end":[237,35]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"StructuralPartialEq","id":"2:3185:202","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Protocol","id":"0:837:1642","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:268:2368":{"id":"0:268:2368","crate_id":0,"name":"set_ip_transparent","span":{"filename":"src/socket.rs","begin":[1082,4],"end":[1091,5]},"visibility":"public","docs":"Set the value of the `IP_TRANSPARENT` option on this socket.\n\nSetting this boolean option enables transparent proxying\non this socket.  This socket option allows the calling\napplication to bind to a nonlocal IP address and operate\nboth as a client and a server with the foreign address as\nthe local endpoint.  NOTE: this requires that routing be\nset up in a way that packets going to the foreign address\nare routed through the TProxy box (i.e., the system\nhosting the application that employs the IP_TRANSPARENT\nsocket option).  Enabling this socket option requires\nsuperuser privileges (the `CAP_NET_ADMIN` capability).\n\nTProxy redirection with the iptables TPROXY target also\nrequires that this option be set on the redirected socket.","links":{},"attrs":["#[cfg(any(doc, all(feature = \"all\", target_os = \"linux\")))]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["transparent",{"kind":"primitive","inner":"bool"}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:3953:190","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3106-0:837:1642":{"id":"b:2:3106-0:837:1642","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"From","id":"2:3083:130","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:3080:144","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Protocol","id":"0:837:1642","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3109:1904"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:3116-0:77:1595":{"id":"b:2:3116-0:77:1595","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:3090:211","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"TryInto","id":"2:3086:212","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"SockAddr","id":"0:77:1595","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3119:122","2:3120:1384"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:3906-0:837:1642":{"id":"b:2:3906-0:837:1642","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3182:3177","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Any","id":"2:3904:68","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Protocol","id":"0:837:1642","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3908:1397"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:260:2318":{"id":"0:260:2318","crate_id":0,"name":"set_send_buffer_size","span":{"filename":"src/socket.rs","begin":[958,4],"end":[967,5]},"visibility":"public","docs":"Set value for the `SO_SNDBUF` option on this socket.\n\nChanges the size of the operating system's send buffer associated with\nthe socket.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["size",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:3953:190","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:760":{"id":"0:760","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[260,0],"end":[264,1]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"From","id":"2:3083:130","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Protocol","id":"0:837:1642","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"c_int","id":"20:63:1594","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:761:660"],"negative":false,"synthetic":false,"blanket_impl":null}},"a:2:9119:9067-0:77:1595":{"id":"a:2:9119:9067-0:77:1595","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"RefUnwindSafe","id":"2:9119:9067","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"SockAddr","id":"0:77:1595","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"b:2:3906-0:354:1597":{"id":"b:2:3906-0:354:1597","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3182:3177","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Any","id":"2:3904:68","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"SockRef","id":"0:354:1597","args":{"angle_bracketed":{"args":[{"lifetime":"'s"}],"bindings":[]}},"param_names":[]}},"items":["2:3908:1397"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:3106-0:354:1597":{"id":"b:2:3106-0:354:1597","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"From","id":"2:3083:130","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:3080:144","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"SockRef","id":"0:354:1597","args":{"angle_bracketed":{"args":[{"lifetime":"'s"}],"bindings":[]}},"param_names":[]}},"items":["2:3109:1904"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"a:2:3189:204-0:824:1624":{"id":"a:2:3189:204-0:824:1624","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Sync","id":"2:3189:204","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Type","id":"0:824:1624","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:8233:115":{"id":"2:8233:115","crate_id":2,"name":"DoubleEndedIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8234:9220","2:8235:9221","2:8236:9222","2:8237:9223","2:8241:9224","2:8244:9225"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"2:8384:152","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"a:2:9118:9068-0:77:1595":{"id":"a:2:9118:9068-0:77:1595","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"UnwindSafe","id":"2:9118:9068","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"SockAddr","id":"0:77:1595","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:220:2145":{"id":"0:220:2145","crate_id":0,"name":"peek","span":{"filename":"src/socket.rs","begin":[481,4],"end":[483,5]},"visibility":"public","docs":"Receives data on the socket from the remote adress to which it is\nconnected, without removing that data from the queue. On success,\nreturns the number of bytes peeked.\n\nSuccessive calls return the same data. This is accomplished by passing\n`MSG_PEEK` as a flag to the underlying `recv` system call.\n\n# Safety\n\n`peek` makes the same safety guarantees regarding the `buf`fer as\n[`recv`].\n\n[`recv`]: Socket::recv","links":{"Socket::recv":"0:188:1596"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"resolved_path","inner":{"name":"MaybeUninit","id":"2:32028:1567","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"u8"}}],"bindings":[]}},"param_names":[]}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:3953:190","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2780-0:811:1611":{"id":"b:2:2780-0:811:1611","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3182:3177","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Borrow","id":"2:2774:93","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Domain","id":"0:811:1611","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:2782:3131"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:742":{"id":"0:742","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[172,0],"end":[176,1]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"From","id":"2:3083:130","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"i32"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Domain","id":"0:811:1611","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:743:660"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:288:2452":{"id":"0:288:2452","crate_id":0,"name":"join_multicast_v6","span":{"filename":"src/socket.rs","begin":[1338,4],"end":[1352,5]},"visibility":"public","docs":"Join a multicast group using `IPV6_ADD_MEMBERSHIP` option on this socket.\n\nSome OSs use `IPV6_JOIN_GROUP` for this option.\n\nThis function specifies a new multicast group for this socket to join.\nThe address must be a valid multicast address, and `interface` is the\nindex of the interface to join/leave (or 0 to indicate any interface).","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["multiaddr",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"Ipv6Addr","id":"1:11059:1929","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}],["interface",{"kind":"primitive","inner":"u32"}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:3953:190","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:252:2286":{"id":"0:252:2286","crate_id":0,"name":"set_recv_buffer_size","span":{"filename":"src/socket.rs","begin":[887,4],"end":[896,5]},"visibility":"public","docs":"Set value for the `SO_RCVBUF` option on this socket.\n\nChanges the size of the operating system's receive buffer associated\nwith the socket.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["size",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:3953:190","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3083:130":{"id":"2:3083:130","crate_id":2,"name":"From","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3085:660"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:10105:114":{"id":"2:10105:114","crate_id":2,"name":"Display","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10106:639"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13301:53742":{"id":"2:13301:53742","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":["#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13220:9264":{"id":"2:13220:9264","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"self::pattern":"2:12815:10001","prim@char":"1:15722:3061","`None`":"2:47161:161"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47161:161","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12825:10002","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13296:10207":{"id":"2:13296:10207","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"`FromStr`":"2:12754:9759","FromStr::Err":"2:12754:9759"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47288:190","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"F"}},{"type":{"kind":"qualified_path","inner":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"F"},"trait":{"kind":"resolved_path","inner":{"name":"FromStr","id":"2:12754:9759","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FromStr","id":"2:12754:9759","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:271:2391":{"id":"0:271:2391","crate_id":0,"name":"join_multicast_v4_n","span":{"filename":"src/socket.rs","begin":[1141,4],"end":[1155,5]},"visibility":"public","docs":"Join a multicast group using `IP_ADD_MEMBERSHIP` option on this socket.\n\nThis function specifies a new multicast group for this socket to join.\nThe address must be a valid multicast address, and `interface` specifies\nthe local interface with which the system should join the multicast\ngroup. See [`InterfaceIndexOrAddress`].","links":{"`InterfaceIndexOrAddress`":"0:784:1603"},"attrs":["#[cfg(not(any(target_os = \"haiku\", target_os = \"illumos\", target_os =\n\"netbsd\", target_os = \"redox\", target_os = \"solaris\",)))]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["multiaddr",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"Ipv4Addr","id":"1:11056:1924","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}],["interface",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"InterfaceIndexOrAddress","id":"0:784:1603","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:3953:190","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:8152:10176":{"id":"2:8152:10176","crate_id":2,"name":"Product","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8154:8492"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13199:9745":{"id":"2:13199:9745","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"str::slice_mut_unchecked":"1:15728:3066","`str`":"1:15728:3066","crate::ops::Index":"2:3481:2216"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"a:2:3218:3315-0:824:1624":{"id":"a:2:3218:3315-0:824:1624","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Unpin","id":"2:3218:3315","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Type","id":"0:824:1624","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:10357:9709":{"id":"2:10357:9709","crate_id":2,"name":"BuildHasher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10358:141","2:10359:38622","2:10360:57286"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:224:2159":{"id":"0:224:2159","crate_id":0,"name":"recv_from_vectored_with_flags","span":{"filename":"src/socket.rs","begin":[544,4],"end":[550,5]},"visibility":"public","docs":"Identical to [`recv_from_vectored`] but allows for specification of\narbitrary flags to the underlying `recvmsg`/`WSARecvFrom` call.\n\n[`recv_from_vectored`]: Socket::recv_from_vectored\n\n# Safety\n\n`recv_from_vectored` makes the same safety guarantees regarding `bufs`\nas [`recv_vectored`].\n\n[`recv_vectored`]: Socket::recv_vectored","links":{"Socket::recv_vectored":"0:188:1596","Socket::recv_from_vectored":"0:188:1596"},"attrs":["#[cfg(not(target_os = \"redox\"))]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["bufs",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"resolved_path","inner":{"name":"MaybeUninitSlice","id":"0:764:1668","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}}],["flags",{"kind":"resolved_path","inner":{"name":"c_int","id":"20:63:1594","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:3953:190","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"primitive","inner":"usize"},{"kind":"resolved_path","inner":{"name":"RecvFlags","id":"0:850:1658","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},{"kind":"resolved_path","inner":{"name":"SockAddr","id":"0:77:1595","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}]}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:808:639":{"id":"0:808:639","crate_id":0,"name":"fmt","span":{"filename":"src/sys/unix.rs","begin":[336,0],"end":[367,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"std::fmt::Formatter","id":"2:10058:129","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"std::fmt::Result","id":"2:10047:190","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:98":{"id":"0:98","crate_id":0,"name":null,"span":{"filename":"src/sockaddr.rs","begin":[250,0],"end":[289,1]},"visibility":{"restricted":{"parent":"0:24:1588","path":"::sockaddr"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"From","id":"2:3083:130","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"SocketAddrV6","id":"1:11029:1803","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"SockAddr","id":"0:77:1595","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:99:660"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:312:2562":{"id":"0:312:2562","crate_id":0,"name":"read","span":{"filename":"src/socket.rs","begin":[1703,4],"end":[1708,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:3953:190","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3106-0:811:1611":{"id":"b:2:3106-0:811:1611","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"From","id":"2:3083:130","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:3080:144","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Domain","id":"0:811:1611","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3109:1904"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:3121-0:863:1678":{"id":"b:2:3121-0:863:1678","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:3080:144","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:3090:211","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"TcpKeepalive","id":"0:863:1678","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3124:122","2:3125:1383"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:198:2000":{"id":"0:198:2000","crate_id":0,"name":"pair","span":{"filename":"src/socket.rs","begin":[149,4],"end":[159,5]},"visibility":"public","docs":"Creates a pair of sockets which are connected to each other.\n\nThis function corresponds to `socketpair(2)`.\n\nThis function sets the same flags as in done for [`Socket::new`],\n[`Socket::pair_raw`] can be used if you don't want to set those flags.","links":{"`Socket::new`":"0:188:1596","`Socket::pair_raw`":"0:188:1596"},"attrs":["#[cfg(any(doc, all(feature = \"all\", unix)))]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["domain",{"kind":"resolved_path","inner":{"name":"Domain","id":"0:811:1611","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}],["ty",{"kind":"resolved_path","inner":{"name":"Type","id":"0:824:1624","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}],["protocol",{"kind":"resolved_path","inner":{"name":"Option","id":"2:47161:161","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Protocol","id":"0:837:1642","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:3953:190","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"resolved_path","inner":{"name":"Socket","id":"0:188:1596","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},{"kind":"resolved_path","inner":{"name":"Socket","id":"0:188:1596","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}]}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:323:2565":{"id":"0:323:2565","crate_id":0,"name":"flush","span":{"filename":"src/socket.rs","begin":[1746,4],"end":[1748,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:3953:190","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:280:2425":{"id":"0:280:2425","crate_id":0,"name":"set_multicast_ttl_v4","span":{"filename":"src/socket.rs","begin":[1257,4],"end":[1266,5]},"visibility":"public","docs":"Set the value of the `IP_MULTICAST_TTL` option for this socket.\n\nIndicates the time-to-live value of outgoing multicast packets for\nthis socket. The default value is 1 which means that multicast packets\ndon't leave the local network unless explicitly requested.\n\nNote that this may not have any affect on IPv6 sockets.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["ttl",{"kind":"primitive","inner":"u32"}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:3953:190","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2865:162":{"id":"2:2865:162","crate_id":2,"name":"Ord","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2866:397","2:2867:2750","2:2868:2636","2:2869:2743"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Eq","id":"2:2834:119","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"PartialOrd","id":"2:2875:169","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:803":{"id":"0:803","crate_id":0,"name":null,"span":{"filename":"src/socket.rs","begin":[1781,0],"end":[1781,29]},"visibility":{"restricted":{"parent":"0:102:1583","path":"::socket"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"From","id":"2:3083:130","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Socket","id":"0:188:1596","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"net::UdpSocket","id":"1:5406:2568","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:804:660"],"negative":false,"synthetic":false,"blanket_impl":null}},"a:2:9119:9067-0:354:1597":{"id":"a:2:9119:9067-0:354:1597","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'s","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"RefUnwindSafe","id":"2:9119:9067","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"SockRef","id":"0:354:1597","args":{"angle_bracketed":{"args":[{"lifetime":"'s"}],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:13182:59234":{"id":"2:13182:59234","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:261:2321":{"id":"0:261:2321","crate_id":0,"name":"write_timeout","span":{"filename":"src/socket.rs","begin":[973,4],"end":[975,5]},"visibility":"public","docs":"Get value for the `SO_SNDTIMEO` option on this socket.\n\nIf the returned timeout is `None`, then `write` and `send` calls will\nblock indefinitely.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:3953:190","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47161:161","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Duration","id":"2:49863:116","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13178":{"id":"2:13178","crate_id":2,"name":null,"span":null,"visibility":{"restricted":{"parent":"2:12275:1310","path":"::str"}},"docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["2:13179:770","2:13180:9226","2:13181:59233","2:13182:59234","2:13184:59235","2:13187:2710","2:13188:59236","2:13189:287","2:13190:1872","2:13191:2916","2:13193:54139","2:13195:54140","2:13197:54141","2:13199:9745","2:13200:59237","2:13201:54161","2:13202:54162","2:13203:10348","2:13204:10030","2:13205:2708","2:13206:37346","2:13207:37336","2:13208:10815","2:13209:59238","2:13210:37331","2:13211:54178","2:13214:53856","2:13217:53858","2:13220:9264","2:13224:9225","2:13228:54169","2:13231:37203","2:13234:54172","2:13237:59239","2:13240:59240","2:13243:54174","2:13246:54176","2:13249:59241","2:13252:59242","2:13255:3141","2:13258:59243","2:13261:59244","2:13264:59245","2:13267:59246","2:13269:59247","2:13271:59248","2:13273:59249","2:13274:59250","2:13275:59251","2:13278:59252","2:13281:19988","2:13284:54179","2:13287:59253","2:13290:59254","2:13293:59255","2:13296:10207","2:13298:10478","2:13299:53746","2:13300:53743","2:13301:53742","2:13302:59256","2:13304:9629","2:13305:59257"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:841":{"id":"0:841","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[237,15],"end":[237,20]},"visibility":"crate","docs":null,"links":{},"attrs":["#[automatically_derived]","#[allow(unused_qualifications)]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2799:100","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Protocol","id":"0:837:1642","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:842:391"],"negative":false,"synthetic":false,"blanket_impl":null}},"a:2:3218:3315-0:764:1668":{"id":"a:2:3218:3315-0:764:1668","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Unpin","id":"2:3218:3315","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"MaybeUninitSlice","id":"0:764:1668","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:230:2188":{"id":"0:230:2188","crate_id":0,"name":"send_out_of_band","span":{"filename":"src/socket.rs","begin":[616,4],"end":[618,5]},"visibility":"public","docs":"Sends out-of-band (OOB) data on the socket to connected peer\nby setting the `MSG_OOB` flag for this call.\n\nFor more information, see [`send`], [`out_of_band_inline`].\n\n[`send`]: #method.send\n[`out_of_band_inline`]: #method.out_of_band_inline","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:3953:190","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3906-0:811:1611":{"id":"b:2:3906-0:811:1611","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3182:3177","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Any","id":"2:3904:68","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Domain","id":"0:811:1611","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3908:1397"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:3109:1904":{"id":"2:3109:1904","crate_id":2,"name":"into","span":null,"visibility":"default","docs":"Calls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of\n<code>[From]&lt;T&gt; for U</code> chooses to do.","links":{"From":"2:3083:130"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"generic","inner":"U"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:5649:9640":{"id":"1:5649:9640","crate_id":1,"name":"MetadataExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5650:8606","1:5651:53611","1:5652:8971","1:5653:57604","1:5654:8583","1:5655:8584","1:5656:57605","1:5657:1274","1:5658:57606","1:5659:57607","1:5660:57608","1:5661:57609","1:5662:57610","1:5663:57611","1:5664:57612","1:5665:57613"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"a:2:3189:204-0:354:1597":{"id":"a:2:3189:204-0:354:1597","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'s","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Sync","id":"2:3189:204","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"SockRef","id":"0:354:1597","args":{"angle_bracketed":{"args":[{"lifetime":"'s"}],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"a:2:3177:195-0:784:1603":{"id":"a:2:3177:195-0:784:1603","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Send","id":"2:3177:195","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"InterfaceIndexOrAddress","id":"0:784:1603","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:13269:59247":{"id":"2:13269:59247","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"trim_direction\", since = \"1.30.0\")]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:759:660":{"id":"0:759:660","crate_id":0,"name":"from","span":{"filename":"src/lib.rs","begin":[255,4],"end":[257,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["p",{"kind":"resolved_path","inner":{"name":"c_int","id":"20:63:1594","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}]],"output":{"kind":"resolved_path","inner":{"name":"Protocol","id":"0:837:1642","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:354:1597":{"id":"0:354:1597","crate_id":0,"name":"SockRef","span":{"filename":"src/sockref.rs","begin":[85,0],"end":[93,1]},"visibility":"public","docs":"A reference to a [`Socket`] that can be used to configure socket types other\nthan the `Socket` type itself.\n\nThis allows for example a [`TcpStream`], found in the standard library, to\nbe configured using all the additional methods found in the [`Socket`] API.\n\n`SockRef` can be created from any socket type that implements [`AsRawFd`]\n(Unix) or [`AsRawSocket`] (Windows) using the [`From`] implementation, but\nthe caller must ensure the file descriptor/socket is a valid.\n\n[`TcpStream`]: std::net::TcpStream\n[`AsRawFd`]: https://doc.rust-lang.org/stable/std/os/unix/io/trait.AsRawFd.html\n[`AsRawSocket`]: https://doc.rust-lang.org/stable/std/os/windows/io/trait.AsRawSocket.html\n\n# Examples\n\nBelow is an example of converting a [`TcpStream`] into a [`SockRef`].\n\n```\nuse std::net::{TcpStream, SocketAddr};\n\nuse socket2::SockRef;\n\n# fn main() -> Result<(), Box<dyn std::error::Error>> {\n// Create `TcpStream` from the standard library.\nlet address: SocketAddr = \"127.0.0.1:1234\".parse()?;\n# let b1 = std::sync::Arc::new(std::sync::Barrier::new(2));\n# let b2 = b1.clone();\n# let handle = std::thread::spawn(move || {\n#    let listener = std::net::TcpListener::bind(address).unwrap();\n#    b2.wait();\n#    let (stream, _) = listener.accept().unwrap();\n#    std::thread::sleep(std::time::Duration::from_millis(10));\n#    drop(stream);\n# });\n# b1.wait();\nlet stream = TcpStream::connect(address)?;\n\n// Create a `SockRef`erence to the stream.\nlet socket_ref = SockRef::from(&stream);\n// Use `Socket::set_nodelay` on the stream.\nsocket_ref.set_nodelay(true)?;\ndrop(socket_ref);\n\nassert_eq!(stream.nodelay()?, true);\n# handle.join().unwrap();\n# Ok(())\n# }\n```\n\nBelow is an example of **incorrect usage** of `SockRef::from`, which is\ncurrently possible (but not intended and will be fixed in future versions).\n\n```compile_fail\nuse socket2::SockRef;\n\n# fn main() -> Result<(), Box<dyn std::error::Error>> {\n/// THIS USAGE IS NOT VALID!\nlet socket_ref = SockRef::from(&123);\n// The above line is overseen possibility when using `SockRef::from`, it\n// uses the `RawFd` (on Unix), which is a type alias for `c_int`/`i32`,\n// which implements `AsRawFd`. However it may be clear that this usage is\n// invalid as it doesn't guarantee that `123` is a valid file descriptor.\n\n// Using `Socket::set_nodelay` now will call it on a file descriptor we\n// don't own! We don't even not if the file descriptor is valid or a socket.\nsocket_ref.set_nodelay(true)?;\ndrop(socket_ref);\n# Ok(())\n# }\n# DO_NOT_COMPILE\n```","links":{"`Socket`":"0:188:1596","`From`":"2:3083:130","`SockRef`":"0:354:1597","std::net::TcpStream":"1:5281:1970"},"attrs":[],"deprecation":null,"kind":"struct","inner":{"struct_type":"plain","generics":{"params":[{"name":"'s","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"fields_stripped":true,"fields":[],"impls":["a:2:3177:195-0:354:1597","a:2:9118:9068-0:354:1597","a:2:9119:9067-0:354:1597","a:2:3189:204-0:354:1597","a:2:3218:3315-0:354:1597","b:2:3116-0:354:1597","b:2:3106-0:354:1597","b:2:3906-0:354:1597","b:2:3121-0:354:1597","b:2:3110-0:354:1597","b:2:2783-0:354:1597","b:2:2780-0:354:1597","0:358","0:362","0:366"]}},"2:13214:53856":{"id":"2:13214:53856","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"self::pattern":"2:12815:10001","prim@char":"1:15722:3061"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12825:10002","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:302:2502":{"id":"0:302:2502","crate_id":0,"name":"only_v6","span":{"filename":"src/socket.rs","begin":[1489,4],"end":[1494,5]},"visibility":"public","docs":"Get the value of the `IPV6_V6ONLY` option for this socket.\n\nFor more information about this option, see [`set_only_v6`].\n\n[`set_only_v6`]: Socket::set_only_v6","links":{"Socket::set_only_v6":"0:188:1596"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:3953:190","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"bool"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:785:2216":{"id":"0:785:2216","crate_id":0,"name":"Index","span":{"filename":"src/socket.rs","begin":[730,4],"end":[730,14]},"visibility":"default","docs":"An interface index.","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"tuple","variant_inner":[{"kind":"primitive","inner":"u32"}]}},"2:22822:10110":{"id":"2:22822:10110","crate_id":2,"name":"MaskElement","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SimdElement","id":"2:23471:10099","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:22813:9634","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"b:2:3906-0:850:1658":{"id":"b:2:3906-0:850:1658","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3182:3177","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Any","id":"2:3904:68","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"RecvFlags","id":"0:850:1658","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3908:1397"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:307:2548":{"id":"0:307:2548","crate_id":0,"name":"set_tcp_keepalive","span":{"filename":"src/socket.rs","begin":[1666,4],"end":[1669,5]},"visibility":"public","docs":"Set parameters configuring TCP keepalive probes for this socket.\n\nThe supported parameters depend on the operating system, and are\nconfigured using the [`TcpKeepalive`] struct. At a minimum, all systems\nsupport configuring the [keepalive time]: the time after which the OS\nwill start sending keepalive messages on an idle connection.\n\n[keepalive time]: TcpKeepalive::with_time\n\n# Notes\n\n* This will enable `SO_KEEPALIVE` on this socket, if it is not already\n  enabled.\n* On some platforms, such as Windows, any keepalive parameters *not*\n  configured by the `TcpKeepalive` struct passed to this function may be\n  overwritten with their default values. Therefore, this function should\n  either only be called once per socket, or the same parameters should\n  be passed every time it is called.\n\n# Examples\n\n```\nuse std::time::Duration;\n\nuse socket2::{Socket, TcpKeepalive, Domain, Type};\n\n# fn main() -> std::io::Result<()> {\nlet socket = Socket::new(Domain::IPV4, Type::STREAM, None)?;\nlet keepalive = TcpKeepalive::new()\n    .with_time(Duration::from_secs(4));\n    // Depending on the target operating system, we may also be able to\n    // configure the keepalive probe interval and/or the number of\n    // retries here as well.\n\nsocket.set_tcp_keepalive(&keepalive)?;\n# Ok(()) }\n```\n","links":{"`TcpKeepalive`":"0:863:1678","TcpKeepalive::with_time":"0:863:1678"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["params",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"TcpKeepalive","id":"0:863:1678","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:3953:190","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:273:2400":{"id":"0:273:2400","crate_id":0,"name":"multicast_if_v4","span":{"filename":"src/socket.rs","begin":[1190,4],"end":[1194,5]},"visibility":"public","docs":"Get the value of the `IP_MULTICAST_IF` option for this socket.\n\nFor more information about this option, see [`set_multicast_if_v4`].\n\n[`set_multicast_if_v4`]: Socket::set_multicast_if_v4","links":{"Socket::set_multicast_if_v4":"0:188:1596"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:3953:190","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Ipv4Addr","id":"1:11056:1924","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:811:1611":{"id":"0:811:1611","crate_id":0,"name":"Domain","span":{"filename":"src/lib.rs","begin":[154,0],"end":[154,25]},"visibility":"public","docs":"Specification of the communication domain for a socket.\n\nThis is a newtype wrapper around an integer which provides a nicer API in\naddition to an injection point for documentation. Convenience constants such\nas [`Domain::IPV4`], [`Domain::IPV6`], etc, are provided to avoid reaching\ninto libc for various constants.\n\nThis type is freely interconvertible with C's `int` type, however, if a raw\nvalue needs to be provided.","links":{"`Domain::IPV6`":"0:811:1611","`Domain::IPV4`":"0:811:1611"},"attrs":[],"deprecation":null,"kind":"struct","inner":{"struct_type":"tuple","generics":{"params":[],"where_predicates":[]},"fields_stripped":true,"fields":[],"impls":["0:621","0:738","a:2:3177:195-0:811:1611","a:2:9118:9068-0:811:1611","a:2:9119:9067-0:811:1611","a:2:3189:204-0:811:1611","a:2:3218:3315-0:811:1611","b:2:3116-0:811:1611","b:2:3106-0:811:1611","b:2:3906-0:811:1611","b:2:3121-0:811:1611","b:2:3110-0:811:1611","b:2:2783-0:811:1611","b:2:2780-0:811:1611","b:5:776-0:811:1611","0:805","0:814","0:815","0:817","0:818","0:820","0:821","0:742","0:744"]}},"2:12754:9759":{"id":"2:12754:9759","crate_id":2,"name":"FromStr","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:12755:121","2:12756:57478"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13290:59254":{"id":"2:13290:59254","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"self::pattern":"2:12815:10001","prim@char":"1:15722:3061"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12825:10002","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13304:9629":{"id":"2:13304:9629","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"1:15722:3061"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"str_escape\", since = \"1.34.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDefault","id":"2:49427:9630","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:101:639":{"id":"0:101:639","crate_id":0,"name":"fmt","span":{"filename":"src/sockaddr.rs","begin":[292,4],"end":[309,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["fmt",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"fmt::Formatter","id":"2:10058:129","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"fmt::Result","id":"2:10047:190","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:9119:9067-0:850:1658":{"id":"a:2:9119:9067-0:850:1658","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"RefUnwindSafe","id":"2:9119:9067","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"RecvFlags","id":"0:850:1658","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:3331:3215":{"id":"2:3331:3215","crate_id":2,"name":"BitAndAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3333:335"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"a:2:3177:195-0:811:1611":{"id":"a:2:3177:195-0:811:1611","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Send","id":"2:3177:195","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Domain","id":"0:811:1611","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:743:660":{"id":"0:743:660","crate_id":0,"name":"from","span":{"filename":"src/lib.rs","begin":[173,4],"end":[175,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["d",{"kind":"resolved_path","inner":{"name":"c_int","id":"20:63:1594","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}]],"output":{"kind":"resolved_path","inner":{"name":"Domain","id":"0:811:1611","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:772:206":{"id":"5:772:206","crate_id":5,"name":"ToOwned","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:773:9281","5:774:9282","5:775:9283"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:768":{"id":"0:768","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[294,0],"end":[298,1]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Debug","id":"2:10098:105","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"MaybeUninitSlice","id":"0:764:1668","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"items":["0:770:639"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:80":{"id":"0:80","crate_id":0,"name":null,"span":{"filename":"src/sockaddr.rs","begin":[22,0],"end":[211,1]},"visibility":{"restricted":{"parent":"0:24:1588","path":"::sockaddr"}},"docs":null,"links":{},"attrs":["#[allow(clippy :: len_without_is_empty)]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"SockAddr","id":"0:77:1595","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:81:897","0:82:1867","0:87:1878","0:88:770","0:89:287","0:91:1886","0:92:1901","0:93:1903"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:361:523":{"id":"0:361:523","crate_id":0,"name":"deref","span":{"filename":"src/sockref.rs","begin":[98,4],"end":[100,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Target","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"","id":"2:3396:111","args":null,"param_names":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:843":{"id":"0:843","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[237,22],"end":[237,24]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"StructuralEq","id":"2:3186:201","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Protocol","id":"0:837:1642","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"b:2:3116-0:824:1624":{"id":"b:2:3116-0:824:1624","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:3090:211","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"TryInto","id":"2:3086:212","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Type","id":"0:824:1624","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3119:122","2:3120:1384"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:93:1903":{"id":"0:93:1903","crate_id":0,"name":"as_socket_ipv6","span":{"filename":"src/sockaddr.rs","begin":[205,4],"end":[210,5]},"visibility":"public","docs":"Returns this address as a [`SocketAddrV6`] if it is in the `AF_INET6`\nfamily.","links":{"`SocketAddrV6`":"1:11029:1803"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47161:161","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"SocketAddrV6","id":"1:11029:1803","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:9118:9068":{"id":"2:9118:9068","crate_id":2,"name":"UnwindSafe","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:247:2269":{"id":"0:247:2269","crate_id":0,"name":"out_of_band_inline","span":{"filename":"src/socket.rs","begin":[845,4],"end":[850,5]},"visibility":"public","docs":"Get value for the `SO_OOBINLINE` option on this socket.\n\nFor more information about this option, see [`set_out_of_band_inline`].\n\n[`set_out_of_band_inline`]: Socket::set_out_of_band_inline","links":{"Socket::set_out_of_band_inline":"0:188:1596"},"attrs":["#[cfg(not(target_os = \"redox\"))]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:3953:190","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"bool"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:781":{"id":"0:781","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[337,0],"end":[442,1]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"TcpKeepalive","id":"0:863:1678","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:782:897","0:783:1691"],"negative":false,"synthetic":false,"blanket_impl":null}},"a:2:9119:9067-0:863:1678":{"id":"a:2:9119:9067-0:863:1678","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"RefUnwindSafe","id":"2:9119:9067","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"TcpKeepalive","id":"0:863:1678","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:713":{"id":"0:713","crate_id":0,"name":null,"span":{"filename":"src/sys/unix.rs","begin":[1029,0],"end":[1994,1]},"visibility":{"restricted":{"parent":"0:368:1592","path":"::sys"}},"docs":"Unix only API.","links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"crate::Socket","id":"0:188:1596","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:870:391":{"id":"0:870:391","crate_id":0,"name":"clone","span":{"filename":"src/lib.rs","begin":[328,16],"end":[328,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"TcpKeepalive","id":"0:863:1678","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:285:2441":{"id":"0:285:2441","crate_id":0,"name":"tos","span":{"filename":"src/socket.rs","begin":[1318,4],"end":[1322,5]},"visibility":"public","docs":"Get the value of the `IP_TOS` option for this socket.\n\nFor more information about this option, see [`set_tos`].\n\nNOTE: <https://docs.microsoft.com/en-us/windows/win32/winsock/ipproto-ip-socket-options>\ndocuments that not all versions of windows support `IP_TOS`.\n\n[`set_tos`]: Socket::set_tos","links":{"Socket::set_tos":"0:188:1596"},"attrs":["#[cfg(not(any(target_os = \"fuschia\", target_os = \"redox\", target_os =\n\"solaris\", target_os = \"illumos\",)))]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:3953:190","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"u32"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:4614:3259":{"id":"1:4614:3259","crate_id":1,"name":"Seek","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4615:53620","1:4616:3457","1:4617:53622","1:4618:53621"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3090:211":{"id":"2:3090:211","crate_id":2,"name":"TryFrom","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3092:122","2:3093:1383"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3314:3211":{"id":"2:3314:3211","crate_id":2,"name":"BitXor","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3316:166","2:3317:339"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"b:2:3110-0:850:1658":{"id":"b:2:3110-0:850:1658","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"From","id":"2:3083:130","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"RecvFlags","id":"0:850:1658","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3112:660"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:738":{"id":"0:738","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[156,0],"end":[170,1]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"Domain","id":"0:811:1611","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:739:1613","0:740:1616","0:741:1619"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:3485:3221":{"id":"2:3485:3221","crate_id":2,"name":"IndexMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3487:731"],"generics":{"params":[{"name":"Idx","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Idx"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3182:3177","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Index","id":"2:3481:2216","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Idx"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:211:34":{"id":"0:211:34","crate_id":0,"name":"type","span":{"filename":"src/socket.rs","begin":[325,4],"end":[327,5]},"visibility":"public","docs":"Returns the [`Type`] of this socket by checking the `SO_TYPE` option on\nthis socket.","links":{"`Type`":"0:824:1624"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:3953:190","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Type","id":"0:824:1624","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:9119:9067-0:784:1603":{"id":"a:2:9119:9067-0:784:1603","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"RefUnwindSafe","id":"2:9119:9067","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"InterfaceIndexOrAddress","id":"0:784:1603","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:719":{"id":"0:719","crate_id":0,"name":null,"span":{"filename":"src/sys/unix.rs","begin":[2004,0],"end":[2008,1]},"visibility":{"restricted":{"parent":"0:368:1592","path":"::sys"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"IntoRawFd","id":"1:6771:1939","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"crate::Socket","id":"0:188:1596","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:720:1585"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:13267:59246":{"id":"2:13267:59246","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13275:59251":{"id":"2:13275:59251","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"self::pattern":"2:12815:10001","prim@char":"1:15722:3061"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12825:10002","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12825:10002","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"DoubleEndedSearcher","id":"2:12845:10000","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:799":{"id":"0:799","crate_id":0,"name":null,"span":{"filename":"src/socket.rs","begin":[1779,0],"end":[1779,29]},"visibility":{"restricted":{"parent":"0:102:1583","path":"::socket"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"From","id":"2:3083:130","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Socket","id":"0:188:1596","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"net::TcpStream","id":"1:5281:1970","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:800:660"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:798:660":{"id":"0:798:660","crate_id":0,"name":"from","span":{"filename":"src/socket.rs","begin":[1778,0],"end":[1778,29]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["socket",{"kind":"resolved_path","inner":{"name":"net::UdpSocket","id":"1:5406:2568","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}]],"output":{"kind":"resolved_path","inner":{"name":"Socket","id":"0:188:1596","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:860":{"id":"0:860","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[271,26],"end":[271,35]},"visibility":"crate","docs":null,"links":{},"attrs":["#[automatically_derived]","#[allow(unused_qualifications)]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"kind":"resolved_path","inner":{"name":"PartialEq","id":"2:2829:168","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"RecvFlags","id":"0:850:1658","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"RecvFlags","id":"0:850:1658","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:861:584","0:862:884"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:722:1584":{"id":"0:722:1584","crate_id":0,"name":"from_raw_fd","span":{"filename":"src/sys/unix.rs","begin":[2012,4],"end":[2014,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["fd",{"kind":"resolved_path","inner":{"name":"c_int","id":"20:63:1594","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}]],"output":{"kind":"resolved_path","inner":{"name":"crate::Socket","id":"0:188:1596","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"0:853":{"id":"0:853","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[271,9],"end":[271,13]},"visibility":"crate","docs":null,"links":{},"attrs":["#[automatically_derived]","#[allow(unused_qualifications)]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Copy","id":"2:3187:102","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"RecvFlags","id":"0:850:1658","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"2:3339:3217":{"id":"2:3339:3217","crate_id":2,"name":"BitXorAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3341:340"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:868:639":{"id":"0:868:639","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[328,9],"end":[328,14]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Formatter","id":"2:10058:129","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Result","id":"2:10047:190","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:797":{"id":"0:797","crate_id":0,"name":null,"span":{"filename":"src/socket.rs","begin":[1778,0],"end":[1778,29]},"visibility":{"restricted":{"parent":"0:102:1583","path":"::socket"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"From","id":"2:3083:130","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"UdpSocket","id":"1:5406:2568","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Socket","id":"0:188:1596","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:798:660"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:219:2132":{"id":"0:219:2132","crate_id":0,"name":"recv_vectored_with_flags","span":{"filename":"src/socket.rs","begin":[460,4],"end":[466,5]},"visibility":"public","docs":"Identical to [`recv_vectored`] but allows for specification of arbitrary\nflags to the underlying `recvmsg`/`WSARecv` call.\n\n[`recv_vectored`]: Socket::recv_vectored\n\n# Safety\n\n`recv_from_vectored` makes the same safety guarantees regarding `bufs`\nas [`recv_vectored`].\n\n[`recv_vectored`]: Socket::recv_vectored","links":{"Socket::recv_vectored":"0:188:1596"},"attrs":["#[cfg(not(target_os = \"redox\"))]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["bufs",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"resolved_path","inner":{"name":"MaybeUninitSlice","id":"0:764:1668","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}}],["flags",{"kind":"resolved_path","inner":{"name":"c_int","id":"20:63:1594","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:3953:190","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"primitive","inner":"usize"},{"kind":"resolved_path","inner":{"name":"RecvFlags","id":"0:850:1658","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}]}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:6767:2571":{"id":"1:6767:2571","crate_id":1,"name":"AsRawFd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6768:2629"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:6351:207":{"id":"5:6351:207","crate_id":5,"name":"ToString","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:6352:9284"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:788:2218":{"id":"0:788:2218","crate_id":0,"name":"Address","span":{"filename":"src/socket.rs","begin":[732,4],"end":[732,21]},"visibility":"default","docs":"An address assigned to an interface.","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"tuple","variant_inner":[{"kind":"resolved_path","inner":{"name":"Ipv4Addr","id":"1:11056:1924","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}]}},"0:228:2179":{"id":"0:228:2179","crate_id":0,"name":"send_vectored","span":{"filename":"src/socket.rs","begin":[591,4],"end":[593,5]},"visibility":"public","docs":"Send data to the connected peer. Returns the amount of bytes written.","links":{},"attrs":["#[cfg(not(target_os = \"redox\"))]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["bufs",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"resolved_path","inner":{"name":"IoSlice","id":"1:10932:1934","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:3953:190","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2782:3131":{"id":"2:2782:3131","crate_id":2,"name":"borrow","span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[rustc_diagnostic_item = \"noop_method_borrow\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:281:2420":{"id":"0:281:2420","crate_id":0,"name":"ttl","span":{"filename":"src/socket.rs","begin":[1273,4],"end":[1277,5]},"visibility":"public","docs":"Get the value of the `IP_TTL` option for this socket.\n\nFor more information about this option, see [`set_ttl`].\n\n[`set_ttl`]: Socket::set_ttl","links":{"Socket::set_ttl":"0:188:1596"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:3953:190","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"u32"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:783:1691":{"id":"0:783:1691","crate_id":0,"name":"with_time","span":{"filename":"src/lib.rs","begin":[360,4],"end":[365,5]},"visibility":"public","docs":"Set the amount of time after which TCP keepalive probes will be sent on\nidle connections.\n\nThis will set `TCP_KEEPALIVE` on macOS and iOS, and\n`TCP_KEEPIDLE` on all other Unix operating systems, except\nOpenBSD and Haiku which don't support any way to set this\noption. On Windows, this sets the value of the `tcp_keepalive`\nstruct's `keepalivetime` field.\n\nSome platforms specify this value in seconds, so sub-second\nspecifications may be omitted.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["time",{"kind":"resolved_path","inner":{"name":"Duration","id":"2:49863:116","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13207:37336":{"id":"2:13207:37336","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```","links":{"str::split_whitespace":"1:15728:3066"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"split_ascii_whitespace\", since = \"1.34.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitAsciiWhitespace","id":"2:49402:10328","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:254:2296":{"id":"0:254:2296","crate_id":0,"name":"set_read_timeout","span":{"filename":"src/socket.rs","begin":[910,4],"end":[912,5]},"visibility":"public","docs":"Set value for the `SO_RCVTIMEO` option on this socket.\n\nIf `timeout` is `None`, then `read` and `recv` calls will block\nindefinitely.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["duration",{"kind":"resolved_path","inner":{"name":"Option","id":"2:47161:161","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Duration","id":"2:49863:116","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:3953:190","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:5683:9644":{"id":"1:5683:9644","crate_id":1,"name":"FileTypeExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5684:55643","1:5685:55644","1:5686:55645","1:5687:55646"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:298:2492":{"id":"0:298:2492","crate_id":0,"name":"set_multicast_loop_v6","span":{"filename":"src/socket.rs","begin":[1449,4],"end":[1458,5]},"visibility":"public","docs":"Set the value of the `IPV6_MULTICAST_LOOP` option for this socket.\n\nControls whether this socket sees the multicast packets it sends itself.\nNote that this may not have any affect on IPv4 sockets.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["loop_v6",{"kind":"primitive","inner":"bool"}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:3953:190","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:778:9281":{"id":"5:778:9281","crate_id":5,"name":"Owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"typedef","inner":{"type":{"kind":"generic","inner":"T"},"generics":{"params":[],"where_predicates":[]}}},"2:2829:168":{"id":"2:2829:168","crate_id":2,"name":"PartialEq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2831:584","2:2832:884"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Rhs"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3182:3177","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"0:787:1506":{"id":"0:787:1506","crate_id":0,"name":"0","span":{"filename":"src/socket.rs","begin":[730,10],"end":[730,13]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"struct_field","inner":{"kind":"primitive","inner":"u32"}},"2:3077:73":{"id":"2:3077:73","crate_id":2,"name":"AsMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3079:9219"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3182:3177","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"b:2:3110-0:764:1668":{"id":"b:2:3110-0:764:1668","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"From","id":"2:3083:130","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"MaybeUninitSlice","id":"0:764:1668","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"items":["2:3112:660"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:3106-0:188:1596":{"id":"b:2:3106-0:188:1596","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"From","id":"2:3083:130","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:3080:144","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Socket","id":"0:188:1596","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3109:1904"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:214:2090":{"id":"0:214:2090","crate_id":0,"name":"shutdown","span":{"filename":"src/socket.rs","begin":[362,4],"end":[364,5]},"visibility":"public","docs":"Shuts down the read, write, or both halves of this connection.\n\nThis function will cause all pending and future I/O on the specified\nportions to return immediately with an appropriate value.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["how",{"kind":"resolved_path","inner":{"name":"Shutdown","id":"1:11159:1936","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:3953:190","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:739:1613":{"id":"0:739:1613","crate_id":0,"name":"IPV4","span":{"filename":"src/lib.rs","begin":[158,4],"end":[158,50]},"visibility":"public","docs":"Domain for IPv4 communication, corresponding to `AF_INET`.","links":{},"attrs":[],"deprecation":null,"kind":"assoc_const","inner":{"type":{"kind":"resolved_path","inner":{"name":"Domain","id":"0:811:1611","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"default":"Domain(sys::AF_INET)"}},"0:327:2564":{"id":"0:327:2564","crate_id":0,"name":"write_vectored","span":{"filename":"src/socket.rs","begin":[1757,4],"end":[1759,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(target_os = \"redox\"))]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["bufs",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"resolved_path","inner":{"name":"IoSlice","id":"1:10932:1934","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:3953:190","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:10107:9304":{"id":"2:10107:9304","crate_id":2,"name":"Octal","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10108:639"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13243:54174":{"id":"2:13243:54174","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"self::pattern":"2:12815:10001","str::rsplitn":"1:15728:3066","prim@char":"1:15722:3061"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitN","id":"2:49223:9425","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12825:10002","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:9118:9068-0:824:1624":{"id":"a:2:9118:9068-0:824:1624","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"UnwindSafe","id":"2:9118:9068","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Type","id":"0:824:1624","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:763:1664":{"id":"0:763:1664","crate_id":0,"name":"is_truncated","span":{"filename":"src/lib.rs","begin":[283,4],"end":[285,5]},"visibility":"public","docs":"Check if the message contains a truncated datagram.\n\nThis flag is only used for datagram-based sockets,\nnot for stream sockets.\n\nOn Unix this corresponds to the `MSG_TRUNC` flag.\nOn Windows this corresponds to the `WSAEMSGSIZE` error code.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:97:660":{"id":"0:97:660","crate_id":0,"name":"from","span":{"filename":"src/sockaddr.rs","begin":[223,4],"end":[247,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["addr",{"kind":"resolved_path","inner":{"name":"SocketAddrV4","id":"1:11026:1802","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}]],"output":{"kind":"resolved_path","inner":{"name":"SockAddr","id":"0:77:1595","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3116-0:811:1611":{"id":"b:2:3116-0:811:1611","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:3090:211","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"TryInto","id":"2:3086:212","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Domain","id":"0:811:1611","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3119:122","2:3120:1384"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:12840:10005":{"id":"2:12840:10005","crate_id":2,"name":"ReverseSearcher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:12842:9220","2:12843:58297","2:12844:58298"],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Searcher","id":"2:12834:10004","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:822:584":{"id":"0:822:584","crate_id":0,"name":"eq","span":{"filename":"src/lib.rs","begin":[153,26],"end":[153,35]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"Domain","id":"0:811:1611","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13240:59240":{"id":"2:13240:59240","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"prim@char":"1:15722:3061","self::pattern":"2:12815:10001","str::split":"1:15728:3066","str::split_terminator":"1:15728:3066"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitTerminator","id":"2:49187:10318","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12825:10002","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12825:10002","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:12840:10005","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:196:1992":{"id":"0:196:1992","crate_id":0,"name":"new_raw","span":{"filename":"src/socket.rs","begin":[136,4],"end":[139,5]},"visibility":"public","docs":"Creates a new socket ready to be configured.\n\nThis function corresponds to `socket(2)` on Unix and `WSASocketW` on\nWindows and simply creates a new socket, no other configuration is done.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["domain",{"kind":"resolved_path","inner":{"name":"Domain","id":"0:811:1611","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}],["ty",{"kind":"resolved_path","inner":{"name":"Type","id":"0:824:1624","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}],["protocol",{"kind":"resolved_path","inner":{"name":"Option","id":"2:47161:161","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Protocol","id":"0:837:1642","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:3953:190","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Socket","id":"0:188:1596","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:3177:195-0:764:1668":{"id":"a:2:3177:195-0:764:1668","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Send","id":"2:3177:195","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"MaybeUninitSlice","id":"0:764:1668","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:3552:3223":{"id":"2:3552:3223","crate_id":2,"name":"RangeBounds","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3554:58383","2:3555:58384","2:3556:54178"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3182:3177","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"2:3621:3224":{"id":"2:3621:3224","crate_id":2,"name":"OneSidedRange","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3182:3177","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"RangeBounds","id":"2:3552:3223","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:296:2486":{"id":"0:296:2486","crate_id":0,"name":"multicast_loop_v6","span":{"filename":"src/socket.rs","begin":[1438,4],"end":[1443,5]},"visibility":"public","docs":"Get the value of the `IPV6_MULTICAST_LOOP` option for this socket.\n\nFor more information about this option, see [`set_multicast_loop_v6`].\n\n[`set_multicast_loop_v6`]: Socket::set_multicast_loop_v6","links":{"Socket::set_multicast_loop_v6":"0:188:1596"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:3953:190","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"bool"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3125:1383":{"id":"2:3125:1383","crate_id":2,"name":"try_from","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["value",{"kind":"generic","inner":"U"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47288:190","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"T"},"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:3090:211","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:747:1627":{"id":"0:747:1627","crate_id":0,"name":"STREAM","span":{"filename":"src/lib.rs","begin":[200,4],"end":[200,52]},"visibility":"public","docs":"Type corresponding to `SOCK_STREAM`.\n\nUsed for protocols such as TCP.","links":{},"attrs":[],"deprecation":null,"kind":"assoc_const","inner":{"type":{"kind":"resolved_path","inner":{"name":"Type","id":"0:824:1624","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"default":"Type(sys::SOCK_STREAM)"}},"0:827":{"id":"0:827","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[193,9],"end":[193,13]},"visibility":"crate","docs":null,"links":{},"attrs":["#[automatically_derived]","#[allow(unused_qualifications)]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Copy","id":"2:3187:102","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Type","id":"0:824:1624","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:770:639":{"id":"0:770:639","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[295,4],"end":[297,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["fmt",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"fmt::Formatter","id":"2:10058:129","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"fmt::Result","id":"2:10047:190","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:748:1631":{"id":"0:748:1631","crate_id":0,"name":"DGRAM","span":{"filename":"src/lib.rs","begin":[205,4],"end":[205,50]},"visibility":"public","docs":"Type corresponding to `SOCK_DGRAM`.\n\nUsed for protocols such as UDP.","links":{},"attrs":[],"deprecation":null,"kind":"assoc_const","inner":{"type":{"kind":"resolved_path","inner":{"name":"Type","id":"0:824:1624","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"default":"Type(sys::SOCK_DGRAM)"}},"0:833":{"id":"0:833","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[193,26],"end":[193,35]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"StructuralPartialEq","id":"2:3185:202","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Type","id":"0:824:1624","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"2:13252:59242":{"id":"2:13252:59242","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":["#[stable(feature = \"str_split_once\", since = \"1.52.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47161:161","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12825:10002","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12825:10002","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:12840:10005","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13189:287":{"id":"2:13189:287","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"`u8`":"1:15739:3075","str::as_mut_ptr":"1:15728:3066"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"rustc_str_as_ptr\", since = \"1.32.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":false,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:258:2313":{"id":"0:258:2313","crate_id":0,"name":"send_buffer_size","span":{"filename":"src/socket.rs","begin":[947,4],"end":[952,5]},"visibility":"public","docs":"Get the value of the `SO_SNDBUF` option on this socket.\n\nFor more information about this option, see [`set_send_buffer_size`].\n\n[`set_send_buffer_size`]: Socket::set_send_buffer_size","links":{"Socket::set_send_buffer_size":"0:188:1596"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:3953:190","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:6861:3308":{"id":"1:6861:3308","crate_id":1,"name":"AsFd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6862:57334"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13224:9225":{"id":"2:13224:9225","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"2:47161:161","self::pattern":"2:12815:10001","prim@char":"1:15722:3061"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47161:161","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12825:10002","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12825:10002","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:12840:10005","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:191":{"id":"0:191","crate_id":0,"name":null,"span":{"filename":"src/socket.rs","begin":[79,0],"end":[663,1]},"visibility":{"restricted":{"parent":"0:102:1583","path":"::socket"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"Socket","id":"0:188:1596","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:195:897","0:196:1992","0:198:2000","0:199:2003","0:202:2008","0:203:2018","0:204:2034","0:205:2045","0:206:2051","0:207:2055","0:209:2062","0:210:2067","0:211:34","0:212:2081","0:213:2036","0:214:2090","0:215:2106","0:216:2113","0:217:2107","0:218:2130","0:219:2132","0:220:2145","0:221:2150","0:222:2151","0:223:2158","0:224:2159","0:225:2168","0:226:2173","0:227:2174","0:228:2179","0:229:2180","0:230:2188","0:231:2192","0:232:2193","0:233:2199","0:234:2200"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:10048:1933":{"id":"2:10048:1933","crate_id":2,"name":"Write","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10049:1497","2:10050:58237","2:10052:9150"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:218:2130":{"id":"0:218:2130","crate_id":0,"name":"recv_vectored","span":{"filename":"src/socket.rs","begin":[440,4],"end":[445,5]},"visibility":"public","docs":"Receives data on the socket from the remote address to which it is\nconnected. Unlike [`recv`] this allows passing multiple buffers.\n\nThe [`connect`] method will connect this socket to a remote address.\nThis method might fail if the socket is not connected.\n\nIn addition to the number of bytes read, this function returns the flags\nfor the received message. See [`RecvFlags`] for more information about\nthe returned flags.\n\n[`recv`]: Socket::recv\n[`connect`]: Socket::connect\n\n# Safety\n\nNormally casting a `IoSliceMut` to `MaybeUninitSlice` would be unsound,\nas that allows us to write uninitialised bytes to the buffer. However\nthis implementation promises to not write uninitialised bytes to the\n`bufs` and passes it directly to `recvmsg(2)` system call. This promise\nensures that this function can be called using `bufs` of type `&mut\n[IoSliceMut]`.\n\nNote that the [`io::Read::read_vectored`] implementation calls this\nfunction with `buf`s of type `&mut [IoSliceMut]`, allowing initialised\nbuffers to be used without using `unsafe`.","links":{"Socket::recv":"0:188:1596","`io::Read::read_vectored`":"1:4539:1932","Socket::connect":"0:188:1596","`RecvFlags`":"0:850:1658"},"attrs":["#[cfg(not(target_os = \"redox\"))]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["bufs",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"resolved_path","inner":{"name":"MaybeUninitSlice","id":"0:764:1668","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:3953:190","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"primitive","inner":"usize"},{"kind":"resolved_path","inner":{"name":"RecvFlags","id":"0:850:1658","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}]}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:794:660":{"id":"0:794:660","crate_id":0,"name":"from","span":{"filename":"src/socket.rs","begin":[1776,0],"end":[1776,29]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["socket",{"kind":"resolved_path","inner":{"name":"net::TcpStream","id":"1:5281:1970","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}]],"output":{"kind":"resolved_path","inner":{"name":"Socket","id":"0:188:1596","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:4539:1932":{"id":"1:4539:1932","crate_id":1,"name":"Read","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4540:2562","1:4541:2563","1:4543:9318","1:4544:9319","1:4545:3258","1:4546:9320","1:4547:9321","1:4549:9322","1:4550:9253","1:4551:2708","1:4552:9237","1:4554:3171"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:278:2418":{"id":"0:278:2418","crate_id":0,"name":"multicast_ttl_v4","span":{"filename":"src/socket.rs","begin":[1243,4],"end":[1248,5]},"visibility":"public","docs":"Get the value of the `IP_MULTICAST_TTL` option for this socket.\n\nFor more information about this option, see [`set_multicast_ttl_v4`].\n\n[`set_multicast_ttl_v4`]: Socket::set_multicast_ttl_v4","links":{"Socket::set_multicast_ttl_v4":"0:188:1596"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:3953:190","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"u32"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:869":{"id":"0:869","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[328,16],"end":[328,21]},"visibility":"crate","docs":null,"links":{},"attrs":["#[automatically_derived]","#[allow(unused_qualifications)]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2799:100","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"TcpKeepalive","id":"0:863:1678","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:870:391"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:329":{"id":"0:329","crate_id":0,"name":null,"span":{"filename":"src/socket.rs","begin":[1766,0],"end":[1774,1]},"visibility":{"restricted":{"parent":"0:102:1583","path":"::socket"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Debug","id":"2:10098:105","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Socket","id":"0:188:1596","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:330:639"],"negative":false,"synthetic":false,"blanket_impl":null}},"a:2:9118:9068-0:850:1658":{"id":"a:2:9118:9068-0:850:1658","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"UnwindSafe","id":"2:9118:9068","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"RecvFlags","id":"0:850:1658","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:10322:141":{"id":"2:10322:141","crate_id":2,"name":"Hasher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10323:631","2:10324:1580","2:10325:57492","2:10326:57493","2:10327:57494","2:10328:57495","2:10329:57496","2:10330:57497","2:10331:57498","2:10332:57499","2:10333:57500","2:10334:57501","2:10335:57502","2:10336:57503","2:10337:57504","2:10338:1497"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:315":{"id":"0:315","crate_id":0,"name":null,"span":{"filename":"src/socket.rs","begin":[1721,0],"end":[1734,1]},"visibility":{"restricted":{"parent":"0:102:1583","path":"::socket"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["take","read_to_string","read_to_end","read_buf_exact","bytes","read_exact","by_ref","chain","read_buf","is_read_vectored","read_vectored"],"trait":{"kind":"resolved_path","inner":{"name":"Read","id":"1:4539:1932","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"resolved_path","inner":{"name":"Socket","id":"0:188:1596","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"items":["0:317:2562","0:318:2563"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:861:584":{"id":"0:861:584","crate_id":0,"name":"eq","span":{"filename":"src/lib.rs","begin":[271,26],"end":[271,35]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"RecvFlags","id":"0:850:1658","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3106-0:77:1595":{"id":"b:2:3106-0:77:1595","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"From","id":"2:3083:130","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:3080:144","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"SockAddr","id":"0:77:1595","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3109:1904"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:753":{"id":"0:753","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[240,0],"end":[252,1]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"Protocol","id":"0:837:1642","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:754:1644","0:755:1647","0:756:1650","0:757:1653"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:2:2783-0:764:1668":{"id":"b:2:2783-0:764:1668","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3182:3177","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"BorrowMut","id":"2:2777:9396","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"MaybeUninitSlice","id":"0:764:1668","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"items":["2:2785:53607"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:233:2199":{"id":"0:233:2199","crate_id":0,"name":"send_to_vectored","span":{"filename":"src/socket.rs","begin":[645,4],"end":[647,5]},"visibility":"public","docs":"Send data to a peer listening on `addr`. Returns the amount of bytes\nwritten.","links":{},"attrs":["#[cfg(not(target_os = \"redox\"))]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["bufs",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"resolved_path","inner":{"name":"IoSlice","id":"1:10932:1934","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}}],["addr",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"SockAddr","id":"0:77:1595","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:3953:190","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3116-0:850:1658":{"id":"b:2:3116-0:850:1658","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:3090:211","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"TryInto","id":"2:3086:212","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"RecvFlags","id":"0:850:1658","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3119:122","2:3120:1384"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:2783-0:811:1611":{"id":"b:2:2783-0:811:1611","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3182:3177","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"BorrowMut","id":"2:2777:9396","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Domain","id":"0:811:1611","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:2785:53607"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"1:5643:9643":{"id":"1:5643:9643","crate_id":1,"name":"OpenOptionsExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5644:8971","1:5645:13084"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:225:2168":{"id":"0:225:2168","crate_id":0,"name":"peek_from","span":{"filename":"src/socket.rs","begin":[566,4],"end":[568,5]},"visibility":"public","docs":"Receives data from the socket, without removing it from the queue.\n\nSuccessive calls return the same data. This is accomplished by passing\n`MSG_PEEK` as a flag to the underlying `recvfrom` system call.\n\nOn success, returns the number of bytes peeked and the address from\nwhence the data came.\n\n# Safety\n\n`peek_from` makes the same safety guarantees regarding the `buf`fer as\n[`recv`].\n\n[`recv`]: Socket::recv","links":{"Socket::recv":"0:188:1596"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"resolved_path","inner":{"name":"MaybeUninit","id":"2:32028:1567","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"u8"}}],"bindings":[]}},"param_names":[]}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:3953:190","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"primitive","inner":"usize"},{"kind":"resolved_path","inner":{"name":"SockAddr","id":"0:77:1595","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}]}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3106-0:824:1624":{"id":"b:2:3106-0:824:1624","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"From","id":"2:3083:130","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:3080:144","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Type","id":"0:824:1624","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3109:1904"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:3280:3208":{"id":"2:3280:3208","crate_id":2,"name":"SubAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3282:1326"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:265":{"id":"0:265","crate_id":0,"name":null,"span":{"filename":"src/socket.rs","begin":[1012,0],"end":[1323,1]},"visibility":{"restricted":{"parent":"0:102:1583","path":"::socket"}},"docs":"Socket options for IPv4 sockets, get/set using `IPPROTO_IP`.\n\nAdditional documentation can be found in documentation of the OS.\n* Linux: <https://man7.org/linux/man-pages/man7/ip.7.html>\n* Windows: <https://docs.microsoft.com/en-us/windows/win32/winsock/ipproto-ip-socket-options>","links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"Socket","id":"0:188:1596","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:266:2353","0:268:2368","0:269:2375","0:270:2386","0:271:2391","0:272:2396","0:273:2400","0:274:2404","0:275:2408","0:277:2414","0:278:2418","0:280:2425","0:281:2420","0:283:2433","0:284:2440","0:285:2441"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:2:3110-0:811:1611":{"id":"b:2:3110-0:811:1611","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"From","id":"2:3083:130","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Domain","id":"0:811:1611","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3112:660"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:3250:3203":{"id":"2:3250:3203","crate_id":2,"name":"Sub","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3252:166","2:3253:1325"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:322:2564":{"id":"0:322:2564","crate_id":0,"name":"write_vectored","span":{"filename":"src/socket.rs","begin":[1742,4],"end":[1744,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(target_os = \"redox\"))]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["bufs",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"resolved_path","inner":{"name":"IoSlice","id":"1:10932:1934","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:3953:190","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:622:2670":{"id":"0:622:2670","crate_id":0,"name":"UNIX","span":{"filename":"src/sys/unix.rs","begin":[209,4],"end":[209,51]},"visibility":"public","docs":"Domain for Unix socket communication, corresponding to `AF_UNIX`.","links":{},"attrs":[],"deprecation":null,"kind":"assoc_const","inner":{"type":{"kind":"resolved_path","inner":{"name":"Domain","id":"0:811:1611","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"default":"Domain(libc::AF_UNIX)"}},"1:4596:1933":{"id":"1:4596:1933","crate_id":1,"name":"Write","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4597:1580","1:4598:2564","1:4600:9323","1:4601:2565","1:4602:9324","1:4603:9325","1:4604:9150","1:4613:9253"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:306:2517":{"id":"0:306:2517","crate_id":0,"name":"keepalive_time","span":{"filename":"src/socket.rs","begin":[1540,4],"end":[1542,5]},"visibility":"public","docs":"Get the value of the `TCP_KEEPIDLE` option on this socket.\n\nThis returns the value of `TCP_KEEPALIVE` on macOS and iOS and `TCP_KEEPIDLE` on all other\nsupported Unix operating systems.","links":{},"attrs":["#[cfg(any(doc,\nall(feature = \"all\",\nnot(any(windows, target_os = \"haiku\", target_os = \"openbsd\")))))]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:3953:190","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Duration","id":"2:49863:116","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:9119:9067-0:811:1611":{"id":"a:2:9119:9067-0:811:1611","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"RefUnwindSafe","id":"2:9119:9067","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Domain","id":"0:811:1611","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:358":{"id":"0:358","crate_id":0,"name":null,"span":{"filename":"src/sockref.rs","begin":[95,0],"end":[101,1]},"visibility":{"restricted":{"parent":"0:331:1589","path":"::sockref"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'s","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Deref","id":"2:3396:111","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"SockRef","id":"0:354:1597","args":{"angle_bracketed":{"args":[{"lifetime":"'s"}],"bindings":[]}},"param_names":[]}},"items":["0:360:205","0:361:523"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:629:639":{"id":"0:629:639","crate_id":0,"name":"fmt","span":{"filename":"src/sys/unix.rs","begin":[404,4],"end":[410,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"std::fmt::Formatter","id":"2:10058:129","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"std::fmt::Result","id":"2:10047:190","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:844":{"id":"0:844","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[237,22],"end":[237,24]},"visibility":"crate","docs":null,"links":{},"attrs":["#[automatically_derived]","#[allow(unused_qualifications)]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"kind":"resolved_path","inner":{"name":"Eq","id":"2:2834:119","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Protocol","id":"0:837:1642","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"b:2:2780-0:863:1678":{"id":"b:2:2780-0:863:1678","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3182:3177","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Borrow","id":"2:2774:93","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"TcpKeepalive","id":"0:863:1678","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:2782:3131"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:3463:3229":{"id":"2:3463:3229","crate_id":2,"name":"Generator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3465:221","2:3466:191","2:3467:58993"],"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":{"kind":"tuple","inner":[]},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:94":{"id":"0:94","crate_id":0,"name":null,"span":{"filename":"src/sockaddr.rs","begin":[213,0],"end":[220,1]},"visibility":{"restricted":{"parent":"0:24:1588","path":"::sockaddr"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"From","id":"2:3083:130","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"SocketAddr","id":"1:11002:1569","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"SockAddr","id":"0:77:1595","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:95:660"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:848:584":{"id":"0:848:584","crate_id":0,"name":"eq","span":{"filename":"src/lib.rs","begin":[237,26],"end":[237,35]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"Protocol","id":"0:837:1642","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:6043:59895":{"id":"5:6043:59895","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:8276:200"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]","#[stable(feature = \"unicode_case_mapping\", since = \"1.2.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8276:200","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:4682:10103":{"id":"2:4682:10103","crate_id":2,"name":"AsyncIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:4683:9230","2:4684:58060","2:4685:9232"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3124:122":{"id":"2:3124:122","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"typedef","inner":{"type":{"kind":"resolved_path","inner":{"name":"Infallible","id":"2:38483:9669","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generics":{"params":[],"where_predicates":[]}}},"0:317:2562":{"id":"0:317:2562","crate_id":0,"name":"read","span":{"filename":"src/socket.rs","begin":[1722,4],"end":[1726,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:3953:190","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:3218:3315-0:850:1658":{"id":"a:2:3218:3315-0:850:1658","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Unpin","id":"2:3218:3315","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"RecvFlags","id":"0:850:1658","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"b:2:3116-0:863:1678":{"id":"b:2:3116-0:863:1678","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:3090:211","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"TryInto","id":"2:3086:212","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"TcpKeepalive","id":"0:863:1678","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3119:122","2:3120:1384"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:625":{"id":"0:625","crate_id":0,"name":null,"span":{"filename":"src/sys/unix.rs","begin":[379,0],"end":[400,1]},"visibility":{"restricted":{"parent":"0:368:1592","path":"::sys"}},"docs":"Unix-only API.","links":{},"attrs":["#[cfg(not(target_os = \"redox\"))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"RecvFlags","id":"0:850:1658","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:626:2690","0:627:2696"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:3185:202":{"id":"2:3185:202","crate_id":2,"name":"StructuralPartialEq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:791":{"id":"0:791","crate_id":0,"name":null,"span":{"filename":"src/socket.rs","begin":[727,9],"end":[727,14]},"visibility":{"restricted":{"parent":"0:102:1583","path":"::socket"}},"docs":null,"links":{},"attrs":["#[automatically_derived]","#[allow(unused_qualifications)]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Debug","id":"2:10098:105","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"InterfaceIndexOrAddress","id":"0:784:1603","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:792:639"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:321:1580":{"id":"0:321:1580","crate_id":0,"name":"write","span":{"filename":"src/socket.rs","begin":[1737,4],"end":[1739,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:3953:190","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:807":{"id":"0:807","crate_id":0,"name":null,"span":{"filename":"src/sys/unix.rs","begin":[336,0],"end":[367,1]},"visibility":{"restricted":{"parent":"0:368:1592","path":"::sys"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Debug","id":"2:10098:105","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Type","id":"0:824:1624","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:808:639"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:87:1878":{"id":"0:87:1878","crate_id":0,"name":"family","span":{"filename":"src/sockaddr.rs","begin":[142,4],"end":[144,5]},"visibility":"public","docs":"Returns this address's family.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"sa_family_t","id":"20:655:1805","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:757:1653":{"id":"0:757:1653","crate_id":0,"name":"UDP","span":{"filename":"src/lib.rs","begin":[251,4],"end":[251,57]},"visibility":"public","docs":"Protocol corresponding to `UDP`.","links":{},"attrs":[],"deprecation":null,"kind":"assoc_const","inner":{"type":{"kind":"resolved_path","inner":{"name":"Protocol","id":"0:837:1642","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"default":"Protocol(sys::IPPROTO_UDP)"}},"0:815":{"id":"0:815","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[153,15],"end":[153,20]},"visibility":"crate","docs":null,"links":{},"attrs":["#[automatically_derived]","#[allow(unused_qualifications)]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2799:100","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Domain","id":"0:811:1611","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:816:391"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:3309:3210":{"id":"2:3309:3210","crate_id":2,"name":"BitOr","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3311:166","2:3312:336"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13999:9397":{"id":"2:13999:9397","crate_id":2,"name":"Allocator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:14000:57741","2:14001:57742","2:14002:57743","2:14003:57744","2:14004:57745","2:14005:57746","2:14006:9253"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13234:54172":{"id":"2:13234:54172","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"2:12815:10001","prim@char":"1:15722:3061","`DoubleEndedIterator`":"2:8233:115","str::split":"1:15728:3066"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplit","id":"2:49137:9421","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12825:10002","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12825:10002","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:12840:10005","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3906-0:188:1596":{"id":"b:2:3906-0:188:1596","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3182:3177","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Any","id":"2:3904:68","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Socket","id":"0:188:1596","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3908:1397"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:13205:2708":{"id":"2:13205:2708","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Bytes","id":"2:49105:3265","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3245:3198":{"id":"2:3245:3198","crate_id":2,"name":"Add","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3247:166","2:3248:249"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:5693:9645":{"id":"1:5693:9645","crate_id":1,"name":"DirEntryExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5694:53611"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:778":{"id":"0:778","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[319,0],"end":[323,1]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"DerefMut","id":"2:3409:1570","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"MaybeUninitSlice","id":"0:764:1668","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"items":["0:780:525"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:717":{"id":"0:717","crate_id":0,"name":null,"span":{"filename":"src/sys/unix.rs","begin":[1997,0],"end":[2001,1]},"visibility":{"restricted":{"parent":"0:368:1592","path":"::sys"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"AsRawFd","id":"1:6767:2571","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"crate::Socket","id":"0:188:1596","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:718:2629"],"negative":false,"synthetic":false,"blanket_impl":null}},"1:9209:9677":{"id":"1:9209:9677","crate_id":1,"name":"StdFloat","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:9210:57797","1:9211:57798","1:9212:57799","1:9213:57800","1:9214:10358","1:9215:44374","1:9216:57796"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10429:9634","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:10115:174":{"id":"2:10115:174","crate_id":2,"name":"Pointer","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10116:639"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13210:37331":{"id":"2:13210:37331","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"encode_utf16\", since = \"1.8.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EncodeUtf16","id":"2:49411:10329","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:22777:21445":{"id":"2:22777:21445","crate_id":2,"name":"ToBitMask","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:22778:12633","2:22779:59161","2:22780:59162"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:22770:9634","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"b:2:3121-0:354:1597":{"id":"b:2:3121-0:354:1597","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:3080:144","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:3090:211","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"SockRef","id":"0:354:1597","args":{"angle_bracketed":{"args":[{"lifetime":"'s"}],"bindings":[]}},"param_names":[]}},"items":["2:3124:122","2:3125:1383"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"a:2:3177:195-0:837:1642":{"id":"a:2:3177:195-0:837:1642","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Send","id":"2:3177:195","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Protocol","id":"0:837:1642","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:240:2231":{"id":"0:240:2231","crate_id":0,"name":"set_broadcast","span":{"filename":"src/socket.rs","begin":[757,4],"end":[766,5]},"visibility":"public","docs":"Set the value of the `SO_BROADCAST` option for this socket.\n\nWhen enabled, this socket is allowed to send packets to a broadcast\naddress.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["broadcast",{"kind":"primitive","inner":"bool"}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:3953:190","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:203:2018":{"id":"0:203:2018","crate_id":0,"name":"connect","span":{"filename":"src/socket.rs","begin":[198,4],"end":[200,5]},"visibility":"public","docs":"Initiate a connection on this socket to the specified address.\n\nThis function directly corresponds to the `connect(2)` function on\nWindows and Unix.\n\nAn error will be returned if `listen` or `connect` has already been\ncalled on this builder.\n\n# Notes\n\nWhen using a non-blocking connect (by setting the socket into\nnon-blocking mode before calling this function), socket option can't be\nset *while connecting*. This will cause errors on Windows. Socket\noptions can be safely set before and after connecting the socket.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["address",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"SockAddr","id":"0:77:1595","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:3953:190","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:810:639":{"id":"0:810:639","crate_id":0,"name":"fmt","span":{"filename":"src/sys/unix.rs","begin":[369,0],"end":[375,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"std::fmt::Formatter","id":"2:10058:129","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"std::fmt::Result","id":"2:10047:190","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:751":{"id":"0:751","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[224,0],"end":[228,1]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"From","id":"2:3083:130","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Type","id":"0:824:1624","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"c_int","id":"20:63:1594","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:752:660"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:821":{"id":"0:821","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[153,26],"end":[153,35]},"visibility":"crate","docs":null,"links":{},"attrs":["#[automatically_derived]","#[allow(unused_qualifications)]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"kind":"resolved_path","inner":{"name":"PartialEq","id":"2:2829:168","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Domain","id":"0:811:1611","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Domain","id":"0:811:1611","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:822:584","0:823:884"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:3182:3177":{"id":"2:3182:3177","crate_id":2,"name":"Sized","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:809":{"id":"0:809","crate_id":0,"name":null,"span":{"filename":"src/sys/unix.rs","begin":[369,0],"end":[375,1]},"visibility":{"restricted":{"parent":"0:368:1592","path":"::sys"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Debug","id":"2:10098:105","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Protocol","id":"0:837:1642","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:810:639"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:643":{"id":"0:643","crate_id":0,"name":null,"span":{"filename":"src/sys/unix.rs","begin":[444,0],"end":[507,1]},"visibility":{"restricted":{"parent":"0:368:1592","path":"::sys"}},"docs":"Unix only API.","links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"SockAddr","id":"0:77:1595","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"2:2785:53607":{"id":"2:2785:53607","crate_id":2,"name":"borrow_mut","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:804:660":{"id":"0:804:660","crate_id":0,"name":"from","span":{"filename":"src/socket.rs","begin":[1781,0],"end":[1781,29]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["socket",{"kind":"resolved_path","inner":{"name":"Socket","id":"0:188:1596","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}]],"output":{"kind":"resolved_path","inner":{"name":"net::UdpSocket","id":"1:5406:2568","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3904:68":{"id":"2:3904:68","crate_id":2,"name":"Any","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3905:1397"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"outlives":"'static"}],"implementations":[]}},"2:13202:54162":{"id":"2:13202:54162","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"1:15728:3066"},"attrs":["#[must_use]","#[stable(feature = \"str_split_at\", since = \"1.4.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:10113:9311":{"id":"2:10113:9311","crate_id":2,"name":"UpperHex","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10114:639"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:862:884":{"id":"0:862:884","crate_id":0,"name":"ne","span":{"filename":"src/lib.rs","begin":[271,26],"end":[271,35]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"RecvFlags","id":"0:850:1658","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:9118:9068-0:784:1603":{"id":"a:2:9118:9068-0:784:1603","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"UnwindSafe","id":"2:9118:9068","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"InterfaceIndexOrAddress","id":"0:784:1603","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:245:2252":{"id":"0:245:2252","crate_id":0,"name":"linger","span":{"filename":"src/socket.rs","begin":[812,4],"end":[817,5]},"visibility":"public","docs":"Get the value of the `SO_LINGER` option on this socket.\n\nFor more information about this option, see [`set_linger`].\n\n[`set_linger`]: Socket::set_linger","links":{"Socket::set_linger":"0:188:1596"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:3953:190","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47161:161","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Duration","id":"2:49863:116","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3633:208":{"id":"2:3633:208","crate_id":2,"name":"Try","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3634:166","2:3635:3226","2:3636:665","2:3637:352"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FromResidual","id":"2:3638:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Residual","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"Try","id":"2:3633:208","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:6769:1938":{"id":"1:6769:1938","crate_id":1,"name":"FromRawFd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6770:1584"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:867":{"id":"0:867","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[328,9],"end":[328,14]},"visibility":"crate","docs":null,"links":{},"attrs":["#[automatically_derived]","#[allow(unused_qualifications)]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Debug","id":"2:10098:105","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"TcpKeepalive","id":"0:863:1678","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:868:639"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:2:3110-0:188:1596":{"id":"b:2:3110-0:188:1596","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"From","id":"2:3083:130","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Socket","id":"0:188:1596","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3112:660"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:10117:9308":{"id":"2:10117:9308","crate_id":2,"name":"LowerExp","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10118:639"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:773:897":{"id":"0:773:897","crate_id":0,"name":"new","span":{"filename":"src/lib.rs","begin":[306,4],"end":[308,5]},"visibility":"public","docs":"Creates a new `MaybeUninitSlice` wrapping a byte slice.\n\n# Panics\n\nPanics on Windows if the slice is larger than 4GB.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["buf",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":true,"type":{"kind":"slice","inner":{"kind":"resolved_path","inner":{"name":"MaybeUninit","id":"2:32028:1567","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"u8"}}],"bindings":[]}},"param_names":[]}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"MaybeUninitSlice","id":"0:764:1668","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:3218:3315-0:354:1597":{"id":"a:2:3218:3315-0:354:1597","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'s","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Unpin","id":"2:3218:3315","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"SockRef","id":"0:354:1597","args":{"angle_bracketed":{"args":[{"lifetime":"'s"}],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"b:2:2780-0:764:1668":{"id":"b:2:2780-0:764:1668","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3182:3177","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Borrow","id":"2:2774:93","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"MaybeUninitSlice","id":"0:764:1668","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"items":["2:2782:3131"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:13184:59235":{"id":"2:13184:59235","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n# Panics\n\nPanics if `index > self.len()`.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"1:15728:3066"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:9119:9067-0:824:1624":{"id":"a:2:9119:9067-0:824:1624","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"RefUnwindSafe","id":"2:9119:9067","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Type","id":"0:824:1624","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:771":{"id":"0:771","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[300,0],"end":[309,1]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"MaybeUninitSlice","id":"0:764:1668","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"items":["0:773:897"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:99:660":{"id":"0:99:660","crate_id":0,"name":"from","span":{"filename":"src/sockaddr.rs","begin":[251,4],"end":[288,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["addr",{"kind":"resolved_path","inner":{"name":"SocketAddrV6","id":"1:11029:1803","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}]],"output":{"kind":"resolved_path","inner":{"name":"SockAddr","id":"0:77:1595","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13203:10348":{"id":"2:13203:10348","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:15722:3061"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Chars","id":"2:49089:10312","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3112:660":{"id":"2:3112:660","crate_id":2,"name":"from","span":null,"visibility":"default","docs":"Returns the argument unchanged.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["t",{"kind":"generic","inner":"T"}]],"output":{"kind":"generic","inner":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:9118:9068-0:837:1642":{"id":"a:2:9118:9068-0:837:1642","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"UnwindSafe","id":"2:9118:9068","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Protocol","id":"0:837:1642","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"b:2:3110-0:354:1597":{"id":"b:2:3110-0:354:1597","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"From","id":"2:3083:130","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"SockRef","id":"0:354:1597","args":{"angle_bracketed":{"args":[{"lifetime":"'s"}],"bindings":[]}},"param_names":[]}},"items":["2:3112:660"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:13179:770":{"id":"2:13179:770","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\nBasic usage:\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"1:15722:3061"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"const_str_len\", since = \"1.39.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13181:59233":{"id":"2:13181:59233","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]","#[stable(feature = \"is_char_boundary\", since = \"1.9.0\")]","#[rustc_const_unstable(feature = \"const_is_char_boundary\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:720:1585":{"id":"0:720:1585","crate_id":0,"name":"into_raw_fd","span":{"filename":"src/sys/unix.rs","begin":[2005,4],"end":[2007,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"c_int","id":"20:63:1594","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13228:54169":{"id":"2:13228:54169","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"str::split_whitespace":"1:15728:3066","str::rsplit":"1:15728:3066","self::pattern":"2:12815:10001","prim@char":"1:15722:3061","`DoubleEndedIterator`":"2:8233:115"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Split","id":"2:49119:3267","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12825:10002","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:238:2226":{"id":"0:238:2226","crate_id":0,"name":"broadcast","span":{"filename":"src/socket.rs","begin":[746,4],"end":[751,5]},"visibility":"public","docs":"Get the value of the `SO_BROADCAST` option for this socket.\n\nFor more information about this option, see [`set_broadcast`].\n\n[`set_broadcast`]: Socket::set_broadcast","links":{"Socket::set_broadcast":"0:188:1596"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:3953:190","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"bool"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3121-0:837:1642":{"id":"b:2:3121-0:837:1642","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:3080:144","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:3090:211","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Protocol","id":"0:837:1642","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3124:122","2:3125:1383"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:3187:102":{"id":"2:3187:102","crate_id":2,"name":"Copy","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2799:100","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"5:6023":{"id":"5:6023","crate_id":5,"name":null,"span":null,"visibility":{"restricted":{"parent":"5:5843:1310","path":"::str"}},"docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["5:6024:59892","5:6025:3172","5:6028:59893","5:6031:59894","5:6043:59895","5:6044:59896","5:6045:3288","5:6046:53745","5:6047:53744"],"negative":false,"synthetic":false,"blanket_impl":null}},"a:2:3218:3315-0:784:1603":{"id":"a:2:3218:3315-0:784:1603","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Unpin","id":"2:3218:3315","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"InterfaceIndexOrAddress","id":"0:784:1603","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:313:2563":{"id":"0:313:2563","crate_id":0,"name":"read_vectored","span":{"filename":"src/socket.rs","begin":[1711,4],"end":[1718,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(target_os = \"redox\"))]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["bufs",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"resolved_path","inner":{"name":"IoSliceMut","id":"1:4557:1935","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:3953:190","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:365:660":{"id":"0:365:660","crate_id":0,"name":"from","span":{"filename":"src/sockref.rs","begin":[111,4],"end":[118,5]},"visibility":"default","docs":"The caller must ensure `S` is actually a socket.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["socket",{"kind":"borrowed_ref","inner":{"lifetime":"'s","mutable":false,"type":{"kind":"generic","inner":"S"}}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2777:9396":{"id":"2:2777:9396","crate_id":2,"name":"BorrowMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2779:53607"],"generics":{"params":[{"name":"Borrowed","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Borrowed"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3182:3177","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Borrow","id":"2:2774:93","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Borrowed"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:266:2353":{"id":"0:266:2353","crate_id":0,"name":"ip_transparent","span":{"filename":"src/socket.rs","begin":[1058,4],"end":[1063,5]},"visibility":"public","docs":"Get the value of the `IP_TRANSPARENT` option on this socket.\n\nFor more information about this option, see [`set_ip_transparent`].\n\n[`set_ip_transparent`]: Socket::set_ip_transparent","links":{"Socket::set_ip_transparent":"0:188:1596"},"attrs":["#[cfg(any(doc, all(feature = \"all\", target_os = \"linux\")))]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:3953:190","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"bool"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:209:2062":{"id":"0:209:2062","crate_id":0,"name":"local_addr","span":{"filename":"src/socket.rs","begin":[308,4],"end":[310,5]},"visibility":"public","docs":"Returns the socket address of the local half of this socket.\n\n# Notes\n\nDepending on the OS this may return an error if the socket is not\n[bound].\n\n[bound]: Socket::bind","links":{"Socket::bind":"0:188:1596"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:3953:190","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"SockAddr","id":"0:77:1595","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:6695:9633":{"id":"1:6695:9633","crate_id":1,"name":"ChildExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6696:53609","1:6697:55662"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10429:9634","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13255:3141":{"id":"2:13255:3141","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"prim@char":"1:15722:3061","`DoubleEndedIterator`":"2:8233:115","str::matches":"1:15728:3066","self::pattern":"2:12815:10001"},"attrs":["#[stable(feature = \"str_matches\", since = \"1.2.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Matches","id":"2:49323:10324","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12825:10002","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3679:3231":{"id":"2:3679:3231","crate_id":2,"name":"CoerceUnsized","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3182:3177","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"a:2:3177:195-0:354:1597":{"id":"a:2:3177:195-0:354:1597","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'s","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Send","id":"2:3177:195","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"SockRef","id":"0:354:1597","args":{"angle_bracketed":{"args":[{"lifetime":"'s"}],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"1:7685:9804":{"id":"1:7685:9804","crate_id":1,"name":"Termination","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:7686:57696"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:6024:59892":{"id":"5:6024:59892","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[stable(feature = \"str_box_extras\", since = \"1.20.0\")]","#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:421:9083","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:8035:9398","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}}]],"output":{"kind":"resolved_path","inner":{"name":"Box","id":"5:421:9083","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:8035:9398","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:227:2174":{"id":"0:227:2174","crate_id":0,"name":"send_with_flags","span":{"filename":"src/socket.rs","begin":[584,4],"end":[586,5]},"visibility":"public","docs":"Identical to [`send`] but allows for specification of arbitrary flags to the underlying\n`send` call.\n\n[`send`]: #method.send","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}],["flags",{"kind":"resolved_path","inner":{"name":"c_int","id":"20:63:1594","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:3953:190","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3110-0:824:1624":{"id":"b:2:3110-0:824:1624","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"From","id":"2:3083:130","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Type","id":"0:824:1624","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3112:660"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:2783-0:77:1595":{"id":"b:2:2783-0:77:1595","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3182:3177","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"BorrowMut","id":"2:2777:9396","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"SockAddr","id":"0:77:1595","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:2785:53607"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:270:2386":{"id":"0:270:2386","crate_id":0,"name":"leave_multicast_v4","span":{"filename":"src/socket.rs","begin":[1113,4],"end":[1126,5]},"visibility":"public","docs":"Leave a multicast group using `IP_DROP_MEMBERSHIP` option on this socket.\n\nFor more information about this option, see [`join_multicast_v4`].\n\n[`join_multicast_v4`]: Socket::join_multicast_v4","links":{"Socket::join_multicast_v4":"0:188:1596"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["multiaddr",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"Ipv4Addr","id":"1:11056:1924","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}],["interface",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"Ipv4Addr","id":"1:11056:1924","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:3953:190","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3423:125":{"id":"2:3423:125","crate_id":2,"name":"Fn","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3425:359"],"generics":{"params":[{"name":"Args","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FnMut","id":"2:3426:126","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Args"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:627:2696":{"id":"0:627:2696","crate_id":0,"name":"is_out_of_band","span":{"filename":"src/sys/unix.rs","begin":[397,4],"end":[399,5]},"visibility":"public","docs":"Check if the message contains out-of-band data.\n\nThis is useful for protocols where you receive out-of-band data\nmixed in with the normal data stream.\n\nOn Unix this corresponds to the MSG_OOB flag.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13187:2710":{"id":"2:13187:2710","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\nBasic usage:\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:12286:10438"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"str_as_bytes\", since = \"1.39.0\")]","#[must_use]","#[allow(unused_attributes)]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3116-0:837:1642":{"id":"b:2:3116-0:837:1642","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:3090:211","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"TryInto","id":"2:3086:212","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Protocol","id":"0:837:1642","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3119:122","2:3120:1384"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:13271:59248":{"id":"2:13271:59248","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"trim_direction\", since = \"1.30.0\")]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:6593:9640":{"id":"1:6593:9640","crate_id":1,"name":"MetadataExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6594:57406","1:6595:8891","1:6596:8892","1:6597:8894","1:6598:8893","1:6599:8895","1:6600:8896","1:6601:8898","1:6602:8560","1:6603:8901","1:6604:8902","1:6605:8903","1:6606:8904","1:6607:8905","1:6608:8906","1:6609:8899","1:6610:8900"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:6771:1939":{"id":"1:6771:1939","crate_id":1,"name":"IntoRawFd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6772:1585"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"b:2:3116-0:354:1597":{"id":"b:2:3116-0:354:1597","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:3090:211","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"TryInto","id":"2:3086:212","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"SockRef","id":"0:354:1597","args":{"angle_bracketed":{"args":[{"lifetime":"'s"}],"bindings":[]}},"param_names":[]}},"items":["2:3119:122","2:3120:1384"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:3116-0:188:1596":{"id":"b:2:3116-0:188:1596","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:3090:211","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"TryInto","id":"2:3086:212","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Socket","id":"0:188:1596","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3119:122","2:3120:1384"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:216:2113":{"id":"0:216:2113","crate_id":0,"name":"recv_out_of_band","span":{"filename":"src/socket.rs","begin":[397,4],"end":[399,5]},"visibility":"public","docs":"Receives out-of-band (OOB) data on the socket from the remote address to\nwhich it is connected by setting the `MSG_OOB` flag for this call.\n\nFor more information, see [`recv`], [`out_of_band_inline`].\n\n[`recv`]: Socket::recv\n[`out_of_band_inline`]: Socket::out_of_band_inline","links":{"Socket::recv":"0:188:1596","Socket::out_of_band_inline":"0:188:1596"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"resolved_path","inner":{"name":"MaybeUninit","id":"2:32028:1567","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"u8"}}],"bindings":[]}},"param_names":[]}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:3953:190","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3638:132":{"id":"2:3638:132","crate_id":2,"name":"FromResidual","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3640:666"],"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":{"kind":"qualified_path","inner":{"name":"Residual","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"Try","id":"2:3633:208","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:290:2467":{"id":"0:290:2467","crate_id":0,"name":"multicast_hops_v6","span":{"filename":"src/socket.rs","begin":[1382,4],"end":[1387,5]},"visibility":"public","docs":"Get the value of the `IPV6_MULTICAST_HOPS` option for this socket\n\nFor more information about this option, see [`set_multicast_hops_v6`].\n\n[`set_multicast_hops_v6`]: Socket::set_multicast_hops_v6","links":{"Socket::set_multicast_hops_v6":"0:188:1596"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:3953:190","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"u32"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:9119:9067-0:764:1668":{"id":"a:2:9119:9067-0:764:1668","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"RefUnwindSafe","id":"2:9119:9067","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"MaybeUninitSlice","id":"0:764:1668","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"5:780:9283":{"id":"5:780:9283","crate_id":5,"name":"clone_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["target",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"T"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:3218:3315-0:811:1611":{"id":"a:2:3218:3315-0:811:1611","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Unpin","id":"2:3218:3315","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Domain","id":"0:811:1611","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:311":{"id":"0:311","crate_id":0,"name":null,"span":{"filename":"src/socket.rs","begin":[1702,0],"end":[1719,1]},"visibility":{"restricted":{"parent":"0:102:1583","path":"::socket"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["take","read_to_string","read_to_end","read_buf_exact","bytes","read_exact","by_ref","chain","read_buf","is_read_vectored","read_vectored"],"trait":{"kind":"resolved_path","inner":{"name":"Read","id":"1:4539:1932","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Socket","id":"0:188:1596","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:312:2562","0:313:2563"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:13211:54178":{"id":"2:13211:54178","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"1:15722:3061","self::pattern":"2:12815:10001"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12825:10002","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2780-0:850:1658":{"id":"b:2:2780-0:850:1658","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3182:3177","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Borrow","id":"2:2774:93","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"RecvFlags","id":"0:850:1658","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:2782:3131"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:3106-0:764:1668":{"id":"b:2:3106-0:764:1668","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"From","id":"2:3083:130","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:3080:144","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"MaybeUninitSlice","id":"0:764:1668","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"items":["2:3109:1904"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:206:2051":{"id":"0:206:2051","crate_id":0,"name":"accept","span":{"filename":"src/socket.rs","begin":[256,4],"end":[290,5]},"visibility":"public","docs":"Accept a new incoming connection from this listener.\n\nThis function uses `accept4(2)` on platforms that support it and\n`accept(2)` platforms that do not.\n\nThis function sets the same flags as in done for [`Socket::new`],\n[`Socket::accept_raw`] can be used if you don't want to set those flags.","links":{"`Socket::accept_raw`":"0:188:1596","`Socket::new`":"0:188:1596"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:3953:190","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"resolved_path","inner":{"name":"Socket","id":"0:188:1596","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},{"kind":"resolved_path","inner":{"name":"SockAddr","id":"0:77:1595","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}]}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13193:54139":{"id":"2:13193:54139","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:47161:161"},"attrs":["#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]","#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47161:161","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10716:198","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}}}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10716:198","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13264:59245":{"id":"2:13264:59245","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"2:12815:10001","`DoubleEndedIterator`":"2:8233:115","str::match_indices":"1:15728:3066","prim@char":"1:15722:3061"},"attrs":["#[stable(feature = \"str_match_indices\", since = \"1.5.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatchIndices","id":"2:49287:10322","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12825:10002","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12825:10002","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:12840:10005","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:362":{"id":"0:362","crate_id":0,"name":null,"span":{"filename":"src/sockref.rs","begin":[106,0],"end":[119,1]},"visibility":{"restricted":{"parent":"0:331:1589","path":"::sockref"}},"docs":"On Windows, a corresponding `From<&impl AsRawSocket>` implementation exists.","links":{},"attrs":["#[cfg(unix)]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'s","kind":{"lifetime":{"outlives":[]}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"S"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"AsRawFd","id":"1:6767:2571","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"From","id":"2:3083:130","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'s","mutable":false,"type":{"kind":"generic","inner":"S"}}}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"SockRef","id":"0:354:1597","args":{"angle_bracketed":{"args":[{"lifetime":"'s"}],"bindings":[]}},"param_names":[]}},"items":["0:365:660"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:755:1647":{"id":"0:755:1647","crate_id":0,"name":"ICMPV6","span":{"filename":"src/lib.rs","begin":[245,4],"end":[245,63]},"visibility":"public","docs":"Protocol corresponding to `ICMPv6`.","links":{},"attrs":[],"deprecation":null,"kind":"assoc_const","inner":{"type":{"kind":"resolved_path","inner":{"name":"Protocol","id":"0:837:1642","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"default":"Protocol(sys::IPPROTO_ICMPV6)"}},"0:754:1644":{"id":"0:754:1644","crate_id":0,"name":"ICMPV4","span":{"filename":"src/lib.rs","begin":[242,4],"end":[242,61]},"visibility":"public","docs":"Protocol corresponding to `ICMPv4`.","links":{},"attrs":[],"deprecation":null,"kind":"assoc_const","inner":{"type":{"kind":"resolved_path","inner":{"name":"Protocol","id":"0:837:1642","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"default":"Protocol(sys::IPPROTO_ICMP)"}},"1:5705:9647":{"id":"1:5705:9647","crate_id":1,"name":"DirBuilderExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5706:8971"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:262:2325":{"id":"0:262:2325","crate_id":0,"name":"set_write_timeout","span":{"filename":"src/socket.rs","begin":[981,4],"end":[983,5]},"visibility":"public","docs":"Set value for the `SO_SNDTIMEO` option on this socket.\n\nIf `timeout` is `None`, then `write` and `send` calls will block\nindefinitely.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["duration",{"kind":"resolved_path","inner":{"name":"Option","id":"2:47161:161","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Duration","id":"2:49863:116","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:3953:190","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3297:3212":{"id":"2:3297:3212","crate_id":2,"name":"Not","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3298:166","2:3299:930"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3396:111":{"id":"2:3396:111","crate_id":2,"name":"Deref","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3397:205","2:3398:523"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:5627:9641":{"id":"1:5627:9641","crate_id":1,"name":"FileExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5628:55488","1:5629:55490","1:5630:55489","1:5631:55491"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"a:2:3189:204-0:850:1658":{"id":"a:2:3189:204-0:850:1658","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Sync","id":"2:3189:204","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"RecvFlags","id":"0:850:1658","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:3080:144":{"id":"2:3080:144","crate_id":2,"name":"Into","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3082:1904"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:10109:9303":{"id":"2:10109:9303","crate_id":2,"name":"Binary","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10110:639"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:242:2244":{"id":"0:242:2244","crate_id":0,"name":"keepalive","span":{"filename":"src/socket.rs","begin":[786,4],"end":[791,5]},"visibility":"public","docs":"Get the value of the `SO_KEEPALIVE` option on this socket.\n\nFor more information about this option, see [`set_keepalive`].\n\n[`set_keepalive`]: Socket::set_keepalive","links":{"Socket::set_keepalive":"0:188:1596"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:3953:190","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"bool"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3429:127":{"id":"2:3429:127","crate_id":2,"name":"FnOnce","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3431:166","2:3432:361"],"generics":{"params":[{"name":"Args","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:244:2248":{"id":"0:244:2248","crate_id":0,"name":"set_keepalive","span":{"filename":"src/socket.rs","begin":[796,4],"end":[805,5]},"visibility":"public","docs":"Set value for the `SO_KEEPALIVE` option on this socket.\n\nEnable sending of keep-alive messages on connection-oriented sockets.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["keepalive",{"kind":"primitive","inner":"bool"}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:3953:190","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:790:1506":{"id":"0:790:1506","crate_id":0,"name":"0","span":{"filename":"src/socket.rs","begin":[732,12],"end":[732,20]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"struct_field","inner":{"kind":"resolved_path","inner":{"name":"Ipv4Addr","id":"1:11056:1924","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}},"0:366":{"id":"0:366","crate_id":0,"name":null,"span":{"filename":"src/sockref.rs","begin":[139,0],"end":[147,1]},"visibility":{"restricted":{"parent":"0:331:1589","path":"::sockref"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Debug","id":"2:10098:105","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"SockRef","id":"0:354:1597","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"items":["0:367:639"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:202:2008":{"id":"0:202:2008","crate_id":0,"name":"bind","span":{"filename":"src/socket.rs","begin":[180,4],"end":[182,5]},"visibility":"public","docs":"Binds this socket to the specified address.\n\nThis function directly corresponds to the `bind(2)` function on Windows\nand Unix.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["address",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"SockAddr","id":"0:77:1595","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:3953:190","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2783-0:784:1603":{"id":"b:2:2783-0:784:1603","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3182:3177","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"BorrowMut","id":"2:2777:9396","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"InterfaceIndexOrAddress","id":"0:784:1603","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:2785:53607"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:780:525":{"id":"0:780:525","crate_id":0,"name":"deref_mut","span":{"filename":"src/lib.rs","begin":[320,4],"end":[322,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"resolved_path","inner":{"name":"MaybeUninit","id":"2:32028:1567","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"u8"}}],"bindings":[]}},"param_names":[]}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:5:776-0:824:1624":{"id":"b:5:776-0:824:1624","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2799:100","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"kind":"resolved_path","inner":{"name":"ToOwned","id":"5:772:206","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Type","id":"0:824:1624","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["5:778:9281","5:779:9282","5:780:9283"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:3116-0:784:1603":{"id":"b:2:3116-0:784:1603","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:3090:211","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"TryInto","id":"2:3086:212","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"InterfaceIndexOrAddress","id":"0:784:1603","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3119:122","2:3120:1384"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"1:2565:122":{"id":"1:2565:122","crate_id":1,"name":"Error","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:2566:55584","1:2568:3049","1:2569:57699","1:2570:57700"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Debug","id":"2:10098:105","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Display","id":"2:10105:114","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3304:3209":{"id":"2:3304:3209","crate_id":2,"name":"BitAnd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3306:166","2:3307:334"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:301:2498":{"id":"0:301:2498","crate_id":0,"name":"set_unicast_hops_v6","span":{"filename":"src/socket.rs","begin":[1473,4],"end":[1482,5]},"visibility":"public","docs":"Set the value for the `IPV6_UNICAST_HOPS` option on this socket.\n\nSpecifies the hop limit for ipv6 unicast packets","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["hops",{"kind":"primitive","inner":"u32"}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:3953:190","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:9119:9067-0:188:1596":{"id":"a:2:9119:9067-0:188:1596","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"RefUnwindSafe","id":"2:9119:9067","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Socket","id":"0:188:1596","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:863:1678":{"id":"0:863:1678","crate_id":0,"name":"TcpKeepalive","span":{"filename":"src/lib.rs","begin":[329,0],"end":[335,1]},"visibility":"public","docs":"Configures a socket's TCP keepalive parameters.\n\nSee [`Socket::set_tcp_keepalive`].","links":{"`Socket::set_tcp_keepalive`":"0:188:1596"},"attrs":[],"deprecation":null,"kind":"struct","inner":{"struct_type":"plain","generics":{"params":[],"where_predicates":[]},"fields_stripped":true,"fields":[],"impls":["0:781","a:2:3177:195-0:863:1678","a:2:9118:9068-0:863:1678","a:2:9119:9067-0:863:1678","a:2:3189:204-0:863:1678","a:2:3218:3315-0:863:1678","b:2:3116-0:863:1678","b:2:3106-0:863:1678","b:2:3906-0:863:1678","b:2:3121-0:863:1678","b:2:3110-0:863:1678","b:2:2783-0:863:1678","b:2:2780-0:863:1678","b:5:776-0:863:1678","0:867","0:869"]}},"b:5:776-0:850:1658":{"id":"b:5:776-0:850:1658","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2799:100","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"kind":"resolved_path","inner":{"name":"ToOwned","id":"5:772:206","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"RecvFlags","id":"0:850:1658","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["5:778:9281","5:779:9282","5:780:9283"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:776:205":{"id":"0:776:205","crate_id":0,"name":"Target","span":{"filename":"src/lib.rs","begin":[312,4],"end":[312,36]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"typedef","inner":{"type":{"kind":"slice","inner":{"kind":"resolved_path","inner":{"name":"MaybeUninit","id":"2:32028:1567","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"u8"}}],"bindings":[]}},"param_names":[]}}},"generics":{"params":[],"where_predicates":[]}}},"2:3325:3214":{"id":"2:3325:3214","crate_id":2,"name":"Shr","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3327:166","2:3328:1206"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"a:2:3177:195-0:863:1678":{"id":"a:2:3177:195-0:863:1678","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Send","id":"2:3177:195","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"TcpKeepalive","id":"0:863:1678","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:13217:53858":{"id":"2:13217:53858","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"self::pattern":"2:12815:10001","prim@char":"1:15722:3061"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12825:10002","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12825:10002","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:12840:10005","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:828":{"id":"0:828","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[193,15],"end":[193,20]},"visibility":"crate","docs":null,"links":{},"attrs":["#[automatically_derived]","#[allow(unused_qualifications)]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2799:100","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Type","id":"0:824:1624","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:829:391"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:13204:10030":{"id":"2:13204:10030","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the last character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:15722:3061"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"CharIndices","id":"2:49095:10313","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13284:54179":{"id":"2:13284:54179","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"self::pattern":"2:12815:10001","prim@char":"1:15722:3061"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"str_strip\", since = \"1.45.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["suffix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47161:161","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12825:10002","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12825:10002","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:12840:10005","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3906-0:764:1668":{"id":"b:2:3906-0:764:1668","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3182:3177","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Any","id":"2:3904:68","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"MaybeUninitSlice","id":"0:764:1668","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"items":["2:3908:1397"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:3012:9999":{"id":"2:3012:9999","crate_id":2,"name":"FloatToInt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"Int","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:3011:9634","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3335:3216":{"id":"2:3335:3216","crate_id":2,"name":"BitOrAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3337:337"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:283:2433":{"id":"0:283:2433","crate_id":0,"name":"set_ttl","span":{"filename":"src/socket.rs","begin":[1283,4],"end":[1285,5]},"visibility":"public","docs":"Set the value of the `IP_TTL` option for this socket.\n\nThis value sets the time-to-live field that is used in every packet sent\nfrom this socket.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["ttl",{"kind":"primitive","inner":"u32"}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:3953:190","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:621":{"id":"0:621","crate_id":0,"name":null,"span":{"filename":"src/sys/unix.rs","begin":[206,0],"end":[232,1]},"visibility":{"restricted":{"parent":"0:368:1592","path":"::sys"}},"docs":"Unix only API.","links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"Domain","id":"0:811:1611","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:622:2670"],"negative":false,"synthetic":false,"blanket_impl":null}},"a:2:3177:195-0:77:1595":{"id":"a:2:3177:195-0:77:1595","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Send","id":"2:3177:195","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"SockAddr","id":"0:77:1595","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:277:2414":{"id":"0:277:2414","crate_id":0,"name":"set_multicast_loop_v4","span":{"filename":"src/socket.rs","begin":[1227,4],"end":[1236,5]},"visibility":"public","docs":"Set the value of the `IP_MULTICAST_LOOP` option for this socket.\n\nIf enabled, multicast packets will be looped back to the local socket.\nNote that this may not have any affect on IPv6 sockets.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["loop_v4",{"kind":"primitive","inner":"bool"}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:3953:190","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:324":{"id":"0:324","crate_id":0,"name":null,"span":{"filename":"src/socket.rs","begin":[1751,0],"end":[1764,1]},"visibility":{"restricted":{"parent":"0:102:1583","path":"::socket"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["write_all_vectored","by_ref","write_vectored","write_all","write_fmt","is_write_vectored"],"trait":{"kind":"resolved_path","inner":{"name":"Write","id":"1:4596:1933","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"resolved_path","inner":{"name":"Socket","id":"0:188:1596","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"items":["0:326:1580","0:327:2564","0:328:2565"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:2:3106-0:863:1678":{"id":"b:2:3106-0:863:1678","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"From","id":"2:3083:130","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:3080:144","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"TcpKeepalive","id":"0:863:1678","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3109:1904"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:2780-0:824:1624":{"id":"b:2:2780-0:824:1624","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3182:3177","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Borrow","id":"2:2774:93","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Type","id":"0:824:1624","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:2782:3131"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:3189:204":{"id":"2:3189:204","crate_id":2,"name":"Sync","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:752:660":{"id":"0:752:660","crate_id":0,"name":"from","span":{"filename":"src/lib.rs","begin":[225,4],"end":[227,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["t",{"kind":"resolved_path","inner":{"name":"Type","id":"0:824:1624","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}]],"output":{"kind":"resolved_path","inner":{"name":"c_int","id":"20:63:1594","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:8198:9082":{"id":"2:8198:9082","crate_id":2,"name":"Extend","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8200:9227","2:8202:9228","2:8203:9229"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"b:5:776-0:863:1678":{"id":"b:5:776-0:863:1678","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2799:100","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"kind":"resolved_path","inner":{"name":"ToOwned","id":"5:772:206","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"TcpKeepalive","id":"0:863:1678","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["5:778:9281","5:779:9282","5:780:9283"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"a:2:3189:204-0:764:1668":{"id":"a:2:3189:204-0:764:1668","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Sync","id":"2:3189:204","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"MaybeUninitSlice","id":"0:764:1668","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"5:6031:59894":{"id":"5:6031:59894","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:8276:200"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]","#[stable(feature = \"unicode_case_mapping\", since = \"1.2.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8276:200","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:795":{"id":"0:795","crate_id":0,"name":null,"span":{"filename":"src/socket.rs","begin":[1777,0],"end":[1777,31]},"visibility":{"restricted":{"parent":"0:102:1583","path":"::socket"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"From","id":"2:3083:130","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"TcpListener","id":"1:5284:2567","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Socket","id":"0:188:1596","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:796:660"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:13249:59241":{"id":"2:13249:59241","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":["#[stable(feature = \"str_split_once\", since = \"1.52.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47161:161","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12825:10002","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:817":{"id":"0:817","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[153,22],"end":[153,24]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"StructuralEq","id":"2:3186:201","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Domain","id":"0:811:1611","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"2:3177:195":{"id":"2:3177:195","crate_id":2,"name":"Send","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:842:391":{"id":"0:842:391","crate_id":0,"name":"clone","span":{"filename":"src/lib.rs","begin":[237,15],"end":[237,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Protocol","id":"0:837:1642","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:12825:10002":{"id":"2:12825:10002","crate_id":2,"name":"Pattern","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:12827:10004","2:12828:58950","2:12829:58951","2:12830:58952","2:12831:58954","2:12832:58953","2:12833:58955"],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13191:2916":{"id":"2:13191:2916","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:47161:161"},"attrs":["#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]","#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47161:161","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10716:198","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}}}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10716:198","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:199:2003":{"id":"0:199:2003","crate_id":0,"name":"pair_raw","span":{"filename":"src/socket.rs","begin":[166,4],"end":[174,5]},"visibility":"public","docs":"Creates a pair of sockets which are connected to each other.\n\nThis function corresponds to `socketpair(2)`.","links":{},"attrs":["#[cfg(any(doc, all(feature = \"all\", unix)))]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["domain",{"kind":"resolved_path","inner":{"name":"Domain","id":"0:811:1611","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}],["ty",{"kind":"resolved_path","inner":{"name":"Type","id":"0:824:1624","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}],["protocol",{"kind":"resolved_path","inner":{"name":"Option","id":"2:47161:161","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Protocol","id":"0:837:1642","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:3953:190","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"resolved_path","inner":{"name":"Socket","id":"0:188:1596","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},{"kind":"resolved_path","inner":{"name":"Socket","id":"0:188:1596","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}]}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:77:1595":{"id":"0:77:1595","crate_id":0,"name":"SockAddr","span":{"filename":"src/sockaddr.rs","begin":[16,0],"end":[19,1]},"visibility":"public","docs":"The address of a socket.\n\n`SockAddr`s may be constructed directly to and from the standard library\n[`SocketAddr`], [`SocketAddrV4`], and [`SocketAddrV6`] types.","links":{"`SocketAddr`":"1:11002:1569","`SocketAddrV4`":"1:11026:1802","`SocketAddrV6`":"1:11029:1803"},"attrs":[],"deprecation":null,"kind":"struct","inner":{"struct_type":"plain","generics":{"params":[],"where_predicates":[]},"fields_stripped":true,"fields":[],"impls":["0:80","0:643","a:2:3177:195-0:77:1595","a:2:9118:9068-0:77:1595","a:2:9119:9067-0:77:1595","a:2:3189:204-0:77:1595","a:2:3218:3315-0:77:1595","b:2:3116-0:77:1595","b:2:3106-0:77:1595","b:2:3906-0:77:1595","b:2:3121-0:77:1595","b:2:3110-0:77:1595","b:2:2783-0:77:1595","b:2:2780-0:77:1595","0:94","0:96","0:98","0:100"]}},"2:3319:3213":{"id":"2:3319:3213","crate_id":2,"name":"Shl","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3321:166","2:3322:1203"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:6465:9663":{"id":"1:6465:9663","crate_id":1,"name":"JoinHandleExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6466:57455","1:6467:57456"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:6044:59896":{"id":"5:6044:59896","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:421:9083","`String`":"5:8276:200"},"attrs":["#[stable(feature = \"box_str\", since = \"1.4.0\")]","#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:421:9083","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:8035:9398","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8276:200","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3426:126":{"id":"2:3426:126","crate_id":2,"name":"FnMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3428:360"],"generics":{"params":[{"name":"Args","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FnOnce","id":"2:3429:127","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Args"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3908:1397":{"id":"2:3908:1397","crate_id":2,"name":"type_id","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"TypeId","id":"2:45706:9672","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13287:59253":{"id":"2:13287:59253","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"self::pattern":"2:12815:10001","prim@char":"1:15722:3061"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"trim_direction\", since = \"1.30.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12825:10002","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12825:10002","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:12840:10005","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13528:133":{"id":"2:13528:133","crate_id":2,"name":"Future","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:13529:166","2:13530:991"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3716:3232":{"id":"2:3716:3232","crate_id":2,"name":"DispatchFromDyn","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13281:19988":{"id":"2:13281:19988","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"self::pattern":"2:12815:10001","prim@char":"1:15722:3061"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"str_strip\", since = \"1.45.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["prefix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47161:161","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12825:10002","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3255:3200":{"id":"2:3255:3200","crate_id":2,"name":"Mul","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3257:166","2:3258:869"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:253:2290":{"id":"0:253:2290","crate_id":0,"name":"read_timeout","span":{"filename":"src/socket.rs","begin":[902,4],"end":[904,5]},"visibility":"public","docs":"Get value for the `SO_RCVTIMEO` option on this socket.\n\nIf the returned timeout is `None`, then `read` and `recv` calls will\nblock indefinitely.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:3953:190","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47161:161","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Duration","id":"2:49863:116","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:305":{"id":"0:305","crate_id":0,"name":null,"span":{"filename":"src/socket.rs","begin":[1521,0],"end":[1700,1]},"visibility":{"restricted":{"parent":"0:102:1583","path":"::socket"}},"docs":"Socket options for TCP sockets, get/set using `IPPROTO_TCP`.\n\nAdditional documentation can be found in documentation of the OS.\n* Linux: <https://man7.org/linux/man-pages/man7/tcp.7.html>\n* Windows: <https://docs.microsoft.com/en-us/windows/win32/winsock/ipproto-tcp-socket-options>","links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"Socket","id":"0:188:1596","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:306:2517","0:307:2548","0:308:2553","0:310:2561"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:231:2192":{"id":"0:231:2192","crate_id":0,"name":"send_to","span":{"filename":"src/socket.rs","begin":[624,4],"end":[626,5]},"visibility":"public","docs":"Sends data on the socket to the given address. On success, returns the\nnumber of bytes written.\n\nThis is typically used on UDP or datagram-oriented sockets.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}],["addr",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"SockAddr","id":"0:77:1595","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:3953:190","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:12834:10004":{"id":"2:12834:10004","crate_id":2,"name":"Searcher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:12836:10023","2:12837:899","2:12838:59101","2:12839:59102"],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:756:1650":{"id":"0:756:1650","crate_id":0,"name":"TCP","span":{"filename":"src/lib.rs","begin":[248,4],"end":[248,57]},"visibility":"public","docs":"Protocol corresponding to `TCP`.","links":{},"attrs":[],"deprecation":null,"kind":"assoc_const","inner":{"type":{"kind":"resolved_path","inner":{"name":"Protocol","id":"0:837:1642","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"default":"Protocol(sys::IPPROTO_TCP)"}},"0:293:2476":{"id":"0:293:2476","crate_id":0,"name":"multicast_if_v6","span":{"filename":"src/socket.rs","begin":[1410,4],"end":[1415,5]},"visibility":"public","docs":"Get the value of the `IPV6_MULTICAST_IF` option for this socket.\n\nFor more information about this option, see [`set_multicast_if_v6`].\n\n[`set_multicast_if_v6`]: Socket::set_multicast_if_v6","links":{"Socket::set_multicast_if_v6":"0:188:1596"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:3953:190","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"u32"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:836:884":{"id":"0:836:884","crate_id":0,"name":"ne","span":{"filename":"src/lib.rs","begin":[193,26],"end":[193,35]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"Type","id":"0:824:1624","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2780-0:354:1597":{"id":"b:2:2780-0:354:1597","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3182:3177","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Borrow","id":"2:2774:93","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"SockRef","id":"0:354:1597","args":{"angle_bracketed":{"args":[{"lifetime":"'s"}],"bindings":[]}},"param_names":[]}},"items":["2:2782:3131"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:272:2396":{"id":"0:272:2396","crate_id":0,"name":"leave_multicast_v4_n","span":{"filename":"src/socket.rs","begin":[1169,4],"end":[1183,5]},"visibility":"public","docs":"Leave a multicast group using `IP_DROP_MEMBERSHIP` option on this socket.\n\nFor more information about this option, see [`join_multicast_v4_n`].\n\n[`join_multicast_v4_n`]: Socket::join_multicast_v4_n","links":{"Socket::join_multicast_v4_n":"0:188:1596"},"attrs":["#[cfg(not(any(target_os = \"haiku\", target_os = \"illumos\", target_os =\n\"netbsd\", target_os = \"redox\", target_os = \"solaris\",)))]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["multiaddr",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"Ipv4Addr","id":"1:11056:1924","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}],["interface",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"InterfaceIndexOrAddress","id":"0:784:1603","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:3953:190","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:275:2408":{"id":"0:275:2408","crate_id":0,"name":"multicast_loop_v4","span":{"filename":"src/socket.rs","begin":[1216,4],"end":[1221,5]},"visibility":"public","docs":"Get the value of the `IP_MULTICAST_LOOP` option for this socket.\n\nFor more information about this option, see [`set_multicast_loop_v4`].\n\n[`set_multicast_loop_v4`]: Socket::set_multicast_loop_v4","links":{"Socket::set_multicast_loop_v4":"0:188:1596"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:3953:190","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"bool"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3121-0:784:1603":{"id":"b:2:3121-0:784:1603","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:3080:144","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:3090:211","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"InterfaceIndexOrAddress","id":"0:784:1603","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3124:122","2:3125:1383"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:3272:3201":{"id":"2:3272:3201","crate_id":2,"name":"Neg","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3273:166","2:3274:890"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"b:2:3906-0:824:1624":{"id":"b:2:3906-0:824:1624","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3182:3177","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Any","id":"2:3904:68","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Type","id":"0:824:1624","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3908:1397"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:13188:59236":{"id":"2:13188:59236","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[stable(feature = \"str_mut_extras\", since = \"1.20.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3906-0:784:1603":{"id":"b:2:3906-0:784:1603","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3182:3177","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Any","id":"2:3904:68","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"InterfaceIndexOrAddress","id":"0:784:1603","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3908:1397"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:221:2150":{"id":"0:221:2150","crate_id":0,"name":"recv_from","span":{"filename":"src/socket.rs","begin":[494,4],"end":[496,5]},"visibility":"public","docs":"Receives data from the socket. On success, returns the number of bytes\nread and the address from whence the data came.\n\n# Safety\n\n`recv_from` makes the same safety guarantees regarding the `buf`fer as\n[`recv`].\n\n[`recv`]: Socket::recv","links":{"Socket::recv":"0:188:1596"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"resolved_path","inner":{"name":"MaybeUninit","id":"2:32028:1567","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"u8"}}],"bindings":[]}},"param_names":[]}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:3953:190","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"primitive","inner":"usize"},{"kind":"resolved_path","inner":{"name":"SockAddr","id":"0:77:1595","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}]}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2875:169":{"id":"2:2875:169","crate_id":2,"name":"PartialOrd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2877:975","2:2878:803","2:2879:769","2:2880:692","2:2881:675"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Rhs"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3182:3177","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"PartialEq","id":"2:2829:168","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Rhs"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"5:779:9282":{"id":"5:779:9282","crate_id":5,"name":"to_owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"generic","inner":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3121-0:188:1596":{"id":"b:2:3121-0:188:1596","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:3080:144","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:3090:211","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Socket","id":"0:188:1596","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3124:122","2:3125:1383"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:217:2107":{"id":"0:217:2107","crate_id":0,"name":"recv_with_flags","span":{"filename":"src/socket.rs","begin":[405,4],"end":[411,5]},"visibility":"public","docs":"Identical to [`recv`] but allows for specification of arbitrary flags to\nthe underlying `recv` call.\n\n[`recv`]: Socket::recv","links":{"Socket::recv":"0:188:1596"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"resolved_path","inner":{"name":"MaybeUninit","id":"2:32028:1567","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"u8"}}],"bindings":[]}},"param_names":[]}}}}}],["flags",{"kind":"resolved_path","inner":{"name":"sys::c_int","id":"20:63:1594","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:3953:190","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:360:205":{"id":"0:360:205","crate_id":0,"name":"Target","span":{"filename":"src/sockref.rs","begin":[96,4],"end":[96,25]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"typedef","inner":{"type":{"kind":"resolved_path","inner":{"name":"Socket","id":"0:188:1596","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generics":{"params":[],"where_predicates":[]}}},"0:234:2200":{"id":"0:234:2200","crate_id":0,"name":"send_to_vectored_with_flags","span":{"filename":"src/socket.rs","begin":[655,4],"end":[662,5]},"visibility":"public","docs":"Identical to [`send_to_vectored`] but allows for specification of\narbitrary flags to the underlying `sendmsg`/`WSASendTo` call.\n\n[`send_to_vectored`]: Socket::send_to_vectored","links":{"Socket::send_to_vectored":"0:188:1596"},"attrs":["#[cfg(not(target_os = \"redox\"))]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["bufs",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"resolved_path","inner":{"name":"IoSlice","id":"1:10932:1934","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}}],["addr",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"SockAddr","id":"0:77:1595","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}],["flags",{"kind":"resolved_path","inner":{"name":"c_int","id":"20:63:1594","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:3953:190","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2774:93":{"id":"2:2774:93","crate_id":2,"name":"Borrow","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2776:3131"],"generics":{"params":[{"name":"Borrowed","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Borrowed"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3182:3177","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"0:274:2404":{"id":"0:274:2404","crate_id":0,"name":"set_multicast_if_v4","span":{"filename":"src/socket.rs","begin":[1199,4],"end":[1209,5]},"visibility":"public","docs":"Set the value of the `IP_MULTICAST_IF` option for this socket.\n\nSpecifies the interface to use for routing multicast packets.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["interface",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"Ipv4Addr","id":"1:11056:1924","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:3953:190","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13543:145":{"id":"2:13543:145","crate_id":2,"name":"IntoFuture","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:13544:166","2:13545:145","2:13546:744"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"b:2:2783-0:824:1624":{"id":"b:2:2783-0:824:1624","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3182:3177","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"BorrowMut","id":"2:2777:9396","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Type","id":"0:824:1624","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:2785:53607"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"5:6047:53744":{"id":"5:6047:53744","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"1:15728:3066"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]","#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8276:200","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2783-0:837:1642":{"id":"b:2:2783-0:837:1642","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3182:3177","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"BorrowMut","id":"2:2777:9396","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Protocol","id":"0:837:1642","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:2785:53607"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:2783-0:354:1597":{"id":"b:2:2783-0:354:1597","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3182:3177","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"BorrowMut","id":"2:2777:9396","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"SockRef","id":"0:354:1597","args":{"angle_bracketed":{"args":[{"lifetime":"'s"}],"bindings":[]}},"param_names":[]}},"items":["2:2785:53607"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:210:2067":{"id":"0:210:2067","crate_id":0,"name":"peer_addr","span":{"filename":"src/socket.rs","begin":[319,4],"end":[321,5]},"visibility":"public","docs":"Returns the socket address of the remote peer of this socket.\n\n# Notes\n\nThis returns an error if the socket is not [`connect`ed].\n\n[`connect`ed]: Socket::connect","links":{"Socket::connect":"0:188:1596"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:3953:190","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"SockAddr","id":"0:77:1595","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:269:2375":{"id":"0:269:2375","crate_id":0,"name":"join_multicast_v4","span":{"filename":"src/socket.rs","begin":[1100,4],"end":[1106,5]},"visibility":"public","docs":"Join a multicast group using `IP_ADD_MEMBERSHIP` option on this socket.\n\nThis function specifies a new multicast group for this socket to join.\nThe address must be a valid multicast address, and `interface` is the\naddress of the local interface with which the system should join the\nmulticast group. If it's [`Ipv4Addr::UNSPECIFIED`] (`INADDR_ANY`) then\nan appropriate interface is chosen by the system.","links":{"`Ipv4Addr::UNSPECIFIED`":"1:11056:1924"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["multiaddr",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"Ipv4Addr","id":"1:11056:1924","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}],["interface",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"Ipv4Addr","id":"1:11056:1924","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:3953:190","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:3218:3315-0:77:1595":{"id":"a:2:3218:3315-0:77:1595","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Unpin","id":"2:3218:3315","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"SockAddr","id":"0:77:1595","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:13190:1872":{"id":"2:13190:1872","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:15739:3075"},"attrs":["#[stable(feature = \"str_as_mut_ptr\", since = \"1.36.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":true,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:226:2173":{"id":"0:226:2173","crate_id":0,"name":"send","span":{"filename":"src/socket.rs","begin":[576,4],"end":[578,5]},"visibility":"public","docs":"Sends data on the socket to a connected peer.\n\nThis is typically used on TCP sockets or datagram sockets which have\nbeen connected.\n\nOn success returns the number of bytes that were sent.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:3953:190","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3186:201":{"id":"2:3186:201","crate_id":2,"name":"StructuralEq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:287":{"id":"0:287","crate_id":0,"name":null,"span":{"filename":"src/socket.rs","begin":[1330,0],"end":[1514,1]},"visibility":{"restricted":{"parent":"0:102:1583","path":"::socket"}},"docs":"Socket options for IPv6 sockets, get/set using `IPPROTO_IPV6`.\n\nAdditional documentation can be found in documentation of the OS.\n* Linux: <https://man7.org/linux/man-pages/man7/ipv6.7.html>\n* Windows: <https://docs.microsoft.com/en-us/windows/win32/winsock/ipproto-ipv6-socket-options>","links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"Socket","id":"0:188:1596","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:288:2452","0:289:2462","0:290:2467","0:292:2472","0:293:2476","0:295:2482","0:296:2486","0:298:2492","0:299:2495","0:301:2498","0:302:2502","0:304:2510"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:3481:2216":{"id":"2:3481:2216","crate_id":2,"name":"Index","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3483:166","2:3484:730"],"generics":{"params":[{"name":"Idx","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Idx"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3182:3177","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"0:88:770":{"id":"0:88:770","crate_id":0,"name":"len","span":{"filename":"src/sockaddr.rs","begin":[147,4],"end":[149,5]},"visibility":"public","docs":"Returns the size of this address in bytes.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"socklen_t","id":"20:1864:1809","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:5635:9642":{"id":"1:5635:9642","crate_id":1,"name":"PermissionsExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5636:8971","1:5637:57133","1:5638:57134"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:7713:10102":{"id":"2:7713:10102","crate_id":2,"name":"Step","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:7714:58130","2:7715:58131","2:7716:58128","2:7717:58126","2:7718:58132","2:7719:58129","2:7720:58127"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2799:100","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"PartialOrd","id":"2:2875:169","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13200:59237":{"id":"2:13200:59237","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"str::slice_unchecked":"1:15728:3066","`str`":"1:15728:3066","crate::ops::IndexMut":"2:3485:3221"},"attrs":["#[stable(feature = \"str_slice_mut\", since = \"1.5.0\")]","#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:8148:10174":{"id":"2:8148:10174","crate_id":2,"name":"Sum","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8150:9273"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3348:3219":{"id":"2:3348:3219","crate_id":2,"name":"ShrAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3350:1207"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13231:37203":{"id":"2:13231:37203","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"self::pattern":"2:12815:10001","prim@char":"1:15722:3061"},"attrs":["#[stable(feature = \"split_inclusive\", since = \"1.51.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitInclusive","id":"2:12607:9427","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12825:10002","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:8189:146":{"id":"2:8189:146","crate_id":2,"name":"IntoIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8190:9230","2:8191:9231","2:8192:745"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:793":{"id":"0:793","crate_id":0,"name":null,"span":{"filename":"src/socket.rs","begin":[1776,0],"end":[1776,29]},"visibility":{"restricted":{"parent":"0:102:1583","path":"::socket"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"From","id":"2:3083:130","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"TcpStream","id":"1:5281:1970","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Socket","id":"0:188:1596","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:794:660"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:824:1624":{"id":"0:824:1624","crate_id":0,"name":"Type","span":{"filename":"src/lib.rs","begin":[194,0],"end":[194,23]},"visibility":"public","docs":"Specification of communication semantics on a socket.\n\nThis is a newtype wrapper around an integer which provides a nicer API in\naddition to an injection point for documentation. Convenience constants such\nas [`Type::STREAM`], [`Type::DGRAM`], etc, are provided to avoid reaching\ninto libc for various constants.\n\nThis type is freely interconvertible with C's `int` type, however, if a raw\nvalue needs to be provided.","links":{"`Type::DGRAM`":"0:824:1624","`Type::STREAM`":"0:824:1624"},"attrs":[],"deprecation":null,"kind":"struct","inner":{"struct_type":"tuple","generics":{"params":[],"where_predicates":[]},"fields_stripped":true,"fields":[],"impls":["0:623","0:746","a:2:3177:195-0:824:1624","a:2:9118:9068-0:824:1624","a:2:9119:9067-0:824:1624","a:2:3189:204-0:824:1624","a:2:3218:3315-0:824:1624","b:2:3116-0:824:1624","b:2:3106-0:824:1624","b:2:3906-0:824:1624","b:2:3121-0:824:1624","b:2:3110-0:824:1624","b:2:2783-0:824:1624","b:2:2780-0:824:1624","b:5:776-0:824:1624","0:807","0:827","0:828","0:830","0:831","0:833","0:834","0:749","0:751"]}},"2:13293:59255":{"id":"2:13293:59255","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:15722:3061","self::pattern":"2:12815:10001"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12825:10002","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12825:10002","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:12840:10005","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:204:2034":{"id":"0:204:2034","crate_id":0,"name":"connect_timeout","span":{"filename":"src/socket.rs","begin":[221,4],"end":[235,5]},"visibility":"public","docs":"Initiate a connection on this socket to the specified address, only\nonly waiting for a certain period of time for the connection to be\nestablished.\n\nUnlike many other methods on `Socket`, this does *not* correspond to a\nsingle C function. It sets the socket to nonblocking mode, connects via\nconnect(2), and then waits for the connection to complete with poll(2)\non Unix and select on Windows. When the connection is complete, the\nsocket is set back to blocking mode. On Unix, this will loop over\n`EINTR` errors.\n\n# Warnings\n\nThe non-blocking state of the socket is overridden by this function -\nit will be returned in blocking mode on success, and in an indeterminate\nstate on failure.\n\nIf the connection request times out, it may still be processing in the\nbackground - a second call to `connect` or `connect_timeout` may fail.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["addr",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"SockAddr","id":"0:77:1595","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}],["timeout",{"kind":"resolved_path","inner":{"name":"Duration","id":"2:49863:116","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:3953:190","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:23471:10099":{"id":"2:23471:10099","crate_id":2,"name":"SimdElement","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:23472:10109"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:23467:9634","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Copy","id":"2:3187:102","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13300:53743":{"id":"2:13300:53743","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":["#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:6698:9631":{"id":"1:6698:9631","crate_id":1,"name":"CommandExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6699:13576"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10429:9634","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3276:3204":{"id":"2:3276:3204","crate_id":2,"name":"AddAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3278:250"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:9119:9067":{"id":"2:9119:9067","crate_id":2,"name":"RefUnwindSafe","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:628":{"id":"0:628","crate_id":0,"name":null,"span":{"filename":"src/sys/unix.rs","begin":[403,0],"end":[411,1]},"visibility":{"restricted":{"parent":"0:368:1592","path":"::sys"}},"docs":null,"links":{},"attrs":["#[cfg(not(target_os = \"redox\"))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Debug","id":"2:10098:105","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"RecvFlags","id":"0:850:1658","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:629:639"],"negative":false,"synthetic":false,"blanket_impl":null}},"a:2:3177:195-0:824:1624":{"id":"a:2:3177:195-0:824:1624","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Send","id":"2:3177:195","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Type","id":"0:824:1624","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:250:2281":{"id":"0:250:2281","crate_id":0,"name":"recv_buffer_size","span":{"filename":"src/socket.rs","begin":[876,4],"end":[881,5]},"visibility":"public","docs":"Get value for the `SO_RCVBUF` option on this socket.\n\nFor more information about this option, see [`set_recv_buffer_size`].\n\n[`set_recv_buffer_size`]: Socket::set_recv_buffer_size","links":{"Socket::set_recv_buffer_size":"0:188:1596"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:3953:190","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3218:3315":{"id":"2:3218:3315","crate_id":2,"name":"Unpin","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:764:1668":{"id":"0:764:1668","crate_id":0,"name":"MaybeUninitSlice","span":{"filename":"src/lib.rs","begin":[292,0],"end":[292,59]},"visibility":"public","docs":"A version of [`IoSliceMut`] that allows the buffer to be uninitialised.\n\n[`IoSliceMut`]: std::io::IoSliceMut","links":{"std::io::IoSliceMut":"1:4557:1935"},"attrs":["#[repr(transparent)]"],"deprecation":null,"kind":"struct","inner":{"struct_type":"tuple","generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"fields_stripped":true,"fields":[],"impls":["0:771","a:2:3177:195-0:764:1668","a:2:9118:9068-0:764:1668","a:2:9119:9067-0:764:1668","a:2:3189:204-0:764:1668","a:2:3218:3315-0:764:1668","b:2:3116-0:764:1668","b:2:3106-0:764:1668","b:2:3906-0:764:1668","b:2:3121-0:764:1668","b:2:3110-0:764:1668","b:2:2783-0:764:1668","b:2:2780-0:764:1668","0:768","0:774","0:778"]}},"2:13201:54161":{"id":"2:13201:54161","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_mut":"1:15728:3066"},"attrs":["#[must_use]","#[stable(feature = \"str_split_at\", since = \"1.4.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:91:1886":{"id":"0:91:1886","crate_id":0,"name":"as_socket","span":{"filename":"src/sockaddr.rs","begin":[164,4],"end":[192,5]},"visibility":"public","docs":"Returns this address as a `SocketAddr` if it is in the `AF_INET` (IPv4)\nor `AF_INET6` (IPv6) family, otherwise returns `None`.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47161:161","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"SocketAddr","id":"1:11002:1569","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3121-0:824:1624":{"id":"b:2:3121-0:824:1624","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:3080:144","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:3090:211","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Type","id":"0:824:1624","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3124:122","2:3125:1383"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:774":{"id":"0:774","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[311,0],"end":[317,1]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Deref","id":"2:3396:111","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"MaybeUninitSlice","id":"0:764:1668","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"items":["0:776:205","0:777:523"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:320":{"id":"0:320","crate_id":0,"name":null,"span":{"filename":"src/socket.rs","begin":[1736,0],"end":[1749,1]},"visibility":{"restricted":{"parent":"0:102:1583","path":"::socket"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["write_all_vectored","by_ref","write_vectored","write_all","write_fmt","is_write_vectored"],"trait":{"kind":"resolved_path","inner":{"name":"Write","id":"1:4596:1933","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Socket","id":"0:188:1596","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:321:1580","0:322:2564","0:323:2565"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:2799:100":{"id":"2:2799:100","crate_id":2,"name":"Clone","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2800:391","2:2801:393"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:806:639":{"id":"0:806:639","crate_id":0,"name":"fmt","span":{"filename":"src/sys/unix.rs","begin":[234,0],"end":[249,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"std::fmt::Formatter","id":"2:10058:129","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"std::fmt::Result","id":"2:10047:190","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:8185:131":{"id":"2:8185:131","crate_id":2,"name":"FromIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8187:663"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"a:2:3218:3315-0:188:1596":{"id":"a:2:3218:3315-0:188:1596","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Unpin","id":"2:3218:3315","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Socket","id":"0:188:1596","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"a:2:3189:204-0:784:1603":{"id":"a:2:3189:204-0:784:1603","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Sync","id":"2:3189:204","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"InterfaceIndexOrAddress","id":"0:784:1603","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:328:2565":{"id":"0:328:2565","crate_id":0,"name":"flush","span":{"filename":"src/socket.rs","begin":[1761,4],"end":[1763,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:3953:190","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:195:897":{"id":"0:195:897","crate_id":0,"name":"new","span":{"filename":"src/socket.rs","begin":[127,4],"end":[130,5]},"visibility":"public","docs":"Creates a new socket and sets common flags.\n\nThis function corresponds to `socket(2)` on Unix and `WSASocketW` on\nWindows.\n\nOn Unix-like systems, the close-on-exec flag is set on the new socket.\nAdditionally, on Apple platforms `SOCK_NOSIGPIPE` is set. On Windows,\nthe socket is made non-inheritable.\n\n[`Socket::new_raw`] can be used if you don't want these flags to be set.","links":{"`Socket::new_raw`":"0:188:1596"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["domain",{"kind":"resolved_path","inner":{"name":"Domain","id":"0:811:1611","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}],["ty",{"kind":"resolved_path","inner":{"name":"Type","id":"0:824:1624","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}],["protocol",{"kind":"resolved_path","inner":{"name":"Option","id":"2:47161:161","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Protocol","id":"0:837:1642","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:3953:190","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Socket","id":"0:188:1596","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:246:2264":{"id":"0:246:2264","crate_id":0,"name":"set_linger","span":{"filename":"src/socket.rs","begin":[833,4],"end":[836,5]},"visibility":"public","docs":"Set value for the `SO_LINGER` option on this socket.\n\nIf `linger` is not `None`, a close(2) or shutdown(2) will not return\nuntil all queued messages for the socket have been successfully sent or\nthe linger timeout has been reached. Otherwise, the call returns\nimmediately and the closing is done in the background. When the socket\nis closed as part of exit(2), it always lingers in the background.\n\n# Notes\n\nOn most OSs the duration only has a precision of seconds and will be\nsilently truncated.\n\nOn Apple platforms (e.g. macOS, iOS, etc) this uses `SO_LINGER_SEC`.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["linger",{"kind":"resolved_path","inner":{"name":"Option","id":"2:47161:161","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Duration","id":"2:49863:116","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:3953:190","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:310:2561":{"id":"0:310:2561","crate_id":0,"name":"set_nodelay","span":{"filename":"src/socket.rs","begin":[1690,4],"end":[1699,5]},"visibility":"public","docs":"Set the value of the `TCP_NODELAY` option on this socket.\n\nIf set, this option disables the Nagle algorithm. This means that\nsegments are always sent as soon as possible, even if there is only a\nsmall amount of data. When not set, data is buffered until there is a\nsufficient amount to send out, thereby avoiding the frequent sending of\nsmall packets.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["nodelay",{"kind":"primitive","inner":"bool"}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:3953:190","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13197:54141":{"id":"2:13197:54141","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":["#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]","#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10716:198","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10716:198","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"5:6028:59893":{"id":"5:6028:59893","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:8276:200"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]","#[stable(feature = \"str_replacen\", since = \"1.16.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}],["count",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8276:200","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12825:10002","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13208:10815":{"id":"2:13208:10815","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are ended with either a newline (`\\n`) or a carriage return with\na line feed (`\\r\\n`).\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\n\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line ending isn't required:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Lines","id":"2:49373:3268","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13273:59249":{"id":"2:13273:59249","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2834:119":{"id":"2:2834:119","crate_id":2,"name":"Eq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"PartialEq","id":"2:2829:168","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:837:1642":{"id":"0:837:1642","crate_id":0,"name":"Protocol","span":{"filename":"src/lib.rs","begin":[238,0],"end":[238,27]},"visibility":"public","docs":"Protocol specification used for creating sockets via `Socket::new`.\n\nThis is a newtype wrapper around an integer which provides a nicer API in\naddition to an injection point for documentation.\n\nThis type is freely interconvertible with C's `int` type, however, if a raw\nvalue needs to be provided.","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"struct_type":"tuple","generics":{"params":[],"where_predicates":[]},"fields_stripped":true,"fields":[],"impls":["0:753","a:2:3177:195-0:837:1642","a:2:9118:9068-0:837:1642","a:2:9119:9067-0:837:1642","a:2:3189:204-0:837:1642","a:2:3218:3315-0:837:1642","b:2:3116-0:837:1642","b:2:3106-0:837:1642","b:2:3906-0:837:1642","b:2:3121-0:837:1642","b:2:3110-0:837:1642","b:2:2783-0:837:1642","b:2:2780-0:837:1642","b:5:776-0:837:1642","0:809","0:840","0:841","0:843","0:844","0:846","0:847","0:758","0:760"]}},"0:849:884":{"id":"0:849:884","crate_id":0,"name":"ne","span":{"filename":"src/lib.rs","begin":[237,26],"end":[237,35]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"Protocol","id":"0:837:1642","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:784:1603":{"id":"0:784:1603","crate_id":0,"name":"InterfaceIndexOrAddress","span":{"filename":"src/socket.rs","begin":[728,0],"end":[733,1]},"visibility":"public","docs":"A local interface specified by its index or an address assigned to it.\n\n`Index(0)` and `Address(Ipv4Addr::UNSPECIFIED)` are equivalent and indicate\nthat an appropriate interface should be selected by the system.","links":{},"attrs":["#[cfg(not(any(target_os = \"haiku\", target_os = \"illumos\", target_os =\n\"netbsd\", target_os = \"redox\", target_os = \"solaris\",)))]"],"deprecation":null,"kind":"enum","inner":{"generics":{"params":[],"where_predicates":[]},"variants_stripped":false,"variants":["0:785:2216","0:788:2218"],"impls":["a:2:3177:195-0:784:1603","a:2:9118:9068-0:784:1603","a:2:9119:9067-0:784:1603","a:2:3189:204-0:784:1603","a:2:3218:3315-0:784:1603","b:2:3116-0:784:1603","b:2:3106-0:784:1603","b:2:3906-0:784:1603","b:2:3121-0:784:1603","b:2:3110-0:784:1603","b:2:2783-0:784:1603","b:2:2780-0:784:1603","0:791"]}},"1:1075:9627":{"id":"1:1075:9627","crate_id":1,"name":"AsciiExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:1076:9281","1:1077:10478","1:1078:53745","1:1079:53744","1:1080:53746","1:1081:53743","1:1082:53742"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:241:2236":{"id":"0:241:2236","crate_id":0,"name":"take_error","span":{"filename":"src/socket.rs","begin":[773,4],"end":[779,5]},"visibility":"public","docs":"Get the value of the `SO_ERROR` option on this socket.\n\nThis will retrieve the stored error in the underlying socket, clearing\nthe field in the process. This can be useful for checking errors between\ncalls.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:3953:190","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47161:161","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"io::Error","id":"1:3955:122","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13298:10478":{"id":"2:13298:10478","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:850:1658":{"id":"0:850:1658","crate_id":0,"name":"RecvFlags","span":{"filename":"src/lib.rs","begin":[272,0],"end":[272,28]},"visibility":"public","docs":"Flags for incoming messages.\n\nFlags provide additional information about incoming messages.","links":{},"attrs":["#[cfg(not(target_os = \"redox\"))]"],"deprecation":null,"kind":"struct","inner":{"struct_type":"tuple","generics":{"params":[],"where_predicates":[]},"fields_stripped":true,"fields":[],"impls":["0:625","0:762","a:2:3177:195-0:850:1658","a:2:9118:9068-0:850:1658","a:2:9119:9067-0:850:1658","a:2:3189:204-0:850:1658","a:2:3218:3315-0:850:1658","b:2:3116-0:850:1658","b:2:3106-0:850:1658","b:2:3906-0:850:1658","b:2:3121-0:850:1658","b:2:3110-0:850:1658","b:2:2783-0:850:1658","b:2:2780-0:850:1658","b:5:776-0:850:1658","0:628","0:853","0:854","0:856","0:857","0:859","0:860"]}},"0:818":{"id":"0:818","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[153,22],"end":[153,24]},"visibility":"crate","docs":null,"links":{},"attrs":["#[automatically_derived]","#[allow(unused_qualifications)]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"kind":"resolved_path","inner":{"name":"Eq","id":"2:2834:119","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Domain","id":"0:811:1611","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"2:3292:3207":{"id":"2:3292:3207","crate_id":2,"name":"RemAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3294:1081"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:782:897":{"id":"0:782:897","crate_id":0,"name":"new","span":{"filename":"src/lib.rs","begin":[339,4],"end":[347,5]},"visibility":"public","docs":"Returns a new, empty set of TCP keepalive parameters.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[],"output":{"kind":"resolved_path","inner":{"name":"TcpKeepalive","id":"0:863:1678","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3906-0:77:1595":{"id":"b:2:3906-0:77:1595","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3182:3177","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Any","id":"2:3904:68","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"SockAddr","id":"0:77:1595","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3908:1397"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:3119:122":{"id":"2:3119:122","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"typedef","inner":{"type":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"U"},"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:3090:211","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}}}},"generics":{"params":[],"where_predicates":[]}}},"0:205:2045":{"id":"0:205:2045","crate_id":0,"name":"listen","span":{"filename":"src/socket.rs","begin":[245,4],"end":[247,5]},"visibility":"public","docs":"Mark a socket as ready to accept incoming connection requests using\n[`Socket::accept()`].\n\nThis function directly corresponds to the `listen(2)` function on\nWindows and Unix.\n\nAn error will be returned if `listen` or `connect` has already been\ncalled on this builder.","links":{"`Socket::accept()`":"0:188:1596"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["backlog",{"kind":"resolved_path","inner":{"name":"c_int","id":"20:63:1594","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:3953:190","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:212:2081":{"id":"0:212:2081","crate_id":0,"name":"try_clone","span":{"filename":"src/socket.rs","begin":[342,4],"end":[344,5]},"visibility":"public","docs":"Creates a new independently owned handle to the underlying socket.\n\n# Notes\n\nOn Unix this uses `F_DUPFD_CLOEXEC` and thus sets the `FD_CLOEXEC` on\nthe returned socket.\n\nOn Windows this uses `WSA_FLAG_NO_HANDLE_INHERIT` setting inheriting to\nfalse.\n\nOn Windows this can **not** be used function cannot be used on a\nQOS-enabled socket, see\n<https://docs.microsoft.com/en-us/windows/win32/api/winsock2/nf-winsock2-wsaduplicatesocketw>.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:3953:190","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Socket","id":"0:188:1596","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13299:53746":{"id":"2:13299:53746","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:9118:9068-0:764:1668":{"id":"a:2:9118:9068-0:764:1668","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"UnwindSafe","id":"2:9118:9068","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"MaybeUninitSlice","id":"0:764:1668","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}},"0:777:523":{"id":"0:777:523","crate_id":0,"name":"deref","span":{"filename":"src/lib.rs","begin":[314,4],"end":[316,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"resolved_path","inner":{"name":"MaybeUninit","id":"2:32028:1567","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"u8"}}],"bindings":[]}},"param_names":[]}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:746":{"id":"0:746","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[196,0],"end":[216,1]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"Type","id":"0:824:1624","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:747:1627","0:748:1631"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:213:2036":{"id":"0:213:2036","crate_id":0,"name":"set_nonblocking","span":{"filename":"src/socket.rs","begin":[354,4],"end":[356,5]},"visibility":"public","docs":"Moves this TCP stream into or out of nonblocking mode.\n\n# Notes\n\nOn Unix this corresponds to calling `fcntl` (un)setting `O_NONBLOCK`.\n\nOn Windows this corresponds to calling `ioctlsocket` (un)setting\n`FIONBIO`.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["nonblocking",{"kind":"primitive","inner":"bool"}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:3953:190","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:750:660":{"id":"0:750:660","crate_id":0,"name":"from","span":{"filename":"src/lib.rs","begin":[219,4],"end":[221,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["t",{"kind":"resolved_path","inner":{"name":"c_int","id":"20:63:1594","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}]],"output":{"kind":"resolved_path","inner":{"name":"Type","id":"0:824:1624","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3110-0:784:1603":{"id":"b:2:3110-0:784:1603","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"From","id":"2:3083:130","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"InterfaceIndexOrAddress","id":"0:784:1603","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3112:660"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:3409:1570":{"id":"2:3409:1570","crate_id":2,"name":"DerefMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3410:525"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Deref","id":"2:3396:111","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"b:2:3110-0:77:1595":{"id":"b:2:3110-0:77:1595","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"From","id":"2:3083:130","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"SockAddr","id":"0:77:1595","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3112:660"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:792:639":{"id":"0:792:639","crate_id":0,"name":"fmt","span":{"filename":"src/socket.rs","begin":[727,9],"end":[727,14]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Formatter","id":"2:10058:129","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Result","id":"2:10047:190","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2780-0:837:1642":{"id":"b:2:2780-0:837:1642","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3182:3177","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Borrow","id":"2:2774:93","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Protocol","id":"0:837:1642","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:2782:3131"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:3343:3218":{"id":"2:3343:3218","crate_id":2,"name":"ShlAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3345:1204"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:5779:9392":{"id":"5:5779:9392","crate_id":5,"name":"Join","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:5781:166","5:5782:38374"],"generics":{"params":[{"name":"Separator","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:232:2193":{"id":"0:232:2193","crate_id":0,"name":"send_to_with_flags","span":{"filename":"src/socket.rs","begin":[632,4],"end":[639,5]},"visibility":"public","docs":"Identical to [`send_to`] but allows for specification of arbitrary flags\nto the underlying `sendto` call.\n\n[`send_to`]: Socket::send_to","links":{"Socket::send_to":"0:188:1596"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}],["addr",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"SockAddr","id":"0:77:1595","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}],["flags",{"kind":"resolved_path","inner":{"name":"c_int","id":"20:63:1594","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:3953:190","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3155:110":{"id":"2:3155:110","crate_id":2,"name":"Default","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3156:59"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:10312:137":{"id":"2:10312:137","crate_id":2,"name":"Hash","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10313:694","2:10315:55309"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:857":{"id":"0:857","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[271,22],"end":[271,24]},"visibility":"crate","docs":null,"links":{},"attrs":["#[automatically_derived]","#[allow(unused_qualifications)]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"kind":"resolved_path","inner":{"name":"Eq","id":"2:2834:119","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"RecvFlags","id":"0:850:1658","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:749":{"id":"0:749","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[218,0],"end":[222,1]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"From","id":"2:3083:130","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"i32"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Type","id":"0:824:1624","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:750:660"],"negative":false,"synthetic":false,"blanket_impl":null}},"1:5561:2640":{"id":"1:5561:2640","crate_id":1,"name":"OsStrExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5562:11235","1:5563:2710"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10429:9634","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"a:2:3189:204-0:188:1596":{"id":"a:2:3189:204-0:188:1596","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Sync","id":"2:3189:204","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Socket","id":"0:188:1596","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:721":{"id":"0:721","crate_id":0,"name":null,"span":{"filename":"src/sys/unix.rs","begin":[2011,0],"end":[2015,1]},"visibility":{"restricted":{"parent":"0:368:1592","path":"::sys"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"FromRawFd","id":"1:6769:1938","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"crate::Socket","id":"0:188:1596","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:722:1584"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:3266:3202":{"id":"2:3266:3202","crate_id":2,"name":"Rem","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3268:166","2:3269:1080"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3260:3199":{"id":"2:3260:3199","crate_id":2,"name":"Div","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3262:166","2:3263:538"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:22628:9680":{"id":"2:22628:9680","crate_id":2,"name":"SupportedLaneCount","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:22618:9634","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"b:2:3121-0:764:1668":{"id":"b:2:3121-0:764:1668","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:3080:144","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:3090:211","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"MaybeUninitSlice","id":"0:764:1668","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"items":["2:3124:122","2:3125:1383"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:740:1616":{"id":"0:740:1616","crate_id":0,"name":"IPV6","span":{"filename":"src/lib.rs","begin":[161,4],"end":[161,51]},"visibility":"public","docs":"Domain for IPv6 communication, corresponding to `AF_INET6`.","links":{},"attrs":[],"deprecation":null,"kind":"assoc_const","inner":{"type":{"kind":"resolved_path","inner":{"name":"Domain","id":"0:811:1611","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"default":"Domain(sys::AF_INET6)"}},"0:762":{"id":"0:762","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[275,0],"end":[286,1]},"visibility":"crate","docs":null,"links":{},"attrs":["#[cfg(not(target_os = \"redox\"))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"RecvFlags","id":"0:850:1658","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:763:1664"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:292:2472":{"id":"0:292:2472","crate_id":0,"name":"set_multicast_hops_v6","span":{"filename":"src/socket.rs","begin":[1394,4],"end":[1403,5]},"visibility":"public","docs":"Set the value of the `IPV6_MULTICAST_HOPS` option for this socket\n\nIndicates the number of \"routers\" multicast packets will transit for\nthis socket. The default value is 1 which means that multicast packets\ndon't leave the local network unless explicitly requested.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["hops",{"kind":"primitive","inner":"u32"}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:3953:190","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:814":{"id":"0:814","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[153,9],"end":[153,13]},"visibility":"crate","docs":null,"links":{},"attrs":["#[automatically_derived]","#[allow(unused_qualifications)]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Copy","id":"2:3187:102","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Domain","id":"0:811:1611","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"a:2:3189:204-0:77:1595":{"id":"a:2:3189:204-0:77:1595","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Sync","id":"2:3189:204","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"SockAddr","id":"0:77:1595","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:81:897":{"id":"0:81:897","crate_id":0,"name":"new","span":{"filename":"src/sockaddr.rs","begin":[68,4],"end":[70,5]},"visibility":"public","docs":"Create a `SockAddr` from the underlying storage and its length.\n\n# Safety\n\nCaller must ensure that the address family and length match the type of\nstorage address. For example if `storage.ss_family` is set to `AF_INET`\nthe `storage` must be initialised as `sockaddr_in`, setting the content\nand length appropriately.\n\n# Examples\n\n```\n# fn main() -> std::io::Result<()> {\n# #[cfg(unix)] {\nuse std::io;\nuse std::mem;\nuse std::os::unix::io::AsRawFd;\n\nuse socket2::{SockAddr, Socket, Domain, Type};\n\nlet socket = Socket::new(Domain::IPV4, Type::STREAM, None)?;\n\n// Initialise a `SocketAddr` byte calling `getsockname(2)`.\nlet mut addr_storage: libc::sockaddr_storage = unsafe { mem::zeroed() };\nlet mut len = mem::size_of_val(&addr_storage) as libc::socklen_t;\n\n// The `getsockname(2)` system call will intiliase `storage` for\n// us, setting `len` to the correct length.\nlet res = unsafe {\n    libc::getsockname(\n        socket.as_raw_fd(),\n        (&mut addr_storage as *mut libc::sockaddr_storage).cast(),\n        &mut len,\n    )\n};\nif res == -1 {\n    return Err(io::Error::last_os_error());\n}\n\nlet address = unsafe { SockAddr::new(addr_storage, len) };\n# drop(address);\n# }\n# Ok(())\n# }\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["storage",{"kind":"resolved_path","inner":{"name":"sockaddr_storage","id":"20:1728:1808","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}],["len",{"kind":"resolved_path","inner":{"name":"socklen_t","id":"20:1864:1809","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}]],"output":{"kind":"resolved_path","inner":{"name":"SockAddr","id":"0:77:1595","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:13195:54140":{"id":"2:13195:54140","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":["#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]","#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10716:198","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10716:198","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:10111:9310":{"id":"2:10111:9310","crate_id":2,"name":"LowerHex","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10112:639"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3120:1384":{"id":"2:3120:1384","crate_id":2,"name":"try_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47288:190","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}},{"type":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"U"},"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:3090:211","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:299:2495":{"id":"0:299:2495","crate_id":0,"name":"unicast_hops_v6","span":{"filename":"src/socket.rs","begin":[1463,4],"end":[1468,5]},"visibility":"public","docs":"Get the value of the `IPV6_UNICAST_HOPS` option for this socket.\n\nSpecifies the hop limit for ipv6 unicast packets","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:3953:190","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"u32"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:834":{"id":"0:834","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[193,26],"end":[193,35]},"visibility":"crate","docs":null,"links":{},"attrs":["#[automatically_derived]","#[allow(unused_qualifications)]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"kind":"resolved_path","inner":{"name":"PartialEq","id":"2:2829:168","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Type","id":"0:824:1624","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Type","id":"0:824:1624","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:835:584","0:836:884"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:3284:3206":{"id":"2:3284:3206","crate_id":2,"name":"MulAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3286:870"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:835:584":{"id":"0:835:584","crate_id":0,"name":"eq","span":{"filename":"src/lib.rs","begin":[193,26],"end":[193,35]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"Type","id":"0:824:1624","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:796:660":{"id":"0:796:660","crate_id":0,"name":"from","span":{"filename":"src/socket.rs","begin":[1777,0],"end":[1777,31]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["socket",{"kind":"resolved_path","inner":{"name":"net::TcpListener","id":"1:5284:2567","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}]],"output":{"kind":"resolved_path","inner":{"name":"Socket","id":"0:188:1596","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:95:660":{"id":"0:95:660","crate_id":0,"name":"from","span":{"filename":"src/sockaddr.rs","begin":[214,4],"end":[219,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["addr",{"kind":"resolved_path","inner":{"name":"SocketAddr","id":"1:11002:1569","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}]],"output":{"kind":"resolved_path","inner":{"name":"SockAddr","id":"0:77:1595","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:9118:9068-0:354:1597":{"id":"a:2:9118:9068-0:354:1597","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'s","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"UnwindSafe","id":"2:9118:9068","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"SockRef","id":"0:354:1597","args":{"angle_bracketed":{"args":[{"lifetime":"'s"}],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:10098:105":{"id":"2:10098:105","crate_id":2,"name":"Debug","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10099:639"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:289:2462":{"id":"0:289:2462","crate_id":0,"name":"leave_multicast_v6","span":{"filename":"src/socket.rs","begin":[1361,4],"end":[1375,5]},"visibility":"public","docs":"Leave a multicast group using `IPV6_DROP_MEMBERSHIP` option on this socket.\n\nSome OSs use `IPV6_LEAVE_GROUP` for this option.\n\nFor more information about this option, see [`join_multicast_v6`].\n\n[`join_multicast_v6`]: Socket::join_multicast_v6","links":{"Socket::join_multicast_v6":"0:188:1596"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["multiaddr",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"Ipv6Addr","id":"1:11059:1929","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}],["interface",{"kind":"primitive","inner":"u32"}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:3953:190","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13278:59252":{"id":"2:13278:59252","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"self::pattern":"2:12815:10001","prim@char":"1:15722:3061"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"trim_direction\", since = \"1.30.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12825:10002","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:9118:9068-0:863:1678":{"id":"a:2:9118:9068-0:863:1678","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"UnwindSafe","id":"2:9118:9068","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"TcpKeepalive","id":"0:863:1678","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"b:2:3106-0:850:1658":{"id":"b:2:3106-0:850:1658","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"From","id":"2:3083:130","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:3080:144","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"RecvFlags","id":"0:850:1658","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3109:1904"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:805":{"id":"0:805","crate_id":0,"name":null,"span":{"filename":"src/sys/unix.rs","begin":[234,0],"end":[249,1]},"visibility":{"restricted":{"parent":"0:368:1592","path":"::sys"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Debug","id":"2:10098:105","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Domain","id":"0:811:1611","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:806:639"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:2:3116-0:764:1668":{"id":"b:2:3116-0:764:1668","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:3090:211","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"TryInto","id":"2:3086:212","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"MaybeUninitSlice","id":"0:764:1668","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"items":["2:3119:122","2:3120:1384"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:744":{"id":"0:744","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[178,0],"end":[182,1]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"From","id":"2:3083:130","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Domain","id":"0:811:1611","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"c_int","id":"20:63:1594","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:745:660"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:823:884":{"id":"0:823:884","crate_id":0,"name":"ne","span":{"filename":"src/lib.rs","begin":[153,26],"end":[153,35]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"Domain","id":"0:811:1611","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:856":{"id":"0:856","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[271,22],"end":[271,24]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"StructuralEq","id":"2:3186:201","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"RecvFlags","id":"0:850:1658","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:829:391":{"id":"0:829:391","crate_id":0,"name":"clone","span":{"filename":"src/lib.rs","begin":[193,15],"end":[193,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Type","id":"0:824:1624","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:5:776-0:837:1642":{"id":"b:5:776-0:837:1642","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2799:100","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"kind":"resolved_path","inner":{"name":"ToOwned","id":"5:772:206","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Protocol","id":"0:837:1642","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["5:778:9281","5:779:9282","5:780:9283"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:318:2563":{"id":"0:318:2563","crate_id":0,"name":"read_vectored","span":{"filename":"src/socket.rs","begin":[1729,4],"end":[1733,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(target_os = \"redox\"))]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["bufs",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"resolved_path","inner":{"name":"IoSliceMut","id":"1:4557:1935","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:3953:190","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:326:1580":{"id":"0:326:1580","crate_id":0,"name":"write","span":{"filename":"src/socket.rs","begin":[1752,4],"end":[1754,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:3953:190","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13209:59238":{"id":"2:13209:59238","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\")]","#[allow(deprecated)]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"LinesAny","id":"2:49383:10326","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13305:59257":{"id":"2:13305:59257","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"1:15722:3061"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"str_escape\", since = \"1.34.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeUnicode","id":"2:49436:10331","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:215:2106":{"id":"0:215:2106","crate_id":0,"name":"recv","span":{"filename":"src/socket.rs","begin":[386,4],"end":[388,5]},"visibility":"public","docs":"Receives data on the socket from the remote address to which it is\nconnected.\n\nThe [`connect`] method will connect this socket to a remote address.\nThis method might fail if the socket is not connected.\n\n[`connect`]: Socket::connect\n\n# Safety\n\nNormally casting a `&mut [u8]` to `&mut [MaybeUninit<u8>]` would be\nunsound, as that allows us to write uninitialised bytes to the buffer.\nHowever this implementation promises to not write uninitialised bytes to\nthe `buf`fer and passes it directly to `recv(2)` system call. This\npromise ensures that this function can be called using a `buf`fer of\ntype `&mut [u8]`.\n\nNote that the [`io::Read::read`] implementation calls this function with\na `buf`fer of type `&mut [u8]`, allowing initialised buffers to be used\nwithout using `unsafe`.","links":{"`io::Read::read`":"1:4539:1932","Socket::connect":"0:188:1596"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"resolved_path","inner":{"name":"MaybeUninit","id":"2:32028:1567","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"u8"}}],"bindings":[]}},"param_names":[]}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:3953:190","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:367:639":{"id":"0:367:639","crate_id":0,"name":"fmt","span":{"filename":"src/sockref.rs","begin":[140,4],"end":[146,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"fmt::Formatter","id":"2:10058:129","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"fmt::Result","id":"2:10047:190","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:840":{"id":"0:840","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[237,9],"end":[237,13]},"visibility":"crate","docs":null,"links":{},"attrs":["#[automatically_derived]","#[allow(unused_qualifications)]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Copy","id":"2:3187:102","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Protocol","id":"0:837:1642","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:801":{"id":"0:801","crate_id":0,"name":null,"span":{"filename":"src/socket.rs","begin":[1780,0],"end":[1780,31]},"visibility":{"restricted":{"parent":"0:102:1583","path":"::socket"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"From","id":"2:3083:130","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Socket","id":"0:188:1596","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"net::TcpListener","id":"1:5284:2567","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:802:660"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:8662:9571":{"id":"2:8662:9571","crate_id":2,"name":"TrustedLen","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"2:8384:152","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"a:2:3189:204-0:837:1642":{"id":"a:2:3189:204-0:837:1642","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Sync","id":"2:3189:204","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Protocol","id":"0:837:1642","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"b:2:3110-0:837:1642":{"id":"b:2:3110-0:837:1642","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"From","id":"2:3083:130","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Protocol","id":"0:837:1642","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3112:660"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:2780-0:77:1595":{"id":"b:2:2780-0:77:1595","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3182:3177","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Borrow","id":"2:2774:93","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"SockAddr","id":"0:77:1595","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:2782:3131"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:3106-0:784:1603":{"id":"b:2:3106-0:784:1603","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"From","id":"2:3083:130","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:3080:144","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"InterfaceIndexOrAddress","id":"0:784:1603","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3109:1904"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"5:6045:3288":{"id":"5:6045:3288","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:8276:200"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]","#[stable(feature = \"repeat_str\", since = \"1.16.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8276:200","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:3218:3315-0:837:1642":{"id":"a:2:3218:3315-0:837:1642","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Unpin","id":"2:3218:3315","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Protocol","id":"0:837:1642","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:741:1619":{"id":"0:741:1619","crate_id":0,"name":"for_address","span":{"filename":"src/lib.rs","begin":[164,4],"end":[169,5]},"visibility":"public","docs":"Returns the correct domain for `address`.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["address",{"kind":"resolved_path","inner":{"name":"SocketAddr","id":"1:11002:1569","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}]],"output":{"kind":"resolved_path","inner":{"name":"Domain","id":"0:811:1611","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:623":{"id":"0:623","crate_id":0,"name":null,"span":{"filename":"src/sys/unix.rs","begin":[252,0],"end":[334,1]},"visibility":{"restricted":{"parent":"0:368:1592","path":"::sys"}},"docs":"Unix only API.","links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"Type","id":"0:824:1624","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:207:2055":{"id":"0:207:2055","crate_id":0,"name":"accept_raw","span":{"filename":"src/socket.rs","begin":[296,4],"end":[298,5]},"visibility":"public","docs":"Accept a new incoming connection from this listener.\n\nThis function directly corresponds to the `accept(2)` function on\nWindows and Unix.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:3953:190","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"resolved_path","inner":{"name":"Socket","id":"0:188:1596","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},{"kind":"resolved_path","inner":{"name":"SockAddr","id":"0:77:1595","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}]}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:0:1706":{"id":"0:0:1706","crate_id":0,"name":"socket2","span":{"filename":"src/lib.rs","begin":[9,0],"end":[442,1]},"visibility":"public","docs":"Utilities for creating and using sockets.\n\nThe goal of this crate is to create and use a socket using advanced\nconfiguration options (those that are not available in the types in the\nstandard library) without using any unsafe code.\n\nThis crate provides as direct as possible access to the system's\nfunctionality for sockets, this means little effort to provide\ncross-platform utilities. It is up to the user to know how to use sockets\nwhen using this crate. *If you don't know how to create a socket using\nlibc/system calls then this crate is not for you*. Most, if not all,\nfunctions directly relate to the equivalent system call with no error\nhandling applied, so no handling errors such as [`EINTR`]. As a result using\nthis crate can be a little wordy, but it should give you maximal flexibility\nover configuration of sockets.\n\n[`EINTR`]: std::io::ErrorKind::Interrupted\n\n# Examples\n\n```no_run\n# fn main() -> std::io::Result<()> {\nuse std::net::{SocketAddr, TcpListener};\nuse socket2::{Socket, Domain, Type};\n\n// Create a TCP listener bound to two addresses.\nlet socket = Socket::new(Domain::IPV6, Type::STREAM, None)?;\n\nsocket.set_only_v6(false)?;\nlet address: SocketAddr = \"[::1]:12345\".parse().unwrap();\nsocket.bind(&address.into())?;\nsocket.listen(128)?;\n\nlet listener: TcpListener = socket.into();\n// ...\n# drop(listener);\n# Ok(()) }\n```\n\n## Features\n\nThis crate has a single feature `all`, which enables all functions even ones\nthat are not available on all OSs.","links":{"std::io::ErrorKind::Interrupted":"1:10808:2037"},"attrs":["#![doc(html_root_url = \"https://docs.rs/socket2/0.3\")]","#![deny(missing_docs, missing_debug_implementations, rust_2018_idioms)]","#![doc(test(attr(deny(warnings))))]"],"deprecation":null,"kind":"module","inner":{"is_crate":true,"items":["0:77:1595","0:188:1596","0:354:1597","0:784:1603","0:811:1611","0:824:1624","0:837:1642","0:850:1658","0:764:1668","0:863:1678"]}},"0:626:2690":{"id":"0:626:2690","crate_id":0,"name":"is_end_of_record","span":{"filename":"src/sys/unix.rs","begin":[387,4],"end":[389,5]},"visibility":"public","docs":"Check if the message terminates a record.\n\nNot all socket types support the notion of records.\nFor socket types that do support it (such as [`SEQPACKET`][Type::SEQPACKET]),\na record is terminated by sending a message with the end-of-record flag set.\n\nOn Unix this corresponds to the MSG_EOR flag.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:745:660":{"id":"0:745:660","crate_id":0,"name":"from","span":{"filename":"src/lib.rs","begin":[179,4],"end":[181,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["d",{"kind":"resolved_path","inner":{"name":"Domain","id":"0:811:1611","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}]],"output":{"kind":"resolved_path","inner":{"name":"c_int","id":"20:63:1594","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3420:3220":{"id":"2:3420:3220","crate_id":2,"name":"Drop","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3421:558"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:92:1901":{"id":"0:92:1901","crate_id":0,"name":"as_socket_ipv4","span":{"filename":"src/sockaddr.rs","begin":[196,4],"end":[201,5]},"visibility":"public","docs":"Returns this address as a [`SocketAddrV4`] if it is in the `AF_INET`\nfamily.","links":{"`SocketAddrV4`":"1:11026:1802"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47161:161","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"SocketAddrV4","id":"1:11026:1802","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:847":{"id":"0:847","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[237,26],"end":[237,35]},"visibility":"crate","docs":null,"links":{},"attrs":["#[automatically_derived]","#[allow(unused_qualifications)]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"kind":"resolved_path","inner":{"name":"PartialEq","id":"2:2829:168","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Protocol","id":"0:837:1642","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Protocol","id":"0:837:1642","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:848:584","0:849:884"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:13258:59243":{"id":"2:13258:59243","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"2:12815:10001","`DoubleEndedIterator`":"2:8233:115","prim@char":"1:15722:3061","str::matches":"1:15728:3066"},"attrs":["#[stable(feature = \"str_matches\", since = \"1.2.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatches","id":"2:49341:10325","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12825:10002","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12825:10002","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:12840:10005","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:802:660":{"id":"0:802:660","crate_id":0,"name":"from","span":{"filename":"src/socket.rs","begin":[1780,0],"end":[1780,31]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["socket",{"kind":"resolved_path","inner":{"name":"Socket","id":"0:188:1596","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}]],"output":{"kind":"resolved_path","inner":{"name":"net::TcpListener","id":"1:5284:2567","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:12845:10000":{"id":"2:12845:10000","crate_id":2,"name":"DoubleEndedSearcher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:12840:10005","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"b:2:2783-0:863:1678":{"id":"b:2:2783-0:863:1678","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3182:3177","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"BorrowMut","id":"2:2777:9396","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"TcpKeepalive","id":"0:863:1678","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:2785:53607"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:8258:9081":{"id":"2:8258:9081","crate_id":2,"name":"ExactSizeIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8259:770","2:8260:9226"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"2:8384:152","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:854":{"id":"0:854","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[271,15],"end":[271,20]},"visibility":"crate","docs":null,"links":{},"attrs":["#[automatically_derived]","#[allow(unused_qualifications)]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2799:100","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"RecvFlags","id":"0:850:1658","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:855:391"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:257:2309":{"id":"0:257:2309","crate_id":0,"name":"set_reuse_address","span":{"filename":"src/socket.rs","begin":[931,4],"end":[940,5]},"visibility":"public","docs":"Set value for the `SO_REUSEADDR` option on this socket.\n\nThis indicates that futher calls to `bind` may allow reuse of local\naddresses. For IPv4 sockets this means that a socket may bind even when\nthere's a socket already listening on this port.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["reuse",{"kind":"primitive","inner":"bool"}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:3953:190","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:9118:9068-0:811:1611":{"id":"a:2:9118:9068-0:811:1611","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"UnwindSafe","id":"2:9118:9068","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Domain","id":"0:811:1611","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"b:2:2780-0:188:1596":{"id":"b:2:2780-0:188:1596","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3182:3177","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Borrow","id":"2:2774:93","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Socket","id":"0:188:1596","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:2782:3131"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:800:660":{"id":"0:800:660","crate_id":0,"name":"from","span":{"filename":"src/socket.rs","begin":[1779,0],"end":[1779,29]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["socket",{"kind":"resolved_path","inner":{"name":"Socket","id":"0:188:1596","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}]],"output":{"kind":"resolved_path","inner":{"name":"net::TcpStream","id":"1:5281:1970","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:9118:9068-0:188:1596":{"id":"a:2:9118:9068-0:188:1596","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"UnwindSafe","id":"2:9118:9068","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Socket","id":"0:188:1596","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:8384:152":{"id":"2:8384:152","crate_id":2,"name":"Iterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8385:9230","2:8386:899","2:8387:9232","2:8388:477","2:8390:9233","2:8393:9234","2:8394:9235","2:8395:9236","2:8396:9237","2:8398:9238","2:8400:9239","2:8401:9240","2:8403:818","2:8406:9241","2:8413:3023","2:8415:9242","2:8418:9243","2:8419:9244","2:8420:9245","2:8422:9246","2:8424:9247","2:8427:1278","2:8428:3171","2:8429:9248","2:8433:9249","2:8436:9250","2:8437:9251","2:8438:9252","2:8440:9253","2:8441:9087","2:8443:9254","2:8446:9255","2:8448:9256","2:8458:9257","2:8473:9258","2:8475:9259","2:8479:9260","2:8488:9261","2:8491:9262","2:8493:9263","2:8496:260","2:8503:277","2:8510:9264","2:8517:9265","2:8526:9266","2:8536:992","2:8543:9267","2:8550:2750","2:8551:2636","2:8552:3325","2:8564:3324","2:8571:3323","2:8583:3322","2:8590:9268","2:8591:9269","2:8596:9270","2:8599:9271","2:8602:9272","2:8603:9273","2:8605:8492","2:8607:397","2:8610:9274","2:8613:975","2:8616:9275","2:8619:584","2:8622:9276","2:8625:884","2:8627:803","2:8629:769","2:8631:692","2:8633:675","2:8635:9277","2:8636:9278","2:8644:9279"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:830":{"id":"0:830","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[193,22],"end":[193,24]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"StructuralEq","id":"2:3186:201","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Type","id":"0:824:1624","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"1:5697:9646":{"id":"1:5697:9646","crate_id":1,"name":"DirEntryExt2","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5698:57470"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10429:9634","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:249:2277":{"id":"0:249:2277","crate_id":0,"name":"set_out_of_band_inline","span":{"filename":"src/socket.rs","begin":[860,4],"end":[869,5]},"visibility":"public","docs":"Set value for the `SO_OOBINLINE` option on this socket.\n\nIf this option is enabled, out-of-band data is directly placed into the\nreceive data stream. Otherwise, out-of-band data is passed only when the\n`MSG_OOB` flag is set during receiving. As per RFC6093, TCP sockets\nusing the Urgent mechanism are encouraged to set this flag.","links":{},"attrs":["#[cfg(not(target_os = \"redox\"))]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["oob_inline",{"kind":"primitive","inner":"bool"}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:3953:190","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:6046:53745":{"id":"5:6046:53745","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"1:15728:3066"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]","#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8276:200","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:10119:9309":{"id":"2:10119:9309","crate_id":2,"name":"UpperExp","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10120:639"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}}},"paths":{"1:10803:9791":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"17:13799:12301":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"1:9460:11458":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"2:48706:9402":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"20:1045:2496":{"crate_id":20,"path":["libc","unix","linux_like","IPV6_UNICAST_HOPS"],"kind":"constant"},"1:10996:3268":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"17:11026:13524":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"20:1609:4567":{"crate_id":20,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"2:48209:103":{"crate_id":2,"path":["core","fmt","rt","v1","Count"],"kind":"enum"},"2:51203:10150":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"6:4005:6666":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"2:46269:10074":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"20:135:1648":{"crate_id":20,"path":["libc","unix","IPPROTO_ICMPV6"],"kind":"constant"},"6:599:2252":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"2:3185:202":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"1:3908:9793":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"6:519:3737":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"20:134:1645":{"crate_id":20,"path":["libc","unix","IPPROTO_ICMP"],"kind":"constant"},"2:10229:13551":{"crate_id":2,"path":["core","fmt","fmt","BorrowedPlaceholder"],"kind":"struct"},"16:3772:12370":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"17:13240:12134":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"17:12946:11987":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"17:11199:11721":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"20:6642:2072":{"crate_id":20,"path":["libc","unix","linux_like","linux","arch","generic","SO_TYPE"],"kind":"constant"},"2:50891:10146":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"1:3529:3274":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"17:9933:13487":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"17:13788:12297":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"17:9689:60687":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"16:4955:12393":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"2:47550:78":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"17:12431:11901":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"5:7753:11426":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"2:51353:10130":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"6:6214:7730":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"20:4423:6709":{"crate_id":20,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"1:15201:55595":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"2:5013:9379":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"2:23944:10391":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"17:13620:12233":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"1:7525:9795":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"2:49898:10414":{"crate_id":2,"path":["core","time","FromFloatSecsErrorKind"],"kind":"enum"},"2:53252:12900":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"18:712:3321":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"17:13819:12304":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"1:10561:10605":{"crate_id":1,"path":["std","error","private","Internal"],"kind":"struct"},"2:52060:10131":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"20:4052:6673":{"crate_id":20,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"9:776:10682":{"crate_id":9,"path":["miniz_oxide","deflate","CompressionLevel"],"kind":"enum"},"1:5561:2640":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"6:4040:6670":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"1:8530:9912":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"17:10403:11214":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"6:4300:6695":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"6:6176:7727":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"17:13746:12284":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"1:11468:9776":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"16:7804:10959":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"16:5975:10991":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"20:4317:6698":{"crate_id":20,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"20:5122:7259":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"6:1676:4572":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"2:3080:144":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"2:10101:105":{"crate_id":2,"path":["core","fmt","macros","Debug"],"kind":"proc_derive"},"2:51401:10115":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"2:50837:10154":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"5:7195:11414":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"1:15688:57840":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"2:47262:9065":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"1:11154:3189":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"17:9886:13486":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"6:5548:7354":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"2:10357:9709":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"6:1744:4578":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"17:9088:46839":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"1:5889:9952":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"2:49341:10325":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"17:10420:11269":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"2:10058:129":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"5:7150:9687":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"2:47203:9415":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"16:6357:11001":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"12:840:9685":{"crate_id":12,"path":["hashbrown","map","Keys"],"kind":"struct"},"12:2025:9753":{"crate_id":12,"path":["hashbrown","set","Intersection"],"kind":"struct"},"2:46236:13554":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"16:7195:11019":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"2:23823:12732":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"2:47382:80":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"2:2429:9531":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"17:12783:11958":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"2:51663:10156":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"5:5357:3250":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"17:13609:12232":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"20:5990:7720":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"2:49062:10405":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"20:4431:6710":{"crate_id":20,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"20:5183:7304":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"2:49010:9417":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"5:1080:11414":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"17:11962:11807":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"1:1518:9694":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"1:2852:165":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"9:0:3038":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"20:6098:7724":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"12:429:10769":{"crate_id":12,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"17:11970:11809":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"17:9849:60684":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"1:11952:9728":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"2:2829:168":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"20:6646:2314":{"crate_id":20,"path":["libc","unix","linux_like","linux","arch","generic","SO_SNDBUF"],"kind":"constant"},"2:47357:163":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"2:22421:58741":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"2:53096:12892":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"2:4639:9983":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"17:10801:13511":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"2:50064:10351":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"2:8258:9081":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"20:6873:6845":{"crate_id":20,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"6:531:3738":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"2:3650:3228":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"6:6051:4504":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"1:8372:9726":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"16:4506:12380":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"1:10474:9294":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"17:11696:11754":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"12:1253:9700":{"crate_id":12,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"17:9896:60679":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"2:46325:13056":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"5:1204:10596":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"2:6309:10076":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"20:1576:4564":{"crate_id":20,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"5:1920:9688":{"crate_id":5,"path":["alloc","collections","btree","map","DrainFilter"],"kind":"struct"},"1:7403:114":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"2:2202:9990":{"crate_id":2,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"20:137:1654":{"crate_id":20,"path":["libc","unix","IPPROTO_UDP"],"kind":"constant"},"1:1157:16455":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"1:15739:3075":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"2:13724:59055":{"crate_id":2,"path":["core","future","from_generator","GenFuture"],"kind":"struct"},"19:0:972":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"20:6927:2648":{"crate_id":20,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"6:1736:1808":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"16:5505:10846":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"17:13192:12125":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"18:169:53130":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"15:0:3043":{"crate_id":15,"path":["addr2line"],"kind":"module"},"2:48158:67":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"17:8929:46835":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"17:11337:11199":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"1:5284:2567":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"6:5969:3615":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"2:24227:10372":{"crate_id":2,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"17:13258:12142":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"1:2171:9753":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"1:14358:124":{"crate_id":1,"path":["std","sys","unix","fs","FileType"],"kind":"struct"},"6:4083:6676":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"2:48463:13065":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"20:5213:7306":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"2:52596:10125":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"20:4350:6701":{"crate_id":20,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"2:46316:10061":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"1:3539:11441":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"20:536:3740":{"crate_id":20,"path":["libc","unix","rusage"],"kind":"struct"},"5:772:206":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"17:9574:11206":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"17:10253:11273":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"1:15723:3062":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"2:51742:10144":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"1:15693:16456":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"6:1596:4565":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"17:9264:11656":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"14:244:13023":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"1:2177:9754":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"18:694:11325":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"6:4133:6682":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"1:12528:123":{"crate_id":1,"path":["std","sys","unix","fs","File"],"kind":"struct"},"20:6636:8095":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"20:5233:7287":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"2:10920:9416":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"16:7024:11168":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"1:11059:1929":{"crate_id":1,"path":["std","net","ip","Ipv6Addr"],"kind":"struct"},"2:3633:208":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"1:6607:8905":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"2:11026:9412":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"17:13318:12153":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"1:1018:9852":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"2:5432:756":{"crate_id":2,"path":["core","iter"],"kind":"module"},"20:5997:3524":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"6:5167:7302":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"6:4377:6704":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"2:4970:9378":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"6:5379:7316":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"20:984:2387":{"crate_id":20,"path":["libc","unix","linux_like","IP_DROP_MEMBERSHIP"],"kind":"constant"},"17:13477:12195":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"1:10241:13578":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"17:12247:11853":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"1:10916:3290":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"1:9597:9898":{"crate_id":1,"path":["std","sys_common","remutex","ReentrantMutexGuard"],"kind":"struct"},"5:3348:9753":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"5:1655:9691":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"1:15745:3081":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"20:4075:6676":{"crate_id":20,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"5:1616:9685":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"5:3319:10538":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"16:5231:12396":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"2:3195:2569":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"6:4364:6702":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"17:11082:11204":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"6:3892:6656":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"14:216:45188":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"1:5643:9643":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"16:7205:11020":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"6:4293:6694":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"17:10095:11292":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"16:2968:11123":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"17:13865:12318":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"17:12795:11965":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"1:10798:9790":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"20:4025:6669":{"crate_id":20,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"17:9368:11660":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"2:8724:9815":{"crate_id":2,"path":["core","lazy","OnceCell"],"kind":"struct"},"6:6200:7729":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"13:120:45154":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"20:866:1617":{"crate_id":20,"path":["libc","unix","linux_like","AF_INET6"],"kind":"constant"},"2:49393:10327":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"6:4317:6697":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"20:609:3745":{"crate_id":20,"path":["libc","unix","tms"],"kind":"struct"},"1:10944:3260":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"2:46655:13061":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"2:6678:10079":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"17:13154:12114":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"17:11277:11722":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"6:591:3742":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"17:9404:11661":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"5:3314:9754":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"5:4276:9416":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"16:547:10858":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"1:7511:9794":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"2:48958:9401":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"1:10566:3263":{"crate_id":1,"path":["std","error","Chain"],"kind":"struct"},"17:12221:11849":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"2:47932:9310":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"20:518:2783":{"crate_id":20,"path":["libc","unix","timeval"],"kind":"struct"},"12:354:13025":{"crate_id":12,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"16:7236:11023":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"2:3177:195":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"6:6185:7728":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"16:2945:11145":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"17:9971:60685":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"17:13842:12317":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"2:3183:3313":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"2:46437:10075":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"17:14000:12350":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"2:48938:9409":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"20:662:3773":{"crate_id":20,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"1:13739:9800":{"crate_id":1,"path":["std","sys","unix","process","process_common","Stdio"],"kind":"enum"},"2:49436:10331":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"6:1527:2651":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"1:2183:9755":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"1:3113:2562":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"1:2456:13565":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"15:248:10787":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"2:13543:145":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"1:10456:9851":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"1:6605:8903":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"5:8206:10562":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"1:12041:9922":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"20:1728:1808":{"crate_id":20,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"20:6092:7723":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"2:50973:10122":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"20:4333:6699":{"crate_id":20,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"6:1563:1807":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"6:4073:6675":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"2:49863:116":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"2:7541:10082":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"6:4419:6707":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"17:11328:11955":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"2:49323:10324":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"6:88:3356":{"crate_id":6,"path":["libc","unix","DIR"],"kind":"enum"},"6:4410:6706":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"17:12741:11950":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"5:6612:10548":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"17:12442:11903":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"17:13386:12172":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"17:13506:12203":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"17:12010:11816":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"17:10353:11276":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"1:8632:157":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"6:605:3743":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"2:46297:10059":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"5:3021:12721":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"5:3278:91":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"1:11462:9415":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"5:1824:11414":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"17:10516:11217":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"14:11:13539":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"20:6640:2071":{"crate_id":20,"path":["libc","unix","linux_like","linux","arch","generic","SOL_SOCKET"],"kind":"constant"},"16:3320:11184":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"2:49728:13123":{"crate_id":2,"path":["core","str","lossy","Utf8LossyChunk"],"kind":"struct"},"1:9085:9813":{"crate_id":1,"path":["std","lazy","SyncOnceCell"],"kind":"struct"},"1:13701:9798":{"crate_id":1,"path":["std","sys","unix","process","process_common","Command"],"kind":"struct"},"18:152:53129":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"5:3809:11414":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"1:1633:9698":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"6:3957:6661":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"4:0:3036":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"2:46018:10463":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"2:48997:9400":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"17:11767:11768":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"1:11965:9729":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"2:9622:75":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"1:15747:3083":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"6:6636:8094":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"2:3331:3215":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"20:1049:2457":{"crate_id":20,"path":["libc","unix","linux_like","IPV6_ADD_MEMBERSHIP"],"kind":"constant"},"2:3429:127":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"9:469:44914":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"2:46278:10077":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"2:48702:10476":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"2:24465:9805":{"crate_id":2,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"2:53137:12895":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"20:4503:6717":{"crate_id":20,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"1:3108:123":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"9:603:44983":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"14:0:3042":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"20:5220:7307":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"2:49855:10337":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"5:8044:9231":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"2:51015:12833":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"1:10672:9649":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"2:51558:12841":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"17:10558:13501":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"17:10543:11710":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"9:686:10634":{"crate_id":9,"path":["miniz_oxide","deflate","core","SymFreq"],"kind":"struct"},"5:2181:11416":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"6:5359:7314":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"2:10115:174":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"2:4627:9982":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"2:14:1580":{"crate_id":2,"path":["core","write"],"kind":"macro"},"17:10407:11270":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"16:6252:10999":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"2:3260:3199":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"1:15740:3076":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"16:6014:10993":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"1:1041:9665":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"1:14535:13571":{"crate_id":1,"path":["std","sys","unix","os","JoinPathsError"],"kind":"struct"},"1:5281:1970":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"16:5766:10861":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"2:3187:102":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"1:7859:11444":{"crate_id":1,"path":["std","sync","mpsc","mpsc_queue","Queue"],"kind":"struct"},"2:2078:1275":{"crate_id":2,"path":["core","mem","size_of"],"kind":"function"},"2:46226:11433":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"1:14018:3283":{"crate_id":1,"path":["std","sys","unix","stdio","Stdin"],"kind":"struct"},"1:5876:9951":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"17:10950:13518":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"20:1050:2463":{"crate_id":20,"path":["libc","unix","linux_like","IPV6_DROP_MEMBERSHIP"],"kind":"constant"},"17:299:13477":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"16:3195:11127":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"2:3481:2216":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"2:49223:9425":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"6:4459:6712":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"1:2433:13564":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"1:8016:9852":{"crate_id":1,"path":["std","sync","mpsc","shared","Packet"],"kind":"struct"},"2:3280:3208":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"17:13205:12130":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"6:6644:8095":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"2:48279:9366":{"crate_id":2,"path":["core","fmt","FlagV1"],"kind":"enum"},"5:3307:9415":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"2:46041:10331":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"18:866:11316":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"17:1236:13480":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"20:4486:6715":{"crate_id":20,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"16:4230:12373":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"17:12610:11928":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"16:5346:10948":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"5:5259:185":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"20:4411:6707":{"crate_id":20,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"16:2754:10873":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"17:10279:11187":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"16:2866:11121":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"16:7185:11018":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"17:13465:12194":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"16:7042:11169":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"2:9785:10298":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"2:51378:10112":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"2:49843:10344":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"2:50804:10121":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"5:6628:10558":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"2:46049:10458":{"crate_id":2,"path":["core","char","EscapeUnicodeState"],"kind":"enum"},"6:5210:2772":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"2:24499:10376":{"crate_id":2,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"2:10107:9304":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"1:1302:138":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"2:4916:9376":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"17:13574:12224":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"20:4470:6714":{"crate_id":20,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"16:3488:11133":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"12:1118:9698":{"crate_id":12,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"2:10362:9996":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"1:1152:13557":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"17:11604:11742":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"2:32092:58116":{"crate_id":2,"path":["core","mem","valid_align","ValidAlignEnum32"],"kind":"enum"},"2:46458:10071":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"6:4095:6677":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"12:2032:9754":{"crate_id":12,"path":["hashbrown","set","Difference"],"kind":"struct"},"20:4493:6716":{"crate_id":20,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"2:12840:10005":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"2:49827:10336":{"crate_id":2,"path":["core","str","LinesAnyMap"],"kind":"struct"},"5:1625:9686":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"2:48860:10311":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"2:12496:10316":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"5:4590:11417":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"1:10686:124":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"20:4137:6683":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"2:10113:9311":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"2:49411:10329":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"2:23746:13037":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"18:754:60693":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"16:5941:174":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"1:11817:9801":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"6:5228:7307":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"20:4233:6690":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"5:8371:10507":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"12:1855:140":{"crate_id":12,"path":["hashbrown","set","HashSet"],"kind":"struct"},"5:2311:10598":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"17:12118:11836":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"2:2188:9528":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"1:5697:9646":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"2:3272:3201":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"16:7250:11024":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"1:11859:55531":{"crate_id":1,"path":["std","sync","mpsc","shared","StartResult"],"kind":"enum"},"5:5037:639":{"crate_id":5,"path":["alloc","fmt"],"kind":"module"},"2:4844:10259":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"16:6072:10968":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"5:8089:9231":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"6:578:2697":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"2:31993:2570":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"1:11910:9415":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"16:5522:10847":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"6:5522:7353":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"2:46396:10067":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"1:15057:9656":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"17:11030:122":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"17:10160:11669":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"18:811:11311":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"1:4621:3262":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"17:13540:12216":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"2:51478:12839":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"2:47718:81":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"2:50687:12830":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"2:23841:44057":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"2:3218:3315":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"20:577:2735":{"crate_id":20,"path":["libc","unix","pollfd"],"kind":"struct"},"2:46256:3263":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"2:3090:211":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"1:11002:1569":{"crate_id":1,"path":["std","net","addr","SocketAddr"],"kind":"enum"},"2:47288:190":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"6:4052:6672":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"2:52959:10132":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"2:3155:110":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"2:12834:10004":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"2:49119:3267":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"17:13402:12176":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"20:512:3737":{"crate_id":20,"path":["libc","unix","utimbuf"],"kind":"struct"},"17:11458:11731":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"6:6812:8235":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"1:8914:13569":{"crate_id":1,"path":["std","sync","rwlock","fmt","LockedPlaceholder"],"kind":"struct"},"2:11220:9424":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"1:11273:3310":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"2:47280:173":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"17:10001:46888":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"16:7378:10954":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"16:4477:12379":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"2:22628:9680":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"6:4331:2726":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"2:3074:74":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"20:598:3743":{"crate_id":20,"path":["libc","unix","sigval"],"kind":"struct"},"6:5420:7321":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"2:5649:10073":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"2:3288:3205":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"16:7226:11022":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"2:52786:10129":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"2:49028:9418":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"18:0:3046":{"crate_id":18,"path":["memchr"],"kind":"module"},"20:4356:6702":{"crate_id":20,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"20:6850:6842":{"crate_id":20,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"2:49241:9423":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"17:9296:11658":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"6:4517:6718":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"2:2211:9527":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"1:7685:9804":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"12:937:9693":{"crate_id":12,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"20:5202:2772":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"7:38:44804":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"1:5555:9659":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"16:7786:10960":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"12:2315:60672":{"crate_id":12,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"17:9440:11662":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"17:10611:13507":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"16:5360:10836":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"2:11099:9421":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"1:14853:9809":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"2:8185:131":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"18:801:11310":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"2:11137:9422":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"2:22419:58739":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"16:4823:12389":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"5:8252:10564":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"12:1651:10777":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"17:11932:11799":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"20:5451:7323":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"2:49269:10321":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"6:4325:6698":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"1:8754:9930":{"crate_id":1,"path":["std","sync","once","WaiterQueue"],"kind":"struct"},"20:625:3747":{"crate_id":20,"path":["libc","unix","protoent"],"kind":"struct"},"17:13986:12347":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"2:53175:12897":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"1:4344:3285":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"17:12095:11830":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"16:5707:10854":{"crate_id":16,"path":["gimli","read","cfi","UninitializedUnwindContext"],"kind":"struct"},"2:47939:9311":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"17:10912:13512":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"12:2045:9756":{"crate_id":12,"path":["hashbrown","set","Union"],"kind":"struct"},"1:5649:9640":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"6:1554:1806":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"5:3466:9688":{"crate_id":5,"path":["alloc","collections","btree","set","DrainFilter"],"kind":"struct"},"20:4156:6684":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"2:23879:44058":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"2:46417:10069":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"6:3905:6657":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"20:1692:4574":{"crate_id":20,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"2:7892:3290":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"1:8294:10587":{"crate_id":1,"path":["std","sync","mpsc","sync","Node"],"kind":"struct"},"2:45535:181":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"6:4023:6668":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"17:11628:11746":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"5:1472:9700":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"17:10200:13494":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"17:12699:11946":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"17:9162:11262":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"2:50756:10141":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"20:6177:7728":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"2:8384:152":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"5:3019:9281":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"19:117:11570":{"crate_id":19,"path":["panic_unwind","dwarf","eh","EHContext"],"kind":"struct"},"16:6620:11152":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"1:1190:13960":{"crate_id":1,"path":["std","backtrace","LazilyResolvedCapture"],"kind":"struct"},"13:0:3035":{"crate_id":13,"path":["std_detect"],"kind":"module"},"2:23636:10368":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"6:6887:6846":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"12:2309:12633":{"crate_id":12,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"16:5672:10853":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"12:377:10771":{"crate_id":12,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"1:10808:2037":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"2:50910:12832":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"5:5779:9392":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"18:644:11322":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"2:55841:220":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"2:46427:10070":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"1:11318:9761":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"1:7545:9796":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"1:4267:9888":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"0:354:1597":{"crate_id":0,"path":["socket2","SockRef"],"kind":"struct"},"20:935:2146":{"crate_id":20,"path":["libc","unix","linux_like","MSG_PEEK"],"kind":"constant"},"2:4770:9375":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"1:14795:12939":{"crate_id":1,"path":["std","sys","unix","time","Timespec"],"kind":"struct"},"12:1200:10766":{"crate_id":12,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"20:5339:7313":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"2:24261:2638":{"crate_id":2,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"1:11091:12920":{"crate_id":1,"path":["std","net","ip","fmt","Span"],"kind":"struct"},"6:4046:6671":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"17:12480:11908":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"16:6176:10996":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"17:10814:11250":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"5:8221:10403":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"2:49499:10003":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"1:14908:9739":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"20:938:1665":{"crate_id":20,"path":["libc","unix","linux_like","MSG_TRUNC"],"kind":"constant"},"20:6659:2292":{"crate_id":20,"path":["libc","unix","linux_like","linux","arch","generic","SO_RCVTIMEO"],"kind":"constant"},"17:12287:11858":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"20:5399:7319":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"11:54:10754":{"crate_id":11,"path":["adler","Adler32"],"kind":"struct"},"2:31853:10426":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"1:10728:3277":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"20:1622:4569":{"crate_id":20,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"20:4451:6712":{"crate_id":20,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"2:46178:10404":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"2:55854:220":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"2:3205:3314":{"crate_id":2,"path":["core","marker","Freeze"],"kind":"trait"},"6:4013:6667":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"2:47925:9304":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"2:49831:10339":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"6:5400:7318":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"1:5990:2642":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"16:7174:11017":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"17:10827:11251":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"6:4439:6710":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"2:45620:182":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"1:11134:3188":{"crate_id":1,"path":["std","net","parser","AddrParseError"],"kind":"struct"},"17:8954:11205":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"1:2159:9231":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"17:12168:11678":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"17:13163:12118":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"2:48182:128":{"crate_id":2,"path":["core","fmt","rt","v1","FormatSpec"],"kind":"struct"},"2:12533:10319":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"16:4417:12377":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"16:6691:11010":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"2:47634:79":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"17:10149:13486":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"17:3743:11247":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"17:13942:12340":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"12:925:9689":{"crate_id":12,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"6:5528:6569":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"2:47760:88":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"16:7856:11029":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"1:1459:9686":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"6:616:3745":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"17:11555:11739":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"2:3716:3232":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"1:8358:187":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"7:85:44811":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"20:5247:7288":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"9:692:10636":{"crate_id":9,"path":["miniz_oxide","deflate","core","CompressionStrategy"],"kind":"enum"},"20:4185:6686":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"1:10523:9701":{"crate_id":1,"path":["std","collections","hash","map","RandomState"],"kind":"struct"},"17:9961:13488":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"1:11479:9777":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"2:24937:10233":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"6:4425:6708":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"2:47592:85":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"6:4120:6680":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"20:139:2456":{"crate_id":20,"path":["libc","unix","IPPROTO_IPV6"],"kind":"constant"},"12:396:10770":{"crate_id":12,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"2:49705:10018":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"6:5987:7719":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"2:3266:3202":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"6:3966:6662":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"16:6152:10949":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"1:1507:9693":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"2:21:651":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"6:4066:6674":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"18:896:11318":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"20:4058:6674":{"crate_id":20,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"6:5241:7287":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"1:5635:9642":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"17:13062:12078":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"2:24431:10375":{"crate_id":2,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"18:820:11312":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"5:8105:9231":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"1:2155:9415":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"5:3864:10588":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"16:5488:10845":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"2:22398:58744":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"2:11822:11439":{"crate_id":2,"path":["core","slice","sort","CopyOnDrop"],"kind":"struct"},"16:7392:10955":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"1:11196:1569":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"16:7073:11014":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"2:3182:3177":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"16:7333:10969":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"1:11918:9724":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"2:45551:179":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"6:4183:6685":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"17:11482:11732":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"1:1132:9673":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"17:13272:12147":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"2:47918:9303":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"2:46339:10063":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"17:11678:11753":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"6:6155:7726":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"1:10665:9648":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"1:5860:9948":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"5:421:9083":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"16:5632:10852":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"6:5191:7304":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"1:1472:9687":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"2:46377:10080":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"16:4995:12394":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"1:11870:55713":{"crate_id":1,"path":["std","sync","mpsc","sync","Failure"],"kind":"enum"},"17:12537:11916":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"2:23729:10214":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"16:6021:11119":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"16:6636:10966":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"1:8173:9852":{"crate_id":1,"path":["std","sync","mpsc","stream","Packet"],"kind":"struct"},"20:3949:6661":{"crate_id":20,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"14:194:45182":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"2:22400:58742":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"20:530:3739":{"crate_id":20,"path":["libc","unix","rlimit"],"kind":"struct"},"2:10312:137":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"1:14958:9748":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"17:10448:11213":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"2:10716:198":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"2:10048:1933":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"1:15734:3070":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"1:15722:3061":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"2:3335:3216":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"2:11178:9425":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"2:38546:3316":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"5:8050:10532":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"20:5151:7301":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"17:9729:60688":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"1:12036:9826":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"1:11111:55533":{"crate_id":1,"path":["std","net","parser","AddrKind"],"kind":"enum"},"2:12607:9427":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"5:5478:10548":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"0:188:1596":{"crate_id":0,"path":["socket2","Socket"],"kind":"struct"},"2:49694:10017":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"1:4383:3281":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"2:23800:10210":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"1:7573:9798":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"2:37302:163":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"2:10944:3267":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"17:10489:11216":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"2:46639:13060":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"6:4127:6681":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"2:3250:3203":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"20:4119:6681":{"crate_id":20,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"2:7965:9817":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"20:4509:6718":{"crate_id":20,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"7:0:1448":{"crate_id":7,"path":["unwind"],"kind":"module"},"2:51299:10123":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"1:3276:1804":{"crate_id":1,"path":["std","io"],"kind":"module"},"16:3549:12368":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"1:15726:3064":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"2:47424:87":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"20:592:2252":{"crate_id":20,"path":["libc","unix","linger"],"kind":"struct"},"12:949:9694":{"crate_id":12,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"20:6902:6849":{"crate_id":20,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"1:11409:9773":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"20:5189:7305":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"20:504:3736":{"crate_id":20,"path":["libc","unix","group"],"kind":"struct"},"9:809:9771":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"1:4512:3250":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"5:8097:179":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"1:6593:9640":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"20:5304:7312":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"2:4574:3250":{"crate_id":2,"path":["core","array","try_collect_into_array","Guard"],"kind":"struct"},"2:49089:10312":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"1:5766:9943":{"crate_id":1,"path":["std","os","unix","net","addr","AsciiEscaped"],"kind":"struct"},"2:2108:558":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"18:782:11574":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"16:3064:11182":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"17:12568:11921":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"20:150:3416":{"crate_id":20,"path":["libc","unix","FILE"],"kind":"enum"},"2:46348:10064":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"17:13685:12277":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"5:1184:60223":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"2:49839:10340":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"12:181:10772":{"crate_id":12,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"20:1900:4716":{"crate_id":20,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"17:10864:11706":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"2:48455:9710":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"1:4305:3283":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"16:3800:12371":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"2:23916:10431":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"5:4413:9415":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"17:12327:11865":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"20:1048:2487":{"crate_id":20,"path":["libc","unix","linux_like","IPV6_MULTICAST_LOOP"],"kind":"constant"},"1:820:11462":{"crate_id":1,"path":["std","thread","local","os","Key"],"kind":"struct"},"2:52912:10114":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"5:1599:9231":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"2:45987:10244":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"17:10317:11193":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"17:12073:11829":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"5:8059:9687":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"2:3904:68":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"2:3284:3206":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"16:4535:12381":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"2:49885:3239":{"crate_id":2,"path":["core","time","FromFloatSecsError"],"kind":"struct"},"17:9659:60683":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"2:24397:10374":{"crate_id":2,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"17:12632:11939":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"2:7643:10055":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"1:2395:13562":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"2:46143:96":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"1:11877:12935":{"crate_id":1,"path":["std","sync","mpsc","cache_aligned","CacheAligned"],"kind":"struct"},"2:45699:3225":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"17:11186:12982":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"2:13891:186":{"crate_id":2,"path":["core","task","ready","Ready"],"kind":"struct"},"1:14327:13080":{"crate_id":1,"path":["std","sys","unix","fs","StatxExtraFields"],"kind":"struct"},"1:12537:11467":{"crate_id":1,"path":["std","sys","unix","fs","Dir"],"kind":"struct"},"16:3264:11130":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"20:571:2697":{"crate_id":20,"path":["libc","unix","iovec"],"kind":"struct"},"2:53213:12899":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"2:5406:10164":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"1:9144:9814":{"crate_id":1,"path":["std","lazy","SyncLazy"],"kind":"struct"},"5:1644:9690":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"20:1564:4563":{"crate_id":20,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"2:45734:9989":{"crate_id":2,"path":["core","any","tags","MaybeSizedValue"],"kind":"struct"},"1:15741:3077":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"2:45727:9988":{"crate_id":2,"path":["core","any","tags","Value"],"kind":"struct"},"17:9332:11195":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"20:1709:4576":{"crate_id":20,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"6:670:3773":{"crate_id":6,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"17:10117:11294":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"17:10584:11253":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"20:4093:6678":{"crate_id":20,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"16:7119:10881":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"17:12982:12018":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"6:4523:6719":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"16:2843:11120":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"2:48502:13066":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"5:1546:90":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"6:4449:6711":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"1:3235:9865":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"17:12917:11967":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"2:3086:212":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"5:3742:9416":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"17:11304:46844":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"6:1717:4576":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"5:8270:12722":{"crate_id":5,"path":["alloc","slice","merge_sort","Run"],"kind":"struct"},"9:157:10652":{"crate_id":9,"path":["miniz_oxide","deflate","core","CompressorOxide"],"kind":"struct"},"1:7228:171":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"12:968:9695":{"crate_id":12,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"17:13627:12235":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"1:8523:9910":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"6:4478:6714":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"18:620:12974":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"2:2318:9530":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"2:53085:12891":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"17:13520:12210":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"2:48920:9407":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"1:14952:9747":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"9:1075:10703":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"6:4164:6684":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"20:1715:4577":{"crate_id":20,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"2:32034:3178":{"crate_id":2,"path":["core","mem","valid_align","ValidAlign"],"kind":"struct"},"2:27748:10179":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"20:3982:6664":{"crate_id":20,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"18:729:60695":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"2:8662:9571":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"16:3392:11137":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"2:12815:10001":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"1:11228:9908":{"crate_id":1,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"5:4485:10576":{"crate_id":5,"path":["alloc","collections","vec_deque","pair_slices","PairSlices"],"kind":"struct"},"17:10179:11671":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"17:11947:11803":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"5:5775:9391":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"18:857:11315":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"2:45974:10243":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"1:4539:1932":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"20:5970:7718":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"20:4387:3022":{"crate_id":20,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"20:4285:6694":{"crate_id":20,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"1:1482:9688":{"crate_id":1,"path":["std","collections","hash","map","DrainFilter"],"kind":"struct"},"20:981:2419":{"crate_id":20,"path":["libc","unix","linux_like","IP_MULTICAST_TTL"],"kind":"constant"},"6:569:3741":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"16:6605:10964":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"17:13497:12202":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"1:11855:13077":{"crate_id":1,"path":["std","sync","mpsc","blocking","SignalToken"],"kind":"struct"},"17:10041:13490":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"1:14307:9635":{"crate_id":1,"path":["std","sys","unix","fd","FileDesc"],"kind":"struct"},"17:13598:12228":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"1:8803:9919":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"5:2243:10599":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"6:4371:6703":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"16:6208:10997":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"20:1047:2468":{"crate_id":20,"path":["libc","unix","linux_like","IPV6_MULTICAST_HOPS"],"kind":"constant"},"16:7420:10971":{"crate_id":16,"path":["gimli","read","unit","UnitOffset"],"kind":"struct"},"0:811:1611":{"crate_id":0,"path":["socket2","Domain"],"kind":"struct"},"1:14815:2645":{"crate_id":1,"path":["std","sys","unix","time","inner","Instant"],"kind":"struct"},"17:681:11725":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"1:8574:9913":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"1:1415:9415":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"12:877:9688":{"crate_id":12,"path":["hashbrown","map","DrainFilter"],"kind":"struct"},"6:4203:6687":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"16:7884:10957":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"17:11738:11759":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"6:624:3746":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"2:4682:10103":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"17:12234:11851":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"17:9245:11194":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"20:1555:1807":{"crate_id":20,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"5:912:10530":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"16:5580:10850":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"16:6391:11002":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"1:10660:9861":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"17:9759:13484":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"1:13717:13905":{"crate_id":1,"path":["std","sys","unix","process","process_common","Argv"],"kind":"struct"},"12:1159:10764":{"crate_id":12,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"20:75:2646":{"crate_id":20,"path":["libc","unix","ssize_t"],"kind":"typedef"},"6:3997:6665":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"1:2458:13566":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"5:6892:10485":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"12:2018:9688":{"crate_id":12,"path":["hashbrown","set","DrainFilter"],"kind":"struct"},"5:8238:10563":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"17:11231:11263":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"2:4835:9377":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"6:5563:7355":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"2:49383:10326":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"16:6126:10994":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"1:3440:3273":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"17:11378:11197":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"1:15117:2567":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"17:10052:13491":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"20:4292:6695":{"crate_id":20,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"20:4309:6697":{"crate_id":20,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"2:45786:10252":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"6:5255:7288":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"1:11247:9632":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"2:3396:111":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"1:4605:55676":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"1:7628:9800":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"20:6652:2253":{"crate_id":20,"path":["libc","unix","linux_like","linux","arch","generic","SO_LINGER"],"kind":"constant"},"17:12725:11948":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"1:15736:3072":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"20:584:3742":{"crate_id":20,"path":["libc","unix","winsize"],"kind":"struct"},"17:11779:11771":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"1:6695:9633":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"16:4762:12387":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"1:15729:3067":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"1:4596:1933":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"20:5392:7318":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"2:47466:77":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"2:22822:10110":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"1:1488:9689":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"16:7843:11028":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"1:696:9829":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"16:7761:11027":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"2:50019:175":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"17:12685:11943":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"2:46468:10072":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"20:136:1651":{"crate_id":20,"path":["libc","unix","IPPROTO_TCP"],"kind":"constant"},"6:610:3744":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"20:1055:2503":{"crate_id":20,"path":["libc","unix","linux_like","IPV6_V6ONLY"],"kind":"constant"},"17:9649:13482":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"6:6239:7732":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"1:15725:3063":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"17:10844:11215":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"17:13780:12296":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"17:12582:11923":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"20:3873:6655":{"crate_id":20,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"5:3852:3277":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"6:6852:6841":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"1:11159:1936":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"16:7342:10983":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"6:5371:7315":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"2:2004:3250":{"crate_id":2,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"5:3025:13896":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"1:7182:13568":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"1:6107:2643":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"17:13978:12344":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"2:4:957":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"2:11722:9414":{"crate_id":2,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"1:2397:13563":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"1:2565:122":{"crate_id":1,"path":["std","error","Error"],"kind":"trait"},"2:8762:9816":{"crate_id":2,"path":["core","lazy","Lazy"],"kind":"struct"},"2:50868:10142":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"2:2690:559":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"14:250:12586":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"2:3679:3231":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"2:13840:10352":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"17:11358:11198":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"20:6885:6847":{"crate_id":20,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"17:10635:11672":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"2:48243:71":{"crate_id":2,"path":["core","fmt","ArgumentV1"],"kind":"struct"},"20:1546:1806":{"crate_id":20,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"15:230:10786":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"2:50011:12829":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"5:6351:207":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"17:13760:12290":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"2:48471:9997":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"6:1760:4579":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"17:12521:11914":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"1:14021:3285":{"crate_id":1,"path":["std","sys","unix","stdio","Stdout"],"kind":"struct"},"2:50108:9670":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"16:6569:11154":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"16:3018:11124":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"0:824:1624":{"crate_id":0,"path":["socket2","Type"],"kind":"struct"},"2:51035:10111":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"15:269:10791":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"17:294:13476":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"20:6077:7721":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"16:7406:10953":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"2:1886:1566":{"crate_id":2,"path":["core","mem"],"kind":"module"},"2:45643:184":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"6:5428:7322":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"1:11932:9727":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"16:4704:12385":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"2:48221:122":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"2:51180:10147":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"2:13619:172":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"1:10451:9838":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"1:10923:3292":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"2:51252:10135":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"5:8035:9398":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"6:4431:6709":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"5:8188:97":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"6:1572:4563":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"2:46102:10461":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"1:15735:3071":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"20:6147:7726":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"16:3091:11183":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"17:10435:13497":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"1:5693:9645":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"2:3644:3226":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"16:5273:10878":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"1:1493:9690":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"1:1619:9697":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"2:51789:10148":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"2:24533:10377":{"crate_id":2,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"12:2013:9687":{"crate_id":12,"path":["hashbrown","set","Drain"],"kind":"struct"},"2:47228:9064":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"2:3276:3204":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"17:13637:12240":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"2:51526:12840":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"1:14939:9741":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"1:10517:16454":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"1:15079:1970":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"1:9333:57322":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"5:6704:3250":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"2:13578:59100":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"17:12671:11942":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"1:2162:9687":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"1:14322:13078":{"crate_id":1,"path":["std","sys","unix","fs","FileAttr"],"kind":"struct"},"6:6005:3524":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"17:13772:12293":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"17:11572:11740":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"6:1729:2707":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"2:22770:9634":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","sealed","Sealed"],"kind":"trait"},"1:2855:164":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"20:81:3356":{"crate_id":20,"path":["libc","unix","DIR"],"kind":"enum"},"17:13933:12338":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"12:784:9690":{"crate_id":12,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"6:5159:7301":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"1:8077:11444":{"crate_id":1,"path":["std","sync","mpsc","spsc_queue","Queue"],"kind":"struct"},"2:53065:12889":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"17:10377:11274":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"20:6645:2227":{"crate_id":20,"path":["libc","unix","linux_like","linux","arch","generic","SO_BROADCAST"],"kind":"constant"},"6:4341:6699":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"17:11640:11749":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"6:1540:4562":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"5:1675:10594":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"17:13582:12225":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"2:32192:58113":{"crate_id":2,"path":["core","mem","valid_align","ValidAlignEnum64"],"kind":"enum"},"1:5627:9641":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"16:6110:10988":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"17:13348:12164":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"2:50708:12831":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"2:12845:10000":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"2:50942:10134":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"1:15742:3078":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"1:11251:3524":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"12:2039:9755":{"crate_id":12,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"17:10926:13516":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"20:5351:7314":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"2:11192:9423":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"12:1688:10779":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"2:50078:153":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"17:12182:11845":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"1:10655:9662":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"2:49568:10013":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"2:7455:9238":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"16:7279:11170":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"1:14099:9294":{"crate_id":1,"path":["std","sys","unix","thread","Thread"],"kind":"struct"},"2:11689:9413":{"crate_id":2,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"1:14776:3235":{"crate_id":1,"path":["std","sys","unix","time","SystemTime"],"kind":"struct"},"1:4273:9890":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"17:13547:12217":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"1:13812:9799":{"crate_id":1,"path":["std","sys","unix","process","process_common","CommandArgs"],"kind":"struct"},"20:3943:6660":{"crate_id":20,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"16:6101:10945":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"5:3353:10539":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"2:3409:1570":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"1:11926:9231":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"17:10975:13520":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"20:4175:6685":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"2:49187:10318":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"3:300:190":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"16:7158:11016":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"9:722:10637":{"crate_id":9,"path":["miniz_oxide","deflate","core","TDEFLFlush"],"kind":"enum"},"1:11208:9950":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"2:3077:73":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"9:900:12688":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"2:12754:9759":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"2:4961:10265":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"20:1682:4573":{"crate_id":20,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"16:6238:10952":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"16:2889:11140":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"0:788:2218":{"crate_id":0,"path":["socket2","InterfaceIndexOrAddress","Address"],"kind":"variant"},"5:7571:10512":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"1:9635:11461":{"crate_id":1,"path":["std","sys_common","rwlock","StaticRwLockWriteGuard"],"kind":"struct"},"12:463:60671":{"crate_id":12,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"20:6641:2303":{"crate_id":20,"path":["libc","unix","linux_like","linux","arch","generic","SO_REUSEADDR"],"kind":"constant"},"6:4262:6691":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"6:6858:6842":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"12:1235:10767":{"crate_id":12,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"5:8276:200":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"17:10599:13506":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"17:12040:11819":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"18:774:11574":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"20:6804:8235":{"crate_id":20,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"2:50001:186":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"1:1497:9691":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"20:5284:7311":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"2:38483:9669":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"6:1908:4716":{"crate_id":6,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"2:45597:183":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"2:3011:9634":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"14:231:10483":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"16:3145:11135":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"1:8806:9822":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"16:5433:10840":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"6:4255:3307":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"1:14763:9802":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"17:13564:12221":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"2:8189:146":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"1:1642:9699":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"2:46088:10330":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"12:976:9696":{"crate_id":12,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"2:23471:10099":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"2:3083:130":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"6:1700:4574":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"5:3020:59230":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"2:45741:9376":{"crate_id":2,"path":["core","any","tags","Ref"],"kind":"struct"},"17:9186:11203":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"16:6166:10995":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"17:12467:11906":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"2:46148:10402":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"17:10028:13489":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"17:10938:13517":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"2:51820:10151":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"17:13098:12108":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"9:1020:10702":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"1:4270:9889":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"16:3522:11586":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"2:49137:9421":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"1:13365:13904":{"crate_id":1,"path":["std","sys","unix","os","Env"],"kind":"struct"},"6:6870:6844":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"5:3340:9755":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"2:23815:12731":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"17:10071:11298":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"17:9528:3265":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"1:11804:166":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"17:13172:12119":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"17:11993:11813":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"6:161:3417":{"crate_id":6,"path":["libc","unix","fpos_t"],"kind":"enum"},"6:5274:7309":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"17:10477:11211":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"20:4393:6705":{"crate_id":20,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"18:837:10004":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"2:24567:10378":{"crate_id":2,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"16:7549:10958":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"5:8299:10481":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"1:7559:9797":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"20:4195:6687":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"1:7151:13568":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"2:3339:3217":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"1:3563:3269":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"20:5261:7308":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"1:3953:190":{"crate_id":1,"path":["std","io","error","Result"],"kind":"typedef"},"1:14392:57253":{"crate_id":1,"path":["std","sys","unix","kernel_copy","SpliceMode"],"kind":"enum"},"17:11588:11741":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"2:48984:9399":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"6:6100:7723":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"20:3970:6663":{"crate_id":20,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"2:10322:141":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"1:10230:11725":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"2:2875:169":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"16:7146:11015":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"2:3463:3229":{"crate_id":2,"path":["core","ops","generator","Generator"],"kind":"trait"},"2:5213:10455":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"2:48948:9410":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"2:6430:58982":{"crate_id":2,"path":["core","iter","adapters","flatten","TrustedConstSize"],"kind":"trait"},"12:556:138":{"crate_id":12,"path":["hashbrown","map","HashMap"],"kind":"struct"},"2:47271:9204":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"1:10430:9830":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"16:2733:10874":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"12:774:9231":{"crate_id":12,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"2:12825:10002":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"20:5420:7322":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"2:48295:72":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"17:13912:12332":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"6:1708:4575":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"17:9600:60680":{"crate_id":17,"path":["object","read","any","FileInternal"],"kind":"enum"},"2:46307:10060":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"18:829:11313":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"1:6603:8901":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"2:55802:220":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"1:11029:1803":{"crate_id":1,"path":["std","net","addr","SocketAddrV6"],"kind":"struct"},"20:1097:2554":{"crate_id":20,"path":["libc","unix","linux_like","TCP_NODELAY"],"kind":"constant"},"20:4298:6696":{"crate_id":20,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"17:11809:11783":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"5:8075:60170":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"2:51149:10143":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"1:8668:13569":{"crate_id":1,"path":["std","sync","mutex","fmt","LockedPlaceholder"],"kind":"struct"},"16:5960:10869":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"2:46357:10078":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"1:8879:9060":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"1:6698:9631":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"12:0:3041":{"crate_id":12,"path":["hashbrown"],"kind":"module"},"17:9592:123":{"crate_id":17,"path":["object","read","any","File"],"kind":"struct"},"16:5815:10863":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"16:4890:12391":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"17:9133:46840":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"18:739:13474":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"16:3604:11590":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"20:5540:7354":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"2:46287:10058":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"6:0:775":{"crate_id":6,"path":["libc"],"kind":"module"},"17:9799:13485":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"1:4173:3293":{"crate_id":1,"path":["std","io","readbuf","ReadBuf"],"kind":"struct"},"6:6614:3693":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"12:866:9687":{"crate_id":12,"path":["hashbrown","map","Drain"],"kind":"struct"},"16:6744:11159":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"18:885:11317":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"12:892:10756":{"crate_id":12,"path":["hashbrown","map","ConsumeAllOnDrop"],"kind":"struct"},"1:7911:9852":{"crate_id":1,"path":["std","sync","mpsc","oneshot","Packet"],"kind":"struct"},"2:5385:2647":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"2:45666:3222":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"9:996:10701":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"2:23909:13041":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"1:8272:9771":{"crate_id":1,"path":["std","sync","mpsc","sync","State"],"kind":"struct"},"6:1533:2809":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"20:6206:7730":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"5:8171:9708":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"1:11148:3190":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"6:1522:2649":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"1:15727:3065":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"16:5314:11656":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"2:3325:3214":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"20:0:775":{"crate_id":20,"path":["libc"],"kind":"module"},"6:1665:4571":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"2:48176:70":{"crate_id":2,"path":["core","fmt","rt","v1","Argument"],"kind":"struct"},"2:9627:82":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"20:6192:7729":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"6:4060:6673":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"0:863:1678":{"crate_id":0,"path":["socket2","TcpKeepalive"],"kind":"struct"},"2:49715:10019":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"6:6935:2648":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"16:4734:12386":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"2:47161:161":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"6:5312:7312":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"17:10140:11215":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"17:2314:11275":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"20:4032:6670":{"crate_id":20,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"16:7303:11025":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"5:1427:9697":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"20:4087:6677":{"crate_id":20,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"20:982:2409":{"crate_id":20,"path":["libc","unix","linux_like","IP_MULTICAST_LOOP"],"kind":"constant"},"6:5459:7323":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"6:6923:8261":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"20:3989:6665":{"crate_id":20,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"16:7823:10961":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"16:7477:10972":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"1:11452:9774":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"17:13733:12278":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"20:1588:4565":{"crate_id":20,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"20:5159:7302":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"5:781:104":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"6:5347:7313":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"1:1530:9696":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"2:9118:9068":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"2:55696:10095":{"crate_id":2,"path":["core","core_simd","swizzle","Which"],"kind":"enum"},"2:49427:9630":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"20:3937:6659":{"crate_id":20,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"20:655:1805":{"crate_id":20,"path":["libc","unix","linux_like","sa_family_t"],"kind":"typedef"},"2:13654:13553":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"16:5407:10838":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"17:10988:13521":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"20:4247:3307":{"crate_id":20,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"1:2362:580":{"crate_id":1,"path":["std","env"],"kind":"module"},"1:7013:9055":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"12:853:9686":{"crate_id":12,"path":["hashbrown","map","Values"],"kind":"struct"},"2:55828:220":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"5:1634:9689":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"2:12891:10008":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"17:1311:11299":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"1:12075:3235":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"2:10119:9309":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"2:52246:10137":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"16:4386:12376":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"20:5514:7353":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"16:2912:11122":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"1:15216:10795":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"6:4101:6678":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"1:1651:9700":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"2:55789:220":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"17:11406:11727":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"2:48492:9771":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"1:0:1301":{"crate_id":1,"path":["std"],"kind":"module"},"1:15138:2568":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"17:11118:46843":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"17:13924:12334":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"1:7337:170":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"2:3426:126":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"1:9630:11460":{"crate_id":1,"path":["std","sys_common","rwlock","StaticRwLockReadGuard"],"kind":"struct"},"17:9005:46836":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"20:1864:1809":{"crate_id":20,"path":["libc","unix","linux_like","linux","socklen_t"],"kind":"typedef"},"1:13564:9807":{"crate_id":1,"path":["std","sys","unix","pipe","AnonPipe"],"kind":"struct"},"20:562:3741":{"crate_id":20,"path":["libc","unix","hostent"],"kind":"struct"},"17:10656:11674":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"16:7894:10986":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"18:744:60692":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"17:10081:11187":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"17:12343:11870":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"16:5330:11657":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"17:11665:11752":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"17:12507:11911":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"17:10224:13496":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"2:10987:9427":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"12:2303:12632":{"crate_id":12,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"1:894:9833":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"6:6910:6849":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"17:13356:12167":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"6:1723:4577":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"2:10109:9303":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"6:4227:6689":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"17:10788:13509":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"20:4515:6719":{"crate_id":20,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"16:2991:11134":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"20:4264:6692":{"crate_id":20,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"5:1000:9415":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"20:4065:6675":{"crate_id":20,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"16:5561:10849":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"1:10540:17462":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"17:13810:12302":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"5:4643:11417":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"1:10502:16452":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"17:13488:12199":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"17:10571:13504":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"17:10529:12980":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"5:6415:9687":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"5:983:10531":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"1:4557:1935":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"9:963:10700":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"17:9065:46838":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"12:747:9415":{"crate_id":12,"path":["hashbrown","map","Iter"],"kind":"struct"},"2:51330:10127":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"1:3261:9874":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"18:610:11320":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"1:4346:3286":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"18:766:11584":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"17:13554:12218":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"6:4272:6692":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"1:15704:55532":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"17:10304:11190":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"17:11001:13522":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"17:11147:12981":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"20:3860:6654":{"crate_id":20,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"5:2291:10615":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"2:49851:10343":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"17:10673:47026":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"2:24329:10373":{"crate_id":2,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"1:783:11462":{"crate_id":1,"path":["std","thread","local","fast","Key"],"kind":"struct"},"2:3420:3220":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"17:13041:12070":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"6:1658:4570":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"2:46684:13063":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"16:3041:11125":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"16:5855:10864":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"5:2758:10601":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"12:469:60667":{"crate_id":12,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"16:7971:122":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"5:2199:10541":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"2:46664:3291":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"16:0:3044":{"crate_id":16,"path":["gimli"],"kind":"module"},"16:7264:10965":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"12:812:9691":{"crate_id":12,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"2:22366:58379":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_left","Rotate"],"kind":"struct"},"1:10429:9634":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"1:3116:3258":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"2:9120:9066":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"17:13180:12120":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"1:10441:55589":{"crate_id":1,"path":["std","thread","local","fast","DtorState"],"kind":"enum"},"20:3964:6509":{"crate_id":20,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"20:6643:2237":{"crate_id":20,"path":["libc","unix","linux_like","linux","arch","generic","SO_ERROR"],"kind":"constant"},"1:3233:9502":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"16:5753:10860":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"5:7778:11431":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"1:6367:9652":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"5:7382:11414":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"2:8152:10176":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"17:11015:13523":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"17:4157:11254":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"17:13331:12159":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"18:677:137":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"16:6964:9064":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"2:8659:9570":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"1:10533:9702":{"crate_id":1,"path":["std","collections","hash","map","DefaultHasher"],"kind":"struct"},"1:6345:9631":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"1:4899:3185":{"crate_id":1,"path":["std","net","addr","ToSocketAddrs"],"kind":"trait"},"17:542:10884":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"20:4207:6688":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"11:46:12637":{"crate_id":11,"path":["adler","algo","U32X4"],"kind":"struct"},"16:5456:10841":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"12:1180:10765":{"crate_id":12,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"20:3997:6666":{"crate_id":20,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"1:14332:9648":{"crate_id":1,"path":["std","sys","unix","fs","OpenOptions"],"kind":"struct"},"1:1524:9695":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"2:48929:9411":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"20:6879:6846":{"crate_id":20,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"17:11750:11760":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"2:48911:9408":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"16:7216:11021":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"20:6648:2245":{"crate_id":20,"path":["libc","unix","linux_like","linux","arch","generic","SO_KEEPALIVE"],"kind":"constant"},"2:46072:10459":{"crate_id":2,"path":["core","char","EscapeDefaultState"],"kind":"enum"},"8:0:3037":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"2:3292:3207":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"1:7811:1968":{"crate_id":1,"path":["std","sync","mpsc","blocking","Inner"],"kind":"struct"},"17:11159:11720":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"2:3348:3219":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"2:22381:58379":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_right","Rotate"],"kind":"struct"},"1:15192:12940":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"16:3429:10876":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"1:4704:1568":{"crate_id":1,"path":["std","net"],"kind":"module"},"20:1650:4570":{"crate_id":20,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"2:52707:10145":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"1:11300:9056":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"2:3552:3223":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"12:1667:10778":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"6:6881:6845":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"12:2005:9415":{"crate_id":12,"path":["hashbrown","set","Iter"],"kind":"struct"},"1:5705:9647":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"2:8666:10101":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"17:9719:13483":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"6:3978:6663":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"1:15746:3082":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"6:4358:6701":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"1:13437:9760":{"crate_id":1,"path":["std","sys","unix","os_str","Slice"],"kind":"struct"},"16:4448:12378":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"2:46646:9292":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"5:375:10528":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"20:983:2382":{"crate_id":20,"path":["libc","unix","linux_like","IP_ADD_MEMBERSHIP"],"kind":"constant"},"1:15472:11472":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"17:11653:11751":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"17:11847:11791":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"5:8287:10480":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"1:2723:9667":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"20:4402:6706":{"crate_id":20,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"16:6087:10947":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"6:1630:4569":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"20:1519:2651":{"crate_id":20,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"5:6197:10511":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"1:9209:9677":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"16:6413:10783":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"12:930:9692":{"crate_id":12,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"17:11616:11745":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"2:49859:10338":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"16:5790:10862":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"5:8111:9231":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"20:934:2114":{"crate_id":20,"path":["libc","unix","linux_like","MSG_OOB"],"kind":"constant"},"6:584:2735":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"20:5371:7316":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"1:14689:11471":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"17:11254:11261":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"16:3218:11128":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"1:900:9834":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"2:53056:12888":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"1:14375:113":{"crate_id":1,"path":["std","sys","unix","fs","DirBuilder"],"kind":"struct"},"1:12095:3236":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"2:48191:67":{"crate_id":2,"path":["core","fmt","rt","v1","Alignment"],"kind":"enum"},"6:5414:7320":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"9:927:44908":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"2:49418:10330":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"20:3884:6656":{"crate_id":20,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"20:138:2337":{"crate_id":20,"path":["libc","unix","IPPROTO_IP"],"kind":"constant"},"20:6043:4504":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"12:2009:9231":{"crate_id":12,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"6:5407:7319":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"17:10887:11707":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"6:6091:7722":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"1:6767:2571":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"6:5269:7308":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"17:12456:11905":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"17:12142:11838":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"1:15227:10795":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"20:5520:6569":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"17:13963:12343":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"17:10106:11293":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"17:2512:11271":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"6:1584:4564":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"5:4575:219":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"2:7713:10102":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"17:10502:12979":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"2:51582:12842":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"1:5838:9946":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"6:5292:7311":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"20:1721:2707":{"crate_id":20,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"16:4350:12375":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"16:2773:11146":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"16:6780:11011":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"2:2774:93":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"9:41:10685":{"crate_id":9,"path":["miniz_oxide","deflate","buffer","LocalBuf"],"kind":"struct"},"2:46673:12817":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"18:849:11314":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"1:6861:3308":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"1:14024:3281":{"crate_id":1,"path":["std","sys","unix","stdio","Stderr"],"kind":"struct"},"1:9491:13962":{"crate_id":1,"path":["std","sys_common","mutex","StaticMutex"],"kind":"struct"},"17:11045:46842":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"20:4363:6703":{"crate_id":20,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"6:6864:6843":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"1:3955:122":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"2:2799:100":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"6:5282:7310":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"17:13119:12113":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"20:5961:3615":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"5:8354:9688":{"crate_id":5,"path":["alloc","vec","drain_filter","DrainFilter"],"kind":"struct"},"2:53122:12894":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"20:6060:4507":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"13:232:12631":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"6:4470:6713":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"17:12659:11941":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"2:47348:9231":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"1:11392:9772":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"2:4282:9231":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"1:14552:9803":{"crate_id":1,"path":["std","sys","unix","process","process_common","ExitCode"],"kind":"struct"},"18:790:11309":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"20:858:1614":{"crate_id":20,"path":["libc","unix","linux_like","AF_INET"],"kind":"constant"},"1:15733:3069":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"2:53111:12893":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"2:0:470":{"crate_id":2,"path":["core"],"kind":"module"},"0:784:1603":{"crate_id":0,"path":["socket2","InterfaceIndexOrAddress"],"kind":"enum"},"20:6213:7731":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"17:12494:11910":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"2:3245:3198":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"20:154:3417":{"crate_id":20,"path":["libc","unix","fpos_t"],"kind":"enum"},"1:12050:9820":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"20:4125:6682":{"crate_id":20,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"18:636:11574":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"6:5469:7324":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"17:12385:11891":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"5:5815:11421":{"crate_id":5,"path":["alloc","slice","insert_head","InsertionHole"],"kind":"struct"},"20:980:2401":{"crate_id":20,"path":["libc","unix","linux_like","IP_MULTICAST_IF"],"kind":"constant"},"12:2323:12635":{"crate_id":12,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"2:4651:98":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"2:2883:2636":{"crate_id":2,"path":["core","cmp","min"],"kind":"function"},"1:10989:3267":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"0:850:1658":{"crate_id":0,"path":["socket2","RecvFlags"],"kind":"struct"},"2:22824:10109":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"2:4990:3319":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"2:49522:10006":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"17:13884:12323":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"16:6366:10784":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"2:3970:10171":{"crate_id":2,"path":["core","any","Demand"],"kind":"struct"},"2:22777:21445":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","ToBitMask"],"kind":"trait"},"6:563:2652":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"20:3897:6657":{"crate_id":20,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"2:47219:9231":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"16:7467:10951":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"16:3241:11129":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"2:52029:10128":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"6:5953:4503":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"2:53160:12896":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"16:6518:11005":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"20:6891:6848":{"crate_id":20,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"1:11032:3186":{"crate_id":1,"path":["std","net","ip","IpAddr"],"kind":"enum"},"1:3249:9868":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"2:11064:9428":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"2:2777:9396":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"1:2166:9688":{"crate_id":1,"path":["std","collections","hash","set","DrainFilter"],"kind":"struct"},"2:47332:9415":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"18:667:11324":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"2:46405:10068":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"6:3945:6659":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"1:14382:1934":{"crate_id":1,"path":["std","sys","unix","io","IoSlice"],"kind":"struct"},"2:3343:3218":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"17:13446:12187":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"17:2543:11209":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"1:10316:11465":{"crate_id":1,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"16:4671:12384":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"2:49835:10341":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"2:45706:9672":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"20:6647:2282":{"crate_id":20,"path":["libc","unix","linux_like","linux","arch","generic","SO_RCVBUF"],"kind":"constant"},"2:13830:10104":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"14:47:13539":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"2:45459:3233":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"17:12598:11926":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"2:47508:84":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"2:57090:12907":{"crate_id":2,"path":["core","core_simd","vector","ptr","SimdConstPtr"],"kind":"struct"},"16:3506:11132":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"2:50055:10350":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"6:6028:4531":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"2:9119:9067":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"6:3862:6653":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"6:3972:6509":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"2:52998:10152":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"17:607:13479":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"1:15721:3060":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"20:955:2442":{"crate_id":20,"path":["libc","unix","linux_like","IP_TOS"],"kind":"constant"},"1:3617:3276":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"6:1602:4566":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"17:4008:13481":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"16:3338:10871":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"1:8264:9852":{"crate_id":1,"path":["std","sync","mpsc","sync","Packet"],"kind":"struct"},"14:189:13539":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"9:749:10638":{"crate_id":9,"path":["miniz_oxide","deflate","core","TDEFLStatus"],"kind":"enum"},"0:837:1642":{"crate_id":0,"path":["socket2","Protocol"],"kind":"struct"},"2:46368:10065":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"1:15738:3074":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"16:6768:11161":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"20:4379:3020":{"crate_id":20,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"1:2765:9668":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"5:8158:9707":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"1:12021:9918":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"2:46066:9630":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"1:7682:3472":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"17:2484:46926":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"16:7738:11026":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"3:0:412":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"2:23931:10392":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"20:1657:4571":{"crate_id":20,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"16:6032:10880":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"2:12572:10323":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"16:7928:9988":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"5:7549:10511":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"1:14539:9661":{"crate_id":1,"path":["std","sys","unix","os_str","Buf"],"kind":"struct"},"1:2027:140":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"1:15744:3080":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"16:3172:11126":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"2:24193:10371":{"crate_id":2,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"16:6644:11009":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"17:12195:11846":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"6:5945:3656":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"6:5130:7259":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"2:49105:3265":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"20:5428:11564":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"2:45576:180":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"1:10932:1934":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"20:6168:7727":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"1:4385:3282":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"1:14683:11470":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"2:3309:3210":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"2:52849:10149":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"2:3485:3221":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"2:22618:9634":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"1:10557:13571":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"2:50096:9671":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"2:13528:133":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"2:23372:9679":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"1:11981:9730":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"20:5274:7310":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"6:4347:6700":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"1:13346:13564":{"crate_id":1,"path":["std","sys","unix","os","SplitPaths"],"kind":"struct"},"17:9210:46841":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"1:11997:9731":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"20:6231:7732":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"2:46095:10460":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"20:4369:6704":{"crate_id":20,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"16:5384:10837":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"6:537:3739":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"1:1446:9685":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"1:14345:13085":{"crate_id":1,"path":["std","sys","unix","fs","FilePermissions"],"kind":"struct"},"2:2834:119":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"2:23762:12727":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"20:5461:7324":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"0:77:1595":{"crate_id":0,"path":["socket2","SockAddr"],"kind":"struct"},"16:6464:10962":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"1:10983:3265":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"20:4417:6708":{"crate_id":20,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"20:5177:7303":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"17:12771:11955":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"17:12208:11848":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"5:1458:9698":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"2:3638:132":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"2:51903:10136":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"17:10211:13495":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"5:7709:218":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"2:51102:10155":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"6:5197:7305":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"2:13927:136":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"1:15743:3079":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"2:8198:9082":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"17:10266:11272":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"5:3029:13897":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"2:49551:10012":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"2:50996:10126":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"17:13394:12174":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"2:55776:220":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"6:5185:7303":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"5:69:10506":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"2:22681:10109":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"20:1700:4575":{"crate_id":20,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"20:4104:6679":{"crate_id":20,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"6:3868:6654":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"16:6591:11008":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"17:13377:12171":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"16:6219:10998":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"20:4038:6671":{"crate_id":20,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"16:6577:11007":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"6:632:3747":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"1:11056:1924":{"crate_id":1,"path":["std","net","ip","Ipv4Addr"],"kind":"struct"},"17:11794:11777":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"1:11062:3187":{"crate_id":1,"path":["std","net","ip","Ipv6MulticastScope"],"kind":"enum"},"12:2331:9707":{"crate_id":12,"path":["hashbrown","TryReserveError"],"kind":"enum"},"2:24363:2639":{"crate_id":2,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"16:7870:10956":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"17:13898:12325":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"20:1736:4578":{"crate_id":20,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"16:3287:11131":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"16:5996:10992":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"2:46386:10066":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"6:5998:7720":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"6:4281:6693":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"16:7571:10946":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"17:9839:11215":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"2:51054:12834":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"16:5472:10844":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"16:5295:45259":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"1:14667:11469":{"crate_id":1,"path":["std","sys","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"20:63:1594":{"crate_id":20,"path":["libc","unix","c_int"],"kind":"typedef"},"20:6660:2322":{"crate_id":20,"path":["libc","unix","linux_like","linux","arch","generic","SO_SNDTIMEO"],"kind":"constant"},"2:8148:10174":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"18:136:53128":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"5:7311:9231":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"2:46448:3264":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"1:8365:9725":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"2:49537:10009":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"2:10707:9634":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"1:11214:9906":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"1:10291:11463":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"2:10896:9415":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"16:4641:12383":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"18:720:11576":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"17:9280:11657":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"2:2865:162":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"17:12645:11940":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"1:1438:9231":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"16:3118:11136":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"17:13590:12227":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"6:543:3740":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"6:4494:6715":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"2:3304:3209":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"2:50781:10133":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"16:6269:11000":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"2:3662:10091":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"20:5363:7315":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"2:10047:190":{"crate_id":2,"path":["core","fmt","Result"],"kind":"typedef"},"16:6682:10963":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"2:47340:9416":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"16:3714:12369":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"20:4323:2726":{"crate_id":20,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"2:3012:9999":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"16:4790:12388":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"5:7049:11426":{"crate_id":5,"path":["alloc","vec","drain_filter","drop","BackshiftOnDrop"],"kind":"struct"},"6:1617:4567":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"6:3990:6664":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"2:32040:58111":{"crate_id":2,"path":["core","mem","valid_align","ValidAlignEnum16"],"kind":"enum"},"1:9582:9897":{"crate_id":1,"path":["std","sys_common","remutex","ReentrantMutex"],"kind":"struct"},"12:1100:9697":{"crate_id":12,"path":["hashbrown","map","Entry"],"kind":"enum"},"20:4441:6711":{"crate_id":20,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"6:4511:6717":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"20:4219:6689":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"16:5421:10839":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"20:3854:6653":{"crate_id":20,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"16:6718:11157":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"1:4614:3259":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"20:1614:4568":{"crate_id":20,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"16:5595:10851":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"9:27:10684":{"crate_id":9,"path":["miniz_oxide","deflate","buffer","HashBuffers"],"kind":"struct"},"1:13200:1596":{"crate_id":1,"path":["std","sys","unix","net","Socket"],"kind":"struct"},"12:1762:11412":{"crate_id":12,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"6:1622:4568":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"2:45959:9630":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"17:12275:11857":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"17:13282:12148":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"6:6085:7721":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"0:785:2216":{"crate_id":0,"path":["socket2","InterfaceIndexOrAddress","Index"],"kind":"variant"},"17:11822:11787":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"2:49680:10016":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"17:10962:13519":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"6:4306:6696":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"2:13999:9397":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"2:47676:86":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"1:1428:9416":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"16:6949:11165":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"14:56:11732":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"1:9503:13963":{"crate_id":1,"path":["std","sys_common","mutex","MovableMutex"],"kind":"struct"},"1:13885:11468":{"crate_id":1,"path":["std","sys","unix","stack_overflow","Handler"],"kind":"struct"},"2:8233:115":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"1:11847:9803":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"12:112:60670":{"crate_id":12,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"2:49643:10015":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"2:46028:10464":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"1:10704:113":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"17:13532:12213":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"2:4906:10264":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"1:4307:3284":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"6:6899:6848":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"17:11434:11730":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"2:32028:1567":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"16:7360:179":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"20:3910:6658":{"crate_id":20,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"12:761:9416":{"crate_id":12,"path":["hashbrown","map","IterMut"],"kind":"struct"},"2:3319:3213":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"10:0:3039":{"crate_id":10,"path":["rustc_std_workspace_alloc"],"kind":"module"},"20:1539:1588":{"crate_id":20,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"17:0:3045":{"crate_id":17,"path":["object"],"kind":"module"},"17:12408:11900":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"17:12373:11889":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"2:2138:1028":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"2:49847:10342":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"1:14845:13086":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"6:157:3416":{"crate_id":6,"path":["libc","unix","FILE"],"kind":"enum"},"1:12535:9861":{"crate_id":1,"path":["std","sys","unix","fs","ReadDir"],"kind":"struct"},"17:12262:11856":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"2:3621:3224":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"6:4241:6690":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"5:4212:11414":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"6:4395:3022":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"6:6221:7731":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"20:6606:3693":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"2:48510:13067":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"2:37326:3321":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"2:46109:10462":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"enum"},"2:3186:201":{"crate_id":2,"path":["core","marker","StructuralEq"],"kind":"trait"},"1:14924:9740":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"20:1668:4572":{"crate_id":20,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"2:3423:125":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"17:10468:11212":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"20:5266:7309":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"6:4387:3020":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"1:15720:3059":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"2:10098:105":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"5:8067:10533":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"5:1588:9416":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"17:13429:12180":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"16:6491:11004":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"2:3314:3211":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"2:12556:10320":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"16:2816:11139":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"17:10061:13492":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"20:6915:8261":{"crate_id":20,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"17:11915:11793":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"1:6465:9663":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"17:10128:11295":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"20:5937:3656":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"1:11222:3190":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"1:6769:1938":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"17:9476:11663":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"16:5736:10857":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"20:1514:2649":{"crate_id":20,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"17:11539:11738":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"1:12055:2645":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"1:2188:9756":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"20:4015:6668":{"crate_id":20,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"2:3255:3200":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"1:10720:3275":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"5:3718:155":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"5:2534:10602":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"16:5717:10856":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"2:49616:10014":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"2:49019:9420":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"2:47211:9416":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"5:909:92":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"17:12712:11947":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"2:9780:10297":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"17:8902:46834":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"17:12552:11920":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"20:4044:6672":{"crate_id":20,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"2:53190:12898":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"2:12286:10438":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"20:3958:6662":{"crate_id":20,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"6:4193:6686":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"17:13296:12149":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"2:2113:3174":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"20:6649:2270":{"crate_id":20,"path":["libc","unix","linux_like","linux","arch","generic","SO_OOBINLINE"],"kind":"constant"},"6:511:3736":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"1:15732:3068":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"2:47194:9230":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"20:6083:7722":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"2:24295:9855":{"crate_id":2,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"6:3918:6658":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"5:5730:11414":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"20:617:3746":{"crate_id":20,"path":["libc","unix","servent"],"kind":"struct"},"2:7949:59050":{"crate_id":2,"path":["core","iter","sources","from_generator","FromGenerator"],"kind":"struct"},"1:6771:1939":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"16:3365:10872":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"16:6731:11158":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"20:6844:6841":{"crate_id":20,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"2:49373:3268":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"5:1224:10597":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"2:3189:204":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"17:9034:46837":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"1:4480:3291":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"6:5436:11564":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"2:23863:44049":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"2:23565:10366":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"17:9769:60681":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"2:10117:9308":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"6:3881:6655":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"6:1547:1588":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"5:3921:9688":{"crate_id":5,"path":["alloc","collections","linked_list","DrainFilter"],"kind":"struct"},"1:8737:9292":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"5:1666:179":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"2:49038:9419":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"1:12046:9819":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"17:11499:11736":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"18:660:11323":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"20:1525:2809":{"crate_id":20,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"6:4401:6705":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"1:3251:9869":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"2:12262:10474":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"20:6116:7725":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"20:6856:6843":{"crate_id":20,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"16:4304:12374":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"6:6068:4507":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"20:4273:6693":{"crate_id":20,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"1:11026:1802":{"crate_id":1,"path":["std","net","addr","SocketAddrV4"],"kind":"struct"},"5:5829:11424":{"crate_id":5,"path":["alloc","slice","merge","MergeHole"],"kind":"struct"},"6:6124:7725":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"20:603:3744":{"crate_id":20,"path":["libc","unix","itimerval"],"kind":"struct"},"20:4112:6680":{"crate_id":20,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"1:9725:11462":{"crate_id":1,"path":["std","sys_common","thread_local_key","Key"],"kind":"struct"},"2:22813:9634":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"12:160:10768":{"crate_id":12,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"16:6807:11012":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"16:6136:10989":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"17:13221:12133":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"17:11981:11812":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"2:49095:10313":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"6:6893:6847":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"1:11798:9799":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"17:9551:11260":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"17:12307:11864":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"2:51982:10124":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"18:704:11574":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"2:49169:10317":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"2:49402:10328":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"2:49287:10322":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"16:6999:11013":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"17:12155:11841":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"1:2582:13567":{"crate_id":1,"path":["std","error","from","StringError"],"kind":"struct"},"1:1075:9627":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"2:6236:10062":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"16:5029:12395":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"17:13306:12150":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"1:12198:13565":{"crate_id":1,"path":["std","sys","unix","args","Args"],"kind":"struct"},"1:5683:9644":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"17:11714:11755":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"6:3951:6660":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"16:4852:12390":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"6:5386:7317":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"16:2794:10875":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"20:956:2429":{"crate_id":20,"path":["libc","unix","linux_like","IP_TTL"],"kind":"constant"},"17:11100:11265":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"2:46128:10248":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"20:5406:7320":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"6:4215:6688":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"18:650:11319":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"16:4922:12392":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"5:1443:9699":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"12:1144:9699":{"crate_id":12,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"9:1056:10695":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"2:51426:10116":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"5:3729:9415":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"2:48480:141":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"6:4033:6669":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"17:10623:13508":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"5:5551:1279":{"crate_id":5,"path":["alloc","slice"],"kind":"module"},"11:0:3040":{"crate_id":11,"path":["adler"],"kind":"module"},"17:12051:11820":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"1:10976:3264":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"1:15728:3066":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"2:22353:3321":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"2:23467:9634":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"20:4005:6667":{"crate_id":20,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"17:10236:11208":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"20:4462:6713":{"crate_id":20,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"2:52095:10113":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"17:9809:60686":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"1:14750:9801":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatus"],"kind":"struct"},"20:6628:8094":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"20:1046:2477":{"crate_id":20,"path":["libc","unix","linux_like","IPV6_MULTICAST_IF"],"kind":"constant"},"20:5378:7317":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"1:7816:13899":{"crate_id":1,"path":["std","sync","mpsc","blocking","WaitToken"],"kind":"struct"},"20:6020:4531":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"2:46161:10403":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"2:11206:9426":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"2:53076:12890":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"2:10105:114":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"20:5412:7321":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"2:55815:220":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"1:11369:9771":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"20:4339:6700":{"crate_id":20,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"5:6592:69":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"0:0:1706":{"crate_id":0,"path":["socket2"],"kind":"module"},"6:4112:6679":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"20:5979:7719":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"1:6227:2644":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"2:23707:12725":{"crate_id":2,"path":["core","num","dec2flt","common","AsciiStr"],"kind":"struct"},"17:10458:11622":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"1:3110:9862":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"20:5945:4503":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"16:4614:12382":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"2:23787:10209":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"2:9240:10002":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"5:3374:9756":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"6:525:2783":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"17:9943:60682":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"20:524:3738":{"crate_id":20,"path":["libc","unix","timespec"],"kind":"struct"},"20:5671:1628":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","SOCK_STREAM"],"kind":"constant"},"20:4254:6691":{"crate_id":20,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"20:556:2652":{"crate_id":20,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"2:13040:13552":{"crate_id":2,"path":["core","str","lossy","Utf8Lossy"],"kind":"struct"},"2:45965:13047":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"5:0:261":{"crate_id":5,"path":["alloc"],"kind":"module"},"2:53037:10117":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"6:4501:6716":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"17:13054:12076":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"1:15737:3073":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"1:11203:9947":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"1:5406:2568":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"17:12028:11817":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"20:6862:6844":{"crate_id":20,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"1:9498:11459":{"crate_id":1,"path":["std","sys_common","mutex","StaticMutexGuard"],"kind":"struct"},"16:6554:11006":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"2:22622:9678":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"17:10331:11215":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"16:3939:12372":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"1:5868:9949":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"2:45487:3230":{"crate_id":2,"path":["core","ops","generator","GeneratorState"],"kind":"enum"},"2:50733:10153":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"2:13045:44338":{"crate_id":2,"path":["core","str","lossy","Utf8LossyChunksIter"],"kind":"struct"},"9:234:10660":{"crate_id":9,"path":["miniz_oxide","deflate","core","HuffmanOxide"],"kind":"struct"},"17:510:13478":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"5:4185:9687":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"1:11832:9802":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"16:5927:10867":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"2:10111:9310":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"5:3940:11414":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"17:11519:11737":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"20:1532:4562":{"crate_id":20,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"20:5672:1632":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","SOCK_DGRAM"],"kind":"constant"},"17:8849:11259":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"20:1594:4566":{"crate_id":20,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"16:7453:10950":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"16:7514:10970":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"16:6424:11003":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"20:1752:4579":{"crate_id":20,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"1:1149:13555":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"17:13370:12169":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"6:5221:7306":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"1:6839:3309":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"5:1578:9415":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"17:13453:12188":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"6:5978:7718":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"2:57111:12908":{"crate_id":2,"path":["core","core_simd","vector","ptr","SimdMutPtr"],"kind":"struct"},"2:52453:10157":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"17:12756:11954":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"20:5555:7355":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"2:46003:10246":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"6:1690:4573":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"17:11835:11788":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"2:3297:3212":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"1:10966:3263":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"20:1100:2657":{"crate_id":20,"path":["libc","unix","linux_like","TCP_KEEPIDLE"],"kind":"constant"},"0:764:1668":{"crate_id":0,"path":["socket2","MaybeUninitSlice"],"kind":"struct"},"1:1501:9692":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"6:4145:6683":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"2:49077:9994":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"1:10712:9881":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"17:11726:11758":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"16:7295:10967":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"6:6106:7724":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"2:4839:10258":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"}},"external_crates":{"20":{"name":"libc","html_root_url":null},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"adler","html_root_url":"https://docs.rs/adler/0.2.3/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":15}