{"root":"0:0:2575","crate_version":"0.5.7","includes_private":false,"index":{"0:155:3148":{"id":"0:155:3148","crate_id":0,"name":"send_to","span":{"filename":"src/socket.rs","begin":[703,4],"end":[705,5]},"visibility":"public","docs":"Sends data on the socket to the given address. On success, returns the\nnumber of bytes written.\n\nThis is typically used on UDP or datagram-oriented sockets.\n\nAdditional documentation can be found in manual of the OS:\n\n * DragonFly BSD: <https://man.dragonflybsd.org/?command=sendto&section=2>\n * FreeBSD: <https://www.freebsd.org/cgi/man.cgi?query=sendto&sektion=2>\n * Linux: <https://man7.org/linux/man-pages/man2/sendto.2.html>\n * macOS: <https://developer.apple.com/library/archive/documentation/System/Conceptual/ManPages_iPhoneOS/man2/sendto.2.html> (archived, actually for iOS)\n * NetBSD: <https://man.netbsd.org/sendto.2>\n * OpenBSD: <https://man.openbsd.org/sendto.2>\n * iOS: <https://developer.apple.com/library/archive/documentation/System/Conceptual/ManPages_iPhoneOS/man2/sendto.2.html> (archived)\n * illumos: <https://illumos.org/man/3SOCKET/sendto>\n * Windows: <https://docs.microsoft.com/en-us/windows/win32/api/winsock2/nf-winsock2-sendto>","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["buf",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}],["addr",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"SockAddr","id":"0:622:2399","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3059:226","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:42167:10679-0:600:2560":{"id":"a:2:42167:10679-0:600:2560","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'addr","kind":{"lifetime":{"outlives":[]}}},{"name":"'bufs","kind":{"lifetime":{"outlives":[]}}},{"name":"'control","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:42167:10679","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MsgHdrMut","id":"0:600:2560","args":{"angle_bracketed":{"args":[{"lifetime":"'addr"},{"lifetime":"'bufs"},{"lifetime":"'control"}],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"0:74":{"id":"0:74","crate_id":0,"name":null,"span":{"filename":"src/sockaddr.rs","begin":[382,0],"end":[382,23]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"2:2768:134","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"SockAddr","id":"0:622:2399","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:52:2775":{"id":"0:52:2775","crate_id":0,"name":"family","span":{"filename":"src/sockaddr.rs","begin":[167,4],"end":[169,5]},"visibility":"public","docs":"Returns this address's family.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"sa_family_t","id":"20:638:2700","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:163:3183":{"id":"0:163:3183","crate_id":0,"name":"broadcast","span":{"filename":"src/socket.rs","begin":[843,4],"end":[848,5]},"visibility":"public","docs":"Get the value of the `SO_BROADCAST` option for this socket.\n\nFor more information about this option, see [`set_broadcast`].\n\n[`set_broadcast`]: Socket::set_broadcast","links":{"Socket::set_broadcast":"0:165:3188"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3059:226","args":{"angle_bracketed":{"args":[{"type":{"primitive":"bool"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:42167:10679-0:622:2399":{"id":"a:2:42167:10679-0:622:2399","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:42167:10679","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"SockAddr","id":"0:622:2399","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:226:3499":{"id":"0:226:3499","crate_id":0,"name":"multicast_loop_v6","span":{"filename":"src/socket.rs","begin":[1800,4],"end":[1805,5]},"visibility":"public","docs":"Get the value of the `IPV6_MULTICAST_LOOP` option for this socket.\n\nFor more information about this option, see [`set_multicast_loop_v6`].\n\n[`set_multicast_loop_v6`]: Socket::set_multicast_loop_v6","links":{"Socket::set_multicast_loop_v6":"0:228:3505"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3059:226","args":{"angle_bracketed":{"args":[{"type":{"primitive":"bool"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:3244:4427-0:622:2399":{"id":"a:2:3244:4427-0:622:2399","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"2:3244:4427","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"SockAddr","id":"0:622:2399","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:2:42167:10679-0:114:2400":{"id":"a:2:42167:10679-0:114:2400","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:42167:10679","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Socket","id":"0:114:2400","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:521:2365":{"id":"0:521:2365","crate_id":0,"name":"into_raw_fd","span":{"filename":"src/sys/unix.rs","begin":[3112,4],"end":[3114,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"c_int","id":"20:44:2398","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2996-0:676:2448":{"id":"b:2:2996-0:676:2448","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2970:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2966:258","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Protocol","id":"0:676:2448","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2999:137","2:3000:1809"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:553":{"id":"0:553","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[351,0],"end":[355,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2963:144","args":{"angle_bracketed":{"args":[{"type":{"primitive":"i32"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Protocol","id":"0:676:2448","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:554:832"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:3828-0:600:2560":{"id":"b:2:3828-0:600:2560","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:32306:4430","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3826:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MsgHdrMut","id":"0:600:2560","args":{"angle_bracketed":{"args":[{"lifetime":"'addr"},{"lifetime":"'bufs"},{"lifetime":"'control"}],"bindings":[]}}}},"items":["2:3830:1822"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:515:3641":{"id":"0:515:3641","crate_id":0,"name":"as_fd","span":{"filename":"src/sys/unix.rs","begin":[3089,4],"end":[3092,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"BorrowedFd","id":"1:8676:3653","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:400":{"id":"0:400","crate_id":0,"name":null,"span":{"filename":"src/sys/unix.rs","begin":[355,0],"end":[377,1]},"visibility":"default","docs":"Unix only API.","links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"crate::Domain","id":"0:654:2410","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:201:3400":{"id":"0:201:3400","crate_id":0,"name":"set_multicast_if_v4","span":{"filename":"src/socket.rs","begin":[1462,4],"end":[1472,5]},"visibility":"public","docs":"Set the value of the `IP_MULTICAST_IF` option for this socket.\n\nSpecifies the interface to use for routing multicast packets.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["interface",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Ipv4Addr","id":"2:41835:2830","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3059:226","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:741:11126":{"id":"5:741:11126","crate_id":5,"name":"to_owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:441:2834":{"id":"0:441:2834","crate_id":0,"name":"as_abstract_namespace","span":{"filename":"src/sys/unix.rs","begin":[872,4],"end":[884,5]},"visibility":"public","docs":"Returns this address as a slice of bytes representing an abstract address if it is an\n`AF_UNIX` abstract address, otherwise returns `None`.\n\nAbstract addresses are a Linux extension, so this method returns `None` on all non-Linux\nplatforms.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:42073:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:44:2758":{"id":"0:44:2758","crate_id":0,"name":"try_init","span":{"filename":"src/sockaddr.rs","begin":[122,4],"end":[144,5]},"visibility":"public","docs":"Initialise a `SockAddr` by calling the function `init`.\n\nThe type of the address storage and length passed to the function `init`\nis OS/architecture specific.\n\nThe address is zeroed before `init` is called and is thus valid to\ndereference and read from. The length initialised to the maximum length\nof the storage.\n\n# Safety\n\nCaller must ensure that the address family and length match the type of\nstorage address. For example if `storage.ss_family` is set to `AF_INET`\nthe `storage` must be initialised as `sockaddr_in`, setting the content\nand length appropriately.\n\n# Examples\n\n```\n# fn main() -> std::io::Result<()> {\n# #[cfg(unix)] {\nuse std::io;\nuse std::os::unix::io::AsRawFd;\n\nuse socket2::{SockAddr, Socket, Domain, Type};\n\nlet socket = Socket::new(Domain::IPV4, Type::STREAM, None)?;\n\n// Initialise a `SocketAddr` byte calling `getsockname(2)`.\nlet (_, address) = unsafe {\n    SockAddr::try_init(|addr_storage, len| {\n        // The `getsockname(2)` system call will intiliase `storage` for\n        // us, setting `len` to the correct length.\n        if libc::getsockname(socket.as_raw_fd(), addr_storage.cast(), len) == -1 {\n            Err(io::Error::last_os_error())\n        } else {\n            Ok(())\n        }\n    })\n}?;\n# drop(address);\n# }\n# Ok(())\n# }\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["init",{"generic":"F"}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3059:226","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"generic":"T"},{"resolved_path":{"name":"SockAddr","id":"0:622:2399","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"2:3458:142","args":{"parenthesized":{"inputs":[{"raw_pointer":{"mutable":true,"type":{"resolved_path":{"name":"sockaddr_storage","id":"20:1703:2703","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},{"raw_pointer":{"mutable":true,"type":{"resolved_path":{"name":"socklen_t","id":"20:1898:2704","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"output":{"resolved_path":{"name":"io::Result","id":"1:3059:226","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:684":{"id":"0:684","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[305,26],"end":[305,35]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"2:32307:244","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Protocol","id":"0:676:2448","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2713-0:273:2401":{"id":"b:2:2713-0:273:2401","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32306:4430","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2707:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"SockRef","id":"0:273:2401","args":{"angle_bracketed":{"args":[{"lifetime":"'s"}],"bindings":[]}}}},"items":["2:2715:4328"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:544:832":{"id":"0:544:832","crate_id":0,"name":"from","span":{"filename":"src/lib.rs","begin":[287,4],"end":[289,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["t",{"resolved_path":{"name":"c_int","id":"20:44:2398","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Type","id":"0:665:2426","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:42168:10678-0:687:2478":{"id":"a:2:42168:10678-0:687:2478","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:42168:10678","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RecvFlags","id":"0:687:2478","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:698:2498":{"id":"0:698:2498","crate_id":0,"name":"TcpKeepalive","span":{"filename":"src/lib.rs","begin":[427,0],"end":[454,1]},"visibility":"public","docs":"Configures a socket's TCP keepalive parameters.\n\nSee [`Socket::set_tcp_keepalive`].","links":{"`Socket::set_tcp_keepalive`":"0:239:3572"},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["0:576","a:2:42167:10679-0:698:2498","a:2:3244:4427-0:698:2498","a:2:3209:247-0:698:2498","a:2:42168:10678-0:698:2498","a:2:32364:4431-0:698:2498","a:2:32305:237-0:698:2498","b:2:2713-0:698:2498","b:2:2990-0:698:2498","b:2:2716-0:698:2498","b:2:3828-0:698:2498","b:2:2996-0:698:2498","b:2:2986-0:698:2498","b:2:3001-0:698:2498","b:5:738-0:698:2498","0:704","0:702"]}}},"0:591:2537":{"id":"0:591:2537","crate_id":0,"name":"with_addr","span":{"filename":"src/lib.rs","begin":[622,4],"end":[625,5]},"visibility":"public","docs":"Set the address (name) of the message.\n\nCorresponds to setting `msg_name` and `msg_namelen` on Unix and `name`\nand `namelen` on Windows.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["addr",{"borrowed_ref":{"lifetime":"'addr","mutable":false,"type":{"resolved_path":{"name":"SockAddr","id":"0:622:2399","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:137:3028":{"id":"0:137:3028","crate_id":0,"name":"recv","span":{"filename":"src/socket.rs","begin":[419,4],"end":[421,5]},"visibility":"public","docs":"Receives data on the socket from the remote address to which it is\nconnected.\n\nThe [`connect`] method will connect this socket to a remote address.\nThis method might fail if the socket is not connected.\n\nAdditional documentation can be found in manual of the OS:\n\n * DragonFly BSD: <https://man.dragonflybsd.org/?command=recv&section=2>\n * FreeBSD: <https://www.freebsd.org/cgi/man.cgi?query=recv&sektion=2>\n * Linux: <https://man7.org/linux/man-pages/man2/recv.2.html>\n * macOS: <https://developer.apple.com/library/archive/documentation/System/Conceptual/ManPages_iPhoneOS/man2/recv.2.html> (archived, actually for iOS)\n * NetBSD: <https://man.netbsd.org/recv.2>\n * OpenBSD: <https://man.openbsd.org/recv.2>\n * iOS: <https://developer.apple.com/library/archive/documentation/System/Conceptual/ManPages_iPhoneOS/man2/recv.2.html> (archived)\n * illumos: <https://illumos.org/man/3SOCKET/recv>\n * Windows: <https://docs.microsoft.com/en-us/windows/win32/api/winsock2/nf-winsock2-recv>\n\n[`connect`]: Socket::connect\n\n# Safety\n\nNormally casting a `&mut [u8]` to `&mut [MaybeUninit<u8>]` would be\nunsound, as that allows us to write uninitialised bytes to the buffer.\nHowever this implementation promises to not write uninitialised bytes to\nthe `buf`fer and passes it directly to `recv(2)` system call. This\npromise ensures that this function can be called using a `buf`fer of\ntype `&mut [u8]`.\n\nNote that the [`io::Read::read`] implementation calls this function with\na `buf`fer of type `&mut [u8]`, allowing initialised buffers to be used\nwithout using `unsafe`.","links":{"`io::Read::read`":"1:3587:3586","Socket::connect":"0:125:2941"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["buf",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"resolved_path":{"name":"MaybeUninit","id":"2:30688:2346","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u8"}}],"bindings":[]}}}}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3059:226","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:217":{"id":"0:217","crate_id":0,"name":null,"span":{"filename":"src/socket.rs","begin":[1653,0],"end":[1930,1]},"visibility":"default","docs":"Socket options for IPv6 sockets, get/set using `IPPROTO_IPV6`.\n\nAdditional documentation can be found in documentation of the OS.\n* Linux: <https://man7.org/linux/man-pages/man7/ipv6.7.html>\n* Windows: <https://docs.microsoft.com/en-us/windows/win32/winsock/ipproto-ipv6-socket-options>","links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Socket","id":"0:114:2400","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:218:3457","0:219:3467","0:220:3472","0:222:3477","0:223:3489","0:225:3495","0:226:3499","0:228:3505","0:229:3508","0:231:3511","0:232:3515","0:234:3523","0:235:3527","0:237:3534"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:255:3589":{"id":"0:255:3589","crate_id":0,"name":"flush","span":{"filename":"src/socket.rs","begin":[2179,4],"end":[2181,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3059:226","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:594:2553":{"id":"0:594:2553","crate_id":0,"name":"with_flags","span":{"filename":"src/lib.rs","begin":[650,4],"end":[653,5]},"visibility":"public","docs":"Set the flags of the message.\n\nCorresponds to setting `msg_flags` on Unix and `dwFlags` on Windows.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["flags",{"resolved_path":{"name":"libc::c_int","id":"20:44:2398","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:600:2560":{"id":"0:600:2560","crate_id":0,"name":"MsgHdrMut","span":{"filename":"src/lib.rs","begin":[668,0],"end":[676,1]},"visibility":"public","docs":"Configuration of a `recvmsg(2)` system call.\n\nThis wraps `msghdr` on Unix and `WSAMSG` on Windows. Also see [`MsgHdr`] for\nthe variant used by `sendmsg(2)`.","links":{"`MsgHdr`":"0:580:2523"},"attrs":["#[cfg(not(target_os = \"redox\"))]"],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'addr","kind":{"lifetime":{"outlives":[]}}},{"name":"'bufs","kind":{"lifetime":{"outlives":[]}}},{"name":"'control","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"impls":["0:606","a:2:42167:10679-0:600:2560","a:2:3244:4427-0:600:2560","a:2:3209:247-0:600:2560","a:2:42168:10678-0:600:2560","a:2:32364:4431-0:600:2560","a:2:32305:237-0:600:2560","b:2:2713-0:600:2560","b:2:2990-0:600:2560","b:2:2716-0:600:2560","b:2:3828-0:600:2560","b:2:2996-0:600:2560","b:2:2986-0:600:2560","b:2:3001-0:600:2560","0:616"]}}},"0:231:3511":{"id":"0:231:3511","crate_id":0,"name":"set_unicast_hops_v6","span":{"filename":"src/socket.rs","begin":[1835,4],"end":[1844,5]},"visibility":"public","docs":"Set the value for the `IPV6_UNICAST_HOPS` option on this socket.\n\nSpecifies the hop limit for ipv6 unicast packets","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["hops",{"primitive":"u32"}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3059:226","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13286:35982":{"id":"2:13286:35982","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"1:12347:1722","str::slice_mut_unchecked":"2:13287:35983","crate::ops::Index":"2:39619:3173"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:247":{"id":"0:247","crate_id":0,"name":null,"span":{"filename":"src/socket.rs","begin":[2154,0],"end":[2167,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["read_buf","is_read_vectored","take","read_buf_exact","read_to_end","read_to_string","chain","bytes","read_exact","by_ref","read_vectored"],"trait":{"name":"Read","id":"1:3586:2863","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"resolved_path":{"name":"Socket","id":"0:114:2400","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"items":["0:249:3586","0:250:3587"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13289:31704":{"id":"2:13289:31704","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_mut_checked`](str::split_at_mut_checked).\n\n# Examples\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"2:13288:31703","str::split_at_mut_checked":"2:13291:31708"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13374:31721":{"id":"2:13374:31721","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12341:471","self::pattern":"2:12955:21793"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["suffix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42073:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12961:15534","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12961:15534","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12976:21791","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:532:2412":{"id":"0:532:2412","crate_id":0,"name":"IPV4","span":{"filename":"src/lib.rs","begin":[213,4],"end":[213,50]},"visibility":"public","docs":"Domain for IPv4 communication, corresponding to `AF_INET`.","links":{},"attrs":[],"deprecation":null,"inner":{"assoc_const":{"type":{"resolved_path":{"name":"Domain","id":"0:654:2410","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"default":"_"}}},"0:59:2791":{"id":"0:59:2791","crate_id":0,"name":"is_unix","span":{"filename":"src/sockaddr.rs","begin":[204,4],"end":[206,5]},"visibility":"public","docs":"Returns true if this address is of a unix socket (for local interprocess communication),\ni.e. it is from the `AF_UNIX` family, false otherwise.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:648":{"id":"0:648","crate_id":0,"name":null,"span":{"filename":"src/sys/unix.rs","begin":[379,0],"end":[394,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10384:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"crate::Domain","id":"0:654:2410","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:649:802"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:229:3508":{"id":"0:229:3508","crate_id":0,"name":"unicast_hops_v6","span":{"filename":"src/socket.rs","begin":[1825,4],"end":[1830,5]},"visibility":"public","docs":"Get the value of the `IPV6_UNICAST_HOPS` option for this socket.\n\nSpecifies the hop limit for ipv6 unicast packets","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3059:226","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u32"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:407:802":{"id":"0:407:802","crate_id":0,"name":"fmt","span":{"filename":"src/sys/unix.rs","begin":[613,4],"end":[625,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"std::fmt::Formatter","id":"2:10358:143","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"std::fmt::Result","id":"2:10339:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:692:475":{"id":"0:692:475","crate_id":0,"name":"clone","span":{"filename":"src/lib.rs","begin":[368,15],"end":[368,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"RecvFlags","id":"0:687:2478","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:150:3128":{"id":"0:150:3128","crate_id":0,"name":"send","span":{"filename":"src/socket.rs","begin":[652,4],"end":[654,5]},"visibility":"public","docs":"Sends data on the socket to a connected peer.\n\nThis is typically used on TCP sockets or datagram sockets which have\nbeen connected.\n\nOn success returns the number of bytes that were sent.\n\nAdditional documentation can be found in manual of the OS:\n\n * DragonFly BSD: <https://man.dragonflybsd.org/?command=send&section=2>\n * FreeBSD: <https://www.freebsd.org/cgi/man.cgi?query=send&sektion=2>\n * Linux: <https://man7.org/linux/man-pages/man2/send.2.html>\n * macOS: <https://developer.apple.com/library/archive/documentation/System/Conceptual/ManPages_iPhoneOS/man2/send.2.html> (archived, actually for iOS)\n * NetBSD: <https://man.netbsd.org/send.2>\n * OpenBSD: <https://man.openbsd.org/send.2>\n * iOS: <https://developer.apple.com/library/archive/documentation/System/Conceptual/ManPages_iPhoneOS/man2/send.2.html> (archived)\n * illumos: <https://illumos.org/man/3SOCKET/send>\n * Windows: <https://docs.microsoft.com/en-us/windows/win32/api/winsock2/nf-winsock2-send>","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["buf",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3059:226","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:5:738-0:698:2498":{"id":"b:5:738-0:698:2498","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2729:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:734:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TcpKeepalive","id":"0:698:2498","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:740:11125","5:741:11126","5:742:11127"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:571:249":{"id":"0:571:249","crate_id":0,"name":"Target","span":{"filename":"src/lib.rs","begin":[410,4],"end":[410,36]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"slice":{"resolved_path":{"name":"MaybeUninit","id":"2:30688:2346","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u8"}}],"bindings":[]}}}}}}}},"2:13377:35997":{"id":"2:13377:35997","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12341:471","self::pattern":"2:12955:21793"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12961:15534","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12961:15534","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12976:21791","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:686:699":{"id":"0:686:699","crate_id":0,"name":"eq","span":{"filename":"src/lib.rs","begin":[305,26],"end":[305,35]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Protocol","id":"0:676:2448","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:3209:247-0:622:2399":{"id":"a:2:3209:247-0:622:2399","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3209:247","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"SockAddr","id":"0:622:2399","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:3828-0:114:2400":{"id":"b:2:3828-0:114:2400","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:32306:4430","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3826:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Socket","id":"0:114:2400","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3830:1822"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:249:3586":{"id":"0:249:3586","crate_id":0,"name":"read","span":{"filename":"src/socket.rs","begin":[2155,4],"end":[2159,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["buf",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3059:226","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:554:832":{"id":"0:554:832","crate_id":0,"name":"from","span":{"filename":"src/lib.rs","begin":[352,4],"end":[354,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["p",{"resolved_path":{"name":"c_int","id":"20:44:2398","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Protocol","id":"0:676:2448","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13365:35995":{"id":"2:13365:35995","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"1:12341:471","self::pattern":"2:12955:21793"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12961:15534","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12961:15534","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"2:12981:21790","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:740:11125":{"id":"5:740:11125","crate_id":5,"name":"Owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"0:158:3156":{"id":"0:158:3156","crate_id":0,"name":"send_to_vectored_with_flags","span":{"filename":"src/socket.rs","begin":[735,4],"end":[742,5]},"visibility":"public","docs":"Identical to [`send_to_vectored`] but allows for specification of\narbitrary flags to the underlying `sendmsg`/`WSASendTo` call.\n\n[`send_to_vectored`]: Socket::send_to_vectored","links":{"Socket::send_to_vectored":"0:157:3155"},"attrs":["#[cfg(not(target_os = \"redox\"))]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["bufs",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"IoSlice","id":"1:8488:2343","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}}],["addr",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"SockAddr","id":"0:622:2399","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],["flags",{"resolved_path":{"name":"c_int","id":"20:44:2398","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3059:226","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13324:31712":{"id":"2:13324:31712","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"2:12955:21793","`DoubleEndedIterator`":"2:8333:129","prim@char":"1:12341:471","str::split":"2:13318:28224"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplit","id":"2:43983:11168","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12961:15534","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12961:15534","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12976:21791","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:42167:10679-0:627:2402":{"id":"a:2:42167:10679-0:627:2402","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:42167:10679","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"InterfaceIndexOrAddress","id":"0:627:2402","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:615:2573":{"id":"0:615:2573","crate_id":0,"name":"control_len","span":{"filename":"src/lib.rs","begin":[728,4],"end":[730,5]},"visibility":"public","docs":"Gets the length of the control buffer.\n\nCan be used to determine how much, if any, of the control buffer was filled by `recvmsg`.\n\nCorresponds to `msg_controllen` on Unix and `Control.len` on Windows.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5636:28166":{"id":"5:5636:28166","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"2:13392:28169"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7645:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3001-0:627:2402":{"id":"b:2:3001-0:627:2402","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2960:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2970:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"InterfaceIndexOrAddress","id":"0:627:2402","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3004:137","2:3005:1807"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:639:832":{"id":"0:639:832","crate_id":0,"name":"from","span":{"filename":"src/socket.rs","begin":[2210,0],"end":[2210,31]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["socket",{"resolved_path":{"name":"net::TcpListener","id":"1:3900:3591","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Socket","id":"0:114:2400","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:178:3247":{"id":"0:178:3247","crate_id":0,"name":"recv_buffer_size","span":{"filename":"src/socket.rs","begin":[1004,4],"end":[1009,5]},"visibility":"public","docs":"Get value for the `SO_RCVBUF` option on this socket.\n\nFor more information about this option, see [`set_recv_buffer_size`].\n\n[`set_recv_buffer_size`]: Socket::set_recv_buffer_size","links":{"Socket::set_recv_buffer_size":"0:180:3252"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3059:226","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:403":{"id":"0:403","crate_id":0,"name":null,"span":{"filename":"src/sys/unix.rs","begin":[554,0],"end":[609,1]},"visibility":"default","docs":"Unix-only API.","links":{},"attrs":["#[cfg(not(target_os = \"redox\"))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"crate::RecvFlags","id":"0:687:2478","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:404:3698","0:405:3704"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:634":{"id":"0:634","crate_id":0,"name":null,"span":{"filename":"src/socket.rs","begin":[824,9],"end":[824,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10384:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"InterfaceIndexOrAddress","id":"0:627:2402","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:635:802"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13383:35999":{"id":"2:13383:35999","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12341:471","self::pattern":"2:12955:21793"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12961:15534","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12961:15534","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12976:21791","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:222:3477":{"id":"0:222:3477","crate_id":0,"name":"set_multicast_hops_v6","span":{"filename":"src/socket.rs","begin":[1719,4],"end":[1728,5]},"visibility":"public","docs":"Set the value of the `IPV6_MULTICAST_HOPS` option for this socket\n\nIndicates the number of \"routers\" multicast packets will transit for\nthis socket. The default value is 1 which means that multicast packets\ndon't leave the local network unless explicitly requested.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["hops",{"primitive":"u32"}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3059:226","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:642":{"id":"0:642","crate_id":0,"name":null,"span":{"filename":"src/socket.rs","begin":[2212,0],"end":[2212,29]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2963:144","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Socket","id":"0:114:2400","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"net::TcpStream","id":"1:3897:2899","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:643:832"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2990-0:114:2400":{"id":"b:2:2990-0:114:2400","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2963:144","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Socket","id":"0:114:2400","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2992:832"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:437:3773":{"id":"0:437:3773","crate_id":0,"name":"as_unix","span":{"filename":"src/sys/unix.rs","begin":[849,4],"end":[854,5]},"visibility":"public","docs":"Returns this address as Unix `SocketAddr` if it is an `AF_UNIX` pathname\naddress, otherwise returns `None`.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:42073:194","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"std::os::unix::net::SocketAddr","id":"1:8599:2348","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:675:699":{"id":"0:675:699","crate_id":0,"name":"eq","span":{"filename":"src/lib.rs","begin":[251,26],"end":[251,35]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Type","id":"0:665:2426","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13301:31720":{"id":"2:13301:31720","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"1:12341:471","self::pattern":"2:12955:21793"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12961:15534","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2713-0:600:2560":{"id":"b:2:2713-0:600:2560","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32306:4430","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2707:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"MsgHdrMut","id":"0:600:2560","args":{"angle_bracketed":{"args":[{"lifetime":"'addr"},{"lifetime":"'bufs"},{"lifetime":"'control"}],"bindings":[]}}}},"items":["2:2715:4328"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:133:34":{"id":"0:133:34","crate_id":0,"name":"type","span":{"filename":"src/socket.rs","begin":[342,4],"end":[344,5]},"visibility":"public","docs":"Returns the [`Type`] of this socket by checking the `SO_TYPE` option on\nthis socket.","links":{"`Type`":"0:665:2426"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3059:226","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Type","id":"0:665:2426","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2715:4328":{"id":"2:2715:4328","crate_id":2,"name":"borrow","span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[rustc_diagnostic_item = \"noop_method_borrow\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:523:832":{"id":"0:523:832","crate_id":0,"name":"from","span":{"filename":"src/sys/unix.rs","begin":[3119,4],"end":[3122,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["fd",{"resolved_path":{"name":"OwnedFd","id":"1:4975:3654","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"crate::Socket","id":"0:114:2400","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2996-0:654:2410":{"id":"b:2:2996-0:654:2410","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2970:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2966:258","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Domain","id":"0:654:2410","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2999:137","2:3000:1809"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:240:3577":{"id":"0:240:3577","crate_id":0,"name":"nodelay","span":{"filename":"src/socket.rs","begin":[2109,4],"end":[2114,5]},"visibility":"public","docs":"Get the value of the `TCP_NODELAY` option on this socket.\n\nFor more information about this option, see [`set_nodelay`].\n\n[`set_nodelay`]: Socket::set_nodelay","links":{"Socket::set_nodelay":"0:242:3585"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3059:226","args":{"angle_bracketed":{"args":[{"type":{"primitive":"bool"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3828-0:580:2523":{"id":"b:2:3828-0:580:2523","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:32306:4430","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3826:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MsgHdr","id":"0:580:2523","args":{"angle_bracketed":{"args":[{"lifetime":"'addr"},{"lifetime":"'bufs"},{"lifetime":"'control"}],"bindings":[]}}}},"items":["2:3830:1822"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:3001-0:273:2401":{"id":"b:2:3001-0:273:2401","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2960:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2970:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"SockRef","id":"0:273:2401","args":{"angle_bracketed":{"args":[{"lifetime":"'s"}],"bindings":[]}}}},"items":["2:3004:137","2:3005:1807"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:550:2456":{"id":"0:550:2456","crate_id":0,"name":"TCP","span":{"filename":"src/lib.rs","begin":[316,4],"end":[316,57]},"visibility":"public","docs":"Protocol corresponding to `TCP`.","links":{},"attrs":[],"deprecation":null,"inner":{"assoc_const":{"type":{"resolved_path":{"name":"Protocol","id":"0:676:2448","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"default":"_"}}},"a:2:32364:4431-0:698:2498":{"id":"a:2:32364:4431-0:698:2498","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32364:4431","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TcpKeepalive","id":"0:698:2498","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2990-0:600:2560":{"id":"b:2:2990-0:600:2560","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2963:144","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"MsgHdrMut","id":"0:600:2560","args":{"angle_bracketed":{"args":[{"lifetime":"'addr"},{"lifetime":"'bufs"},{"lifetime":"'control"}],"bindings":[]}}}},"items":["2:2992:832"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2716-0:665:2426":{"id":"b:2:2716-0:665:2426","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32306:4430","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2710:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Type","id":"0:665:2426","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2718:27758"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:620:802":{"id":"0:620:802","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[735,4],"end":[737,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["fmt",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"2:10358:143","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"2:10339:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13278:3957":{"id":"2:13278:3957","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:42075:191"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:42073:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:11045:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:11045:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3001-0:698:2498":{"id":"b:2:3001-0:698:2498","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2960:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2970:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"TcpKeepalive","id":"0:698:2498","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3004:137","2:3005:1807"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:545":{"id":"0:545","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[292,0],"end":[296,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2963:144","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Type","id":"0:665:2426","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"libc::c_int","id":"20:44:2398","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:546:832"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:5:738-0:676:2448":{"id":"b:5:738-0:676:2448","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2729:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:734:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Protocol","id":"0:676:2448","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:740:11125","5:741:11126","5:742:11127"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:3001-0:622:2399":{"id":"b:2:3001-0:622:2399","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2960:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2970:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"SockAddr","id":"0:622:2399","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3004:137","2:3005:1807"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:170:3209":{"id":"0:170:3209","crate_id":0,"name":"linger","span":{"filename":"src/socket.rs","begin":[909,4],"end":[914,5]},"visibility":"public","docs":"Get the value of the `SO_LINGER` option on this socket.\n\nFor more information about this option, see [`set_linger`].\n\n[`set_linger`]: Socket::set_linger","links":{"Socket::set_linger":"0:171:3221"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3059:226","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Option","id":"2:42073:194","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Duration","id":"2:44733:130","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:223:3489":{"id":"0:223:3489","crate_id":0,"name":"multicast_if_v6","span":{"filename":"src/socket.rs","begin":[1772,4],"end":[1777,5]},"visibility":"public","docs":"Get the value of the `IPV6_MULTICAST_IF` option for this socket.\n\nFor more information about this option, see [`set_multicast_if_v6`].\n\n[`set_multicast_if_v6`]: Socket::set_multicast_if_v6","links":{"Socket::set_multicast_if_v6":"0:225:3495"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3059:226","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u32"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:649:802":{"id":"0:649:802","crate_id":0,"name":"fmt","span":{"filename":"src/sys/unix.rs","begin":[379,0],"end":[394,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"std::fmt::Formatter","id":"2:10358:143","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"std::fmt::Result","id":"2:10339:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:42167:10679-0:654:2410":{"id":"a:2:42167:10679-0:654:2410","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:42167:10679","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Domain","id":"0:654:2410","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:157:3155":{"id":"0:157:3155","crate_id":0,"name":"send_to_vectored","span":{"filename":"src/socket.rs","begin":[725,4],"end":[727,5]},"visibility":"public","docs":"Send data to a peer listening on `addr`. Returns the amount of bytes\nwritten.\n\nAdditional documentation can be found in manual of the OS:\n\n * DragonFly BSD: <https://man.dragonflybsd.org/?command=sendmsg&section=2>\n * FreeBSD: <https://www.freebsd.org/cgi/man.cgi?query=sendmsg&sektion=2>\n * Linux: <https://man7.org/linux/man-pages/man2/sendmsg.2.html>\n * macOS: <https://developer.apple.com/library/archive/documentation/System/Conceptual/ManPages_iPhoneOS/man2/sendmsg.2.html> (archived, actually for iOS)\n * NetBSD: <https://man.netbsd.org/sendmsg.2>\n * OpenBSD: <https://man.openbsd.org/sendmsg.2>\n * iOS: <https://developer.apple.com/library/archive/documentation/System/Conceptual/ManPages_iPhoneOS/man2/sendmsg.2.html> (archived)\n * illumos: <https://illumos.org/man/3SOCKET/sendmsg>\n * Windows: <https://docs.microsoft.com/en-us/windows/win32/api/winsock2/nf-winsock2-sendmsg>","links":{},"attrs":["#[cfg(not(target_os = \"redox\"))]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["bufs",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"IoSlice","id":"1:8488:2343","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}}],["addr",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"SockAddr","id":"0:622:2399","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3059:226","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:538":{"id":"0:538","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[236,0],"end":[240,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2963:144","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Domain","id":"0:654:2410","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"libc::c_int","id":"20:44:2398","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:539:832"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:32364:4431-0:273:2401":{"id":"a:2:32364:4431-0:273:2401","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'s","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32364:4431","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"SockRef","id":"0:273:2401","args":{"angle_bracketed":{"args":[{"lifetime":"'s"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:637:832":{"id":"0:637:832","crate_id":0,"name":"from","span":{"filename":"src/socket.rs","begin":[2209,0],"end":[2209,29]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["socket",{"resolved_path":{"name":"net::TcpStream","id":"1:3897:2899","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Socket","id":"0:114:2400","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:559:2488":{"id":"0:559:2488","crate_id":0,"name":"MaybeUninitSlice","span":{"filename":"src/lib.rs","begin":[390,0],"end":[390,59]},"visibility":"public","docs":"A version of [`IoSliceMut`] that allows the buffer to be uninitialised.\n\n[`IoSliceMut`]: std::io::IoSliceMut","links":{"std::io::IoSliceMut":"1:3604:2865"},"attrs":["#[repr(transparent)]"],"deprecation":null,"inner":{"struct":{"kind":{"tuple":[null]},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"impls":["0:566","a:2:42167:10679-0:559:2488","a:2:3244:4427-0:559:2488","a:2:3209:247-0:559:2488","a:2:42168:10678-0:559:2488","a:2:32364:4431-0:559:2488","a:2:32305:237-0:559:2488","b:2:2713-0:559:2488","b:2:2990-0:559:2488","b:2:2716-0:559:2488","b:2:3828-0:559:2488","b:2:2996-0:559:2488","b:2:2986-0:559:2488","b:2:3001-0:559:2488","0:569","0:563","0:573"]}}},"b:2:2990-0:654:2410":{"id":"b:2:2990-0:654:2410","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2963:144","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Domain","id":"0:654:2410","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2992:832"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:527-0:622:2399":{"id":"0:527-0:622:2399","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[186,0],"end":[186,27]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"sockaddr::SockAddr","name":"SockAddr","id":"0:622:2399","glob":false}}},"0:529-0:273:2401":{"id":"0:529-0:273:2401","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[188,0],"end":[188,25]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"sockref::SockRef","name":"SockRef","id":"0:273:2401","glob":false}}},"0:62:2811":{"id":"0:62:2811","crate_id":0,"name":"as_socket_ipv6","span":{"filename":"src/sockaddr.rs","begin":[251,4],"end":[256,5]},"visibility":"public","docs":"Returns this address as a [`SocketAddrV6`] if it is in the `AF_INET6`\nfamily.","links":{"`SocketAddrV6`":"2:42053:2694"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:42073:194","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"SocketAddrV6","id":"2:42053:2694","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2990-0:665:2426":{"id":"b:2:2990-0:665:2426","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2963:144","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Type","id":"0:665:2426","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2992:832"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2716-0:600:2560":{"id":"b:2:2716-0:600:2560","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32306:4430","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2710:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"MsgHdrMut","id":"0:600:2560","args":{"angle_bracketed":{"args":[{"lifetime":"'addr"},{"lifetime":"'bufs"},{"lifetime":"'control"}],"bindings":[]}}}},"items":["2:2718:27758"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:586":{"id":"0:586","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[607,0],"end":[654,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(target_os = \"redox\"))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'addr","kind":{"lifetime":{"outlives":[]}}},{"name":"'bufs","kind":{"lifetime":{"outlives":[]}}},{"name":"'control","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"MsgHdr","id":"0:580:2523","args":{"angle_bracketed":{"args":[{"lifetime":"'addr"},{"lifetime":"'bufs"},{"lifetime":"'control"}],"bindings":[]}}}},"items":["0:590:1178","0:591:2537","0:592:2543","0:593:2549","0:594:2553"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:702":{"id":"0:702","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[426,9],"end":[426,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10384:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TcpKeepalive","id":"0:698:2498","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:703:802"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:242:3585":{"id":"0:242:3585","crate_id":0,"name":"set_nodelay","span":{"filename":"src/socket.rs","begin":[2123,4],"end":[2132,5]},"visibility":"public","docs":"Set the value of the `TCP_NODELAY` option on this socket.\n\nIf set, this option disables the Nagle algorithm. This means that\nsegments are always sent as soon as possible, even if there is only a\nsmall amount of data. When not set, data is buffered until there is a\nsufficient amount to send out, thereby avoiding the frequent sending of\nsmall packets.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["nodelay",{"primitive":"bool"}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3059:226","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:124:2935":{"id":"0:124:2935","crate_id":0,"name":"bind","span":{"filename":"src/socket.rs","begin":[186,4],"end":[188,5]},"visibility":"public","docs":"Binds this socket to the specified address.\n\nThis function directly corresponds to the `bind(2)` function on Windows\nand Unix.\n\nAdditional documentation can be found in manual of the OS:\n\n * DragonFly BSD: <https://man.dragonflybsd.org/?command=bind&section=2>\n * FreeBSD: <https://www.freebsd.org/cgi/man.cgi?query=bind&sektion=2>\n * Linux: <https://man7.org/linux/man-pages/man2/bind.2.html>\n * macOS: <https://developer.apple.com/library/archive/documentation/System/Conceptual/ManPages_iPhoneOS/man2/bind.2.html> (archived, actually for iOS)\n * NetBSD: <https://man.netbsd.org/bind.2>\n * OpenBSD: <https://man.openbsd.org/bind.2>\n * iOS: <https://developer.apple.com/library/archive/documentation/System/Conceptual/ManPages_iPhoneOS/man2/bind.2.html> (archived)\n * illumos: <https://illumos.org/man/3SOCKET/bind>\n * Windows: <https://docs.microsoft.com/en-us/windows/win32/api/winsock2/nf-winsock2-bind>","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["address",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"SockAddr","id":"0:622:2399","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3059:226","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2986-0:559:2488":{"id":"b:2:2986-0:559:2488","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2963:144","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2960:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"MaybeUninitSlice","id":"0:559:2488","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:2989:2815"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13371:27770":{"id":"2:13371:27770","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns the substring after the prefix,\nwrapped in `Some`. Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12341:471","self::pattern":"2:12955:21793"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["prefix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42073:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12961:15534","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:599:802":{"id":"0:599:802","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[658,4],"end":[660,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["fmt",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"2:10358:143","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"2:10339:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:691":{"id":"0:691","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[368,15],"end":[368,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2729:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RecvFlags","id":"0:687:2478","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:692:475"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:551:2459":{"id":"0:551:2459","crate_id":0,"name":"UDP","span":{"filename":"src/lib.rs","begin":[319,4],"end":[319,57]},"visibility":"public","docs":"Protocol corresponding to `UDP`.","links":{},"attrs":[],"deprecation":null,"inner":{"assoc_const":{"type":{"resolved_path":{"name":"Protocol","id":"0:676:2448","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"default":"_"}}},"0:200:3396":{"id":"0:200:3396","crate_id":0,"name":"multicast_if_v4","span":{"filename":"src/socket.rs","begin":[1453,4],"end":[1457,5]},"visibility":"public","docs":"Get the value of the `IP_MULTICAST_IF` option for this socket.\n\nFor more information about this option, see [`set_multicast_if_v4`].\n\n[`set_multicast_if_v4`]: Socket::set_multicast_if_v4","links":{"Socket::set_multicast_if_v4":"0:201:3400"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3059:226","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Ipv4Addr","id":"2:41835:2830","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:169:3205":{"id":"0:169:3205","crate_id":0,"name":"set_keepalive","span":{"filename":"src/socket.rs","begin":[893,4],"end":[902,5]},"visibility":"public","docs":"Set value for the `SO_KEEPALIVE` option on this socket.\n\nEnable sending of keep-alive messages on connection-oriented sockets.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["keepalive",{"primitive":"bool"}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3059:226","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:190:3290":{"id":"0:190:3290","crate_id":0,"name":"set_write_timeout","span":{"filename":"src/socket.rs","begin":[1109,4],"end":[1111,5]},"visibility":"public","docs":"Set value for the `SO_SNDTIMEO` option on this socket.\n\nIf `timeout` is `None`, then `write` and `send` calls will block\nindefinitely.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["duration",{"resolved_path":{"name":"Option","id":"2:42073:194","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Duration","id":"2:44733:130","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3059:226","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:533:2415":{"id":"0:533:2415","crate_id":0,"name":"IPV6","span":{"filename":"src/lib.rs","begin":[216,4],"end":[216,51]},"visibility":"public","docs":"Domain for IPv6 communication, corresponding to `AF_INET6`.","links":{},"attrs":[],"deprecation":null,"inner":{"assoc_const":{"type":{"resolved_path":{"name":"Domain","id":"0:654:2410","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"default":"_"}}},"a:2:32364:4431-0:627:2402":{"id":"a:2:32364:4431-0:627:2402","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32364:4431","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"InterfaceIndexOrAddress","id":"0:627:2402","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:262:802":{"id":"0:262:802","crate_id":0,"name":"fmt","span":{"filename":"src/socket.rs","begin":[2200,4],"end":[2206,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"2:10358:143","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"2:10339:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:152:3134":{"id":"0:152:3134","crate_id":0,"name":"send_vectored","span":{"filename":"src/socket.rs","begin":[667,4],"end":[669,5]},"visibility":"public","docs":"Send data to the connected peer. Returns the amount of bytes written.","links":{},"attrs":["#[cfg(not(target_os = \"redox\"))]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["bufs",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"IoSlice","id":"1:8488:2343","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3059:226","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:592:2543":{"id":"0:592:2543","crate_id":0,"name":"with_buffers","span":{"filename":"src/lib.rs","begin":[631,4],"end":[635,5]},"visibility":"public","docs":"Set the buffer(s) of the message.\n\nCorresponds to setting `msg_iov` and `msg_iovlen` on Unix and `lpBuffers`\nand `dwBufferCount` on Windows.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["bufs",{"borrowed_ref":{"lifetime":"'bufs","mutable":false,"type":{"slice":{"resolved_path":{"name":"IoSlice","id":"1:8488:2343","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13271:35980":{"id":"2:13271:35980","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nIf `index` is greater than the length of the string, this returns the length of the string.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"2:13269:35979"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:654:2410":{"id":"0:654:2410","crate_id":0,"name":"Domain","span":{"filename":"src/lib.rs","begin":[209,0],"end":[209,25]},"visibility":"public","docs":"Specification of the communication domain for a socket.\n\nThis is a newtype wrapper around an integer which provides a nicer API in\naddition to an injection point for documentation. Convenience constants such\nas [`Domain::IPV4`], [`Domain::IPV6`], etc, are provided to avoid reaching\ninto libc for various constants.\n\nThis type is freely interconvertible with C's `int` type, however, if a raw\nvalue needs to be provided.","links":{"`Domain::IPV4`":"0:532:2412","`Domain::IPV6`":"0:533:2415"},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"tuple":[null]},"generics":{"params":[],"where_predicates":[]},"impls":["0:400","0:531","a:2:42167:10679-0:654:2410","a:2:3244:4427-0:654:2410","a:2:3209:247-0:654:2410","a:2:42168:10678-0:654:2410","a:2:32364:4431-0:654:2410","a:2:32305:237-0:654:2410","b:2:2713-0:654:2410","b:2:2990-0:654:2410","b:2:2716-0:654:2410","b:2:3828-0:654:2410","b:2:2996-0:654:2410","b:2:2986-0:654:2410","b:2:3001-0:654:2410","b:5:738-0:654:2410","0:657","0:658","0:538","0:662","0:663","0:648","0:660","0:536"]}}},"0:122:2920":{"id":"0:122:2920","crate_id":0,"name":"new_raw","span":{"filename":"src/socket.rs","begin":[140,4],"end":[143,5]},"visibility":"public","docs":"Creates a new socket ready to be configured.\n\nThis function corresponds to `socket(2)` on Unix and `WSASocketW` on\nWindows and simply creates a new socket, no other configuration is done.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["domain",{"resolved_path":{"name":"Domain","id":"0:654:2410","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}],["ty",{"resolved_path":{"name":"Type","id":"0:665:2426","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}],["protocol",{"resolved_path":{"name":"Option","id":"2:42073:194","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Protocol","id":"0:676:2448","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3059:226","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Socket","id":"0:114:2400","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3001-0:559:2488":{"id":"b:2:3001-0:559:2488","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2960:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2970:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"MaybeUninitSlice","id":"0:559:2488","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:3004:137","2:3005:1807"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13297:33549":{"id":"2:13297:33549","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"2:13296:33557"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitAsciiWhitespace","id":"2:44248:14768","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:42168:10678-0:273:2401":{"id":"a:2:42168:10678-0:273:2401","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'s","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:42168:10678","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"SockRef","id":"0:273:2401","args":{"angle_bracketed":{"args":[{"lifetime":"'s"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:13394:32861":{"id":"2:13394:32861","crate_id":2,"name":"trim_ascii_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\nassert_eq!(\"\\r hello world\\u{3000}\\n \".trim_ascii_end(), \"\\r hello world\\u{3000}\");\nassert_eq!(\"  \".trim_ascii_end(), \"\");\nassert_eq!(\"\".trim_ascii_end(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:1061:39634"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:704":{"id":"0:704","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[426,16],"end":[426,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2729:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TcpKeepalive","id":"0:698:2498","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:705:475"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:32305:237-0:559:2488":{"id":"a:2:32305:237-0:559:2488","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:32305:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MaybeUninitSlice","id":"0:559:2488","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:669":{"id":"0:669","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[251,15],"end":[251,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2729:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Type","id":"0:665:2426","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:670:475"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:3001-0:654:2410":{"id":"b:2:3001-0:654:2410","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2960:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2970:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Domain","id":"0:654:2410","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3004:137","2:3005:1807"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:626:475":{"id":"0:626:475","crate_id":0,"name":"clone","span":{"filename":"src/sockaddr.rs","begin":[20,9],"end":[20,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SockAddr","id":"0:622:2399","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:149:3054":{"id":"0:149:3054","crate_id":0,"name":"recvmsg","span":{"filename":"src/socket.rs","begin":[641,4],"end":[643,5]},"visibility":"public","docs":"Receive a message from a socket using a message structure.\n\nThis is not supported on Windows as calling `WSARecvMsg` (the `recvmsg`\nequivalent) is not straight forward on Windows. See\n<https://github.com/microsoft/Windows-classic-samples/blob/7cbd99ac1d2b4a0beffbaba29ea63d024ceff700/Samples/Win7Samples/netds/winsock/recvmsg/rmmc.cpp>\nfor an example (in C++).\n\nAdditional documentation can be found in manual of the OS:\n\n * DragonFly BSD: <https://man.dragonflybsd.org/?command=recvmsg&section=2>\n * FreeBSD: <https://www.freebsd.org/cgi/man.cgi?query=recvmsg&sektion=2>\n * Linux: <https://man7.org/linux/man-pages/man2/recvmsg.2.html>\n * macOS: <https://developer.apple.com/library/archive/documentation/System/Conceptual/ManPages_iPhoneOS/man2/recvmsg.2.html> (archived, actually for iOS)\n * NetBSD: <https://man.netbsd.org/recvmsg.2>\n * OpenBSD: <https://man.openbsd.org/recvmsg.2>\n * iOS: <https://developer.apple.com/library/archive/documentation/System/Conceptual/ManPages_iPhoneOS/man2/recvmsg.2.html> (archived)\n * illumos: <https://illumos.org/man/3SOCKET/recvmsg>\n * Windows: <https://docs.microsoft.com/en-us/windows/win32/api/winsock2/nf-winsock2-recvmsg>","links":{},"attrs":["#[cfg(all(unix, not(target_os = \"redox\")))]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["msg",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"MsgHdrMut","id":"0:600:2560","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"lifetime":"'_"},{"lifetime":"'_"}],"bindings":[]}}}}}}],["flags",{"resolved_path":{"name":"libc::c_int","id":"20:44:2398","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3059:226","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:622:2399":{"id":"0:622:2399","crate_id":0,"name":"SockAddr","span":{"filename":"src/sockaddr.rs","begin":[21,0],"end":[24,1]},"visibility":"public","docs":"The address of a socket.\n\n`SockAddr`s may be constructed directly to and from the standard library\n[`SocketAddr`], [`SocketAddrV4`], and [`SocketAddrV6`] types.","links":{"`SocketAddr`":"2:42013:2348","`SocketAddrV4`":"2:42035:2693","`SocketAddrV6`":"2:42053:2694"},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["0:42","0:430","a:2:42167:10679-0:622:2399","a:2:3244:4427-0:622:2399","a:2:3209:247-0:622:2399","a:2:42168:10678-0:622:2399","a:2:32364:4431-0:622:2399","a:2:32305:237-0:622:2399","b:2:2713-0:622:2399","b:2:2990-0:622:2399","b:2:2716-0:622:2399","b:2:3828-0:622:2399","b:2:2996-0:622:2399","b:2:2986-0:622:2399","b:2:3001-0:622:2399","b:5:738-0:622:2399","0:66","0:70","0:625","0:72","0:68","0:75","0:74","0:64"]}}},"0:537:832":{"id":"0:537:832","crate_id":0,"name":"from","span":{"filename":"src/lib.rs","begin":[231,4],"end":[233,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["d",{"resolved_path":{"name":"c_int","id":"20:44:2398","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Domain","id":"0:654:2410","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:232:3515":{"id":"0:232:3515","crate_id":0,"name":"only_v6","span":{"filename":"src/socket.rs","begin":[1851,4],"end":[1856,5]},"visibility":"public","docs":"Get the value of the `IPV6_V6ONLY` option for this socket.\n\nFor more information about this option, see [`set_only_v6`].\n\n[`set_only_v6`]: Socket::set_only_v6","links":{"Socket::set_only_v6":"0:234:3523"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3059:226","args":{"angle_bracketed":{"args":[{"type":{"primitive":"bool"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:181:3256":{"id":"0:181:3256","crate_id":0,"name":"read_timeout","span":{"filename":"src/socket.rs","begin":[1030,4],"end":[1032,5]},"visibility":"public","docs":"Get value for the `SO_RCVTIMEO` option on this socket.\n\nIf the returned timeout is `None`, then `read` and `recv` calls will\nblock indefinitely.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3059:226","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Option","id":"2:42073:194","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Duration","id":"2:44733:130","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2986-0:627:2402":{"id":"b:2:2986-0:627:2402","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2963:144","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2960:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"InterfaceIndexOrAddress","id":"0:627:2402","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2989:2815"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:705:475":{"id":"0:705:475","crate_id":0,"name":"clone","span":{"filename":"src/lib.rs","begin":[426,16],"end":[426,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"TcpKeepalive","id":"0:698:2498","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:210:3429":{"id":"0:210:3429","crate_id":0,"name":"set_ttl","span":{"filename":"src/socket.rs","begin":[1546,4],"end":[1548,5]},"visibility":"public","docs":"Set the value of the `IP_TTL` option for this socket.\n\nThis value sets the time-to-live field that is used in every packet sent\nfrom this socket.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["ttl",{"primitive":"u32"}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3059:226","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:140:3064":{"id":"0:140:3064","crate_id":0,"name":"recv_vectored","span":{"filename":"src/socket.rs","begin":[475,4],"end":[480,5]},"visibility":"public","docs":"Receives data on the socket from the remote address to which it is\nconnected. Unlike [`recv`] this allows passing multiple buffers.\n\nThe [`connect`] method will connect this socket to a remote address.\nThis method might fail if the socket is not connected.\n\nIn addition to the number of bytes read, this function returns the flags\nfor the received message. See [`RecvFlags`] for more information about\nthe returned flags.\n\nAdditional documentation can be found in manual of the OS:\n\n * DragonFly BSD: <https://man.dragonflybsd.org/?command=recvmsg&section=2>\n * FreeBSD: <https://www.freebsd.org/cgi/man.cgi?query=recvmsg&sektion=2>\n * Linux: <https://man7.org/linux/man-pages/man2/recvmsg.2.html>\n * macOS: <https://developer.apple.com/library/archive/documentation/System/Conceptual/ManPages_iPhoneOS/man2/recvmsg.2.html> (archived, actually for iOS)\n * NetBSD: <https://man.netbsd.org/recvmsg.2>\n * OpenBSD: <https://man.openbsd.org/recvmsg.2>\n * iOS: <https://developer.apple.com/library/archive/documentation/System/Conceptual/ManPages_iPhoneOS/man2/recvmsg.2.html> (archived)\n * illumos: <https://illumos.org/man/3SOCKET/recvmsg>\n * Windows: <https://docs.microsoft.com/en-us/windows/win32/api/winsock2/nf-winsock2-recvmsg>\n\n[`recv`]: Socket::recv\n[`connect`]: Socket::connect\n\n# Safety\n\nNormally casting a `IoSliceMut` to `MaybeUninitSlice` would be unsound,\nas that allows us to write uninitialised bytes to the buffer. However\nthis implementation promises to not write uninitialised bytes to the\n`bufs` and passes it directly to `recvmsg(2)` system call. This promise\nensures that this function can be called using `bufs` of type `&mut\n[IoSliceMut]`.\n\nNote that the [`io::Read::read_vectored`] implementation calls this\nfunction with `buf`s of type `&mut [IoSliceMut]`, allowing initialised\nbuffers to be used without using `unsafe`.","links":{"`RecvFlags`":"0:687:2478","Socket::recv":"0:137:3028","Socket::connect":"0:125:2941","`io::Read::read_vectored`":"1:3588:3587"},"attrs":["#[cfg(not(target_os = \"redox\"))]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["bufs",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"resolved_path":{"name":"MaybeUninitSlice","id":"0:559:2488","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3059:226","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"primitive":"usize"},{"resolved_path":{"name":"RecvFlags","id":"0:687:2478","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2990-0:627:2402":{"id":"b:2:2990-0:627:2402","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2963:144","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"InterfaceIndexOrAddress","id":"0:627:2402","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2992:832"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:682":{"id":"0:682","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[305,22],"end":[305,24]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"2:2768:134","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Protocol","id":"0:676:2448","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:3828-0:698:2498":{"id":"b:2:3828-0:698:2498","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:32306:4430","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3826:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TcpKeepalive","id":"0:698:2498","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3830:1822"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2986-0:273:2401":{"id":"b:2:2986-0:273:2401","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2963:144","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2960:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"SockRef","id":"0:273:2401","args":{"angle_bracketed":{"args":[{"lifetime":"'s"}],"bindings":[]}}}},"items":["2:2989:2815"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:628:3173":{"id":"0:628:3173","crate_id":0,"name":"Index","span":{"filename":"src/socket.rs","begin":[827,4],"end":[827,14]},"visibility":"default","docs":"An interface index.","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":{"tuple":["0:630:1974"]},"discriminant":null}}},"0:676:2448":{"id":"0:676:2448","crate_id":0,"name":"Protocol","span":{"filename":"src/lib.rs","begin":[306,0],"end":[306,27]},"visibility":"public","docs":"Protocol specification used for creating sockets via `Socket::new`.\n\nThis is a newtype wrapper around an integer which provides a nicer API in\naddition to an injection point for documentation.\n\nThis type is freely interconvertible with C's `int` type, however, if a raw\nvalue needs to be provided.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"tuple":[null]},"generics":{"params":[],"where_predicates":[]},"impls":["0:547","a:2:42167:10679-0:676:2448","a:2:3244:4427-0:676:2448","a:2:3209:247-0:676:2448","a:2:42168:10678-0:676:2448","a:2:32364:4431-0:676:2448","a:2:32305:237-0:676:2448","b:2:2713-0:676:2448","b:2:2990-0:676:2448","b:2:2716-0:676:2448","b:2:3828-0:676:2448","b:2:2996-0:676:2448","b:2:2986-0:676:2448","b:2:3001-0:676:2448","b:5:738-0:676:2448","0:555","0:682","0:553","0:680","0:652","0:679","0:685","0:684"]}}},"0:590:1178":{"id":"0:590:1178","crate_id":0,"name":"new","span":{"filename":"src/lib.rs","begin":[610,4],"end":[616,5]},"visibility":"public","docs":"Create a new `MsgHdr` with all empty/zero fields.","links":{},"attrs":["#[allow(clippy::new_without_default)]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"MsgHdr","id":"0:580:2523","args":{"angle_bracketed":{"args":[{"lifetime":"'addr"},{"lifetime":"'bufs"},{"lifetime":"'control"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:131:2990":{"id":"0:131:2990","crate_id":0,"name":"local_addr","span":{"filename":"src/socket.rs","begin":[321,4],"end":[323,5]},"visibility":"public","docs":"Returns the socket address of the local half of this socket.\n\nThis function directly corresponds to the `getsockname(2)` function on\nWindows and Unix.\n\nAdditional documentation can be found in manual of the OS:\n\n * DragonFly BSD: <https://man.dragonflybsd.org/?command=getsockname&section=2>\n * FreeBSD: <https://www.freebsd.org/cgi/man.cgi?query=getsockname&sektion=2>\n * Linux: <https://man7.org/linux/man-pages/man2/getsockname.2.html>\n * macOS: <https://developer.apple.com/library/archive/documentation/System/Conceptual/ManPages_iPhoneOS/man2/getsockname.2.html> (archived, actually for iOS)\n * NetBSD: <https://man.netbsd.org/getsockname.2>\n * OpenBSD: <https://man.openbsd.org/getsockname.2>\n * iOS: <https://developer.apple.com/library/archive/documentation/System/Conceptual/ManPages_iPhoneOS/man2/getsockname.2.html> (archived)\n * illumos: <https://illumos.org/man/3SOCKET/getsockname>\n * Windows: <https://docs.microsoft.com/en-us/windows/win32/api/winsock2/nf-winsock2-getsockname>\n\n# Notes\n\nDepending on the OS this may return an error if the socket is not\n[bound].\n\n[bound]: Socket::bind","links":{"Socket::bind":"0:124:2935"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3059:226","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"SockAddr","id":"0:622:2399","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2716-0:580:2523":{"id":"b:2:2716-0:580:2523","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32306:4430","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2710:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"MsgHdr","id":"0:580:2523","args":{"angle_bracketed":{"args":[{"lifetime":"'addr"},{"lifetime":"'bufs"},{"lifetime":"'control"}],"bindings":[]}}}},"items":["2:2718:27758"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:3244:4427-0:654:2410":{"id":"a:2:3244:4427-0:654:2410","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"2:3244:4427","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Domain","id":"0:654:2410","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:518":{"id":"0:518","crate_id":0,"name":null,"span":{"filename":"src/sys/unix.rs","begin":[3103,0],"end":[3108,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2963:144","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Socket","id":"0:114:2400","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"std::os::unix::io::OwnedFd","id":"1:4975:3654","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:519:832"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13298:28225":{"id":"2:13298:28225","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nNote that any carriage return (`\\r`) not immediately followed by a\nline feed (`\\n`) does not split a line. These carriage returns are\nthereby included in the produced lines.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\r\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\n// Trailing carriage return is included in the last line\nassert_eq!(Some(\"baz\\r\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line does not require any ending:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Lines","id":"2:44219:4386","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:514":{"id":"0:514","crate_id":0,"name":null,"span":{"filename":"src/sys/unix.rs","begin":[3088,0],"end":[3093,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"AsFd","id":"1:4998:3594","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"crate::Socket","id":"0:114:2400","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:515:3641"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2990-0:687:2478":{"id":"b:2:2990-0:687:2478","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2963:144","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RecvFlags","id":"0:687:2478","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2992:832"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:126:2961":{"id":"0:126:2961","crate_id":0,"name":"connect_timeout","span":{"filename":"src/socket.rs","begin":[228,4],"end":[242,5]},"visibility":"public","docs":"Initiate a connection on this socket to the specified address, only\nonly waiting for a certain period of time for the connection to be\nestablished.\n\nUnlike many other methods on `Socket`, this does *not* correspond to a\nsingle C function. It sets the socket to nonblocking mode, connects via\nconnect(2), and then waits for the connection to complete with poll(2)\non Unix and select on Windows. When the connection is complete, the\nsocket is set back to blocking mode. On Unix, this will loop over\n`EINTR` errors.\n\n# Warnings\n\nThe non-blocking state of the socket is overridden by this function -\nit will be returned in blocking mode on success, and in an indeterminate\nstate on failure.\n\nIf the connection request times out, it may still be processing in the\nbackground - a second call to `connect` or `connect_timeout` may fail.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["addr",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"SockAddr","id":"0:622:2399","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],["timeout",{"resolved_path":{"name":"Duration","id":"2:44733:130","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3059:226","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:171:3221":{"id":"0:171:3221","crate_id":0,"name":"set_linger","span":{"filename":"src/socket.rs","begin":[930,4],"end":[933,5]},"visibility":"public","docs":"Set value for the `SO_LINGER` option on this socket.\n\nIf `linger` is not `None`, a close(2) or shutdown(2) will not return\nuntil all queued messages for the socket have been successfully sent or\nthe linger timeout has been reached. Otherwise, the call returns\nimmediately and the closing is done in the background. When the socket\nis closed as part of exit(2), it always lingers in the background.\n\n# Notes\n\nOn most OSs the duration only has a precision of seconds and will be\nsilently truncated.\n\nOn Apple platforms (e.g. macOS, iOS, etc) this uses `SO_LINGER_SEC`.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["linger",{"resolved_path":{"name":"Option","id":"2:42073:194","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Duration","id":"2:44733:130","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3059:226","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13380:35998":{"id":"2:13380:35998","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12341:471","self::pattern":"2:12955:21793"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12961:15534","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:141:3065":{"id":"0:141:3065","crate_id":0,"name":"recv_vectored_with_flags","span":{"filename":"src/socket.rs","begin":[495,4],"end":[501,5]},"visibility":"public","docs":"Identical to [`recv_vectored`] but allows for specification of arbitrary\nflags to the underlying `recvmsg`/`WSARecv` call.\n\n[`recv_vectored`]: Socket::recv_vectored\n\n# Safety\n\n`recv_from_vectored` makes the same safety guarantees regarding `bufs`\nas [`recv_vectored`].\n\n[`recv_vectored`]: Socket::recv_vectored","links":{"Socket::recv_vectored":"0:140:3064"},"attrs":["#[cfg(not(target_os = \"redox\"))]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["bufs",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"resolved_path":{"name":"MaybeUninitSlice","id":"0:559:2488","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}}],["flags",{"resolved_path":{"name":"c_int","id":"20:44:2398","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3059:226","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"primitive":"usize"},{"resolved_path":{"name":"RecvFlags","id":"0:687:2478","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:143:3084":{"id":"0:143:3084","crate_id":0,"name":"recv_from","span":{"filename":"src/socket.rs","begin":[530,4],"end":[532,5]},"visibility":"public","docs":"Receives data from the socket. On success, returns the number of bytes\nread and the address from whence the data came.\n\nAdditional documentation can be found in manual of the OS:\n\n * DragonFly BSD: <https://man.dragonflybsd.org/?command=recvfrom&section=2>\n * FreeBSD: <https://www.freebsd.org/cgi/man.cgi?query=recvfrom&sektion=2>\n * Linux: <https://man7.org/linux/man-pages/man2/recvfrom.2.html>\n * macOS: <https://developer.apple.com/library/archive/documentation/System/Conceptual/ManPages_iPhoneOS/man2/recvfrom.2.html> (archived, actually for iOS)\n * NetBSD: <https://man.netbsd.org/recvfrom.2>\n * OpenBSD: <https://man.openbsd.org/recvfrom.2>\n * iOS: <https://developer.apple.com/library/archive/documentation/System/Conceptual/ManPages_iPhoneOS/man2/recvfrom.2.html> (archived)\n * illumos: <https://illumos.org/man/3SOCKET/recvfrom>\n * Windows: <https://docs.microsoft.com/en-us/windows/win32/api/winsock2/nf-winsock2-recvfrom>\n\n# Safety\n\n`recv_from` makes the same safety guarantees regarding the `buf`fer as\n[`recv`].\n\n[`recv`]: Socket::recv","links":{"Socket::recv":"0:137:3028"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["buf",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"resolved_path":{"name":"MaybeUninit","id":"2:30688:2346","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u8"}}],"bindings":[]}}}}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3059:226","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"primitive":"usize"},{"resolved_path":{"name":"SockAddr","id":"0:622:2399","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3828-0:273:2401":{"id":"b:2:3828-0:273:2401","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:32306:4430","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3826:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"SockRef","id":"0:273:2401","args":{"angle_bracketed":{"args":[{"lifetime":"'s"}],"bindings":[]}}}},"items":["2:3830:1822"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:404:3698":{"id":"0:404:3698","crate_id":0,"name":"is_end_of_record","span":{"filename":"src/sys/unix.rs","begin":[565,4],"end":[567,5]},"visibility":"public","docs":"Check if the message terminates a record.\n\nNot all socket types support the notion of records. For socket types\nthat do support it (such as [`SEQPACKET`]), a record is terminated by\nsending a message with the end-of-record flag set.\n\nOn Unix this corresponds to the `MSG_EOR` flag.\n\n[`SEQPACKET`]: Type::SEQPACKET","links":{},"attrs":["#[cfg(not(target_os = \"espidf\"))]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13333:31714":{"id":"2:13333:31714","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"1:12341:471","self::pattern":"2:12955:21793","str::rsplitn":"2:13336:31716"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitN","id":"2:44069:11172","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12961:15534","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:136:3022":{"id":"0:136:3022","crate_id":0,"name":"shutdown","span":{"filename":"src/socket.rs","begin":[394,4],"end":[396,5]},"visibility":"public","docs":"Shuts down the read, write, or both halves of this connection.\n\nThis function will cause all pending and future I/O on the specified\nportions to return immediately with an appropriate value.\n\nAdditional documentation can be found in manual of the OS:\n\n * DragonFly BSD: <https://man.dragonflybsd.org/?command=shutdown&section=2>\n * FreeBSD: <https://www.freebsd.org/cgi/man.cgi?query=shutdown&sektion=2>\n * Linux: <https://man7.org/linux/man-pages/man2/shutdown.2.html>\n * macOS: <https://developer.apple.com/library/archive/documentation/System/Conceptual/ManPages_iPhoneOS/man2/shutdown.2.html> (archived, actually for iOS)\n * NetBSD: <https://man.netbsd.org/shutdown.2>\n * OpenBSD: <https://man.openbsd.org/shutdown.2>\n * iOS: <https://developer.apple.com/library/archive/documentation/System/Conceptual/ManPages_iPhoneOS/man2/shutdown.2.html> (archived)\n * illumos: <https://illumos.org/man/3SOCKET/shutdown>\n * Windows: <https://docs.microsoft.com/en-us/windows/win32/api/winsock2/nf-winsock2-shutdown>","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["how",{"resolved_path":{"name":"Shutdown","id":"1:8565:2866","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3059:226","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:696":{"id":"0:696","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[368,26],"end":[368,35]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"2:2763:201","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RecvFlags","id":"0:687:2478","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:697:699"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:166:3193":{"id":"0:166:3193","crate_id":0,"name":"take_error","span":{"filename":"src/socket.rs","begin":[870,4],"end":[876,5]},"visibility":"public","docs":"Get the value of the `SO_ERROR` option on this socket.\n\nThis will retrieve the stored error in the underlying socket, clearing\nthe field in the process. This can be useful for checking errors between\ncalls.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3059:226","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Option","id":"2:42073:194","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"io::Error","id":"1:3061:137","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:32305:237-0:114:2400":{"id":"a:2:32305:237-0:114:2400","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:32305:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Socket","id":"0:114:2400","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:616":{"id":"0:616","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[734,0],"end":[738,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(target_os = \"redox\"))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'name","kind":{"lifetime":{"outlives":[]}}},{"name":"'bufs","kind":{"lifetime":{"outlives":[]}}},{"name":"'control","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10384:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MsgHdrMut","id":"0:600:2560","args":{"angle_bracketed":{"args":[{"lifetime":"'name"},{"lifetime":"'bufs"},{"lifetime":"'control"}],"bindings":[]}}}},"items":["0:620:802"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:49:1876":{"id":"0:49:1876","crate_id":0,"name":"unix","span":{"filename":"src/sockaddr.rs","begin":[149,4],"end":[154,5]},"visibility":"public","docs":"Constructs a `SockAddr` with the family `AF_UNIX` and the provided path.\n\nReturns an error if the path is longer than `SUN_LEN`.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["path",{"generic":"P"}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3059:226","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"SockAddr","id":"0:622:2399","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"2:2954:77","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Path","id":"1:5441:203","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:42168:10678-0:665:2426":{"id":"a:2:42168:10678-0:665:2426","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:42168:10678","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Type","id":"0:665:2426","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:685":{"id":"0:685","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[305,26],"end":[305,35]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"2:2763:201","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Protocol","id":"0:676:2448","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:686:699"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:53:2778":{"id":"0:53:2778","crate_id":0,"name":"domain","span":{"filename":"src/sockaddr.rs","begin":[172,4],"end":[174,5]},"visibility":"public","docs":"Returns this address's `Domain`.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Domain","id":"0:654:2410","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:555":{"id":"0:555","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[357,0],"end":[361,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2963:144","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Protocol","id":"0:676:2448","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"libc::c_int","id":"20:44:2398","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:556:832"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:670:475":{"id":"0:670:475","crate_id":0,"name":"clone","span":{"filename":"src/lib.rs","begin":[251,15],"end":[251,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Type","id":"0:665:2426","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:42168:10678-0:698:2498":{"id":"a:2:42168:10678-0:698:2498","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:42168:10678","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TcpKeepalive","id":"0:698:2498","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:193":{"id":"0:193","crate_id":0,"name":null,"span":{"filename":"src/socket.rs","begin":[1140,0],"end":[1646,1]},"visibility":"default","docs":"Socket options for IPv4 sockets, get/set using `IPPROTO_IP`.\n\nAdditional documentation can be found in documentation of the OS.\n* Linux: <https://man7.org/linux/man-pages/man7/ip.7.html>\n* Windows: <https://docs.microsoft.com/en-us/windows/win32/winsock/ipproto-ip-socket-options>","links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Socket","id":"0:114:2400","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:194:3340","0:195:3351","0:196:3356","0:197:3361","0:198:3366","0:199:3376","0:200:3396","0:201:3400","0:202:3404","0:204:3410","0:205:3414","0:207:3421","0:208:3416","0:210:3429","0:211:3435","0:212:3436","0:214:3445","0:215:3446"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2990-0:676:2448":{"id":"b:2:2990-0:676:2448","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2963:144","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Protocol","id":"0:676:2448","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2992:832"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13268:35978":{"id":"2:13268:35978","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13388:28163":{"id":"2:13388:28163","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:145:3092":{"id":"0:145:3092","crate_id":0,"name":"recv_from_vectored","span":{"filename":"src/socket.rs","begin":[561,4],"end":[566,5]},"visibility":"public","docs":"Receives data from the socket. Returns the amount of bytes read, the\n[`RecvFlags`] and the remote address from the data is coming. Unlike\n[`recv_from`] this allows passing multiple buffers.\n\nAdditional documentation can be found in manual of the OS:\n\n * DragonFly BSD: <https://man.dragonflybsd.org/?command=recvmsg&section=2>\n * FreeBSD: <https://www.freebsd.org/cgi/man.cgi?query=recvmsg&sektion=2>\n * Linux: <https://man7.org/linux/man-pages/man2/recvmsg.2.html>\n * macOS: <https://developer.apple.com/library/archive/documentation/System/Conceptual/ManPages_iPhoneOS/man2/recvmsg.2.html> (archived, actually for iOS)\n * NetBSD: <https://man.netbsd.org/recvmsg.2>\n * OpenBSD: <https://man.openbsd.org/recvmsg.2>\n * iOS: <https://developer.apple.com/library/archive/documentation/System/Conceptual/ManPages_iPhoneOS/man2/recvmsg.2.html> (archived)\n * illumos: <https://illumos.org/man/3SOCKET/recvmsg>\n * Windows: <https://docs.microsoft.com/en-us/windows/win32/api/winsock2/nf-winsock2-recvmsg>\n\n[`recv_from`]: Socket::recv_from\n\n# Safety\n\n`recv_from_vectored` makes the same safety guarantees regarding `bufs`\nas [`recv_vectored`].\n\n[`recv_vectored`]: Socket::recv_vectored","links":{"Socket::recv_vectored":"0:140:3064","`RecvFlags`":"0:687:2478","Socket::recv_from":"0:143:3084"},"attrs":["#[cfg(not(target_os = \"redox\"))]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["bufs",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"resolved_path":{"name":"MaybeUninitSlice","id":"0:559:2488","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3059:226","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"primitive":"usize"},{"resolved_path":{"name":"RecvFlags","id":"0:687:2478","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},{"resolved_path":{"name":"SockAddr","id":"0:622:2399","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:32364:4431-0:687:2478":{"id":"a:2:32364:4431-0:687:2478","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32364:4431","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RecvFlags","id":"0:687:2478","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:159:3138":{"id":"0:159:3138","crate_id":0,"name":"sendmsg","span":{"filename":"src/socket.rs","begin":[748,4],"end":[750,5]},"visibility":"public","docs":"Send a message on a socket using a message structure.\n\nAdditional documentation can be found in manual of the OS:\n\n * DragonFly BSD: <https://man.dragonflybsd.org/?command=sendmsg&section=2>\n * FreeBSD: <https://www.freebsd.org/cgi/man.cgi?query=sendmsg&sektion=2>\n * Linux: <https://man7.org/linux/man-pages/man2/sendmsg.2.html>\n * macOS: <https://developer.apple.com/library/archive/documentation/System/Conceptual/ManPages_iPhoneOS/man2/sendmsg.2.html> (archived, actually for iOS)\n * NetBSD: <https://man.netbsd.org/sendmsg.2>\n * OpenBSD: <https://man.openbsd.org/sendmsg.2>\n * iOS: <https://developer.apple.com/library/archive/documentation/System/Conceptual/ManPages_iPhoneOS/man2/sendmsg.2.html> (archived)\n * illumos: <https://illumos.org/man/3SOCKET/sendmsg>\n * Windows: <https://docs.microsoft.com/en-us/windows/win32/api/winsock2/nf-winsock2-sendmsg>","links":{},"attrs":["#[cfg(not(target_os = \"redox\"))]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["msg",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"MsgHdr","id":"0:580:2523","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"lifetime":"'_"},{"lifetime":"'_"}],"bindings":[]}}}}}}],["flags",{"resolved_path":{"name":"libc::c_int","id":"20:44:2398","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3059:226","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:51:2772":{"id":"0:51:2772","crate_id":0,"name":"set_length","span":{"filename":"src/sockaddr.rs","begin":[162,4],"end":[164,5]},"visibility":"public","docs":"Set the length of the address.\n\n# Safety\n\nCaller must ensure that the address up to `length` bytes are properly\ninitialised.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["length",{"resolved_path":{"name":"socklen_t","id":"20:1898:2704","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:42168:10678-0:559:2488":{"id":"a:2:42168:10678-0:559:2488","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:42168:10678","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MaybeUninitSlice","id":"0:559:2488","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:2:42168:10678-0:600:2560":{"id":"a:2:42168:10678-0:600:2560","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'addr","kind":{"lifetime":{"outlives":[]}}},{"name":"'bufs","kind":{"lifetime":{"outlives":[]}}},{"name":"'control","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:42168:10678","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MsgHdrMut","id":"0:600:2560","args":{"angle_bracketed":{"args":[{"lifetime":"'addr"},{"lifetime":"'bufs"},{"lifetime":"'control"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:13276:336":{"id":"2:13276:336","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"2:13277:2565","`u8`":"1:12360:1852"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2713-0:698:2498":{"id":"b:2:2713-0:698:2498","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32306:4430","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2707:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"TcpKeepalive","id":"0:698:2498","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2715:4328"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:646":{"id":"0:646","crate_id":0,"name":null,"span":{"filename":"src/socket.rs","begin":[2214,0],"end":[2214,29]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2963:144","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Socket","id":"0:114:2400","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"net::UdpSocket","id":"1:4002:3592","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:647:832"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:32305:237-0:627:2402":{"id":"a:2:32305:237-0:627:2402","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:32305:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"InterfaceIndexOrAddress","id":"0:627:2402","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:2:3244:4427-0:114:2400":{"id":"a:2:3244:4427-0:114:2400","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"2:3244:4427","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Socket","id":"0:114:2400","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:228:3505":{"id":"0:228:3505","crate_id":0,"name":"set_multicast_loop_v6","span":{"filename":"src/socket.rs","begin":[1811,4],"end":[1820,5]},"visibility":"public","docs":"Set the value of the `IPV6_MULTICAST_LOOP` option for this socket.\n\nControls whether this socket sees the multicast packets it sends itself.\nNote that this may not have any affect on IPv4 sockets.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["loop_v6",{"primitive":"bool"}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3059:226","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:659:475":{"id":"0:659:475","crate_id":0,"name":"clone","span":{"filename":"src/lib.rs","begin":[208,15],"end":[208,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Domain","id":"0:654:2410","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:651:802":{"id":"0:651:802","crate_id":0,"name":"fmt","span":{"filename":"src/sys/unix.rs","begin":[490,0],"end":[524,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"std::fmt::Formatter","id":"2:10358:143","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"std::fmt::Result","id":"2:10339:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:3244:4427-0:627:2402":{"id":"a:2:3244:4427-0:627:2402","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"2:3244:4427","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"InterfaceIndexOrAddress","id":"0:627:2402","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:635:802":{"id":"0:635:802","crate_id":0,"name":"fmt","span":{"filename":"src/socket.rs","begin":[824,9],"end":[824,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:10358:143","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:10339:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:3244:4427-0:687:2478":{"id":"a:2:3244:4427-0:687:2478","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"2:3244:4427","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RecvFlags","id":"0:687:2478","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:687:2478":{"id":"0:687:2478","crate_id":0,"name":"RecvFlags","span":{"filename":"src/lib.rs","begin":[369,0],"end":[369,28]},"visibility":"public","docs":"Flags for incoming messages.\n\nFlags provide additional information about incoming messages.","links":{},"attrs":["#[cfg(not(target_os = \"redox\"))]"],"deprecation":null,"inner":{"struct":{"kind":{"tuple":[null]},"generics":{"params":[],"where_predicates":[]},"impls":["0:403","0:557","a:2:42167:10679-0:687:2478","a:2:3244:4427-0:687:2478","a:2:3209:247-0:687:2478","a:2:42168:10678-0:687:2478","a:2:32364:4431-0:687:2478","a:2:32305:237-0:687:2478","b:2:2713-0:687:2478","b:2:2990-0:687:2478","b:2:2716-0:687:2478","b:2:3828-0:687:2478","b:2:2996-0:687:2478","b:2:2986-0:687:2478","b:2:3001-0:687:2478","b:5:738-0:687:2478","0:695","0:693","0:690","0:406","0:691","0:696"]}}},"b:2:2996-0:600:2560":{"id":"b:2:2996-0:600:2560","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2970:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2966:258","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"MsgHdrMut","id":"0:600:2560","args":{"angle_bracketed":{"args":[{"lifetime":"'addr"},{"lifetime":"'bufs"},{"lifetime":"'control"}],"bindings":[]}}}},"items":["2:2999:137","2:3000:1809"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13293:14770":{"id":"2:13293:14770","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:12341:471"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chars","id":"2:43935:14751","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13314:11065":{"id":"2:13314:11065","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"2:42075:191","prim@char":"1:12341:471","self::pattern":"2:12955:21793"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42073:194","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12961:15534","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12961:15534","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12976:21791","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2990-0:622:2399":{"id":"b:2:2990-0:622:2399","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2963:144","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"SockAddr","id":"0:622:2399","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2992:832"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:524":{"id":"0:524","crate_id":0,"name":null,"span":{"filename":"src/sys/unix.rs","begin":[3126,0],"end":[3130,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"FromRawFd","id":"1:4919:2868","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"crate::Socket","id":"0:114:2400","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:525:2364"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:42168:10678-0:622:2399":{"id":"a:2:42168:10678-0:622:2399","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:42168:10678","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"SockAddr","id":"0:622:2399","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2986-0:676:2448":{"id":"b:2:2986-0:676:2448","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2963:144","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2960:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Protocol","id":"0:676:2448","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2989:2815"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:3209:247-0:687:2478":{"id":"a:2:3209:247-0:687:2478","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3209:247","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RecvFlags","id":"0:687:2478","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:593:2549":{"id":"0:593:2549","crate_id":0,"name":"with_control","span":{"filename":"src/lib.rs","begin":[641,4],"end":[645,5]},"visibility":"public","docs":"Set the control buffer of the message.\n\nCorresponds to setting `msg_control` and `msg_controllen` on Unix and\n`Control` on Windows.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["buf",{"borrowed_ref":{"lifetime":"'control","mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2716-0:687:2478":{"id":"b:2:2716-0:687:2478","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32306:4430","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2710:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RecvFlags","id":"0:687:2478","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2718:27758"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13398:16477":{"id":"2:13398:16477","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"2:5022:16477"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDefault","id":"2:44273:14695","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:148:3117":{"id":"0:148:3117","crate_id":0,"name":"peek_sender","span":{"filename":"src/socket.rs","begin":[628,4],"end":[630,5]},"visibility":"public","docs":"Retrieve the sender for the data at the head of the receive queue.\n\nThis is equivalent to calling [`peek_from`] with a zero-sized buffer,\nbut suppresses the `WSAEMSGSIZE` error on Windows.\n\n[`peek_from`]: Socket::peek_from","links":{"Socket::peek_from":"0:147:3112"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3059:226","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"SockAddr","id":"0:622:2399","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:197:3361":{"id":"0:197:3361","crate_id":0,"name":"leave_multicast_v4_n","span":{"filename":"src/socket.rs","begin":[1317,4],"end":[1331,5]},"visibility":"public","docs":"Leave a multicast group using `IP_DROP_MEMBERSHIP` option on this socket.\n\nFor more information about this option, see [`join_multicast_v4_n`].\n\n[`join_multicast_v4_n`]: Socket::join_multicast_v4_n","links":{"Socket::join_multicast_v4_n":"0:196:3356"},"attrs":["#[cfg(not(any(target_os = \"aix\", target_os = \"haiku\", target_os = \"illumos\",\ntarget_os = \"netbsd\", target_os = \"openbsd\", target_os = \"redox\", target_os =\n\"solaris\", target_os = \"nto\", target_os = \"espidf\", target_os = \"vita\",)))]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["multiaddr",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Ipv4Addr","id":"2:41835:2830","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],["interface",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"InterfaceIndexOrAddress","id":"0:627:2402","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3059:226","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2996-0:698:2498":{"id":"b:2:2996-0:698:2498","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2970:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2966:258","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"TcpKeepalive","id":"0:698:2498","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2999:137","2:3000:1809"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:156:3149":{"id":"0:156:3149","crate_id":0,"name":"send_to_with_flags","span":{"filename":"src/socket.rs","begin":[711,4],"end":[718,5]},"visibility":"public","docs":"Identical to [`send_to`] but allows for specification of arbitrary flags\nto the underlying `sendto` call.\n\n[`send_to`]: Socket::send_to","links":{"Socket::send_to":"0:155:3148"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["buf",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}],["addr",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"SockAddr","id":"0:622:2399","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],["flags",{"resolved_path":{"name":"c_int","id":"20:44:2398","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3059:226","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:530-0:627:2402":{"id":"0:530-0:627:2402","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[197,0],"end":[197,40]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(not(any(target_os = \"haiku\", target_os = \"illumos\", target_os =\n\"netbsd\", target_os = \"redox\", target_os = \"solaris\",)))]"],"deprecation":null,"inner":{"import":{"source":"socket::InterfaceIndexOrAddress","name":"InterfaceIndexOrAddress","id":"0:627:2402","glob":false}}},"0:660":{"id":"0:660","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[208,22],"end":[208,24]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"2:2768:134","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Domain","id":"0:654:2410","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:2999:137":{"id":"2:2999:137","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"2:2970:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}}},"a:2:3209:247-0:559:2488":{"id":"a:2:3209:247-0:559:2488","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3209:247","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MaybeUninitSlice","id":"0:559:2488","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:644":{"id":"0:644","crate_id":0,"name":null,"span":{"filename":"src/socket.rs","begin":[2213,0],"end":[2213,31]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2963:144","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Socket","id":"0:114:2400","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"net::TcpListener","id":"1:3900:3591","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:645:832"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:32305:237-0:698:2498":{"id":"a:2:32305:237-0:698:2498","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:32305:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TcpKeepalive","id":"0:698:2498","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:576":{"id":"0:576","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[456,0],"end":[593,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"TcpKeepalive","id":"0:698:2498","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:577:1178","0:578:2511","0:579:2515"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:32364:4431-0:622:2399":{"id":"a:2:32364:4431-0:622:2399","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32364:4431","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"SockAddr","id":"0:622:2399","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:172:3226":{"id":"0:172:3226","crate_id":0,"name":"out_of_band_inline","span":{"filename":"src/socket.rs","begin":[942,4],"end":[947,5]},"visibility":"public","docs":"Get value for the `SO_OOBINLINE` option on this socket.\n\nFor more information about this option, see [`set_out_of_band_inline`].\n\n[`set_out_of_band_inline`]: Socket::set_out_of_band_inline","links":{"Socket::set_out_of_band_inline":"0:174:3234"},"attrs":["#[cfg(not(target_os = \"redox\"))]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3059:226","args":{"angle_bracketed":{"args":[{"type":{"primitive":"bool"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:238":{"id":"0:238","crate_id":0,"name":null,"span":{"filename":"src/socket.rs","begin":[1937,0],"end":[2133,1]},"visibility":"default","docs":"Socket options for TCP sockets, get/set using `IPPROTO_TCP`.\n\nAdditional documentation can be found in documentation of the OS.\n* Linux: <https://man7.org/linux/man-pages/man7/tcp.7.html>\n* Windows: <https://docs.microsoft.com/en-us/windows/win32/winsock/ipproto-tcp-socket-options>","links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Socket","id":"0:114:2400","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:239:3572","0:240:3577","0:242:3585"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2716-0:654:2410":{"id":"b:2:2716-0:654:2410","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32306:4430","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2710:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Domain","id":"0:654:2410","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2718:27758"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13386:36000":{"id":"2:13386:36000","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"2:12916:136","`FromStr`":"2:12915:4544"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:42206:226","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"FromStr","id":"2:12915:4544","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"2:12915:4544","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:3209:247-0:676:2448":{"id":"a:2:3209:247-0:676:2448","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3209:247","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Protocol","id":"0:676:2448","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:13357:35990":{"id":"2:13357:35990","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:631:3175":{"id":"0:631:3175","crate_id":0,"name":"Address","span":{"filename":"src/socket.rs","begin":[829,4],"end":[829,21]},"visibility":"default","docs":"An address assigned to an interface.","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":{"tuple":["0:633:1974"]},"discriminant":null}}},"0:56:2783":{"id":"0:56:2783","crate_id":0,"name":"as_storage","span":{"filename":"src/sockaddr.rs","begin":[187,4],"end":[189,5]},"visibility":"public","docs":"Retuns the address as the storage.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"sockaddr_storage","id":"20:1703:2703","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:260:3589":{"id":"0:260:3589","crate_id":0,"name":"flush","span":{"filename":"src/socket.rs","begin":[2194,4],"end":[2196,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3059:226","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13282:31680":{"id":"2:13282:31680","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:11045:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:11045:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2716-0:622:2399":{"id":"b:2:2716-0:622:2399","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32306:4430","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2710:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"SockAddr","id":"0:622:2399","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2718:27758"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2713-0:559:2488":{"id":"b:2:2713-0:559:2488","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32306:4430","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2707:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"MaybeUninitSlice","id":"0:559:2488","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:2715:4328"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:215:3446":{"id":"0:215:3446","crate_id":0,"name":"recv_tos","span":{"filename":"src/socket.rs","begin":[1640,4],"end":[1645,5]},"visibility":"public","docs":"Get the value of the `IP_RECVTOS` option for this socket.\n\nFor more information about this option, see [`set_recv_tos`].\n\n[`set_recv_tos`]: Socket::set_recv_tos","links":{"Socket::set_recv_tos":"0:214:3445"},"attrs":["#[cfg(not(any(target_os = \"aix\", target_os = \"dragonfly\", target_os =\n\"fuchsia\", target_os = \"hurd\", target_os = \"illumos\", target_os = \"netbsd\",\ntarget_os = \"openbsd\", target_os = \"redox\", target_os = \"solaris\", target_os =\n\"haiku\", target_os = \"nto\", target_os = \"espidf\", target_os = \"vita\",)))]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3059:226","args":{"angle_bracketed":{"args":[{"type":{"primitive":"bool"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:650":{"id":"0:650","crate_id":0,"name":null,"span":{"filename":"src/sys/unix.rs","begin":[490,0],"end":[524,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10384:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"crate::Type","id":"0:665:2426","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:651:802"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:3209:247-0:600:2560":{"id":"a:2:3209:247-0:600:2560","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'addr","kind":{"lifetime":{"outlives":[]}}},{"name":"'bufs","kind":{"lifetime":{"outlives":[]}}},{"name":"'control","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3209:247","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MsgHdrMut","id":"0:600:2560","args":{"angle_bracketed":{"args":[{"lifetime":"'addr"},{"lifetime":"'bufs"},{"lifetime":"'control"}],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"0:543":{"id":"0:543","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[286,0],"end":[290,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2963:144","args":{"angle_bracketed":{"args":[{"type":{"primitive":"i32"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Type","id":"0:665:2426","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:544:832"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13348:35987":{"id":"2:13348:35987","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"2:12955:21793","`DoubleEndedIterator`":"2:8333:129","prim@char":"1:12341:471","str::matches":"2:13345:4338"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatches","id":"2:44187:14765","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12961:15534","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12961:15534","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12976:21791","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:42167:10679-0:687:2478":{"id":"a:2:42167:10679-0:687:2478","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:42167:10679","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RecvFlags","id":"0:687:2478","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:57:2785":{"id":"0:57:2785","crate_id":0,"name":"is_ipv4","span":{"filename":"src/sockaddr.rs","begin":[192,4],"end":[194,5]},"visibility":"public","docs":"Returns true if this address is in the `AF_INET` (IPv4) family, false otherwise.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:237:3534":{"id":"0:237:3534","crate_id":0,"name":"set_recv_tclass_v6","span":{"filename":"src/socket.rs","begin":[1920,4],"end":[1929,5]},"visibility":"public","docs":"Set the value of the `IPV6_RECVTCLASS` option for this socket.\n\nIf enabled, the `IPV6_TCLASS` ancillary message is passed with incoming\npackets. It contains a byte which specifies the traffic class field of\nthe packet header.","links":{},"attrs":["#[cfg(not(any(target_os = \"dragonfly\", target_os = \"fuchsia\", target_os =\n\"illumos\", target_os = \"netbsd\", target_os = \"openbsd\", target_os = \"redox\",\ntarget_os = \"solaris\", target_os = \"haiku\", target_os = \"hurd\", target_os =\n\"espidf\", target_os = \"vita\",)))]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["recv_tclass",{"primitive":"bool"}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3059:226","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5634:4415":{"id":"5:5634:4415","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7645:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7645:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2986-0:114:2400":{"id":"b:2:2986-0:114:2400","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2963:144","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2960:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Socket","id":"0:114:2400","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2989:2815"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:162":{"id":"0:162","crate_id":0,"name":null,"span":{"filename":"src/socket.rs","begin":[837,0],"end":[1112,1]},"visibility":"default","docs":"Socket options get/set using `SOL_SOCKET`.\n\nAdditional documentation can be found in documentation of the OS.\n* Linux: <https://man7.org/linux/man-pages/man7/socket.7.html>\n* Windows: <https://docs.microsoft.com/en-us/windows/win32/winsock/sol-socket-socket-options>","links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Socket","id":"0:114:2400","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:163:3183","0:165:3188","0:166:3193","0:167:3201","0:169:3205","0:170:3209","0:171:3221","0:172:3226","0:174:3234","0:175:3238","0:177:3243","0:178:3247","0:180:3252","0:181:3256","0:182:3262","0:183:3268","0:185:3274","0:186:3278","0:188:3283","0:189:3286","0:190:3290"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:61:2809":{"id":"0:61:2809","crate_id":0,"name":"as_socket_ipv4","span":{"filename":"src/sockaddr.rs","begin":[242,4],"end":[247,5]},"visibility":"public","docs":"Returns this address as a [`SocketAddrV4`] if it is in the `AF_INET`\nfamily.","links":{"`SocketAddrV4`":"2:42035:2693"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:42073:194","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"SocketAddrV4","id":"2:42035:2693","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:72":{"id":"0:72","crate_id":0,"name":null,"span":{"filename":"src/sockaddr.rs","begin":[376,0],"end":[380,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"2:2763:201","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"SockAddr","id":"0:622:2399","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:73:699"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:127:2972":{"id":"0:127:2972","crate_id":0,"name":"listen","span":{"filename":"src/socket.rs","begin":[253,4],"end":[255,5]},"visibility":"public","docs":"Mark a socket as ready to accept incoming connection requests using\n[`Socket::accept()`].\n\nThis function directly corresponds to the `listen(2)` function on\nWindows and Unix.\n\nAn error will be returned if `listen` or `connect` has already been\ncalled on this builder.\n\nAdditional documentation can be found in manual of the OS:\n\n * DragonFly BSD: <https://man.dragonflybsd.org/?command=listen&section=2>\n * FreeBSD: <https://www.freebsd.org/cgi/man.cgi?query=listen&sektion=2>\n * Linux: <https://man7.org/linux/man-pages/man2/listen.2.html>\n * macOS: <https://developer.apple.com/library/archive/documentation/System/Conceptual/ManPages_iPhoneOS/man2/listen.2.html> (archived, actually for iOS)\n * NetBSD: <https://man.netbsd.org/listen.2>\n * OpenBSD: <https://man.openbsd.org/listen.2>\n * iOS: <https://developer.apple.com/library/archive/documentation/System/Conceptual/ManPages_iPhoneOS/man2/listen.2.html> (archived)\n * illumos: <https://illumos.org/man/3SOCKET/listen>\n * Windows: <https://docs.microsoft.com/en-us/windows/win32/api/winsock2/nf-winsock2-listen>","links":{"`Socket::accept()`":"0:128:2978"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["backlog",{"resolved_path":{"name":"c_int","id":"20:44:2398","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3059:226","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:244:3586":{"id":"0:244:3586","crate_id":0,"name":"read","span":{"filename":"src/socket.rs","begin":[2136,4],"end":[2141,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["buf",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3059:226","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:643:832":{"id":"0:643:832","crate_id":0,"name":"from","span":{"filename":"src/socket.rs","begin":[2212,0],"end":[2212,29]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["socket",{"resolved_path":{"name":"Socket","id":"0:114:2400","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"net::TcpStream","id":"1:3897:2899","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2713-0:622:2399":{"id":"b:2:2713-0:622:2399","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32306:4430","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2707:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"SockAddr","id":"0:622:2399","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2715:4328"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:3001-0:114:2400":{"id":"b:2:3001-0:114:2400","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2960:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2970:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Socket","id":"0:114:2400","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3004:137","2:3005:1807"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:647:832":{"id":"0:647:832","crate_id":0,"name":"from","span":{"filename":"src/socket.rs","begin":[2214,0],"end":[2214,29]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["socket",{"resolved_path":{"name":"Socket","id":"0:114:2400","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"net::UdpSocket","id":"1:4002:3592","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:42167:10679-0:665:2426":{"id":"a:2:42167:10679-0:665:2426","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:42167:10679","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Type","id":"0:665:2426","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:3001-0:665:2426":{"id":"b:2:3001-0:665:2426","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2960:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2970:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Type","id":"0:665:2426","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3004:137","2:3005:1807"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:32364:4431-0:114:2400":{"id":"a:2:32364:4431-0:114:2400","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32364:4431","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Socket","id":"0:114:2400","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2713-0:676:2448":{"id":"b:2:2713-0:676:2448","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32306:4430","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2707:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Protocol","id":"0:676:2448","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2715:4328"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:5:738-0:622:2399":{"id":"b:5:738-0:622:2399","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2729:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:734:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"SockAddr","id":"0:622:2399","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:740:11125","5:741:11126","5:742:11127"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:279:249":{"id":"0:279:249","crate_id":0,"name":"Target","span":{"filename":"src/sockref.rs","begin":[72,4],"end":[72,25]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Socket","id":"0:114:2400","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"0:613:2549":{"id":"0:613:2549","crate_id":0,"name":"with_control","span":{"filename":"src/lib.rs","begin":[713,4],"end":[716,5]},"visibility":"public","docs":"Set the mutable control buffer of the message.\n\nCorresponds to setting `msg_control` and `msg_controllen` on Unix and\n`Control` on Windows.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["buf",{"borrowed_ref":{"lifetime":"'control","mutable":true,"type":{"slice":{"resolved_path":{"name":"MaybeUninit","id":"2:30688:2346","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u8"}}],"bindings":[]}}}}}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:186:3278":{"id":"0:186:3278","crate_id":0,"name":"send_buffer_size","span":{"filename":"src/socket.rs","begin":[1075,4],"end":[1080,5]},"visibility":"public","docs":"Get the value of the `SO_SNDBUF` option on this socket.\n\nFor more information about this option, see [`set_send_buffer_size`].\n\n[`set_send_buffer_size`]: Socket::set_send_buffer_size","links":{"Socket::set_send_buffer_size":"0:188:3283"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3059:226","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:154:3143":{"id":"0:154:3143","crate_id":0,"name":"send_out_of_band","span":{"filename":"src/socket.rs","begin":[694,4],"end":[696,5]},"visibility":"public","docs":"Sends out-of-band (OOB) data on the socket to connected peer\nby setting the `MSG_OOB` flag for this call.\n\nFor more information, see [`send`], [`out_of_band_inline`].\n\n[`send`]: Socket::send\n[`out_of_band_inline`]: Socket::out_of_band_inline","links":{"Socket::send":"0:150:3128","Socket::out_of_band_inline":"0:172:3226"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["buf",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3059:226","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:3244:4427-0:676:2448":{"id":"a:2:3244:4427-0:676:2448","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"2:3244:4427","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Protocol","id":"0:676:2448","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:2:32305:237-0:580:2523":{"id":"a:2:32305:237-0:580:2523","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'addr","kind":{"lifetime":{"outlives":[]}}},{"name":"'bufs","kind":{"lifetime":{"outlives":[]}}},{"name":"'control","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:32305:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MsgHdr","id":"0:580:2523","args":{"angle_bracketed":{"args":[{"lifetime":"'addr"},{"lifetime":"'bufs"},{"lifetime":"'control"}],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"a:2:3209:247-0:665:2426":{"id":"a:2:3209:247-0:665:2426","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3209:247","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Type","id":"0:665:2426","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:2:32364:4431-0:580:2523":{"id":"a:2:32364:4431-0:580:2523","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'addr","kind":{"lifetime":{"outlives":[]}}},{"name":"'bufs","kind":{"lifetime":{"outlives":[]}}},{"name":"'control","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32364:4431","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MsgHdr","id":"0:580:2523","args":{"angle_bracketed":{"args":[{"lifetime":"'addr"},{"lifetime":"'bufs"},{"lifetime":"'control"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2996-0:622:2399":{"id":"b:2:2996-0:622:2399","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2970:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2966:258","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"SockAddr","id":"0:622:2399","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2999:137","2:3000:1809"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:285":{"id":"0:285","crate_id":0,"name":null,"span":{"filename":"src/sockref.rs","begin":[115,0],"end":[123,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10384:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"SockRef","id":"0:273:2401","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"items":["0:286:802"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:535:2421":{"id":"0:535:2421","crate_id":0,"name":"for_address","span":{"filename":"src/lib.rs","begin":[222,4],"end":[227,5]},"visibility":"public","docs":"Returns the correct domain for `address`.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["address",{"resolved_path":{"name":"SocketAddr","id":"2:42013:2348","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Domain","id":"0:654:2410","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2989:2815":{"id":"2:2989:2815","crate_id":2,"name":"into","span":null,"visibility":"default","docs":"Calls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of\n<code>[From]&lt;T&gt; for U</code> chooses to do.","links":{"From":"2:2963:144"},"attrs":["#[track_caller]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"U"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:261":{"id":"0:261","crate_id":0,"name":null,"span":{"filename":"src/socket.rs","begin":[2199,0],"end":[2207,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10384:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Socket","id":"0:114:2400","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:262:802"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:630:1974":{"id":"0:630:1974","crate_id":0,"name":"0","span":{"filename":"src/socket.rs","begin":[827,10],"end":[827,13]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"struct_field":{"primitive":"u32"}}},"b:2:2986-0:665:2426":{"id":"b:2:2986-0:665:2426","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2963:144","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2960:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Type","id":"0:665:2426","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2989:2815"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13267:11066":{"id":"2:13267:11066","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2996-0:559:2488":{"id":"b:2:2996-0:559:2488","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2970:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2966:258","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"MaybeUninitSlice","id":"0:559:2488","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:2999:137","2:3000:1809"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:3005:1807":{"id":"2:3005:1807","crate_id":2,"name":"try_from","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["value",{"generic":"U"}]],"output":{"resolved_path":{"name":"Result","id":"2:42206:226","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"T"},"trait":{"name":"TryFrom","id":"2:2970:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13299:35984":{"id":"2:13299:35984","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\", suggestion =\n\"lines\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinesAny","id":"2:44229:14766","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:68":{"id":"0:68","crate_id":0,"name":null,"span":{"filename":"src/sockaddr.rs","begin":[309,0],"end":[350,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2963:144","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"SocketAddrV6","id":"2:42053:2694","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"SockAddr","id":"0:622:2399","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:69:832"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:76:872":{"id":"0:76:872","crate_id":0,"name":"hash","span":{"filename":"src/sockaddr.rs","begin":[385,4],"end":[387,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["state",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"H"}}}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"H","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"std::hash::Hasher","id":"2:10608:157","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:658":{"id":"0:658","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[208,15],"end":[208,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2729:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Domain","id":"0:654:2410","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:659:475"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2996-0:665:2426":{"id":"b:2:2996-0:665:2426","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2970:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2966:258","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Type","id":"0:665:2426","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2999:137","2:3000:1809"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:5:738-0:687:2478":{"id":"b:5:738-0:687:2478","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2729:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:734:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RecvFlags","id":"0:687:2478","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:740:11125","5:741:11126","5:742:11127"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13300:33930":{"id":"2:13300:33930","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EncodeUtf16","id":"2:44257:14769","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2716-0:114:2400":{"id":"b:2:2716-0:114:2400","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32306:4430","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2710:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Socket","id":"0:114:2400","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2718:27758"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:256":{"id":"0:256","crate_id":0,"name":null,"span":{"filename":"src/socket.rs","begin":[2184,0],"end":[2197,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["write_all","is_write_vectored","write_vectored","write_all_vectored","write_fmt","by_ref"],"trait":{"name":"Write","id":"1:3643:2864","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"resolved_path":{"name":"Socket","id":"0:114:2400","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"items":["0:258:2360","0:259:3588","0:260:3589"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13287:35983":{"id":"2:13287:35983","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"1:12347:1722","crate::ops::IndexMut":"2:3487:4497","str::slice_unchecked":"2:13286:35982"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:690":{"id":"0:690","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[368,9],"end":[368,13]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"2:3204:117","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RecvFlags","id":"0:687:2478","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13290:31707":{"id":"2:13290:31707","crate_id":2,"name":"split_at_checked","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that’s not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut_checked`]\nmethod.\n\n[`split_at_mut_checked`]: str::split_at_mut_checked\n\n# Examples\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at_checked(3).unwrap();\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n\nassert_eq!(None, s.split_at_checked(13));  // Inside “ö”\nassert_eq!(None, s.split_at_checked(16));  // Beyond the string length\n```","links":{"str::split_at_mut_checked":"2:13291:31708"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"2:42073:194","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:214:3445":{"id":"0:214:3445","crate_id":0,"name":"set_recv_tos","span":{"filename":"src/socket.rs","begin":[1609,4],"end":[1618,5]},"visibility":"public","docs":"Set the value of the `IP_RECVTOS` option for this socket.\n\nIf enabled, the `IP_TOS` ancillary message is passed with\nincoming packets. It contains a byte which specifies the\nType of Service/Precedence field of the packet header.","links":{},"attrs":["#[cfg(not(any(target_os = \"aix\", target_os = \"dragonfly\", target_os =\n\"fuchsia\", target_os = \"hurd\", target_os = \"illumos\", target_os = \"netbsd\",\ntarget_os = \"openbsd\", target_os = \"redox\", target_os = \"solaris\", target_os =\n\"haiku\", target_os = \"nto\", target_os = \"espidf\", target_os = \"vita\",)))]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["recv_tos",{"primitive":"bool"}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3059:226","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:259:3588":{"id":"0:259:3588","crate_id":0,"name":"write_vectored","span":{"filename":"src/socket.rs","begin":[2190,4],"end":[2192,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(target_os = \"redox\"))]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["bufs",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"IoSlice","id":"1:8488:2343","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3059:226","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:548:2450":{"id":"0:548:2450","crate_id":0,"name":"ICMPV4","span":{"filename":"src/lib.rs","begin":[310,4],"end":[310,61]},"visibility":"public","docs":"Protocol corresponding to `ICMPv4`.","links":{},"attrs":[],"deprecation":null,"inner":{"assoc_const":{"type":{"resolved_path":{"name":"Protocol","id":"0:676:2448","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"default":"_"}}},"2:13342:31719":{"id":"2:13342:31719","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42073:194","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12961:15534","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12961:15534","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12976:21791","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2986-0:600:2560":{"id":"b:2:2986-0:600:2560","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2963:144","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2960:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"MsgHdrMut","id":"0:600:2560","args":{"angle_bracketed":{"args":[{"lifetime":"'addr"},{"lifetime":"'bufs"},{"lifetime":"'control"}],"bindings":[]}}}},"items":["2:2989:2815"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13318:28224":{"id":"2:13318:28224","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"2:12955:21793","`DoubleEndedIterator`":"2:8333:129","prim@char":"1:12341:471","str::split_whitespace":"2:13296:33557","str::rsplit":"2:13324:31712"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Split","id":"2:43965:4390","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12961:15534","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:183:3268":{"id":"0:183:3268","crate_id":0,"name":"reuse_address","span":{"filename":"src/socket.rs","begin":[1047,4],"end":[1052,5]},"visibility":"public","docs":"Get the value of the `SO_REUSEADDR` option on this socket.\n\nFor more information about this option, see [`set_reuse_address`].\n\n[`set_reuse_address`]: Socket::set_reuse_address","links":{"Socket::set_reuse_address":"0:185:3274"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3059:226","args":{"angle_bracketed":{"args":[{"type":{"primitive":"bool"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13363:35993":{"id":"2:13363:35993","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:132:2996":{"id":"0:132:2996","crate_id":0,"name":"peer_addr","span":{"filename":"src/socket.rs","begin":[336,4],"end":[338,5]},"visibility":"public","docs":"Returns the socket address of the remote peer of this socket.\n\nThis function directly corresponds to the `getpeername(2)` function on\nWindows and Unix.\n\nAdditional documentation can be found in manual of the OS:\n\n * DragonFly BSD: <https://man.dragonflybsd.org/?command=getpeername&section=2>\n * FreeBSD: <https://www.freebsd.org/cgi/man.cgi?query=getpeername&sektion=2>\n * Linux: <https://man7.org/linux/man-pages/man2/getpeername.2.html>\n * macOS: <https://developer.apple.com/library/archive/documentation/System/Conceptual/ManPages_iPhoneOS/man2/getpeername.2.html> (archived, actually for iOS)\n * NetBSD: <https://man.netbsd.org/getpeername.2>\n * OpenBSD: <https://man.openbsd.org/getpeername.2>\n * iOS: <https://developer.apple.com/library/archive/documentation/System/Conceptual/ManPages_iPhoneOS/man2/getpeername.2.html> (archived)\n * illumos: <https://illumos.org/man/3SOCKET/getpeername>\n * Windows: <https://docs.microsoft.com/en-us/windows/win32/api/winsock2/nf-winsock2-getpeername>\n\n# Notes\n\nThis returns an error if the socket is not [`connect`ed].\n\n[`connect`ed]: Socket::connect","links":{"Socket::connect":"0:125:2941"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3059:226","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"SockAddr","id":"0:622:2399","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:32305:237-0:676:2448":{"id":"a:2:32305:237-0:676:2448","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:32305:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Protocol","id":"0:676:2448","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:3001-0:687:2478":{"id":"b:2:3001-0:687:2478","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2960:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2970:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RecvFlags","id":"0:687:2478","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3004:137","2:3005:1807"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"5:5633:36699":{"id":"5:5633:36699","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:304:10604","`String`":"5:7645:243"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:304:10604","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"5:7645:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2716-0:627:2402":{"id":"b:2:2716-0:627:2402","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32306:4430","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2710:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"InterfaceIndexOrAddress","id":"0:627:2402","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2718:27758"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:3209:247-0:580:2523":{"id":"a:2:3209:247-0:580:2523","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'addr","kind":{"lifetime":{"outlives":[]}}},{"name":"'bufs","kind":{"lifetime":{"outlives":[]}}},{"name":"'control","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3209:247","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MsgHdr","id":"0:580:2523","args":{"angle_bracketed":{"args":[{"lifetime":"'addr"},{"lifetime":"'bufs"},{"lifetime":"'control"}],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"0:66":{"id":"0:66","crate_id":0,"name":null,"span":{"filename":"src/sockaddr.rs","begin":[276,0],"end":[307,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2963:144","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"SocketAddrV4","id":"2:42035:2693","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"SockAddr","id":"0:622:2399","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:67:832"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:695":{"id":"0:695","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[368,26],"end":[368,35]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"2:32307:244","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RecvFlags","id":"0:687:2478","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13392:28169":{"id":"2:13392:28169","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:212:3436":{"id":"0:212:3436","crate_id":0,"name":"tos","span":{"filename":"src/socket.rs","begin":[1583,4],"end":[1587,5]},"visibility":"public","docs":"Get the value of the `IP_TOS` option for this socket.\n\nFor more information about this option, see [`set_tos`].\n\nNOTE: <https://docs.microsoft.com/en-us/windows/win32/winsock/ipproto-ip-socket-options>\ndocuments that not all versions of windows support `IP_TOS`.\n\n[`set_tos`]: Socket::set_tos","links":{"Socket::set_tos":"0:211:3435"},"attrs":["#[cfg(not(any(target_os = \"fuchsia\", target_os = \"redox\", target_os =\n\"solaris\", target_os = \"illumos\", target_os = \"haiku\",)))]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3059:226","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u32"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:205:3414":{"id":"0:205:3414","crate_id":0,"name":"multicast_ttl_v4","span":{"filename":"src/socket.rs","begin":[1506,4],"end":[1511,5]},"visibility":"public","docs":"Get the value of the `IP_MULTICAST_TTL` option for this socket.\n\nFor more information about this option, see [`set_multicast_ttl_v4`].\n\n[`set_multicast_ttl_v4`]: Socket::set_multicast_ttl_v4","links":{"Socket::set_multicast_ttl_v4":"0:207:3421"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3059:226","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u32"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2986-0:687:2478":{"id":"b:2:2986-0:687:2478","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2963:144","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2960:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RecvFlags","id":"0:687:2478","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2989:2815"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2996-0:580:2523":{"id":"b:2:2996-0:580:2523","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2970:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2966:258","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"MsgHdr","id":"0:580:2523","args":{"angle_bracketed":{"args":[{"lifetime":"'addr"},{"lifetime":"'bufs"},{"lifetime":"'control"}],"bindings":[]}}}},"items":["2:2999:137","2:3000:1809"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:577:1178":{"id":"0:577:1178","crate_id":0,"name":"new","span":{"filename":"src/lib.rs","begin":[458,4],"end":[483,5]},"visibility":"public","docs":"Returns a new, empty set of TCP keepalive parameters.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"TcpKeepalive","id":"0:698:2498","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13294:14780":{"id":"2:13294:14780","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the previous character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:12341:471"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CharIndices","id":"2:43941:14752","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13339:31718":{"id":"2:13339:31718","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42073:194","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12961:15534","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:42167:10679-0:273:2401":{"id":"a:2:42167:10679-0:273:2401","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'s","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:42167:10679","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"SockRef","id":"0:273:2401","args":{"angle_bracketed":{"args":[{"lifetime":"'s"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:2:42167:10679-0:580:2523":{"id":"a:2:42167:10679-0:580:2523","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'addr","kind":{"lifetime":{"outlives":[]}}},{"name":"'bufs","kind":{"lifetime":{"outlives":[]}}},{"name":"'control","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:42167:10679","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MsgHdr","id":"0:580:2523","args":{"angle_bracketed":{"args":[{"lifetime":"'addr"},{"lifetime":"'bufs"},{"lifetime":"'control"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:13345:4338":{"id":"2:13345:4338","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::rmatches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"2:12955:21793","`DoubleEndedIterator`":"2:8333:129","prim@char":"1:12341:471","str::rmatches":"2:13348:35987"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Matches","id":"2:44169:14764","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12961:15534","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:189:3286":{"id":"0:189:3286","crate_id":0,"name":"write_timeout","span":{"filename":"src/socket.rs","begin":[1101,4],"end":[1103,5]},"visibility":"public","docs":"Get value for the `SO_SNDTIMEO` option on this socket.\n\nIf the returned timeout is `None`, then `write` and `send` calls will\nblock indefinitely.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3059:226","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Option","id":"2:42073:194","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Duration","id":"2:44733:130","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2716-0:559:2488":{"id":"b:2:2716-0:559:2488","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32306:4430","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2710:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"MaybeUninitSlice","id":"0:559:2488","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:2718:27758"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13266:997":{"id":"2:13266:997","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"1:12341:471"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:3209:247-0:627:2402":{"id":"a:2:3209:247-0:627:2402","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3209:247","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"InterfaceIndexOrAddress","id":"0:627:2402","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:144:3085":{"id":"0:144:3085","crate_id":0,"name":"recv_from_with_flags","span":{"filename":"src/socket.rs","begin":[538,4],"end":[544,5]},"visibility":"public","docs":"Identical to [`recv_from`] but allows for specification of arbitrary\nflags to the underlying `recvfrom` call.\n\n[`recv_from`]: Socket::recv_from","links":{"Socket::recv_from":"0:143:3084"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["buf",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"resolved_path":{"name":"MaybeUninit","id":"2:30688:2346","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u8"}}],"bindings":[]}}}}}}}],["flags",{"resolved_path":{"name":"c_int","id":"20:44:2398","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3059:226","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"primitive":"usize"},{"resolved_path":{"name":"SockAddr","id":"0:622:2399","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:177:3243":{"id":"0:177:3243","crate_id":0,"name":"set_passcred","span":{"filename":"src/socket.rs","begin":[988,4],"end":[997,5]},"visibility":"public","docs":"Set value for the `SO_PASSCRED` option on this socket.\n\nIf this option is enabled, enables the receiving of the `SCM_CREDENTIALS`\ncontrol messages.","links":{},"attrs":["#[cfg(all(unix, target_os = \"linux\"))]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["passcred",{"primitive":"bool"}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3059:226","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13327:35985":{"id":"2:13327:35985","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"2:12955:21793","str::split":"2:13318:28224","prim@char":"1:12341:471","`DoubleEndedIterator`":"2:8333:129","str::rsplit_terminator":"2:13330:35986"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitTerminator","id":"2:44015:14757","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12961:15534","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3828-0:627:2402":{"id":"b:2:3828-0:627:2402","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:32306:4430","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3826:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"InterfaceIndexOrAddress","id":"0:627:2402","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3830:1822"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:273:2401":{"id":"0:273:2401","crate_id":0,"name":"SockRef","span":{"filename":"src/sockref.rs","begin":[61,0],"end":[69,1]},"visibility":"public","docs":"A reference to a [`Socket`] that can be used to configure socket types other\nthan the `Socket` type itself.\n\nThis allows for example a [`TcpStream`], found in the standard library, to\nbe configured using all the additional methods found in the [`Socket`] API.\n\n`SockRef` can be created from any socket type that implements [`AsFd`]\n(Unix) or [`AsSocket`] (Windows) using the [`From`] implementation.\n\n[`TcpStream`]: std::net::TcpStream\n[`AsFd`]: https://doc.rust-lang.org/stable/std/os/unix/io/trait.AsFd.html\n[`AsSocket`]: https://doc.rust-lang.org/stable/std/os/windows/io/trait.AsSocket.html\n\n# Examples\n\nBelow is an example of converting a [`TcpStream`] into a [`SockRef`].\n\n```\nuse std::net::{TcpStream, SocketAddr};\n\nuse socket2::SockRef;\n\n# fn main() -> Result<(), Box<dyn std::error::Error>> {\n// Create `TcpStream` from the standard library.\nlet address: SocketAddr = \"127.0.0.1:1234\".parse()?;\n# let b1 = std::sync::Arc::new(std::sync::Barrier::new(2));\n# let b2 = b1.clone();\n# let handle = std::thread::spawn(move || {\n#    let listener = std::net::TcpListener::bind(address).unwrap();\n#    b2.wait();\n#    let (stream, _) = listener.accept().unwrap();\n#    std::thread::sleep(std::time::Duration::from_millis(10));\n#    drop(stream);\n# });\n# b1.wait();\nlet stream = TcpStream::connect(address)?;\n\n// Create a `SockRef`erence to the stream.\nlet socket_ref = SockRef::from(&stream);\n// Use `Socket::set_nodelay` on the stream.\nsocket_ref.set_nodelay(true)?;\ndrop(socket_ref);\n\nassert_eq!(stream.nodelay()?, true);\n# handle.join().unwrap();\n# Ok(())\n# }\n```","links":{"`SockRef`":"0:273:2401","`From`":"2:2963:144","`Socket`":"0:114:2400","std::net::TcpStream":"1:3897:2899"},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'s","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"impls":["a:2:42167:10679-0:273:2401","a:2:3244:4427-0:273:2401","a:2:3209:247-0:273:2401","a:2:42168:10678-0:273:2401","a:2:32364:4431-0:273:2401","a:2:32305:237-0:273:2401","b:2:2713-0:273:2401","b:2:2990-0:273:2401","b:2:2716-0:273:2401","b:2:3828-0:273:2401","b:2:2996-0:273:2401","b:2:2986-0:273:2401","b:2:3001-0:273:2401","0:281","0:285","0:277"]}}},"0:638":{"id":"0:638","crate_id":0,"name":null,"span":{"filename":"src/socket.rs","begin":[2210,0],"end":[2210,31]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2963:144","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"TcpListener","id":"1:3900:3591","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Socket","id":"0:114:2400","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:639:832"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:198:3366":{"id":"0:198:3366","crate_id":0,"name":"join_ssm_v4","span":{"filename":"src/socket.rs","begin":[1352,4],"end":[1371,5]},"visibility":"public","docs":"Join a multicast SSM channel using `IP_ADD_SOURCE_MEMBERSHIP` option on this socket.\n\nThis function specifies a new multicast channel for this socket to join.\nThe group must be a valid SSM group address, the source must be the address of the sender\nand `interface` is the address of the local interface with which the system should join the\nmulticast group. If it's [`Ipv4Addr::UNSPECIFIED`] (`INADDR_ANY`) then\nan appropriate interface is chosen by the system.","links":{"`Ipv4Addr::UNSPECIFIED`":"2:8839:3849"},"attrs":["#[cfg(not(any(target_os = \"dragonfly\", target_os = \"haiku\", target_os =\n\"hurd\", target_os = \"netbsd\", target_os = \"openbsd\", target_os = \"redox\",\ntarget_os = \"fuchsia\", target_os = \"nto\", target_os = \"espidf\", target_os =\n\"vita\",)))]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["source",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Ipv4Addr","id":"2:41835:2830","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],["group",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Ipv4Addr","id":"2:41835:2830","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],["interface",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Ipv4Addr","id":"2:41835:2830","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3059:226","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:595":{"id":"0:595","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[657,0],"end":[661,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(target_os = \"redox\"))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'name","kind":{"lifetime":{"outlives":[]}}},{"name":"'bufs","kind":{"lifetime":{"outlives":[]}}},{"name":"'control","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10384:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MsgHdr","id":"0:580:2523","args":{"angle_bracketed":{"args":[{"lifetime":"'name"},{"lifetime":"'bufs"},{"lifetime":"'control"}],"bindings":[]}}}},"items":["0:599:802"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:32364:4431-0:600:2560":{"id":"a:2:32364:4431-0:600:2560","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'addr","kind":{"lifetime":{"outlives":[]}}},{"name":"'bufs","kind":{"lifetime":{"outlives":[]}}},{"name":"'control","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32364:4431","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MsgHdrMut","id":"0:600:2560","args":{"angle_bracketed":{"args":[{"lifetime":"'addr"},{"lifetime":"'bufs"},{"lifetime":"'control"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:681:475":{"id":"0:681:475","crate_id":0,"name":"clone","span":{"filename":"src/lib.rs","begin":[305,15],"end":[305,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Protocol","id":"0:676:2448","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:32305:237-0:600:2560":{"id":"a:2:32305:237-0:600:2560","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'addr","kind":{"lifetime":{"outlives":[]}}},{"name":"'bufs","kind":{"lifetime":{"outlives":[]}}},{"name":"'control","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:32305:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MsgHdrMut","id":"0:600:2560","args":{"angle_bracketed":{"args":[{"lifetime":"'addr"},{"lifetime":"'bufs"},{"lifetime":"'control"}],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"0:188:3283":{"id":"0:188:3283","crate_id":0,"name":"set_send_buffer_size","span":{"filename":"src/socket.rs","begin":[1086,4],"end":[1095,5]},"visibility":"public","docs":"Set value for the `SO_SNDBUF` option on this socket.\n\nChanges the size of the operating system's send buffer associated with\nthe socket.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["size",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3059:226","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2990-0:559:2488":{"id":"b:2:2990-0:559:2488","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2963:144","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"MaybeUninitSlice","id":"0:559:2488","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:2992:832"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"5:5617:36695":{"id":"5:5617:36695","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:304:10604","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"5:304:10604","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:516":{"id":"0:516","crate_id":0,"name":null,"span":{"filename":"src/sys/unix.rs","begin":[3096,0],"end":[3100,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"AsRawFd","id":"1:4917:3595","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"crate::Socket","id":"0:114:2400","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:517:3642"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13310:11105":{"id":"2:13310:11105","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"2:42075:191","prim@char":"1:12341:471","self::pattern":"2:12955:21793"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42073:194","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12961:15534","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:431:3758":{"id":"0:431:3758","crate_id":0,"name":"is_unnamed","span":{"filename":"src/sys/unix.rs","begin":[794,4],"end":[806,5]},"visibility":"public","docs":"Returns true if this address is an unnamed address from the `AF_UNIX` family (for local\ninterprocess communication), false otherwise.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:742:11127":{"id":"5:742:11127","crate_id":5,"name":"clone_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["target",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:199:3376":{"id":"0:199:3376","crate_id":0,"name":"leave_ssm_v4","span":{"filename":"src/socket.rs","begin":[1390,4],"end":[1409,5]},"visibility":"public","docs":"Leave a multicast group using `IP_DROP_SOURCE_MEMBERSHIP` option on this socket.\n\nFor more information about this option, see [`join_ssm_v4`].\n\n[`join_ssm_v4`]: Socket::join_ssm_v4","links":{"Socket::join_ssm_v4":"0:198:3366"},"attrs":["#[cfg(not(any(target_os = \"dragonfly\", target_os = \"haiku\", target_os =\n\"hurd\", target_os = \"netbsd\", target_os = \"openbsd\", target_os = \"redox\",\ntarget_os = \"fuchsia\", target_os = \"nto\", target_os = \"espidf\", target_os =\n\"vita\",)))]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["source",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Ipv4Addr","id":"2:41835:2830","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],["group",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Ipv4Addr","id":"2:41835:2830","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],["interface",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Ipv4Addr","id":"2:41835:2830","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3059:226","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5635:28165":{"id":"5:5635:28165","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"2:13391:28168"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7645:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:54:997":{"id":"0:54:997","crate_id":0,"name":"len","span":{"filename":"src/sockaddr.rs","begin":[177,4],"end":[179,5]},"visibility":"public","docs":"Returns the size of this address in bytes.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"socklen_t","id":"20:1898:2704","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:42":{"id":"0:42","crate_id":0,"name":null,"span":{"filename":"src/sockaddr.rs","begin":[27,0],"end":[265,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[allow(clippy::len_without_is_empty)]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"SockAddr","id":"0:622:2399","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:43:1178","0:44:2758","0:49:1876","0:51:2772","0:52:2775","0:53:2778","0:54:997","0:55:336","0:56:2783","0:57:2785","0:58:2788","0:59:2791","0:60:2794","0:61:2809","0:62:2811"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2986-0:622:2399":{"id":"b:2:2986-0:622:2399","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2963:144","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2960:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"SockAddr","id":"0:622:2399","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2989:2815"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:196:3356":{"id":"0:196:3356","crate_id":0,"name":"join_multicast_v4_n","span":{"filename":"src/socket.rs","begin":[1284,4],"end":[1298,5]},"visibility":"public","docs":"Join a multicast group using `IP_ADD_MEMBERSHIP` option on this socket.\n\nThis function specifies a new multicast group for this socket to join.\nThe address must be a valid multicast address, and `interface` specifies\nthe local interface with which the system should join the multicast\ngroup. See [`InterfaceIndexOrAddress`].","links":{"`InterfaceIndexOrAddress`":"0:627:2402"},"attrs":["#[cfg(not(any(target_os = \"aix\", target_os = \"haiku\", target_os = \"illumos\",\ntarget_os = \"netbsd\", target_os = \"openbsd\", target_os = \"redox\", target_os =\n\"solaris\", target_os = \"nto\", target_os = \"espidf\", target_os = \"vita\",)))]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["multiaddr",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Ipv4Addr","id":"2:41835:2830","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],["interface",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"InterfaceIndexOrAddress","id":"0:627:2402","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3059:226","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:693":{"id":"0:693","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[368,22],"end":[368,24]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"2:2768:134","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RecvFlags","id":"0:687:2478","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2713-0:687:2478":{"id":"b:2:2713-0:687:2478","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32306:4430","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2707:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RecvFlags","id":"0:687:2478","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2715:4328"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:174:3234":{"id":"0:174:3234","crate_id":0,"name":"set_out_of_band_inline","span":{"filename":"src/socket.rs","begin":[957,4],"end":[966,5]},"visibility":"public","docs":"Set value for the `SO_OOBINLINE` option on this socket.\n\nIf this option is enabled, out-of-band data is directly placed into the\nreceive data stream. Otherwise, out-of-band data is passed only when the\n`MSG_OOB` flag is set during receiving. As per RFC6093, TCP sockets\nusing the Urgent mechanism are encouraged to set this flag.","links":{},"attrs":["#[cfg(not(target_os = \"redox\"))]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["oob_inline",{"primitive":"bool"}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3059:226","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:42167:10679-0:698:2498":{"id":"a:2:42167:10679-0:698:2498","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:42167:10679","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TcpKeepalive","id":"0:698:2498","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:13307:31264":{"id":"2:13307:31264","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"1:12341:471","self::pattern":"2:12955:21793"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12961:15534","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12961:15534","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12976:21791","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:522":{"id":"0:522","crate_id":0,"name":null,"span":{"filename":"src/sys/unix.rs","begin":[3118,0],"end":[3123,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2963:144","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"OwnedFd","id":"1:4975:3654","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"crate::Socket","id":"0:114:2400","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:523:832"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:146:3093":{"id":"0:146:3093","crate_id":0,"name":"recv_from_vectored_with_flags","span":{"filename":"src/socket.rs","begin":[581,4],"end":[587,5]},"visibility":"public","docs":"Identical to [`recv_from_vectored`] but allows for specification of\narbitrary flags to the underlying `recvmsg`/`WSARecvFrom` call.\n\n[`recv_from_vectored`]: Socket::recv_from_vectored\n\n# Safety\n\n`recv_from_vectored` makes the same safety guarantees regarding `bufs`\nas [`recv_vectored`].\n\n[`recv_vectored`]: Socket::recv_vectored","links":{"Socket::recv_vectored":"0:140:3064","Socket::recv_from_vectored":"0:145:3092"},"attrs":["#[cfg(not(target_os = \"redox\"))]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["bufs",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"resolved_path":{"name":"MaybeUninitSlice","id":"0:559:2488","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}}],["flags",{"resolved_path":{"name":"c_int","id":"20:44:2398","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3059:226","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"primitive":"usize"},{"resolved_path":{"name":"RecvFlags","id":"0:687:2478","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},{"resolved_path":{"name":"SockAddr","id":"0:622:2399","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13295:3727":{"id":"2:13295:3727","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"2:43951:4389","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13391:28168":{"id":"2:13391:28168","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13265":{"id":"2:13265","crate_id":2,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["2:13266:997","2:13267:11066","2:13268:35978","2:13269:35979","2:13271:35980","2:13274:2813","2:13275:35981","2:13276:336","2:13277:2565","2:13278:3957","2:13280:31679","2:13282:31680","2:13284:31681","2:13286:35982","2:13287:35983","2:13288:31703","2:13289:31704","2:13290:31707","2:13291:31708","2:13293:14770","2:13294:14780","2:13295:3727","2:13296:33557","2:13297:33549","2:13298:28225","2:13299:35984","2:13300:33930","2:13301:31720","2:13304:31262","2:13307:31264","2:13310:11105","2:13314:11065","2:13318:28224","2:13321:31710","2:13324:31712","2:13327:35985","2:13330:35986","2:13333:31714","2:13336:31716","2:13339:31718","2:13342:31719","2:13345:4338","2:13348:35987","2:13351:35988","2:13354:35989","2:13357:35990","2:13359:35991","2:13361:35992","2:13363:35993","2:13364:35994","2:13365:35995","2:13368:35996","2:13371:27770","2:13374:31721","2:13377:35997","2:13380:35998","2:13383:35999","2:13386:36000","2:13388:28163","2:13389:32857","2:13390:28167","2:13391:28168","2:13392:28169","2:13393:32860","2:13394:32861","2:13395:32862","2:13396:36001","2:13398:16477","2:13399:36002"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:138:3046":{"id":"0:138:3046","crate_id":0,"name":"recv_out_of_band","span":{"filename":"src/socket.rs","begin":[431,4],"end":[433,5]},"visibility":"public","docs":"Receives out-of-band (OOB) data on the socket from the remote address to\nwhich it is connected by setting the `MSG_OOB` flag for this call.\n\nFor more information, see [`recv`], [`out_of_band_inline`].\n\n[`recv`]: Socket::recv\n[`out_of_band_inline`]: Socket::out_of_band_inline","links":{"Socket::recv":"0:137:3028","Socket::out_of_band_inline":"0:172:3226"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["buf",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"resolved_path":{"name":"MaybeUninit","id":"2:30688:2346","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u8"}}],"bindings":[]}}}}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3059:226","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:58:2788":{"id":"0:58:2788","crate_id":0,"name":"is_ipv6","span":{"filename":"src/sockaddr.rs","begin":[198,4],"end":[200,5]},"visibility":"public","docs":"Returns true if this address is in the `AF_INET6` (IPv6) family, false\notherwise.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:42168:10678-0:114:2400":{"id":"a:2:42168:10678-0:114:2400","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:42168:10678","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Socket","id":"0:114:2400","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:2:3244:4427-0:559:2488":{"id":"a:2:3244:4427-0:559:2488","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"2:3244:4427","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MaybeUninitSlice","id":"0:559:2488","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:557":{"id":"0:557","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[372,0],"end":[384,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(target_os = \"redox\"))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"RecvFlags","id":"0:687:2478","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:558:2484"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:575:632":{"id":"0:575:632","crate_id":0,"name":"deref_mut","span":{"filename":"src/lib.rs","begin":[418,4],"end":[420,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"resolved_path":{"name":"MaybeUninit","id":"2:30688:2346","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u8"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:552:2462":{"id":"0:552:2462","crate_id":0,"name":"MPTCP","span":{"filename":"src/lib.rs","begin":[323,4],"end":[323,61]},"visibility":"public","docs":"Protocol corresponding to `MPTCP`.","links":{},"attrs":["#[cfg(target_os = \"linux\")]"],"deprecation":null,"inner":{"assoc_const":{"type":{"resolved_path":{"name":"Protocol","id":"0:676:2448","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"default":"_"}}},"0:73:699":{"id":"0:73:699","crate_id":0,"name":"eq","span":{"filename":"src/sockaddr.rs","begin":[377,4],"end":[379,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:663":{"id":"0:663","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[208,26],"end":[208,35]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"2:2763:201","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Domain","id":"0:654:2410","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:664:699"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13304:31262":{"id":"2:13304:31262","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, in which case this function will return true if\nthe `&str` is a prefix of this string slice.\n\nThe [pattern] can also be a [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\nThese will only be checked against the first character of this string slice.\nLook at the second example below regarding behavior for slices of [`char`]s.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```\n\n```\nlet bananas = \"bananas\";\n\n// Note that both of these assert successfully.\nassert!(bananas.starts_with(&['b', 'a', 'n', 'a']));\nassert!(bananas.starts_with(&['a', 'b', 'c', 'd']));\n```","links":{"prim@char":"1:12341:471","self::pattern":"2:12955:21793"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12961:15534","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13330:35986":{"id":"2:13330:35986","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"2:12955:21793","str::split":"2:13318:28224","prim@char":"1:12341:471","str::split_terminator":"2:13327:35985"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitTerminator","id":"2:44033:14758","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12961:15534","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12961:15534","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12976:21791","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:3244:4427-0:273:2401":{"id":"a:2:3244:4427-0:273:2401","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'s","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"2:3244:4427","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"SockRef","id":"0:273:2401","args":{"angle_bracketed":{"args":[{"lifetime":"'s"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"5:5616":{"id":"5:5616","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["5:5617:36695","5:5618:4445","5:5621:36696","5:5624:36697","5:5632:36698","5:5633:36699","5:5634:4415","5:5635:28165","5:5636:28166"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:3244:4427-0:698:2498":{"id":"a:2:3244:4427-0:698:2498","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"2:3244:4427","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TcpKeepalive","id":"0:698:2498","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:277":{"id":"0:277","crate_id":0,"name":null,"span":{"filename":"src/sockref.rs","begin":[71,0],"end":[77,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'s","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Deref","id":"2:3417:124","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"SockRef","id":"0:273:2401","args":{"angle_bracketed":{"args":[{"lifetime":"'s"}],"bindings":[]}}}},"items":["0:279:249","0:280:630"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:645:832":{"id":"0:645:832","crate_id":0,"name":"from","span":{"filename":"src/socket.rs","begin":[2213,0],"end":[2213,31]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["socket",{"resolved_path":{"name":"Socket","id":"0:114:2400","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"net::TcpListener","id":"1:3900:3591","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:42167:10679-0:676:2448":{"id":"a:2:42167:10679-0:676:2448","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:42167:10679","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Protocol","id":"0:676:2448","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:13354:35989":{"id":"2:13354:35989","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"2:12955:21793","`DoubleEndedIterator`":"2:8333:129","prim@char":"1:12341:471","str::match_indices":"2:13351:35988"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatchIndices","id":"2:44133:14762","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12961:15534","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12961:15534","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12976:21791","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:579:2515":{"id":"0:579:2515","crate_id":0,"name":"with_interval","span":{"filename":"src/lib.rs","begin":[541,4],"end":[546,5]},"visibility":"public","docs":"Set the value of the `TCP_KEEPINTVL` option. On Windows, this sets the\nvalue of the `tcp_keepalive` struct's `keepaliveinterval` field.\n\nSets the time interval between TCP keepalive probes.\n\nSome platforms specify this value in seconds, so sub-second\nspecifications may be omitted.","links":{},"attrs":["#[cfg(any(target_os = \"android\", target_os = \"dragonfly\", target_os =\n\"freebsd\", target_os = \"fuchsia\", target_os = \"illumos\", target_os = \"ios\",\ntarget_os = \"linux\", target_os = \"macos\", target_os = \"netbsd\", target_os =\n\"tvos\", target_os = \"watchos\", target_os = \"windows\",))]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["interval",{"resolved_path":{"name":"Duration","id":"2:44733:130","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:633:1974":{"id":"0:633:1974","crate_id":0,"name":"0","span":{"filename":"src/socket.rs","begin":[829,12],"end":[829,20]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"struct_field":{"resolved_path":{"name":"std::net::Ipv4Addr","id":"2:41835:2830","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"b:2:2996-0:273:2401":{"id":"b:2:2996-0:273:2401","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2970:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2966:258","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"SockRef","id":"0:273:2401","args":{"angle_bracketed":{"args":[{"lifetime":"'s"}],"bindings":[]}}}},"items":["2:2999:137","2:3000:1809"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:572:630":{"id":"0:572:630","crate_id":0,"name":"deref","span":{"filename":"src/lib.rs","begin":[412,4],"end":[414,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"MaybeUninit","id":"2:30688:2346","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u8"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:3830:1822":{"id":"2:3830:1822","crate_id":2,"name":"type_id","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"TypeId","id":"2:39788:13975","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:125:2941":{"id":"0:125:2941","crate_id":0,"name":"connect","span":{"filename":"src/socket.rs","begin":[205,4],"end":[207,5]},"visibility":"public","docs":"Initiate a connection on this socket to the specified address.\n\nThis function directly corresponds to the `connect(2)` function on\nWindows and Unix.\n\nAn error will be returned if `listen` or `connect` has already been\ncalled on this builder.\n\nAdditional documentation can be found in manual of the OS:\n\n * DragonFly BSD: <https://man.dragonflybsd.org/?command=connect&section=2>\n * FreeBSD: <https://www.freebsd.org/cgi/man.cgi?query=connect&sektion=2>\n * Linux: <https://man7.org/linux/man-pages/man2/connect.2.html>\n * macOS: <https://developer.apple.com/library/archive/documentation/System/Conceptual/ManPages_iPhoneOS/man2/connect.2.html> (archived, actually for iOS)\n * NetBSD: <https://man.netbsd.org/connect.2>\n * OpenBSD: <https://man.openbsd.org/connect.2>\n * iOS: <https://developer.apple.com/library/archive/documentation/System/Conceptual/ManPages_iPhoneOS/man2/connect.2.html> (archived)\n * illumos: <https://illumos.org/man/3SOCKET/connect>\n * Windows: <https://docs.microsoft.com/en-us/windows/win32/api/winsock2/nf-winsock2-connect>\n\n# Notes\n\nWhen using a non-blocking connect (by setting the socket into\nnon-blocking mode before calling this function), socket option can't be\nset *while connecting*. This will cause errors on Windows. Socket\noptions can be safely set before and after connecting the socket.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["address",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"SockAddr","id":"0:622:2399","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3059:226","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:129:2981":{"id":"0:129:2981","crate_id":0,"name":"accept_raw","span":{"filename":"src/socket.rs","begin":[305,4],"end":[307,5]},"visibility":"public","docs":"Accept a new incoming connection from this listener.\n\nThis function directly corresponds to the `accept(2)` function on\nWindows and Unix.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3059:226","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"resolved_path":{"name":"Socket","id":"0:114:2400","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},{"resolved_path":{"name":"SockAddr","id":"0:622:2399","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:55:336":{"id":"0:55:336","crate_id":0,"name":"as_ptr","span":{"filename":"src/sockaddr.rs","begin":[182,4],"end":[184,5]},"visibility":"public","docs":"Returns a raw pointer to the address.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"resolved_path":{"name":"sockaddr","id":"20:1514:2392","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3828-0:654:2410":{"id":"b:2:3828-0:654:2410","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:32306:4430","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3826:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Domain","id":"0:654:2410","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3830:1822"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:3209:247-0:654:2410":{"id":"a:2:3209:247-0:654:2410","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3209:247","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Domain","id":"0:654:2410","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:135:2963":{"id":"0:135:2963","crate_id":0,"name":"set_nonblocking","span":{"filename":"src/socket.rs","begin":[385,4],"end":[387,5]},"visibility":"public","docs":"Moves this socket into or out of nonblocking mode.\n\n# Notes\n\nOn Unix this corresponds to calling `fcntl` (un)setting `O_NONBLOCK`.\n\nOn Windows this corresponds to calling `ioctlsocket` (un)setting\n`FIONBIO`.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["nonblocking",{"primitive":"bool"}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3059:226","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:220:3472":{"id":"0:220:3472","crate_id":0,"name":"multicast_hops_v6","span":{"filename":"src/socket.rs","begin":[1707,4],"end":[1712,5]},"visibility":"public","docs":"Get the value of the `IPV6_MULTICAST_HOPS` option for this socket\n\nFor more information about this option, see [`set_multicast_hops_v6`].\n\n[`set_multicast_hops_v6`]: Socket::set_multicast_hops_v6","links":{"Socket::set_multicast_hops_v6":"0:222:3477"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3059:226","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u32"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:32305:237-0:654:2410":{"id":"a:2:32305:237-0:654:2410","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:32305:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Domain","id":"0:654:2410","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:679":{"id":"0:679","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[305,9],"end":[305,13]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"2:3204:117","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Protocol","id":"0:676:2448","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13274:2813":{"id":"2:13274:2813","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:12502:21794"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:128:2978":{"id":"0:128:2978","crate_id":0,"name":"accept","span":{"filename":"src/socket.rs","begin":[265,4],"end":[299,5]},"visibility":"public","docs":"Accept a new incoming connection from this listener.\n\nThis function uses `accept4(2)` on platforms that support it and\n`accept(2)` platforms that do not.\n\nThis function sets the same flags as in done for [`Socket::new`],\n[`Socket::accept_raw`] can be used if you don't want to set those flags.\n\nAdditional documentation can be found in manual of the OS:\n\n * DragonFly BSD: <https://man.dragonflybsd.org/?command=accept&section=2>\n * FreeBSD: <https://www.freebsd.org/cgi/man.cgi?query=accept&sektion=2>\n * Linux: <https://man7.org/linux/man-pages/man2/accept.2.html>\n * macOS: <https://developer.apple.com/library/archive/documentation/System/Conceptual/ManPages_iPhoneOS/man2/accept.2.html> (archived, actually for iOS)\n * NetBSD: <https://man.netbsd.org/accept.2>\n * OpenBSD: <https://man.openbsd.org/accept.2>\n * iOS: <https://developer.apple.com/library/archive/documentation/System/Conceptual/ManPages_iPhoneOS/man2/accept.2.html> (archived)\n * illumos: <https://illumos.org/man/3SOCKET/accept>\n * Windows: <https://docs.microsoft.com/en-us/windows/win32/api/winsock2/nf-winsock2-accept>","links":{"`Socket::accept_raw`":"0:129:2981","`Socket::new`":"0:121:1178"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3059:226","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"resolved_path":{"name":"Socket","id":"0:114:2400","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},{"resolved_path":{"name":"SockAddr","id":"0:622:2399","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:573":{"id":"0:573","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[417,0],"end":[421,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"DerefMut","id":"2:3430:2350","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MaybeUninitSlice","id":"0:559:2488","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["0:575:632"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13351:35988":{"id":"2:13351:35988","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"2:12955:21793","`DoubleEndedIterator`":"2:8333:129","prim@char":"1:12341:471","str::rmatch_indices":"2:13354:35989"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"MatchIndices","id":"2:44115:14761","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12961:15534","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13269:35979":{"id":"2:13269:35979","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13368:35996":{"id":"2:13368:35996","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12341:471","self::pattern":"2:12955:21793"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12961:15534","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:32364:4431-0:654:2410":{"id":"a:2:32364:4431-0:654:2410","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32364:4431","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Domain","id":"0:654:2410","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:219:3467":{"id":"0:219:3467","crate_id":0,"name":"leave_multicast_v6","span":{"filename":"src/socket.rs","begin":[1686,4],"end":[1700,5]},"visibility":"public","docs":"Leave a multicast group using `IPV6_DROP_MEMBERSHIP` option on this socket.\n\nSome OSs use `IPV6_LEAVE_GROUP` for this option.\n\nFor more information about this option, see [`join_multicast_v6`].\n\n[`join_multicast_v6`]: Socket::join_multicast_v6","links":{"Socket::join_multicast_v6":"0:218:3457"},"attrs":["#[cfg(not(target_os = \"nto\"))]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["multiaddr",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Ipv6Addr","id":"2:41851:2836","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],["interface",{"primitive":"u32"}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3059:226","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:245:3587":{"id":"0:245:3587","crate_id":0,"name":"read_vectored","span":{"filename":"src/socket.rs","begin":[2144,4],"end":[2151,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(target_os = \"redox\"))]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["bufs",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"resolved_path":{"name":"IoSliceMut","id":"1:3604:2865","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3059:226","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:254:3588":{"id":"0:254:3588","crate_id":0,"name":"write_vectored","span":{"filename":"src/socket.rs","begin":[2175,4],"end":[2177,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(target_os = \"redox\"))]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["bufs",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"IoSlice","id":"1:8488:2343","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3059:226","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2713-0:654:2410":{"id":"b:2:2713-0:654:2410","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32306:4430","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2707:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Domain","id":"0:654:2410","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2715:4328"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:204:3410":{"id":"0:204:3410","crate_id":0,"name":"set_multicast_loop_v4","span":{"filename":"src/socket.rs","begin":[1490,4],"end":[1499,5]},"visibility":"public","docs":"Set the value of the `IP_MULTICAST_LOOP` option for this socket.\n\nIf enabled, multicast packets will be looped back to the local socket.\nNote that this may not have any affect on IPv6 sockets.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["loop_v4",{"primitive":"bool"}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3059:226","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:563":{"id":"0:563","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[392,0],"end":[396,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10384:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MaybeUninitSlice","id":"0:559:2488","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["0:565:802"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13336:31716":{"id":"2:13336:31716","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"1:12341:471","str::splitn":"2:13333:31714","self::pattern":"2:12955:21793"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitN","id":"2:44087:11170","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12961:15534","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12961:15534","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12976:21791","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:239:3572":{"id":"0:239:3572","crate_id":0,"name":"set_tcp_keepalive","span":{"filename":"src/socket.rs","begin":[2099,4],"end":[2102,5]},"visibility":"public","docs":"Set parameters configuring TCP keepalive probes for this socket.\n\nThe supported parameters depend on the operating system, and are\nconfigured using the [`TcpKeepalive`] struct. At a minimum, all systems\nsupport configuring the [keepalive time]: the time after which the OS\nwill start sending keepalive messages on an idle connection.\n\n[keepalive time]: TcpKeepalive::with_time\n\n# Notes\n\n* This will enable `SO_KEEPALIVE` on this socket, if it is not already\n  enabled.\n* On some platforms, such as Windows, any keepalive parameters *not*\n  configured by the `TcpKeepalive` struct passed to this function may be\n  overwritten with their default values. Therefore, this function should\n  either only be called once per socket, or the same parameters should\n  be passed every time it is called.\n\n# Examples\n\n```\nuse std::time::Duration;\n\nuse socket2::{Socket, TcpKeepalive, Domain, Type};\n\n# fn main() -> std::io::Result<()> {\nlet socket = Socket::new(Domain::IPV4, Type::STREAM, None)?;\nlet keepalive = TcpKeepalive::new()\n    .with_time(Duration::from_secs(4));\n    // Depending on the target operating system, we may also be able to\n    // configure the keepalive probe interval and/or the number of\n    // retries here as well.\n\nsocket.set_tcp_keepalive(&keepalive)?;\n# Ok(()) }\n```\n","links":{"`TcpKeepalive`":"0:698:2498","TcpKeepalive::with_time":"0:578:2511"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["params",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"TcpKeepalive","id":"0:698:2498","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3059:226","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:3244:4427-0:665:2426":{"id":"a:2:3244:4427-0:665:2426","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"2:3244:4427","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Type","id":"0:665:2426","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:657":{"id":"0:657","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[208,9],"end":[208,13]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"2:3204:117","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Domain","id":"0:654:2410","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:606":{"id":"0:606","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[679,0],"end":[731,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(target_os = \"redox\"))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'addr","kind":{"lifetime":{"outlives":[]}}},{"name":"'bufs","kind":{"lifetime":{"outlives":[]}}},{"name":"'control","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"MsgHdrMut","id":"0:600:2560","args":{"angle_bracketed":{"args":[{"lifetime":"'addr"},{"lifetime":"'bufs"},{"lifetime":"'control"}],"bindings":[]}}}},"items":["0:610:1178","0:611:2537","0:612:2543","0:613:2549","0:614:2554","0:615:2573"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2713-0:580:2523":{"id":"b:2:2713-0:580:2523","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32306:4430","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2707:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"MsgHdr","id":"0:580:2523","args":{"angle_bracketed":{"args":[{"lifetime":"'addr"},{"lifetime":"'bufs"},{"lifetime":"'control"}],"bindings":[]}}}},"items":["2:2715:4328"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2996-0:627:2402":{"id":"b:2:2996-0:627:2402","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2970:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2966:258","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"InterfaceIndexOrAddress","id":"0:627:2402","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2999:137","2:3000:1809"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13361:35992":{"id":"2:13361:35992","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:438:2833":{"id":"0:438:2833","crate_id":0,"name":"as_pathname","span":{"filename":"src/sys/unix.rs","begin":[858,4],"end":[865,5]},"visibility":"public","docs":"Returns this address as a `Path` reference if it is an `AF_UNIX`\npathname address, otherwise returns `None`.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:42073:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Path","id":"1:5441:203","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2996-0:114:2400":{"id":"b:2:2996-0:114:2400","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2970:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2966:258","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Socket","id":"0:114:2400","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2999:137","2:3000:1809"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:3209:247-0:114:2400":{"id":"a:2:3209:247-0:114:2400","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3209:247","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Socket","id":"0:114:2400","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:652":{"id":"0:652","crate_id":0,"name":null,"span":{"filename":"src/sys/unix.rs","begin":[526,0],"end":[550,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10384:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"crate::Protocol","id":"0:676:2448","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:653:802"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2713-0:627:2402":{"id":"b:2:2713-0:627:2402","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32306:4430","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2707:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"InterfaceIndexOrAddress","id":"0:627:2402","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2715:4328"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:65:832":{"id":"0:65:832","crate_id":0,"name":"from","span":{"filename":"src/sockaddr.rs","begin":[268,4],"end":[273,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["addr",{"resolved_path":{"name":"SocketAddr","id":"2:42013:2348","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"SockAddr","id":"0:622:2399","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:569":{"id":"0:569","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[409,0],"end":[415,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Deref","id":"2:3417:124","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MaybeUninitSlice","id":"0:559:2488","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["0:571:249","0:572:630"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2986-0:654:2410":{"id":"b:2:2986-0:654:2410","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2963:144","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2960:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Domain","id":"0:654:2410","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2989:2815"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2990-0:273:2401":{"id":"b:2:2990-0:273:2401","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2963:144","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"SockRef","id":"0:273:2401","args":{"angle_bracketed":{"args":[{"lifetime":"'s"}],"bindings":[]}}}},"items":["2:2992:832"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:3001-0:580:2523":{"id":"b:2:3001-0:580:2523","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2960:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2970:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"MsgHdr","id":"0:580:2523","args":{"angle_bracketed":{"args":[{"lifetime":"'addr"},{"lifetime":"'bufs"},{"lifetime":"'control"}],"bindings":[]}}}},"items":["2:3004:137","2:3005:1807"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:517:3642":{"id":"0:517:3642","crate_id":0,"name":"as_raw_fd","span":{"filename":"src/sys/unix.rs","begin":[3097,4],"end":[3099,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"c_int","id":"20:44:2398","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:612:2543":{"id":"0:612:2543","crate_id":0,"name":"with_buffers","span":{"filename":"src/lib.rs","begin":[704,4],"end":[707,5]},"visibility":"public","docs":"Set the mutable buffer(s) of the message.\n\nCorresponds to setting `msg_iov` and `msg_iovlen` on Unix and `lpBuffers`\nand `dwBufferCount` on Windows.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["bufs",{"borrowed_ref":{"lifetime":"'bufs","mutable":true,"type":{"slice":{"resolved_path":{"name":"MaybeUninitSlice","id":"0:559:2488","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:207:3421":{"id":"0:207:3421","crate_id":0,"name":"set_multicast_ttl_v4","span":{"filename":"src/socket.rs","begin":[1520,4],"end":[1529,5]},"visibility":"public","docs":"Set the value of the `IP_MULTICAST_TTL` option for this socket.\n\nIndicates the time-to-live value of outgoing multicast packets for\nthis socket. The default value is 1 which means that multicast packets\ndon't leave the local network unless explicitly requested.\n\nNote that this may not have any affect on IPv6 sockets.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["ttl",{"primitive":"u32"}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3059:226","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:610:1178":{"id":"0:610:1178","crate_id":0,"name":"new","span":{"filename":"src/lib.rs","begin":[682,4],"end":[688,5]},"visibility":"public","docs":"Create a new `MsgHdrMut` with all empty/zero fields.","links":{},"attrs":["#[allow(clippy::new_without_default)]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"MsgHdrMut","id":"0:600:2560","args":{"angle_bracketed":{"args":[{"lifetime":"'addr"},{"lifetime":"'bufs"},{"lifetime":"'control"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:5:738-0:665:2426":{"id":"b:5:738-0:665:2426","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2729:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:734:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Type","id":"0:665:2426","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:740:11125","5:741:11126","5:742:11127"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:42167:10679-0:559:2488":{"id":"a:2:42167:10679-0:559:2488","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:42167:10679","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MaybeUninitSlice","id":"0:559:2488","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"5:5624:36697":{"id":"5:5624:36697","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7645:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7645:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:284:832":{"id":"0:284:832","crate_id":0,"name":"from","span":{"filename":"src/sockref.rs","begin":[87,4],"end":[94,5]},"visibility":"default","docs":"The caller must ensure `S` is actually a socket.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["socket",{"borrowed_ref":{"lifetime":"'s","mutable":false,"type":{"generic":"S"}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:662":{"id":"0:662","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[208,26],"end":[208,35]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"2:32307:244","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Domain","id":"0:654:2410","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:253:2360":{"id":"0:253:2360","crate_id":0,"name":"write","span":{"filename":"src/socket.rs","begin":[2170,4],"end":[2172,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["buf",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3059:226","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:142:3078":{"id":"0:142:3078","crate_id":0,"name":"peek","span":{"filename":"src/socket.rs","begin":[516,4],"end":[518,5]},"visibility":"public","docs":"Receives data on the socket from the remote adress to which it is\nconnected, without removing that data from the queue. On success,\nreturns the number of bytes peeked.\n\nSuccessive calls return the same data. This is accomplished by passing\n`MSG_PEEK` as a flag to the underlying `recv` system call.\n\n# Safety\n\n`peek` makes the same safety guarantees regarding the `buf`fer as\n[`recv`].\n\n[`recv`]: Socket::recv","links":{"Socket::recv":"0:137:3028"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["buf",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"resolved_path":{"name":"MaybeUninit","id":"2:30688:2346","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u8"}}],"bindings":[]}}}}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3059:226","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13296:33557":{"id":"2:13296:33557","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"2:13297:33549"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitWhitespace","id":"2:44239:14767","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:568:1178":{"id":"0:568:1178","crate_id":0,"name":"new","span":{"filename":"src/lib.rs","begin":[404,4],"end":[406,5]},"visibility":"public","docs":"Creates a new `MaybeUninitSlice` wrapping a byte slice.\n\n# Panics\n\nPanics on Windows if the slice is larger than 4GB.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["buf",{"borrowed_ref":{"lifetime":"'a","mutable":true,"type":{"slice":{"resolved_path":{"name":"MaybeUninit","id":"2:30688:2346","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u8"}}],"bindings":[]}}}}}}}]],"output":{"resolved_path":{"name":"MaybeUninitSlice","id":"0:559:2488","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:578:2511":{"id":"0:578:2511","crate_id":0,"name":"with_time","span":{"filename":"src/lib.rs","begin":[496,4],"end":[501,5]},"visibility":"public","docs":"Set the amount of time after which TCP keepalive probes will be sent on\nidle connections.\n\nThis will set `TCP_KEEPALIVE` on macOS and iOS, and\n`TCP_KEEPIDLE` on all other Unix operating systems, except\nOpenBSD and Haiku which don't support any way to set this\noption. On Windows, this sets the value of the `tcp_keepalive`\nstruct's `keepalivetime` field.\n\nSome platforms specify this value in seconds, so sub-second\nspecifications may be omitted.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["time",{"resolved_path":{"name":"Duration","id":"2:44733:130","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:175:3238":{"id":"0:175:3238","crate_id":0,"name":"passcred","span":{"filename":"src/socket.rs","begin":[975,4],"end":[980,5]},"visibility":"public","docs":"Get value for the `SO_PASSCRED` option on this socket.\n\nFor more information about this option, see [`set_passcred`].\n\n[`set_passcred`]: Socket::set_passcred","links":{"Socket::set_passcred":"0:177:3243"},"attrs":["#[cfg(all(unix, target_os = \"linux\"))]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3059:226","args":{"angle_bracketed":{"args":[{"type":{"primitive":"bool"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:3244:4427-0:600:2560":{"id":"a:2:3244:4427-0:600:2560","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'addr","kind":{"lifetime":{"outlives":[]}}},{"name":"'bufs","kind":{"lifetime":{"outlives":[]}}},{"name":"'control","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"2:3244:4427","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MsgHdrMut","id":"0:600:2560","args":{"angle_bracketed":{"args":[{"lifetime":"'addr"},{"lifetime":"'bufs"},{"lifetime":"'control"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:234:3523":{"id":"0:234:3523","crate_id":0,"name":"set_only_v6","span":{"filename":"src/socket.rs","begin":[1866,4],"end":[1875,5]},"visibility":"public","docs":"Set the value for the `IPV6_V6ONLY` option on this socket.\n\nIf this is set to `true` then the socket is restricted to sending and\nreceiving IPv6 packets only. In this case two IPv4 and IPv6 applications\ncan bind the same port at the same time.\n\nIf this is set to `false` then the socket can be used to send and\nreceive packets from an IPv4-mapped IPv6 address.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["only_v6",{"primitive":"bool"}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3059:226","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2713-0:665:2426":{"id":"b:2:2713-0:665:2426","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32306:4430","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2707:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Type","id":"0:665:2426","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2715:4328"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:32364:4431-0:676:2448":{"id":"a:2:32364:4431-0:676:2448","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32364:4431","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Protocol","id":"0:676:2448","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:3828-0:622:2399":{"id":"b:2:3828-0:622:2399","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:32306:4430","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3826:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"SockAddr","id":"0:622:2399","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3830:1822"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:218:3457":{"id":"0:218:3457","crate_id":0,"name":"join_multicast_v6","span":{"filename":"src/socket.rs","begin":[1662,4],"end":[1676,5]},"visibility":"public","docs":"Join a multicast group using `IPV6_ADD_MEMBERSHIP` option on this socket.\n\nSome OSs use `IPV6_JOIN_GROUP` for this option.\n\nThis function specifies a new multicast group for this socket to join.\nThe address must be a valid multicast address, and `interface` is the\nindex of the interface to join/leave (or 0 to indicate any interface).","links":{},"attrs":["#[cfg(not(target_os = \"nto\"))]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["multiaddr",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Ipv6Addr","id":"2:41851:2836","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],["interface",{"primitive":"u32"}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3059:226","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2713-0:114:2400":{"id":"b:2:2713-0:114:2400","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32306:4430","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2707:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Socket","id":"0:114:2400","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2715:4328"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:405:3704":{"id":"0:405:3704","crate_id":0,"name":"is_out_of_band","span":{"filename":"src/sys/unix.rs","begin":[575,4],"end":[577,5]},"visibility":"public","docs":"Check if the message contains out-of-band data.\n\nThis is useful for protocols where you receive out-of-band data\nmixed in with the normal data stream.\n\nOn Unix this corresponds to the `MSG_OOB` flag.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13280:31679":{"id":"2:13280:31679","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:42075:191"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:42073:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:11045:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:11045:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:547":{"id":"0:547","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[308,0],"end":[349,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Protocol","id":"0:676:2448","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:548:2450","0:549:2453","0:550:2456","0:551:2459","0:552:2462"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:549:2453":{"id":"0:549:2453","crate_id":0,"name":"ICMPV6","span":{"filename":"src/lib.rs","begin":[313,4],"end":[313,63]},"visibility":"public","docs":"Protocol corresponding to `ICMPv6`.","links":{},"attrs":[],"deprecation":null,"inner":{"assoc_const":{"type":{"resolved_path":{"name":"Protocol","id":"0:676:2448","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"default":"_"}}},"b:5:738-0:654:2410":{"id":"b:5:738-0:654:2410","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2729:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:734:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Domain","id":"0:654:2410","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:740:11125","5:741:11126","5:742:11127"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:180:3252":{"id":"0:180:3252","crate_id":0,"name":"set_recv_buffer_size","span":{"filename":"src/socket.rs","begin":[1015,4],"end":[1024,5]},"visibility":"public","docs":"Set value for the `SO_RCVBUF` option on this socket.\n\nChanges the size of the operating system's receive buffer associated\nwith the socket.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["size",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3059:226","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:280:630":{"id":"0:280:630","crate_id":0,"name":"deref","span":{"filename":"src/sockref.rs","begin":[74,4],"end":[76,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Target","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"2:3417:124","args":null}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2716-0:698:2498":{"id":"b:2:2716-0:698:2498","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32306:4430","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2710:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"TcpKeepalive","id":"0:698:2498","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2718:27758"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:636":{"id":"0:636","crate_id":0,"name":null,"span":{"filename":"src/socket.rs","begin":[2209,0],"end":[2209,29]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2963:144","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"TcpStream","id":"1:3897:2899","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Socket","id":"0:114:2400","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:637:832"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2716-0:676:2448":{"id":"b:2:2716-0:676:2448","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32306:4430","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2710:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Protocol","id":"0:676:2448","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2718:27758"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:640":{"id":"0:640","crate_id":0,"name":null,"span":{"filename":"src/socket.rs","begin":[2211,0],"end":[2211,29]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2963:144","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UdpSocket","id":"1:4002:3592","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Socket","id":"0:114:2400","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:641:832"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:531":{"id":"0:531","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[211,0],"end":[228,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Domain","id":"0:654:2410","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:532:2412","0:533:2415","0:534:2418","0:535:2421"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13395:32862":{"id":"2:13395:32862","crate_id":2,"name":"trim_ascii","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing ASCII whitespace\nremoved.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\nassert_eq!(\"\\r hello world\\n \".trim_ascii(), \"hello world\");\nassert_eq!(\"  \".trim_ascii(), \"\");\nassert_eq!(\"\".trim_ascii(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:1061:39634"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:406":{"id":"0:406","crate_id":0,"name":null,"span":{"filename":"src/sys/unix.rs","begin":[612,0],"end":[626,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(target_os = \"redox\"))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10384:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"crate::RecvFlags","id":"0:687:2478","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:407:802"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:3000:1809":{"id":"2:3000:1809","crate_id":2,"name":"try_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Result","id":"2:42206:226","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"2:2970:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:258:2360":{"id":"0:258:2360","crate_id":0,"name":"write","span":{"filename":"src/socket.rs","begin":[2185,4],"end":[2187,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["buf",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3059:226","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:70":{"id":"0:70","crate_id":0,"name":null,"span":{"filename":"src/sockaddr.rs","begin":[352,0],"end":[374,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10384:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"SockAddr","id":"0:622:2399","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:71:802"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:3209:247-0:698:2498":{"id":"a:2:3209:247-0:698:2498","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3209:247","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TcpKeepalive","id":"0:698:2498","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2986-0:580:2523":{"id":"b:2:2986-0:580:2523","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2963:144","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2960:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"MsgHdr","id":"0:580:2523","args":{"angle_bracketed":{"args":[{"lifetime":"'addr"},{"lifetime":"'bufs"},{"lifetime":"'control"}],"bindings":[]}}}},"items":["2:2989:2815"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:43:1178":{"id":"0:43:1178","crate_id":0,"name":"new","span":{"filename":"src/sockaddr.rs","begin":[73,4],"end":[75,5]},"visibility":"public","docs":"Create a `SockAddr` from the underlying storage and its length.\n\n# Safety\n\nCaller must ensure that the address family and length match the type of\nstorage address. For example if `storage.ss_family` is set to `AF_INET`\nthe `storage` must be initialised as `sockaddr_in`, setting the content\nand length appropriately.\n\n# Examples\n\n```\n# fn main() -> std::io::Result<()> {\n# #[cfg(unix)] {\nuse std::io;\nuse std::mem;\nuse std::os::unix::io::AsRawFd;\n\nuse socket2::{SockAddr, Socket, Domain, Type};\n\nlet socket = Socket::new(Domain::IPV4, Type::STREAM, None)?;\n\n// Initialise a `SocketAddr` byte calling `getsockname(2)`.\nlet mut addr_storage: libc::sockaddr_storage = unsafe { mem::zeroed() };\nlet mut len = mem::size_of_val(&addr_storage) as libc::socklen_t;\n\n// The `getsockname(2)` system call will intiliase `storage` for\n// us, setting `len` to the correct length.\nlet res = unsafe {\n    libc::getsockname(\n        socket.as_raw_fd(),\n        (&mut addr_storage as *mut libc::sockaddr_storage).cast(),\n        &mut len,\n    )\n};\nif res == -1 {\n    return Err(io::Error::last_os_error());\n}\n\nlet address = unsafe { SockAddr::new(addr_storage, len) };\n# drop(address);\n# }\n# Ok(())\n# }\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["storage",{"resolved_path":{"name":"sockaddr_storage","id":"20:1703:2703","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}],["len",{"resolved_path":{"name":"socklen_t","id":"20:1898:2704","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"SockAddr","id":"0:622:2399","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:32305:237-0:273:2401":{"id":"a:2:32305:237-0:273:2401","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'s","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:32305:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"SockRef","id":"0:273:2401","args":{"angle_bracketed":{"args":[{"lifetime":"'s"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:539:832":{"id":"0:539:832","crate_id":0,"name":"from","span":{"filename":"src/lib.rs","begin":[237,4],"end":[239,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["d",{"resolved_path":{"name":"Domain","id":"0:654:2410","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"c_int","id":"20:44:2398","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2990-0:580:2523":{"id":"b:2:2990-0:580:2523","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2963:144","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"MsgHdr","id":"0:580:2523","args":{"angle_bracketed":{"args":[{"lifetime":"'addr"},{"lifetime":"'bufs"},{"lifetime":"'control"}],"bindings":[]}}}},"items":["2:2992:832"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:3001-0:600:2560":{"id":"b:2:3001-0:600:2560","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2960:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2970:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"MsgHdrMut","id":"0:600:2560","args":{"angle_bracketed":{"args":[{"lifetime":"'addr"},{"lifetime":"'bufs"},{"lifetime":"'control"}],"bindings":[]}}}},"items":["2:3004:137","2:3005:1807"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13399:36002":{"id":"2:13399:36002","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"2:5019:36002"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeUnicode","id":"2:44282:14700","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13291:31708":{"id":"2:13291:31708","crate_id":2,"name":"split_at_mut_checked","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that’s not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at_checked`] method.\n\n[`split_at_checked`]: str::split_at_checked\n\n# Examples\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\nif let Some((first, last)) = s.split_at_mut_checked(3) {\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n\nassert_eq!(None, s.split_at_mut_checked(13));  // Inside “ö”\nassert_eq!(None, s.split_at_mut_checked(16));  // Beyond the string length\n```","links":{"str::split_at_checked":"2:13290:31707"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"2:42073:194","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5632:36698":{"id":"5:5632:36698","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:7645:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7645:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:3244:4427-0:580:2523":{"id":"a:2:3244:4427-0:580:2523","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'addr","kind":{"lifetime":{"outlives":[]}}},{"name":"'bufs","kind":{"lifetime":{"outlives":[]}}},{"name":"'control","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"2:3244:4427","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MsgHdr","id":"0:580:2523","args":{"angle_bracketed":{"args":[{"lifetime":"'addr"},{"lifetime":"'bufs"},{"lifetime":"'control"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:13396:36001":{"id":"2:13396:36001","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"2:5021:36001"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDebug","id":"2:44264:14701","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:32305:237-0:665:2426":{"id":"a:2:32305:237-0:665:2426","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:32305:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Type","id":"0:665:2426","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:286:802":{"id":"0:286:802","crate_id":0,"name":"fmt","span":{"filename":"src/sockref.rs","begin":[116,4],"end":[122,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"2:10358:143","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"2:10339:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:641:832":{"id":"0:641:832","crate_id":0,"name":"from","span":{"filename":"src/socket.rs","begin":[2211,0],"end":[2211,29]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["socket",{"resolved_path":{"name":"net::UdpSocket","id":"1:4002:3592","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Socket","id":"0:114:2400","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:540":{"id":"0:540","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[254,0],"end":[284,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Type","id":"0:665:2426","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:541:2429","0:542:2433"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:3828-0:676:2448":{"id":"b:2:3828-0:676:2448","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:32306:4430","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3826:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Protocol","id":"0:676:2448","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3830:1822"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:243":{"id":"0:243","crate_id":0,"name":null,"span":{"filename":"src/socket.rs","begin":[2135,0],"end":[2152,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["read_buf","is_read_vectored","take","read_buf_exact","read_to_end","read_to_string","chain","bytes","read_exact","by_ref","read_vectored"],"trait":{"name":"Read","id":"1:3586:2863","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Socket","id":"0:114:2400","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:244:3586","0:245:3587"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:75":{"id":"0:75","crate_id":0,"name":null,"span":{"filename":"src/sockaddr.rs","begin":[384,0],"end":[388,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["hash_slice"],"trait":{"name":"Hash","id":"2:10600:153","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"SockAddr","id":"0:622:2399","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:76:872"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:536":{"id":"0:536","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[230,0],"end":[234,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2963:144","args":{"angle_bracketed":{"args":[{"type":{"primitive":"i32"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Domain","id":"0:654:2410","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:537:832"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13389:32857":{"id":"2:13389:32857","crate_id":2,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"2:39974:21867","Self::is_ascii":"2:13388:28163"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:42073:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"AsciiChar","id":"2:39974:21867","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:165:3188":{"id":"0:165:3188","crate_id":0,"name":"set_broadcast","span":{"filename":"src/socket.rs","begin":[854,4],"end":[863,5]},"visibility":"public","docs":"Set the value of the `SO_BROADCAST` option for this socket.\n\nWhen enabled, this socket is allowed to send packets to a broadcast\naddress.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["broadcast",{"primitive":"bool"}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3059:226","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:60:2794":{"id":"0:60:2794","crate_id":0,"name":"as_socket","span":{"filename":"src/sockaddr.rs","begin":[210,4],"end":[238,5]},"visibility":"public","docs":"Returns this address as a `SocketAddr` if it is in the `AF_INET` (IPv4)\nor `AF_INET6` (IPv6) family, otherwise returns `None`.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:42073:194","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"SocketAddr","id":"2:42013:2348","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:167:3201":{"id":"0:167:3201","crate_id":0,"name":"keepalive","span":{"filename":"src/socket.rs","begin":[883,4],"end":[888,5]},"visibility":"public","docs":"Get the value of the `SO_KEEPALIVE` option on this socket.\n\nFor more information about this option, see [`set_keepalive`].\n\n[`set_keepalive`]: Socket::set_keepalive","links":{"Socket::set_keepalive":"0:169:3205"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3059:226","args":{"angle_bracketed":{"args":[{"type":{"primitive":"bool"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:147:3112":{"id":"0:147:3112","crate_id":0,"name":"peek_from","span":{"filename":"src/socket.rs","begin":[618,4],"end":[620,5]},"visibility":"public","docs":"Receives data from the socket, without removing it from the queue.\n\nSuccessive calls return the same data. This is accomplished by passing\n`MSG_PEEK` as a flag to the underlying `recvfrom` system call.\n\nOn success, returns the number of bytes peeked and the address from\nwhence the data came.\n\n# Safety\n\n`peek_from` makes the same safety guarantees regarding the `buf`fer as\n[`recv`].\n\n# Note: Datagram Sockets\nFor datagram sockets, the behavior of this method when `buf` is smaller than\nthe datagram at the head of the receive queue differs between Windows and\nUnix-like platforms (Linux, macOS, BSDs, etc: colloquially termed \"*nix\").\n\nOn *nix platforms, the datagram is truncated to the length of `buf`.\n\nOn Windows, an error corresponding to `WSAEMSGSIZE` will be returned.\n\nFor consistency between platforms, be sure to provide a sufficiently large buffer to avoid\ntruncation; the exact size required depends on the underlying protocol.\n\nIf you just want to know the sender of the data, try [`peek_sender`].\n\n[`recv`]: Socket::recv\n[`peek_sender`]: Socket::peek_sender","links":{"Socket::recv":"0:137:3028","Socket::peek_sender":"0:148:3117"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["buf",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"resolved_path":{"name":"MaybeUninit","id":"2:30688:2346","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u8"}}],"bindings":[]}}}}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3059:226","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"primitive":"usize"},{"resolved_path":{"name":"SockAddr","id":"0:622:2399","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:542:2433":{"id":"0:542:2433","crate_id":0,"name":"DGRAM","span":{"filename":"src/lib.rs","begin":[263,4],"end":[263,50]},"visibility":"public","docs":"Type corresponding to `SOCK_DGRAM`.\n\nUsed for protocols such as UDP.","links":{},"attrs":[],"deprecation":null,"inner":{"assoc_const":{"type":{"resolved_path":{"name":"Type","id":"0:665:2426","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"default":"_"}}},"2:2992:832":{"id":"2:2992:832","crate_id":2,"name":"from","span":null,"visibility":"default","docs":"Returns the argument unchanged.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["t",{"generic":"T"}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3828-0:559:2488":{"id":"b:2:3828-0:559:2488","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:32306:4430","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3826:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MaybeUninitSlice","id":"0:559:2488","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:3830:1822"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13284:31681":{"id":"2:13284:31681","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:11045:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:11045:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:225:3495":{"id":"0:225:3495","crate_id":0,"name":"set_multicast_if_v6","span":{"filename":"src/socket.rs","begin":[1784,4],"end":[1793,5]},"visibility":"public","docs":"Set the value of the `IPV6_MULTICAST_IF` option for this socket.\n\nSpecifies the interface to use for routing multicast packets. Unlike\nipv4, this is generally required in ipv6 contexts where network routing\nprefixes may overlap.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["interface",{"primitive":"u32"}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3059:226","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13364:35994":{"id":"2:13364:35994","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:208:3416":{"id":"0:208:3416","crate_id":0,"name":"ttl","span":{"filename":"src/socket.rs","begin":[1536,4],"end":[1540,5]},"visibility":"public","docs":"Get the value of the `IP_TTL` option for this socket.\n\nFor more information about this option, see [`set_ttl`].\n\n[`set_ttl`]: Socket::set_ttl","links":{"Socket::set_ttl":"0:210:3429"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3059:226","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u32"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:664:699":{"id":"0:664:699","crate_id":0,"name":"eq","span":{"filename":"src/lib.rs","begin":[208,26],"end":[208,35]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Domain","id":"0:654:2410","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:703:802":{"id":"0:703:802","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[426,9],"end":[426,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:10358:143","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:10339:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:71:802":{"id":"0:71:802","crate_id":0,"name":"fmt","span":{"filename":"src/sockaddr.rs","begin":[353,4],"end":[373,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["fmt",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"2:10358:143","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"2:10339:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:625":{"id":"0:625","crate_id":0,"name":null,"span":{"filename":"src/sockaddr.rs","begin":[20,9],"end":[20,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2729:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"SockAddr","id":"0:622:2399","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:626:475"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:64":{"id":"0:64","crate_id":0,"name":null,"span":{"filename":"src/sockaddr.rs","begin":[267,0],"end":[274,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2963:144","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"SocketAddr","id":"2:42013:2348","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"SockAddr","id":"0:622:2399","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:65:832"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13393:32860":{"id":"2:13393:32860","crate_id":2,"name":"trim_ascii_start","span":null,"visibility":"public","docs":"Returns a string slice with leading ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\nassert_eq!(\" \\t \\u{3000}hello world\\n\".trim_ascii_start(), \"\\u{3000}hello world\\n\");\nassert_eq!(\"  \".trim_ascii_start(), \"\");\nassert_eq!(\"\".trim_ascii_start(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:1061:39634"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3001-0:676:2448":{"id":"b:2:3001-0:676:2448","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2960:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2970:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Protocol","id":"0:676:2448","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3004:137","2:3005:1807"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:558:2484":{"id":"0:558:2484","crate_id":0,"name":"is_truncated","span":{"filename":"src/lib.rs","begin":[381,4],"end":[383,5]},"visibility":"public","docs":"Check if the message contains a truncated datagram.\n\nThis flag is only used for datagram-based sockets,\nnot for stream sockets.\n\nOn Unix this corresponds to the `MSG_TRUNC` flag.\nOn Windows this corresponds to the `WSAEMSGSIZE` error code.","links":{},"attrs":["#[cfg(not(target_os = \"espidf\"))]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3828-0:687:2478":{"id":"b:2:3828-0:687:2478","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:32306:4430","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3826:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RecvFlags","id":"0:687:2478","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3830:1822"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:611:2537":{"id":"0:611:2537","crate_id":0,"name":"with_addr","span":{"filename":"src/lib.rs","begin":[695,4],"end":[698,5]},"visibility":"public","docs":"Set the mutable address (name) of the message.\n\nCorresponds to setting `msg_name` and `msg_namelen` on Unix and `name`\nand `namelen` on Windows.","links":{},"attrs":["#[allow(clippy::needless_pass_by_ref_mut)]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["addr",{"borrowed_ref":{"lifetime":"'addr","mutable":true,"type":{"resolved_path":{"name":"SockAddr","id":"0:622:2399","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5618:4445":{"id":"5:5618:4445","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7645:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["from",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7645:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12961:15534","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:665:2426":{"id":"0:665:2426","crate_id":0,"name":"Type","span":{"filename":"src/lib.rs","begin":[252,0],"end":[252,23]},"visibility":"public","docs":"Specification of communication semantics on a socket.\n\nThis is a newtype wrapper around an integer which provides a nicer API in\naddition to an injection point for documentation. Convenience constants such\nas [`Type::STREAM`], [`Type::DGRAM`], etc, are provided to avoid reaching\ninto libc for various constants.\n\nThis type is freely interconvertible with C's `int` type, however, if a raw\nvalue needs to be provided.","links":{"`Type::DGRAM`":"0:542:2433","`Type::STREAM`":"0:541:2429"},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"tuple":[null]},"generics":{"params":[],"where_predicates":[]},"impls":["0:540","a:2:42167:10679-0:665:2426","a:2:3244:4427-0:665:2426","a:2:3209:247-0:665:2426","a:2:42168:10678-0:665:2426","a:2:32364:4431-0:665:2426","a:2:32305:237-0:665:2426","b:2:2713-0:665:2426","b:2:2990-0:665:2426","b:2:2716-0:665:2426","b:2:3828-0:665:2426","b:2:2996-0:665:2426","b:2:2986-0:665:2426","b:2:3001-0:665:2426","b:5:738-0:665:2426","0:669","0:671","0:650","0:543","0:674","0:673","0:668","0:545"]}}},"0:151:3129":{"id":"0:151:3129","crate_id":0,"name":"send_with_flags","span":{"filename":"src/socket.rs","begin":[660,4],"end":[662,5]},"visibility":"public","docs":"Identical to [`send`] but allows for specification of arbitrary flags to the underlying\n`send` call.\n\n[`send`]: Socket::send","links":{"Socket::send":"0:150:3128"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["buf",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}],["flags",{"resolved_path":{"name":"c_int","id":"20:44:2398","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3059:226","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:674":{"id":"0:674","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[251,26],"end":[251,35]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"2:2763:201","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Type","id":"0:665:2426","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:675:699"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:2718:27758":{"id":"2:2718:27758","crate_id":2,"name":"borrow_mut","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:235:3527":{"id":"0:235:3527","crate_id":0,"name":"recv_tclass_v6","span":{"filename":"src/socket.rs","begin":[1895,4],"end":[1900,5]},"visibility":"public","docs":"Get the value of the `IPV6_RECVTCLASS` option for this socket.\n\nFor more information about this option, see [`set_recv_tclass_v6`].\n\n[`set_recv_tclass_v6`]: Socket::set_recv_tclass_v6","links":{"Socket::set_recv_tclass_v6":"0:237:3534"},"attrs":["#[cfg(not(any(target_os = \"dragonfly\", target_os = \"fuchsia\", target_os =\n\"illumos\", target_os = \"netbsd\", target_os = \"openbsd\", target_os = \"redox\",\ntarget_os = \"solaris\", target_os = \"haiku\", target_os = \"hurd\", target_os =\n\"espidf\", target_os = \"vita\",)))]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3059:226","args":{"angle_bracketed":{"args":[{"type":{"primitive":"bool"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:252":{"id":"0:252","crate_id":0,"name":null,"span":{"filename":"src/socket.rs","begin":[2169,0],"end":[2182,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["write_all","is_write_vectored","write_vectored","write_all_vectored","write_fmt","by_ref"],"trait":{"name":"Write","id":"1:3643:2864","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Socket","id":"0:114:2400","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:253:2360","0:254:3588","0:255:3589"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:42168:10678-0:580:2523":{"id":"a:2:42168:10678-0:580:2523","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'addr","kind":{"lifetime":{"outlives":[]}}},{"name":"'bufs","kind":{"lifetime":{"outlives":[]}}},{"name":"'control","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:42168:10678","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MsgHdr","id":"0:580:2523","args":{"angle_bracketed":{"args":[{"lifetime":"'addr"},{"lifetime":"'bufs"},{"lifetime":"'control"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:520":{"id":"0:520","crate_id":0,"name":null,"span":{"filename":"src/sys/unix.rs","begin":[3111,0],"end":[3115,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"IntoRawFd","id":"1:4921:2869","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"crate::Socket","id":"0:114:2400","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:521:2365"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:202:3404":{"id":"0:202:3404","crate_id":0,"name":"multicast_loop_v4","span":{"filename":"src/socket.rs","begin":[1479,4],"end":[1484,5]},"visibility":"public","docs":"Get the value of the `IP_MULTICAST_LOOP` option for this socket.\n\nFor more information about this option, see [`set_multicast_loop_v4`].\n\n[`set_multicast_loop_v4`]: Socket::set_multicast_loop_v4","links":{"Socket::set_multicast_loop_v4":"0:204:3410"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3059:226","args":{"angle_bracketed":{"args":[{"type":{"primitive":"bool"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:653:802":{"id":"0:653:802","crate_id":0,"name":"fmt","span":{"filename":"src/sys/unix.rs","begin":[526,0],"end":[550,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"std::fmt::Formatter","id":"2:10358:143","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"std::fmt::Result","id":"2:10339:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:0:2575":{"id":"0:0:2575","crate_id":0,"name":"socket2","span":{"filename":"src/lib.rs","begin":[9,0],"end":[738,1]},"visibility":"public","docs":"Utilities for creating and using sockets.\n\nThe goal of this crate is to create and use a socket using advanced\nconfiguration options (those that are not available in the types in the\nstandard library) without using any unsafe code.\n\nThis crate provides as direct as possible access to the system's\nfunctionality for sockets, this means little effort to provide\ncross-platform utilities. It is up to the user to know how to use sockets\nwhen using this crate. *If you don't know how to create a socket using\nlibc/system calls then this crate is not for you*. Most, if not all,\nfunctions directly relate to the equivalent system call with no error\nhandling applied, so no handling errors such as [`EINTR`]. As a result using\nthis crate can be a little wordy, but it should give you maximal flexibility\nover configuration of sockets.\n\n[`EINTR`]: std::io::ErrorKind::Interrupted\n\n# Examples\n\n```no_run\n# fn main() -> std::io::Result<()> {\nuse std::net::{SocketAddr, TcpListener};\nuse socket2::{Socket, Domain, Type};\n\n// Create a TCP listener bound to two addresses.\nlet socket = Socket::new(Domain::IPV6, Type::STREAM, None)?;\n\nsocket.set_only_v6(false)?;\nlet address: SocketAddr = \"[::1]:12345\".parse().unwrap();\nsocket.bind(&address.into())?;\nsocket.listen(128)?;\n\nlet listener: TcpListener = socket.into();\n// ...\n# drop(listener);\n# Ok(()) }\n```\n\n## Features\n\nThis crate has a single feature `all`, which enables all functions even ones\nthat are not available on all OSs.","links":{"std::io::ErrorKind::Interrupted":"1:8420:3798"},"attrs":["#![deny(missing_docs, missing_debug_implementations, rust_2018_idioms)]","#![doc(test(attr(deny(warnings))))]"],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:527-0:622:2399","0:528-0:114:2400","0:529-0:273:2401","0:530-0:627:2402","0:654:2410","0:665:2426","0:676:2448","0:687:2478","0:559:2488","0:698:2498","0:580:2523","0:600:2560"],"is_stripped":false}}},"0:614:2554":{"id":"0:614:2554","crate_id":0,"name":"flags","span":{"filename":"src/lib.rs","begin":[719,4],"end":[721,5]},"visibility":"public","docs":"Returns the flags of the message.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"RecvFlags","id":"0:687:2478","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13359:35991":{"id":"2:13359:35991","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:680":{"id":"0:680","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[305,15],"end":[305,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2729:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Protocol","id":"0:676:2448","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:681:475"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:534:2418":{"id":"0:534:2418","crate_id":0,"name":"UNIX","span":{"filename":"src/lib.rs","begin":[219,4],"end":[219,50]},"visibility":"public","docs":"Domain for Unix socket communication, corresponding to `AF_UNIX`.","links":{},"attrs":[],"deprecation":null,"inner":{"assoc_const":{"type":{"resolved_path":{"name":"Domain","id":"0:654:2410","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"default":"_"}}},"0:565:802":{"id":"0:565:802","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[393,4],"end":[395,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["fmt",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"2:10358:143","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"2:10339:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:194:3340":{"id":"0:194:3340","crate_id":0,"name":"join_multicast_v4","span":{"filename":"src/socket.rs","begin":[1238,4],"end":[1244,5]},"visibility":"public","docs":"Join a multicast group using `IP_ADD_MEMBERSHIP` option on this socket.\n\nThis function specifies a new multicast group for this socket to join.\nThe address must be a valid multicast address, and `interface` is the\naddress of the local interface with which the system should join the\nmulticast group. If it's [`Ipv4Addr::UNSPECIFIED`] (`INADDR_ANY`) then\nan appropriate interface is chosen by the system.","links":{"`Ipv4Addr::UNSPECIFIED`":"2:8839:3849"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["multiaddr",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Ipv4Addr","id":"2:41835:2830","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],["interface",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Ipv4Addr","id":"2:41835:2830","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3059:226","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:627:2402":{"id":"0:627:2402","crate_id":0,"name":"InterfaceIndexOrAddress","span":{"filename":"src/socket.rs","begin":[825,0],"end":[830,1]},"visibility":"public","docs":"A local interface specified by its index or an address assigned to it.\n\n`Index(0)` and `Address(Ipv4Addr::UNSPECIFIED)` are equivalent and indicate\nthat an appropriate interface should be selected by the system.","links":{},"attrs":["#[cfg(not(any(target_os = \"haiku\", target_os = \"illumos\", target_os =\n\"netbsd\", target_os = \"redox\", target_os = \"solaris\",)))]"],"deprecation":null,"inner":{"enum":{"generics":{"params":[],"where_predicates":[]},"variants_stripped":false,"variants":["0:628:3173","0:631:3175"],"impls":["a:2:42167:10679-0:627:2402","a:2:3244:4427-0:627:2402","a:2:3209:247-0:627:2402","a:2:42168:10678-0:627:2402","a:2:32364:4431-0:627:2402","a:2:32305:237-0:627:2402","b:2:2713-0:627:2402","b:2:2990-0:627:2402","b:2:2716-0:627:2402","b:2:3828-0:627:2402","b:2:2996-0:627:2402","b:2:2986-0:627:2402","b:2:3001-0:627:2402","0:634"]}}},"0:430":{"id":"0:430","crate_id":0,"name":null,"span":{"filename":"src/sys/unix.rs","begin":[749,0],"end":[885,1]},"visibility":"default","docs":"Unix only API.","links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"crate::SockAddr","id":"0:622:2399","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:431:3758","0:437:3773","0:438:2833","0:441:2834"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:69:832":{"id":"0:69:832","crate_id":0,"name":"from","span":{"filename":"src/sockaddr.rs","begin":[310,4],"end":[349,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["addr",{"resolved_path":{"name":"SocketAddrV6","id":"2:42053:2694","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"SockAddr","id":"0:622:2399","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:32305:237-0:622:2399":{"id":"a:2:32305:237-0:622:2399","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:32305:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"SockAddr","id":"0:622:2399","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:525:2364":{"id":"0:525:2364","crate_id":0,"name":"from_raw_fd","span":{"filename":"src/sys/unix.rs","begin":[3127,4],"end":[3129,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["fd",{"resolved_path":{"name":"c_int","id":"20:44:2398","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"crate::Socket","id":"0:114:2400","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:671":{"id":"0:671","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[251,22],"end":[251,24]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"2:2768:134","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Type","id":"0:665:2426","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:139:3039":{"id":"0:139:3039","crate_id":0,"name":"recv_with_flags","span":{"filename":"src/socket.rs","begin":[439,4],"end":[445,5]},"visibility":"public","docs":"Identical to [`recv`] but allows for specification of arbitrary flags to\nthe underlying `recv` call.\n\n[`recv`]: Socket::recv","links":{"Socket::recv":"0:137:3028"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["buf",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"resolved_path":{"name":"MaybeUninit","id":"2:30688:2346","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u8"}}],"bindings":[]}}}}}}}],["flags",{"resolved_path":{"name":"libc::c_int","id":"20:44:2398","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3059:226","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:519:832":{"id":"0:519:832","crate_id":0,"name":"from","span":{"filename":"src/sys/unix.rs","begin":[3104,4],"end":[3107,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["sock",{"resolved_path":{"name":"crate::Socket","id":"0:114:2400","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"OwnedFd","id":"1:4975:3654","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:3209:247-0:273:2401":{"id":"a:2:3209:247-0:273:2401","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'s","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3209:247","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"SockRef","id":"0:273:2401","args":{"angle_bracketed":{"args":[{"lifetime":"'s"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:3004:137":{"id":"2:3004:137","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Infallible","id":"2:32229:13765","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"b:2:2996-0:687:2478":{"id":"b:2:2996-0:687:2478","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2970:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2966:258","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RecvFlags","id":"0:687:2478","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2999:137","2:3000:1809"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:42168:10678-0:627:2402":{"id":"a:2:42168:10678-0:627:2402","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:42168:10678","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"InterfaceIndexOrAddress","id":"0:627:2402","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:2:32364:4431-0:559:2488":{"id":"a:2:32364:4431-0:559:2488","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32364:4431","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"MaybeUninitSlice","id":"0:559:2488","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:121:1178":{"id":"0:121:1178","crate_id":0,"name":"new","span":{"filename":"src/socket.rs","begin":[131,4],"end":[134,5]},"visibility":"public","docs":"Creates a new socket and sets common flags.\n\nThis function corresponds to `socket(2)` on Unix and `WSASocketW` on\nWindows.\n\nOn Unix-like systems, the close-on-exec flag is set on the new socket.\nAdditionally, on Apple platforms `SOCK_NOSIGPIPE` is set. On Windows,\nthe socket is made non-inheritable.\n\n[`Socket::new_raw`] can be used if you don't want these flags to be set.\n\nAdditional documentation can be found in manual of the OS:\n\n * DragonFly BSD: <https://man.dragonflybsd.org/?command=socket&section=2>\n * FreeBSD: <https://www.freebsd.org/cgi/man.cgi?query=socket&sektion=2>\n * Linux: <https://man7.org/linux/man-pages/man2/socket.2.html>\n * macOS: <https://developer.apple.com/library/archive/documentation/System/Conceptual/ManPages_iPhoneOS/man2/socket.2.html> (archived, actually for iOS)\n * NetBSD: <https://man.netbsd.org/socket.2>\n * OpenBSD: <https://man.openbsd.org/socket.2>\n * iOS: <https://developer.apple.com/library/archive/documentation/System/Conceptual/ManPages_iPhoneOS/man2/socket.2.html> (archived)\n * illumos: <https://illumos.org/man/3SOCKET/socket>\n * Windows: <https://docs.microsoft.com/en-us/windows/win32/api/winsock2/nf-winsock2-socket>","links":{"`Socket::new_raw`":"0:122:2920"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["domain",{"resolved_path":{"name":"Domain","id":"0:654:2410","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}],["ty",{"resolved_path":{"name":"Type","id":"0:665:2426","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}],["protocol",{"resolved_path":{"name":"Option","id":"2:42073:194","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Protocol","id":"0:676:2448","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3059:226","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Socket","id":"0:114:2400","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13277:2565":{"id":"2:13277:2565","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:12360:1852"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:673":{"id":"0:673","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[251,26],"end":[251,35]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"2:32307:244","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Type","id":"0:665:2426","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:182:3262":{"id":"0:182:3262","crate_id":0,"name":"set_read_timeout","span":{"filename":"src/socket.rs","begin":[1038,4],"end":[1040,5]},"visibility":"public","docs":"Set value for the `SO_RCVTIMEO` option on this socket.\n\nIf `timeout` is `None`, then `read` and `recv` calls will block\nindefinitely.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["duration",{"resolved_path":{"name":"Option","id":"2:42073:194","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Duration","id":"2:44733:130","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3059:226","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:67:832":{"id":"0:67:832","crate_id":0,"name":"from","span":{"filename":"src/sockaddr.rs","begin":[277,4],"end":[306,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["addr",{"resolved_path":{"name":"SocketAddrV4","id":"2:42035:2693","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"SockAddr","id":"0:622:2399","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:541:2429":{"id":"0:541:2429","crate_id":0,"name":"STREAM","span":{"filename":"src/lib.rs","begin":[258,4],"end":[258,52]},"visibility":"public","docs":"Type corresponding to `SOCK_STREAM`.\n\nUsed for protocols such as TCP.","links":{},"attrs":[],"deprecation":null,"inner":{"assoc_const":{"type":{"resolved_path":{"name":"Type","id":"0:665:2426","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"default":"_"}}},"2:13321:31710":{"id":"2:13321:31710","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"1:12341:471","self::pattern":"2:12955:21793"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitInclusive","id":"2:12770:11174","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12961:15534","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:546:832":{"id":"0:546:832","crate_id":0,"name":"from","span":{"filename":"src/lib.rs","begin":[293,4],"end":[295,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["t",{"resolved_path":{"name":"Type","id":"0:665:2426","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"c_int","id":"20:44:2398","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:134:3009":{"id":"0:134:3009","crate_id":0,"name":"try_clone","span":{"filename":"src/socket.rs","begin":[359,4],"end":[361,5]},"visibility":"public","docs":"Creates a new independently owned handle to the underlying socket.\n\n# Notes\n\nOn Unix this uses `F_DUPFD_CLOEXEC` and thus sets the `FD_CLOEXEC` on\nthe returned socket.\n\nOn Windows this uses `WSA_FLAG_NO_HANDLE_INHERIT` setting inheriting to\nfalse.\n\nOn Windows this can **not** be used function cannot be used on a\nQOS-enabled socket, see\n<https://docs.microsoft.com/en-us/windows/win32/api/winsock2/nf-winsock2-wsaduplicatesocketw>.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3059:226","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Socket","id":"0:114:2400","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13390:28167":{"id":"2:13390:28167","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:185:3274":{"id":"0:185:3274","crate_id":0,"name":"set_reuse_address","span":{"filename":"src/socket.rs","begin":[1059,4],"end":[1068,5]},"visibility":"public","docs":"Set value for the `SO_REUSEADDR` option on this socket.\n\nThis indicates that futher calls to `bind` may allow reuse of local\naddresses. For IPv4 sockets this means that a socket may bind even when\nthere's a socket already listening on this port.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["reuse",{"primitive":"bool"}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3059:226","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3828-0:665:2426":{"id":"b:2:3828-0:665:2426","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:32306:4430","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3826:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Type","id":"0:665:2426","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3830:1822"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:668":{"id":"0:668","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[251,9],"end":[251,13]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"2:3204:117","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Type","id":"0:665:2426","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:42168:10678-0:654:2410":{"id":"a:2:42168:10678-0:654:2410","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:42168:10678","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Domain","id":"0:654:2410","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:250:3587":{"id":"0:250:3587","crate_id":0,"name":"read_vectored","span":{"filename":"src/socket.rs","begin":[2162,4],"end":[2166,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(target_os = \"redox\"))]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["bufs",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"resolved_path":{"name":"IoSliceMut","id":"1:3604:2865","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3059:226","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:117":{"id":"0:117","crate_id":0,"name":null,"span":{"filename":"src/socket.rs","begin":[82,0],"end":[751,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Socket","id":"0:114:2400","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:121:1178","0:122:2920","0:124:2935","0:125:2941","0:126:2961","0:127:2972","0:128:2978","0:129:2981","0:131:2990","0:132:2996","0:133:34","0:134:3009","0:135:2963","0:136:3022","0:137:3028","0:138:3046","0:139:3039","0:140:3064","0:141:3065","0:142:3078","0:143:3084","0:144:3085","0:145:3092","0:146:3093","0:147:3112","0:148:3117","0:149:3054","0:150:3128","0:151:3129","0:152:3134","0:153:3135","0:154:3143","0:155:3148","0:156:3149","0:157:3155","0:158:3156","0:159:3138"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:153:3135":{"id":"0:153:3135","crate_id":0,"name":"send_vectored_with_flags","span":{"filename":"src/socket.rs","begin":[678,4],"end":[684,5]},"visibility":"public","docs":"Identical to [`send_vectored`] but allows for specification of arbitrary\nflags to the underlying `sendmsg`/`WSASend` call.\n\nAdditional documentation can be found in manual of the OS:\n\n * DragonFly BSD: <https://man.dragonflybsd.org/?command=sendmsg&section=2>\n * FreeBSD: <https://www.freebsd.org/cgi/man.cgi?query=sendmsg&sektion=2>\n * Linux: <https://man7.org/linux/man-pages/man2/sendmsg.2.html>\n * macOS: <https://developer.apple.com/library/archive/documentation/System/Conceptual/ManPages_iPhoneOS/man2/sendmsg.2.html> (archived, actually for iOS)\n * NetBSD: <https://man.netbsd.org/sendmsg.2>\n * OpenBSD: <https://man.openbsd.org/sendmsg.2>\n * iOS: <https://developer.apple.com/library/archive/documentation/System/Conceptual/ManPages_iPhoneOS/man2/sendmsg.2.html> (archived)\n * illumos: <https://illumos.org/man/3SOCKET/sendmsg>\n * Windows: <https://docs.microsoft.com/en-us/windows/win32/api/winsock2/nf-winsock2-sendmsg>\n\n[`send_vectored`]: Socket::send_vectored","links":{"Socket::send_vectored":"0:152:3134"},"attrs":["#[cfg(not(target_os = \"redox\"))]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["bufs",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"IoSlice","id":"1:8488:2343","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}}],["flags",{"resolved_path":{"name":"c_int","id":"20:44:2398","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3059:226","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:211:3435":{"id":"0:211:3435","crate_id":0,"name":"set_tos","span":{"filename":"src/socket.rs","begin":[1564,4],"end":[1566,5]},"visibility":"public","docs":"Set the value of the `IP_TOS` option for this socket.\n\nThis value sets the type-of-service field that is used in every packet\nsent from this socket.\n\nNOTE: <https://docs.microsoft.com/en-us/windows/win32/winsock/ipproto-ip-socket-options>\ndocuments that not all versions of windows support `IP_TOS`.","links":{},"attrs":["#[cfg(not(any(target_os = \"fuchsia\", target_os = \"redox\", target_os =\n\"solaris\", target_os = \"illumos\", target_os = \"haiku\",)))]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["tos",{"primitive":"u32"}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3059:226","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:114:2400":{"id":"0:114:2400","crate_id":0,"name":"Socket","span":{"filename":"src/socket.rs","begin":[75,0],"end":[77,1]},"visibility":"public","docs":"Owned wrapper around a system socket.\n\nThis type simply wraps an instance of a file descriptor (`c_int`) on Unix\nand an instance of `SOCKET` on Windows. This is the main type exported by\nthis crate and is intended to mirror the raw semantics of sockets on\nplatforms as closely as possible. Almost all methods correspond to\nprecisely one libc or OS API call which is essentially just a \"Rustic\ntranslation\" of what's below.\n\n## Converting to and from other types\n\nThis type can be freely converted into the network primitives provided by\nthe standard library, such as [`TcpStream`] or [`UdpSocket`], using the\n[`From`] trait, see the example below.\n\n[`TcpStream`]: std::net::TcpStream\n[`UdpSocket`]: std::net::UdpSocket\n\n# Notes\n\nSome methods that set options on `Socket` require two system calls to set\ntheir options without overwriting previously set options. We do this by\nfirst getting the current settings, applying the desired changes, and then\nupdating the settings. This means that the operation is **not** atomic. This\ncan lead to a data race when two threads are changing options in parallel.\n\n# Examples\n```no_run\n# fn main() -> std::io::Result<()> {\nuse std::net::{SocketAddr, TcpListener};\nuse socket2::{Socket, Domain, Type};\n\n// create a TCP listener\nlet socket = Socket::new(Domain::IPV6, Type::STREAM, None)?;\n\nlet address: SocketAddr = \"[::1]:12345\".parse().unwrap();\nlet address = address.into();\nsocket.bind(&address)?;\nsocket.listen(128)?;\n\nlet listener: TcpListener = socket.into();\n// ...\n# drop(listener);\n# Ok(()) }\n```","links":{"`From`":"2:2963:144","std::net::UdpSocket":"1:4002:3592","std::net::TcpStream":"1:3897:2899"},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["0:117","0:162","0:193","0:217","0:238","a:2:42167:10679-0:114:2400","a:2:3244:4427-0:114:2400","a:2:3209:247-0:114:2400","a:2:42168:10678-0:114:2400","a:2:32364:4431-0:114:2400","a:2:32305:237-0:114:2400","b:2:2713-0:114:2400","b:2:2990-0:114:2400","b:2:2716-0:114:2400","b:2:3828-0:114:2400","b:2:2996-0:114:2400","b:2:2986-0:114:2400","b:2:3001-0:114:2400","0:243","0:640","0:516","0:644","0:514","0:642","0:520","0:638","0:256","0:252","0:261","0:247","0:646","0:522","0:524","0:518","0:636"]}}},"0:528-0:114:2400":{"id":"0:528-0:114:2400","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[187,0],"end":[187,23]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"socket::Socket","name":"Socket","id":"0:114:2400","glob":false}}},"0:580:2523":{"id":"0:580:2523","crate_id":0,"name":"MsgHdr","span":{"filename":"src/lib.rs","begin":[600,0],"end":[604,1]},"visibility":"public","docs":"Configuration of a `sendmsg(2)` system call.\n\nThis wraps `msghdr` on Unix and `WSAMSG` on Windows. Also see [`MsgHdrMut`]\nfor the variant used by `recvmsg(2)`.","links":{"`MsgHdrMut`":"0:600:2560"},"attrs":["#[cfg(not(target_os = \"redox\"))]"],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'addr","kind":{"lifetime":{"outlives":[]}}},{"name":"'bufs","kind":{"lifetime":{"outlives":[]}}},{"name":"'control","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"impls":["0:586","a:2:42167:10679-0:580:2523","a:2:3244:4427-0:580:2523","a:2:3209:247-0:580:2523","a:2:42168:10678-0:580:2523","a:2:32364:4431-0:580:2523","a:2:32305:237-0:580:2523","b:2:2713-0:580:2523","b:2:2990-0:580:2523","b:2:2716-0:580:2523","b:2:3828-0:580:2523","b:2:2996-0:580:2523","b:2:2986-0:580:2523","b:2:3001-0:580:2523","0:595"]}}},"0:281":{"id":"0:281","crate_id":0,"name":null,"span":{"filename":"src/sockref.rs","begin":[82,0],"end":[95,1]},"visibility":"default","docs":"On Windows, a corresponding `From<&impl AsSocket>` implementation exists.","links":{},"attrs":["#[cfg(unix)]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'s","kind":{"lifetime":{"outlives":[]}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"AsFd","id":"1:4998:3594","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2963:144","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'s","mutable":false,"type":{"generic":"S"}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"SockRef","id":"0:273:2401","args":{"angle_bracketed":{"args":[{"lifetime":"'s"}],"bindings":[]}}}},"items":["0:284:832"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:566":{"id":"0:566","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[398,0],"end":[407,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"MaybeUninitSlice","id":"0:559:2488","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["0:568:1178"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:556:832":{"id":"0:556:832","crate_id":0,"name":"from","span":{"filename":"src/lib.rs","begin":[358,4],"end":[360,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["p",{"resolved_path":{"name":"Protocol","id":"0:676:2448","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"c_int","id":"20:44:2398","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:195:3351":{"id":"0:195:3351","crate_id":0,"name":"leave_multicast_v4","span":{"filename":"src/socket.rs","begin":[1251,4],"end":[1264,5]},"visibility":"public","docs":"Leave a multicast group using `IP_DROP_MEMBERSHIP` option on this socket.\n\nFor more information about this option, see [`join_multicast_v4`].\n\n[`join_multicast_v4`]: Socket::join_multicast_v4","links":{"Socket::join_multicast_v4":"0:194:3340"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["multiaddr",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Ipv4Addr","id":"2:41835:2830","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],["interface",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Ipv4Addr","id":"2:41835:2830","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3059:226","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5621:36696":{"id":"5:5621:36696","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7645:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["count",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7645:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12961:15534","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:32364:4431-0:665:2426":{"id":"a:2:32364:4431-0:665:2426","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32364:4431","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Type","id":"0:665:2426","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2986-0:698:2498":{"id":"b:2:2986-0:698:2498","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2963:144","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2960:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"TcpKeepalive","id":"0:698:2498","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2989:2815"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:42168:10678-0:676:2448":{"id":"a:2:42168:10678-0:676:2448","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:42168:10678","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Protocol","id":"0:676:2448","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:13288:31703":{"id":"2:13288:31703","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_checked`](str::split_at_checked).\n\n# Examples\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_checked":"2:13290:31707","str::split_at_mut":"2:13289:31704"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2716-0:273:2401":{"id":"b:2:2716-0:273:2401","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32306:4430","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2710:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"SockRef","id":"0:273:2401","args":{"angle_bracketed":{"args":[{"lifetime":"'s"}],"bindings":[]}}}},"items":["2:2718:27758"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:697:699":{"id":"0:697:699","crate_id":0,"name":"eq","span":{"filename":"src/lib.rs","begin":[368,26],"end":[368,35]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"RecvFlags","id":"0:687:2478","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2990-0:698:2498":{"id":"b:2:2990-0:698:2498","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2963:144","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"TcpKeepalive","id":"0:698:2498","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2992:832"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13275:35981":{"id":"2:13275:35981","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:32305:237-0:687:2478":{"id":"a:2:32305:237-0:687:2478","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:32305:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RecvFlags","id":"0:687:2478","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}}},"paths":{"16:7656:23358":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"6:5212:8878":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"2:4912:11291":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"17:11702:14424":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsectionIterator"],"kind":"struct"},"2:7610:11078":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"6:4824:8842":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"6:6519:9609":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"17:10170:12510":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"17:11674:14422":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"6:1686:5812":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"2:10399:206":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"2:2000:1684":{"crate_id":2,"path":["core","mem","size_of"],"kind":"function"},"2:43850:11149":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"2:39711:214":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"17:13723:12748":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"17:11773:12616":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"6:1621:5805":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"9:330:13806":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"2:46644:14217":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"2:11282:11174":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"20:1696:3724":{"crate_id":20,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"20:104:3461":{"crate_id":20,"path":["libc","unix","IPPROTO_IPV6"],"kind":"constant"},"1:6847:15158":{"crate_id":1,"path":["std","sync","reentrant_lock","ReentrantLock"],"kind":"struct"},"16:6532:14535":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"17:14723:12909":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"17:15734:13266":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"6:1639:5807":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"2:5286:34874":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"20:6711:9629":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","xdp_umem_reg"],"kind":"struct"},"6:6491:9568":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"1:4133:16569":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"18:659:15305":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"1:11699:14837":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"2:43800:11160":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"20:7498:10047":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"5:7465:14643":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"2:44899:227":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"20:5281:8888":{"crate_id":20,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"1:932:15503":{"crate_id":1,"path":["std","collections","hash","map","ExtractIf"],"kind":"struct"},"16:5700:13436":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"20:5628:8924":{"crate_id":20,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"20:7013:2430":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","SOCK_STREAM"],"kind":"constant"},"2:42189:11009":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"1:2735:4392":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"2:44368:14772":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"1:5106:16586":{"crate_id":1,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"2:46323:14188":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"2:8003:4417":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"20:5602:8920":{"crate_id":20,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"1:12341:471":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"2:38216:4487":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"6:1535:5798":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"20:4922:8850":{"crate_id":20,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"2:47222:14268":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"17:16165:13375":{"crate_id":17,"path":["object","xcoff","FunAux32"],"kind":"struct"},"17:11341:15347":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"11:2539:13762":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"6:4952:8854":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"16:6504:14533":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"2:41851:2836":{"crate_id":2,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"16:7085:14575":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"20:1530:2702":{"crate_id":20,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"2:3665:4502":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"20:5615:8922":{"crate_id":20,"path":["libc","unix","linux_like","linux","ifconf"],"kind":"struct"},"17:14271:12850":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"5:7493:11070":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"2:38326:4489":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"1:8177:12459":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"17:15931:12660":{"crate_id":17,"path":["object","xcoff","FileHeader32"],"kind":"struct"},"5:6566:15489":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"2:2028:671":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"1:9296:27768":{"crate_id":1,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"20:5566:8917":{"crate_id":20,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"17:10828:36884":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"2:46171:14180":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"16:4062:13465":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"2:40471:14699":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"2:22675:16724":{"crate_id":2,"path":["core","core_simd","simd","cmp","eq","SimdPartialEq"],"kind":"trait"},"9:392:22334":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"6:485:4973":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"2:9852:84":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"2:40765:14709":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"6:5457:8904":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"1:10355:15615":{"crate_id":1,"path":["std","sys","pal","unix","os","EnvStrDebug"],"kind":"struct"},"20:8024:3227":{"crate_id":20,"path":["libc","unix","linux_like","linux","arch","generic","SO_OOBINLINE"],"kind":"constant"},"2:15:2360":{"crate_id":2,"path":["core","write"],"kind":"macro"},"1:8548:4386":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"6:8012:10423":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"5:3263:35671":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"2:44347:21805":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"20:5462:8907":{"crate_id":20,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"6:6729:9629":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_umem_reg"],"kind":"struct"},"0:559:2488":{"crate_id":0,"path":["socket2","MaybeUninitSlice"],"kind":"struct"},"5:1168:35703":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"6:553:3209":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"6:5565:8916":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"18:726:12407":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"6:545:4977":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"17:11102:15338":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"6:6657:9620":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"2:40611:4567":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"17:12175:15381":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"6:7461:10044":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"5:7393:14641":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"1:12363:1846":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"11:328:14611":{"crate_id":11,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"20:5474:8909":{"crate_id":20,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_128"],"kind":"struct"},"6:1671:5810":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"20:1033:3462":{"crate_id":20,"path":["libc","unix","linux_like","IPV6_ADD_MEMBERSHIP"],"kind":"constant"},"2:44219:4386":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"17:15410:13164":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"14:0:4238":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"17:13785:12762":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"11:2533:13761":{"crate_id":11,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"6:8306:9094":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"0:654:2410":{"crate_id":0,"path":["socket2","Domain"],"kind":"struct"},"17:15616:13236":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"1:9142:14318":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"2:43324:157":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"2:3399:4505":{"crate_id":2,"path":["core","ops","coroutine","Coroutine"],"kind":"trait"},"17:13774:12759":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"20:1521:2701":{"crate_id":20,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"18:80:27593":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"0:676:2448":{"crate_id":0,"path":["socket2","Protocol"],"kind":"struct"},"14:40:12662":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"1:10353:15616":{"crate_id":1,"path":["std","sys","pal","unix","os","Env"],"kind":"struct"},"11:123:14607":{"crate_id":11,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"2:32394:4432":{"crate_id":2,"path":["core","marker","Tuple"],"kind":"trait"},"20:7449:10045":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"6:5528:8912":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"17:13308:12667":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"1:3835:4458":{"crate_id":1,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"2:46594:14215":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"17:10997:12528":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"2:11501:11173":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"2:46032:14164":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"17:14341:12859":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"17:15769:13279":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"2:42648:97":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"6:5624:8921":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifc_ifcu"],"kind":"union"},"20:4985:8858":{"crate_id":20,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"17:15023:13069":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"17:12043:15378":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"2:46661:14218":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"6:5320:8889":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"5:5470:11142":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"17:11574:14620":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"1:3432:4409":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"6:8282:9090":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"16:5756:15407":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"2:8441:178":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"2:12770:11174":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"2:10339:226":{"crate_id":2,"path":["core","fmt","Result"],"kind":"type_alias"},"5:5729:21822":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"5:7415:15522":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"1:9721:15595":{"crate_id":1,"path":["std","sys","pal","unix","fs","ReadDir"],"kind":"struct"},"6:479:3820":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"16:6079:14455":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"6:6670:9622":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"2:43762:11158":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"2:42687:15145":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"1:521:16463":{"crate_id":1,"path":["std","thread","PanicGuard"],"kind":"struct"},"6:7348:10040":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"6:6650:9619":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"16:4940:13483":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"2:10759:22076":{"crate_id":2,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"20:552:3209":{"crate_id":20,"path":["libc","unix","linger"],"kind":"struct"},"17:14212:12844":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"17:14968:13058":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"17:15434:13168":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"1:8852:4539":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"12:0:4237":{"crate_id":12,"path":["rustc_std_workspace_alloc"],"kind":"module"},"11:2559:13766":{"crate_id":11,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"16:6976:13553":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"6:6698:9625":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_ring_offset"],"kind":"struct"},"2:44551:14787":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"1:8249:15597":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"17:13526:12696":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"16:2878:13431":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"6:4965:8856":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"1:10764:12557":{"crate_id":1,"path":["std","sys","pal","unix","thread","Thread"],"kind":"struct"},"17:11075:12531":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"17:11915:23518":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"16:5347:13490":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"17:15624:13237":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"17:9807:23402":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"17:11354:15348":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"2:44169:14764":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"1:2309:15570":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"2:2970:257":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"2:44414:14782":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"17:14868:13021":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"1:10964:14331":{"crate_id":1,"path":["std","sys","pal","unix","fs","Mode"],"kind":"struct"},"18:563:12392":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"16:2438:13411":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"5:7425:14642":{"crate_id":5,"path":["alloc","collections","btree","map","UnorderedKeyError"],"kind":"struct"},"17:12433:12601":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"17:13753:12755":{"crate_id":17,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"16:6813:14553":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"17:12318:12598":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"17:12107:12542":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"17:14545:12893":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"17:15289:13128":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"15:288:22440":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"5:6433:16735":{"crate_id":5,"path":["alloc","task","LocalWake"],"kind":"trait"},"17:10915:36881":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"16:7570:13447":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"2:21692:34849":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"2:32396:114":{"crate_id":2,"path":["core","marker","ConstParamTy"],"kind":"trait"},"6:1593:5804":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"2:41301:4418":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"17:12342:14436":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"17:12900:12633":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"20:6862:8776":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"2:22788:14678":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"2:42117:11070":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"1:9406:4367":{"crate_id":1,"path":["std","sync","poison","Guard"],"kind":"struct"},"1:8617:11397":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"2:10643:4521":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"5:7376:11147":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"17:12508:12609":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"6:7412:5928":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"20:101:2457":{"crate_id":20,"path":["libc","unix","IPPROTO_TCP"],"kind":"constant"},"6:5636:8923":{"crate_id":6,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"2:23721:236":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"2:44733:130":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"11:671:4540":{"crate_id":11,"path":["hashbrown","map","Iter"],"kind":"struct"},"20:1489:3660":{"crate_id":20,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"1:8535:4389":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"17:14189:12835":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"6:0:1002":{"crate_id":6,"path":["libc"],"kind":"module"},"1:8625:4460":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"2:22443:16728":{"crate_id":2,"path":["core","core_simd","simd","num","float","SimdFloat"],"kind":"trait"},"2:3049:137":{"crate_id":2,"path":["core","error","Error"],"kind":"trait"},"16:7528:14584":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"17:14066:12802":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"9:447:22333":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"14:160:15470":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"20:8333:3659":{"crate_id":20,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"2:45964:14156":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"2:13029:21799":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"6:5336:8891":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif"],"kind":"struct"},"1:938:15488":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"16:867:15310":{"crate_id":16,"path":["gimli","read","endian_slice","DebugByte"],"kind":"struct"},"1:6672:14736":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"20:5573:8918":{"crate_id":20,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"2:44707:14805":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"9:502:13829":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"20:7994:10423":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"2:3699:4507":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"6:6478:9608":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"17:14298:12853":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"20:841:2413":{"crate_id":20,"path":["libc","unix","linux_like","AF_INET"],"kind":"constant"},"17:0:4241":{"crate_id":17,"path":["object"],"kind":"module"},"6:7446:10042":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"1:4921:2869":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"2:30709:10715":{"crate_id":2,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"20:1597:5804":{"crate_id":20,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"6:8253:9086":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"2:23079:14689":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"16:6927:13548":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"1:10927:14819":{"crate_id":1,"path":["std","sys","pal","unix","fs","OpenOptions"],"kind":"struct"},"17:14131:12808":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"1:7331:28066":{"crate_id":1,"path":["std","sys","thread_local","abort_on_dtor_unwind","DtorUnwindGuard"],"kind":"struct"},"17:13424:12680":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"2:46113:14169":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"17:14436:12882":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"1:8560:4459":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"11:2440:15489":{"crate_id":11,"path":["hashbrown","table","Drain"],"kind":"struct"},"17:15190:13108":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"17:16050:12665":{"crate_id":17,"path":["object","xcoff","SectionHeader64"],"kind":"struct"},"16:2636:13420":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"1:909:14615":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"16:5817:14467":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"1:12361:1834":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"20:5210:8880":{"crate_id":20,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"1:5702:15149":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"2:39788:13975":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"1:3389:4413":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"20:0:1002":{"crate_id":20,"path":["libc"],"kind":"module"},"16:6263:14526":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"2:46000:14162":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"20:4830:8842":{"crate_id":20,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"17:12808:12630":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"1:8182:15595":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"5:4252:4367":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"1:4147:16570":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"17:11063:15336":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"5:4848:802":{"crate_id":5,"path":["alloc","fmt"],"kind":"module"},"20:1703:2703":{"crate_id":20,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"20:6460:9608":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"1:11005:15594":{"crate_id":1,"path":["std","sys","pal","unix","os","JoinPathsError"],"kind":"struct"},"17:15368:13153":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"1:9743:127":{"crate_id":1,"path":["std","sys","pal","unix","fs","DirBuilder"],"kind":"struct"},"2:11214:11163":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"2:46224:14183":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"17:12768:23399":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"20:5118:8871":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"2:46084:14167":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"2:39691:215":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"17:11547:12458":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"11:798:15489":{"crate_id":11,"path":["hashbrown","map","Drain"],"kind":"struct"},"16:8155:14601":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"2:40707:4421":{"crate_id":2,"path":["core","io","borrowed_buf","BorrowedCursor"],"kind":"struct"},"6:7516:10047":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"11:1158:15487":{"crate_id":11,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"17:9938:23416":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"2:8386:10602":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"1:8862:4540":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"6:6900:9667":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"17:13568:12711":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"17:14855:13015":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"6:5536:8913":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"1:922:15489":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"17:14079:12803":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"20:5166:8875":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"16:2612:13419":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"5:4087:15489":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"16:7098:14578":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"1:5252:15574":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"17:12695:15402":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegment"],"kind":"struct"},"17:13064:12644":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"2:1952:4367":{"crate_id":2,"path":["core","mem","maybe_uninit","Guard"],"kind":"struct"},"2:44695:14802":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"2:44264:14701":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"17:13173:12659":{"crate_id":17,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"2:30720:33530":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum"],"kind":"enum"},"17:10573:36886":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"2:44526:14786":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"1:4155:16571":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"16:150:14451":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"5:7551:16493":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"2:44757:4515":{"crate_id":2,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"20:4806:8840":{"crate_id":20,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"2:44273:14695":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"20:5045:8865":{"crate_id":20,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"2:44711:14806":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"2:10648:4523":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"1:4217:16576":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"17:13485:12686":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"2:23258:13900":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI128Inner"],"kind":"struct"},"11:772:14614":{"crate_id":11,"path":["hashbrown","map","Keys"],"kind":"struct"},"5:5934:15489":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"1:10227:2400":{"crate_id":1,"path":["std","sys","pal","unix","net","Socket"],"kind":"struct"},"2:22196:16648":{"crate_id":2,"path":["core","core_simd","to_bytes","ToBytes"],"kind":"trait"},"16:2528:13415":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"20:8264:9090":{"crate_id":20,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"1:11642:14830":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"11:102:14606":{"crate_id":11,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"1:12348:1812":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"2:22616:16732":{"crate_id":2,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr"],"kind":"trait"},"2:3933:15489":{"crate_id":2,"path":["core","array","drain","Drain"],"kind":"struct"},"17:12557:12531":{"crate_id":17,"path":["object","read","xcoff","section","SectionTable"],"kind":"struct"},"1:12352:738":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"16:6456:23352":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"16:7539:13446":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"1:1607:11070":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"2:819:190":{"crate_id":2,"path":["core","num","nonzero","NonZero"],"kind":"struct"},"17:11242:15343":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"16:5686:13433":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"2:43771:11157":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"17:11715:14425":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsection"],"kind":"struct"},"1:8726:4535":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"2:43780:11161":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"17:11799:15368":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"2:2219:189":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"17:12454:14446":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"17:12189:15385":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"17:10044:23418":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"2:46274:14185":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"1:8257:4402":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"1:1631:14618":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"17:12485:23544":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"20:5197:8878":{"crate_id":20,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"16:3614:13459":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"17:13437:12681":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"5:3292:14616":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"1:4209:16575":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"1:4400:3655":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"5:1204:35704":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"20:7288:5017":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"13:229:13760":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"16:4531:13470":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"17:12724:23420":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"17:11443:12546":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"2:44282:14700":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"1:2477:16544":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"1:6400:15583":{"crate_id":1,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"6:6597:9614":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"17:13046:12641":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"1:3897:2899":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"20:44:2398":{"crate_id":20,"path":["libc","unix","c_int"],"kind":"type_alias"},"16:6634:13440":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"2:42157:10676":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"17:13538:12699":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"20:4843:8843":{"crate_id":20,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"16:6427:15445":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"18:538:12390":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"2:44699:14803":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"20:5052:8866":{"crate_id":20,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"2:47187:14265":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"17:15569:13218":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"17:14977:13061":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"11:430:36848":{"crate_id":11,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"17:16105:13359":{"crate_id":17,"path":["object","xcoff","FileAux32"],"kind":"struct"},"16:5769:14465":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"16:6895:13544":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"2:12033:11156":{"crate_id":2,"path":["core","slice","iter","ChunkByMut"],"kind":"struct"},"1:1853:15565":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"6:7359:10041":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"16:4856:13480":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"5:2322:14633":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"20:5656:8927":{"crate_id":20,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"6:5052:8867":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"11:1914:14618":{"crate_id":11,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"1:4319:11400":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"2:44703:14804":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"6:5361:8894":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"1:5770:4708":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"11:2349:15484":{"crate_id":11,"path":["hashbrown","table","VacantEntry"],"kind":"struct"},"6:5677:8928":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"17:13252:12664":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"2:44462:14784":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"11:351:36841":{"crate_id":11,"path":["hashbrown","raw","FullBucketsIndices"],"kind":"struct"},"6:4992:8860":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"16:6606:14545":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"1:8072:16483":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"17:13972:12559":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"18:670:15309":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"6:4942:8853":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"1:4481:3656":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"17:13581:12715":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"2:40461:14698":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"17:14933:13057":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"1:6177:14812":{"crate_id":1,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"2:43965:4390":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"1:12360:1852":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"18:491:14394":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"2:23111:16553":{"crate_id":2,"path":["core","num","nonzero","private","Sealed"],"kind":"trait"},"17:13015:12601":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"2:6154:14656":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"2:42053:2694":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"2:3209:247":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"11:2400:11163":{"crate_id":11,"path":["hashbrown","table","IterMut"],"kind":"struct"},"1:4103:3651":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"6:1490:3663":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"17:14091:12804":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"20:6391:9602":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"20:1029:3509":{"crate_id":20,"path":["libc","unix","linux_like","IPV6_UNICAST_HOPS"],"kind":"constant"},"17:16223:13388":{"crate_id":17,"path":["object","xcoff","StatAux"],"kind":"struct"},"16:8226:23361":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"16:2936:22488":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"16:2548:13416":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"6:5630:8922":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifconf"],"kind":"struct"},"1:3900:3591":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"1:8518:4387":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"2:10391:11229":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"1:12308:27843":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"17:12543:15397":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSection"],"kind":"struct"},"2:13904:14677":{"crate_id":2,"path":["core","task","wake","LocalWaker"],"kind":"struct"},"2:31094:4562":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"2:1825:21976":{"crate_id":2,"path":["core","intrinsics","AggregateRawPtr"],"kind":"trait"},"6:5466:8905":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"17:11493:15351":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"5:4451:35232":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"16:5960:14484":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"20:8027:3210":{"crate_id":20,"path":["libc","unix","linux_like","linux","arch","generic","SO_LINGER"],"kind":"constant"},"2:38381:4490":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"1:11090:28059":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"2:43935:14751":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"17:9886:23414":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"2:12693:14759":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"16:4802:13478":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"5:1531:14614":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"20:7321:10039":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"2:3455:141":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"16:6098:23349":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"6:5477:8907":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"1:6352:14675":{"crate_id":1,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"1:8554:4460":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"2:11432:11169":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"5:3284:14618":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"2:22703:16725":{"crate_id":2,"path":["core","core_simd","simd","cmp","ord","SimdPartialOrd"],"kind":"trait"},"2:41320:14108":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"14:202:21807":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"17:15678:13258":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"14:165:22421":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"6:7485:10046":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"1:6566:186":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"17:15473:13180":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"20:916:3047":{"crate_id":20,"path":["libc","unix","linux_like","MSG_OOB"],"kind":"constant"},"6:5306:4101":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"20:5037:8864":{"crate_id":20,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"2:3736:4508":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"5:2539:13853":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"17:10720:36887":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"20:6618:9618":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"2:2729:112":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"17:11166:12533":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"1:3480:4395":{"crate_id":1,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"17:10439:12520":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"1:1101:15487":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"2:22948:14684":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"17:11812:15370":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"2:8063:14816":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"17:14177:12832":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"17:11621:14417":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"1:367:15552":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"2:40878:14723":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"18:680:14398":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"2:47363:14292":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"1:5509:128":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"1:494:28061":{"crate_id":1,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"2:3260:4475":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"20:8253:9089":{"crate_id":20,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"20:1032:3500":{"crate_id":20,"path":["libc","unix","linux_like","IPV6_MULTICAST_LOOP"],"kind":"constant"},"17:15249:13118":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"6:4971:8857":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"6:1699:2703":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"2:2130:10717":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"20:5251:8884":{"crate_id":20,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"1:1083:15483":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"1:9398:15584":{"crate_id":1,"path":["std","sync","mutex","MappedMutexGuard"],"kind":"struct"},"2:32364:4431":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"11:1005:14583":{"crate_id":11,"path":["hashbrown","map","Entry"],"kind":"enum"},"17:15957:13309":{"crate_id":17,"path":["object","xcoff","AuxHeader32"],"kind":"struct"},"6:5277:8885":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"17:9916:23415":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"4:0:4232":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"17:15313:13135":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"20:5521:8913":{"crate_id":20,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"2:44397:14781":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"2:41867:4457":{"crate_id":2,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"6:5039:8865":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"5:3050:16305":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"2:3214:2344":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"5:1559:15474":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"1:2535:2342":{"crate_id":1,"path":["std","io"],"kind":"module"},"17:10954:23429":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"5:3674:11163":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"1:11102:28074":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"6:1723:5814":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"1:10718:4410":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stdin"],"kind":"struct"},"2:39801:13976":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"2:43863:11164":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"17:13412:12679":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"17:13455:12682":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"5:843:15497":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"17:12371:12634":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"5:3885:15503":{"crate_id":5,"path":["alloc","collections","linked_list","ExtractIf"],"kind":"struct"},"1:12362:1840":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"17:15778:13281":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"2:22349:16553":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"2:23225:13897":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI16Inner"],"kind":"struct"},"2:7780:33853":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"1:4919:2868":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"2:42101:4540":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"1:3586:2863":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"6:8006:10422":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"20:7528:10049":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"17:11153:15330":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"20:1563:5800":{"crate_id":20,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"2:32282:15546":{"crate_id":2,"path":["core","error","tags","MaybeSizedValue"],"kind":"struct"},"17:12278:15392":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"5:2770:13860":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"17:14986:13062":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"11:698:11070":{"crate_id":11,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"16:7168:14325":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"20:7467:10046":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"1:4555:3657":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"2:11190:4540":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"16:5307:13489":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"2:11321:11162":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"1:8093:15594":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"18:589:12393":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"16:4560:13471":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"2:22925:13872":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"1:3430:4408":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"1:9469:4512":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"1:4998:3594":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"16:6398:13432":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"17:15206:13110":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"6:7575:10051":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"0:698:2498":{"crate_id":0,"path":["socket2","TcpKeepalive"],"kind":"struct"},"0:600:2560":{"crate_id":0,"path":["socket2","MsgHdrMut"],"kind":"struct"},"17:10887:36885":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"2:10184:11226":{"crate_id":2,"path":["core","fmt","builders","FormatterFn"],"kind":"struct"},"6:5225:8880":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"1:11931:14839":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"20:6514:9611":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"20:5500:8911":{"crate_id":20,"path":["libc","unix","linux_like","linux","tls12_crypto_info_chacha20_poly1305"],"kind":"struct"},"5:5337:1688":{"crate_id":5,"path":["alloc","slice"],"kind":"module"},"2:4484:21774":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"20:6728:9631":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","xdp_statistics"],"kind":"struct"},"2:45009:14146":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"16:2708:13423":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"6:4959:8855":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"1:9202:14321":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"6:7602:10053":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"16:2508:13414":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"5:5466:11141":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"2:47248:14270":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"16:3778:13460":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"1:3026:15572":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"2:21739:16553":{"crate_id":2,"path":["core","core_simd","cast","sealed","Sealed"],"kind":"trait"},"2:43101:10715":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"20:8035:3287":{"crate_id":20,"path":["libc","unix","linux_like","linux","arch","generic","SO_SNDTIMEO"],"kind":"constant"},"20:5108:8870":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"2:2707:102":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"1:5616:15151":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"14:187:22428":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"20:1898:2704":{"crate_id":20,"path":["libc","unix","linux_like","linux","socklen_t"],"kind":"type_alias"},"3:0:505":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"2:43315:4524":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"2:43983:11168":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"1:4877:16587":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"20:4958:8854":{"crate_id":20,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"5:7610:4570":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"2:44248:14768":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"1:3059:226":{"crate_id":1,"path":["std","io","error","Result"],"kind":"type_alias"},"17:11392:15349":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"6:5064:8868":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"6:6811:9636":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"17:437:12466":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"16:4468:13468":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"1:586:15556":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"2:5092:21854":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"5:3754:35196":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"5:1590:15502":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"1:4815:12274":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"function"},"2:3204:117":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"2:47196:14266":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"16:5722:13438":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"6:6460:2528":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"6:1628:5806":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"1:11609:15626":{"crate_id":1,"path":["std","sys","thread_local","fast_local","Key"],"kind":"struct"},"2:44383:14778":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"2:40812:14715":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"1:9337:14325":{"crate_id":1,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"18:113:27595":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"13:0:4231":{"crate_id":13,"path":["std_detect"],"kind":"module"},"1:2699:4401":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"17:12076:15380":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"1:3336:4411":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"17:12824:23421":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"17:11214:15341":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"17:15646:13243":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"6:6524:9610":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"6:4909:8849":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"6:8271:9089":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"17:256:15310":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"2:30656:3593":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"20:6544:9613":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"20:5305:8889":{"crate_id":20,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"16:7590:13448":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"2:43299:4522":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"2:38960:4491":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"2:23059:14686":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"17:16198:13382":{"crate_id":17,"path":["object","xcoff","BlockAux32"],"kind":"struct"},"5:3820:15504":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"17:10068:23401":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"2:3255:4470":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"20:7584:10053":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"1:11848:3592":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"16:6849:14564":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"17:16269:12679":{"crate_id":17,"path":["object","xcoff","Rel64"],"kind":"struct"},"1:8204:14820":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"2:22909:14680":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"2:40505:21860":{"crate_id":2,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"1:3661:4377":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"16:3669:12416":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"1:1968:15146":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"5:7132:35241":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"17:10524:15326":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"20:969:3372":{"crate_id":20,"path":["libc","unix","linux_like","IP_ADD_SOURCE_MEMBERSHIP"],"kind":"constant"},"2:22841:14679":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"9:238:4536":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"11:1725:156":{"crate_id":11,"path":["hashbrown","set","HashSet"],"kind":"struct"},"17:13325:12668":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"6:6746:9631":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_statistics"],"kind":"struct"},"6:1503:3664":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"17:14012:12794":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"2:4449:15530":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"17:16093:13357":{"crate_id":17,"path":["object","xcoff","Symbol64"],"kind":"struct"},"20:4793:8839":{"crate_id":20,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"5:3318:14619":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"1:8565:2866":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"2:46128:14170":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"17:11142:12542":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"20:4965:8855":{"crate_id":20,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"2:21812:13869":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"6:8265:9088":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"17:15138:13091":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"6:8328:9096":{"crate_id":6,"path":["libc","unix","linux_like","linux","canxl_frame"],"kind":"struct"},"17:11089:15337":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"1:2004:785":{"crate_id":1,"path":["std","ffi"],"kind":"module"},"9:482:22332":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"1:2713:28075":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"17:9737:23396":{"crate_id":17,"path":["object","common","SubArchitecture"],"kind":"enum"},"20:7443:10044":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"2:47108:14260":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"6:5244:8882":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"20:6757:9635":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","iocb"],"kind":"struct"},"2:4602:14649":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"20:1625:5805":{"crate_id":20,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"1:10512:16310":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Argv"],"kind":"struct"},"16:2572:13417":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"16:4352:13466":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"2:47207:14267":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"6:8029:10424":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"2:3684:33680":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"17:13594:12716":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"2:46727:14220":{"crate_id":2,"path":["core","core_arch","simd","m16x16"],"kind":"struct"},"2:45885:14147":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"16:542:14453":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"1:6861:15588":{"crate_id":1,"path":["std","sync","reentrant_lock","ReentrantLockGuard"],"kind":"struct"},"2:46532:14213":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"16:4641:13474":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"1:8265:4404":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"17:16138:13366":{"crate_id":17,"path":["object","xcoff","CsectAux32"],"kind":"struct"},"17:15376:13156":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"1:8241:2861":{"crate_id":1,"path":["std","hash","random","DefaultHasher"],"kind":"struct"},"2:23170:13892":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU32Inner"],"kind":"struct"},"1:5632:15152":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"2:2933:16553":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"17:15266:13125":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"2:2340:10719":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"17:14529:12891":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"17:11647:14420":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"1:11693:14836":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"2:23066:13889":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"2:44133:14762":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"2:10340:2864":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"2:7831:22012":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"2:10600:153":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"2:21653:4562":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"2:13706:205":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"2:22575:2537":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_addr"],"kind":"function"},"1:8812:4538":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"16:2728:13424":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"5:289:35196":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"20:7341:10041":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"17:11419:12542":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"2:12486:15535":{"crate_id":2,"path":["core","slice","GetManyMutError"],"kind":"struct"},"14:7:15470":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"20:7966:4930":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"20:5204:8879":{"crate_id":20,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"17:12478:12605":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"2:47286:14274":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"16:6342:36875":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"2:8251:22017":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"17:13832:12767":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"17:11788:15367":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"2:32305:237":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"20:5355:8895":{"crate_id":20,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"2:3671:4504":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"16:5400:12510":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"5:6958:21823":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"5:839:101":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"20:4882:8846":{"crate_id":20,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"6:5112:8871":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"2:10606:153":{"crate_id":2,"path":["core","hash","macros","Hash"],"kind":"proc_derive"},"6:5250:3749":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"17:12150:12592":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"16:8202:13453":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"6:6629:9617":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"2:39974:21867":{"crate_id":2,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"16:4502:13469":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"11:0:4236":{"crate_id":11,"path":["hashbrown"],"kind":"module"},"6:5436:8902":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"17:13674:12723":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"16:6066:14496":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"2:32296:14693":{"crate_id":2,"path":["core","error","Source"],"kind":"struct"},"2:3285:4495":{"crate_id":2,"path":["core","ops","async_function","AsyncFnMut"],"kind":"trait"},"2:42792:11229":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"5:4117:35196":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"1:12355:909":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"20:1632:5806":{"crate_id":20,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"1:2489:16550":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"5:7645:243":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"20:5430:8903":{"crate_id":20,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"1:12340:1174":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"2:44885:164":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"17:11293:23449":{"crate_id":17,"path":["object","read","coff","import","ImportType"],"kind":"enum"},"6:5390:8898":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"17:13344:12669":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"1:1855:15566":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"16:6335:15442":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"20:6803:9637":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"2:46511:14212":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"1:10957:139":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileType"],"kind":"struct"},"6:5546:8914":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"2:3251:4429":{"crate_id":2,"path":["core","marker","FnPtr"],"kind":"trait"},"20:7543:10050":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"17:13363:12670":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"17:15992:13339":{"crate_id":17,"path":["object","xcoff","AuxHeader64"],"kind":"struct"},"20:5235:3749":{"crate_id":20,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"20:8016:3269":{"crate_id":20,"path":["libc","unix","linux_like","linux","arch","generic","SO_REUSEADDR"],"kind":"constant"},"5:1570:15475":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"6:7561:10050":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"20:5621:8923":{"crate_id":20,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"16:4882:13481":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"17:14325:12857":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"2:44489:14785":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"16:7686:15465":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"6:5382:8897":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"6:8300:9093":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"1:974:15481":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"20:6429:9606":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"20:839:2419":{"crate_id":20,"path":["libc","unix","linux_like","AF_UNIX"],"kind":"constant"},"1:12313:16484":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"1:1069:14583":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"5:4515:35232":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"2:11487:11170":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"2:40687:4582":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"1:9329:15612":{"crate_id":1,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"2:10857:34007":{"crate_id":2,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"1:11827:3591":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"2:21908:16553":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"1:5831:220":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"6:1510:2392":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"18:531:14395":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"2:34291:4483":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"17:13606:12719":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"11:2301:14583":{"crate_id":11,"path":["hashbrown","table","Entry"],"kind":"enum"},"1:9214:16615":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"16:7755:13441":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"1:7885:15631":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"2:6268:14658":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"20:6897:9668":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"20:1675:5810":{"crate_id":20,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"1:3652:31184":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"2:44907:207":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"20:1684:5811":{"crate_id":20,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"2:41072:14731":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"17:12264:15391":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"17:12300:23542":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"16:7497:13610":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"6:7389:5943":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"16:6246:206":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"20:8276:9092":{"crate_id":20,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"6:532:3718":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"1:8631:11399":{"crate_id":1,"path":["std","os","unix","net","ucred","UCred"],"kind":"struct"},"17:12464:23543":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"11:1085:36849":{"crate_id":11,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"1:3671:4380":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"17:15836:13291":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"1:8194:14299":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"6:6721:9628":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_mmap_offsets_v1"],"kind":"struct"},"20:5451:8905":{"crate_id":20,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"6:6706:9626":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_mmap_offsets"],"kind":"struct"},"20:7330:10040":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"5:1540:14615":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"1:666:15558":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"2:42271:196":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"20:484:4973":{"crate_id":20,"path":["libc","unix","timespec"],"kind":"struct"},"2:42490:94":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"20:5650:8926":{"crate_id":20,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"1:6790:15156":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"1:669:15560":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"1:5648:113":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"20:849:2416":{"crate_id":20,"path":["libc","unix","linux_like","AF_INET6"],"kind":"constant"},"6:7546:10049":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"6:6915:9668":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"13:110:36851":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"20:478:3820":{"crate_id":20,"path":["libc","unix","timeval"],"kind":"struct"},"16:5781:13437":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"16:7823:23359":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"2:7715:21863":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccess"],"kind":"trait"},"2:42198:11413":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"1:650:15557":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"20:917:3079":{"crate_id":20,"path":["libc","unix","linux_like","MSG_PEEK"],"kind":"constant"},"18:613:36892":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"20:8310:9096":{"crate_id":20,"path":["libc","unix","linux_like","linux","canxl_frame"],"kind":"struct"},"20:1008:2463":{"crate_id":20,"path":["libc","unix","linux_like","IPPROTO_MPTCP"],"kind":"constant"},"6:5472:8906":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"6:5283:8886":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"6:8288:9091":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"6:4837:8843":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"18:581:4562":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"16:4771:13477":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"2:21792:16553":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"1:1914:15568":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"16:7559:14588":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"2:47271:14273":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"6:7339:10039":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"1:12356:891":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"17:15814:13285":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"17:11051:15335":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"6:5046:8866":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"18:651:12385":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"2:41835:2830":{"crate_id":2,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"1:9433:162":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"1:943:15474":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"1:8216:139":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"2:10608:157":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"16:6948:13442":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"1:10976:2343":{"crate_id":1,"path":["std","sys","pal","unix","io","IoSlice"],"kind":"struct"},"5:304:10604":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"1:8709:16594":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"6:4864:8844":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"6:586:4982":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"1:2774:4403":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"2:46777:14222":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"1:5959:15580":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"2:4360:4367":{"crate_id":2,"path":["core","array","Guard"],"kind":"struct"},"2:2710:103":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"17:15092:13085":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"2:3659:146":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"1:5582:15575":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"2:23214:13896":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI8Inner"],"kind":"struct"},"2:40482:14700":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"1:9420:15590":{"crate_id":1,"path":["std","sync","rwlock","MappedRwLockReadGuard"],"kind":"struct"},"20:4998:8860":{"crate_id":20,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"1:6916:233":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"20:5187:8877":{"crate_id":20,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"17:15281:13127":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"17:15273:13126":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"16:7379:36871":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"2:44961:34887":{"crate_id":2,"path":["core","task","wake","ExtData"],"kind":"enum"},"20:5245:8883":{"crate_id":20,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"14:31:15470":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"17:11841:15374":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"1:8236:4520":{"crate_id":1,"path":["std","hash","random","RandomState"],"kind":"struct"},"16:7144:23356":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"16:6620:13509":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"1:10421:15166":{"crate_id":1,"path":["std","sys","pal","unix","pipe","AnonPipe"],"kind":"struct"},"16:7741:13451":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"16:2788:13427":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"5:2102:4404":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"17:16069:13352":{"crate_id":17,"path":["object","xcoff","SymbolBytes"],"kind":"struct"},"17:10251:12514":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"2:10395:11236":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"16:7321:10675":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"1:8012:14298":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"16:4614:13473":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"5:7658:14647":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"2:13191:119":{"crate_id":2,"path":["core","str","lossy","Debug"],"kind":"struct"},"2:39651:210":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"6:1680:5811":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"5:1340:15484":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"5:7485:11070":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"20:516:3661":{"crate_id":20,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"1:4880:16577":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"20:100:2454":{"crate_id":20,"path":["libc","unix","IPPROTO_ICMPV6"],"kind":"constant"},"11:1900:14616":{"crate_id":11,"path":["hashbrown","set","Intersection"],"kind":"struct"},"16:5742:14460":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"1:9129:14317":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"1:3294:16106":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"16:4587:13472":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"20:4817:8841":{"crate_id":20,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"1:12365:966":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"1:5596:15150":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"2:40392:14696":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"17:14386:12866":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"2:13679:34784":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"11:1023:15483":{"crate_id":11,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"2:44069:11172":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"2:6977:14664":{"crate_id":2,"path":["core","iter","adapters","map_windows","Buffer"],"kind":"struct"},"20:5299:4103":{"crate_id":20,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"6:5260:8883":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"2:46046:14165":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"6:6409:9602":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"2:2960:163":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"1:12368:13":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"2:46682:14219":{"crate_id":2,"path":["core","core_arch","simd","m8x32"],"kind":"struct"},"2:44015:14757":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"2:10393:11228":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"6:5423:8901":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"20:964:3405":{"crate_id":20,"path":["libc","unix","linux_like","IP_MULTICAST_LOOP"],"kind":"constant"},"20:6442:2528":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"16:7695:13616":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"16:2323:22486":{"crate_id":16,"path":["gimli","common","Vendor"],"kind":"enum"},"2:40743:4387":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"9:0:4234":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"1:11923:14839":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"17:15197:13109":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"16:7799:13439":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"2:3090:15528":{"crate_id":2,"path":["core","error","Request"],"kind":"struct"},"2:46306:14187":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"2:34464:4485":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"6:491:4974":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"6:578:4981":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"2:40593:14107":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"1:1997:16536":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"1:6368:28068":{"crate_id":1,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"2:47176:14264":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"20:8229:9085":{"crate_id":20,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"6:5020:8863":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"2:40578:14704":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"6:6621:9616":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"17:12201:15386":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"5:2127:15505":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMutKey"],"kind":"struct"},"6:6379:9540":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"2:45021:14810":{"crate_id":2,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"1:11423:13826":{"crate_id":1,"path":["std","sys","os_str","bytes","Buf"],"kind":"struct"},"20:6579:9614":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"17:9671:23397":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"1:11286:162":{"crate_id":1,"path":["std","sys","pal","unix","time","Instant"],"kind":"struct"},"11:2137:15483":{"crate_id":11,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"2:44592:14797":{"crate_id":2,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"2:2805:202":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"1:11268:14334":{"crate_id":1,"path":["std","sys","pal","unix","time","Timespec"],"kind":"struct"},"17:12225:15388":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"1:9425:15591":{"crate_id":1,"path":["std","sync","rwlock","MappedRwLockWriteGuard"],"kind":"struct"},"17:11042:15334":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"17:10661:15328":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"17:11227:15342":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"1:7360:28605":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"17:11755:14430":{"crate_id":17,"path":["object","read","elf","attributes","AttributeIndexIterator"],"kind":"struct"},"1:2479:16545":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"20:5385:8899":{"crate_id":20,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"6:7330:4853":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"2:5366:977":{"crate_id":2,"path":["core","iter"],"kind":"module"},"1:11225:28078":{"crate_id":1,"path":["std","sys","pal","unix","thread","cgroups","Cgroup"],"kind":"enum"},"11:1580:15490":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"2:13861:115":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"17:15102:13086":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"20:1589:5803":{"crate_id":20,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"2:40826:14718":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"1:10938:14829":{"crate_id":1,"path":["std","sys","pal","unix","fs","FilePermissions"],"kind":"struct"},"16:2355:13402":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"2:32836:4472":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"17:15521:13217":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"17:13399:12677":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"2:42295:89":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"1:9229:16614":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"20:4930:8851":{"crate_id":20,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"17:12328:14432":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"1:5162:16590":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"2:40498:14701":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"2:47233:14269":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"2:13577:15537":{"crate_id":2,"path":["core","future","async_drop","AsyncDropOwning"],"kind":"struct"},"6:5671:8927":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"2:2132:10718":{"crate_id":2,"path":["core","ptr","metadata","Thin"],"kind":"trait_alias"},"2:4461:109":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"17:15324:13139":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"1:6712:14815":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"2:3826:70":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"20:5314:8890":{"crate_id":20,"path":["libc","unix","linux_like","linux","seccomp_notif_sizes"],"kind":"struct"},"20:7988:10422":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"20:1667:5809":{"crate_id":20,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"17:10185:12511":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"1:8528:4388":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"2:4850:21844":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"20:490:4974":{"crate_id":20,"path":["libc","unix","rlimit"],"kind":"struct"},"5:7595:22055":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"2:45900:14150":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"6:6874:9666":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"6:5031:8864":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"1:12358:903":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"2:33048:4471":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"17:14788:12960":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"15:394:22451":{"crate_id":15,"path":["addr2line","DebugFile"],"kind":"enum"},"6:5344:8892":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_resp"],"kind":"struct"},"2:22351:16644":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"20:5550:8916":{"crate_id":20,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"2:30433:16556":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"1:7989:14297":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"17:15333:13142":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"17:15445:13172":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"5:1581:210":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"16:5831:14470":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"17:12353:14440":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"2:44982:180":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"2:6077:4367":{"crate_id":2,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"6:5002:8861":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"5:1184:16303":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"18:0:4242":{"crate_id":18,"path":["memchr"],"kind":"module"},"2:46142:14171":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"17:10769:36880":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"2:40448:14106":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"1:5283:15574":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"5:4322:4540":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"16:3925:13464":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"6:6788:12186":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"1:4097:4584":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"17:13959:12786":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"2:42334:96":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"2:22981:13877":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"2:44229:14766":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"20:7394:5928":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"17:10710:15329":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"6:5598:8919":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"20:1059:3528":{"crate_id":20,"path":["libc","unix","linux_like","IPV6_RECVTCLASS"],"kind":"constant"},"17:16212:13386":{"crate_id":17,"path":["object","xcoff","BlockAux64"],"kind":"struct"},"1:1614:15503":{"crate_id":1,"path":["std","collections","hash","set","ExtractIf"],"kind":"struct"},"20:1507:3664":{"crate_id":20,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"6:5588:8918":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"17:11661:14421":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"2:40734:15547":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"16:2660:13421":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"1:752:154":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"17:15418:13165":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"2:31067:196":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"2:44087:11170":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"1:8599:2348":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"6:1585:5803":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"5:7107:35203":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"17:12030:15377":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"5:2210:16463":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"16:2418:13410":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"17:12388:14442":{"crate_id":17,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"20:638:2700":{"crate_id":20,"path":["libc","unix","linux_like","sa_family_t"],"kind":"type_alias"},"5:3046:16304":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"20:8017:3000":{"crate_id":20,"path":["libc","unix","linux_like","linux","arch","generic","SO_TYPE"],"kind":"constant"},"17:13899:12778":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"2:3644:4500":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"6:7366:4759":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"2:44998:14809":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"6:4932:8852":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"6:5219:8879":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"20:8034:3258":{"crate_id":20,"path":["libc","unix","linux_like","linux","arch","generic","SO_RCVTIMEO"],"kind":"constant"},"1:5986:15581":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"5:4481:4367":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"2:30694:4450":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"2:42246:4540":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"2:46437:14194":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"2:43080:33941":{"crate_id":2,"path":["core","fmt","rt","ArgumentType"],"kind":"enum"},"2:4720:221":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"1:10495:113":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Command"],"kind":"struct"},"20:5321:8891":{"crate_id":20,"path":["libc","unix","linux_like","linux","seccomp_notif"],"kind":"struct"},"17:2175:23476":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"6:4985:8859":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"2:40422:14697":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"16:2303:22460":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"6:1653:5808":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"17:2234:15320":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"2:44691:14801":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"17:16187:13381":{"crate_id":17,"path":["object","xcoff","ExpAux"],"kind":"struct"},"1:5773:16598":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"17:10534:36883":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"20:6487:9569":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"17:15635:13242":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"5:939:16496":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"17:12213:15387":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"17:11324:15344":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"1:1610:15489":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"6:5191:5795":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"7:32:22319":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"6:6689:9624":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sockaddr_xdp"],"kind":"struct"},"1:7478:30615":{"crate_id":1,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"11:1920:14619":{"crate_id":11,"path":["hashbrown","set","Union"],"kind":"struct"},"20:5262:8885":{"crate_id":20,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"1:12367:1419":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"17:13877:12777":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"18:718:12404":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"1:3768:2347":{"crate_id":1,"path":["std","net"],"kind":"module"},"20:5513:8912":{"crate_id":20,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"2:2799:195":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"1:12292:14884":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"17:12851:14448":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"16:7397:36872":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"20:5128:8872":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"16:3475:13458":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"2:8284:145":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"17:10317:12516":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"2:44683:14799":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"2:3282:4494":{"crate_id":2,"path":["core","ops","async_function","AsyncFn"],"kind":"trait"},"16:6574:13452":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"16:7306:36874":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"20:472:4972":{"crate_id":20,"path":["libc","unix","utimbuf"],"kind":"struct"},"17:11634:14419":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"2:42609:90":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"16:7549:14587":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"17:15426:13167":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"6:6562:9613":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"17:14475:12885":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"6:8294:9092":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"1:11916:29085":{"crate_id":1,"path":["std","panicking","panic_count","MustAbort"],"kind":"enum"},"5:1478:4540":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"6:4891:8702":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"11:396:16301":{"crate_id":11,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"20:6882:9667":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"2:44257:14769":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"17:15582:13224":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"11:2466:15503":{"crate_id":11,"path":["hashbrown","table","ExtractIf"],"kind":"struct"},"10:44:13769":{"crate_id":10,"path":["adler","Adler32"],"kind":"struct"},"17:11825:15372":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"5:7385:11070":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"5:7435:35626":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"1:9171:15605":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"9:357:22348":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"2:40794:14712":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"11:1064:22414":{"crate_id":11,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"17:12887:14449":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"2:13941:152":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"1:10334:15567":{"crate_id":1,"path":["std","sys","pal","unix","os","SplitPaths"],"kind":"struct"},"16:7473:13609":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"2:47021:14257":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"16:7509:15457":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"16:7355:13590":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"1:11764:16311":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"17:11467:12548":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"2:40803:14714":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"2:4729:15533":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"1:11233:14141":{"crate_id":1,"path":["std","sys","pal","unix","time","Nanoseconds"],"kind":"struct"},"1:10922:14824":{"crate_id":1,"path":["std","sys","pal","unix","fs","StatxExtraFields"],"kind":"struct"},"2:38271:4488":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"16:6588:14537":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"2:46192:14181":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"16:2458:13412":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"20:963:3415":{"crate_id":20,"path":["libc","unix","linux_like","IP_MULTICAST_TTL"],"kind":"constant"},"6:8351:3659":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"2:22525:16730":{"crate_id":2,"path":["core","core_simd","simd","num","uint","SimdUint"],"kind":"trait"},"17:14516:12890":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"6:7537:10048":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"20:6793:9636":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"16:3014:22489":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"17:12683:15401":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegmentIterator"],"kind":"struct"},"6:1580:5802":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"20:7371:5943":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"16:8188:15469":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"2:11239:4390":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"6:6609:9615":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"17:14847:13012":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"17:12251:15390":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"17:14284:12852":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"2:4881:4435":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"2:42013:2348":{"crate_id":2,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"20:6652:9622":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"2:22191:16553":{"crate_id":2,"path":["core","core_simd","to_bytes","sealed","Sealed"],"kind":"trait"},"5:2220:14625":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"16:2338:13400":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"2:22218:13870":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"2:23247:13899":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI64Inner"],"kind":"struct"},"17:10877:15331":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"6:5557:8915":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"2:33532:4476":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"17:13235:12662":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"18:698:14402":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"2:21794:16642":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"6:5581:8917":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"11:1674:15760":{"crate_id":11,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"2:44679:14798":{"crate_id":2,"path":["core","str","LinesMap"],"kind":"struct"},"17:14235:12845":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"17:9755:23394":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"17:15168:13102":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"6:5376:8896":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"1:3297:16107":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"17:14356:12863":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"1:3523:4418":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"2:44715:14141":{"crate_id":2,"path":["core","time","Nanoseconds"],"kind":"struct"},"2:39575:4506":{"crate_id":2,"path":["core","ops","coroutine","CoroutineState"],"kind":"enum"},"6:8259:9087":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"20:6423:9605":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"2:44033:14758":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"18:608:15304":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"16:2902:22487":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"1:9112:15604":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"16:6412:23351":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCacheStrategy"],"kind":"enum"},"2:32229:13765":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"20:7557:10051":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"6:5502:8910":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_256"],"kind":"struct"},"11:2366:15494":{"crate_id":11,"path":["hashbrown","table","AbsentEntry"],"kind":"struct"},"2:42073:194":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"6:1526:2702":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"6:6447:9606":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"20:4948:8853":{"crate_id":20,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"2:46067:14166":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"17:11269:23448":{"crate_id":17,"path":["object","read","coff","import","ImportName"],"kind":"enum"},"17:12494:12606":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"17:12792:12480":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"11:2121:14583":{"crate_id":11,"path":["hashbrown","set","Entry"],"kind":"enum"},"2:33733:4477":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"2:11515:11171":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"2:39781:4501":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"20:5468:8908":{"crate_id":20,"path":["libc","unix","linux_like","linux","tls_crypto_info"],"kind":"struct"},"1:11214:14318":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"1:11668:14834":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"2:39636:213":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"2:43941:14752":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"11:685:11163":{"crate_id":11,"path":["hashbrown","map","IterMut"],"kind":"struct"},"6:7306:5017":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"16:7052:15447":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"17:14912:13052":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"6:5134:8873":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"17:12443:12604":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"16:7711:210":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"1:11316:14335":{"crate_id":1,"path":["std","sys","personality","dwarf","eh","EHContext"],"kind":"struct"},"6:4870:8845":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"16:8301:13677":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"2:45979:14157":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"11:785:14615":{"crate_id":11,"path":["hashbrown","map","Values"],"kind":"struct"},"17:11026:23431":{"crate_id":17,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"17:3264:15321":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"20:1081:3578":{"crate_id":20,"path":["libc","unix","linux_like","TCP_NODELAY"],"kind":"constant"},"2:32275:13608":{"crate_id":2,"path":["core","error","tags","Value"],"kind":"struct"},"6:5146:8874":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"6:1485:3660":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"17:13922:12782":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"16:8118:14595":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"17:16032:12664":{"crate_id":17,"path":["object","xcoff","SectionHeader32"],"kind":"struct"},"20:937:3437":{"crate_id":20,"path":["libc","unix","linux_like","IP_TOS"],"kind":"constant"},"6:1692:3724":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"20:464:3368":{"crate_id":20,"path":["libc","unix","group"],"kind":"struct"},"2:40913:12401":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"2:23181:13893":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU64Inner"],"kind":"struct"},"2:32365:4433":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"1:980:15482":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"1:4666:16577":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"2:39731:216":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"17:10671:36879":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"1:9451:4511":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"1:9118:199":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"20:6473:9568":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"1:8344:15599":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"16:2684:13422":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"2:22894:13871":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"11:1049:15484":{"crate_id":11,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"6:6441:9605":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"2:42168:10678":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"10:36:13768":{"crate_id":10,"path":["adler","algo","U32X4"],"kind":"struct"},"17:12929:12634":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"2:4066:11070":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"1:4195:16573":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"11:1140:15486":{"crate_id":11,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"1:9278:15606":{"crate_id":1,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"2:43336:4536":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"6:6763:9633":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_options"],"kind":"struct"},"2:42035:2693":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"17:13473:12683":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"17:15078:13081":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"17:11115:15339":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"1:373:15554":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"16:7769:13619":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"2:44187:14765":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"2:41062:4388":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"5:4162:11163":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"17:15760:13275":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"20:8023:3202":{"crate_id":20,"path":["libc","unix","linux_like","linux","arch","generic","SO_KEEPALIVE"],"kind":"constant"},"6:6542:9612":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"11:488:154":{"crate_id":11,"path":["hashbrown","map","HashMap"],"kind":"struct"},"19:0:1291":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"18:515:12388":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"1:2312:3586":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"2:47324:14276":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"17:14111:12807":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"17:13272:12665":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"17:14025:12795":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"20:1569:5801":{"crate_id":20,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"20:563:4979":{"crate_id":20,"path":["libc","unix","itimerval"],"kind":"struct"},"17:12659:15399":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdat"],"kind":"struct"},"18:765:27604":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"5:3251:4540":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"1:9350:27780":{"crate_id":1,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"17:13509:12688":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"6:5400:8899":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"11:1601:15491":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"16:6385:13502":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"1:8774:4536":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"15:0:4239":{"crate_id":15,"path":["addr2line"],"kind":"module"},"18:521:27605":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"2:40490:14695":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"5:1324:14583":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"1:1891:15567":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"1:1475:156":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"1:4348:11403":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"20:1657:5808":{"crate_id":20,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"1:11631:29034":{"crate_id":1,"path":["std","sys","thread_local","fast_local","DtorState"],"kind":"enum"},"1:4205:16574":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"2:10384:119":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"2:8333:129":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"16:6962:13443":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"2:2607:10704":{"crate_id":2,"path":["core","ptr","with_exposed_provenance"],"kind":"function"},"17:11605:12550":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"11:842:16494":{"crate_id":11,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"1:5092:16585":{"crate_id":1,"path":["std","os","net","linux_ext","socket","UnixSocketExt"],"kind":"trait"},"20:5268:8886":{"crate_id":20,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"1:4801:16572":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"2:3581:211":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"6:6678:9623":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"2:42568:95":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"16:4718:13475":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"1:12354:733":{"crate_id":1,"path":["std","f128"],"kind":"primitive"},"17:11189:12535":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"6:7584:10052":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"16:7727:13450":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"2:21675:34835":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_elements_right","Rotate"],"kind":"struct"},"1:8868:4541":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"16:5006:13485":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"2:43307:14746":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"18:623:36890":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"17:11583:15362":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"1:12359:884":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"18:735:27603":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"6:5643:8924":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"2:46623:14216":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"6:6417:9603":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"17:261:15311":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"5:7622:4571":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"1:2316:4376":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"17:13766:12757":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"5:4938:217":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"2:8797:33712":{"crate_id":2,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"17:12089:12589":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"20:8015:2999":{"crate_id":20,"path":["libc","unix","linux_like","linux","arch","generic","SOL_SOCKET"],"kind":"constant"},"1:9410:234":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"20:6703:9628":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","xdp_mmap_offsets_v1"],"kind":"struct"},"5:0:309":{"crate_id":5,"path":["alloc"],"kind":"module"},"2:22230:34841":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"2:33800:4479":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"20:4977:8857":{"crate_id":20,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"9:178:22400":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"20:970:3377":{"crate_id":20,"path":["libc","unix","linux_like","IP_DROP_SOURCE_MEMBERSHIP"],"kind":"constant"},"1:9393:187":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"20:5542:8915":{"crate_id":20,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"11:873:15481":{"crate_id":11,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"2:816:16557":{"crate_id":2,"path":["core","num","nonzero","ZeroablePrimitive"],"kind":"trait"},"20:6750:9634":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","xdp_desc"],"kind":"struct"},"20:6660:9623":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"17:12949:12598":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"1:8479:4419":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"20:7566:10052":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"2:45915:14151":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"18:643:12385":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"1:1636:14619":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"2:12955:21793":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"6:5174:8876":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"2:8247:22018":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"20:1551:5799":{"crate_id":20,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"17:13553:12705":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"17:15126:13088":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"1:5845:14813":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"5:3258:14617":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"1:4766:16583":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"6:5515:8911":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_chacha20_poly1305"],"kind":"struct"},"6:6636:9618":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"20:5180:8876":{"crate_id":20,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"20:537:3785":{"crate_id":20,"path":["libc","unix","pollfd"],"kind":"struct"},"5:1355:15483":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"10:0:4235":{"crate_id":10,"path":["adler"],"kind":"module"},"1:2461:10695":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"16:6278:15416":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"2:12961:15534":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"2:39619:3173":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"16:7910:23360":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"17:403:15312":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"20:8270:9091":{"crate_id":20,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"20:522:4976":{"crate_id":20,"path":["libc","unix","hostent"],"kind":"struct"},"1:865:4540":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"2:22:817":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"6:5489:8909":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_128"],"kind":"struct"},"1:11108:28073":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"16:6231:14523":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"15:306:22441":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"2:40937:14728":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"2:13617:14718":{"crate_id":2,"path":["core","future","async_drop","Fuse"],"kind":"struct"},"5:5230:14639":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"2:6972:14666":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindowsInner"],"kind":"struct"},"2:39751:4499":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"5:4436:265":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"1:951:15476":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"15:327:22445":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"20:1500:3847":{"crate_id":20,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"20:5457:8906":{"crate_id":20,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"16:7633:36869":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"16:7813:14590":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"5:3040:35625":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"2:44877:14142":{"crate_id":2,"path":["core","future","async_drop","Noop"],"kind":"struct"},"17:9781:23412":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"5:6019:71":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"16:5802:23347":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"16:4913:13482":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"6:5290:8887":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"2:43539:14135":{"crate_id":2,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"2:9531:15534":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"17:13946:12783":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"16:6648:14547":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"20:7014:2434":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","SOCK_DGRAM"],"kind":"constant"},"14:220:13754":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"2:11359:11175":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"1:12346:1688":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"1:6031:15582":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"6:6821:9637":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"17:12863:12632":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"6:5102:8870":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"16:5367:23346":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"1:4335:11402":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"17:15608:13233":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"16:2808:13428":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"6:6880:8776":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"20:8018:3194":{"crate_id":20,"path":["libc","unix","linux_like","linux","arch","generic","SO_ERROR"],"kind":"constant"},"20:4897:8702":{"crate_id":20,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"20:8299:9095":{"crate_id":20,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"2:46549:14214":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"2:22563:16731":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr"],"kind":"trait"},"17:15400:13161":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"6:5665:8926":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"2:21920:13869":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"1:7988:16553":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"1:10724:4408":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stderr"],"kind":"struct"},"8:0:4233":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"6:6738:9630":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_umem_reg_v1"],"kind":"struct"},"2:12976:21791":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"2:39539:4509":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"2:44687:14800":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"11:809:15503":{"crate_id":11,"path":["hashbrown","map","ExtractIf"],"kind":"struct"},"1:674:16479":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"1:8879:4542":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"2:43924:14750":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"6:5329:8890":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_sizes"],"kind":"struct"},"20:5583:8919":{"crate_id":20,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"1:10647:28057":{"crate_id":1,"path":["std","sys","pal","unix","stack_overflow","Handler"],"kind":"struct"},"6:4811:8841":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"2:46338:14189":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"5:7540:4543":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"2:22577:10704":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_exposed_provenance"],"kind":"function"},"2:12470:22066":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"1:11045:14319":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","ExitCode"],"kind":"struct"},"6:6505:9569":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"1:8230:127":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"1:1625:14617":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"17:10612:15327":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"16:8259:13608":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"6:4897:8848":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"16:6047:15409":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"1:4161:16572":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"17:11537:15355":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"6:7984:4930":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"20:4915:8849":{"crate_id":20,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"16:2748:13425":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"16:4976:13484":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"5:1441:99":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"17:9984:23417":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"20:7296:5754":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"6:5236:8881":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"20:5020:8862":{"crate_id":20,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"16:8175:15466":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"2:11035:16553":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"17:11128:12499":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"5:219:15495":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"2:8759:22016":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"2:2035:4447":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"17:10284:12515":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"2:43892:11166":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"11:2323:15483":{"crate_id":11,"path":["hashbrown","table","OccupiedEntry"],"kind":"struct"},"20:103:3302":{"crate_id":20,"path":["libc","unix","IPPROTO_IP"],"kind":"constant"},"1:4688:16578":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"2:0:563":{"crate_id":2,"path":["core"],"kind":"module"},"2:3417:124":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"2:44940:14945":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"2:21690:34843":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"17:10092:23419":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"17:16259:12674":{"crate_id":17,"path":["object","xcoff","Rel32"],"kind":"struct"},"17:15463:13175":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"2:43035:10715":{"crate_id":2,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"2:44115:14761":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"17:13738:12751":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"16:7857:13627":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"17:12127:12591":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"6:538:3785":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"6:8197:10562":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"2:40637:4568":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"2:5981:4367":{"crate_id":2,"path":["core","iter","adapters","filter","next_chunk","Guard"],"kind":"struct"},"2:10825:34683":{"crate_id":2,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"1:10721:4412":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stdout"],"kind":"struct"},"20:544:4977":{"crate_id":20,"path":["libc","unix","winsize"],"kind":"struct"},"1:9155:14319":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"20:6720:9630":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","xdp_umem_reg_v1"],"kind":"struct"},"17:14587:12900":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"17:15701:13259":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"2:40622:22055":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"17:3473:15322":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"2:42206:226":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"1:8470:4417":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"20:1030:3490":{"crate_id":20,"path":["libc","unix","linux_like","IPV6_MULTICAST_IF"],"kind":"constant"},"17:12572:12542":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolTable"],"kind":"struct"},"2:47167:14263":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"2:43882:11165":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"1:8078:16526":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"2:2609:10705":{"crate_id":2,"path":["core","ptr","with_exposed_provenance_mut"],"kind":"function"},"2:33666:4478":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"16:6560:13435":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"2:40774:14710":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"17:15058:13073":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"17:12408:12600":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"2:22959:33527":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"18:754:14411":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"20:5421:8902":{"crate_id":20,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"16:7888:14591":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"20:4903:8848":{"crate_id":20,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"16:6494:14532":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"16:860:15406":{"crate_id":16,"path":["gimli","read","endian_slice","DebugBytes"],"kind":"struct"},"2:13594:15540":{"crate_id":2,"path":["core","future","async_drop","AsyncDropInPlace"],"kind":"struct"},"2:44948:14143":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"2:8295:165":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"16:5927:14478":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"16:7604:13449":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"11:2380:4540":{"crate_id":11,"path":["hashbrown","table","Iter"],"kind":"struct"},"2:41272:14734":{"crate_id":2,"path":["core","iter","sources","from_coroutine","FromCoroutine"],"kind":"struct"},"17:12969:12636":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"2:40606:106":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"2:33945:4481":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"2:11045:239":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"1:9289:2897":{"crate_id":1,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"20:1039:3516":{"crate_id":20,"path":["libc","unix","linux_like","IPV6_V6ONLY"],"kind":"constant"},"20:8282:9093":{"crate_id":20,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"17:14752:12929":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"1:7723:27836":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"20:8022:3248":{"crate_id":20,"path":["libc","unix","linux_like","linux","arch","generic","SO_RCVBUF"],"kind":"constant"},"6:570:4980":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"2:43951:4389":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"2:21707:34847":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"20:965:3347":{"crate_id":20,"path":["libc","unix","linux_like","IP_ADD_MEMBERSHIP"],"kind":"constant"},"18:481:14393":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"9:53:22351":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"11:2495:22410":{"crate_id":11,"path":["hashbrown","Equivalent"],"kind":"trait"},"20:1727:5814":{"crate_id":20,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"16:6433:14528":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"1:9370:14328":{"crate_id":1,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"20:6856:9666":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"17:15655:13245":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"20:5070:8868":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"17:14560:12897":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"20:585:4982":{"crate_id":20,"path":["libc","unix","protoent"],"kind":"struct"},"5:6612:35196":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"2:40844:14720":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"1:4297:30618":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"16:7132:14582":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"16:6940:13550":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"5:1739:35196":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"20:5152:8874":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"6:465:3368":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"20:4991:8859":{"crate_id":20,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"5:6934:21822":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"2:3244:4427":{"crate_id":2,"path":["core","marker","Freeze"],"kind":"trait"},"5:2116:15504":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"5:3297:35672":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"2:3038:123":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"11:881:15482":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"2:43911:14137":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"2:40856:14721":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"2:3290:4496":{"crate_id":2,"path":["core","ops","async_function","AsyncFnOnce"],"kind":"trait"},"1:8611:11405":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"5:1843:15503":{"crate_id":5,"path":["alloc","collections","btree","map","ExtractIf"],"kind":"struct"},"17:4986:15325":{"crate_id":17,"path":["object","read","xcoff","relocation","XcoffRelocationIterator"],"kind":"struct"},"2:8750:149":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"17:11853:15375":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"6:5296:8888":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"2:42529:88":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"20:5375:8898":{"crate_id":20,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"20:5346:8894":{"crate_id":20,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"17:12707:15403":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"17:10137:23395":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"17:13146:12652":{"crate_id":17,"path":["object","archive","AixFileHeader"],"kind":"struct"},"16:2374:13408":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"2:22708:16723":{"crate_id":2,"path":["core","core_simd","simd","cmp","ord","SimdOrd"],"kind":"trait"},"1:9179:11070":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"16:2838:13429":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"17:1098:15314":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"17:1207:15315":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"2:32289:11289":{"crate_id":2,"path":["core","error","tags","Ref"],"kind":"struct"},"17:13211:12661":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"17:10818:15330":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"16:7618:13612":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"20:8288:9094":{"crate_id":20,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"2:40585:14705":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"struct"},"2:2144:13864":{"crate_id":2,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"2:10397:11237":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"1:11787:2899":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"1:4327:11401":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"1:8339:15598":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"2:26121:267":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"1:8488:2343":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"16:2478:13413":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"2:3458:142":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"17:14147:12813":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"1:5441:203":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"14:214:14604":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"1:1603:4540":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"17:11567:15357":{"crate_id":17,"path":["object","read","elf","note","GnuProperty"],"kind":"struct"},"1:10604:15604":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","CommandArgs"],"kind":"struct"},"2:41086:14732":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"17:15151:13097":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"5:680:15496":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"2:47150:14262":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"1:3387:4412":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"17:10218:12513":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"2:33260:4474":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"2:2966:258":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"17:11510:15353":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"1:6503:220":{"crate_id":1,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"2:6966:14667":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindows"],"kind":"struct"},"2:2934:21866":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"17:15748:13273":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"17:11898:12554":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"5:7449:11070":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"17:14463:12884":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"0:0:2575":{"crate_id":0,"path":["socket2"],"kind":"module"},"20:5638:8925":{"crate_id":20,"path":["libc","unix","linux_like","linux","sched_attr"],"kind":"struct"},"2:2593:672":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"6:6714:9627":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_ring_offset_v1"],"kind":"struct"},"2:12656:14754":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"1:2070:197":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"1:5329:204":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"2:13731:15541":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"11:2420:11070":{"crate_id":11,"path":["hashbrown","table","IntoIter"],"kind":"struct"},"2:40835:14719":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"1:8007:15592":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"2:42262:11070":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"5:6414:16734":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"1:9185:14320":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"16:7014:23355":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"1:11028:27787":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","ProgramKind"],"kind":"enum"},"2:4:1256":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"2:42092:173":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"2:8304:10603":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"1:9415:235":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"6:4979:8858":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"2:40659:4572":{"crate_id":2,"path":["core","ffi","c_char"],"kind":"type_alias"},"7:79:22326":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"6:4916:8850":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"17:11557:15356":{"crate_id":17,"path":["object","read","elf","note","GnuPropertyIterator"],"kind":"struct"},"16:6991:36868":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"2:46099:14168":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"2:30688:2346":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"6:7452:10043":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"20:8247:9088":{"crate_id":20,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"2:43811:11150":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"2:23159:13891":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU16Inner"],"kind":"struct"},"17:10419:12519":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"18:507:12385":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"17:11730:14426":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsectionIterator"],"kind":"struct"},"20:6680:9625":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","xdp_ring_offset"],"kind":"struct"},"20:1494:3663":{"crate_id":20,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"5:3805:4404":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"1:8654:4759":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"1:6455:14812":{"crate_id":1,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"11:434:36844":{"crate_id":11,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"2:46253:14184":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"1:2307:138":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"1:12345:335":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"11:2228:14620":{"crate_id":11,"path":["hashbrown","table","HashTable"],"kind":"struct"},"16:2394:13409":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"6:7429:5926":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"2:12000:11155":{"crate_id":2,"path":["core","slice","iter","ChunkBy"],"kind":"struct"},"11:854:15479":{"crate_id":11,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"2:3487:4497":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"9:424:22335":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"6:473:4972":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"1:957:16494":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"2:23090:16568":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"16:5415:13491":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"16:8093:13666":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"20:5291:4101":{"crate_id":20,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"16:5037:13486":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"20:7428:10042":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"20:558:4978":{"crate_id":20,"path":["libc","unix","sigval"],"kind":"struct"},"20:8011:10424":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"2:3452:140":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"2:43711:15550":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"6:7314:5754":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"20:5026:8863":{"crate_id":20,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"20:6501:9609":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"1:2226:128":{"crate_id":1,"path":["std","ffi","os_str","Display"],"kind":"struct"},"1:4811:12270":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"function"},"0:580:2523":{"crate_id":0,"path":["socket2","MsgHdr"],"kind":"struct"},"6:1663:5809":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"2:47301:14275":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"2:3435:4492":{"crate_id":2,"path":["core","ops","deref","DerefPure"],"kind":"trait"},"2:41895:14116":{"crate_id":2,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"5:3661:4540":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"20:99:2451":{"crate_id":20,"path":["libc","unix","IPPROTO_ICMP"],"kind":"constant"},"2:40897:14725":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"17:11688:14423":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSection"],"kind":"struct"},"5:1509:11070":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"1:7875:12506":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"5:6176:4367":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"2:2957:76":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"17:3597:15323":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"16:6665:23353":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"11:740:15475":{"crate_id":11,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"1:8498:4385":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"5:1493:11163":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"5:7059:264":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"16:6026:14493":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"5:2249:14628":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"1:10985:28082":{"crate_id":1,"path":["std","sys","pal","unix","kernel_copy","FdHandle"],"kind":"enum"},"2:46291:14186":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"5:7566:4566":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"2:46854:14254":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"2:13884:14675":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"16:6120:23350":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"2:39673:212":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"6:497:4975":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"6:5083:8869":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"2:10403:11235":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"17:12671:15400":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatSectionIterator"],"kind":"struct"},"20:102:2460":{"crate_id":20,"path":["libc","unix","IPPROTO_UDP"],"kind":"constant"},"5:743:118":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"18:96:27594":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"2:40888:14724":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"16:4830:13479":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"2:40756:14707":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"6:5407:1243":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"1:2067:198":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"2:44574:14795":{"crate_id":2,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"2:42412:93":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"20:1539:5798":{"crate_id":20,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"2:43346:14747":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"16:7428:23357":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"2:43093:73":{"crate_id":2,"path":["core","fmt","rt","Argument"],"kind":"struct"},"2:3202:4425":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"17:13497:12687":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"2:40386:14695":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"5:1369:15487":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"2:2065:1358":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"5:5422:35196":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"17:15390:13158":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"6:1496:3847":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"5:1077:35196":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"1:5838:14812":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"17:13116:12648":{"crate_id":17,"path":["object","archive","AixHeader"],"kind":"struct"},"20:5487:8910":{"crate_id":20,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_256"],"kind":"struct"},"2:43139:11227":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"2:2768:134":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"1:11682:14883":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"17:15799:13284":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"6:6435:9604":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"2:43118:137":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"2:42806:11237":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"2:4793:14650":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"5:956:4540":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"17:2203:15317":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"2:46355:14190":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"2:40927:14727":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"17:10399:4389":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"6:5314:4103":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"1:1838:696":{"crate_id":1,"path":["std","env"],"kind":"module"},"16:872:15311":{"crate_id":16,"path":["gimli","read","endian_slice","DebugLen"],"kind":"struct"},"20:5275:8887":{"crate_id":20,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"17:15010:13064":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"2:40714:11148":{"crate_id":2,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"17:10457:138":{"crate_id":17,"path":["object","read","any","File"],"kind":"enum"},"18:548:153":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"6:5370:8895":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"17:15822:13288":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"2:4859:11290":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"5:7457:210":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"2:42785:11228":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"17:10982:23430":{"crate_id":17,"path":["object","read","archive","Members"],"kind":"enum"},"17:12362:14441":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"5:7634:15523":{"crate_id":5,"path":["alloc","rc","UniqueRc"],"kind":"struct"},"5:7582:4569":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"1:9714:138":{"crate_id":1,"path":["std","sys","pal","unix","fs","File"],"kind":"struct"},"2:9857:91":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"1:3553:4367":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"17:12530:15396":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSectionIterator"],"kind":"struct"},"17:16176:13380":{"crate_id":17,"path":["object","xcoff","FunAux64"],"kind":"struct"},"20:6745:9633":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","xdp_options"],"kind":"struct"},"11:1884:11070":{"crate_id":11,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"5:6775:35196":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"20:6361:9540":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"17:12289:12594":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"2:23148:13890":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU8Inner"],"kind":"struct"},"5:6693:11070":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"20:4971:8856":{"crate_id":20,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"2:12716:14760":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"5:7743:14948":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"1:562:16399":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"17:12056:12586":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"20:6611:9617":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"1:9551:15568":{"crate_id":1,"path":["std","sys","pal","unix","args","Args"],"kind":"struct"},"2:12981:21790":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"5:6051:14639":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"17:11764:14431":{"crate_id":17,"path":["object","read","elf","attributes","AttributeReader"],"kind":"struct"},"16:7648:15464":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"2:47079:14259":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"16:2998:13454":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"17:14372:12864":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"11:1564:22415":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"2:6777:14659":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"1:8797:4537":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"1:8030:12557":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"17:11313:14415":{"crate_id":17,"path":["object","read","coff","import","ImportObjectData"],"kind":"struct"},"5:7668:15524":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"17:14246:12847":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"17:14876:13022":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"2:22973:13876":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"20:8020:3184":{"crate_id":20,"path":["libc","unix","linux_like","linux","arch","generic","SO_BROADCAST"],"kind":"constant"},"2:2763:201":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"17:13089:12645":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"17:12399:14443":{"crate_id":17,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"1:968:15479":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"11:708:15474":{"crate_id":11,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"2:42451:87":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"2:40677:4583":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"2:46756:14221":{"crate_id":2,"path":["core","core_arch","simd","m32x8"],"kind":"struct"},"11:1105:15485":{"crate_id":11,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"6:6532:9611":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"1:2629:4400":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"2:9420:10677":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"2:39623:4498":{"crate_id":2,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"6:564:4979":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"1:3604:2865":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"2:42799:11236":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"2:2963:144":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"16:5863:23348":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"1:12344:1314":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"1:10917:14822":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileAttr"],"kind":"struct"},"1:12366:1912":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"2:10039:33708":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"17:10905:15332":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"17:14051:12799":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"1:617:16476":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"17:13844:12769":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"5:5864:251":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"20:7411:5926":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"1:6276:28063":{"crate_id":1,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"20:5531:8914":{"crate_id":20,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"1:11654:14342":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"2:44882:150":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"16:0:4240":{"crate_id":16,"path":["gimli"],"kind":"module"},"6:5445:8903":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"2:46482:14211":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"2:7716:21864":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"17:12993:23422":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"20:6632:9619":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"17:12597:12611":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolTable"],"kind":"struct"},"1:3643:2864":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"5:40:16508":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"1:5952:15576":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"1:12351:735":{"crate_id":1,"path":["std","f16"],"kind":"primitive"},"20:1711:5813":{"crate_id":20,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"20:1690:5812":{"crate_id":20,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"20:5337:8893":{"crate_id":20,"path":["libc","unix","linux_like","linux","seccomp_notif_addfd"],"kind":"struct"},"5:5077:4367":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"1:7144:16640":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"20:4891:8847":{"crate_id":20,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"5:4282:4367":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"1:12339:417":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"2:2153:10716":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"0:687:2478":{"crate_id":0,"path":["socket2","RecvFlags"],"kind":"struct"},"2:46976:14256":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"17:13797:12763":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"5:883:16495":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"6:8341:10598":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"2:12732:14763":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"17:12584:15330":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolIterator"],"kind":"struct"},"2:46405:14192":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"2:42126:10675":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"2:44561:14791":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"1:8349:2964":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"20:7519:10048":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"1:8606:11404":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"16:6466:13506":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"2:23032:33519":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"1:2463:16541":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"2:10389:128":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"2:23269:13901":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroIsizeInner"],"kind":"struct"},"17:16249:13392":{"crate_id":17,"path":["object","xcoff","DwarfAux64"],"kind":"struct"},"11:299:14608":{"crate_id":11,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"2:23192:13894":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU128Inner"],"kind":"struct"},"20:5361:8896":{"crate_id":20,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"2:44768:22109":{"crate_id":2,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"16:6317:15434":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"17:14311:12854":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"17:11865:15376":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"17:15944:12661":{"crate_id":17,"path":["object","xcoff","FileHeader64"],"kind":"struct"},"17:10350:12517":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"1:8676:3653":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"1:1092:15484":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"2:43052:14130":{"crate_id":2,"path":["core","fmt","rt","Count"],"kind":"enum"},"11:2545:13763":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"2:44239:14767":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"2:45932:14154":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"17:14599:12907":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"16:5995:14487":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"2:46209:14182":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"1:11513:28050":{"crate_id":1,"path":["std","sys","sync","once","futex","CompletionGuard"],"kind":"struct"},"17:14414:12871":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"5:7727:15503":{"crate_id":5,"path":["alloc","vec","extract_if","ExtractIf"],"kind":"struct"},"17:11524:15354":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"2:46422:14193":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"1:6193:220":{"crate_id":1,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"2:44540:21806":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"2:43064:13642":{"crate_id":2,"path":["core","fmt","rt","Flag"],"kind":"enum"},"5:3222:100":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"17:10155:12509":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"17:12621:12612":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbol"],"kind":"struct"},"6:5483:8908":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls_crypto_info"],"kind":"struct"},"16:6782:23354":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"1:4002:3592":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"16:8313:137":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"2:22487:16729":{"crate_id":2,"path":["core","core_simd","simd","num","int","SimdInt"],"kind":"trait"},"2:43025:14120":{"crate_id":2,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"2:12915:4544":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"1:10898:15624":{"crate_id":1,"path":["std","sys","pal","unix","fd","FileDesc"],"kind":"struct"},"6:5160:8875":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"17:15176:13105":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"2:21663:34835":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_elements_left","Rotate"],"kind":"struct"},"2:42254:11163":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"2:10044:33721":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"1:11251:4511":{"crate_id":1,"path":["std","sys","pal","unix","time","SystemTime"],"kind":"struct"},"2:12502:21794":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"2:42109:11163":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"2:3340:4484":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"20:56:3658":{"crate_id":20,"path":["libc","unix","ssize_t"],"kind":"type_alias"},"16:7006:15446":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"17:15383:13157":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"20:8179:10562":{"crate_id":20,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"1:12127:15763":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"20:6770:12186":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"17:15222:13114":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"2:46384:14191":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"20:4876:8845":{"crate_id":20,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"1:12342:1874":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"20:920:2485":{"crate_id":20,"path":["libc","unix","linux_like","MSG_TRUNC"],"kind":"constant"},"1:12324:27783":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"17:513:15313":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"17:14038:12797":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"2:2813:3647":{"crate_id":2,"path":["core","cmp","min"],"kind":"function"},"2:43354:14748":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"2:43558:11151":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"2:44889:219":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"17:13187:12660":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"17:13024:23423":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"17:16235:13391":{"crate_id":17,"path":["object","xcoff","DwarfAux32"],"kind":"struct"},"1:12347:1722":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"2:34118:4482":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"20:1514:2392":{"crate_id":20,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"20:8241:9087":{"crate_id":20,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"6:6775:9635":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","iocb"],"kind":"struct"},"2:21741:16646":{"crate_id":2,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"20:4938:8852":{"crate_id":20,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"20:5089:8869":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"2:44972:15551":{"crate_id":2,"path":["core","task","wake","ContextBuilder"],"kind":"struct"},"20:6639:9620":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"20:6696:9627":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","xdp_ring_offset_v1"],"kind":"struct"},"16:6300:15431":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"6:6768:9634":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_desc"],"kind":"struct"},"11:835:15476":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"1:11013:15149":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Stdio"],"kind":"enum"},"2:41286:14736":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"16:6480:13434":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"2:42373:86":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"6:559:4978":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"2:12074:2814":{"crate_id":2,"path":["core","slice","raw","from_raw_parts"],"kind":"function"},"16:2592:13418":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"3:234:226":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"2:5324:4420":{"crate_id":2,"path":["core","io","borrowed_buf","BorrowedBuf"],"kind":"struct"},"6:4787:8839":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"2:36340:4486":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"20:6453:9607":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"2:3270:4473":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"20:5400:8900":{"crate_id":20,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"18:706:14404":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"16:2768:13426":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"1:12353:754":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"11:2551:36840":{"crate_id":11,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"17:15356:13150":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"16:6749:14551":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"6:6471:9607":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"20:496:4975":{"crate_id":20,"path":["libc","unix","rusage"],"kind":"struct"},"17:13375:12673":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"20:4870:8844":{"crate_id":20,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"20:8235:9086":{"crate_id":20,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"20:5329:8892":{"crate_id":20,"path":["libc","unix","linux_like","linux","seccomp_notif_resp"],"kind":"struct"},"16:5385:12509":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"17:12516:15394":{"crate_id":17,"path":["object","read","xcoff","file","XcoffFile"],"kind":"struct"},"2:41979:33512":{"crate_id":2,"path":["core","net","parser","AddrKind"],"kind":"enum"},"2:21800:16645":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"1:426:185":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"1:9244:16616":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"20:6671:9624":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","sockaddr_xdp"],"kind":"struct"},"2:21721:34839":{"crate_id":2,"path":["core","core_simd","swizzle","resize","Resize"],"kind":"struct"},"2:40544:14703":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"1:11648:15628":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"6:1517:2701":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"1:3334:4410":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"20:5442:8904":{"crate_id":20,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"16:7580:14589":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"16:5846:14472":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"11:2566:4543":{"crate_id":11,"path":["hashbrown","TryReserveError"],"kind":"enum"},"17:14489:12886":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"2:40433:33535":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"16:5107:13488":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"17:11016:15333":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"16:3842:13462":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"2:11473:11172":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"17:11405:15350":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"2:47129:14261":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"20:5221:8881":{"crate_id":20,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"17:13292:12666":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"2:4724:15532":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"2:22661:16553":{"crate_id":2,"path":["core","core_simd","simd","ptr","sealed","Sealed"],"kind":"trait"},"20:6603:9616":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"2:4503:21836":{"crate_id":2,"path":["core","async_iter","async_iter","IntoAsyncIterator"],"kind":"trait"},"20:5662:8928":{"crate_id":20,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"6:523:4976":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"6:517:3661":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"17:14503:12889":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"17:12711:137":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"17:13814:12766":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"1:4975:3654":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"2:33599:4480":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"20:5609:8921":{"crate_id":20,"path":["libc","unix","linux_like","linux","__c_anonymous_ifc_ifcu"],"kind":"union"},"1:8541:4390":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"6:4800:8840":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"17:13387:12674":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"16:6872:14565":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"16:6160:22459":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"16:5914:14477":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"20:6646:9621":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"17:9858:23413":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"16:5075:13487":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"20:1643:5807":{"crate_id":20,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"16:6758:13532":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"20:577:4981":{"crate_id":20,"path":["libc","unix","servent"],"kind":"struct"},"6:5617:8920":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"16:3029:12411":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"16:8136:14598":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"1:4917:3595":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"2:10401:11234":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"20:1034:3468":{"crate_id":20,"path":["libc","unix","linux_like","IPV6_DROP_MEMBERSHIP"],"kind":"constant"},"5:3648:182":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"16:3329:13457":{"crate_id":16,"path":["gimli","arch","LoongArch"],"kind":"struct"},"16:4424:13467":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"1:1916:15569":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"2:40784:133":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"17:15039:13072":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"20:6399:9603":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"16:5897:13493":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"17:16151:13372":{"crate_id":17,"path":["object","xcoff","CsectAux64"],"kind":"struct"},"1:11904:14343":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"2:4650:11288":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"20:1584:5802":{"crate_id":20,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"6:6756:9632":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_statistics_v1"],"kind":"struct"},"20:531:3718":{"crate_id":20,"path":["libc","unix","iovec"],"kind":"struct"},"1:5083:16584":{"crate_id":1,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"17:11367:12531":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"20:966:3352":{"crate_id":20,"path":["libc","unix","linux_like","IP_DROP_MEMBERSHIP"],"kind":"constant"},"2:3430:2350":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"17:11743:14427":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsection"],"kind":"struct"},"2:43837:11148":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"5:1549:15488":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"17:15456:13173":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"1:878:11163":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"2:43790:11159":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"20:6591:9615":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"16:7061:13558":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"1:7925:28069":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"17:597:12506":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"5:734:250":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"18:598:36893":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"2:1851:2345":{"crate_id":2,"path":["core","mem"],"kind":"module"},"1:3291:16084":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"20:949:3447":{"crate_id":20,"path":["libc","unix","linux_like","IP_RECVTOS"],"kind":"constant"},"6:5653:8925":{"crate_id":6,"path":["libc","unix","linux_like","linux","sched_attr"],"kind":"struct"},"17:15596:13230":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"20:5392:1243":{"crate_id":20,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"2:10358:143":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"20:5367:8897":{"crate_id":20,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"2:47050:14258":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"17:16121:13364":{"crate_id":17,"path":["object","xcoff","FileAux64"],"kind":"struct"},"1:7403:15762":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"2:23203:13895":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroUsizeInner"],"kind":"struct"},"20:569:4980":{"crate_id":20,"path":["libc","unix","tms"],"kind":"struct"},"1:10994:28080":{"crate_id":1,"path":["std","sys","pal","unix","kernel_copy","SpliceMode"],"kind":"enum"},"6:1707:5813":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"6:5181:8877":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"20:6417:9604":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"17:15342:13143":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"2:12970:14404":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"5:3042:13857":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"2:21709:34845":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"11:364:16299":{"crate_id":11,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"6:8317:9095":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"6:4876:8846":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"17:11595:12549":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"20:7434:10043":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"16:3899:13463":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"17:12647:15398":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatIterator"],"kind":"struct"},"17:4821:15324":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolIterator"],"kind":"struct"},"20:1084:3669":{"crate_id":20,"path":["libc","unix","linux_like","TCP_KEEPIDLE"],"kind":"constant"},"2:22630:10704":{"crate_id":2,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr","with_exposed_provenance"],"kind":"function"},"11:1907:14617":{"crate_id":11,"path":["hashbrown","set","Difference"],"kind":"struct"},"6:5415:8900":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"17:12422:14444":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"2:10842:28075":{"crate_id":2,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"17:10622:36882":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"17:10759:12542":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"1:9163:4540":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"1:9265:14324":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"1:7944:28071":{"crate_id":1,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"2:43554:14749":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"17:14402:12869":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"7:0:1902":{"crate_id":7,"path":["unwind"],"kind":"module"},"20:6738:9632":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","xdp_statistics_v1"],"kind":"struct"},"11:2148:15484":{"crate_id":11,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"17:11877:12552":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"17:14260:12849":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"1:6676:15587":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"5:6968:21824":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstDataSrcBufDrop"],"kind":"struct"},"1:947:15475":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"2:41310:14738":{"crate_id":2,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"17:15116:13087":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"16:8073:13665":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"1:3061:137":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"20:7348:4759":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"2:22549:16553":{"crate_id":2,"path":["core","core_simd","simd","num","sealed","Sealed"],"kind":"trait"},"2:5265:435":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"16:6442:14529":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"1:896:14614":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"17:13999:12792":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"16:6802:14552":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"1:9726:16309":{"crate_id":1,"path":["std","sys","pal","unix","fs","Dir"],"kind":"struct"},"17:10018:23398":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"6:1559:5800":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"17:14449:12883":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"1:8058:16482":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"17:15301:13134":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"1:888:11070":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"1:12357:897":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"20:8323:10598":{"crate_id":20,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"1:0:1714":{"crate_id":1,"path":["std"],"kind":"module"},"17:13986:12791":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"1:9317:15610":{"crate_id":1,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"6:1547:5799":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"6:5122:8872":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"20:962:3397":{"crate_id":20,"path":["libc","unix","linux_like","IP_MULTICAST_IF"],"kind":"constant"},"5:3039:11125":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"20:8030:3239":{"crate_id":20,"path":["libc","unix","linux_like","linux","arch","generic","SO_PASSCRED"],"kind":"constant"},"2:23236:13898":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI32Inner"],"kind":"struct"},"1:9324:15611":{"crate_id":1,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"6:8247:9085":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"2:43872:11167":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"0:665:2426":{"crate_id":0,"path":["socket2","Type"],"kind":"struct"},"1:6793:16610":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"6:7467:10045":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"20:5408:8901":{"crate_id":20,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"1:12364:1828":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"1:4813:12272":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"function"},"2:42167:10679":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"2:3446:4493":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"2:32307:244":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"1:1619:14616":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"2:8753:11412":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"2:11394:11168":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"6:4885:8847":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"20:8021:3279":{"crate_id":20,"path":["libc","unix","linux_like","linux","arch","generic","SO_SNDBUF"],"kind":"constant"},"6:5014:8862":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"5:6072:16306":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"11:1893:15503":{"crate_id":11,"path":["hashbrown","set","ExtractIf"],"kind":"struct"},"11:1888:15489":{"crate_id":11,"path":["hashbrown","set","Drain"],"kind":"struct"},"17:15214:13112":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"17:14994:13063":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"20:6688:9626":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","xdp_mmap_offsets"],"kind":"struct"},"6:5352:8893":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_addfd"],"kind":"struct"},"20:6524:9612":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"2:23017:33536":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"16:4743:13476":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"18:635:12403":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"2:21918:16643":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"17:11497:15352":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"17:14575:12601":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"2:40649:4389":{"crate_id":2,"path":["core","ffi","c_str","Bytes"],"kind":"struct"},"2:2954:77":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"2:41295:14737":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"20:5008:8861":{"crate_id":20,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"2:4803:11289":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"1:8187:14819":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"2:41813:170":{"crate_id":2,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"1:8650:15153":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"2:41328:14739":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"17:13855:12770":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"2:46931:14255":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"17:2037:15316":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"20:5229:8882":{"crate_id":20,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"16:2854:13430":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"20:938:3425":{"crate_id":20,"path":["libc","unix","linux_like","IP_TTL"],"kind":"constant"},"2:46017:14163":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"5:3410:15503":{"crate_id":5,"path":["alloc","collections","btree","set","ExtractIf"],"kind":"struct"},"6:5200:5796":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"17:16079:13353":{"crate_id":17,"path":["object","xcoff","Symbol32"],"kind":"struct"},"1:11201:14317":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","ExitStatus"],"kind":"struct"},"6:6664:9621":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"6:4924:8851":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"2:22997:33517":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"17:11256:14412":{"crate_id":17,"path":["object","read","coff","import","ImportFile"],"kind":"struct"},"5:2302:35668":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"16:6543:14536":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"16:3196:13399":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"17:12238:15389":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"2:32271:15545":{"crate_id":2,"path":["core","error","private","Internal"],"kind":"struct"},"16:8216:14603":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"16:3810:13461":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"20:5058:8867":{"crate_id":20,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"2:45947:14155":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"2:42001:4461":{"crate_id":2,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"2:4437:15529":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"2:32306:4430":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"2:40865:14722":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"18:689:14401":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"2:4571:15531":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"6:5266:8884":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"20:5140:8873":{"crate_id":20,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"17:15720:13264":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"20:6506:9610":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"1:10947:14299":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileTimes"],"kind":"struct"},"2:13996:11146":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"5:7405:15489":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"16:6353:13499":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"18:573:12385":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"6:1565:5801":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"16:7111:14581":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"20:7312:4853":{"crate_id":20,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"2:3654:254":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"2:41279:14735":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"20:1031:3473":{"crate_id":20,"path":["libc","unix","linux_like","IPV6_MULTICAST_HOPS"],"kind":"constant"},"11:1880:4540":{"crate_id":11,"path":["hashbrown","set","Iter"],"kind":"struct"},"1:9283:115":{"crate_id":1,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"11:830:15488":{"crate_id":11,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"1:11360:15625":{"crate_id":1,"path":["std","sys","os_str","bytes","Slice"],"kind":"struct"}},"external_crates":{"20":{"name":"libc","html_root_url":null},"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":29}