{"root":"0:0:2619","crate_version":"1.3.0","includes_private":false,"index":{"0:87:2574":{"id":"0:87:2574","crate_id":0,"name":"emit_has_trait","span":{"filename":"src/lib.rs","begin":[387,4],"end":[391,5]},"visibility":"public","docs":"Emits a config value `has_TRAIT` if `probe_trait` returns true.\n\nAny non-identifier characters in the trait `name` will be replaced with\n`_` in the generated config value.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["name",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:82:2555":{"id":"0:82:2555","crate_id":0,"name":"emit_sysroot_crate","span":{"filename":"src/lib.rs","begin":[338,4],"end":[342,5]},"visibility":"public","docs":"Emits a config value `has_CRATE` if `probe_sysroot_crate` returns true.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["name",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:91:2585":{"id":"0:91:2585","crate_id":0,"name":"emit_type_cfg","span":{"filename":"src/lib.rs","begin":[422,4],"end":[426,5]},"visibility":"public","docs":"Emits the given `cfg` value if `probe_type` returns true.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["name",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["cfg",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3105-0:105:149":{"id":"b:2:3105-0:105:149","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:3064:174","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:3074:270","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:105:149","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3108:149","2:3109:1850"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:85:2567":{"id":"0:85:2567","crate_id":0,"name":"emit_path_cfg","span":{"filename":"src/lib.rs","begin":[366,4],"end":[370,5]},"visibility":"public","docs":"Emits the given `cfg` value if `probe_path` returns true.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["path",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["cfg",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13743:1024":{"id":"2:13743:1024","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"∆íoo\".len(), 4); // fancy f!\nassert_eq!(\"∆íoo\".chars().count(), 3);\n```","links":{"prim@char":"1:12492:490"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13759:28442":{"id":"2:13759:28442","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"üóª‚ààüåè\";\nunsafe {\n    assert_eq!(\"üóª\", v.get_unchecked(0..4));\n    assert_eq!(\"‚àà\", v.get_unchecked(4..7));\n    assert_eq!(\"üåè\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:11566:251","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:11566:251","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:13764:33949":{"id":"2:13764:33949","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"1:12498:1765","crate::ops::IndexMut":"2:3621:9154","str::slice_unchecked":"2:13763:33948"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:13872:28383":{"id":"2:13872:28383","crate_id":2,"name":"trim_ascii","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing ASCII whitespace\nremoved.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\nassert_eq!(\"\\r hello world\\n \".trim_ascii(), \"hello world\");\nassert_eq!(\"  \".trim_ascii(), \"\");\nassert_eq!(\"\".trim_ascii(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:1151:38508"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5701":{"id":"5:5701","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["5:5702:34660","5:5703:14651","5:5706:34661","5:5709:34662","5:5717:34663","5:5718:34664","5:5719:3015","5:5720:29623","5:5721:29624"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:3959-0:105:149":{"id":"b:2:3959-0:105:149","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:32819:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3957:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:105:149","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3961:1865"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13795:2611":{"id":"2:13795:2611","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"2:13437:3474","`DoubleEndedIterator`":"2:8393:133","prim@char":"1:12492:490","str::split_whitespace":"2:13773:32937","str::rsplit":"2:13801:28475"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Split","id":"2:44572:2993","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13443:3468","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13842:33960":{"id":"2:13842:33960","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"1:12492:490","self::pattern":"2:13437:3474"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13443:3468","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13443:3468","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"2:13463:3467","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2788-0:155:2415":{"id":"b:2:2788-0:155:2415","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32819:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2782:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"AutoCfg","id":"0:155:2415","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2790:26255"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:5:5953-0:105:149":{"id":"b:5:5953-0:105:149","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"2:10665:132","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:32819:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"ToString","id":"5:5951:264","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:105:149","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:5955:1825"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:3100-0:155:2415":{"id":"b:2:3100-0:155:2415","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:3074:270","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:3070:271","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"AutoCfg","id":"0:155:2415","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3103:149","2:3104:1852"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13745:33944":{"id":"2:13745:33944","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\nassert!(s.is_char_boundary(0));\n// start of `ËÄÅ`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `√∂`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `ËÄÅ`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13819:28481":{"id":"2:13819:28481","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42580:205","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13443:3468","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13443:3468","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13458:3469","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:32818:248-0:155:2415":{"id":"a:2:32818:248-0:155:2415","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:32818:248","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"AutoCfg","id":"0:155:2415","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:13810:2784":{"id":"2:13810:2784","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"1:12492:490","self::pattern":"2:13437:3474","str::rsplitn":"2:13813:28478"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitN","id":"2:44676:3497","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13443:3468","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13866:28375":{"id":"2:13866:28375","crate_id":2,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"2:40484:14489","Self::is_ascii":"2:13865:28374"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:42580:205","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"AsciiChar","id":"2:40484:14489","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13765:28466":{"id":"2:13765:28466","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_checked`](str::split_at_checked).\n\n# Examples\n\n```\nlet s = \"Per Martin-L√∂f\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-L√∂f\", last);\n```","links":{"str::split_at_checked":"2:13767:28470","str::split_at_mut":"2:13766:28467"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:3316:260-0:105:149":{"id":"a:2:3316:260-0:105:149","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3316:260","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:105:149","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2785-0:105:149":{"id":"b:2:2785-0:105:149","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32819:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2779:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:105:149","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2787:2888"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:32818:248-0:105:149":{"id":"a:2:32818:248-0:105:149","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:32818:248","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:105:149","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:84:2565":{"id":"0:84:2565","crate_id":0,"name":"emit_has_path","span":{"filename":"src/lib.rs","begin":[359,4],"end":[363,5]},"visibility":"public","docs":"Emits a config value `has_PATH` if `probe_path` returns true.\n\nAny non-identifier characters in the `path` will be replaced with\n`_` in the generated config value.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["path",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:64:2428":{"id":"0:64:2428","crate_id":0,"name":"rerun_path","span":{"filename":"src/lib.rs","begin":[111,0],"end":[113,1]},"visibility":"public","docs":"Writes a line telling Cargo to rerun the build script if `path` changes.\n\nThis looks like: `cargo:rerun-if-changed=PATH`\n\nThis requires at least cargo 0.7.0, corresponding to rustc 1.6.0.  Earlier\nversions of cargo will simply ignore the directive.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["path",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2817-0:155:2415":{"id":"b:2:2817-0:155:2415","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2805:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"CloneToUninit","id":"2:2815:3341","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"AutoCfg","id":"0:155:2415","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2819:26260"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13798:28473":{"id":"2:13798:28473","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"1:12492:490","self::pattern":"2:13437:3474"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitInclusive","id":"2:13227:3477","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13443:3468","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:3109:1850":{"id":"2:3109:1850","crate_id":2,"name":"try_from","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["value",{"generic":"U"}]],"output":{"resolved_path":{"name":"Result","id":"2:42845:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"T"},"trait":{"name":"TryFrom","id":"2:3074:270","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13816:28480":{"id":"2:13816:28480","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42580:205","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13443:3468","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:42674:9241-0:105:149":{"id":"a:2:42674:9241-0:105:149","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:42674:9241","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:105:149","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"2:2787:2888":{"id":"2:2787:2888","crate_id":2,"name":"borrow","span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[rustc_diagnostic_item = \"noop_method_borrow\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13752:33947":{"id":"2:13752:33947","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"üóª‚ààüåè\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"üçî‚ààüåè\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:13770:2598":{"id":"2:13770:2598","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"yÃÜ\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'yÃÜ'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:12492:490"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chars","id":"2:44542:3483","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13868:28378":{"id":"2:13868:28378","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Gr√º√üe, J√ºrgen ‚ù§\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GR√º√üE, J√ºRGEN ‚ù§\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13871:28382":{"id":"2:13871:28382","crate_id":2,"name":"trim_ascii_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\nassert_eq!(\"\\r hello world\\u{3000}\\n \".trim_ascii_end(), \"\\r hello world\\u{3000}\");\nassert_eq!(\"  \".trim_ascii_end(), \"\");\nassert_eq!(\"\".trim_ascii_end(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:1151:38508"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13753:350":{"id":"2:13753:350","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"2:13754:28444","`u8`":"1:12511:1896"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:95:2597":{"id":"0:95:2597","crate_id":0,"name":"emit_constant_cfg","span":{"filename":"src/lib.rs","begin":[458,4],"end":[462,5]},"visibility":"public","docs":"Emits the given `cfg` value if `probe_constant` returns true.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["expr",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["cfg",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13845:33961":{"id":"2:13845:33961","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12492:490","self::pattern":"2:13437:3474"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13443:3468","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13848:27799":{"id":"2:13848:27799","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns the substring after the prefix,\nwrapped in `Some`. Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12492:490","self::pattern":"2:13437:3474"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["prefix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42580:205","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13443:3468","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5721:29624":{"id":"5:5721:29624","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Gr√º√üe, J√ºrgen ‚ù§\";\n\nassert_eq!(\"gr√º√üe, j√ºrgen ‚ù§\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"2:13869:28379"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7759:256","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13776:33950":{"id":"2:13776:33950","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\", suggestion =\n\"lines\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinesAny","id":"2:44836:3490","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13801:28475":{"id":"2:13801:28475","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"2:13437:3474","`DoubleEndedIterator`":"2:8393:133","prim@char":"1:12492:490","str::split":"2:13795:2611"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplit","id":"2:44590:3495","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13443:3468","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13443:3468","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13458:3469","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:32876:3125-0:105:149":{"id":"a:2:32876:3125-0:105:149","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32876:3125","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:105:149","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:13825:33953":{"id":"2:13825:33953","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"2:13437:3474","`DoubleEndedIterator`":"2:8393:133","prim@char":"1:12492:490","str::matches":"2:13822:2902"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatches","id":"2:44794:3494","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13443:3468","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13443:3468","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13458:3469","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13840:33958":{"id":"2:13840:33958","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  ◊¢◊ë◊®◊ô◊™\";\nassert!(Some('◊¢') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:32876:3125-0:155:2415":{"id":"a:2:32876:3125-0:155:2415","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32876:3125","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"AutoCfg","id":"0:155:2415","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:90:2583":{"id":"0:90:2583","crate_id":0,"name":"emit_has_type","span":{"filename":"src/lib.rs","begin":[415,4],"end":[419,5]},"visibility":"public","docs":"Emits a config value `has_TYPE` if `probe_type` returns true.\n\nAny non-identifier characters in the type `name` will be replaced with\n`_` in the generated config value.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["name",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13768:28471":{"id":"2:13768:28471","crate_id":2,"name":"split_at_mut_checked","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that‚Äôs not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at_checked`] method.\n\n[`split_at_checked`]: str::split_at_checked\n\n# Examples\n\n```\nlet mut s = \"Per Martin-L√∂f\".to_string();\nif let Some((first, last)) = s.split_at_mut_checked(3) {\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-L√∂f\", last);\n}\nassert_eq!(\"PER Martin-L√∂f\", s);\n\nassert_eq!(None, s.split_at_mut_checked(13));  // Inside ‚Äú√∂‚Äù\nassert_eq!(None, s.split_at_mut_checked(16));  // Beyond the string length\n```","links":{"str::split_at_checked":"2:13767:28470"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"2:42580:205","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5703:14651":{"id":"5:5703:14651","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7759:256"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["from",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7759:256","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13443:3468","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:3108:149":{"id":"2:3108:149","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Infallible","id":"2:32742:3058","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"a:2:42673:9122-0:105:149":{"id":"a:2:42673:9122-0:105:149","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:42673:9122","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:105:149","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"2:13869:28379":{"id":"2:13869:28379","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GR√ú√üE, J√úRGEN ‚ù§\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"gr√ú√üe, j√úrgen ‚ù§\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:68:1208":{"id":"0:68:1208","crate_id":0,"name":"new","span":{"filename":"src/lib.rs","begin":[144,4],"end":[149,5]},"visibility":"public","docs":"Creates a new `AutoCfg` instance.\n\n# Common errors\n\n- `rustc` can't be executed, from `RUSTC` or in the `PATH`.\n- The version output from `rustc` can't be parsed.\n- `OUT_DIR` is not set in the environment, or is not a writable directory.\n","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"Result","id":"2:42845:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}},{"type":{"resolved_path":{"name":"Error","id":"0:105:149","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:71:1240":{"id":"0:71:1240","crate_id":0,"name":"no_std","span":{"filename":"src/lib.rs","begin":[210,4],"end":[212,5]},"visibility":"public","docs":"Returns whether `AutoCfg` is using `#![no_std]` in its probes.\n\nThis is automatically detected during construction -- if an empty probe\nfails while one with `#![no_std]` succeeds, then the attribute will be\nused for all further probes. This is usually only necessary when the\n`TARGET` lacks `std` altogether. If neither succeeds, `no_std` is not\nset, but that `AutoCfg` will probably only work for version checks.\n\nThis attribute changes the implicit [prelude] from `std` to `core`,\nwhich may affect the paths you need to use in other probes. It also\nrestricts some types that otherwise get additional methods in `std`,\nlike floating-point trigonometry and slice sorting.\n\nSee also [`set_no_std`](#method.set_no_std).\n\n[prelude]: https://doc.rust-lang.org/reference/names/preludes.html#the-no_std-attribute","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13773:32937":{"id":"2:13773:32937","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"2:13774:32941"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitWhitespace","id":"2:44846:3478","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13867:28377":{"id":"2:13867:28377","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferr√∂s\".eq_ignore_ascii_case(\"FERR√∂S\"));\nassert!(!\"Ferr√∂s\".eq_ignore_ascii_case(\"FERR√ñS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13744:2610":{"id":"2:13744:2610","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13854:33962":{"id":"2:13854:33962","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12492:490","self::pattern":"2:13437:3474"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13443:3468","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13443:3468","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13458:3469","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:80:2459":{"id":"0:80:2459","crate_id":0,"name":"probe_raw","span":{"filename":"src/lib.rs","begin":[321,4],"end":[323,5]},"visibility":"public","docs":"Tests whether the given code can be compiled as a Rust library.\n\nThis will only return `Ok` if the compiler ran and exited successfully,\nper `ExitStatus::success()`.\nThe code is passed to the compiler exactly as-is, notably not even\nadding the [`#![no_std]`][Self::no_std] attribute like other probes.\n\nRaw probes are useful for testing functionality that's not yet covered\nby the rest of the `AutoCfg` API. For example, the following attribute\n**must** be used at the crate level, so it wouldn't work within the code\ntemplates used by other `probe_*` methods.\n\n```\n# extern crate autocfg;\n# // Normally, cargo will set `OUT_DIR` for build scripts.\n# std::env::set_var(\"OUT_DIR\", \"target\");\nlet ac = autocfg::new();\nassert!(ac.probe_raw(\"#![no_builtins]\").is_ok());\n```\n\nRust nightly features could be tested as well -- ideally including a\ncode sample to ensure the unstable feature still works as expected.\nFor example, `slice::group_by` was renamed to `chunk_by` when it was\nstabilized, even though the feature name was unchanged, so testing the\n`#![feature(..)]` alone wouldn't reveal that. For larger snippets,\n[`include_str!`] may be useful to load them from separate files.\n\n```\n# extern crate autocfg;\n# // Normally, cargo will set `OUT_DIR` for build scripts.\n# std::env::set_var(\"OUT_DIR\", \"target\");\nlet ac = autocfg::new();\nlet code = r#\"\n    #![feature(slice_group_by)]\n    pub fn probe(slice: &[i32]) -> impl Iterator<Item = &[i32]> {\n        slice.group_by(|a, b| a == b)\n    }\n\"#;\nif ac.probe_raw(code).is_ok() {\n    autocfg::emit(\"has_slice_group_by\");\n}\n```","links":{"Self::no_std":"0:71:1240","`include_str!`":"2:34:963"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["code",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:42845:237","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}},{"type":{"resolved_path":{"name":"Error","id":"0:105:149","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:5:778-0:155:2415":{"id":"b:5:778-0:155:2415","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2805:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:774:263","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"AutoCfg","id":"0:155:2415","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:780:3435","5:781:3436","5:782:3437"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13774:32941":{"id":"2:13774:32941","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"2:13773:32937"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitAsciiWhitespace","id":"2:44855:3476","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:780:3435":{"id":"5:780:3435","crate_id":5,"name":"Owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"0:28:461":{"id":"0:28:461","crate_id":0,"name":"cause","span":{"filename":"src/error.rs","begin":[19,4],"end":[26,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:42580:205","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"dyn_trait":{"traits":[{"trait":{"name":"error::Error","id":"2:3153:149","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]}],"lifetime":null}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13766:28467":{"id":"2:13766:28467","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_mut_checked`](str::split_at_mut_checked).\n\n# Examples\n\n```\nlet mut s = \"Per Martin-L√∂f\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-L√∂f\", last);\n}\nassert_eq!(\"PER Martin-L√∂f\", s);\n```","links":{"str::split_at":"2:13765:28466","str::split_at_mut_checked":"2:13768:28471"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2788-0:105:149":{"id":"b:2:2788-0:105:149","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32819:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2782:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:105:149","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2790:26255"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13875:9115":{"id":"2:13875:9115","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"‚ù§\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"‚ù§\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"‚ù§\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"2:5060:9115"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDefault","id":"2:44880:3488","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3090-0:105:149":{"id":"b:2:3090-0:105:149","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:3067:156","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:3064:174","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:105:149","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3093:2452"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:3105-0:155:2415":{"id":"b:2:3105-0:155:2415","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:3064:174","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:3074:270","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"AutoCfg","id":"0:155:2415","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3108:149","2:3109:1850"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:26":{"id":"0:26","crate_id":0,"name":null,"span":{"filename":"src/error.rs","begin":[14,0],"end":[27,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["cause","source","type_id","description","provide"],"trait":{"name":"Error","id":"2:3153:149","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:105:149","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:27:2740","0:28:461"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:2819:26260":{"id":"2:2819:26260","crate_id":2,"name":"clone_to_uninit","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["dst",{"raw_pointer":{"mutable":true,"type":{"generic":"T"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3090-0:155:2415":{"id":"b:2:3090-0:155:2415","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:3067:156","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:3064:174","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"AutoCfg","id":"0:155:2415","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3093:2452"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:165:827":{"id":"0:165:827","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[86,16],"end":[86,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:10627:155","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:10608:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:0:2619":{"id":"0:0:2619","crate_id":0,"name":"autocfg","span":{"filename":"src/lib.rs","begin":[1,0],"end":[535,1]},"visibility":"public","docs":"A Rust library for build scripts to automatically configure code based on\ncompiler support.  Code snippets are dynamically tested to see if the `rustc`\nwill accept them, rather than hard-coding specific version support.\n\n\n## Usage\n\nAdd this to your `Cargo.toml`:\n\n```toml\n[build-dependencies]\nautocfg = \"1\"\n```\n\nThen use it in your `build.rs` script to detect compiler features.  For\nexample, to test for 128-bit integer support, it might look like:\n\n```rust\nextern crate autocfg;\n\nfn main() {\n#   // Normally, cargo will set `OUT_DIR` for build scripts.\n#   std::env::set_var(\"OUT_DIR\", \"target\");\n    let ac = autocfg::new();\n    ac.emit_has_type(\"i128\");\n\n    // (optional) We don't need to rerun for anything external.\n    autocfg::rerun_path(\"build.rs\");\n}\n```\n\nIf the type test succeeds, this will write a `cargo:rustc-cfg=has_i128` line\nfor Cargo, which translates to Rust arguments `--cfg has_i128`.  Then in the\nrest of your Rust code, you can add `#[cfg(has_i128)]` conditions on code that\nshould only be used when the compiler supports it.\n\n## Caution\n\nMany of the probing methods of `AutoCfg` document the particular template they\nuse, **subject to change**. The inputs are not validated to make sure they are\nsemantically correct for their expected use, so it's _possible_ to escape and\ninject something unintended. However, such abuse is unsupported and will not\nbe considered when making changes to the templates.","links":{},"attrs":["#![deny(missing_debug_implementations)]","#![deny(missing_docs)]","#![allow(unknown_lints)]","#![allow(bare_trait_objects)]","#![allow(ellipsis_inclusive_range_patterns)]"],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:36-0:105:149","0:155:2415","0:63:708","0:64:2428","0:65:2434","0:66:1208"],"is_stripped":false}}},"2:3096:857":{"id":"2:3096:857","crate_id":2,"name":"from","span":null,"visibility":"default","docs":"Returns the argument unchanged.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["t",{"generic":"T"}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13865:28374":{"id":"2:13865:28374","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Gr√º√üe, J√ºrgen ‚ù§\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2785-0:155:2415":{"id":"b:2:2785-0:155:2415","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32819:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2779:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"AutoCfg","id":"0:155:2415","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2787:2888"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:67":{"id":"0:67","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[135,0],"end":[463,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"AutoCfg","id":"0:155:2415","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:68:1208","0:69:2445","0:71:1240","0:72:2480","0:73:2483","0:74:2488","0:80:2459","0:81:2552","0:82:2555","0:83:2560","0:84:2565","0:85:2567","0:86:2570","0:87:2574","0:88:2576","0:89:2579","0:90:2583","0:91:2585","0:92:2588","0:93:2591","0:94:2594","0:95:2597"],"negative":false,"synthetic":false,"blanket_impl":null}}},"5:5955:1825":{"id":"5:5955:1825","crate_id":5,"name":"to_string","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7759:256","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13772:7165":{"id":"2:13772:7165","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"2:44558:2992","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13828:33954":{"id":"2:13828:33954","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"2:13437:3474","`DoubleEndedIterator`":"2:8393:133","prim@char":"1:12492:490","str::rmatch_indices":"2:13831:33955"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"MatchIndices","id":"2:44722:3491","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13443:3468","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13775:2779":{"id":"2:13775:2779","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nNote that any carriage return (`\\r`) not immediately followed by a\nline feed (`\\n`) does not split a line. These carriage returns are\nthereby included in the produced lines.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\r\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\n// Trailing carriage return is included in the last line\nassert_eq!(Some(\"baz\\r\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line does not require any ending:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Lines","id":"2:44826:2989","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:65:2434":{"id":"0:65:2434","crate_id":0,"name":"rerun_env","span":{"filename":"src/lib.rs","begin":[122,0],"end":[124,1]},"visibility":"public","docs":"Writes a line telling Cargo to rerun the build script if the environment\nvariable `var` changes.\n\nThis looks like: `cargo:rerun-if-env-changed=VAR`\n\nThis requires at least cargo 0.21.0, corresponding to rustc 1.20.0.  Earlier\nversions of cargo will simply ignore the directive.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["var",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13754:28444":{"id":"2:13754:28444","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:12511:1896"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:42674:9241-0:155:2415":{"id":"a:2:42674:9241-0:155:2415","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:42674:9241","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"AutoCfg","id":"0:155:2415","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:13742":{"id":"2:13742","crate_id":2,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["2:13743:1024","2:13744:2610","2:13745:33944","2:13746:33945","2:13748:33946","2:13751:28336","2:13752:33947","2:13753:350","2:13754:28444","2:13755:28440","2:13757:28441","2:13759:28442","2:13761:28443","2:13763:33948","2:13764:33949","2:13765:28466","2:13766:28467","2:13767:28470","2:13768:28471","2:13770:2598","2:13771:7592","2:13772:7165","2:13773:32937","2:13774:32941","2:13775:2779","2:13776:33950","2:13777:32942","2:13778:2608","2:13781:2781","2:13784:28482","2:13787:2780","2:13791:3377","2:13795:2611","2:13798:28473","2:13801:28475","2:13804:33951","2:13807:33952","2:13810:2784","2:13813:28478","2:13816:28480","2:13819:28481","2:13822:2902","2:13825:33953","2:13828:33954","2:13831:33955","2:13834:2617","2:13836:33956","2:13838:33957","2:13840:33958","2:13841:33959","2:13842:33960","2:13845:33961","2:13848:27799","2:13851:28483","2:13854:33962","2:13857:33963","2:13860:33964","2:13863:2789","2:13865:28374","2:13866:28375","2:13867:28377","2:13868:28378","2:13869:28379","2:13870:28381","2:13871:28382","2:13872:28383","2:13873:33965","2:13875:9115","2:13876:33966"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13787:2780":{"id":"2:13787:2780","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('√©'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"2:42582:202","prim@char":"1:12492:490","self::pattern":"2:13437:3474"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42580:205","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13443:3468","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:29":{"id":"0:29","crate_id":0,"name":null,"span":{"filename":"src/error.rs","begin":[29,0],"end":[42,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Display","id":"2:10665:132","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:105:149","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:30:827"],"negative":false,"synthetic":false,"blanket_impl":null}}},"5:5706:34661":{"id":"5:5706:34661","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7759:256"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["count",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7759:256","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13443:3468","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13763:33948":{"id":"2:13763:33948","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\n\nunsafe {\n    assert_eq!(\"L√∂we ËÄÅËôé L√©opard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"1:12498:1765","str::slice_mut_unchecked":"2:13764:33949","crate::ops::Index":"2:40131:9153"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"5:5709:34662":{"id":"5:5709:34662","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Œ£\";\n\nassert_eq!(\"œÉ\", sigma.to_lowercase());\n\n// but at the end of a word, it's œÇ, not œÉ:\nlet odysseus = \"·ΩàŒîŒ•Œ£Œ£ŒïŒéŒ£\";\n\nassert_eq!(\"·ΩÄŒ¥œÖœÉœÉŒµœçœÇ\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"ÂÜúÂéÜÊñ∞Âπ¥\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7759:256"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7759:256","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:93:2591":{"id":"0:93:2591","crate_id":0,"name":"emit_expression_cfg","span":{"filename":"src/lib.rs","begin":[440,4],"end":[444,5]},"visibility":"public","docs":"Emits the given `cfg` value if `probe_expression` returns true.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["expr",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["cfg",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:162":{"id":"0:162","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[86,9],"end":[86,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2805:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"AutoCfg","id":"0:155:2415","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:163:494"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13761:28443":{"id":"2:13761:28443","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"üóª‚ààüåè\");\nunsafe {\n    assert_eq!(\"üóª\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"‚àà\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"üåè\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:11566:251","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:11566:251","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:105:149":{"id":"0:105:149","crate_id":0,"name":"Error","span":{"filename":"src/error.rs","begin":[10,0],"end":[12,1]},"visibility":"public","docs":"A common error type for the `autocfg` crate.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["a:2:3316:260-0:105:149","a:2:3351:3543-0:105:149","a:2:32818:248-0:105:149","a:2:32876:3125-0:105:149","a:2:42674:9241-0:105:149","a:2:42673:9122-0:105:149","b:2:3094-0:105:149","b:2:3105-0:105:149","b:2:3100-0:105:149","b:2:3959-0:105:149","b:2:2788-0:105:149","b:2:3090-0:105:149","b:2:2785-0:105:149","b:5:5953-0:105:149","0:29","0:107","0:26"]}}},"0:66:1208":{"id":"0:66:1208","crate_id":0,"name":"new","span":{"filename":"src/lib.rs","begin":[131,0],"end":[133,1]},"visibility":"public","docs":"Creates a new `AutoCfg` instance.\n\n# Panics\n\nPanics if `AutoCfg::new()` returns an error.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"AutoCfg","id":"0:155:2415","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13851:28483":{"id":"2:13851:28483","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12492:490","self::pattern":"2:13437:3474"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["suffix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42580:205","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13443:3468","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13443:3468","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13458:3469","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:74:2488":{"id":"0:74:2488","crate_id":0,"name":"emit_rustc_version","span":{"filename":"src/lib.rs","begin":[229,4],"end":[233,5]},"visibility":"public","docs":"Sets a `cfg` value of the form `rustc_major_minor`, like `rustc_1_29`,\nif the current `rustc` is at least that version.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["major",{"primitive":"usize"}],["minor",{"primitive":"usize"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:108:827":{"id":"0:108:827","crate_id":0,"name":"fmt","span":{"filename":"src/error.rs","begin":[9,9],"end":[9,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:10627:155","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:10608:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:3351:3543-0:155:2415":{"id":"a:2:3351:3543-0:155:2415","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"2:3351:3543","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"AutoCfg","id":"0:155:2415","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:86:2570":{"id":"0:86:2570","crate_id":0,"name":"probe_trait","span":{"filename":"src/lib.rs","begin":[379,4],"end":[381,5]},"visibility":"public","docs":"Tests whether the given trait can be used.\n\nThe test code is subject to change, but currently looks like:\n\n```ignore\npub trait Probe: TRAIT + Sized {}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["name",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13755:28440":{"id":"2:13755:28440","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"üóª‚ààüåè\");\n\nassert_eq!(Some(\"üóª\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:42582:202"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:42580:205","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:11566:251","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:11566:251","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:69:2445":{"id":"0:69:2445","crate_id":0,"name":"with_dir","span":{"filename":"src/lib.rs","begin":[159,4],"end":[192,5]},"visibility":"public","docs":"Creates a new `AutoCfg` instance with the specified output directory.\n\n# Common errors\n\n- `rustc` can't be executed, from `RUSTC` or in the `PATH`.\n- The version output from `rustc` can't be parsed.\n- `dir` is not a writable directory.\n","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["dir",{"generic":"T"}]],"output":{"resolved_path":{"name":"Result","id":"2:42845:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}},{"type":{"resolved_path":{"name":"Error","id":"0:105:149","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:3064:174","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"PathBuf","id":"1:5367:215","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13804:33951":{"id":"2:13804:33951","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"2:13437:3474","str::split":"2:13795:2611","prim@char":"1:12492:490","`DoubleEndedIterator`":"2:8393:133","str::rsplit_terminator":"2:13807:33952"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitTerminator","id":"2:44622:3499","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13443:3468","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13746:33945":{"id":"2:13746:33945","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji üßë‚Äçüî¨ (scientist) could be split so that the string only\nincludes üßë (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"‚ù§Ô∏èüß°üíõüíöüíôüíú\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"‚ù§Ô∏èüß°\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:781:3436":{"id":"5:781:3436","crate_id":5,"name":"to_owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13757:28441":{"id":"2:13757:28441","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:42582:202"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:42580:205","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:11566:251","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:11566:251","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13873:33965":{"id":"2:13873:33965","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"‚ù§\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"‚ù§\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"‚ù§\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"‚ù§\\n!\".escape_debug().to_string(), \"‚ù§\\\\n!\");\n```","links":{"`char::escape_debug`":"2:5059:33965"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDebug","id":"2:44871:3487","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:3104:1852":{"id":"2:3104:1852","crate_id":2,"name":"try_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Result","id":"2:42845:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"2:3074:270","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2790:26255":{"id":"2:2790:26255","crate_id":2,"name":"borrow_mut","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:36-0:105:149":{"id":"0:36-0:105:149","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[74,0],"end":[74,21]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"error::Error","name":"Error","id":"0:105:149","glob":false}}},"0:81:2552":{"id":"0:81:2552","crate_id":0,"name":"probe_sysroot_crate","span":{"filename":"src/lib.rs","begin":[332,4],"end":[335,5]},"visibility":"public","docs":"Tests whether the given sysroot crate can be used.\n\nThe test code is subject to change, but currently looks like:\n\n```ignore\nextern crate CRATE as probe;\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["name",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:782:3437":{"id":"5:782:3437","crate_id":5,"name":"clone_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["target",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:163:494":{"id":"0:163:494","crate_id":0,"name":"clone","span":{"filename":"src/lib.rs","begin":[86,9],"end":[86,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"AutoCfg","id":"0:155:2415","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:164":{"id":"0:164","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[86,16],"end":[86,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10660:122","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"AutoCfg","id":"0:155:2415","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:165:827"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13781:2781":{"id":"2:13781:2781","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, in which case this function will return true if\nthe `&str` is a prefix of this string slice.\n\nThe [pattern] can also be a [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\nThese will only be checked against the first character of this string slice.\nLook at the second example below regarding behavior for slices of [`char`]s.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```\n\n```\nlet bananas = \"bananas\";\n\n// Note that both of these assert successfully.\nassert!(bananas.starts_with(&['b', 'a', 'n', 'a']));\nassert!(bananas.starts_with(&['a', 'b', 'c', 'd']));\n```","links":{"prim@char":"1:12492:490","self::pattern":"2:13437:3474"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13443:3468","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:73:2483":{"id":"0:73:2483","crate_id":0,"name":"probe_rustc_version","span":{"filename":"src/lib.rs","begin":[223,4],"end":[225,5]},"visibility":"public","docs":"Tests whether the current `rustc` reports a version greater than\nor equal to \"`major`.`minor`\".","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["major",{"primitive":"usize"}],["minor",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3094-0:105:149":{"id":"b:2:3094-0:105:149","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:3067:156","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:105:149","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3096:857"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:30:827":{"id":"0:30:827","crate_id":0,"name":"fmt","span":{"filename":"src/error.rs","begin":[30,4],"end":[41,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"2:10627:155","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"Result","id":"2:42845:237","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}},{"type":{"resolved_path":{"name":"fmt::Error","id":"2:43738:149","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13822:2902":{"id":"2:13822:2902","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::rmatches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"2:13437:3474","`DoubleEndedIterator`":"2:8393:133","prim@char":"1:12492:490","str::rmatches":"2:13825:33953"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Matches","id":"2:44776:3493","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13443:3468","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13831:33955":{"id":"2:13831:33955","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"2:13437:3474","`DoubleEndedIterator`":"2:8393:133","prim@char":"1:12492:490","str::match_indices":"2:13828:33954"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatchIndices","id":"2:44740:3492","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13443:3468","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13443:3468","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13458:3469","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13860:33964":{"id":"2:13860:33964","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12492:490","self::pattern":"2:13437:3474"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13443:3468","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13443:3468","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13458:3469","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:92:2588":{"id":"0:92:2588","crate_id":0,"name":"probe_expression","span":{"filename":"src/lib.rs","begin":[435,4],"end":[437,5]},"visibility":"public","docs":"Tests whether the given expression can be used.\n\nThe test code is subject to change, but currently looks like:\n\n```ignore\npub fn probe() { let _ = EXPR; }\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["expr",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13748:33946":{"id":"2:13748:33946","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nIf `index` is greater than the length of the string, this returns the length of the string.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"‚ù§Ô∏èüß°üíõüíöüíôüíú\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"‚ù§Ô∏èüß°üíõ\");\n```","links":{"str::floor_char_boundary":"2:13746:33945"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13876:33966":{"id":"2:13876:33966","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"‚ù§\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"‚ù§\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"‚ù§\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"2:5057:33966"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeUnicode","id":"2:44889:3489","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3100-0:105:149":{"id":"b:2:3100-0:105:149","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:3074:270","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:3070:271","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:105:149","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3103:149","2:3104:1852"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13838:33957":{"id":"2:13838:33957","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  ◊¢◊ë◊®◊ô◊™  \";\nassert!(Some('◊™') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13834:2617":{"id":"2:13834:2617","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:94:2594":{"id":"0:94:2594","crate_id":0,"name":"probe_constant","span":{"filename":"src/lib.rs","begin":[453,4],"end":[455,5]},"visibility":"public","docs":"Tests whether the given constant expression can be used.\n\nThe test code is subject to change, but currently looks like:\n\n```ignore\npub const PROBE: () = ((), EXPR).0;\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["expr",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5719:3015":{"id":"5:5719:3015","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7759:256"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7759:256","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:88:2576":{"id":"0:88:2576","crate_id":0,"name":"emit_trait_cfg","span":{"filename":"src/lib.rs","begin":[394,4],"end":[398,5]},"visibility":"public","docs":"Emits the given `cfg` value if `probe_trait` returns true.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["name",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["cfg",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:72:2480":{"id":"0:72:2480","crate_id":0,"name":"set_no_std","span":{"filename":"src/lib.rs","begin":[217,4],"end":[219,5]},"visibility":"public","docs":"Sets whether `AutoCfg` should use `#![no_std]` in its probes.\n\nSee also [`no_std`](#method.no_std).","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["no_std",{"primitive":"bool"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:63:708":{"id":"0:63:708","crate_id":0,"name":"emit","span":{"filename":"src/lib.rs","begin":[101,0],"end":[103,1]},"visibility":"public","docs":"Writes a config flag for rustc on standard out.\n\nThis looks like: `cargo:rustc-cfg=CFG`\n\nCargo will use this in arguments to rustc, like `--cfg CFG`.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["cfg",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13807:33952":{"id":"2:13807:33952","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"2:13437:3474","str::split":"2:13795:2611","prim@char":"1:12492:490","str::split_terminator":"2:13804:33951"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitTerminator","id":"2:44640:3498","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13443:3468","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13443:3468","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13458:3469","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13841:33959":{"id":"2:13841:33959","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"◊¢◊ë◊®◊ô◊™  \";\nassert!(Some('◊™') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5718:34664":{"id":"5:5718:34664","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:297:3131","`String`":"5:7759:256"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:297:3131","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"5:7759:256","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:107":{"id":"0:107","crate_id":0,"name":null,"span":{"filename":"src/error.rs","begin":[9,9],"end":[9,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10660:122","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:105:149","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:108:827"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:27:2740":{"id":"0:27:2740","crate_id":0,"name":"description","span":{"filename":"src/error.rs","begin":[15,4],"end":[17,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:83:2560":{"id":"0:83:2560","crate_id":0,"name":"probe_path","span":{"filename":"src/lib.rs","begin":[351,4],"end":[353,5]},"visibility":"public","docs":"Tests whether the given path can be used.\n\nThe test code is subject to change, but currently looks like:\n\n```ignore\npub use PATH;\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["path",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:3316:260-0:155:2415":{"id":"a:2:3316:260-0:155:2415","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3316:260","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"AutoCfg","id":"0:155:2415","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:13863:2789":{"id":"2:13863:2789","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"2:13398:148","`FromStr`":"2:13397:3043"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:42845:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"FromStr","id":"2:13397:3043","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"2:13397:3043","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5702:34660":{"id":"5:5702:34660","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:297:3131","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"5:297:3131","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:155:2415":{"id":"0:155:2415","crate_id":0,"name":"AutoCfg","span":{"filename":"src/lib.rs","begin":[87,0],"end":[94,1]},"visibility":"public","docs":"Helper to detect compiler features for `cfg` output in build scripts.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["0:67","a:2:3316:260-0:155:2415","a:2:3351:3543-0:155:2415","a:2:32818:248-0:155:2415","a:2:32876:3125-0:155:2415","a:2:42674:9241-0:155:2415","a:2:42673:9122-0:155:2415","b:2:3094-0:155:2415","b:2:3105-0:155:2415","b:2:3100-0:155:2415","b:2:3959-0:155:2415","b:2:2788-0:155:2415","b:2:3090-0:155:2415","b:2:2817-0:155:2415","b:2:2785-0:155:2415","b:5:778-0:155:2415","0:162","0:164"]}}},"2:13870:28381":{"id":"2:13870:28381","crate_id":2,"name":"trim_ascii_start","span":null,"visibility":"public","docs":"Returns a string slice with leading ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\nassert_eq!(\" \\t \\u{3000}hello world\\n\".trim_ascii_start(), \"\\u{3000}hello world\\n\");\nassert_eq!(\"  \".trim_ascii_start(), \"\");\nassert_eq!(\"\".trim_ascii_start(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:1151:38508"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13836:33956":{"id":"2:13836:33956","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  ◊¢◊ë◊®◊ô◊™  \";\nassert!(Some('◊¢') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13791:3377":{"id":"2:13791:3377","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('√©'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"2:42582:202","prim@char":"1:12492:490","self::pattern":"2:13437:3474"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42580:205","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13443:3468","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13443:3468","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13458:3469","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:3961:1865":{"id":"2:3961:1865","crate_id":2,"name":"type_id","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"TypeId","id":"2:40300:7336","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13784:28482":{"id":"2:13784:28482","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"1:12492:490","self::pattern":"2:13437:3474"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13443:3468","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13443:3468","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13458:3469","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13857:33963":{"id":"2:13857:33963","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12492:490","self::pattern":"2:13437:3474"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13443:3468","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:3103:149":{"id":"2:3103:149","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"2:3074:270","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}}},"5:5717:34663":{"id":"5:5717:34663","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"ÂÜúÂéÜÊñ∞Âπ¥\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tsch√º√ü\";\n\nassert_eq!(\"TSCH√úSS\", s.to_uppercase());\n```","links":{"`String`":"5:7759:256"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7759:256","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:42673:9122-0:155:2415":{"id":"a:2:42673:9122-0:155:2415","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:42673:9122","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"AutoCfg","id":"0:155:2415","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:2:3351:3543-0:105:149":{"id":"a:2:3351:3543-0:105:149","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"2:3351:3543","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:105:149","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:13767:28470":{"id":"2:13767:28470","crate_id":2,"name":"split_at_checked","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that‚Äôs not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut_checked`]\nmethod.\n\n[`split_at_mut_checked`]: str::split_at_mut_checked\n\n# Examples\n\n```\nlet s = \"Per Martin-L√∂f\";\n\nlet (first, last) = s.split_at_checked(3).unwrap();\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-L√∂f\", last);\n\nassert_eq!(None, s.split_at_checked(13));  // Inside ‚Äú√∂‚Äù\nassert_eq!(None, s.split_at_checked(16));  // Beyond the string length\n```","links":{"str::split_at_mut_checked":"2:13768:28471"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"2:42580:205","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:89:2579":{"id":"0:89:2579","crate_id":0,"name":"probe_type","span":{"filename":"src/lib.rs","begin":[407,4],"end":[409,5]},"visibility":"public","docs":"Tests whether the given type can be used.\n\nThe test code is subject to change, but currently looks like:\n\n```ignore\npub type Probe = TYPE;\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["name",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13751:28336":{"id":"2:13751:28336","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:12960:2753"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5720:29623":{"id":"5:5720:29623","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Gr√º√üe, J√ºrgen ‚ù§\";\n\nassert_eq!(\"GR√º√üE, J√ºRGEN ‚ù§\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"2:13868:28378"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7759:256","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3094-0:155:2415":{"id":"b:2:3094-0:155:2415","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:3067:156","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"AutoCfg","id":"0:155:2415","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3096:857"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13778:2608":{"id":"2:13778:2608","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"1:12492:490","self::pattern":"2:13437:3474"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13443:3468","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13777:32942":{"id":"2:13777:32942","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\n```\nlet text = \"Za≈º√≥≈Çƒá gƒô≈õlƒÖ ja≈∫≈Ñ\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EncodeUtf16","id":"2:44864:3475","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3959-0:155:2415":{"id":"b:2:3959-0:155:2415","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:32819:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3957:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"AutoCfg","id":"0:155:2415","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3961:1865"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:3093:2452":{"id":"2:3093:2452","crate_id":2,"name":"into","span":null,"visibility":"default","docs":"Calls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of\n<code>[From]&lt;T&gt; for U</code> chooses to do.","links":{"From":"2:3067:156"},"attrs":["#[track_caller]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"U"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13771:7592":{"id":"2:13771:7592","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"yÃÜes\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'yÃÜ')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the previous character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:12492:490"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CharIndices","id":"2:44548:3482","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13813:28478":{"id":"2:13813:28478","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"1:12492:490","str::splitn":"2:13810:2784","self::pattern":"2:13437:3474"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitN","id":"2:44694:3496","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13443:3468","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13443:3468","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13458:3469","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}}},"paths":{"1:8804:3035":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"2:44855:3476":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"2:2419:7174":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"18:481:4279":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"17:15982:5199":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"2:8815:14642":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"16:6460:21960":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"6:4842:6328":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"2:34178:14662":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"2:42520:7835":{"crate_id":2,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"6:5282:6511":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"1:3358:3011":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"6:4984:6403":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"16:7997:5489":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"2:41444:7502":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"6:5395:6554":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"17:13069:4480":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolTable"],"kind":"struct"},"2:40932:7468":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"2:6306:7186":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"16:6729:8102":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"1:994:8151":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"18:521:26228":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"2:45308:7615":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"2:44531:3486":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"5:4544:2967":{"crate_id":5,"path":["alloc","collections","vec_deque","shrink_to","Guard"],"kind":"struct"},"2:44380:7205":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"2:45288:7610":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"2:40131:9153":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"16:6171:5545":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"16:6736:35550":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"10:0:2794":{"crate_id":10,"path":["adler"],"kind":"module"},"16:3439:5498":{"crate_id":16,"path":["gimli","arch","LoongArch"],"kind":"struct"},"16:7904:5795":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"6:1584:6202":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"17:15674:5118":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"17:13490:4616":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"2:32802:3364":{"crate_id":2,"path":["core","error","tags","Ref"],"kind":"struct"},"16:2770:5462":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"17:1338:7971":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"2:47726:7743":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"11:2525:35517":{"crate_id":11,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"2:47034:7676":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"2:3957:71":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"2:2805:114":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"2:34044:9249":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"18:698:4309":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"1:11047:27809":{"crate_id":1,"path":["std","sys","pal","unix","kernel_copy","SpliceMode"],"kind":"enum"},"2:8276:14644":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"17:13944:4695":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"5:3285:3039":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"17:13591:4624":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"1:4238:9185":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"5:3074:35486":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"1:9474:173":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"2:22950:9342":{"crate_id":2,"path":["core","core_simd","simd","num","uint","SimdUint"],"kind":"trait"},"16:7518:5736":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"1:10423:8321":{"crate_id":1,"path":["std","sys","pal","unix","os","EnvStrDebug"],"kind":"struct"},"2:46643:7647":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"11:292:5969":{"crate_id":11,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"2:2157:1393":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"17:666:4427":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"5:5506:33828":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"1:977:8148":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"6:5230:6481":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"2:47146:7696":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"2:41263:7480":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"17:15417:5044":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"2:23612:7251":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU128Inner"],"kind":"struct"},"2:23082:3624":{"crate_id":2,"path":["core","core_simd","simd","ptr","sealed","Sealed"],"kind":"trait"},"1:12464:9121":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"17:10927:7985":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"5:3693:3039":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"2:2680:14681":{"crate_id":2,"path":["core","ptr","with_exposed_provenance"],"kind":"function"},"2:13113:7575":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"1:12512:1878":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"16:2818:5464":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"17:14546:4822":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"1:8730:8307":{"crate_id":1,"path":["std","panic","PanicHookInfo"],"kind":"struct"},"17:13853:4680":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"1:504:27903":{"crate_id":1,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"2:24147:247":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"16:7302:5705":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"1:9753:150":{"crate_id":1,"path":["std","sys","pal","unix","fs","File"],"kind":"struct"},"2:41372:7495":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"1:12086:7897":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"2:47002:7674":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"1:1627:3039":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"1:10296:7531":{"crate_id":1,"path":["std","sys","pal","unix","net","Socket"],"kind":"struct"},"18:113:26218":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"2:23531:3624":{"crate_id":2,"path":["core","num","nonzero","private","Sealed"],"kind":"trait"},"2:41217:3021":{"crate_id":2,"path":["core","io","borrowed_buf","BorrowedCursor"],"kind":"struct"},"17:12672:8040":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"2:4613:8204":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"2:3867:131":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"6:5249:6492":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"17:14219:4748":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"1:11873:7893":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"1:8243:151":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"17:11280:7990":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"17:10515:22032":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"1:8638:8305":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"1:10952:8330":{"crate_id":1,"path":["std","sys","pal","unix","fd","FileDesc"],"kind":"struct"},"1:9319:8312":{"crate_id":1,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"17:13144:8057":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatIterator"],"kind":"struct"},"17:10695:4443":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"16:5415:5529":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"2:47129:7695":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"6:538:6117":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"5:3084:35357":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"6:6617:6836":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"2:41779:7508":{"crate_id":2,"path":["core","iter","sources","from_coroutine","FromCoroutine"],"kind":"struct"},"6:5366:6538":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"1:4500:8271":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"17:10166:22021":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"6:5349:6533":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_resp"],"kind":"struct"},"1:11299:27803":{"crate_id":1,"path":["std","sys","pal","unix","thread","cgroups","Cgroup"],"kind":"enum"},"2:40484:14489":{"crate_id":2,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"1:9400:7862":{"crate_id":1,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"2:43956:3035":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"2:2222:14691":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"1:9492:3626":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"2:2829:3342":{"crate_id":2,"path":["core","clone","InitializingSlice"],"kind":"struct"},"5:7735:2933":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"17:10596:4440":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"2:41281:7483":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"6:523:6108":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"17:14559:4823":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"1:6411:27906":{"crate_id":1,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"11:1042:21024":{"crate_id":11,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"16:3306:5440":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"17:13027:8055":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSectionIterator"],"kind":"struct"},"2:42358:7520":{"crate_id":2,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"5:7504:3382":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"17:15805:5149":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"1:2740:14765":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"16:5170:5521":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"1:9451:245":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"11:686:8146":{"crate_id":11,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"17:13691:4638":{"crate_id":17,"path":["object","archive","AixFileHeader"],"kind":"struct"},"17:16029:5212":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"16:6841:5628":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"17:12107:4493":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"6:5196:6465":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"16:6203:21958":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"17:10096:22018":{"crate_id":17,"path":["object","common","SubArchitecture"],"kind":"enum"},"5:4465:279":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"1:5553:132":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"1:2337:3603":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"2:4528:14388":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"1:5002:8273":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"17:11756:22067":{"crate_id":17,"path":["object","read","coff","import","ImportType"],"kind":"enum"},"6:6659:6854":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"2:44776:3493":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"2:45486:175":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"17:13837:4676":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"1:3452:3008":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"6:6727:6877":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_statistics"],"kind":"struct"},"5:5814:14441":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"17:13384:4609":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"1:12499:1855":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"1:6546:231":{"crate_id":1,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"16:6911:5637":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"2:42633:7540":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"17:12408:22139":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"5:996:3039":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"2:22777:9256":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"18:635:4304":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"16:7013:5648":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"2:45500:238":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"6:1563:6188":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"6:4976:6398":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"17:11456:4459":{"crate_id":17,"path":["object","read","archive","ArchiveOffset"],"kind":"struct"},"6:6422:6736":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"5:5609:1765":{"crate_id":5,"path":["alloc","str"],"kind":"module"},"16:8609:5494":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"1:5660:3051":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"1:1913:3514":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"16:3124:21099":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"16:8220:5810":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"2:10116:85":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"1:9367:7859":{"crate_id":1,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"1:9172:3056":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"2:13509:14417":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"16:8118:221":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"14:7:8141":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"16:2918:5469":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"17:11015:7986":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"2:45478:7623":{"crate_id":2,"path":["core","future","async_drop","Noop"],"kind":"struct"},"17:11629:4466":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"2:47451:7736":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"17:11863:8009":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"6:1551:6180":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"5:3786:33828":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"6:5107:6450":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"6:553:6126":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"1:4367:9204":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"1:8510:2987":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"0:0:2619":{"crate_id":0,"path":["autocfg"],"kind":"module"},"1:8120:3525":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"16:5083:5518":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"2:3037:3624":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"6:1625:6234":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"2:4644:7176":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"1:8675:3644":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"6:5585:6650":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"17:13661:4634":{"crate_id":17,"path":["object","archive","AixHeader"],"kind":"struct"},"5:6536:9348":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"18:491:4280":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"2:14206:8227":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"2:2815:3341":{"crate_id":2,"path":["core","clone","CloneToUninit"],"kind":"trait"},"2:32795:8232":{"crate_id":2,"path":["core","error","tags","MaybeSizedValue"],"kind":"struct"},"6:4875:6352":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"16:5316:5526":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"6:1589:6204":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"2:46497:7632":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"1:1638:8176":{"crate_id":1,"path":["std","collections","hash","set","ExtractIf"],"kind":"struct"},"17:14030:4711":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"2:44676:3497":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"2:22165:33646":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"2:47883:7760":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"2:4493:8203":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"16:6638:8074":{"crate_id":16,"path":["gimli","read","dwarf","DwarfSections"],"kind":"struct"},"11:2533:5988":{"crate_id":11,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"2:45610:5991":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"2:23000:33062":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_addr"],"kind":"function"},"17:13756:4661":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"1:2019:3439":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"2:41147:2930":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"5:7544:7160":{"crate_id":5,"path":["alloc","collections","btree","map","UnorderedKeyError"],"kind":"struct"},"16:4871:5512":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"2:3580:3126":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"2:41159:2992":{"crate_id":2,"path":["core","ffi","c_str","Bytes"],"kind":"struct"},"6:4914:6373":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"1:3316:28158":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"17:14806:4878":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"17:15829:5158":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"17:13005:4584":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"17:582:7969":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"17:13609:4627":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"11:1703:167":{"crate_id":11,"path":["hashbrown","set","HashSet"],"kind":"struct"},"2:46952:7672":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"6:6852:6913":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"1:12093:7897":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"2:3569:14384":{"crate_id":2,"path":["core","ops","deref","DerefPure"],"kind":"trait"},"1:8105:3524":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"2:3058:78":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"5:7554:35227":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"2:23486:3448":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"2:12023:3497":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"6:5441:6582":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"1:12079:30710":{"crate_id":1,"path":["std","panicking","panic_count","MustAbort"],"kind":"enum"},"6:7463:7022":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"17:13265:22034":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"2:906:3449":{"crate_id":2,"path":["core","num","nonzero","ZeroablePrimitive"],"kind":"trait"},"2:39472:14671":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"5:7708:14727":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"2:41793:3088":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"1:11834:7890":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"2:8393:133":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"16:3585:5499":{"crate_id":16,"path":["gimli","arch","MIPS"],"kind":"struct"},"17:15912:5182":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"17:15601:5103":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"5:720:8169":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"5:1587:8161":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"5:3076:7143":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"1:8620:7835":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"2:41301:7485":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"17:14962:4901":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"17:15556:5094":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"6:6441:6738":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"2:47830:7751":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"1:11758:3035":{"crate_id":1,"path":["std","sys","thread_local","native","eager","State"],"kind":"enum"},"19:0:1323":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"15:288:21049":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"2:2909:213":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"5:7185:278":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"2:40992:3489":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"2:44461:8244":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"18:643:4281":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"6:5117:6451":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"16:7935:5796":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"11:1136:8160":{"crate_id":11,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"2:41385:7496":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"16:7165:5677":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"16:4182:5504":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"16:8206:5480":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"1:8292:3007":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"2:46629:7646":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"6:1514:6157":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"17:16799:4692":{"crate_id":17,"path":["object","xcoff","Rel32"],"kind":"struct"},"17:11817:8007":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"16:8093:8136":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"17:13889:4687":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"6:6543:6800":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"14:164:21030":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"1:784:165":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"6:6893:6939":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"6:7580:7087":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"5:2138:3007":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"16:7256:5703":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"2:42320:181":{"crate_id":2,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"17:10802:2992":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"6:491:6085":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"1:2308:2404":{"crate_id":1,"path":["std","fs"],"kind":"module"},"5:923:9137":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"5:5951:264":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"2:23096:9336":{"crate_id":2,"path":["core","core_simd","simd","cmp","eq","SimdPartialEq"],"kind":"trait"},"2:46903:7669":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"14:213:5956":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"2:23379:32868":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"5:7772:7166":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"11:1579:8164":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"1:3313:31495":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"2:43927:7562":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"11:321:5972":{"crate_id":11,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"5:3256:101":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"16:6062:5479":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"16:7946:5487":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"2:45573:8249":{"crate_id":2,"path":["core","task","wake","ContextBuilder"],"kind":"struct"},"16:7880:5583":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"17:12710:8046":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"17:15474:5082":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"11:1866:8162":{"crate_id":11,"path":["hashbrown","set","Drain"],"kind":"struct"},"6:7515:7062":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"2:23689:7258":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroIsizeInner"],"kind":"struct"},"17:14151:4744":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"1:11360:173":{"crate_id":1,"path":["std","sys","pal","unix","time","Instant"],"kind":"struct"},"1:3457:2406":{"crate_id":1,"path":["std","io","stdio","stderr"],"kind":"function"},"18:754:4322":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"17:5130:7980":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolIterator"],"kind":"struct"},"17:11420:7992":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"2:10886:168":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"17:15974:5197":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"16:2722:5460":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"17:2377:22094":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"16:5222:5523":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"10:36:5993":{"crate_id":10,"path":["adler","algo","U32X4"],"kind":"struct"},"6:7984:7094":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"1:10992:7872":{"crate_id":1,"path":["std","sys","pal","unix","fs","FilePermissions"],"kind":"struct"},"18:689:4308":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"17:13305:4605":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"11:2354:3039":{"crate_id":11,"path":["hashbrown","table","Iter"],"kind":"struct"},"1:12505:758":{"crate_id":1,"path":["std","f128"],"kind":"primitive"},"17:12982:22165":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"2:4762:8205":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"6:5165:6455":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"0:65:2434":{"crate_id":0,"path":["autocfg","rerun_env"],"kind":"function"},"2:4163:3382":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"18:538:4289":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"11:1027:8156":{"crate_id":11,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"1:12443:8338":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"17:11565:7997":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"1:1000:8153":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"1:1938:3521":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"16:4265:5506":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"17:15746:5139":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"6:5025:6425":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"2:43966:7567":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"2:6193:7183":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"1:11513:3878":{"crate_id":1,"path":["std","sys","os_str","bytes","Buf"],"kind":"struct"},"1:558:9113":{"crate_id":1,"path":["std","thread","thread_name_string","ThreadNameString"],"kind":"struct"},"16:5058:5517":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"2:11215:33410":{"crate_id":2,"path":["core","slice","sort","unstable","quicksort","GapGuardRaw"],"kind":"struct"},"1:8652:7837":{"crate_id":1,"path":["std","os","unix","net","ucred","UCred"],"kind":"struct"},"2:14360:7212":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"6:1667:6263":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"6:8231:7109":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"1:7342:8551":{"crate_id":1,"path":["std","sys","backtrace","print","DisplayBacktrace"],"kind":"struct"},"2:10921:9166":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"17:15924:5185":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"2:47258:7700":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"2:2872:146":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"1:12498:1765":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"6:6687:6867":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_mmap_offsets"],"kind":"struct"},"17:12523:8036":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"6:8294:7124":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"1:11447:8335":{"crate_id":1,"path":["std","sys","os_str","bytes","Slice"],"kind":"struct"},"17:16763:5421":{"crate_id":17,"path":["object","xcoff","StatAux"],"kind":"struct"},"1:2341:2977":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"5:3680:193":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"1:11055:8306":{"crate_id":1,"path":["std","sys","pal","unix","linux","pidfd","PidFd"],"kind":"struct"},"1:6755:3098":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"2:40943:32599":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"1:12503:763":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"1:11862:8286":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"2:43082:88":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"17:15660:5117":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"2:3153:149":{"crate_id":2,"path":["core","error","Error"],"kind":"trait"},"5:7576:221":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"1:9380:27808":{"crate_id":1,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"1:8556:2992":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"17:13054:4464":{"crate_id":17,"path":["object","read","xcoff","section","SectionTable"],"kind":"struct"},"17:16320:5313":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"9:490:6054":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"17:11984:8013":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"1:12496:349":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"17:14626:4833":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"1:5996:3083":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"2:2298:200":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"16:7041:5481":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"2:46725:7652":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"6:1675:6264":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"16:6850:5629":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"1:4316:27780":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"18:718:4314":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"1:11063:3525":{"crate_id":1,"path":["std","sys","pal","unix","os","JoinPathsError"],"kind":"struct"},"6:532:6114":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"6:1539:6171":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"17:11514:7994":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"6:5271:6503":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"2:8089:3076":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"2:3142:126":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"1:10976:7866":{"crate_id":1,"path":["std","sys","pal","unix","fs","StatxExtraFields"],"kind":"struct"},"1:8018:3624":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"2:41116:107":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"1:8646:8302":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"2:40163:221":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"17:16180:5269":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"1:12514:1890":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"17:15009:4915":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"16:2682:5458":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"2:43425:2960":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"5:6555:9349":{"crate_id":5,"path":["alloc","task","LocalWake"],"kind":"trait"},"1:7809:8552":{"crate_id":1,"path":["std","panicking","begin_panic_handler","FormatStringPayload"],"kind":"struct"},"17:13168:8059":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatSectionIterator"],"kind":"struct"},"16:7551:21966":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"16:7459:8107":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"17:12975:4580":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"17:16364:5320":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"17:16473:4647":{"crate_id":17,"path":["object","xcoff","FileHeader32"],"kind":"struct"},"5:7679:2928":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"6:5611:6667":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifc_ifcu"],"kind":"union"},"9:435:20943":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"2:42695:14741":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"16:6967:5476":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"2:4841:3364":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"6:5494:6611":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_128"],"kind":"struct"},"2:45599:7627":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"2:42664:8235":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"6:7524:7065":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"1:1127:8160":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"6:8225:7108":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"16:5196:5522":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"1:1660:5982":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"2:8809:3553":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"2:2120:693":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"2:23645:7254":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI16Inner"],"kind":"struct"},"1:2502:3610":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"5:297:3131":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"2:32876:3125":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"2:8314:157":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"1:8209:3622":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"6:5265:6500":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"1:3692:2982":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"17:10728:4444":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"2:0:582":{"crate_id":2,"path":["core"],"kind":"module"},"2:12960:2753":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"1:4832:6991":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"function"},"1:12067:7896":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"17:15837:5159":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"2:47819:7750":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"2:42804:225":{"crate_id":2,"path":["core","range","RangeInclusive"],"kind":"struct"},"2:45175:3500":{"crate_id":2,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"6:5319:6527":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"2:22868:9340":{"crate_id":2,"path":["core","core_simd","simd","num","float","SimdFloat"],"kind":"trait"},"1:8276:8294":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"6:5462:6597":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"2:34803:14666":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"2:40981:7473":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"16:7916:8128":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"1:4574:8272":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"16:7575:7859":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"6:6360:6693":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"1:8099:9120":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"2:44418:8243":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"6:6802:6902":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"17:15539:5092":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"2:22129:33644":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_elements_left","Rotate"],"kind":"struct"},"7:0:1948":{"crate_id":7,"path":["unwind"],"kind":"module"},"11:1892:5981":{"crate_id":11,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"17:11431:22046":{"crate_id":17,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"6:6578:6822":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"9:470:20942":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"1:8263:7791":{"crate_id":1,"path":["std","hash","random","RandomState"],"kind":"struct"},"1:8671:8306":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"2:8029:3017":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"2:10302:33496":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"16:7334:5709":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"2:41310:7487":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"17:12951:4578":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"16:901:7966":{"crate_id":16,"path":["gimli","read","endian_slice","DebugByte"],"kind":"struct"},"2:43231:2410":{"crate_id":2,"path":["core","sync","atomic","ATOMIC_USIZE_INIT"],"kind":"constant"},"5:1597:8146":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"2:4405:2967":{"crate_id":2,"path":["core","array","Guard"],"kind":"struct"},"1:4176:9179":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"6:5477:6606":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"2:45304:7614":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"17:13969:4698":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"17:16138:5256":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"1:2251:132":{"crate_id":1,"path":["std","ffi","os_str","Display"],"kind":"struct"},"1:12011:8269":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"5:7584:7161":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"6:4997:6409":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"2:41434:7501":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"2:10307:33447":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"4:0:2791":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"2:43738:149":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"1:591:9104":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"2:40185:223":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"17:14459:4808":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"2:3070:271":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"17:3719:7978":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"2:22244:3624":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"1:9760:3622":{"crate_id":1,"path":["std","sys","pal","unix","fs","ReadDir"],"kind":"struct"},"17:15572:5095":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"1:6836:3093":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"2:11871:8214":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"6:1521:6160":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"16:7728:7540":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"1:8214:3619":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"2:22912:9341":{"crate_id":2,"path":["core","core_simd","simd","num","int","SimdInt"],"kind":"trait"},"16:3046:21098":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"2:12930:14750":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"5:1206:33792":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"1:3319:28163":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"6:4921:6377":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"2:23499:2749":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"6:5658:6686":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"17:10976:35555":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"2:6806:7187":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"6:5529:6624":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"5:3080:35358":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"11:102:5967":{"crate_id":11,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"1:958:8176":{"crate_id":1,"path":["std","collections","hash","map","ExtractIf"],"kind":"struct"},"2:26547:281":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"6:5007:6416":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"2:47279:7701":{"crate_id":2,"path":["core","core_arch","simd","m8x32"],"kind":"struct"},"2:40243:227":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"2:3815:32974":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"2:44880:3488":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"2:47241:7699":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"6:6472:6759":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"2:33560:5749":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"17:14506:4814":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"1:5814:3053":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"2:3830:115":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"16:2504:5450":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"1:9456:246":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"2:10665:132":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"2:8853:33495":{"crate_id":2,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"17:14611:4830":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"17:15620:5104":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"2:47528:7737":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"16:5377:5528":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"2:2666:694":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"6:1489:6147":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"5:7512:7159":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"2:42616:3552":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"1:11307:7617":{"crate_id":1,"path":["std","sys","pal","unix","time","Nanoseconds"],"kind":"struct"},"2:1922:14599":{"crate_id":2,"path":["core","intrinsics","AggregateRawPtr"],"kind":"trait"},"2:42374:9173":{"crate_id":2,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"1:10792:3010":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stdin"],"kind":"struct"},"6:4881:6354":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"2:22264:7215":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"2:22246:9254":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"2:42599:184":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"2:10660:122":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"6:7962:7093":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"17:11830:4464":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"16:6939:5639":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"2:41395:7497":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"17:1219:7970":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"17:12961:22164":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"1:12513:1884":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"5:5555:3473":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"2:45300:7613":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"1:9510:7863":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"1:4354:9203":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"6:5069:6448":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"16:6335:5569":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"17:16727:5414":{"crate_id":17,"path":["object","xcoff","ExpAux"],"kind":"struct"},"2:23129:9335":{"crate_id":2,"path":["core","core_simd","simd","cmp","ord","SimdOrd"],"kind":"trait"},"17:12203:4502":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsection"],"kind":"struct"},"2:11789:2993":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"11:2519:5986":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"5:6502:14989":{"crate_id":5,"path":["alloc","sync","UniqueArcUninit"],"kind":"struct"},"1:695:8255":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"2:7741:14486":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"2:46935:7671":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"11:2099:5739":{"crate_id":11,"path":["hashbrown","set","Entry"],"kind":"enum"},"1:11325:3626":{"crate_id":1,"path":["std","sys","pal","unix","time","SystemTime"],"kind":"struct"},"1:10981:3619":{"crate_id":1,"path":["std","sys","pal","unix","fs","OpenOptions"],"kind":"struct"},"2:5318:33583":{"crate_id":2,"path":["core","ffi","va_list","sealed_trait","VaArgSafe"],"kind":"trait"},"2:3419:14390":{"crate_id":2,"path":["core","ops","async_function","AsyncFnMut"],"kind":"trait"},"11:481:165":{"crate_id":11,"path":["hashbrown","map","HashMap"],"kind":"struct"},"16:8063:21968":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"1:9354:8317":{"crate_id":1,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"1:904:3552":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"6:5617:6670":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifconf"],"kind":"struct"},"1:12497:1731":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"5:7568:3382":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"1:10838:4517":{"crate_id":1,"path":["std","sys","pal","unix","thread","Thread"],"kind":"struct"},"17:16738:5415":{"crate_id":17,"path":["object","xcoff","BlockAux32"],"kind":"struct"},"6:5088:6449":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"16:8543:5866":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"1:3921:8268":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"2:23401:7230":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"17:12055:4488":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"2:14417:163":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"17:12065:2412":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"2:23262:7218":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"16:7492:5729":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"17:14901:4890":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"1:4075:2737":{"crate_id":1,"path":["std","num"],"kind":"module"},"16:8011:5490":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"2:43193:96":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"17:12292:8029":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"17:13732:4647":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"17:12549:4546":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"11:1118:8159":{"crate_id":11,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"17:12334:8033":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"6:4937:6381":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"5:4149:33828":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"2:41272:7482":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"18:507:4281":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"2:4481:8202":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"1:2560:2405":{"crate_id":1,"path":["std","io"],"kind":"module"},"2:2231:7170":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"11:832:8151":{"crate_id":11,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"2:44518:2751":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"2:34111:9251":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"17:10486:22031":{"crate_id":17,"path":["object","common","RelocationFlags"],"kind":"enum"},"17:13040:8056":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSection"],"kind":"struct"},"1:935:5978":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"1:11039:27801":{"crate_id":1,"path":["std","sys","pal","unix","kernel_copy","FdHandle"],"kind":"enum"},"17:15530:5088":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"6:6523:6784":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"1:9782:130":{"crate_id":1,"path":["std","sys","pal","unix","fs","DirBuilder"],"kind":"struct"},"16:4150:5503":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"2:41291:145":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"2:13668:122":{"crate_id":2,"path":["core","str","lossy","Debug"],"kind":"struct"},"6:5420:6567":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"17:15652:5116":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"1:1879:3507":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"6:5387:6549":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"17:15770:5143":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"16:6820:21961":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCacheStrategy"],"kind":"enum"},"2:12037:3496":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"17:11850:8008":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"1:3575:2967":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"17:12043:8021":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"16:4118:5502":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"17:11538:4464":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"1:8268:7792":{"crate_id":1,"path":["std","hash","random","DefaultHasher"],"kind":"struct"},"5:1479:100":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"17:13360:4608":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"6:5241:6488":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"2:41241:8234":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"2:43045:94":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"2:44889:3489":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"17:11690:8001":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"2:3321:3368":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"5:6137:3081":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"17:11877:4480":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"16:2448:5441":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"16:5111:5519":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"17:11025:35553":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"2:44640:3498":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"2:42893:3552":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"1:8739:9237":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"16:5707:21956":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"6:5575:6645":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"2:42901:3382":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"2:41103:7478":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"17:15753:5140":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"2:7806:33588":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"2:10609:2407":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"16:4692:5508":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"16:7156:5676":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"2:44172:7570":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"2:47324:7702":{"crate_id":2,"path":["core","core_arch","simd","m16x16"],"kind":"struct"},"2:42752:7545":{"crate_id":2,"path":["core","range","iter","IterRangeInclusive"],"kind":"struct"},"5:5125:2967":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"2:44481:8245":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"1:12518:1456":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"2:44864:3475":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"17:16645:5392":{"crate_id":17,"path":["object","xcoff","FileAux32"],"kind":"struct"},"17:12786:4553":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"16:2948:5470":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"2:46981:7673":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"5:1569:5977":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"6:4869:6351":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"1:9326:27807":{"crate_id":1,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"6:7553:7081":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"2:46512:7633":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"2:3311:120":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"17:11997:8014":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"2:47921:7762":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"1:8697:7838":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"2:42608:3039":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"1:4154:9177":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"6:6500:6771":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"5:1777:33828":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"1:922:5977":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"1:9259:9244":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"1:914:3382":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"2:47220:7698":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"6:1500:6152":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"2:2903:206":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"17:11804:8006":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"2:43935:7563":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"1:9209:3382":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"17:11970:8012":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"2:42402:7527":{"crate_id":2,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"2:41569:2991":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"17:13470:4558":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"17:15898:5175":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"1:679:3440":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"6:6792:6900":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"2:46576:7639":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"1:8539:2990":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"2:23124:9337":{"crate_id":2,"path":["core","core_simd","simd","cmp","ord","SimdPartialOrd"],"kind":"trait"},"2:23510:3462":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"17:12081:4490":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"6:6679:6863":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_ring_offset"],"kind":"struct"},"1:533:9098":{"crate_id":1,"path":["std","thread","PanicGuard"],"kind":"struct"},"2:40896:3488":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"2:44794:3494":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"1:11848:7891":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"2:43306:3082":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"2:3592:154":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"11:1542:21025":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"5:7258:33867":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"1:11822:7887":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"2:41404:7498":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"11:1862:3382":{"crate_id":11,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"1:9466:3096":{"crate_id":1,"path":["std","sync","rwlock","MappedRwLockWriteGuard"],"kind":"struct"},"16:8176:5808":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"2:41224:7208":{"crate_id":2,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"6:5488:6609":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls_crypto_info"],"kind":"struct"},"17:12797:22163":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"2:44472:7209":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"2:44572:2993":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"6:4829:6318":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"2:45549:7624":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"17:10331:22026":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"15:0:2798":{"crate_id":15,"path":["addr2line"],"kind":"module"},"1:5110:9225":{"crate_id":1,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"1:10402:3514":{"crate_id":1,"path":["std","sys","pal","unix","os","SplitPaths"],"kind":"struct"},"16:5142:5520":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"17:11123:35558":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"2:5351:452":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"2:45090:7597":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"2:23667:7256":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI64Inner"],"kind":"struct"},"14:159:8141":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"17:14737:4863":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"2:13463:3467":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"1:1631:3382":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"6:5503:6617":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_256"],"kind":"struct"},"11:2206:5983":{"crate_id":11,"path":["hashbrown","table","HashTable"],"kind":"struct"},"16:2878:5467":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"1:4904:9228":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"5:4480:33854":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"17:13569:22037":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"2:32788:5793":{"crate_id":2,"path":["core","error","tags","Value"],"kind":"struct"},"17:14083:4724":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"3:234:237":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"1:646:9114":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"1:6719:3089":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"17:16574:4665":{"crate_id":17,"path":["object","xcoff","SectionHeader32"],"kind":"struct"},"16:8500:5860":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"2:46739:7653":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"1:3918:8267":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"5:6734:33828":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"5:2338:35348":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"11:1558:8163":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"16:6995:5641":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"2:43713:74":{"crate_id":2,"path":["core","fmt","rt","Argument"],"kind":"struct"},"6:4805:6300":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"2:23634:7253":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI8Inner"],"kind":"struct"},"6:5357:6534":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_addfd"],"kind":"struct"},"1:9193:3039":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"16:5253:5524":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"16:2858:5466":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"11:357:35514":{"crate_id":11,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"1:11162:27905":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"17:10548:4438":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"13:110:35528":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"16:3887:4333":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"16:8040:35541":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"17:2436:7976":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"16:6606:217":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"17:14404:4799":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"2:3394:9250":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"6:5450:6588":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"6:6486:6770":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"16:8230:21969":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"2:41835:7514":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"17:10563:4439":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"6:1727:6285":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"6:6390:6718":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"6:8304:7125":{"crate_id":6,"path":["libc","unix","linux_like","linux","canxl_frame"],"kind":"struct"},"2:45284:7609":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"16:7055:5652":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"6:5295:6516":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"1:9148:210":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"1:12507:918":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"6:5186:6458":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"11:1878:5979":{"crate_id":11,"path":["hashbrown","set","Intersection"],"kind":"struct"},"5:7695:2931":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"2:46806:7664":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"2:40263:9129":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"6:5550:6636":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"17:10295:22025":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"1:6003:3084":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"1:3454:3009":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"9:345:20958":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"2:8806:161":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"2:5412:1004":{"crate_id":2,"path":["core","iter"],"kind":"module"},"2:44590:3495":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"18:680:4305":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"17:16752:5419":{"crate_id":17,"path":["object","xcoff","BlockAux64"],"kind":"struct"},"1:12491:1204":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"1:10672:3055":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","CommandArgs"],"kind":"struct"},"5:7495:3802":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"17:14885:4888":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"2:31578:207":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"2:42560:7536":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"16:7413:8106":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"17:13932:4692":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"1:3411:3013":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"1:3607:2976":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"2:44977:7584":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"2:42673:9122":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"17:12647:4551":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"6:5341:6532":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif"],"kind":"struct"},"16:906:7967":{"crate_id":16,"path":["gimli","read","endian_slice","DebugLen"],"kind":"struct"},"16:3832:5501":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"17:11957:8011":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"17:16592:4675":{"crate_id":17,"path":["object","xcoff","SectionHeader64"],"kind":"struct"},"15:306:21050":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"5:4511:2967":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"16:2964:5471":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"11:2394:3382":{"crate_id":11,"path":["hashbrown","table","IntoIter"],"kind":"struct"},"16:7279:5704":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"1:12506:936":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"17:16661:5397":{"crate_id":17,"path":["object","xcoff","FileAux64"],"kind":"struct"},"5:5551:3472":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"6:8326:7131":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"17:13450:4614":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"17:14139:4741":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"17:11474:22047":{"crate_id":17,"path":["object","read","archive","SymbolIteratorInternal"],"kind":"enum"},"17:11677:8000":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"2:14181:216":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"6:7424:7003":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"2:10608:237":{"crate_id":2,"path":["core","fmt","Result"],"kind":"type_alias"},"2:22163:33638":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"2:32877:3547":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"1:7821:8553":{"crate_id":1,"path":["std","panicking","begin_panic_handler","StaticStrPayload"],"kind":"struct"},"6:4970:6395":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"1:6960:244":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"16:4954:5515":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"2:41121:2929":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"2:3309:276":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"2:3589:153":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"1:1862:719":{"crate_id":1,"path":["std","env"],"kind":"module"},"1:11828:3062":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"2:6116:2967":{"crate_id":2,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"11:859:8154":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"6:1597:6209":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"2:47353:7703":{"crate_id":2,"path":["core","core_arch","simd","m32x8"],"kind":"struct"},"2:22121:3354":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"2:32784:8231":{"crate_id":2,"path":["core","error","private","Internal"],"kind":"struct"},"2:23437:32598":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"16:6121:5478":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"17:14844:4883":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"1:9215:7855":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"17:12370:4511":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"1:11001:3623":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileTimes"],"kind":"struct"},"1:7188:9252":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"2:41132:14727":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"2:44992:7590":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"6:7990:7096":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"2:11208:33413":{"crate_id":2,"path":["core","slice","sort","unstable","quicksort","GapGuard"],"kind":"struct"},"17:13797:4665":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"16:8264:5818":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"2:42971:97":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"17:13156:8058":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdat"],"kind":"struct"},"6:465:6072":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"2:9601:3468":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"17:16789:5425":{"crate_id":17,"path":["object","xcoff","DwarfAux64"],"kind":"struct"},"17:14749:4866":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"1:3664:2407":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"2:40051:3556":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"17:12991:4581":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"2:3564:2994":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"6:4890:6359":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"16:894:8064":{"crate_id":16,"path":["gimli","read","endian_slice","DebugBytes"],"kind":"struct"},"2:13437:3474":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"1:6833:3092":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"2:10878:164":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"16:5687:5532":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"6:6645:6849":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"2:43232:91":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"2:7740:14485":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccess"],"kind":"trait"},"6:5217:6477":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"5:1222:35246":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"16:8055:8135":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"2:32819:250":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"1:8371:2739":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"2:13458:3469":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"6:1507:6155":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"2:8334:3130":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"6:6878:6928":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"16:6109:5540":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"2:38838:14669":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"16:5346:5527":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"17:16164:5265":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"18:80:26216":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"6:4990:6406":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"6:1696:6274":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"2:10447:2950":{"crate_id":2,"path":["core","fmt","builders","FormatterFn"],"kind":"struct"},"6:8278:7119":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"1:6237:231":{"crate_id":1,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"17:15946:5190":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"5:3706:3552":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"17:12358:8035":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"5:3837:3007":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"17:11464:4460":{"crate_id":17,"path":["object","read","archive","ArchiveSymbolIterator"],"kind":"struct"},"1:9461:3095":{"crate_id":1,"path":["std","sync","rwlock","MappedRwLockReadGuard"],"kind":"struct"},"1:5875:231":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"17:16302:5307":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"5:7094:14443":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstDataSrcBufDrop"],"kind":"struct"},"2:47079:7693":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"1:4820:9180":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"11:123:5968":{"crate_id":11,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"2:45490:230":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"1:6319:27901":{"crate_id":1,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"2:13227:3477":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"17:11447:7993":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"11:763:5978":{"crate_id":11,"path":["hashbrown","map","Values"],"kind":"struct"},"6:559:6129":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"6:6769:6894":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"17:15495:5087":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"2:43699:32611":{"crate_id":2,"path":["core","fmt","rt","ArgumentType"],"kind":"enum"},"16:3108:5495":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"1:12493:1918":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"17:14113:4736":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"2:14472:9139":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"2:46696:7650":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"17:11787:8003":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"17:13817:4675":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"2:31231:32606":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum"],"kind":"enum"},"16:2838:5465":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"2:2682:14682":{"crate_id":2,"path":["core","ptr","with_exposed_provenance_mut"],"kind":"function"},"6:4929:6379":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"5:7841:8176":{"crate_id":5,"path":["alloc","vec","extract_if","ExtractIf"],"kind":"struct"},"2:43411:2952":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"17:11578:7998":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"2:10675:217":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"16:5740:4438":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"6:6702:6872":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_mmap_offsets_v1"],"kind":"struct"},"17:14054:4713":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"17:14126:4740":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"17:16499:5341":{"crate_id":17,"path":["object","xcoff","AuxHeader32"],"kind":"struct"},"17:12017:8015":{"crate_id":17,"path":["object","read","elf","note","GnuPropertyIterator"],"kind":"struct"},"2:8446:3129":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"1:4830:6989":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"function"},"16:7072:21963":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"2:4758:232":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"2:23209:7217":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"2:47647:7740":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"17:12604:4480":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"17:16249:5291":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"17:15707:5128":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"6:6670:6857":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sockaddr_xdp"],"kind":"struct"},"16:6792:5622":{"crate_id":16,"path":["gimli","read","relocate","RelocateReader"],"kind":"struct"},"2:12568:8220":{"crate_id":2,"path":["core","slice","iter","ChunkByMut"],"kind":"struct"},"11:2469:21020":{"crate_id":11,"path":["hashbrown","Equivalent"],"kind":"trait"},"2:31220:2949":{"crate_id":2,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"6:5381:6546":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"17:13920:4691":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"1:10795:3012":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stdout"],"kind":"struct"},"17:16012:5205":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"5:883:8170":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"2:42910:207":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"1:7914:8287":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"2:34630:14665":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"17:12624:4550":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"5:6813:3382":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"17:13553:4619":{"crate_id":17,"path":["object","read","RelocationMapEntry"],"kind":"struct"},"16:7786:35547":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"9:318:6032":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"17:11705:8002":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"16:8666:5793":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"2:7857:14638":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"17:15585:5100":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"2:47845:7752":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"5:7759:256":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"1:2504:3611":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"11:1858:3039":{"crate_id":11,"path":["hashbrown","set","Iter"],"kind":"struct"},"2:31205:7261":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"1:2486:2453":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"2:40902:7467":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"17:16486:4661":{"crate_id":17,"path":["object","xcoff","FileHeader64"],"kind":"struct"},"2:2867:212":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"2:40135:7330":{"crate_id":2,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"2:47898:7761":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"6:497:6088":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"2:44389:7206":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"16:6835:8105":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"5:4314:2967":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"1:5817:3054":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"17:16077:5249":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"1:437:196":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"16:5755:5533":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"6:4957:6390":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"5:6021:8162":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"2:42704:3555":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"2:43759:2403":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"17:15694:5122":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"6:6610:6835":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"17:16716:5413":{"crate_id":17,"path":["object","xcoff","FunAux64"],"kind":"struct"},"1:1643:5979":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"17:12839:4565":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"1:9274:9246":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"6:6651:6852":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"5:2285:7140":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"17:16262:5296":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"2:4897:3365":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"2:34245:14661":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"16:7209:5689":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"6:6428:6737":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"2:41000:3488":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"1:3409:3012":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"1:11071:2409":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Stdio"],"kind":"enum"},"1:12278:27900":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"5:4284:2967":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"2:3551:127":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"2:40223:225":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"11:2440:8176":{"crate_id":11,"path":["hashbrown","table","ExtractIf"],"kind":"struct"},"1:3682:2979":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"5:2256:7137":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"5:6158:14981":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"2:44450:7208":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"17:11290:35556":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"16:6300:5566":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"14:186:21037":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"1:8492:3017":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"17:12121:4494":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"17:12224:4505":{"crate_id":17,"path":["object","read","elf","attributes","AttributeReader"],"kind":"struct"},"2:3796:14456":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"1:10563:116":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Command"],"kind":"struct"},"16:5725:4437":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"17:10367:22027":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"17:13870:4682":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"2:22372:7215":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"17:15314:4958":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"2:47804:7749":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"17:11400:4455":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"17:16691:5405":{"crate_id":17,"path":["object","xcoff","CsectAux64"],"kind":"struct"},"17:15682:5119":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"17:16378:5323":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"17:16809:4697":{"crate_id":17,"path":["object","xcoff","Rel64"],"kind":"struct"},"2:45369:14790":{"crate_id":2,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"16:2746:5461":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"9:49:20961":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"6:5325:6528":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"2:45483:162":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"17:13634:4628":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"17:15932:5188":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"11:2507:5984":{"crate_id":11,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"1:4338:9201":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"6:5139:6453":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"16:6571:5610":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"1:1118:8156":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"17:13192:8061":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegment"],"kind":"struct"},"1:1980:2402":{"crate_id":1,"path":["std","error"],"kind":"module"},"6:5428:6572":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"16:7762:5776":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"17:14482:4813":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"6:1569:6190":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"6:6858:6914":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"5:7782:8197":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"2:47793:7748":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"2:45316:7617":{"crate_id":2,"path":["core","time","Nanoseconds"],"kind":"struct"},"5:3326:5979":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"17:16341:5316":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"18:670:7965":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"6:7390:6997":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"11:808:8161":{"crate_id":11,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"17:16202:5275":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"5:5280:3081":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"6:5604:6664":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"2:30937:3446":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"2:46664:7648":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"2:22191:3624":{"crate_id":2,"path":["core","core_simd","cast","sealed","Sealed"],"kind":"trait"},"17:12896:4572":{"crate_id":17,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"16:8582:8137":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"5:7084:14442":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"1:891:3039":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"6:7326:6970":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"2:34976:5758":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"16:7804:35551":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"2:12944:8221":{"crate_id":2,"path":["core","slice","GetManyMutError"],"kind":"struct"},"16:2794:5463":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"2:2779:103":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"1:5676:3052":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"2:22150:33641":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"5:1378:8156":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"16:6623:5616":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"2:42845:237":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"16:8525:5863":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"2:45162:7603":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"2:43156:89":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"17:16019:5207":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"16:8633:21971":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"17:12318:8031":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"17:14974:4903":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"17:14392:4797":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"5:1516:3039":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"1:8586:9172":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"16:4927:5514":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"2:44159:7569":{"crate_id":2,"path":["core","slice","sort","stable","drift","DriftsortRun"],"kind":"struct"},"2:42934:90":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"17:16534:5371":{"crate_id":17,"path":["object","xcoff","AuxHeader64"],"kind":"struct"},"17:10393:22028":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"1:5119:9226":{"crate_id":1,"path":["std","os","net","linux_ext","socket","UnixSocketExt"],"kind":"trait"},"14:219:5958":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"1:3625:2978":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"11:676:3382":{"crate_id":11,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"1:6609:197":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"16:3139:4328":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"17:3853:7979":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"2:12535:8219":{"crate_id":2,"path":["core","slice","iter","ChunkBy"],"kind":"struct"},"2:8325:176":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"2:11764:3552":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"17:14042:4712":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"1:4946:9193":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"17:14283:4777":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"17:14519:4817":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"16:4239:5505":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"6:7344:3644":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"5:7524:8162":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"2:22370:9255":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"17:14871:4885":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"2:11832:3477":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"17:12868:4614":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"18:548:164":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"11:776:8162":{"crate_id":11,"path":["hashbrown","map","Drain"],"kind":"struct"},"11:2340:8167":{"crate_id":11,"path":["hashbrown","table","AbsentEntry"],"kind":"struct"},"2:10671:2959":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"1:4707:9207":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"2:44722:3491":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"6:7292:6951":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"17:14326:4786":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"1:8257:130":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"1:5692:116":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"2:34312:14663":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"16:7421:21965":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"17:15822:5157":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"17:12885:4571":{"crate_id":17,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"17:16152:5262":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"2:14337:118":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"1:4685:9206":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"16:6873:5633":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"2:3586:152":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"2:909:201":{"crate_id":2,"path":["core","num","nonzero","NonZero"],"kind":"struct"},"1:5746:2409":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"17:15548:5093":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"17:15049:4918":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"5:3292:5980":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"5:4981:228":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"1:3502:2998":{"crate_id":1,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"1:8501:3019":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"2:11553:3624":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"2:45063:7596":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"1:9595:3520":{"crate_id":1,"path":["std","sys","pal","unix","args","Args"],"kind":"struct"},"17:10629:4441":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"2:43974:7568":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"16:4764:5509":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"6:8175:7107":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"16:8562:5869":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"17:12686:8044":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"1:12515:1872":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"1:7904:4427":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"6:5151:6454":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"6:586:6143":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"1:8519:2988":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"1:7405:27916":{"crate_id":1,"path":["std","sys","thread_local","abort_on_dtor_unwind","DtorUnwindGuard"],"kind":"struct"},"17:13221:22033":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"2:6995:7195":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindows"],"kind":"struct"},"5:1407:8160":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"2:14066:8226":{"crate_id":2,"path":["core","future","async_drop","AsyncDropInPlace"],"kind":"struct"},"16:8623:5872":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"2:47784:7747":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"17:12215:4504":{"crate_id":17,"path":["object","read","elf","attributes","AttributeIndexIterator"],"kind":"struct"},"6:7367:6996":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"1:1006:8154":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"17:15724:5133":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"2:40293:8233":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"2:45292:7611":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"6:545:6121":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"5:4119:8162":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"17:11652:4468":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"2:47108:7694":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"16:8595:8140":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"1:6905:3100":{"crate_id":1,"path":["std","sync","reentrant_lock","ReentrantLockGuard"],"kind":"struct"},"6:473:6077":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"1:5640:3050":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"1:5290:8274":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"10:44:5994":{"crate_id":10,"path":["adler","Adler32"],"kind":"struct"},"1:6395:7212":{"crate_id":1,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"2:13443:3468":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"2:42486:32870":{"crate_id":2,"path":["core","net","parser","AddrKind"],"kind":"enum"},"2:45541:8247":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"1:9232:7856":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"1:10798:3008":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stderr"],"kind":"struct"},"1:8221:3623":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"1:10421:8322":{"crate_id":1,"path":["std","sys","pal","unix","os","Env"],"kind":"struct"},"6:479:6080":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"1:1634:8162":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"1:1501:167":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"17:16775:5424":{"crate_id":17,"path":["object","xcoff","DwarfAux32"],"kind":"struct"},"17:15147:4932":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"2:12051:8217":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"5:212:8168":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"1:11602:27910":{"crate_id":1,"path":["std","sys","sync","once","futex","CompletionGuard"],"kind":"struct"},"6:5044:6435":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"2:46789:7663":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"6:5557:6638":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"17:14585:4826":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"11:649:3039":{"crate_id":11,"path":["hashbrown","map","Iter"],"kind":"struct"},"2:31199:3343":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"1:2089:209":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"6:4896:6361":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"1:12519:13":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"14:201:14425":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"2:45508:218":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"1:11879:7894":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"1:1095:5739":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"18:563:4291":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"5:6902:33828":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"2:3416:14389":{"crate_id":2,"path":["core","ops","async_function","AsyncFn"],"kind":"trait"},"17:14946:4897":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"2:44429:7572":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"1:4907:9206":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"16:6887:5475":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"2:44694:3496":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"2:22252:9257":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"5:2163:8178":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMutKey"],"kind":"struct"},"16:6694:8093":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"1:8034:8289":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"6:7494:7048":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"6:5127:6452":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"6:5512:6618":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_chacha20_poly1305"],"kind":"struct"},"17:12815:4558":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"6:1530:6165":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"1:5321:8274":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"17:10783:7983":{"crate_id":17,"path":["object","read","read_cache","ReadCacheInternal"],"kind":"struct"},"1:11429:7883":{"crate_id":1,"path":["std","sys","exit_guard","PThread"],"kind":"struct"},"16:6142:21957":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"16:8295:5822":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"2:42712:7544":{"crate_id":2,"path":["core","range","iter","IterRange"],"kind":"struct"},"18:623:35565":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"17:16619:5386":{"crate_id":17,"path":["object","xcoff","Symbol32"],"kind":"struct"},"17:14820:4880":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"1:11011:151":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileType"],"kind":"struct"},"17:13321:22035":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"11:423:35526":{"crate_id":11,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"17:15438:5052":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"14:0:2797":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"16:2702:5459":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"17:15063:4921":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"17:15939:5189":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"2:4767:8206":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"2:47764:7745":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"2:41802:7510":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"6:6756:6887":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","iocb"],"kind":"struct"},"5:1393:8155":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"18:96:26217":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"1:10715:27921":{"crate_id":1,"path":["std","sys","pal","unix","stack_overflow","Handler"],"kind":"struct"},"2:3316:260":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"1:6443:8278":{"crate_id":1,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"17:13208:149":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"11:1001:8155":{"crate_id":11,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"17:15732:5136":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"2:43683:5837":{"crate_id":2,"path":["core","fmt","rt","Flag"],"kind":"enum"},"17:11605:4480":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"2:11351:33415":{"crate_id":2,"path":["core","slice","sort","shared","smallsort","CopyOnDrop"],"kind":"struct"},"11:2414:8162":{"crate_id":11,"path":["hashbrown","table","Drain"],"kind":"struct"},"2:44740:3492":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"17:11719:4470":{"crate_id":17,"path":["object","read","coff","import","ImportFile"],"kind":"struct"},"17:15966:5196":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"2:23417:32608":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"18:651:4281":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"1:7503:27783":{"crate_id":1,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"1:8892:3039":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"16:155:5428":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"17:10860:150":{"crate_id":17,"path":["object","read","any","File"],"kind":"enum"},"17:11591:4420":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"2:45358:7620":{"crate_id":2,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"2:4919:3122":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"1:8562:2993":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"11:2323:8156":{"crate_id":11,"path":["hashbrown","table","VacantEntry"],"kind":"struct"},"2:32742:3058":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"6:570:6134":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"16:4981:5516":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"17:15857:5166":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"6:5568:6643":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"2:43008:87":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"2:45193:3501":{"crate_id":2,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"17:12859:4570":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"2:46920:7670":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"1:7959:27919":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"1:11990:8268":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"17:11552:7996":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"16:6387:8067":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"16:8708:5879":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"17:15285:4938":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"1:12490:434":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"2:23678:7257":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI128Inner"],"kind":"struct"},"2:44408:7207":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"18:581:3354":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"2:34:963":{"crate_id":2,"path":["core","include_str"],"kind":"macro"},"17:15350:4989":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"16:6254:5558":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"16:7966:5800":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"2:3712:222":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"17:14795:4876":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"2:25:719":{"crate_id":2,"path":["core","env"],"kind":"macro"},"11:2275:5739":{"crate_id":11,"path":["hashbrown","table","Entry"],"kind":"enum"},"17:12850:4569":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"2:3474:5754":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"2:41827:7512":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"5:7060:14441":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"5:1531:3552":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"1:12492:490":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"5:3919:8176":{"crate_id":5,"path":["alloc","collections","linked_list","ExtractIf"],"kind":"struct"},"17:11776:4477":{"crate_id":17,"path":["object","read","coff","import","ImportObjectData"],"kind":"struct"},"2:41008:3487":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"2:2782:104":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"1:11147:27925":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"17:16611:5385":{"crate_id":17,"path":["object","xcoff","SymbolBytes"],"kind":"struct"},"6:5057:6439":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"17:10777:7982":{"crate_id":17,"path":["object","read","read_cache","ReadCache"],"kind":"struct"},"1:8756:3034":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"17:11901:4485":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"11:787:8176":{"crate_id":11,"path":["hashbrown","map","ExtractIf"],"kind":"struct"},"17:14345:4791":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"16:7539:5738":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"1:1649:5980":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"2:43269:98":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"1:12502:760":{"crate_id":1,"path":["std","f16"],"kind":"primitive"},"17:14639:4834":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"2:44501:8246":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"7:31:20930":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"17:10217:22022":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"5:2573:7147":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"17:13514:22036":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"17:13546:8063":{"crate_id":17,"path":["object","read","RelocationMap"],"kind":"struct"},"2:43119:95":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"5:1117:33828":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"1:703:9117":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"11:1063:35521":{"crate_id":11,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"17:11385:22045":{"crate_id":17,"path":["object","read","archive","Members"],"kind":"enum"},"17:14858:4884":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"2:38728:14667":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"11:813:8148":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"2:3064:174":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"17:13426:4612":{"crate_id":17,"path":["object","read","ObjectMapFile"],"kind":"struct"},"1:2527:3618":{"crate_id":1,"path":["std","fs","exists"],"kind":"function"},"17:11502:4463":{"crate_id":17,"path":["object","read","archive","ArchiveSymbol"],"kind":"struct"},"17:15409:5041":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"17:13289:4395":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"2:40958:7471":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"2:13452:3470":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"2:10677:2957":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"2:11909:8215":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"2:7006:7192":{"crate_id":2,"path":["core","iter","adapters","map_windows","Buffer"],"kind":"struct"},"5:1547:3382":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"18:515:4284":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"17:16211:5277":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"6:4947:6387":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"2:13150:7578":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"1:8627:7836":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"2:46821:7665":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"17:15430:5051":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"18:735:26226":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"2:41786:7509":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"2:3351:3543":{"crate_id":2,"path":["core","marker","Freeze"],"kind":"trait"},"5:1608:8147":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"2:3424:14391":{"crate_id":2,"path":["core","ops","async_function","AsyncFnOnce"],"kind":"trait"},"17:14598:4828":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"2:44491:7210":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"2:23579:7248":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU16Inner"],"kind":"struct"},"1:969:8146":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"2:2225:2453":{"crate_id":2,"path":["core","ptr","metadata","metadata"],"kind":"function"},"11:389:35512":{"crate_id":11,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"2:41088:7476":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"2:47773:7746":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"6:8260:7116":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"1:6715:3088":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"1:8231:3620":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"2:4692:3363":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"1:378:8250":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"17:10273:22024":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"2:44329:8241":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"2:3785:267":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"17:12134:4495":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"17:14268:4773":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"6:6631:6847":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"17:15023:4916":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"17:2226:7972":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"16:2658:5457":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"16:6096:8065":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"2:33348:5752":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"5:7747:8196":{"crate_id":5,"path":["alloc","rc","UniqueRc"],"kind":"struct"},"1:5133:9227":{"crate_id":1,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"5:4892:827":{"crate_id":5,"path":["alloc","fmt"],"kind":"module"},"17:12148:4496":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSection"],"kind":"struct"},"1:3083:149":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"5:879:102":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"16:8480:5859":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"5:5405:14405":{"crate_id":5,"path":["alloc","rc","UniqueRcUninit"],"kind":"struct"},"16:2413:21069":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"1:10580:30785":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Argv"],"kind":"struct"},"5:1578:5978":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"1:8361:8295":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"1:384:8252":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"2:43404:2951":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"17:10417:22029":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"17:14374:4796":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"16:8134:5491":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"18:598:35563":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"16:7956:5799":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"2:47374:7704":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"2:44398:8242":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"17:14018:4708":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"6:6452:6746":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"16:2548:5452":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"11:2115:8155":{"crate_id":11,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"17:12259:22138":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCacheSlice"],"kind":"enum"},"17:11231:22047":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"5:2358:7146":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"16:4900:5513":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"2:43671:7558":{"crate_id":2,"path":["core","fmt","rt","Count"],"kind":"enum"},"1:9295:3086":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"17:12582:4549":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"16:7369:5484":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"2:11944:3495":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"1:8827:3036":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"17:14916:4894":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"1:8909:3041":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"2:7635:3389":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"2:46529:7636":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"2:42542:7535":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"1:4944:9191":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"1:3081:237":{"crate_id":1,"path":["std","io","error","Result"],"kind":"type_alias"},"2:47676:7741":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"17:14691:4839":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"2:41054:7475":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"6:4792:6291":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"1:12495:1348":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"2:14380:7214":{"crate_id":2,"path":["core","task","wake","LocalWaker"],"kind":"struct"},"16:8025:5802":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"2:45583:191":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"16:2638:5456":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"2:23368:3447":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"2:45296:7612":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"2:41179:2947":{"crate_id":2,"path":["core","ffi","va_list","VaList"],"kind":"struct"},"16:0:2799":{"crate_id":16,"path":["gimli"],"kind":"module"},"5:3318:5981":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"17:11162:4480":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"9:380:20944":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"1:983:9136":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"16:8720:149":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"2:40148:224":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"1:11275:2750":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","ExitStatus"],"kind":"struct"},"5:1628:8175":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"2:3194:3443":{"crate_id":2,"path":["core","error","Request"],"kind":"struct"},"1:9185:3057":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"1:4230:9183":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"2:10673:2960":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"16:2618:5455":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"17:15990:5200":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"17:12569:8039":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"2:34457:14664":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"6:5051:6437":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"16:2484:5449":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"6:7337:6975":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"1:12510:911":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"1:8549:2991":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"17:12279:8027":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"1:1990:3438":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"1:4182:9180":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"15:394:21060":{"crate_id":15,"path":["addr2line","DebugFile"],"kind":"enum"},"1:2092:208":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"2:14049:8223":{"crate_id":2,"path":["core","future","async_drop","AsyncDropOwning"],"kind":"struct"},"2:40087:14393":{"crate_id":2,"path":["core","ops","coroutine","CoroutineState"],"kind":"enum"},"6:5640:6677":{"crate_id":6,"path":["libc","unix","linux_like","linux","sched_attr"],"kind":"struct"},"11:1083:8158":{"crate_id":11,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"5:3442:8176":{"crate_id":5,"path":["alloc","collections","btree","set","ExtractIf"],"kind":"struct"},"2:41351:7493":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"5:4557:33854":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"1:12508:924":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"1:1936:3520":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"16:6779:5621":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"17:15089:4923":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"6:5288:6514":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"2:3621:9154":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"17:12391:4513":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"18:765:26227":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"17:10822:4446":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"6:1657:6257":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"9:168:21010":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"16:6419:5433":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"17:15762:5141":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"17:16311:5311":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"2:47191:7697":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"0:155:2415":{"crate_id":0,"path":["autocfg","AutoCfg"],"kind":"struct"},"17:11732:22066":{"crate_id":17,"path":["object","read","coff","import","ImportName"],"kind":"enum"},"6:1703:6277":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"2:45019:7594":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"17:15880:5171":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"5:6263:2967":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"2:5130:14476":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"2:23452:32594":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"1:6498:7784":{"crate_id":1,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"2:23053:14681":{"crate_id":2,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr","with_exposed_provenance"],"kind":"function"},"5:7604:3382":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"16:6237:5553":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"2:22635:3624":{"crate_id":2,"path":["core","core_simd","to_bytes","sealed","Sealed"],"kind":"trait"},"2:23479:7241":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"17:12775:8051":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"1:9142:3055":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"17:16276:5298":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"2:32908:117":{"crate_id":2,"path":["core","marker","ConstParamTy"],"kind":"trait"},"2:2044:2967":{"crate_id":2,"path":["core","mem","maybe_uninit","Guard"],"kind":"struct"},"13:229:5966":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"17:15035:4917":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"17:11318:35554":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"6:578:6139":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"11:0:2795":{"crate_id":11,"path":["hashbrown"],"kind":"module"},"6:5623:6673":{"crate_id":6,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"17:15076:4922":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"1:8581:8304":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"1:7847:8555":{"crate_id":1,"path":["std","panicking","rust_panic_without_hook","RewrapBox"],"kind":"struct"},"16:6656:8084":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"1:3856:9174":{"crate_id":1,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"5:39:9155":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"2:45312:7616":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"6:5412:1275":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"16:7468:5728":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"18:659:7961":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"5:4194:3552":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"1:4834:6993":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"function"},"16:6500:21068":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"2:41015:14482":{"crate_id":2,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"2:41333:7491":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"6:6695:6871":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_ring_offset_v1"],"kind":"struct"},"2:3404:5753":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"6:564:6131":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"17:14532:4519":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"11:2513:5985":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"16:6026:5474":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"1:4346:9202":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"6:6416:6733":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"2:41363:7494":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"17:11616:7989":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"5:3297:35231":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"16:3985:4341":{"crate_id":16,"path":["gimli","arch","PowerPc64"],"kind":"struct"},"17:14311:4784":{"crate_id":17,"path":["object","macho","DyldSubCacheEntryV2"],"kind":"struct"},"11:344:35518":{"crate_id":11,"path":["hashbrown","raw","FullBucketsIndices"],"kind":"struct"},"1:4948:9194":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"6:5630:6676":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"9:0:2793":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"17:11357:22044":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"2:11982:8216":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"17:5304:7981":{"crate_id":17,"path":["object","read","xcoff","relocation","XcoffRelocationIterator"],"kind":"struct"},"1:12511:1896":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"2:40311:7338":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"17:10030:22017":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"1:4226:9182":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"17:11951:8010":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"2:47618:7739":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"6:1632:6238":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"16:6040:5477":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"17:11526:7995":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"6:6398:6720":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"2:23315:7219":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"17:14651:4835":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"6:1690:6273":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"1:11030:2987":{"crate_id":1,"path":["std","sys","pal","unix","io","IoSlice"],"kind":"struct"},"2:46597:7644":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"2:44622:3499":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"5:7857:8199":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"17:10662:4442":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"16:2988:5472":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"5:7664:9135":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"17:15778:5145":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"2:40971:7472":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"17:12905:4573":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"1:4216:9181":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"2:3802:14455":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"6:5521:6619":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"6:6749:6886":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_desc"],"kind":"struct"},"2:43418:2959":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"2:43654:2949":{"crate_id":2,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"1:8632:9205":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"2:44836:3490":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"2:3790:158":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"6:6737:6884":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_statistics_v1"],"kind":"struct"},"2:3067:156":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"11:2540:3042":{"crate_id":11,"path":["hashbrown","TryReserveError"],"kind":"enum"},"17:11113:7988":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"16:8148:5492":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"17:16705:5408":{"crate_id":17,"path":["object","xcoff","FunAux32"],"kind":"struct"},"1:7436:27927":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"1:12110:27929":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Bomb"],"kind":"struct"},"1:615:8254":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"16:2433:21096":{"crate_id":16,"path":["gimli","common","Vendor"],"kind":"enum"},"2:23393:7229":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"2:41808:3018":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"5:3331:35232":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"17:13081:7989":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolIterator"],"kind":"struct"},"2:13173:7579":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"16:6406:5579":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"17:16633:5390":{"crate_id":17,"path":["object","xcoff","Symbol64"],"kind":"struct"},"5:6105:72":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"2:4950:3366":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"17:11074:35559":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"2:8280:14643":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"2:47573:7738":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"6:0:1029":{"crate_id":6,"path":["libc"],"kind":"module"},"16:6747:5618":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"2:23039:9346":{"crate_id":2,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr"],"kind":"trait"},"2:40300:7336":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"2:45152:7599":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"11:1898:5982":{"crate_id":11,"path":["hashbrown","set","Union"],"kind":"struct"},"2:23656:7255":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI32Inner"],"kind":"struct"},"2:46544:7637":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"6:6513:6777":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"11:1652:35510":{"crate_id":11,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"16:544:5430":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"5:1362:5739":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"2:13189:7580":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"2:3533:14392":{"crate_id":2,"path":["core","ops","coroutine","Coroutine"],"kind":"trait"},"5:774:263":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"16:5280:5525":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"16:6186:5547":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"0:63:708":{"crate_id":0,"path":["autocfg","emit"],"kind":"function"},"2:32820:257":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"2:41579:7505":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"6:5255:6494":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"2:10121:92":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"2:45141:14424":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"17:3502:7977":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"2:41319:7488":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"14:40:4662":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"2:13397:3043":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"17:12825:4560":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"2:23568:7247":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU8Inner"],"kind":"struct"},"1:964:8161":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"2:4547:14458":{"crate_id":2,"path":["core","async_iter","async_iter","IntoAsyncIterator"],"kind":"trait"},"1:5025:9190":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"5:4354:3039":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"6:5334:6531":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_sizes"],"kind":"struct"},"17:13013:8053":{"crate_id":17,"path":["object","read","xcoff","file","XcoffFile"],"kind":"struct"},"17:13118:4587":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbol"],"kind":"struct"},"17:16172:5268":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"16:7347:5711":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"2:22775:3624":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"17:12007:4375":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"2:45622:7628":{"crate_id":2,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"11:750:5977":{"crate_id":11,"path":["hashbrown","map","Keys"],"kind":"struct"},"2:45006:7593":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"17:15956:5193":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"2:22193:9258":{"crate_id":2,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"17:12305:4508":{"crate_id":17,"path":["object","read","macho","fat","MachOFatFile"],"kind":"struct"},"2:44846:3478":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"18:726:4317":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"1:12504:779":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"1:9436:2967":{"crate_id":1,"path":["std","sync","poison","Guard"],"kind":"struct"},"6:6505:6772":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"1:11103:3057":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","ExitCode"],"kind":"struct"},"1:5602:2408":{"crate_id":1,"path":["std","process"],"kind":"module"},"17:15845:5160":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"2:44956:14423":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"16:8162:5482":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"17:12698:8045":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"2:4063:8162":{"crate_id":2,"path":["core","array","drain","Drain"],"kind":"struct"},"2:22175:33648":{"crate_id":2,"path":["core","core_simd","swizzle","resize","Resize"],"kind":"struct"},"12:0:2796":{"crate_id":12,"path":["rustc_std_workspace_alloc"],"kind":"module"},"1:9765:27918":{"crate_id":1,"path":["std","sys","pal","unix","fs","Dir"],"kind":"struct"},"16:8102:5806":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"2:10926:7199":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"1:4118:9176":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"2:5370:3020":{"crate_id":2,"path":["core","io","borrowed_buf","BorrowedBuf"],"kind":"struct"},"2:41342:7492":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"17:14707:4844":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"16:4808:5510":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"1:10971:7864":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileAttr"],"kind":"struct"},"1:11288:3056":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"1:6221:7784":{"crate_id":1,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"1:2026:810":{"crate_id":1,"path":["std","ffi"],"kind":"module"},"1:11342:7878":{"crate_id":1,"path":["std","sys","pal","unix","time","Timespec"],"kind":"struct"},"5:1242:33790":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"16:5447:5530":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"6:7439:7009":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"2:36852:5759":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"0:64:2428":{"crate_id":0,"path":["autocfg","rerun_path"],"kind":"function"},"2:10627:155":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"17:10245:22023":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"17:12919:4574":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"6:5471:6603":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"17:0:2800":{"crate_id":17,"path":["object"],"kind":"module"},"17:10937:35557":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"1:2726:3004":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"1:7833:8554":{"crate_id":1,"path":["std","panicking","begin_panic","Payload"],"kind":"struct"},"2:41250:2990":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"17:11925:4487":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"1:12516:993":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"6:6602:6834":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"16:2898:5468":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"11:718:8147":{"crate_id":11,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"1:2654:3003":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"18:608:7960":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"1:1877:3506":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"1:6075:3097":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"16:6806:5473":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"1:2334:3602":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"16:6864:21962":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"2:41420:4302":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"17:12175:4498":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsection"],"kind":"struct"},"6:5405:6561":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"11:851:8153":{"crate_id":11,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"16:6157:5542":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"1:9347:8316":{"crate_id":1,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"17:10533:4437":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"1:8569:2989":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"2:44558:2992":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"2:45562:33096":{"crate_id":2,"path":["core","task","wake","ExtData"],"kind":"enum"},"2:42508:7534":{"crate_id":2,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"5:6688:8162":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"6:5019:6422":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"6:7284:6946":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"2:45334:134":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"1:11168:27913":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"2:22640:9260":{"crate_id":2,"path":["core","core_simd","to_bytes","ToBytes"],"kind":"trait"},"6:6459:6750":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"16:6267:5559":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"2:3061:77":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"6:7539:7072":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"16:6901:5636":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"5:0:323":{"crate_id":5,"path":["alloc"],"kind":"module"},"11:820:9136":{"crate_id":11,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"2:22360:3624":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"1:973:8147":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"1:8019:7787":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"2:3389:9248":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"6:485:6083":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"1:9313:118":{"crate_id":1,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"2:22673:33636":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"6:7562:7084":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"9:226:3035":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"18:589:4292":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"16:7189:21964":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"5:7233:33863":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"17:14996:4914":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"11:427:35522":{"crate_id":11,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"1:5882:7784":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"17:13780:4662":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"17:12722:8047":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"16:6366:5575":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"17:14772:4875":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"6:5539:6630":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"6:5664:6689":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"16:4402:5507":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"16:7027:5650":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"6:4902:6364":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"9:412:20945":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"6:8243:7111":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"2:38893:14670":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"5:3852:8177":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"17:14000:4707":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"5:1881:8176":{"crate_id":5,"path":["alloc","collections","btree","map","ExtractIf"],"kind":"struct"},"1:5367:215":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"1:4023:8269":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"2:42825:223":{"crate_id":2,"path":["core","range","RangeFrom"],"kind":"struct"},"1:1109:8155":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"1:5200:9233":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"6:7407:6998":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"2:23330:7220":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"17:13536:4576":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"2:43721:2949":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"1:12509:930":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"17:10792:4323":{"crate_id":17,"path":["object","read","read_cache","ReadCacheRange"],"kind":"struct"},"1:12475:27817":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"1:9201:8309":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"1:11018:7875":{"crate_id":1,"path":["std","sys","pal","unix","fs","Mode"],"kind":"struct"},"16:7835:21967":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"6:8266:7117":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"17:13094:4586":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolTable"],"kind":"struct"},"18:613:35564":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"17:13718:4646":{"crate_id":17,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"6:6744:6885":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_options"],"kind":"struct"},"16:6711:8094":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"1:3545:3018":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"11:2126:8156":{"crate_id":11,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"17:14098:4730":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"16:7220:5690":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"2:11566:251":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"1:5889:7785":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"1:2514:3616":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"17:14298:4782":{"crate_id":17,"path":["object","macho","DyldSubCacheEntryV1"],"kind":"struct"},"2:43644:7547":{"crate_id":2,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"7:78:20937":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"6:8237:7110":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"1:2332:150":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"2:12606:3479":{"crate_id":2,"path":["core","slice","raw","from_raw_parts"],"kind":"function"},"17:316:7966":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"2:42342:7518":{"crate_id":2,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"16:3012:21097":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"1:12459:31491":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"16:8317:21970":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"17:15159:4936":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"6:7317:6969":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"17:10140:22020":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"1:8204:3621":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"2:15:2747":{"crate_id":2,"path":["core","write"],"kind":"macro"},"2:33772:14660":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"16:6586:5613":{"crate_id":16,"path":["gimli","read","cfi","UnwindExpression"],"kind":"struct"},"17:11172:35552":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"17:13397:4611":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"2:47868:7759":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"6:5482:6608":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"5:7612:3382":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"2:3775:14672":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"2:10679:2958":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"5:7653:3042":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"2:32809:7326":{"crate_id":2,"path":["core","error","Source"],"kind":"struct"},"2:22974:3624":{"crate_id":2,"path":["core","core_simd","simd","num","sealed","Sealed"],"kind":"trait"},"17:13204:8062":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"1:4168:9178":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"1:4124:9175":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"2:9451:8211":{"crate_id":2,"path":["core","panic","panic_info","PanicMessage"],"kind":"struct"},"1:8039:7788":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"2:46850:7666":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"5:2804:7150":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"1:7751:31493":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"1:9159:2750":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"1:4785:9224":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"6:5652:6684":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"6:7430:7005":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"5:3352:5982":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"13:0:2790":{"crate_id":13,"path":["std_detect"],"kind":"module"},"2:41169:2948":{"crate_id":2,"path":["core","ffi","va_list","VaListImpl"],"kind":"struct"},"17:505:4381":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"17:12346:8034":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"6:1711:6281":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"2:44548:3482":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"1:11086:27812":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","ProgramKind"],"kind":"enum"},"17:16125:5250":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"6:5375:6544":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"3:0:524":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"1:6891:3099":{"crate_id":1,"path":["std","sync","reentrant_lock","ReentrantLock"],"kind":"struct"},"2:46888:7668":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"2:42780:221":{"crate_id":2,"path":["core","range","Range"],"kind":"struct"},"5:2152:8177":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"2:8501:189":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"15:327:21054":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"2:42885:3039":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"18:0:2801":{"crate_id":18,"path":["memchr"],"kind":"module"},"2:42770:7546":{"crate_id":2,"path":["core","range","iter","IterRangeFrom"],"kind":"struct"},"1:8085:9119":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"2:44826:2989":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"16:2528:5451":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"17:14572:4825":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"2:31605:3354":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"6:8007:7106":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"11:663:3552":{"crate_id":11,"path":["hashbrown","map","IterMut"],"kind":"struct"},"2:32906:3546":{"crate_id":2,"path":["core","marker","Tuple"],"kind":"trait"},"2:47960:7778":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"17:15869:5167":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"5:3073:3435":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"1:9423:198":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"1:11950:8267":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"17:12761:8050":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"17:11308:7991":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"2:4505:111":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"17:10842:4447":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"2:46614:7645":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"16:7713:35549":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"2:32818:248":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"2:7001:7194":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindowsInner"],"kind":"struct"},"2:22139:33644":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_elements_right","Rotate"],"kind":"struct"},"2:46561:7638":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"2:47747:7744":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"6:5179:6456":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"1:10489:3060":{"crate_id":1,"path":["std","sys","pal","unix","pipe","AnonPipe"],"kind":"struct"},"17:12248:8026":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"17:12940:4577":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"6:1494:6149":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"2:41817:7511":{"crate_id":2,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"16:6981:5493":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"17:12930:4576":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"17:15105:4925":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"2:23345:7224":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"2:31167:7260":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"17:14357:4793":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"1:9428:3087":{"crate_id":1,"path":["std","sync","mutex","MappedMutexGuard"],"kind":"struct"},"6:5311:6523":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"2:11080:33414":{"crate_id":2,"path":["core","slice","sort","stable","merge","MergeState"],"kind":"struct"},"16:2465:5443":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"17:16001:5204":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"16:6082:5535":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"2:22662:7216":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"5:1619:221":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"17:10441:22030":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"17:11221:7989":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"17:12034:5983":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"6:6638:6848":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"17:14671:4838":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"17:12190:4501":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsectionIterator"],"kind":"struct"},"1:6030:3085":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"17:13908:4688":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"16:7977:5488":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"17:14932:4895":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"16:7505:5733":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"17:14831:4881":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"2:42624:3382":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"1:1655:5981":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"16:3693:5500":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"2:47019:7675":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"1:2488:3606":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"17:2405:7973":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"2:45280:7608":{"crate_id":2,"path":["core","str","LinesMap"],"kind":"struct"},"2:44871:3487":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"2:23623:7252":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroUsizeInner"],"kind":"struct"},"16:7383:5713":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"17:16191:5274":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"11:1885:5980":{"crate_id":11,"path":["hashbrown","set","Difference"],"kind":"struct"},"2:47705:7742":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"16:4842:5511":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"17:16356:5317":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"6:4816:6308":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"6:5301:6519":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"1:5626:3049":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"11:983:5739":{"crate_id":11,"path":["hashbrown","map","Entry"],"kind":"enum"},"14:31:8141":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"2:46681:7649":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"2:4:1288":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"6:5205:6470":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"2:23601:7250":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU64Inner"],"kind":"struct"},"17:15889:5174":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"18:573:4281":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"6:8316:7129":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"11:2374:3552":{"crate_id":11,"path":["hashbrown","table","IterMut"],"kind":"struct"},"1:4419:8270":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"1:8898:3040":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"17:16678:5399":{"crate_id":17,"path":["object","xcoff","CsectAux32"],"kind":"struct"},"1:0:1757":{"crate_id":1,"path":["std"],"kind":"module"},"16:2588:5454":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"5:282:33828":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"17:15120:4929":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"2:43919:7560":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"17:16290:5305":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"2:42580:205":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"2:3357:3545":{"crate_id":2,"path":["core","marker","FnPtr"],"kind":"trait"},"6:8249:7112":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"6:6719:6876":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_umem_reg_v1"],"kind":"struct"},"16:7398:35542":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"2:11740:3039":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"2:44542:3483":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"2:46482:7629":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"6:5036:6430":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"6:6590:6827":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"1:11927:27773":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"5:2246:9098":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"2:4888:14466":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"2:45127:7598":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"6:5224:6478":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"2:4831:7177":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"2:9488:8212":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"1:8882:3038":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"1:8057:4517":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"17:14071:4721":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"6:7445:7011":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"1:948:8162":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"11:2297:8155":{"crate_id":11,"path":["hashbrown","table","OccupiedEntry"],"kind":"struct"},"2:41199:2934":{"crate_id":2,"path":["core","ffi","c_char"],"kind":"type_alias"},"2:23590:7249":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU32Inner"],"kind":"struct"},"6:7308:6963":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"2:46710:7651":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"17:13180:8060":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegmentIterator"],"kind":"struct"},"17:14334:4788":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"17:14415:4800":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"11:1871:8176":{"crate_id":11,"path":["hashbrown","set","ExtractIf"],"kind":"struct"},"2:14089:7491":{"crate_id":2,"path":["core","future","async_drop","Fuse"],"kind":"struct"},"2:2224:14692":{"crate_id":2,"path":["core","ptr","metadata","Thin"],"kind":"trait_alias"},"16:6438:21959":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"6:517:6105":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"2:42674:9241":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"2:22152:33647":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"17:12536:8037":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"1:3356:3010":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"17:10114:22019":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"18:706:3470":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"17:13348:4607":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"1:9244:9245":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"5:7723:2932":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"1:5483:214":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"6:8284:7120":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"2:44176:7571":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"2:43944:168":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"16:7987:5801":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"5:783:121":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"1:11390:7879":{"crate_id":1,"path":["std","sys","personality","dwarf","eh","EHContext"],"kind":"struct"},"2:10669:2951":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"16:2568:5453":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"17:12748:8049":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"17:12233:4591":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"6:6710:6873":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_umem_reg"],"kind":"struct"},"17:11064:7987":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"0:66:1208":{"crate_id":0,"path":["autocfg","new"],"kind":"function"},"1:3048:8265":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"2:41095:7477":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"struct"},"2:22988:9345":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr"],"kind":"trait"},"1:8366:8296":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"2:46768:7662":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"2:46871:7667":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"1:698:8257":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"2:23002:14681":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_exposed_provenance"],"kind":"function"},"17:16230:5290":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"8:0:2792":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"1:3673:31868":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"2:3038:14488":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"1:12517:1958":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"6:1643:6246":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"5:7534:8195":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"2:10667:2952":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"16:7355:5483":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"1:9359:8318":{"crate_id":1,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"17:15135:4576":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"2:38783:14668":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"1:8575:8302":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"1:8284:3005":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"1:2801:3006":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"2:22:842":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"2:14154:33329":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"16:5647:5531":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"2:3074:270":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"1:9308:8310":{"crate_id":1,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"17:14437:4807":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"2:40203:226":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"1:2762:2995":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"17:321:7967":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"18:531:4286":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"2:2127:7169":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"17:13982:4699":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"6:1684:6270":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"16:6678:8090":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackageSections"],"kind":"struct"},"17:13957:4697":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"16:6950:5640":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"17:12735:8048":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"17:471:7968":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"5:979:9138":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"17:12027:8016":{"crate_id":17,"path":["object","read","elf","note","GnuProperty"],"kind":"struct"},"6:4964:6393":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"1:8842:3037":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"2:12065:8218":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"6:8272:7118":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"17:12162:4497":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsectionIterator"],"kind":"struct"},"17:15638:5112":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"2:41593:7506":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"17:12094:4492":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"}},"external_crates":{"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":32}