{"root":"0:0:1989","crate_version":"1.1.0","includes_private":false,"index":{"2:12518:28061":{"id":"2:12518:28061","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"üóª‚ààüåè\");\n\nassert_eq!(Some(\"üóª\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:41687:202"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:41685:205","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10290:251","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10290:251","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12626:27965":{"id":"2:12626:27965","crate_id":2,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"2:39634:27972","Self::is_ascii":"2:12625:27207"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41685:205","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"AsciiChar","id":"2:39634:27972","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12627:27211":{"id":"2:12627:27211","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferr√∂s\".eq_ignore_ascii_case(\"FERR√∂S\"));\nassert!(!\"Ferr√∂s\".eq_ignore_ascii_case(\"FERR√ñS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2593-0:86:135":{"id":"b:2:2593-0:86:135","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2552:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2562:269","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:86:135","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2596:135","2:2597:1626"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:3423-0:86:135":{"id":"b:2:3423-0:86:135","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2794:2449","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3421:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:86:135","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3425:1641"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12573:28100":{"id":"2:12573:28100","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"1:12019:457","str::splitn":"2:12570:2129","self::pattern":"2:12200:2730"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitN","id":"2:43769:2750","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12205:2724","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12205:2724","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12220:2725","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12579:28103":{"id":"2:12579:28103","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41685:205","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12205:2724","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12205:2724","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12220:2725","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5527:33031":{"id":"5:5527:33031","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Œ£\";\n\nassert_eq!(\"œÉ\", sigma.to_lowercase());\n\n// but at the end of a word, it's œÇ, not œÉ:\nlet odysseus = \"·ΩàŒîŒ•Œ£Œ£ŒïŒéŒ£\";\n\nassert_eq!(\"·ΩÄŒ¥œÖœÉœÉŒµœçœÇ\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"ÂÜúÂéÜÊñ∞Âπ¥\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7490:255"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7490:255","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:8671:8328-0:123:1833":{"id":"a:2:8671:8328-0:123:1833","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:8671:8328","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"AutoCfg","id":"0:123:1833","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2275-0:123:1833":{"id":"b:2:2275-0:123:1833","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2794:2449","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2269:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"AutoCfg","id":"0:123:1833","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2277:24613"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:65:1935":{"id":"0:65:1935","crate_id":0,"name":"emit_has_path","span":{"filename":"src/lib.rs","begin":[273,4],"end":[277,5]},"visibility":"public","docs":"Emits a config value `has_PATH` if `probe_path` returns true.\n\nAny non-identifier characters in the `path` will be replaced with\n`_` in the generated config value.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["path",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2596:135":{"id":"2:2596:135","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Infallible","id":"2:32105:2386","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"2:12530:1968":{"id":"2:12530:1968","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"yÃÜ\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'yÃÜ'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:12019:457"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chars","id":"2:43617:2737","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:86:135":{"id":"0:86:135","crate_id":0,"name":"Error","span":{"filename":"src/error.rs","begin":[9,0],"end":[11,1]},"visibility":"public","docs":"A common error type for the `autocfg` crate.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["a:2:2787:249-0:86:135","a:2:8670:8212-0:86:135","a:2:8671:8328-0:86:135","a:2:2804:259-0:86:135","a:2:2844:2450-0:86:135","b:2:2582-0:86:135","b:2:2593-0:86:135","b:2:2272-0:86:135","b:2:2588-0:86:135","b:2:2275-0:86:135","b:2:3423-0:86:135","b:2:2578-0:86:135","b:5:5793-0:86:135","0:26","0:88","0:29"]}}},"2:12558:28095":{"id":"2:12558:28095","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"1:12019:457","self::pattern":"2:12200:2730"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitInclusive","id":"2:12016:2733","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12205:2724","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12598:32362":{"id":"2:12598:32362","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  ◊¢◊ë◊®◊ô◊™  \";\nassert!(Some('◊™') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12629:27213":{"id":"2:12629:27213","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GR√ú√üE, J√úRGEN ‚ù§\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"gr√ú√üe, j√úrgen ‚ù§\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12628:27212":{"id":"2:12628:27212","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Gr√º√üe, J√ºrgen ‚ù§\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GR√º√üE, J√ºRGEN ‚ù§\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:76:1967":{"id":"0:76:1967","crate_id":0,"name":"emit_constant_cfg","span":{"filename":"src/lib.rs","begin":[376,4],"end":[380,5]},"visibility":"public","docs":"Emits the given `cfg` value if `probe_constant` returns true.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["expr",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["cfg",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:132":{"id":"0:132","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[82,16],"end":[82,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:9625:118","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"AutoCfg","id":"0:123:1833","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:133:725"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12532:6747":{"id":"2:12532:6747","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"2:43633:2319","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2578-0:123:1833":{"id":"b:2:2578-0:123:1833","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2555:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2552:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"AutoCfg","id":"0:123:1833","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2581:1871"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2578-0:86:135":{"id":"b:2:2578-0:86:135","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2555:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2552:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:86:135","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2581:1871"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:133:725":{"id":"0:133:725","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[82,16],"end":[82,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:9600:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:9581:238","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12524:28064":{"id":"2:12524:28064","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"üóª‚ààüåè\");\nunsafe {\n    assert_eq!(\"üóª\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"‚àà\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"üåè\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10290:251","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10290:251","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12608:24700":{"id":"2:12608:24700","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12019:457","self::pattern":"2:12200:2730"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["prefix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41685:205","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12205:2724","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:71:1953":{"id":"0:71:1953","crate_id":0,"name":"emit_has_type","span":{"filename":"src/lib.rs","begin":[331,4],"end":[335,5]},"visibility":"public","docs":"Emits a config value `has_TYPE` if `probe_type` returns true.\n\nAny non-identifier characters in the type `name` will be replaced with\n`_` in the generated config value.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["name",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12625:27207":{"id":"2:12625:27207","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Gr√º√üe, J√ºrgen ‚ù§\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12533:30258":{"id":"2:12533:30258","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"2:12534:30267"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitWhitespace","id":"2:43921:2734","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5795:1603":{"id":"5:5795:1603","crate_id":5,"name":"to_string","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7490:255","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:57:1888":{"id":"0:57:1888","crate_id":0,"name":"probe_rustc_version","span":{"filename":"src/lib.rs","begin":[193,4],"end":[195,5]},"visibility":"public","docs":"Test whether the current `rustc` reports a version greater than\nor equal to \"`major`.`minor`\".","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["major",{"primitive":"usize"}],["minor",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:8670:8212-0:123:1833":{"id":"a:2:8670:8212-0:123:1833","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:8670:8212","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"AutoCfg","id":"0:123:1833","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:2:2804:259-0:123:1833":{"id":"a:2:2804:259-0:123:1833","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2804:259","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"AutoCfg","id":"0:123:1833","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:12528:28086":{"id":"2:12528:28086","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\n```\nlet s = \"Per Martin-L√∂f\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-L√∂f\", last);\n```","links":{"str::split_at_mut":"2:12529:28087"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12538:1978":{"id":"2:12538:1978","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"1:12019:457","self::pattern":"2:12200:2730"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12205:2724","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:63:1925":{"id":"0:63:1925","crate_id":0,"name":"emit_sysroot_crate","span":{"filename":"src/lib.rs","begin":[252,4],"end":[256,5]},"visibility":"public","docs":"Emits a config value `has_CRATE` if `probe_sysroot_crate` returns true.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["name",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12630:32370":{"id":"2:12630:32370","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"‚ù§\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"‚ù§\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"‚ù§\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"‚ù§\\n!\".escape_debug().to_string(), \"‚ù§\\\\n!\");\n```","links":{"`char::escape_debug`":"2:4584:32370"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDebug","id":"2:43946:2741","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12516:349":{"id":"2:12516:349","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"2:12517:348","`u8`":"1:12036:1650"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:67:1940":{"id":"0:67:1940","crate_id":0,"name":"probe_trait","span":{"filename":"src/lib.rs","begin":[293,4],"end":[296,5]},"visibility":"public","docs":"Tests whether the given trait can be used.\n\nThe test code is subject to change, but currently looks like:\n\n```ignore\npub trait Probe: TRAIT + Sized {}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["name",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2275-0:86:135":{"id":"b:2:2275-0:86:135","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2794:2449","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2269:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:86:135","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2277:24613"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:130":{"id":"0:130","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[82,9],"end":[82,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2288:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"AutoCfg","id":"0:123:1833","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:131:461"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12567:32357":{"id":"2:12567:32357","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"2:12200:2730","str::split":"2:12555:1981","prim@char":"1:12019:457","str::split_terminator":"2:12564:32356"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitTerminator","id":"2:43715:2752","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12205:2724","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12205:2724","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12220:2725","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5538:27209":{"id":"5:5538:27209","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Gr√º√üe, J√ºrgen ‚ù§\";\n\nassert_eq!(\"GR√º√üE, J√ºRGEN ‚ù§\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"2:12628:27212"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7490:255","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12531:7132":{"id":"2:12531:7132","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"yÃÜes\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'yÃÜ')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the previous character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:12019:457"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CharIndices","id":"2:43623:2736","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:75:1964":{"id":"0:75:1964","crate_id":0,"name":"probe_constant","span":{"filename":"src/lib.rs","begin":[370,4],"end":[373,5]},"visibility":"public","docs":"Tests whether the given constant expression can be used.\n\nThe test code is subject to change, but currently looks like:\n\n```ignore\npub const PROBE: () = ((), EXPR).0;\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["expr",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:72:1955":{"id":"0:72:1955","crate_id":0,"name":"emit_type_cfg","span":{"filename":"src/lib.rs","begin":[338,4],"end":[342,5]},"visibility":"public","docs":"Emits the given `cfg` value if `probe_type` returns true.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["name",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["cfg",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:53:1039":{"id":"0:53:1039","crate_id":0,"name":"new","span":{"filename":"src/lib.rs","begin":[140,4],"end":[145,5]},"visibility":"public","docs":"Create a new `AutoCfg` instance.\n\n# Common errors\n\n- `rustc` can't be executed, from `RUSTC` or in the `PATH`.\n- The version output from `rustc` can't be parsed.\n- `OUT_DIR` is not set in the environment, or is not a writable directory.\n","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"Result","id":"2:41830:238","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}},{"type":{"resolved_path":{"name":"Error","id":"0:86:135","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12614:32367":{"id":"2:12614:32367","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12019:457","self::pattern":"2:12200:2730"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12205:2724","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12205:2724","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12220:2725","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:5:682-0:123:1833":{"id":"b:5:682-0:123:1833","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2288:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:678:262","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"AutoCfg","id":"0:123:1833","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:684:2703","5:685:2704","5:686:2705"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12541:2126":{"id":"2:12541:2126","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"prim@char":"1:12019:457","self::pattern":"2:12200:2730"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12205:2724","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12537:30261":{"id":"2:12537:30261","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\n```\nlet text = \"Za≈º√≥≈Çƒá gƒô≈õlƒÖ ja≈∫≈Ñ\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EncodeUtf16","id":"2:43939:2731","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:88":{"id":"0:88","crate_id":0,"name":null,"span":{"filename":"src/error.rs","begin":[8,9],"end":[8,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:9625:118","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:86:135","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:89:725"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12591:32360":{"id":"2:12591:32360","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"2:12200:2730","`DoubleEndedIterator`":"2:7582:128","prim@char":"1:12019:457","str::match_indices":"2:12588:32359"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatchIndices","id":"2:43815:2746","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12205:2724","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12205:2724","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12220:2725","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:684:2703":{"id":"5:684:2703","crate_id":5,"name":"Owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"0:70:1949":{"id":"0:70:1949","crate_id":0,"name":"probe_type","span":{"filename":"src/lib.rs","begin":[322,4],"end":[325,5]},"visibility":"public","docs":"Tests whether the given type can be used.\n\nThe test code is subject to change, but currently looks like:\n\n```ignore\npub type Probe = TYPE;\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["name",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:68:1944":{"id":"0:68:1944","crate_id":0,"name":"emit_has_trait","span":{"filename":"src/lib.rs","begin":[302,4],"end":[306,5]},"visibility":"public","docs":"Emits a config value `has_TRAIT` if `probe_trait` returns true.\n\nAny non-identifier characters in the trait `name` will be replaced with\n`_` in the generated config value.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["name",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2593-0:123:1833":{"id":"b:2:2593-0:123:1833","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2552:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2562:269","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"AutoCfg","id":"0:123:1833","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2596:135","2:2597:1626"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:26":{"id":"0:26","crate_id":0,"name":null,"span":{"filename":"src/error.rs","begin":[13,0],"end":[26,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["cause","provide","source","type_id","description"],"trait":{"name":"Error","id":"2:2640:135","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:86:135","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:27:2105","0:28:432"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2582-0:86:135":{"id":"b:2:2582-0:86:135","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2555:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:86:135","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2584:751"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12534:30267":{"id":"2:12534:30267","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"2:12533:30258"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitAsciiWhitespace","id":"2:43930:2732","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12570:2129":{"id":"2:12570:2129","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"1:12019:457","self::pattern":"2:12200:2730","str::rsplitn":"2:12573:28100"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitN","id":"2:43751:2751","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12205:2724","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5539:27210":{"id":"5:5539:27210","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Gr√º√üe, J√ºrgen ‚ù§\";\n\nassert_eq!(\"gr√º√üe, j√ºrgen ‚ù§\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"2:12629:27213"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7490:255","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:62:1922":{"id":"0:62:1922","crate_id":0,"name":"probe_sysroot_crate","span":{"filename":"src/lib.rs","begin":[246,4],"end":[249,5]},"visibility":"public","docs":"Tests whether the given sysroot crate can be used.\n\nThe test code is subject to change, but currently looks like:\n\n```ignore\nextern crate CRATE as probe;\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["name",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12508:32349":{"id":"2:12508:32349","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\nassert!(s.is_char_boundary(0));\n// start of `ËÄÅ`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `√∂`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `ËÄÅ`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2588-0:86:135":{"id":"b:2:2588-0:86:135","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2562:269","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2558:270","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:86:135","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2591:135","2:2592:1628"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:2581:1871":{"id":"2:2581:1871","crate_id":2,"name":"into","span":null,"visibility":"default","docs":"Calls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of\n<code>[From]&lt;T&gt; for U</code> chooses to do.","links":{"From":"2:2555:143"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"U"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:66:1937":{"id":"0:66:1937","crate_id":0,"name":"emit_path_cfg","span":{"filename":"src/lib.rs","begin":[280,4],"end":[284,5]},"visibility":"public","docs":"Emits the given `cfg` value if `probe_path` returns true.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["path",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["cfg",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5520:33029":{"id":"5:5520:33029","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:276:2454","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"5:276:2454","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:686:2705":{"id":"5:686:2705","crate_id":5,"name":"clone_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["target",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2274:2232":{"id":"2:2274:2232","crate_id":2,"name":"borrow","span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[rustc_diagnostic_item = \"noop_method_borrow\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:29":{"id":"0:29","crate_id":0,"name":null,"span":{"filename":"src/error.rs","begin":[28,0],"end":[37,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Display","id":"2:9630:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:86:135","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:30:725"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12594:1987":{"id":"2:12594:1987","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2787:249-0:86:135":{"id":"a:2:2787:249-0:86:135","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2787:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:86:135","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:12551:2646":{"id":"2:12551:2646","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('√©'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"2:41687:202","prim@char":"1:12019:457","self::pattern":"2:12200:2730"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41685:205","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12205:2724","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12205:2724","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12220:2725","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5519":{"id":"5:5519","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["5:5520:33029","5:5521:13728","5:5524:33030","5:5527:33031","5:5535:33032","5:5536:33033","5:5537:2341","5:5538:27209","5:5539:27210"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:64:1930":{"id":"0:64:1930","crate_id":0,"name":"probe_path","span":{"filename":"src/lib.rs","begin":[265,4],"end":[267,5]},"visibility":"public","docs":"Tests whether the given path can be used.\n\nThe test code is subject to change, but currently looks like:\n\n```ignore\npub use PATH;\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["path",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:69:1946":{"id":"0:69:1946","crate_id":0,"name":"emit_trait_cfg","span":{"filename":"src/lib.rs","begin":[309,4],"end":[313,5]},"visibility":"public","docs":"Emits the given `cfg` value if `probe_trait` returns true.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["name",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["cfg",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:73:1958":{"id":"0:73:1958","crate_id":0,"name":"probe_expression","span":{"filename":"src/lib.rs","begin":[351,4],"end":[354,5]},"visibility":"public","docs":"Tests whether the given expression can be used.\n\nThe test code is subject to change, but currently looks like:\n\n```ignore\npub fn probe() { let _ = EXPR; }\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["expr",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:27:2105":{"id":"0:27:2105","crate_id":0,"name":"description","span":{"filename":"src/error.rs","begin":[14,4],"end":[16,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2844:2450-0:123:1833":{"id":"a:2:2844:2450-0:123:1833","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2844:2450","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"AutoCfg","id":"0:123:1833","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:0:1989":{"id":"0:0:1989","crate_id":0,"name":"autocfg","span":{"filename":"src/lib.rs","begin":[1,0],"end":[453,1]},"visibility":"public","docs":"A Rust library for build scripts to automatically configure code based on\ncompiler support.  Code snippets are dynamically tested to see if the `rustc`\nwill accept them, rather than hard-coding specific version support.\n\n\n## Usage\n\nAdd this to your `Cargo.toml`:\n\n```toml\n[build-dependencies]\nautocfg = \"1\"\n```\n\nThen use it in your `build.rs` script to detect compiler features.  For\nexample, to test for 128-bit integer support, it might look like:\n\n```rust\nextern crate autocfg;\n\nfn main() {\n#   // Normally, cargo will set `OUT_DIR` for build scripts.\n#   std::env::set_var(\"OUT_DIR\", \"target\");\n    let ac = autocfg::new();\n    ac.emit_has_type(\"i128\");\n\n    // (optional) We don't need to rerun for anything external.\n    autocfg::rerun_path(\"build.rs\");\n}\n```\n\nIf the type test succeeds, this will write a `cargo:rustc-cfg=has_i128` line\nfor Cargo, which translates to Rust arguments `--cfg has_i128`.  Then in the\nrest of your Rust code, you can add `#[cfg(has_i128)]` conditions on code that\nshould only be used when the compiler supports it.\n\n## Caution\n\nMany of the probing methods of `AutoCfg` document the particular template they\nuse, **subject to change**. The inputs are not validated to make sure they are\nsemantically correct for their expected use, so it's _possible_ to escape and\ninject something unintended. However, such abuse is unsupported and will not\nbe considered when making changes to the templates.","links":{},"attrs":["#![deny(missing_debug_implementations)]","#![deny(missing_docs)]","#![allow(unknown_lints)]","#![allow(bare_trait_objects)]","#![allow(ellipsis_inclusive_range_patterns)]"],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:35-0:86:135","0:123:1833","0:48:655","0:49:1846","0:50:1852","0:51:1039"],"is_stripped":false}}},"2:12544:28104":{"id":"2:12544:28104","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"1:12019:457","self::pattern":"2:12200:2730"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12205:2724","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12205:2724","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12220:2725","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5535:33032":{"id":"5:5535:33032","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"ÂÜúÂéÜÊñ∞Âπ¥\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tsch√º√ü\";\n\nassert_eq!(\"TSCH√úSS\", s.to_uppercase());\n```","links":{"`String`":"5:7490:255"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7490:255","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12515:32352":{"id":"2:12515:32352","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"üóª‚ààüåè\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"üçî‚ààüåè\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:49:1846":{"id":"0:49:1846","crate_id":0,"name":"rerun_path","span":{"filename":"src/lib.rs","begin":[107,0],"end":[109,1]},"visibility":"public","docs":"Writes a line telling Cargo to rerun the build script if `path` changes.\n\nThis looks like: `cargo:rerun-if-changed=PATH`\n\nThis requires at least cargo 0.7.0, corresponding to rustc 1.6.0.  Earlier\nversions of cargo will simply ignore the directive.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["path",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12547:2125":{"id":"2:12547:2125","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('√©'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"2:41687:202","prim@char":"1:12019:457","self::pattern":"2:12200:2730"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41685:205","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12205:2724","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12506:879":{"id":"2:12506:879","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"∆íoo\".len(), 4); // fancy f!\nassert_eq!(\"∆íoo\".chars().count(), 3);\n```","links":{"prim@char":"1:12019:457"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12582:2246":{"id":"2:12582:2246","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::rmatches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"2:12200:2730","`DoubleEndedIterator`":"2:7582:128","prim@char":"1:12019:457","str::rmatches":"2:12585:32358"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Matches","id":"2:43851:2747","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12205:2724","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12511:32351":{"id":"2:12511:32351","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nIf `index` is greater than the length of the string, this returns the length of the string.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"‚ù§Ô∏èüß°üíõüíöüíôüíú\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"‚ù§Ô∏èüß°üíõ\");\n```","links":{"str::floor_char_boundary":"2:12509:32350"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12602:32365":{"id":"2:12602:32365","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"1:12019:457","self::pattern":"2:12200:2730"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12205:2724","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12205:2724","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"2:12225:2723","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:50:1852":{"id":"0:50:1852","crate_id":0,"name":"rerun_env","span":{"filename":"src/lib.rs","begin":[118,0],"end":[120,1]},"visibility":"public","docs":"Writes a line telling Cargo to rerun the build script if the environment\nvariable `var` changes.\n\nThis looks like: `cargo:rerun-if-env-changed=VAR`\n\nThis requires at least cargo 0.21.0, corresponding to rustc 1.20.0.  Earlier\nversions of cargo will simply ignore the directive.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["var",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12509:32350":{"id":"2:12509:32350","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji üßë‚Äçüî¨ (scientist) could be split so that the string only\nincludes üßë (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"‚ù§Ô∏èüß°üíõüíöüíôüíú\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"‚ù§Ô∏èüß°\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5537:2341":{"id":"5:5537:2341","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7490:255"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7490:255","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12601:32364":{"id":"2:12601:32364","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"◊¢◊ë◊®◊ô◊™  \";\nassert!(Some('◊™') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12576:28102":{"id":"2:12576:28102","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41685:205","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12205:2724","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12605:32366":{"id":"2:12605:32366","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12019:457","self::pattern":"2:12200:2730"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12205:2724","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5524:33030":{"id":"5:5524:33030","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7490:255"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["count",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7490:255","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12205:2724","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12517:348":{"id":"2:12517:348","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:12036:1650"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12611:28105":{"id":"2:12611:28105","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12019:457","self::pattern":"2:12200:2730"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["suffix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41685:205","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12205:2724","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12205:2724","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12220:2725","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5521:13728":{"id":"5:5521:13728","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7490:255"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["from",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7490:255","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12205:2724","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12505":{"id":"2:12505","crate_id":2,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["2:12506:879","2:12507:1980","2:12508:32349","2:12509:32350","2:12511:32351","2:12514:27538","2:12515:32352","2:12516:349","2:12517:348","2:12518:28061","2:12520:28062","2:12522:28063","2:12524:28064","2:12526:32353","2:12527:32354","2:12528:28086","2:12529:28087","2:12530:1968","2:12531:7132","2:12532:6747","2:12533:30258","2:12534:30267","2:12535:2124","2:12536:32355","2:12537:30261","2:12538:1978","2:12541:2126","2:12544:28104","2:12547:2125","2:12551:2646","2:12555:1981","2:12558:28095","2:12561:28097","2:12564:32356","2:12567:32357","2:12570:2129","2:12573:28100","2:12576:28102","2:12579:28103","2:12582:2246","2:12585:32358","2:12588:32359","2:12591:32360","2:12594:1987","2:12596:32361","2:12598:32362","2:12600:32363","2:12601:32364","2:12602:32365","2:12605:32366","2:12608:24700","2:12611:28105","2:12614:32367","2:12617:32368","2:12620:32369","2:12623:2135","2:12625:27207","2:12626:27965","2:12627:27211","2:12628:27212","2:12629:27213","2:12630:32370","2:12632:8204","2:12633:32371"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2272-0:86:135":{"id":"b:2:2272-0:86:135","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2794:2449","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2266:101","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:86:135","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2274:2232"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:5:5793-0:86:135":{"id":"b:5:5793-0:86:135","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"2:9630:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:2794:2449","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"ToString","id":"5:5791:263","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:86:135","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:5795:1603"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12555:1981":{"id":"2:12555:1981","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"2:12200:2730","`DoubleEndedIterator`":"2:7582:128","prim@char":"1:12019:457","str::split_whitespace":"2:12533:30258","str::rsplit":"2:12561:28097"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Split","id":"2:43647:2320","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12205:2724","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12564:32356":{"id":"2:12564:32356","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"2:12200:2730","str::split":"2:12555:1981","prim@char":"1:12019:457","`DoubleEndedIterator`":"2:7582:128","str::rsplit_terminator":"2:12567:32357"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitTerminator","id":"2:43697:2753","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12205:2724","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2787:249-0:123:1833":{"id":"a:2:2787:249-0:123:1833","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2787:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"AutoCfg","id":"0:123:1833","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:58:1893":{"id":"0:58:1893","crate_id":0,"name":"emit_rustc_version","span":{"filename":"src/lib.rs","begin":[199,4],"end":[203,5]},"visibility":"public","docs":"Sets a `cfg` value of the form `rustc_major_minor`, like `rustc_1_29`,\nif the current `rustc` is at least that version.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["major",{"primitive":"usize"}],["minor",{"primitive":"usize"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12536:32355":{"id":"2:12536:32355","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\", suggestion =\n\"lines\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinesAny","id":"2:43911:2744","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12514:27538":{"id":"2:12514:27538","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:11760:2114"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2582-0:123:1833":{"id":"b:2:2582-0:123:1833","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2555:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"AutoCfg","id":"0:123:1833","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2584:751"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12623:2135":{"id":"2:12623:2135","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"2:12161:134","`FromStr`":"2:12160:2370"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:41830:238","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"FromStr","id":"2:12160:2370","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"2:12160:2370","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12585:32358":{"id":"2:12585:32358","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"2:12200:2730","`DoubleEndedIterator`":"2:7582:128","prim@char":"1:12019:457","str::matches":"2:12582:2246"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatches","id":"2:43869:2748","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12205:2724","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12205:2724","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12220:2725","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12529:28087":{"id":"2:12529:28087","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\n```\nlet mut s = \"Per Martin-L√∂f\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-L√∂f\", last);\n}\nassert_eq!(\"PER Martin-L√∂f\", s);\n```","links":{"str::split_at":"2:12528:28086"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:54:1863":{"id":"0:54:1863","crate_id":0,"name":"with_dir","span":{"filename":"src/lib.rs","begin":[155,4],"end":[189,5]},"visibility":"public","docs":"Create a new `AutoCfg` instance with the specified output directory.\n\n# Common errors\n\n- `rustc` can't be executed, from `RUSTC` or in the `PATH`.\n- The version output from `rustc` can't be parsed.\n- `dir` is not a writable directory.\n","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["dir",{"generic":"T"}]],"output":{"resolved_path":{"name":"Result","id":"2:41830:238","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}},{"type":{"resolved_path":{"name":"Error","id":"0:86:135","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2552:163","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"PathBuf","id":"1:5115:215","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:685:2704":{"id":"5:685:2704","crate_id":5,"name":"to_owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12596:32361":{"id":"2:12596:32361","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  ◊¢◊ë◊®◊ô◊™  \";\nassert!(Some('◊¢') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12535:2124":{"id":"2:12535:2124","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nNote that any carriage return (`\\r`) not immediately followed by a\nline feed (`\\n`) does not split a line. These carriage returns are\nthereby included in the produced lines.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\r\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\n// Trailing carriage return is included in the last line\nassert_eq!(Some(\"baz\\r\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line does not require any ending:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Lines","id":"2:43901:2316","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3423-0:123:1833":{"id":"b:2:3423-0:123:1833","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2794:2449","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3421:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"AutoCfg","id":"0:123:1833","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3425:1641"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:8670:8212-0:86:135":{"id":"a:2:8670:8212-0:86:135","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:8670:8212","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:86:135","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"a:2:8671:8328-0:86:135":{"id":"a:2:8671:8328-0:86:135","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:8671:8328","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:86:135","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"2:3425:1641":{"id":"2:3425:1641","crate_id":2,"name":"type_id","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"TypeId","id":"2:39447:3707","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2588-0:123:1833":{"id":"b:2:2588-0:123:1833","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2562:269","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2558:270","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"AutoCfg","id":"0:123:1833","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2591:135","2:2592:1628"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:74:1961":{"id":"0:74:1961","crate_id":0,"name":"emit_expression_cfg","span":{"filename":"src/lib.rs","begin":[357,4],"end":[361,5]},"visibility":"public","docs":"Emits the given `cfg` value if `probe_expression` returns true.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["expr",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["cfg",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:48:655":{"id":"0:48:655","crate_id":0,"name":"emit","span":{"filename":"src/lib.rs","begin":[97,0],"end":[99,1]},"visibility":"public","docs":"Writes a config flag for rustc on standard out.\n\nThis looks like: `cargo:rustc-cfg=CFG`\n\nCargo will use this in arguments to rustc, like `--cfg CFG`.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["cfg",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12561:28097":{"id":"2:12561:28097","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"2:12200:2730","`DoubleEndedIterator`":"2:7582:128","prim@char":"1:12019:457","str::split":"2:12555:1981"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplit","id":"2:43665:2749","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12205:2724","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12205:2724","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12220:2725","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:35-0:86:135":{"id":"0:35-0:86:135","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[73,0],"end":[73,21]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"error::Error","name":"Error","id":"0:86:135","glob":false}}},"0:28:432":{"id":"0:28:432","crate_id":0,"name":"cause","span":{"filename":"src/error.rs","begin":[18,4],"end":[25,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41685:205","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"dyn_trait":{"traits":[{"trait":{"name":"error::Error","id":"2:2640:135","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]}],"lifetime":null}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:52":{"id":"0:52","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[131,0],"end":[381,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"AutoCfg","id":"0:123:1833","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:53:1039","0:54:1863","0:57:1888","0:58:1893","0:62:1922","0:63:1925","0:64:1930","0:65:1935","0:66:1937","0:67:1940","0:68:1944","0:69:1946","0:70:1949","0:71:1953","0:72:1955","0:73:1958","0:74:1961","0:75:1964","0:76:1967"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12507:1980":{"id":"2:12507:1980","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:89:725":{"id":"0:89:725","crate_id":0,"name":"fmt","span":{"filename":"src/error.rs","begin":[8,9],"end":[8,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:9600:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:9581:238","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12527:32354":{"id":"2:12527:32354","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"1:12025:1544","crate::ops::IndexMut":"2:3088:8238","str::slice_unchecked":"2:12526:32353"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"5:5536:33033":{"id":"5:5536:33033","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:276:2454","`String`":"5:7490:255"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:276:2454","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"5:7490:255","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2584:751":{"id":"2:2584:751","crate_id":2,"name":"from","span":null,"visibility":"default","docs":"Returns the argument unchanged.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["t",{"generic":"T"}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2591:135":{"id":"2:2591:135","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"2:2562:269","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}}},"b:2:2272-0:123:1833":{"id":"b:2:2272-0:123:1833","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2794:2449","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2266:101","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"AutoCfg","id":"0:123:1833","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2274:2232"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12588:32359":{"id":"2:12588:32359","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"2:12200:2730","`DoubleEndedIterator`":"2:7582:128","prim@char":"1:12019:457","str::rmatch_indices":"2:12591:32360"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"MatchIndices","id":"2:43797:2745","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12205:2724","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12617:32368":{"id":"2:12617:32368","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12019:457","self::pattern":"2:12200:2730"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12205:2724","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2844:2450-0:86:135":{"id":"a:2:2844:2450-0:86:135","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2844:2450","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:86:135","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:2597:1626":{"id":"2:2597:1626","crate_id":2,"name":"try_from","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["value",{"generic":"U"}]],"output":{"resolved_path":{"name":"Result","id":"2:41830:238","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"T"},"trait":{"name":"TryFrom","id":"2:2562:269","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12620:32369":{"id":"2:12620:32369","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12019:457","self::pattern":"2:12200:2730"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12205:2724","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12205:2724","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12220:2725","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2277:24613":{"id":"2:2277:24613","crate_id":2,"name":"borrow_mut","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12526:32353":{"id":"2:12526:32353","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\n\nunsafe {\n    assert_eq!(\"L√∂we ËÄÅËôé L√©opard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"1:12025:1544","str::slice_mut_unchecked":"2:12527:32354","crate::ops::Index":"2:3084:8237"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12522:28063":{"id":"2:12522:28063","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"üóª‚ààüåè\";\nunsafe {\n    assert_eq!(\"üóª\", v.get_unchecked(0..4));\n    assert_eq!(\"‚àà\", v.get_unchecked(4..7));\n    assert_eq!(\"üåè\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10290:251","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10290:251","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12520:28062":{"id":"2:12520:28062","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:41687:202"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:41685:205","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10290:251","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10290:251","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12600:32363":{"id":"2:12600:32363","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  ◊¢◊ë◊®◊ô◊™\";\nassert!(Some('◊¢') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12632:8204":{"id":"2:12632:8204","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"‚ù§\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"‚ù§\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"‚ù§\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"2:4585:8204"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDefault","id":"2:43955:2742","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:30:725":{"id":"0:30:725","crate_id":0,"name":"fmt","span":{"filename":"src/error.rs","begin":[29,4],"end":[36,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"2:9600:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"Result","id":"2:41830:238","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}},{"type":{"resolved_path":{"name":"fmt::Error","id":"2:42760:135","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12633:32371":{"id":"2:12633:32371","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"‚ù§\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"‚ù§\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"‚ù§\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"2:4582:32371"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeUnicode","id":"2:43964:2743","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2804:259-0:86:135":{"id":"a:2:2804:259-0:86:135","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2804:259","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:86:135","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:123:1833":{"id":"0:123:1833","crate_id":0,"name":"AutoCfg","span":{"filename":"src/lib.rs","begin":[83,0],"end":[90,1]},"visibility":"public","docs":"Helper to detect compiler features for `cfg` output in build scripts.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["0:52","a:2:2787:249-0:123:1833","a:2:8670:8212-0:123:1833","a:2:8671:8328-0:123:1833","a:2:2804:259-0:123:1833","a:2:2844:2450-0:123:1833","b:2:2582-0:123:1833","b:2:2593-0:123:1833","b:2:2272-0:123:1833","b:2:2588-0:123:1833","b:2:2275-0:123:1833","b:2:3423-0:123:1833","b:2:2578-0:123:1833","b:5:682-0:123:1833","0:132","0:130"]}}},"0:131:461":{"id":"0:131:461","crate_id":0,"name":"clone","span":{"filename":"src/lib.rs","begin":[82,9],"end":[82,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"AutoCfg","id":"0:123:1833","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2592:1628":{"id":"2:2592:1628","crate_id":2,"name":"try_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Result","id":"2:41830:238","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"2:2562:269","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:51:1039":{"id":"0:51:1039","crate_id":0,"name":"new","span":{"filename":"src/lib.rs","begin":[127,0],"end":[129,1]},"visibility":"public","docs":"Create a new `AutoCfg` instance.\n\n# Panics\n\nPanics if `AutoCfg::new()` returns an error.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"AutoCfg","id":"0:123:1833","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}}},"paths":{"2:21005:30047":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"5:1475:5628":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"5:7437:30306":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"2:4079:13471":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"2:40333:7692":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"2:4447:2446":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"2:2629:123":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"2:10088:3923":{"crate_id":2,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"6:4878:6176":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"6:4686:6101":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"1:3154:27077":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"17:12645:4528":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"2:3530:3872":{"crate_id":2,"path":["core","array","drain","Drain"],"kind":"struct"},"6:6889:6649":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"5:687:117":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"17:9350:4181":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"1:8341:7341":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"1:10728:7774":{"crate_id":1,"path":["std","sys","unix","fd","FileDesc"],"kind":"struct"},"17:14434:5015":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"16:2504:5077":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"17:11719:20623":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"2:44246:7143":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"2:21467:8345":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"17:13851:4844":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"1:482:3935":{"crate_id":1,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"2:9638:2619":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"9:507:5703":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"2:40313:6776":{"crate_id":2,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"17:10628:4233":{"crate_id":17,"path":["object","read","elf","attributes","AttributeIndexIterator"],"kind":"struct"},"6:4676:6100":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"6:4989:6238":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"18:766:24585":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"2:9630:127":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"5:7590:3892":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"16:7828:5433":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"17:11000:4274":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"1:1550:5629":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"17:11327:4303":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"1:7832:2877":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"2:2883:5368":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"17:11337:20743":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"6:5829:6318":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"2:47969:7271":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"2:2794:2449":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"2:6270:6764":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindows"],"kind":"struct"},"5:4988:2296":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"1:939:7636":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"17:9328:2319":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"17:10588:4227":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsection"],"kind":"struct"},"1:12023:346":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"17:13148:4628":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"17:10575:4226":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsectionIterator"],"kind":"struct"},"16:7782:5425":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"2:21593:6780":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"1:10066:2832":{"crate_id":1,"path":["std","sys","unix","os","SplitPaths"],"kind":"struct"},"2:46586:7205":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"1:8126:2343":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"2:2871:5364":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"2:40476:7046":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"17:14056:4899":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"2:3665:2650":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"1:5812:2421":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"2:43769:2750":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"5:1376:98":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"1:504:3869":{"crate_id":1,"path":["std","thread","PanicGuard"],"kind":"struct"},"16:8294:135":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"16:7708:5114":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"17:10456:7516":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"2:21906:6782":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"1:1874:2707":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"2:42958:7103":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"17:8848:20613":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"2:40425:7041":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"2:12225:2723":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"1:11023:3962":{"crate_id":1,"path":["std","sys","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"1:10522:2336":{"crate_id":1,"path":["std","sys","unix","stdio","Stdin"],"kind":"struct"},"1:903:3888":{"crate_id":1,"path":["std","collections","hash","map","ExtractIf"],"kind":"struct"},"16:2574:5080":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"16:6171:218":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"6:7622:6702":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"2:42760:135":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"2:21584:2879":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"15:0:2144":{"crate_id":15,"path":["addr2line"],"kind":"module"},"2:11281:7685":{"crate_id":2,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"2:8780:2724":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"16:7534:5110":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"17:12598:4522":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"1:914:7631":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"17:12513:4510":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"5:5328:3850":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"16:2832:5091":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"2:20964:2605":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"9:357:19550":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"17:13914:4860":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"2:20977:31653":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_left","Rotate"],"kind":"struct"},"16:4921:5145":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"2:1837:189":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"16:4344:5129":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"1:10752:7376":{"crate_id":1,"path":["std","sys","unix","fs","StatxExtraFields"],"kind":"struct"},"16:5963:7554":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"17:12658:4531":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"1:10087:7764":{"crate_id":1,"path":["std","sys","unix","os","EnvStrDebug"],"kind":"struct"},"6:6868:6635":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"6:1537:5814":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"1:2592:3923":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"17:9650:4209":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"2:5691:6758":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"5:1525:7656":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"6:1546:5820":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"2:22459:2719":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"16:6243:7579":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"2:12160:2370":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"17:12305:4460":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"16:6560:3837":{"crate_id":16,"path":["gimli","read","lazy","imp","LazyArc"],"kind":"struct"},"6:7616:6701":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"15:306:19642":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"2:43647:2320":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"17:8594:20597":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"2:45938:7180":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"2:48064:7278":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"6:6012:6425":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"17:12671:4242":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"1:8925:8333":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"6:501:5734":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"2:41898:207":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"17:12024:4398":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"5:7479:3884":{"crate_id":5,"path":["alloc","rc","UniqueRc"],"kind":"struct"},"17:10227:7501":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"6:123:14141":{"crate_id":6,"path":["libc","unix","fpos_t"],"kind":"enum"},"1:4154:8285":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"2:42677:7091":{"crate_id":2,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"17:14033:4891":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"17:11048:7536":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"17:9945:4193":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"16:5866:5186":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"2:2372:206":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"17:2150:20676":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"2:44658:7166":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"17:14145:4921":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"1:11221:162":{"crate_id":1,"path":["std","sys","unix","time","Instant"],"kind":"struct"},"2:40393:7035":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"5:5861:3872":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"1:8158:2315":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"17:9886:7485":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"2:7999:2771":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"11:423:33364":{"crate_id":11,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"11:2058:5354":{"crate_id":11,"path":["hashbrown","set","Entry"],"kind":"enum"},"16:6467:5255":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"16:2618:5082":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"11:785:3872":{"crate_id":11,"path":["hashbrown","map","Drain"],"kind":"struct"},"17:12437:4493":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"18:582:2605":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"17:12934:4589":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"17:12452:4498":{"crate_id":17,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"6:4908:6188":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"16:5384:20547":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"6:1703:5923":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"1:10770:7382":{"crate_id":1,"path":["std","sys","unix","fs","FilePermissions"],"kind":"struct"},"2:45661:7169":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"2:3034:2321":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"2:2336:212":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"6:6159:6487":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"2:44446:7160":{"crate_id":2,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"1:11985:25161":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"2:42782:76":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"5:4196:2296":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"1:2169:1823":{"crate_id":1,"path":["std","fs"],"kind":"module"},"1:7653:7291":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"17:11971:4391":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"1:11524:7722":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"17:13778:4828":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"17:13487:4705":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"16:7792:20559":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"16:6915:5106":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"16:6879:5325":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"16:6456:5254":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"2:7635:2452":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"2:46946:7226":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"2:44099:7134":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"6:5140:6309":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"1:3923:8258":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"6:6718:6566":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"15:327:19646":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"2:41473:8256":{"crate_id":2,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"16:5634:5156":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"11:2085:7642":{"crate_id":11,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"1:6527:2418":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"1:7904:7738":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"2:44577:239":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"1:4370:7725":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"18:707:2726":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"17:14013:4884":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"5:6827:3900":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstBufDrop"],"kind":"struct"},"17:11934:4378":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"17:582:4169":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"1:7890:7294":{"crate_id":1,"path":["std","hash","random","RandomState"],"kind":"struct"},"2:22873:201":{"crate_id":2,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"17:10410:7508":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"1:8465:2362":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"2:43535:7703":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"17:14068:4902":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"11:324:5624":{"crate_id":11,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"6:495:5732":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"5:3180:5630":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"2:22320:30289":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"5:6915:276":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"5:4395:2296":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"1:922:7633":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"2:39447:3707":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"11:1541:7648":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"2:1749:13766":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"16:5816:5178":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"2:43526:6777":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"1:11440:3967":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"6:4968:6223":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"17:11951:4381":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"2:46186:7194":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"5:3206:5631":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"16:7318:5391":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"5:3596:2770":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"2:43555:7704":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"2:22906:194":{"crate_id":2,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"17:13451:4674":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"16:7067:5351":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"1:6883:3952":{"crate_id":1,"path":["std","sys","common","thread_local","abort_on_dtor_unwind","DtorUnwindGuard"],"kind":"struct"},"11:2351:2650":{"crate_id":11,"path":["hashbrown","table","IntoIter"],"kind":"struct"},"1:9469:3959":{"crate_id":1,"path":["std","sys","unix","fs","Dir"],"kind":"struct"},"6:6079:6459":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"2:40229:2273":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"2:1772:3689":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"6:574:5779":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"17:13802:4833":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"1:10525:2338":{"crate_id":1,"path":["std","sys","unix","stdio","Stdout"],"kind":"struct"},"6:5075:6277":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"18:727:4066":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"6:1591:5851":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"2:2895:13738":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"17:9823:20629":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"2:4418:3909":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"6:5068:6274":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"5:2245:6733":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"1:10782:2878":{"crate_id":1,"path":["std","sys","unix","fs","FileTimes"],"kind":"struct"},"17:14221:4966":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"17:14536:5040":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"11:772:5628":{"crate_id":11,"path":["hashbrown","map","Values"],"kind":"struct"},"17:14514:5034":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"1:10463:3960":{"crate_id":1,"path":["std","sys","unix","stack_overflow","Handler"],"kind":"struct"},"1:3953:8260":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"17:14024:4888":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"2:21560:2879":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","sealed","Sealed"],"kind":"trait"},"17:11295:4298":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"16:3232:5062":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"5:2962:33339":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"2:4912:860":{"crate_id":2,"path":["core","iter"],"kind":"module"},"5:4034:3850":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"18:624:33399":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"2:2841:2761":{"crate_id":2,"path":["core","marker","Freeze"],"kind":"trait"},"2:44386:7153":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"1:11369:7394":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"17:11661:4335":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"2:21415:8341":{"crate_id":2,"path":["core","core_simd","eq","SimdPartialEq"],"kind":"trait"},"1:2373:2871":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"6:4902:6186":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"2:3337:13475":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"2:47508:7262":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"1:4626:6581":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"2:9582:1826":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"17:10197:7497":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"9:450:19535":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"2:3052:139":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"11:1876:5631":{"crate_id":11,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"2:22807:199":{"crate_id":2,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"17:14308:4982":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"5:3802:3888":{"crate_id":5,"path":["alloc","collections","linked_list","ExtractIf"],"kind":"struct"},"16:7006:7592":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"16:5727:5165":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"6:6228:6501":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"1:10420:2382":{"crate_id":1,"path":["std","sys","unix","process","process_common","CommandArgs"],"kind":"struct"},"16:5121:5151":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"2:30373:70":{"crate_id":2,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"1:6417:2415":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"2:2950:13745":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"17:12172:4424":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"2:2847:2763":{"crate_id":2,"path":["core","marker","Tuple"],"kind":"trait"},"1:4902:8314":{"crate_id":1,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"6:548:5766":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"16:6968:20555":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"2:21565:8342":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","ToBitMask"],"kind":"trait"},"11:759:5627":{"crate_id":11,"path":["hashbrown","map","Keys"],"kind":"struct"},"11:1635:3844":{"crate_id":11,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"6:5004:6247":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"1:1538:2650":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"16:6818:5320":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"5:1140:32187":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"2:12803:165":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"17:9277:4179":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"6:6682:6550":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"2:21160:8347":{"crate_id":2,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"2:3084:8237":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"15:288:19641":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"2:40675:7055":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"16:5905:5189":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"5:629:7653":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"16:5403:4172":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"16:3797:5124":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"5:1444:2650":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"11:1687:156":{"crate_id":11,"path":["hashbrown","set","HashSet"],"kind":"struct"},"2:11965:7119":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"17:13071:4608":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"1:363:7708":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"1:7884:126":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"1:5740:2411":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"6:5921:6371":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"11:2238:5354":{"crate_id":11,"path":["hashbrown","table","Entry"],"kind":"enum"},"2:48041:7277":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"2:10462:2770":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"1:11040:3964":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"18:515:4033":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"6:6071:6458":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"1:10976:2385":{"crate_id":1,"path":["std","sys","unix","process","process_common","ExitCode"],"kind":"struct"},"2:22741:197":{"crate_id":2,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"11:2334:2770":{"crate_id":11,"path":["hashbrown","table","IterMut"],"kind":"struct"},"2:42157:87":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"2:44458:13866":{"crate_id":2,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"1:8962:7751":{"crate_id":1,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"6:7556:6697":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"17:11845:4354":{"crate_id":17,"path":["object","archive","AixFileHeader"],"kind":"struct"},"11:822:7633":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"11:1855:3888":{"crate_id":11,"path":["hashbrown","set","ExtractIf"],"kind":"struct"},"5:1466:5627":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"2:11248:7684":{"crate_id":2,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"1:1758:2822":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"17:10714:7529":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"1:645:8206":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"6:5111:6299":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifc_ifcu"],"kind":"union"},"1:4808:8273":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"1:11342:7392":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"2:11322:13498":{"crate_id":2,"path":["core","slice","raw","from_raw_parts"],"kind":"function"},"16:2696:5085":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"2:40149:7022":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"18:491:4029":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"2:40342:2317":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"1:8215:7744":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"17:13162:4629":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"2:40062:30293":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"2:42315:2409":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"2:3960:2296":{"crate_id":2,"path":["core","array","Guard"],"kind":"struct"},"17:12554:4514":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"1:2940:135":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"6:7604:6699":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"2:9632:2616":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"2:2797:257":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"0:51:1039":{"crate_id":0,"path":["autocfg","new"],"kind":"function"},"17:13897:4857":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"1:10747:7374":{"crate_id":1,"path":["std","sys","unix","fs","FileAttr"],"kind":"struct"},"14:40:4378":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"1:4478:8289":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"5:3173:2365":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"6:5044:6267":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"2:45641:7168":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"16:6753:5306":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"1:1743:664":{"crate_id":1,"path":["std","env"],"kind":"module"},"5:6468:3872":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"17:10534:4223":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"17:13710:4811":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"1:5626:7289":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"1:12022:1154":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"6:4977:6229":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"2:7089:13710":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"1:9098:162":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"17:11023:4275":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"1:9093:247":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"17:12098:4411":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"16:3461:5121":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"17:10672:7522":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"14:215:5570":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"16:4497:5132":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"1:8374:8324":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"17:12911:4588":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"17:10962:4272":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"2:22030:8344":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"2:3421:71":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"2:9625:118":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"2:1934:6755":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"1:4146:8284":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"16:7523:5415":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"5:7286:2650":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"17:11586:4332":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"1:7565:3955":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"5:6666:3850":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"10:0:2140":{"crate_id":10,"path":["adler"],"kind":"module"},"17:14355:4994":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"17:14324:4986":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"16:6600:20553":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"6:4523:6042":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"5:3722:2333":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"1:12020:1666":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"1:8967:113":{"crate_id":1,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"2:3272:13535":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"16:7513:5414":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"2:23038:190":{"crate_id":2,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"1:3876:2102":{"crate_id":1,"path":["std","num"],"kind":"module"},"6:6700:6557":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"18:507:4030":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"1:9010:7758":{"crate_id":1,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"17:11991:4392":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"17:13838:4838":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"17:9711:33397":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"2:40913:3917":{"crate_id":2,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"18:736:24584":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"6:596:5792":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"6:119:14140":{"crate_id":6,"path":["libc","unix","FILE"],"kind":"enum"},"2:3255:266":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"2:21210:13756":{"crate_id":2,"path":["core","core_simd","elements","const_ptr","SimdConstPtr","from_exposed_addr"],"kind":"foreign_type"},"6:4738:6105":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"1:3274:2335":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"17:10547:4224":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"6:4841:6160":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"2:41803:7693":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"1:5558:2381":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"2:11942:7118":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"2:43633:2319":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"5:7390:8222":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"5:7378:2368":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"2:9636:2618":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"17:13567:4767":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"11:1842:2365":{"crate_id":11,"path":["hashbrown","set","Iter"],"kind":"struct"},"17:10214:7500":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"17:14499:5033":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"17:9564:7480":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"17:11367:4306":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"6:4860:6168":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"5:2172:6727":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"1:3657:8257":{"crate_id":1,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"16:4613:5136":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"11:357:3840":{"crate_id":11,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"2:8671:8328":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"17:9521:7479":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"5:6101:2296":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"16:6361:5243":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"5:897:2365":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"17:13868:4849":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"6:7639:6707":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"2:45785:7174":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"1:8189:2318":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"5:2972:31859":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"2:41753:2770":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"2:2804:259":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"2:3300:13472":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"17:12484:4505":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"2:9282:30231":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"6:6059:6451":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"17:11244:4333":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"16:7041:5345":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"2:47989:7273":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"6:6813:6597":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"5:5430:1544":{"crate_id":5,"path":["alloc","str"],"kind":"module"},"11:2074:7640":{"crate_id":11,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"2:10530:2733":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"16:7722:5104":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"2:10680:7681":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"1:7584:3957":{"crate_id":1,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"1:11606:7398":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"2:9600:142":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"16:6083:19660":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"11:1562:7649":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"11:1036:7642":{"crate_id":11,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"1:12026:1631":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"2:2562:269":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"17:12123:4414":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"2:23005:193":{"crate_id":2,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"17:11137:7546":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"6:1718:5930":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"18:609:7458":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"16:6687:5292":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"2:4056:107":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"16:2766:5088":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"2:43815:2746":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"17:12007:4396":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"6:6100:6471":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"2:10071:3922":{"crate_id":2,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"2:44147:7136":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"17:10980:4209":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"16:6376:20552":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"1:5115:215":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"2:42997:7108":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"1:5612:232":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"2:42967:157":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"2:21252:8354":{"crate_id":2,"path":["core","core_simd","elements","float","SimdFloat"],"kind":"trait"},"2:40196:105":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"16:2380:5072":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"1:1556:5630":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"2:2681:2712":{"crate_id":2,"path":["core","error","Request"],"kind":"struct"},"1:5433:111":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"2:21343:13756":{"crate_id":2,"path":["core","core_simd","elements","mut_ptr","SimdMutPtr","from_exposed_addr"],"kind":"foreign_type"},"1:12031:805":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"1:9136:7366":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"5:7262:3862":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"5:1674:3850":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"1:4218:7723":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"2:32145:5408":{"crate_id":2,"path":["core","error","tags","Value"],"kind":"struct"},"2:21196:8349":{"crate_id":2,"path":["core","core_simd","elements","const_ptr","SimdConstPtr"],"kind":"trait"},"17:8926:20615":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"16:5661:5160":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"6:4998:6244":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"2:2849:112":{"crate_id":2,"path":["core","marker","ConstParamTy"],"kind":"trait"},"11:868:7639":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"2:44628:7163":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"1:2578:2330":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"2:1560:2296":{"crate_id":2,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"1:7365:25154":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"5:35:3846":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"17:14163:4924":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"17:10139:20648":{"crate_id":17,"path":["object","read","coff","import","ImportName"],"kind":"enum"},"6:1734:5934":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"2:4812:426":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"10:44:5643":{"crate_id":10,"path":["adler","Adler32"],"kind":"struct"},"2:10103:3928":{"crate_id":2,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"2:21809:8348":{"crate_id":2,"path":["core","core_simd","ord","SimdPartialOrd"],"kind":"trait"},"17:256:7464":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"17:10036:4195":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"17:9051:20596":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"1:10311:111":{"crate_id":1,"path":["std","sys","unix","process","process_common","Command"],"kind":"struct"},"2:40535:7052":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"2:47758:7265":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"16:2450:5075":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"6:6837:6609":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"1:10528:2334":{"crate_id":1,"path":["std","sys","unix","stdio","Stderr"],"kind":"struct"},"1:12025:1544":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"2:40434:7042":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"16:4417:5130":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"11:1127:7645":{"crate_id":11,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"18:80:24573":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"1:2938:238":{"crate_id":1,"path":["std","io","error","Result"],"kind":"type_alias"},"2:3285:31652":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"1:11463:7720":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"17:12422:4489":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"17:10316:4214":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"1:1962:209":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"2:21918:31657":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"5:2051:7657":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"6:4854:6165":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"17:12111:4413":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"18:681:4054":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"2:42989:7107":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"17:14134:4917":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"17:14346:4992":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"17:10430:7510":{"crate_id":17,"path":["object","read","elf","note","GnuPropertyIterator"],"kind":"struct"},"1:6413:2414":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"2:40486:7047":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"6:527:5754":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"1:11145:2384":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"17:9998:4162":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"16:6545:5266":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"2:40875:7058":{"crate_id":2,"path":["core","iter","sources","from_coroutine","FromCoroutine"],"kind":"struct"},"18:538:4038":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"11:1846:2650":{"crate_id":11,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"2:11981:7120":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"5:5791:263":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"1:928:8223":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"17:1184:7469":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"1:4785:3941":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"1:945:7638":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"16:7492:5411":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"1:2202:2305":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"6:4388:5967":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"17:10366:7504":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"6:6114:6473":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"16:6929:5329":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"2:41664:7085":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"17:13286:4645":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"1:4456:8288":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"1:12041:854":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"0:123:1833":{"crate_id":0,"path":["autocfg","AutoCfg"],"kind":"struct"},"17:11448:20620":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"18:574:4030":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"11:1010:7640":{"crate_id":11,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"1:8839:2365":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"17:13826:4835":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"16:7554:5111":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"2:43434:6773":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"17:10397:7507":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"11:2423:19612":{"crate_id":11,"path":["hashbrown","Equivalent"],"kind":"trait"},"17:11111:7544":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"6:5910:6363":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"17:14110:4913":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"17:12750:4544":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"4:0:2137":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"2:40525:7051":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"2:2552:163":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"16:5419:4173":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"6:6781:6586":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"2:2891:8338":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"16:8281:5493":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"6:5941:6384":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"1:5767:2412":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"17:13040:4603":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"1:6631:245":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"5:261:3850":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"16:2788:5089":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"2:7259:2343":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"17:14001:4883":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"2:40665:2318":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"17:9574:33394":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"2:43751:2751":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"17:13174:4630":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"5:3737:7657":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"2:2378:213":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"1:8289:7744":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"2:46405:7201":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"1:7648:7733":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"2:32105:2386":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"16:5760:20549":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"5:3332:3888":{"crate_id":5,"path":["alloc","collections","btree","set","ExtractIf"],"kind":"struct"},"1:8482:2363":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"18:671:7463":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"6:4529:6044":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"17:3441:7476":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"2:42437:2617":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"2:8672:7677":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"2:2877:13736":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"6:4847:6163":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"2:1683:1193":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"2:41813:13818":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"2:10607:7680":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"5:3671:3850":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"1:3272:2334":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"2:42079:86":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"2:2899:13737":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"2:7996:2369":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"1:3722:7721":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"2:25:664":{"crate_id":2,"path":["core","env"],"kind":"macro"},"6:654:14498":{"crate_id":6,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"11:1072:33370":{"crate_id":11,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"1:12042:1706":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"2:9581:238":{"crate_id":2,"path":["core","fmt","Result"],"kind":"type_alias"},"1:11184:2881":{"crate_id":1,"path":["std","sys","unix","time","SystemTime"],"kind":"struct"},"2:44279:2755":{"crate_id":2,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"5:7574:3888":{"crate_id":5,"path":["alloc","vec","extract_if","ExtractIf"],"kind":"struct"},"2:2184:13757":{"crate_id":2,"path":["core","ptr","from_exposed_addr_mut"],"kind":"function"},"6:1514:5804":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"17:12074:4407":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"2:41502:7076":{"crate_id":2,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"1:859:2650":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"2:45886:7178":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"2:8003:13714":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"16:3600:5122":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"2:40689:7056":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"11:731:7632":{"crate_id":11,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"1:8980:24632":{"crate_id":1,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"1:909:7647":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"6:4506:6036":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"16:6318:5240":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"2:45956:7181":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"16:6569:5103":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"2:10735:2750":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"2:46822:7224":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"6:4428:6000":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"11:1882:5632":{"crate_id":11,"path":["hashbrown","set","Union"],"kind":"struct"},"2:39298:222":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"16:5995:5055":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"17:13816:4834":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"17:11407:20619":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"2:32159:2627":{"crate_id":2,"path":["core","error","tags","Ref"],"kind":"struct"},"2:21208:30773":{"crate_id":2,"path":["core","core_simd","elements","const_ptr","SimdConstPtr","with_addr"],"kind":"foreign_type"},"6:4800:6137":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"6:4496:6030":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"17:13188:4631":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"2:23071:195":{"crate_id":2,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"17:10916:7533":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"5:1778:3888":{"crate_id":5,"path":["alloc","collections","btree","map","ExtractIf"],"kind":"struct"},"2:2546:79":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"2:46354:7200":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"16:7102:20556":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"2:43623:2736":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"2:44402:7157":{"crate_id":2,"path":["core","time","Nanoseconds"],"kind":"struct"},"3:234:238":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"2:39220:13474":{"crate_id":2,"path":["core","ops","coroutine","CoroutineState"],"kind":"enum"},"5:6959:3901":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"16:8205:20561":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"2:21814:8356":{"crate_id":2,"path":["core","core_simd","ord","SimdOrd"],"kind":"trait"},"16:4527:5133":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"16:7768:5102":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"17:2012:7470":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"16:2744:5087":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"16:7597:33383":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"11:1145:7646":{"crate_id":11,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"6:1697:5922":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"2:47696:7264":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"0:48:655":{"crate_id":0,"path":["autocfg","emit"],"kind":"function"},"2:48156:7282":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"17:10265:7502":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"1:11599:7398":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"2:4363:3908":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"17:11535:4328":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"1:1910:710":{"crate_id":1,"path":["std","ffi"],"kind":"module"},"16:5673:5100":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"6:5052:6269":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"1:11327:7391":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"2:48094:7280":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"11:122:3838":{"crate_id":11,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"5:2133:3869":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"17:13632:4803":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"17:13244:4638":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"2:22:738":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"11:1525:19617":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"2:22381:30297":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"1:836:2365":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"16:7544:5416":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"17:3232:7475":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"1:8179:2317":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"5:2964:6730":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"2:43901:2316":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"1:723:154":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"1:10958:25089":{"crate_id":1,"path":["std","sys","unix","process","process_common","ProgramKind"],"kind":"enum"},"5:3240:5632":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"2:40102:7020":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"2:7691:179":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"1:9117:2881":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"17:13010:4598":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"9:330:5681":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"11:1850:3872":{"crate_id":11,"path":["hashbrown","set","Drain"],"kind":"struct"},"6:1528:5809":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"2:10280:2879":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"5:4761:725":{"crate_id":5,"path":["alloc","fmt"],"kind":"module"},"6:4488:6028":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"16:2428:5074":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"1:6181:7729":{"crate_id":1,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"18:531:4035":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"2:22972:192":{"crate_id":2,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"1:9175:25389":{"crate_id":1,"path":["std","sys","common","thread_local","fast_local","DtorState"],"kind":"enum"},"14:202:13508":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"17:14118:4914":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"17:10186:4206":{"crate_id":17,"path":["object","read","coff","import","ImportObjectData"],"kind":"struct"},"2:43797:2745":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"1:4015:8264":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"6:1691:5919":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"2:46308:7198":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"2:22840:196":{"crate_id":2,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"11:2461:5634":{"crate_id":11,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"2:40114:2743":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"1:1819:2838":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"2:4833:31129":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"2:20992:31653":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_right","Rotate"],"kind":"struct"},"2:44174:7137":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"6:6666:6538":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"1:11202:7387":{"crate_id":1,"path":["std","sys","unix","time","Timespec"],"kind":"struct"},"6:4516:6039":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"1:1054:7640":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"6:5117:6302":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifconf"],"kind":"struct"},"16:6332:5095":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"2:7319:2403":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"11:298:5621":{"crate_id":11,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"1:6133:3933":{"crate_id":1,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"2:9427:2637":{"crate_id":2,"path":["core","fmt","builders","FormatterFn"],"kind":"struct"},"17:8895:20614":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"15:394:19652":{"crate_id":15,"path":["addr2line","DebugFile"],"kind":"enum"},"17:11062:7540":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"17:12473:4502":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"17:13611:4798":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"5:4166:2296":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"1:5958:3948":{"crate_id":1,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"11:841:7636":{"crate_id":11,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"11:693:2650":{"crate_id":11,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"6:483:5726":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"16:4986:5147":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"2:41586:30301":{"crate_id":2,"path":["core","net","parser","AddrKind"],"kind":"enum"},"17:2209:7474":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"2:2942:13743":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"2:41439:7067":{"crate_id":2,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"6:5897:6362":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"17:11235:4294":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"17:11547:4329":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"6:4461:6013":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"6:5969:6396":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"2:40041:7014":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"2:7503:13716":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"1:7717:8210":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"17:14090:4907":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"17:3565:7477":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"6:4616:6088":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"17:13202:4634":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"1:8791:210":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"6:6798:6591":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"5:2692:6737":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"6:1570:5837":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"1:10802:126":{"crate_id":1,"path":["std","sys","unix","fs","DirBuilder"],"kind":"struct"},"1:10328:26838":{"crate_id":1,"path":["std","sys","unix","process","process_common","Argv"],"kind":"struct"},"16:3032:5117":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"2:3021:124":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"17:9985:7492":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"1:4025:8265":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"16:7613:7621":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"6:4440:6003":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"6:5982:6402":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"1:3235:2339":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"16:2907:5094":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"6:475:5721":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"2:45855:7177":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"2:21459:2879":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"1:1072:7646":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"1:8275:8287":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"2:22708:200":{"crate_id":2,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"17:11490:4326":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"6:4647:6098":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"16:6017:20550":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"2:10290:251":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"5:7302:6743":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"2:42237:89":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"1:1040:5354":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"6:4893:6180":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"17:14083:4906":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"17:13792:4832":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"16:2284:19661":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"1:8540:2366":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"5:4350:277":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"2:43591:2112":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"6:6658:6533":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"6:4776:6126":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"6:4455:6010":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"1:9153:7761":{"crate_id":1,"path":["std","sys","common","thread_local","fast_local","Key"],"kind":"struct"},"2:41456:7069":{"crate_id":2,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"6:4814:6143":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"2:22939:191":{"crate_id":2,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"2:21007:30050":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"2:3003:13473":{"crate_id":2,"path":["core","ops","coroutine","Coroutine"],"kind":"trait"},"1:3160:27813":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"6:4549:6055":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"17:14173:4929":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"2:47618:7263":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"1:7702:8209":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"1:3317:2326":{"crate_id":1,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"17:14076:4905":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"2:46483:7203":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"1:7525:7781":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"17:14126:4916":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"16:5648:7552":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"1:849:2770":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"1:8880:7359":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"1:11357:7732":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"1:11277:3965":{"crate_id":1,"path":["std","sys_common","once","futex","CompletionGuard"],"kind":"struct"},"6:7598:6698":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"5:2143:6725":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"6:1558:5829":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"1:8297:7340":{"crate_id":1,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"9:486:19534":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"18:719:4063":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"16:7269:33384":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"17:9607:7481":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"2:23518:248":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"2:9287:30852":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"2:21296:8355":{"crate_id":2,"path":["core","core_simd","elements","int","SimdInt"],"kind":"trait"},"2:47010:7228":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"16:2881:5093":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"16:6792:5319":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"1:5382:2377":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"2:4032:7668":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"2:40383:7034":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"2:40122:2742":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"2:2946:13744":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"2:40411:7038":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"2:2903:13739":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"17:10383:7506":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"17:9701:7482":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"17:14448:5022":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"17:13981:4876":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"1:8785:2382":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"2:45975:7182":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"5:7331:2650":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"16:6485:5098":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"1:8534:2365":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"2:8670:8212":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"16:6721:20554":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"2:44068:7130":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"6:1521:5806":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"17:1075:7468":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"5:207:3848":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"17:10637:4234":{"crate_id":17,"path":["object","read","elf","attributes","AttributeReader"],"kind":"struct"},"2:43715:2752":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"6:6898:6652":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"16:2548:5079":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"1:11592:25439":{"crate_id":1,"path":["std","panicking","panic_count","MustAbort"],"kind":"enum"},"17:12711:4539":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"16:2722:5086":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"1:11300:2390":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"11:2394:3888":{"crate_id":11,"path":["hashbrown","table","ExtractIf"],"kind":"struct"},"2:43964:2743":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"1:1406:156":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"13:226:5619":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"17:11261:4295":{"crate_id":17,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"14:221:5572":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"2:40402:7037":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"16:6425:5251":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"1:12044:13":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"17:13554:4760":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"17:14100:4910":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"5:6587:2650":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"17:11306:4300":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"1:9023:7362":{"crate_id":1,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"2:2640:135":{"crate_id":2,"path":["core","error","Error"],"kind":"trait"},"1:12038:1648":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"6:4473:6022":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"2:9849:157":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"2:22397:30333":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"2:22343:6796":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"1:7121:26828":{"crate_id":1,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"2:42196:94":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"17:12225:4437":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"5:5976:2408":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"16:2321:5063":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"2:44031:13506":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"1:3233:2338":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"17:13693:4810":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"16:149:3835":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"18:521:24586":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"2:2798:256":{"crate_id":2,"path":["core","marker","StructuralEq"],"kind":"trait"},"6:4351:5940":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"2:22774:198":{"crate_id":2,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"6:7668:6714":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"6:1650:5895":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"2:2549:78":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"17:13906:4858":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"2:3055:140":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"1:4690:8288":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"1:4612:8263":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"16:6401:5097":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"2:5633:6757":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"5:7490:255":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"5:5945:72":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"17:11272:4296":{"crate_id":17,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"1:4731:8277":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"6:5009:6249":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"11:2487:5638":{"crate_id":11,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"17:11910:4377":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"1:3491:2307":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"14:31:7627":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"11:796:3888":{"crate_id":11,"path":["hashbrown","map","ExtractIf"],"kind":"struct"},"16:6261:7587":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"17:12685:4536":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"17:9972:7491":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"11:344:33361":{"crate_id":11,"path":["hashbrown","raw","FullBucketsIndices"],"kind":"struct"},"6:4932:6202":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"16:7677:222":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"17:11742:4340":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"2:44374:7150":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"5:7294:222":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"17:10750:4235":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"2:46232:7195":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"16:8239:5408":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"16:5435:5154":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"17:10494:4219":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"17:12237:4440":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"1:6798:8339":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"6:6691:6556":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"6:6711:6562":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"2:47942:7269":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"2:39440:7691":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"2:44641:181":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"16:3764:5123":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"2:43697:2753":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"14:187:19629":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"1:8442:2361":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"2:40898:7060":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"2:46506:7204":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"5:1516:222":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"6:7692:6719":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"1:3482:25042":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"2:45685:7170":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"1:11294:7388":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"17:13228:4636":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"18:481:4028":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"1:3967:8261":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"17:11151:7547":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"2:22199:6784":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"1:6597:2424":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutexGuard"],"kind":"struct"},"16:5982:5199":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"17:12208:4429":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"2:41416:171":{"crate_id":2,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"7:0:1696":{"crate_id":7,"path":["unwind"],"kind":"module"},"17:14401:5008":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"17:12810:4552":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"18:644:4030":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"1:8817:2384":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"2:6974:13718":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"1:12001:25085":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"14:0:2143":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"17:11316:4302":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"9:0:2139":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"17:11393:135":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"1:11165:7157":{"crate_id":1,"path":["std","sys","unix","time","Nanoseconds"],"kind":"struct"},"18:690:4057":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"18:564:4040":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"16:3888:5126":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"5:1120:32215":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"1:11580:7397":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"16:7360:33387":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"18:113:24575":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"2:43545:6778":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"5:7252:3872":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"17:10698:7527":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"17:8978:20617":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"1:10145:7766":{"crate_id":1,"path":["std","sys","unix","os_str","Slice"],"kind":"struct"},"2:2509:2879":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"17:10661:7521":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"11:860:7638":{"crate_id":11,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"10:36:5642":{"crate_id":10,"path":["adler","algo","U32X4"],"kind":"struct"},"6:4914:6191":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"2:2861:8337":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"2:40454:7044":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"1:7674:3961":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"16:2933:19688":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"16:2406:5073":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"16:7694:5113":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"17:9959:7490":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"2:5485:2296":{"crate_id":2,"path":["core","iter","adapters","filter","next_chunk","Guard"],"kind":"struct"},"1:4298:7724":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"16:4835:5142":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"1:3473:1826":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"16:2526:5078":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"11:2260:7640":{"crate_id":11,"path":["hashbrown","table","OccupiedEntry"],"kind":"struct"},"16:5588:5099":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"17:10420:4118":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"16:6893:5327":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"1:5368:2376":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"17:9617:33395":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"6:5123:6305":{"crate_id":6,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"16:3830:5125":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"17:10278:7503":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"2:21591:8351":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"2:30949:2605":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"1:7827:2876":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"1:4624:6579":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"2:42444:2616":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"2:6276:6763":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindowsInner"],"kind":"struct"},"6:1576:5839":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"17:11074:7541":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"2:40286:2288":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"1:3195:2337":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"6:4543:6052":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"6:4947:6208":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"17:12778:4548":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"2:48015:7275":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"11:101:5620":{"crate_id":11,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"16:2969:19689":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"1:8855:2650":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"1:893:3872":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"5:1484:7647":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"2:3182:223":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"17:10440:7511":{"crate_id":17,"path":["object","read","elf","note","GnuProperty"],"kind":"struct"},"6:4364:5949":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"17:10903:7532":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"0:49:1846":{"crate_id":0,"path":["autocfg","rerun_path"],"kind":"function"},"2:43946:2741":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"6:4789:6130":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"1:2419:1824":{"crate_id":1,"path":["std","io"],"kind":"module"},"1:8315:7748":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"1:6344:186":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"1:9003:7757":{"crate_id":1,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"16:5322:5152":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"17:9455:33389":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"6:4783:6127":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"1:557:7709":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"11:2165:5633":{"crate_id":11,"path":["hashbrown","table","HashTable"],"kind":"struct"},"2:45753:7173":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"17:11617:4333":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"16:7651:7622":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"1:6149:3947":{"crate_id":1,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"2:2288:110":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"5:7223:2975":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"17:9137:4175":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"5:1104:32186":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"5:824:3856":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"6:6764:6585":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"2:46330:7199":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"2:39364:226":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"6:5033:6261":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"1:5402:2378":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"1:5733:2410":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"2:21382:8346":{"crate_id":2,"path":["core","core_simd","elements","uint","SimdUint"],"kind":"trait"},"2:46740:7223":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"11:703:7631":{"crate_id":11,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"1:11803:3971":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"5:4076:2770":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"2:9095:83":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"2:43605:2740":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"2:30351:6750":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"5:7515:7667":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"2:4290:233":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"6:1604:5858":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"5:1259:5354":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"6:4870:6172":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"17:10370:7505":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"1:10792:137":{"crate_id":1,"path":["std","sys","unix","fs","FileType"],"kind":"struct"},"2:49980:8358":{"crate_id":2,"path":["core","core_simd","swizzle","Which"],"kind":"enum"},"5:784:3853":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"2:43911:2744":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"6:6804:6593":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"6:1501:5798":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"16:7568:5112":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"2:40201:2274":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"1:7990:3557":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"16:7582:5417":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"16:5612:5101":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"2:2787:249":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"1:7920:2333":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"6:6934:6671":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"1:8524:2364":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"2:12877:7688":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"17:10097:7495":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"16:2359:5071":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"2:39408:8216":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"2:41873:2365":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"2:30317:6810":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"1:11034:3963":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"2:2795:2759":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"2:9640:218":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"2:22028:2879":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"17:12790:4549":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"2:42979:2361":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"17:9242:4178":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"17:9070:4172":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"1:9058:7365":{"crate_id":1,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"2:43869:2748":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"17:12983:4596":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"13:0:2136":{"crate_id":13,"path":["std_detect"],"kind":"module"},"1:1863:1822":{"crate_id":1,"path":["std","error"],"kind":"module"},"1:3719:7720":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"2:2269:102":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"2:40364:7031":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"6:4535:6047":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"2:43425:6772":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"2:21022:30053":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"1:6284:232":{"crate_id":1,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"17:12970:4594":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"17:12373:4464":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"17:9752:7483":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"16:3655:4079":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"2:44421:129":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"6:1710:5926":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"2:41736:174":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"2:44378:7151":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"16:5049:5149":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"17:504:7467":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"6:7679:6715":{"crate_id":6,"path":["libc","unix","linux_like","linux","canxl_frame"],"kind":"struct"},"16:7284:7089":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"1:11157:27461":{"crate_id":1,"path":["std","sys","unix","thread","cgroups","Cgroup"],"kind":"enum"},"17:10165:20649":{"crate_id":17,"path":["object","read","coff","import","ImportType"],"kind":"enum"},"1:2193:136":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"2:40035:2742":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"1:9083:187":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"11:2317:2365":{"crate_id":11,"path":["hashbrown","table","Iter"],"kind":"struct"},"2:45707:7171":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"2:40882:7059":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"1:12043:1253":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"1:11990:8211":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"2:3266:13536":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"2:2341:132":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"2:45993:7183":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"1:12035:800":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"11:2467:5635":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"17:13422:4654":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"2:12271:13500":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"2:30551:30719":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum64"],"kind":"enum"},"2:22308:2717":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"16:5939:5195":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"1:1760:2823":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"2:2852:2765":{"crate_id":2,"path":["core","marker","FnPtr"],"kind":"trait"},"1:8196:2319":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"1:8281:7747":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"5:4004:3872":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"1:621:2709":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"1:9464:2877":{"crate_id":1,"path":["std","sys","unix","fs","ReadDir"],"kind":"struct"},"16:6041:20551":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"17:10949:7535":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"1:5227:214":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"11:389:3842":{"crate_id":11,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"17:12765:4547":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"1:7514:4169":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"5:3570:183":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"17:10726:7530":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"1:10568:3961":{"crate_id":1,"path":["std","sys","unix","thread","Thread"],"kind":"struct"},"2:30445:30722":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum32"],"kind":"enum"},"2:42451:2618":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"2:4299:7672":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"17:14335:4991":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"16:7462:5410":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"11:680:2770":{"crate_id":11,"path":["hashbrown","map","IterMut"],"kind":"struct"},"2:10642:2749":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"2:42001:85":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"16:7342:33385":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"2:10005:3919":{"crate_id":2,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"17:13890:4855":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"1:1903:2708":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"6:7657:6710":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"17:13055:4607":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"16:6415:5250":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"17:9867:4190":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"16:6583:5268":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"2:2915:13740":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"2:43665:2749":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"6:6263:6526":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"1:4729:8276":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"2:47960:7270":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"2:22360:30265":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"16:6901:5105":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"17:10561:4225":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSection"],"kind":"struct"},"6:4755:6114":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"2:12433:118":{"crate_id":2,"path":["core","str","lossy","Debug"],"kind":"struct"},"17:10240:4193":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"6:6120:6476":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"16:3315:5120":{"crate_id":16,"path":["gimli","arch","LoongArch"],"kind":"struct"},"17:9896:20631":{"crate_id":17,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"2:40495:7048":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"6:542:5763":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"17:13876:4852":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"2:2936:5374":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"17:9445:7478":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"2:7038:31266":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"2:44366:7148":{"crate_id":2,"path":["core","str","LinesMap"],"kind":"struct"},"16:2810:5090":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"2:39267:6880":{"crate_id":2,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"9:52:19553":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"6:5974:6397":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"16:4949:5146":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"17:9852:20630":{"crate_id":17,"path":["object","read","archive","Members"],"kind":"enum"},"1:8135:2345":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"5:1275:7642":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"1:11503:7721":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"17:10084:7494":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"1:8146:2314":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"5:5372:2728":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"1:3416:2304":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"2:4294:7671":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"6:1639:5887":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"17:9372:4182":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"2:7540:144":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"2:2930:5373":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"2:9884:8249":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"1:10812:2314":{"crate_id":1,"path":["std","sys","unix","io","IoSlice"],"kind":"struct"},"2:43201:7111":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"6:533:5757":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"1:3157:27818":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"2:10721:2751":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"2:12220:2725":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"1:8909:8331":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"6:1664:5906":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"2:44585:219":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"2:4871:2346":{"crate_id":2,"path":["core","io","borrowed_buf","BorrowedBuf"],"kind":"struct"},"16:4641:5137":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"1:9037:25088":{"crate_id":1,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"17:11226:4293":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"1:8209:2316":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"6:5859:6343":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"2:40276:2289":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"1:10930:2843":{"crate_id":1,"path":["std","sys","unix","os","JoinPathsError"],"kind":"struct"},"2:41889:2650":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"2:47866:7267":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"2:12852:216":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"11:2479:33369":{"crate_id":11,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"6:4764:6119":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"18:652:4030":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"2:40306:2347":{"crate_id":2,"path":["core","io","borrowed_buf","BorrowedCursor"],"kind":"struct"},"2:44236:7139":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"1:6236:3948":{"crate_id":1,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"16:7391:20557":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"5:1494:7631":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"16:5743:5167":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"1:9015:7759":{"crate_id":1,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"2:2172:641":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"2:43453:6775":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"1:2905:3554":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"2:4474:2629":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"6:7371:6686":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"2:40889:2414":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"1:1821:2839":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"2:44211:7138":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"2:40355:7029":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"17:9762:33392":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"17:10023:7482":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"2:40511:4051":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"2:32166:6876":{"crate_id":2,"path":["core","error","Source"],"kind":"struct"},"9:426:19537":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"1:5555:2380":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"17:12196:4428":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"16:0:2145":{"crate_id":16,"path":["gimli"],"kind":"module"},"2:40213:30306":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"6:1596:5853":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"17:12154:4423":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"5:0:320":{"crate_id":5,"path":["alloc"],"kind":"module"},"2:40092:7019":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"17:13085:4610":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"6:4628:6097":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"16:2305:19687":{"crate_id":16,"path":["gimli","common","Vendor"],"kind":"enum"},"18:599:33398":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"5:678:262":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"16:7503:5109":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"1:10237:2388":{"crate_id":1,"path":["std","sys","unix","pipe","AnonPipe"],"kind":"struct"},"2:46138:7193":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"16:6279:5237":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"6:4401:5977":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"2:42236:1829":{"crate_id":2,"path":["core","sync","atomic","ATOMIC_USIZE_INIT"],"kind":"constant"},"2:7507:13715":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"2:12997:113":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"5:5138:2408":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"2:32152:7690":{"crate_id":2,"path":["core","error","tags","MaybeSizedValue"],"kind":"struct"},"2:42717:5452":{"crate_id":2,"path":["core","fmt","rt","Flag"],"kind":"enum"},"1:4029:8266":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"1:2614:2322":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"17:13723:4816":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"17:8686:20608":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"2:3049:138":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"17:14478:5030":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"6:6107:6472":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"17:13259:4642":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"11:1869:5630":{"crate_id":11,"path":["hashbrown","set","Difference"],"kind":"struct"},"16:4745:5139":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"18:96:24574":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"17:11872:4362":{"crate_id":17,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"5:2225:32341":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"6:580:5782":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"1:1567:5632":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"1:1562:5631":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"2:43921:2734":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"17:10059:4197":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"16:8167:7626":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"2:21158:2879":{"crate_id":2,"path":["core","core_simd","cast","sealed","Sealed"],"kind":"trait"},"5:2463:6734":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"17:14316:4985":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"17:10340:4216":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"17:14042:4892":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"6:5085:6282":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"5:4236:2365":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"16:7090:5353":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"18:755:4071":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"1:4893:8313":{"crate_id":1,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"5:6514:3850":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"1:12019:457":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"14:165:19622":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"16:6189:5235":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"2:11905:7115":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"11:483:154":{"crate_id":11,"path":["hashbrown","map","HashMap"],"kind":"struct"},"2:32253:2766":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"6:5015:6250":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"2:3045:2451":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"17:13101:4614":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"5:3185:32167":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"16:4053:5128":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"2:41645:7084":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"17:10292:4209":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"2:43617:2737":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"16:6960:7591":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"2:43463:7701":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"17:11162:4277":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"1:2363:2866":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"17:9921:7487":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"1:7739:2843":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"1:9961:7080":{"crate_id":1,"path":["std","sys","unix","net","Socket"],"kind":"struct"},"1:9264:2838":{"crate_id":1,"path":["std","sys","unix","args","Args"],"kind":"struct"},"2:45731:7172":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"17:13989:4877":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"1:8948:2413":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"2:10749:7682":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"1:533:3936":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"2:41770:7089":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"1:951:7639":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"2:3245:13748":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"1:8392:2360":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"6:4830:6152":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"2:42705:116":{"crate_id":2,"path":["core","fmt","rt","Count"],"kind":"enum"},"2:1653:6752":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"2:42950:7102":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"5:4849:229":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"2:13008:3933":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"2:44382:7152":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"6:6136:6481":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"17:11710:4300":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"17:14282:4973":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"2:25920:279":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"17:11788:4344":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"2:48026:7276":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"2:9100:90":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"17:8659:20595":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"16:2339:5065":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"2:43851:2747":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"2:2266:101":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"1:6583:2423":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutex"],"kind":"struct"},"5:1428:2770":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"17:8825:20612":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"6:7645:6708":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"17:8953:20616":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"2:40931:7063":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"1:3434:2306":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"2:39181:2772":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"17:10771:4237":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"16:5574:5096":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"17:2178:7471":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"2:12200:2730":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"6:489:5729":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"2:40137:13561":{"crate_id":2,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"2:8040:30229":{"crate_id":2,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"1:2195:2857":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"17:11201:4284":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"16:2472:5076":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"1:4037:8268":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"14:160:7627":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"8:0:2138":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"6:7633:6706":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"17:9933:7488":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"2:42733:74":{"crate_id":2,"path":["core","fmt","rt","Argument"],"kind":"struct"},"2:39322:224":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"2:43500:6776":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"2:44370:7149":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"6:5928:6375":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"1:12036:1650":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"16:6156:5230":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"16:6696:5293":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"17:13135:4627":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"16:8154:7623":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"11:2303:7652":{"crate_id":11,"path":["hashbrown","table","AbsentEntry"],"kind":"struct"},"2:43197:7110":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"2:2555:143":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"17:11573:4330":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"1:7723:2842":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"17:10112:7496":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"16:7862:5437":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"17:11281:4297":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"2:46900:7225":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"6:6222:6500":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"17:12136:4415":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"1:10934:3055":{"crate_id":1,"path":["std","sys","unix","os_str","Buf"],"kind":"struct"},"13:110:33371":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"2:22426:6806":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"2:2856:8335":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"17:13949:4866":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"16:4719:5138":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"17:11215:4289":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"2:4044:7669":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"17:12888:4579":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"2:44082:7133":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"2:2844:2450":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"0:50:1852":{"crate_id":0,"path":["autocfg","rerun_env"],"kind":"function"},"11:992:5354":{"crate_id":11,"path":["hashbrown","map","Entry"],"kind":"enum"},"16:5830:5179":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"17:12621:4527":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"17:13024:4601":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"2:43955:2742":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"16:4462:5131":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"16:7474:7614":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"6:4698:6102":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"11:1092:7644":{"crate_id":11,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"17:9488:33390":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"16:2596:5081":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"6:4556:6058":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"2:2558:270":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"1:8973:7753":{"crate_id":1,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"2:4373:2627":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"6:5146:6311":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"17:13685:4809":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"17:8765:20610":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"11:2286:7642":{"crate_id":11,"path":["hashbrown","table","VacantEntry"],"kind":"struct"},"6:4666:6099":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"1:7837:2874":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"17:13298:4652":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"6:0:884":{"crate_id":6,"path":["libc"],"kind":"module"},"17:11473:4139":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"1:10943:1828":{"crate_id":1,"path":["std","sys","unix","process","process_common","Stdio"],"kind":"enum"},"17:434:4125":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"6:5891:6361":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"6:6741:6584":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"5:3214:5629":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"16:2670:5084":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"1:2654:2332":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"16:8195:5486":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"6:5955:6395":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"2:40130:2741":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"5:2968:31860":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"16:5712:5162":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"1:12039:1649":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"1:12033:803":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"6:1913:15490":{"crate_id":6,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"16:4806:5141":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"5:1013:3850":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"6:507:5737":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"17:14460:5024":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"17:13973:4875":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"1:3824:7722":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"6:6128:6478":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"5:7240:6742":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"17:11173:20742":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"5:3219:32177":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"17:14420:5013":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"1:7912:2331":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"2:46284:7197":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"17:13966:4874":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"17:11086:7542":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"1:5418:2379":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"1:8263:7338":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"17:12876:4577":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"6:5992:6409":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"18:614:33401":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"17:14156:4922":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"17:10507:4221":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"5:7453:2270":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"2:46452:7202":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"6:4884:6177":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"17:14378:5007":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"17:10012:4209":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"17:10603:4229":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsectionIterator"],"kind":"struct"},"6:4939:1103":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"2:9642:2620":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"17:10616:4230":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsection"],"kind":"struct"},"17:10468:4217":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"17:13575:4768":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"6:4578:6071":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"1:1063:7642":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"2:47904:7268":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"2:41830:238":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"17:12531:4511":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"2:10487:2320":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"6:4610:6086":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"1:5619:3948":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"11:2494:2368":{"crate_id":11,"path":["hashbrown","TryReserveError"],"kind":"enum"},"2:41923:88":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"6:4710:6103":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"2:48117:7281":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"1:6530:2419":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"17:13667:4804":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"16:6844:5321":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"2:12214:2726":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"6:6927:6668":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"2:39461:6886":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"2:44670:5641":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"2:40050:7015":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"16:6742:5305":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"17:12830:4553":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"2:7582:128":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"5:7504:6748":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"1:4951:8320":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"1:3388:2296":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"6:6169:6489":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"18:548:153":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"16:8050:5474":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"5:5997:14060":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"17:11124:7545":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"2:47366:7261":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"1:1796:2832":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"17:12698:4537":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"5:276:2454":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"2:43930:2732":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"6:5867:6345":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"6:6047:6446":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"6:4566:6065":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"2:4427:2628":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"17:9660:33393":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"2:11730:13826":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"17:400:7466":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"17:11351:4305":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"2:46262:7196":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"11:427:33365":{"crate_id":11,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"1:1965:208":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"2:45916:7179":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"1:4727:8274":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"2:11746:7686":{"crate_id":2,"path":["core","slice","GetManyMutError"],"kind":"struct"},"16:8115:5481":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"17:11389:7549":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"5:3144:99":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"6:1682:5913":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"5:5634:3886":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"18:590:4041":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"1:2361:2865":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"2:6873:2658":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"1:10757:2874":{"crate_id":1,"path":["std","sys","unix","fs","OpenOptions"],"kind":"struct"},"18:636:4053":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"2:40373:7032":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"1:3917:8259":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"11:1051:19616":{"crate_id":11,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"6:4808:6141":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"17:11098:7543":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"2:41685:205":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"2:39386:228":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"2:40156:7023":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"3:0:482":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"2:42942:7100":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"17:12252:4446":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"6:563:5774":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"17:11507:20621":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"2:46116:7192":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"2:12205:2724":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"1:8847:7750":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"2:39282:225":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"17:11191:4282":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"1:12032:802":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"6:4595:6079":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"16:4774:5140":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"2:44259:2754":{"crate_id":2,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"2:2866:5367":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"2:0:538":{"crate_id":2,"path":["core"],"kind":"module"},"2:5573:2296":{"crate_id":2,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"11:817:7647":{"crate_id":11,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"6:6961:6677":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"2:12790:148":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"2:40923:7061":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"1:918:7632":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"17:10646:4314":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"2:13101:8224":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"16:8181:5116":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"2:44394:7155":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"5:7423:2272":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"16:5017:5148":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"2:6281:3915":{"crate_id":2,"path":["core","iter","adapters","map_windows","Buffer"],"kind":"struct"},"16:5798:5173":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"2:43182:7109":{"crate_id":2,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"1:11968:7784":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"16:7128:7362":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"2:41881:2770":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"2:43474:7112":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"17:11639:4282":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"16:3065:4074":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"16:8072:5475":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"11:0:2141":{"crate_id":11,"path":["hashbrown"],"kind":"module"},"17:12267:4452":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"2:44225:13507":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"6:6819:6598":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"16:8097:5478":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"17:9531:33396":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"2:43939:2731":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"2:45815:7175":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"17:12465:4500":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"17:13274:4300":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"16:2864:5092":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"1:12040:1646":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"17:12724:4540":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"2:30357:6811":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"5:1505:7632":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"5:4428:3879":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"17:10788:20718":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"1:415:185":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"1:9457:136":{"crate_id":1,"path":["std","sys","unix","fs","File"],"kind":"struct"},"2:40904:2344":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"2:43443:7700":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"2:3088:8238":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"17:12086:4408":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"1:1534:2365":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"2:22284:6790":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"2:47980:7272":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"1:8319:6566":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"1:8000:2104":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"2:39634:27972":{"crate_id":2,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"5:6798:3886":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"16:6204:7561":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"17:9207:4177":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"1:7743:3706":{"crate_id":1,"path":["std","error","private","Internal"],"kind":"struct"},"16:7621:20558":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"1:8202:2320":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"17:9102:4174":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"1:867:5627":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"2:2799:115":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"2:40182:7027":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"2:21399:2879":{"crate_id":2,"path":["core","core_simd","elements","sealed","Sealed"],"kind":"trait"},"17:12496:4507":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"1:4116:26831":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"16:3915:5127":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"1:3360:2344":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"5:1413:2365":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"17:10520:4222":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"1:2511:2329":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"2:42118:93":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"17:13546:4757":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"0:0:1989":{"crate_id":0,"path":["autocfg"],"kind":"module"},"2:12825:31023":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"17:12543:4513":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"6:62:14086":{"crate_id":6,"path":["libc","unix","DIR"],"kind":"enum"},"6:4449:6008":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"1:12037:1647":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"2:21329:8350":{"crate_id":2,"path":["core","core_simd","elements","mut_ptr","SimdMutPtr"],"kind":"trait"},"1:4556:8306":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"5:6335:8432":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"9:393:19536":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"17:13676:4808":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"1:1545:3888":{"crate_id":1,"path":["std","collections","hash","set","ExtractIf"],"kind":"struct"},"12:0:2142":{"crate_id":12,"path":["rustc_std_workspace_alloc"],"kind":"module"},"2:1646:640":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"17:10685:7525":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"17:10478:1830":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"1:8551:2367":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"2:21481:6780":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"2:10438:2365":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"16:536:5052":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"1:5295:127":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"1:7995:3558":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"1:4167:8286":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"17:0:2146":{"crate_id":17,"path":["object"],"kind":"module"},"1:6057:3943":{"crate_id":1,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"16:6346:7590":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"2:41745:2365":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"16:3049:19690":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"11:1862:5629":{"crate_id":11,"path":["hashbrown","set","Intersection"],"kind":"struct"},"17:14522:5037":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"5:6817:3898":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"1:5487:1828":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"2:2510:13566":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"2:40443:7043":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"6:5023:6255":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"17:12997:4597":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"5:7406:106":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"1:2347:2861":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"2:21024:30051":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"2:46040:7184":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"16:4557:5134":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"6:4745:6107":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"16:7054:5348":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"2:30090:2716":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"2:7553:2453":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"17:12184:4427":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"1:12030:699":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"1:588:8203":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"6:1632:5883":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"6:7702:6721":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"2:41761:2650":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"6:7365:6684":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"2:9889:6768":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"16:6944:33382":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"1:7629:7290":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"2:40243:2275":{"crate_id":2,"path":["core","ffi","c_char"],"kind":"type_alias"},"2:4179:6756":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"1:7012:3953":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"1:637:7710":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"2:47160:7229":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"17:9003:20618":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"2:46976:7227":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"16:7884:20560":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"16:6226:7576":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"17:10447:5633":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"6:4375:5957":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"2:9634:2617":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"2:42458:2619":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"2:47820:7266":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"17:11381:4309":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"1:10830:27459":{"crate_id":1,"path":["std","sys","unix","kernel_copy","SpliceMode"],"kind":"enum"},"16:5363:5153":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"2:22335:6795":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"1:3981:8263":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"1:11375:7395":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"17:11761:4343":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"2:44390:7154":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"1:12034:804":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"6:7610:6700":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"2:2908:5369":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"6:4584:6074":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"19:0:1134":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"17:12959:4593":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"2:6092:6759":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"2:22433:2718":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"1:7844:2878":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"2:44398:7156":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"16:5696:20548":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"5:2037:2333":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"2:22146:6783":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"17:11358:20744":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"2:22447:2111":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"17:10738:7531":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"16:7736:5423":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"2:22268:6786":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"2:2182:13756":{"crate_id":2,"path":["core","ptr","from_exposed_addr"],"kind":"function"},"1:4138:8283":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"17:12062:4404":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"6:5104:6296":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"2:11760:2114":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"1:7628:2879":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"1:7867:137":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"2:4222:2626":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"17:14469:5028":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"16:4862:5143":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"17:261:7465":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"17:12737:4542":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"16:6352:5242":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"1:8270:7339":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"1:6453:2422":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"5:780:100":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"17:11886:4363":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"6:588:5787":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"6:6943:6674":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"17:9086:4173":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"2:44683:7167":{"crate_id":2,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"17:12846:4558":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"16:4889:5144":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"9:237:2361":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"1:10821:27463":{"crate_id":1,"path":["std","sys","unix","kernel_copy","FdHandle"],"kind":"enum"},"9:177:19602":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"17:11687:20622":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"6:4603:6084":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"2:21461:8343":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"14:7:7627":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"16:8134:5484":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"17:11815:4350":{"crate_id":17,"path":["object","archive","AixHeader"],"kind":"struct"},"2:42687:70":{"crate_id":2,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"2:46086:7191":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"5:1304:7646":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"2:42742:70":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"5:7272:32170":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"2:12016:2733":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"2:42040:92":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"7:31:19521":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"11:2368:3872":{"crate_id":11,"path":["hashbrown","table","Drain"],"kind":"struct"},"17:13758:4820":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"18:0:2147":{"crate_id":18,"path":["memchr"],"kind":"module"},"2:40463:7045":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"16:6531:5264":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"5:1290:7640":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"1:7854:2875":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"1:880:5628":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"1:7895:7295":{"crate_id":1,"path":["std","hash","random","DefaultHasher"],"kind":"struct"},"1:9088:246":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"2:44620:7705":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"17:9780:7484":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"6:4824:6149":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"2:42276:96":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"17:14269:4967":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"11:666:2365":{"crate_id":11,"path":["hashbrown","map","Iter"],"kind":"struct"},"17:14296:4979":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"17:9790:33391":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"1:5974:232":{"crate_id":1,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"2:4:1117":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"17:9912:7486":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"1:357:7707":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"1:6970:7855":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"1:8831:2385":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"1:5038:7726":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"6:1674:5912":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"2:4148:7670":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"6:569:5777":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"5:6984:3904":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"17:13922:4862":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"1:11131:2383":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatus"],"kind":"struct"},"2:46710:7222":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"16:5088:5150":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"2:15:2249":{"crate_id":2,"path":["core","write"],"kind":"macro"},"16:6268:33386":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"2:41962:95":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"1:2198:2858":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"5:5376:2729":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"2:2925:13742":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"2:44567:231":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"1:640:7712":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"17:13113:4616":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"2:40078:7018":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"2:30921:207":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"6:6913:6659":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"5:7466:2271":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"2:2809:2631":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"6:5885:6358":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"2:46664:7221":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"2:43513:7702":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"5:880:3858":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"16:7660:5421":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"16:2644:5083":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"1:9185:7370":{"crate_id":1,"path":["std","sys","personality","dwarf","eh","EHContext"],"kind":"struct"},"2:48000:7274":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"6:4434:6001":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"6:4480:6026":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"5:2961:2703":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"2:7544:166":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"1:5069:7726":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"1:0:1536":{"crate_id":1,"path":["std"],"kind":"module"},"2:1763:6753":{"crate_id":2,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"17:10126:4199":{"crate_id":17,"path":["object","read","coff","import","ImportFile"],"kind":"struct"},"5:3583:2365":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"1:4687:8315":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"18:699:4058":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"2:39342:227":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"11:2473:5636":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"2:2959:13747":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"2:22252:6785":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"1:3193:2336":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"2:10569:7679":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"17:12293:4457":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"2:44053:7124":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"2:2920:13741":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"2:32141:3706":{"crate_id":2,"path":["core","error","private","Internal"],"kind":"struct"},"6:4922:6196":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"1:1541:3872":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"1:8861:7358":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"1:3277:1825":{"crate_id":1,"path":["std","io","stdio","stderr"],"kind":"function"},"17:8713:20609":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"2:2887:8336":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"11:829:8223":{"crate_id":11,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"6:4955:6213":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"17:12945:4591":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"17:9390:136":{"crate_id":17,"path":["object","read","any","File"],"kind":"enum"},"2:10763:7683":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"5:7232:2650":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"2:43374:7699":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"6:6086:6460":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"6:4724:6104":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"1:10085:7765":{"crate_id":1,"path":["std","sys","unix","os","Env"],"kind":"struct"},"5:7323:2650":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"1:8803:2383":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"2:9841:153":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"1:3975:8262":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"2:48079:7279":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"18:660:7459":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"17:12043:4403":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"2:41822:217":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"1:3498:2309":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"16:7015:5344":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"6:6248:6515":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"6:5152:6314":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"2:2954:13746":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"2:40163:13562":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"enum"},"1:12029:697":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"6:7651:6709":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"17:12576:4521":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"16:4585:5135":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"2:30387:30720":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum16"],"kind":"enum"},"17:13215:4635":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"17:13739:4819":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"16:6513:5256":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"6:7388:6696":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"1:8893:8332":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"6:1496:5796":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"2:41609:7083":{"crate_id":2,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"2:13046:152":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"17:12280:4456":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"1:12017:408":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"2:41622:7338":{"crate_id":2,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"16:6499:5115":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"6:555:5769":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"2:45837:7176":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"2:9644:2621":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"16:6386:5247":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"1:2345:1874":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"6:5130:6308":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"6:7343:6683":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"7:78:19528":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"2:4651:13555":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"1:4622:6577":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"16:7436:5203":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"1:8226:8255":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"17:8794:20611":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"17:9172:4176":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"1:12024:1512":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"5:4365:3879":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"2:3260:145":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"6:1507:5801":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"17:10929:4269":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"1:8221:7746":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"1:12018:1036":{"crate_id":1,"path":["std","never"],"kind":"primitive"}},"external_crates":{"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":27}