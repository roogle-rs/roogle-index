{"root":"0:0:1787","crate_version":"1.1.0","includes_private":false,"index":{"2:3463:2998":{"id":"2:3463:2998","crate_id":2,"name":"AddAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3465:271"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13271:2176":{"id":"2:13271:2176","crate_id":2,"name":"FromStr","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:13272:127","2:13273:1661"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:112:1727":{"id":"0:112:1727","crate_id":0,"name":"probe_path","span":{"filename":"src/lib.rs","begin":[265,4],"end":[267,5]},"visibility":"public","docs":"Tests whether the given path can be used.\n\nThe test code is subject to change, but currently looks like:\n\n```ignore\npub use PATH;\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["path",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:5553:2843":{"id":"1:5553:2843","crate_id":1,"name":"FileTypeExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5554:52967","1:5555:52968","1:5556:52969","1:5557:52970"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:6171:60220":{"id":"5:6171:60220","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:8472:220"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]","#[stable(feature = \"unicode_case_mapping\", since = \"1.2.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8472:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13762:55554":{"id":"2:13762:55554","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"2:13332:2574","prim@char":"1:15883:1949","str::split":"2:13756:1779","`DoubleEndedIterator`":"2:8717:121"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplit","id":"2:49807:2593","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13342:2568","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:13342:2568","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13357:2569","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:9534:2975-0:171:1629":{"id":"a:2:9534:2975-0:171:1629","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:9534:2975","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"AutoCfg","id":"0:171:1629","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:13803:59577":{"id":"2:13803:59577","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"self::pattern":"2:13332:2574","prim@char":"1:15883:1949"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13342:2568","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:13342:2568","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"2:13362:2567","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13806:59578":{"id":"2:13806:59578","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:15883:1949","self::pattern":"2:13332:2574"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"trim_direction\", since = \"1.30.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13342:2568","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:23435:3316":{"id":"2:23435:3316","crate_id":2,"name":"MaskElement","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"SimdElement","id":"2:24072:3174","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sealed","id":"2:23426:2835","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13730:55545":{"id":"2:13730:55545","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"2:13729:55544"},"attrs":["#[must_use]","#[stable(feature = \"str_split_at\", since = \"1.4.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:4467:1621":{"id":"1:4467:1621","crate_id":1,"name":"Write","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4468:2036","1:4469:2662","1:4471:2663","1:4472:2664","1:4473:1681","1:4474:2665","1:4475:2666","1:4484:2513"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3405:2279":{"id":"2:3405:2279","crate_id":2,"name":"Unpin","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3171:150":{"id":"2:3171:150","crate_id":2,"name":"Into","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3173:1668"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3620:133":{"id":"2:3620:133","crate_id":2,"name":"FnOnce","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3622:183","2:3623:384"],"generics":{"params":[{"name":"Args","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:123:1761":{"id":"0:123:1761","crate_id":0,"name":"probe_constant","span":{"filename":"src/lib.rs","begin":[370,4],"end":[373,5]},"visibility":"public","docs":"Tests whether the given constant expression can be used.\n\nThe test code is subject to change, but currently looks like:\n\n```ignore\npub const PROBE: () = ((), EXPR).0;\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["expr",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13768:59567":{"id":"2:13768:59567","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"str::split_terminator":"2:13765:59566","self::pattern":"2:13332:2574","str::split":"2:13756:1779","prim@char":"1:15883:1949"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitTerminator","id":"2:49857:2596","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13342:2568","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:13342:2568","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13357:2569","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13828:54324":{"id":"2:13828:54324","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":["#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:23763:3175":{"id":"2:23763:3175","crate_id":2,"name":"SimdPartialOrd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:23764:1283","2:23765:1282","2:23766:1280","2:23767:1279"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"SimdPartialEq","id":"2:23175:3386","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:134:128":{"id":"0:134:128","crate_id":0,"name":"Error","span":{"filename":"src/error.rs","begin":[9,0],"end":[11,1]},"visibility":"public","docs":"A common error type for the `autocfg` crate.","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["a:2:3376:224-0:134:128","a:2:3405:2279-0:134:128","a:2:9533:2976-0:134:128","a:2:9534:2975-0:134:128","a:2:3364:215-0:134:128","b:2:3201-0:134:128","b:2:3197-0:134:128","b:2:3207-0:134:128","b:2:2868-0:134:128","b:2:4097-0:134:128","b:2:2865-0:134:128","b:2:3212-0:134:128","b:2:3279-0:134:128","b:5:6500-0:134:128","0:136","0:60","0:63"]}},"2:3181:232":{"id":"2:3181:232","crate_id":2,"name":"TryFrom","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3183:128","2:3184:1430"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3442:3190":{"id":"2:3442:3190","crate_id":2,"name":"Mul","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3444:183","2:3445:898"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3907:3292":{"id":"2:3907:3292","crate_id":2,"name":"DispatchFromDyn","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3200:1668":{"id":"2:3200:1668","crate_id":2,"name":"into","span":null,"visibility":"default","docs":"Calls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of\n<code>[From]&lt;T&gt; for U</code> chooses to do.","links":{"From":"2:3174:136"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"generic","inner":"U"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:10580:191":{"id":"2:10580:191","crate_id":2,"name":"Pointer","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10581:664"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:2859:97":{"id":"2:2859:97","crate_id":2,"name":"Borrow","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2861:2018"],"generics":{"params":[{"name":"Borrowed","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Borrowed"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3369:2278","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"1:6573:2832":{"id":"1:6573:2832","crate_id":1,"name":"ChildExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6574:6860","1:6575:54704"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"1:10416:2835","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13732:3247":{"id":"2:13732:3247","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the last character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:15883:1949"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"CharIndices","id":"2:49765:2580","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3369:2278":{"id":"2:3369:2278","crate_id":2,"name":"Sized","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3743:3594":{"id":"2:3743:3594","crate_id":2,"name":"RangeBounds","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3745:58441","2:3746:58442","2:3747:1776"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3369:2278","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"2:13771:1914":{"id":"2:13771:1914","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"1:15883:1949","self::pattern":"2:13332:2574","str::rsplitn":"2:13774:55557"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitN","id":"2:49893:2595","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13342:2568","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3600:2116":{"id":"2:3600:2116","crate_id":2,"name":"DerefMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3601:550"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Deref","id":"2:3587:117","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"5:6498:228":{"id":"5:6498:228","crate_id":5,"name":"ToString","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:6499:1410"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3676:3277":{"id":"2:3676:3277","crate_id":2,"name":"IndexMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3678:758"],"generics":{"params":[{"name":"Idx","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Idx"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3369:2278","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"name":"Index","id":"2:3672:2968","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Idx"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13734:31381":{"id":"2:13734:31381","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```","links":{"str::split_ascii_whitespace":"2:13735:31371"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"split_whitespace\", since = \"1.1.0\")]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitWhitespace","id":"2:50063:2578","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:8673:152":{"id":"2:8673:152","crate_id":2,"name":"IntoIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8674:2489","2:8675:2490","2:8676:773"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3215:128":{"id":"2:3215:128","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"resolved_path","inner":{"name":"Infallible","id":"2:39108:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"2:13780:59569":{"id":"2:13780:59569","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":["#[stable(feature = \"str_split_once\", since = \"1.52.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47808:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13342:2568","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:13342:2568","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13357:2569","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13351:2570":{"id":"2:13351:2570","crate_id":2,"name":"Searcher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:13353:3240","2:13354:928","2:13355:58835","2:13356:58836"],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:2884:105":{"id":"2:2884:105","crate_id":2,"name":"Clone","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2885:414","2:2886:416"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:1031:2852":{"id":"1:1031:2852","crate_id":1,"name":"AsciiExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:1032:2542","1:1033:3692","1:1034:54321","1:1035:54322","1:1036:54323","1:1037:54324","1:1038:54325"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13830:59582":{"id":"2:13830:59582","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"2:5445:59582"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"str_escape\", since = \"1.34.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDebug","id":"2:50088:2585","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:124:1764":{"id":"0:124:1764","crate_id":0,"name":"emit_constant_cfg","span":{"filename":"src/lib.rs","begin":[376,4],"end":[380,5]},"visibility":"public","docs":"Emits the given `cfg` value if `probe_constant` returns true.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["expr",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}],["cfg",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13709:59560":{"id":"2:13709:59560","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]","#[stable(feature = \"is_char_boundary\", since = \"1.9.0\")]","#[rustc_const_unstable(feature = \"const_is_char_boundary\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13821:59581":{"id":"2:13821:59581","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"self::pattern":"2:13332:2574","prim@char":"1:15883:1949"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13342:2568","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:13342:2568","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13357:2569","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:6841:2837":{"id":"1:6841:2837","crate_id":1,"name":"TcpStreamExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6842:54657","1:6843:54658"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"1:10416:2835","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3587:117":{"id":"2:3587:117","crate_id":2,"name":"Deref","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3588:226","2:3589:548"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:6183:60221":{"id":"5:6183:60221","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:8472:220"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]","#[stable(feature = \"unicode_case_mapping\", since = \"1.2.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8472:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13717:310":{"id":"2:13717:310","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"`u8`":"1:15900:1963","str::as_mut_ptr":"2:13718:55525"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"rustc_str_as_ptr\", since = \"1.32.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":false,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:63":{"id":"0:63","crate_id":0,"name":null,"span":{"filename":"src/error.rs","begin":[28,0],"end":[37,1]},"visibility":{"restricted":{"parent":"0:44:1617","path":"::error"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Display","id":"2:10570:120","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:134:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:64:664"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:13777:59568":{"id":"2:13777:59568","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":["#[stable(feature = \"str_split_once\", since = \"1.52.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47808:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13342:2568","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13718:55525":{"id":"2:13718:55525","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:15900:1963"},"attrs":["#[stable(feature = \"str_as_mut_ptr\", since = \"1.36.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":true,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13809:14024":{"id":"2:13809:14024","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:15883:1949","self::pattern":"2:13332:2574"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"str_strip\", since = \"1.45.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["prefix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47808:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13342:2568","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2963:186":{"id":"2:2963:186","crate_id":2,"name":"PartialOrd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2965:1004","2:2966:832","2:2967:797","2:2968:716","2:2969:700"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Rhs"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3369:2278","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"name":"PartialEq","id":"2:2917:185","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Rhs"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3210:128":{"id":"2:3210:128","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"U"},"trait":{"name":"TryFrom","id":"2:3181:232","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}}}}},"2:10574:2442":{"id":"2:10574:2442","crate_id":2,"name":"Binary","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10575:664"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13708:1778":{"id":"2:13708:1778","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"const_str_is_empty\", since = \"1.39.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:106:1690":{"id":"0:106:1690","crate_id":0,"name":"emit_rustc_version","span":{"filename":"src/lib.rs","begin":[199,4],"end":[203,5]},"visibility":"public","docs":"Sets a `cfg` value of the form `rustc_major_minor`, like `rustc_1_29`,\nif the current `rustc` is at least that version.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["major",{"kind":"primitive","inner":"usize"}],["minor",{"kind":"primitive","inner":"usize"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13735:31371":{"id":"2:13735:31371","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```","links":{"str::split_whitespace":"2:13734:31381"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"split_ascii_whitespace\", since = \"1.34.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitAsciiWhitespace","id":"2:50072:2576","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:4099:1443":{"id":"2:4099:1443","crate_id":2,"name":"type_id","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"TypeId","id":"2:46336:3185","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:23102:3169":{"id":"2:23102:3169","crate_id":2,"name":"SimdInt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:23103:3173","2:23104:57575","2:23105:1238","2:23106:1239","2:23107:42122","2:23108:57621","2:23109:57622","2:23110:57623","2:23111:57624","2:23112:57625","2:23113:57576","2:23114:57577","2:23115:57578","2:23116:57579","2:23117:57580","2:23118:57581","2:23119:57582"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Copy","id":"2:3374:107","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sealed","id":"2:23151:2835","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"b:2:2865-0:171:1629":{"id":"b:2:2865-0:171:1629","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3369:2278","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2859:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"AutoCfg","id":"0:171:1629","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2867:2018"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:98:1649":{"id":"0:98:1649","crate_id":0,"name":"rerun_env","span":{"filename":"src/lib.rs","begin":[118,0],"end":[120,1]},"visibility":"public","docs":"Writes a line telling Cargo to rerun the build script if the environment\nvariable `var` changes.\n\nThis looks like: `cargo:rerun-if-env-changed=VAR`\n\nThis requires at least cargo 0.21.0, corresponding to rustc 1.20.0.  Earlier\nversions of cargo will simply ignore the directive.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["var",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"0:180":{"id":"0:180","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[82,16],"end":[82,21]},"visibility":"crate","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10563:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"AutoCfg","id":"0:171:1629","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:181:664"],"negative":false,"synthetic":false,"blanket_impl":null}},"a:2:3376:224-0:171:1629":{"id":"a:2:3376:224-0:171:1629","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3376:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"AutoCfg","id":"0:171:1629","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"1:5513:2841":{"id":"1:5513:2841","crate_id":1,"name":"OpenOptionsExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5514:4903","1:5515:7209"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"a:2:9534:2975-0:134:128":{"id":"a:2:9534:2975-0:134:128","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:9534:2975","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:134:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}},"2:3437:2925":{"id":"2:3437:2925","crate_id":2,"name":"Sub","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3439:183","2:3440:1368"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:23238:2887":{"id":"2:23238:2887","crate_id":2,"name":"SupportedLaneCount","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"2:23228:2835","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13752:2485":{"id":"2:13752:2485","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"self::pattern":"2:13332:2574","`None`":"2:47810:176","prim@char":"1:15883:1949"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47808:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13342:2568","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:13342:2568","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13357:2569","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13731:1765":{"id":"2:13731:1765","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:15883:1949"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Chars","id":"2:49759:2581","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:14072:151":{"id":"2:14072:151","crate_id":2,"name":"IntoFuture","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:14073:183","2:14074:151","2:14075:772"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:5906:2572":{"id":"5:5906:2572","crate_id":5,"name":"Concat","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:5908:183","5:5909:438"],"generics":{"params":[{"name":"Item","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Item"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3369:2278","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"b:2:3197-0:134:128":{"id":"b:2:3197-0:134:128","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:3174:136","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:3171:150","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:134:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3200:1668"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:179:414":{"id":"0:179:414","crate_id":0,"name":"clone","span":{"filename":"src/lib.rs","begin":[82,9],"end":[82,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"AutoCfg","id":"0:171:1629","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3496:2923":{"id":"2:3496:2923","crate_id":2,"name":"BitOr","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3498:183","2:3499:359"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:181:664":{"id":"0:181:664","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[82,16],"end":[82,21]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Formatter","id":"2:10523:135","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Result","id":"2:10512:207","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13719:55521":{"id":"2:13719:55521","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:47810:176"},"attrs":["#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]","#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47808:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:11205:218","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:11205:218","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13723:55523":{"id":"2:13723:55523","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":["#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]","#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:11205:218","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:11205:218","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:3177:233":{"id":"2:3177:233","crate_id":2,"name":"TryInto","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3179:128","2:3180:1431"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3373:221":{"id":"2:3373:221","crate_id":2,"name":"StructuralEq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:850:2542":{"id":"5:850:2542","crate_id":5,"name":"Owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"generic","inner":"T"}}},"2:13748:1910":{"id":"2:13748:1910","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"prim@char":"1:15883:1949","`None`":"2:47810:176","self::pattern":"2:13332:2574"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47808:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13342:2568","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:5:848-0:171:1629":{"id":"b:5:848-0:171:1629","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2884:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:844:227","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"AutoCfg","id":"0:171:1629","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:850:2542","5:851:2543","5:852:2544"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:13829:54325":{"id":"2:13829:54325","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":["#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2868-0:171:1629":{"id":"b:2:2868-0:171:1629","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3369:2278","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2862:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"AutoCfg","id":"0:171:1629","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2870:52866"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:13342:2568":{"id":"2:13342:2568","crate_id":2,"name":"Pattern","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:13344:2570","2:13345:58387","2:13346:58392","2:13347:58388","2:13348:58390","2:13349:58389","2:13350:58391"],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:6164:60218":{"id":"5:6164:60218","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[stable(feature = \"str_box_extras\", since = \"1.20.0\")]","#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:444:2283","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:8217:3700","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Box","id":"5:444:2283","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:8217:3700","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:10584:2446":{"id":"2:10584:2446","crate_id":2,"name":"UpperExp","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10585:664"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"b:2:3212-0:134:128":{"id":"b:2:3212-0:134:128","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:3171:150","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:3181:232","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:134:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3215:128","2:3216:1430"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:99:926":{"id":"0:99:926","crate_id":0,"name":"new","span":{"filename":"src/lib.rs","begin":[127,0],"end":[129,1]},"visibility":"public","docs":"Create a new `AutoCfg` instance.\n\n# Panics\n\nPanics if `AutoCfg::new()` returns an error.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[],"output":{"kind":"resolved_path","inner":{"name":"AutoCfg","id":"0:171:1629","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"2:3467:2999":{"id":"2:3467:2999","crate_id":2,"name":"SubAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3469:1369"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3829:138":{"id":"2:3829:138","crate_id":2,"name":"FromResidual","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3831:691"],"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":{"kind":"qualified_path","inner":{"name":"Residual","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Try","id":"2:3824:229","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:5497:2840":{"id":"1:5497:2840","crate_id":1,"name":"FileExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5498:57327","1:5499:57329","1:5500:57328","1:5501:57330"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:8742:2281":{"id":"2:8742:2281","crate_id":2,"name":"ExactSizeIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8743:798","2:8744:1778"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"2:8874:158","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3526:3162":{"id":"2:3526:3162","crate_id":2,"name":"BitXorAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3528:363"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3459:3197":{"id":"2:3459:3197","crate_id":2,"name":"Neg","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3460:183","2:3461:919"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"b:2:3201-0:134:128":{"id":"b:2:3201-0:134:128","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:3174:136","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:134:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3203:685"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:13801:59575":{"id":"2:13801:59575","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3870:3291":{"id":"2:3870:3291","crate_id":2,"name":"CoerceUnsized","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3369:2278","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"b:5:6500-0:134:128":{"id":"b:5:6500-0:134:128","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"2:10570:120","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:3369:2278","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"ToString","id":"5:6498:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:134:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:6502:1410"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:3272:128":{"id":"2:3272:128","crate_id":2,"name":"Error","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3273:2551","2:3275:1889","2:3276:1891","2:3277:2552"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Debug","id":"2:10563:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Display","id":"2:10570:120","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3281:2552":{"id":"2:3281:2552","crate_id":2,"name":"provide","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["demand",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Demand","id":"2:4161:3183","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:4410:2101":{"id":"1:4410:2101","crate_id":1,"name":"Read","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4411:2714","1:4412:55208","1:4414:55209","1:4415:55210","1:4416:2102","1:4417:55211","1:4418:54457","1:4420:55212","1:4421:2513","1:4422:2080","1:4423:2497","1:4425:1709"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:2953:179":{"id":"2:2953:179","crate_id":2,"name":"Ord","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2954:421","2:2955:2426","2:2956:2423","2:2957:2478"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Eq","id":"2:2922:125","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"PartialOrd","id":"2:2963:186","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:105:1685":{"id":"0:105:1685","crate_id":0,"name":"probe_rustc_version","span":{"filename":"src/lib.rs","begin":[193,4],"end":[195,5]},"visibility":"public","docs":"Test whether the current `rustc` reports a version greater than\nor equal to \"`major`.`minor`\".","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["major",{"kind":"primitive","inner":"usize"}],["minor",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13833:59583":{"id":"2:13833:59583","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"2:5443:59583"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"str_escape\", since = \"1.34.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeUnicode","id":"2:50106:2587","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2870:52866":{"id":"2:2870:52866","crate_id":2,"name":"borrow_mut","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3432:2997":{"id":"2:3432:2997","crate_id":2,"name":"Add","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3434:183","2:3435:270"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"b:2:3207-0:134:128":{"id":"b:2:3207-0:134:128","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:3181:232","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:3177:233","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:134:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3210:128","2:3211:1431"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:3453:3187":{"id":"2:3453:3187","crate_id":2,"name":"Rem","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3455:183","2:3456:1110"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"b:2:3279-0:134:128":{"id":"b:2:3279-0:134:128","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"E","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"E"},"bounds":[{"trait_bound":{"trait":{"name":"Error","id":"2:3272:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:3369:2278","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Provider","id":"2:4146:3184","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:134:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3281:2552"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"E"}}},"2:13789:59571":{"id":"2:13789:59571","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"prim@char":"1:15883:1949","str::rmatch_indices":"2:13792:59572","self::pattern":"2:13332:2574","`DoubleEndedIterator`":"2:8717:121"},"attrs":["#[stable(feature = \"str_match_indices\", since = \"1.5.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"MatchIndices","id":"2:49939:2589","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13342:2568","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:9533:2976":{"id":"2:9533:2976","crate_id":2,"name":"UnwindSafe","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:114:1734":{"id":"0:114:1734","crate_id":0,"name":"emit_path_cfg","span":{"filename":"src/lib.rs","begin":[280,4],"end":[284,5]},"visibility":"public","docs":"Emits the given `cfg` value if `probe_path` returns true.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["path",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}],["cfg",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:10563:110":{"id":"2:10563:110","crate_id":2,"name":"Debug","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10564:664"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:0:1787":{"id":"0:0:1787","crate_id":0,"name":"autocfg","span":{"filename":"src/lib.rs","begin":[1,0],"end":[453,1]},"visibility":"public","docs":"A Rust library for build scripts to automatically configure code based on\ncompiler support.  Code snippets are dynamically tested to see if the `rustc`\nwill accept them, rather than hard-coding specific version support.\n\n\n## Usage\n\nAdd this to your `Cargo.toml`:\n\n```toml\n[build-dependencies]\nautocfg = \"1\"\n```\n\nThen use it in your `build.rs` script to detect compiler features.  For\nexample, to test for 128-bit integer support, it might look like:\n\n```rust\nextern crate autocfg;\n\nfn main() {\n#   // Normally, cargo will set `OUT_DIR` for build scripts.\n#   std::env::set_var(\"OUT_DIR\", \"target\");\n    let ac = autocfg::new();\n    ac.emit_has_type(\"i128\");\n\n    // (optional) We don't need to rerun for anything external.\n    autocfg::rerun_path(\"build.rs\");\n}\n```\n\nIf the type test succeeds, this will write a `cargo:rustc-cfg=has_i128` line\nfor Cargo, which translates to Rust arguments `--cfg has_i128`.  Then in the\nrest of your Rust code, you can add `#[cfg(has_i128)]` conditions on code that\nshould only be used when the compiler supports it.\n\n## Caution\n\nMany of the probing methods of `AutoCfg` document the particular template they\nuse, **subject to change**. The inputs are not validated to make sure they are\nsemantically correct for their expected use, so it's _possible_ to escape and\ninject something unintended. However, such abuse is unsupported and will not\nbe considered when making changes to the templates.","links":{},"attrs":["#![deny(missing_debug_implementations)]","#![deny(missing_docs)]","#![allow(unknown_lints)]","#![allow(bare_trait_objects)]","#![allow(ellipsis_inclusive_range_patterns)]"],"deprecation":null,"kind":"module","inner":{"is_crate":true,"items":["0:69","0:171:1629","0:96:1636","0:97:1643","0:98:1649","0:99:926"],"is_stripped":false}},"2:13759:31248":{"id":"2:13759:31248","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"self::pattern":"2:13332:2574","prim@char":"1:15883:1949"},"attrs":["#[stable(feature = \"split_inclusive\", since = \"1.51.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitInclusive","id":"2:13124:2577","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13342:2568","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3475:3203":{"id":"2:3475:3203","crate_id":2,"name":"DivAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3477:564"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13733:2080":{"id":"2:13733:2080","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Bytes","id":"2:49775:2111","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13826:3692":{"id":"2:13826:3692","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13362:2567":{"id":"2:13362:2567","crate_id":2,"name":"DoubleEndedSearcher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13357:2569","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:113:1732":{"id":"0:113:1732","crate_id":0,"name":"emit_has_path","span":{"filename":"src/lib.rs","begin":[273,4],"end":[277,5]},"visibility":"public","docs":"Emits a config value `has_PATH` if `probe_path` returns true.\n\nAny non-identifier characters in the `path` will be replaced with\n`_` in the generated config value.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["path",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3835:3286":{"id":"2:3835:3286","crate_id":2,"name":"Residual","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3837:53751"],"generics":{"params":[{"name":"O","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:852:2544":{"id":"5:852:2544","crate_id":5,"name":"clone_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["target",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"T"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13818:59580":{"id":"2:13818:59580","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:15883:1949","self::pattern":"2:13332:2574"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13342:2568","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:6184:60222":{"id":"5:6184:60222","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:444:2283","`String`":"5:8472:220"},"attrs":["#[stable(feature = \"box_str\", since = \"1.4.0\")]","#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:444:2283","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:8217:3700","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8472:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:9143:2884":{"id":"1:9143:2884","crate_id":1,"name":"StdFloat","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:9144:52948","1:9145:52949","1:9146:52950","1:9147:52951","1:9148:52952","1:9149:38727","1:9150:52947"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"1:10416:2835","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:8669:137":{"id":"2:8669:137","crate_id":2,"name":"FromIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8671:688"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13710:59561":{"id":"2:13710:59561","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:8717:121":{"id":"2:8717:121","crate_id":2,"name":"DoubleEndedIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8718:2480","2:8719:2481","2:8720:2482","2:8721:2483","2:8725:2484","2:8728:2485"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"2:8874:158","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:8197:3181":{"id":"2:8197:3181","crate_id":2,"name":"Step","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8198:58892","2:8199:58893","2:8200:58890","2:8201:58886","2:8202:58894","2:8203:58891","2:8204:58889"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2884:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"PartialOrd","id":"2:2963:186","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:24072:3174":{"id":"2:24072:3174","crate_id":2,"name":"SimdElement","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:24073:3173"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"2:24068:2835","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Copy","id":"2:3374:107","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:6576:2834":{"id":"1:6576:2834","crate_id":1,"name":"CommandExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6577:7403"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"1:10416:2835","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:10811:147":{"id":"2:10811:147","crate_id":2,"name":"Hasher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10812:656","2:10813:2036","2:10814:57134","2:10815:57135","2:10816:57136","2:10817:57137","2:10818:57138","2:10819:57139","2:10820:57140","2:10821:57141","2:10822:57142","2:10823:57143","2:10824:57144","2:10825:57145","2:10826:57146","2:10827:1549"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:117:1743":{"id":"0:117:1743","crate_id":0,"name":"emit_trait_cfg","span":{"filename":"src/lib.rs","begin":[309,4],"end":[313,5]},"visibility":"public","docs":"Emits the given `cfg` value if `probe_trait` returns true.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["name",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}],["cfg",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:10513:1621":{"id":"2:10513:1621","crate_id":2,"name":"Write","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10514:1549","2:10515:55453","2:10517:2666"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:8874:158":{"id":"2:8874:158","crate_id":2,"name":"Iterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8875:2489","2:8876:928","2:8877:2491","2:8880:2492","2:8881:500","2:8883:2493","2:8886:2494","2:8887:2495","2:8888:2496","2:8889:2497","2:8891:2498","2:8893:2499","2:8894:2500","2:8896:847","2:8899:2501","2:8906:1786","2:8908:2502","2:8911:2503","2:8912:2504","2:8913:2505","2:8915:2506","2:8917:2507","2:8920:1321","2:8921:1709","2:8922:2508","2:8926:2509","2:8929:2510","2:8930:2511","2:8931:2512","2:8933:2513","2:8934:1771","2:8936:2514","2:8939:2515","2:8941:2516","2:8951:2517","2:8966:2518","2:8968:2519","2:8972:2520","2:8981:2521","2:8984:2522","2:8986:2523","2:8989:282","2:8996:300","2:9003:1910","2:9010:2524","2:9019:2525","2:9029:1021","2:9036:2526","2:9043:2426","2:9044:2423","2:9045:2428","2:9057:2427","2:9064:2425","2:9076:2424","2:9083:2527","2:9084:2528","2:9089:2529","2:9092:2530","2:9095:2531","2:9096:2532","2:9098:2533","2:9100:2534","2:9102:421","2:9105:2535","2:9108:1004","2:9111:2536","2:9114:608","2:9117:2537","2:9120:913","2:9122:832","2:9124:797","2:9126:716","2:9128:700","2:9130:2538","2:9131:2539","2:9139:2540"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:23175:3386":{"id":"2:23175:3386","crate_id":2,"name":"SimdPartialEq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:23176:3173","2:23177:1260","2:23178:1285"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13756:1779":{"id":"2:13756:1779","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"str::split_whitespace":"2:13734:31381","`DoubleEndedIterator`":"2:8717:121","prim@char":"1:15883:1949","self::pattern":"2:13332:2574","str::rsplit":"2:13762:55554"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Split","id":"2:49789:2113","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13342:2568","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2862:98":{"id":"2:2862:98","crate_id":2,"name":"BorrowMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2864:52866"],"generics":{"params":[{"name":"Borrowed","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Borrowed"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3369:2278","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"name":"Borrow","id":"2:2859:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Borrowed"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"5:6185:2133":{"id":"5:6185:2133","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:8472:220"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]","#[stable(feature = \"repeat_str\", since = \"1.16.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8472:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:5519:2842":{"id":"1:5519:2842","crate_id":1,"name":"MetadataExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5520:6395","1:5521:54892","1:5522:4903","1:5523:54893","1:5524:3086","1:5525:3087","1:5526:54894","1:5527:1317","1:5528:54895","1:5529:54896","1:5530:54897","1:5531:54898","1:5532:54899","1:5533:54900","1:5534:54901","1:5535:54902"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:9534:2975":{"id":"2:9534:2975","crate_id":2,"name":"RefUnwindSafe","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:122:1758":{"id":"0:122:1758","crate_id":0,"name":"emit_expression_cfg","span":{"filename":"src/lib.rs","begin":[357,4],"end":[361,5]},"visibility":"public","docs":"Emits the given `cfg` value if `probe_expression` returns true.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["expr",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}],["cfg",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:9154:2175":{"id":"2:9154:2175","crate_id":2,"name":"FusedIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"2:8874:158","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13824:1920":{"id":"2:13824:1920","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"`FromStr`":"2:13271:2176","FromStr::Err":"2:13272:127"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47933:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"F"}},{"type":{"kind":"qualified_path","inner":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"F"},"trait":{"name":"FromStr","id":"2:13271:2176","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"2:13271:2176","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:844:227":{"id":"5:844:227","crate_id":5,"name":"ToOwned","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:845:2542","5:846:2543","5:847:2544"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3501:2924":{"id":"2:3501:2924","crate_id":2,"name":"BitXor","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3503:183","2:3504:362"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:137:664":{"id":"0:137:664","crate_id":0,"name":"fmt","span":{"filename":"src/error.rs","begin":[8,9],"end":[8,14]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Formatter","id":"2:10523:135","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Result","id":"2:10512:207","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3203:685":{"id":"2:3203:685","crate_id":2,"name":"from","span":null,"visibility":"default","docs":"Returns the argument unchanged.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["t",{"kind":"generic","inner":"T"}]],"output":{"kind":"generic","inner":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:6645:2826":{"id":"1:6645:2826","crate_id":1,"name":"AsRawFd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6646:54392"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13832:2854":{"id":"2:13832:2854","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"2:5446:2854"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"str_escape\", since = \"1.34.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDefault","id":"2:50097:2586","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13802:59576":{"id":"2:13802:59576","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:60":{"id":"0:60","crate_id":0,"name":null,"span":{"filename":"src/error.rs","begin":[13,0],"end":[26,1]},"visibility":{"restricted":{"parent":"0:44:1617","path":"::error"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["cause","provide","source","description","type_id"],"trait":{"name":"Error","id":"2:3272:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:134:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:61:1889","0:62:1891"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:13706":{"id":"2:13706","crate_id":2,"name":null,"span":null,"visibility":{"restricted":{"parent":"2:12785:1353","path":"::str"}},"docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["2:13707:798","2:13708:1778","2:13709:59560","2:13710:59561","2:13712:59562","2:13715:52943","2:13716:59563","2:13717:310","2:13718:55525","2:13719:55521","2:13721:55522","2:13723:55523","2:13725:55524","2:13727:2942","2:13728:59564","2:13729:55544","2:13730:55545","2:13731:1765","2:13732:3247","2:13733:2080","2:13734:31381","2:13735:31371","2:13736:1909","2:13737:59565","2:13738:31366","2:13739:1776","2:13742:1911","2:13745:55559","2:13748:1910","2:13752:2485","2:13756:1779","2:13759:31248","2:13762:55554","2:13765:59566","2:13768:59567","2:13771:1914","2:13774:55557","2:13777:59568","2:13780:59569","2:13783:2033","2:13786:59570","2:13789:59571","2:13792:59572","2:13795:1785","2:13797:59573","2:13799:59574","2:13801:59575","2:13802:59576","2:13803:59577","2:13806:59578","2:13809:14024","2:13812:55560","2:13815:59579","2:13818:59580","2:13821:59581","2:13824:1920","2:13826:3692","2:13827:54323","2:13828:54324","2:13829:54325","2:13830:59582","2:13832:2854","2:13833:59583"],"negative":false,"synthetic":false,"blanket_impl":null}},"5:5910:2573":{"id":"5:5910:2573","crate_id":5,"name":"Join","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:5912:183","5:5913:32354"],"generics":{"params":[{"name":"Separator","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:102:1660":{"id":"0:102:1660","crate_id":0,"name":"with_dir","span":{"filename":"src/lib.rs","begin":[155,4],"end":[189,5]},"visibility":"public","docs":"Create a new `AutoCfg` instance with the specified output directory.\n\n# Common errors\n\n- `rustc` can't be executed, from `RUSTC` or in the `PATH`.\n- The version output from `rustc` can't be parsed.\n- `dir` is not a writable directory.\n","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["dir",{"kind":"generic","inner":"T"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47933:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}},{"type":{"kind":"resolved_path","inner":{"name":"Error","id":"0:134:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:3171:150","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"PathBuf","id":"1:7139:188","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:62:1891":{"id":"0:62:1891","crate_id":0,"name":"cause","span":{"filename":"src/error.rs","begin":[18,4],"end":[25,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47808:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"dyn_trait","inner":{"traits":[{"trait":{"name":"error::Error","id":"2:3272:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]}],"lifetime":null}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:9161:3179":{"id":"2:9161:3179","crate_id":2,"name":"TrustedStep","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Step","id":"2:8197:3181","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:14456:142":{"id":"2:14456:142","crate_id":2,"name":"GlobalAlloc","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:14457:283","2:14458:523","2:14459:286","2:14460:1087"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:97:1643":{"id":"0:97:1643","crate_id":0,"name":"rerun_path","span":{"filename":"src/lib.rs","begin":[107,0],"end":[109,1]},"visibility":"public","docs":"Writes a line telling Cargo to rerun the build script if `path` changes.\n\nThis looks like: `cargo:rerun-if-changed=PATH`\n\nThis requires at least cargo 0.7.0, corresponding to rustc 1.6.0.  Earlier\nversions of cargo will simply ignore the directive.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["path",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"2:3364:215":{"id":"2:3364:215","crate_id":2,"name":"Send","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:23387:15500":{"id":"2:23387:15500","crate_id":2,"name":"ToBitMask","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:23388:5897","2:23389:58989","2:23390:58990"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"2:23380:2835","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3614:131":{"id":"2:3614:131","crate_id":2,"name":"Fn","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3616:382"],"generics":{"params":[{"name":"Args","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"2:3617:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Args"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:100":{"id":"0:100","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[131,0],"end":[381,1]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"AutoCfg","id":"0:171:1629","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:101:926","0:102:1660","0:105:1685","0:106:1690","0:110:1719","0:111:1722","0:112:1727","0:113:1732","0:114:1734","0:115:1737","0:116:1741","0:117:1743","0:118:1746","0:119:1750","0:120:1752","0:121:1755","0:122:1758","0:123:1761","0:124:1764"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:3471:3201":{"id":"2:3471:3201","crate_id":2,"name":"MulAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3473:899"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3672:2968":{"id":"2:3672:2968","crate_id":2,"name":"Index","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3674:183","2:3675:757"],"generics":{"params":[{"name":"Idx","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Idx"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3369:2278","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"0:119:1750":{"id":"0:119:1750","crate_id":0,"name":"emit_has_type","span":{"filename":"src/lib.rs","begin":[331,4],"end":[335,5]},"visibility":"public","docs":"Emits a config value `has_TYPE` if `probe_type` returns true.\n\nAny non-identifier characters in the type `name` will be replaced with\n`_` in the generated config value.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["name",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3824:229":{"id":"2:3824:229","crate_id":2,"name":"Try","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3825:183","2:3826:3286","2:3827:690","2:3828:375"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"FromResidual","id":"2:3829:138","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Residual","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Try","id":"2:3824:229","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3216:1430":{"id":"2:3216:1430","crate_id":2,"name":"try_from","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["value",{"kind":"generic","inner":"U"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47933:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"T"},"trait":{"name":"TryFrom","id":"2:3181:232","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:6467:2842":{"id":"1:6467:2842","crate_id":1,"name":"MetadataExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6468:52868","1:6469:6742","1:6470:6743","1:6471:6745","1:6472:6744","1:6473:6746","1:6474:6747","1:6475:6749","1:6476:4945","1:6477:6752","1:6478:6753","1:6479:6754","1:6480:6755","1:6481:6756","1:6482:6757","1:6483:6750","1:6484:6751"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:121:1755":{"id":"0:121:1755","crate_id":0,"name":"probe_expression","span":{"filename":"src/lib.rs","begin":[351,4],"end":[354,5]},"visibility":"public","docs":"Tests whether the given expression can be used.\n\nThe test code is subject to change, but currently looks like:\n\n```ignore\npub fn probe() { let _ = EXPR; }\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["expr",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3197-0:171:1629":{"id":"b:2:3197-0:171:1629","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:3174:136","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:3171:150","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"AutoCfg","id":"0:171:1629","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3200:1668"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:13786:59570":{"id":"2:13786:59570","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"`DoubleEndedIterator`":"2:8717:121","prim@char":"1:15883:1949","self::pattern":"2:13332:2574","str::matches":"2:13783:2033"},"attrs":["#[stable(feature = \"str_matches\", since = \"1.2.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatches","id":"2:50011:2592","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13342:2568","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:13342:2568","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13357:2569","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3447:3192":{"id":"2:3447:3192","crate_id":2,"name":"Div","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3449:183","2:3450:563"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:10582:2445":{"id":"2:10582:2445","crate_id":2,"name":"LowerExp","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10583:664"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13812:55560":{"id":"2:13812:55560","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"self::pattern":"2:13332:2574","prim@char":"1:15883:1949"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"str_strip\", since = \"1.45.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["suffix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47808:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13342:2568","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:13342:2568","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13357:2569","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:14540:2992":{"id":"2:14540:2992","crate_id":2,"name":"Allocator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:14541:57078","2:14542:57079","2:14543:57080","2:14544:57081","2:14545:57082","2:14546:57083","2:14547:2513"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:4752:2856":{"id":"1:4752:2856","crate_id":1,"name":"ToSocketAddrs","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4753:2167","1:4754:55414"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3512:3155":{"id":"2:3512:3155","crate_id":2,"name":"Shr","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3514:183","2:3515:1247"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3376:224":{"id":"2:3376:224","crate_id":2,"name":"Sync","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:6168:60219":{"id":"5:6168:60219","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:8472:220"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]","#[stable(feature = \"str_replacen\", since = \"1.16.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}],["count",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8472:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13342:2568","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:4485:2105":{"id":"1:4485:2105","crate_id":1,"name":"Seek","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4486:57233","1:4487:39133","1:4488:57234","1:4489:57235"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:111:1722":{"id":"0:111:1722","crate_id":0,"name":"emit_sysroot_crate","span":{"filename":"src/lib.rs","begin":[252,4],"end":[256,5]},"visibility":"public","docs":"Emits a config value `has_CRATE` if `probe_sysroot_crate` returns true.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["name",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:115:1737":{"id":"0:115:1737","crate_id":0,"name":"probe_trait","span":{"filename":"src/lib.rs","begin":[293,4],"end":[296,5]},"visibility":"public","docs":"Tests whether the given trait can be used.\n\nThe test code is subject to change, but currently looks like:\n\n```ignore\npub trait Probe: TRAIT + Sized {}\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["name",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:9533:2976-0:171:1629":{"id":"a:2:9533:2976-0:171:1629","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:9533:2976","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"AutoCfg","id":"0:171:1629","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:8682:2282":{"id":"2:8682:2282","crate_id":2,"name":"Extend","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8684:2486","2:8686:2487","2:8687:2488"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:4146:3184":{"id":"2:4146:3184","crate_id":2,"name":"Provider","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:4147:2552"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13783:2033":{"id":"2:13783:2033","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"prim@char":"1:15883:1949","`DoubleEndedIterator`":"2:8717:121","self::pattern":"2:13332:2574","str::matches":"2:13783:2033"},"attrs":["#[stable(feature = \"str_matches\", since = \"1.2.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Matches","id":"2:49993:2591","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13342:2568","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:6745:2821":{"id":"1:6745:2821","crate_id":1,"name":"AsFd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6746:55404"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:118:1746":{"id":"0:118:1746","crate_id":0,"name":"probe_type","span":{"filename":"src/lib.rs","begin":[322,4],"end":[325,5]},"visibility":"public","docs":"Tests whether the given type can be used.\n\nThe test code is subject to change, but currently looks like:\n\n```ignore\npub type Probe = TYPE;\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["name",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:64:664":{"id":"0:64:664","crate_id":0,"name":"fmt","span":{"filename":"src/error.rs","begin":[29,4],"end":[36,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"fmt::Formatter","id":"2:10523:135","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47933:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}},{"type":{"kind":"resolved_path","inner":{"name":"fmt::Error","id":"2:48871:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13742:1911":{"id":"2:13742:1911","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"prim@char":"1:15883:1949","self::pattern":"2:13332:2574"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13342:2568","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:61:1889":{"id":"0:61:1889","crate_id":0,"name":"description","span":{"filename":"src/error.rs","begin":[14,4],"end":[16,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13738:31366":{"id":"2:13738:31366","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"encode_utf16\", since = \"1.8.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EncodeUtf16","id":"2:50081:2575","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13728:59564":{"id":"2:13728:59564","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"str::slice_unchecked":"2:13727:2942","`str`":"1:15889:1954","crate::ops::IndexMut":"2:3676:3277"},"attrs":["#[stable(feature = \"str_slice_mut\", since = \"1.5.0\")]","#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:23138:3427":{"id":"2:23138:3427","crate_id":2,"name":"SimdUint","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:23139:57575","2:23140:1238","2:23141:1239","2:23142:57576","2:23143:57577","2:23144:57578","2:23145:57579","2:23146:57580","2:23147:57581","2:23148:57582"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Copy","id":"2:3374:107","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sealed","id":"2:23151:2835","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:23049:3385":{"id":"2:23049:3385","crate_id":2,"name":"SimdFloat","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:23050:3173","2:23051:57575","2:23052:57823","2:23053:57824","2:23054:57825","2:23055:42122","2:23056:57826","2:23057:57827","2:23058:57828","2:23059:57829","2:23060:57830","2:23061:57831","2:23062:57832","2:23063:57833","2:23064:57834","2:23065:57835","2:23066:57625","2:23067:57836","2:23068:57837","2:23069:57838","2:23070:57839","2:23071:57576","2:23072:57577","2:23073:57578","2:23074:57579"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Copy","id":"2:3374:107","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sealed","id":"2:23151:2835","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:120:1752":{"id":"0:120:1752","crate_id":0,"name":"emit_type_cfg","span":{"filename":"src/lib.rs","begin":[338,4],"end":[342,5]},"visibility":"public","docs":"Emits the given `cfg` value if `probe_type` returns true.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["name",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}],["cfg",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:96:1636":{"id":"0:96:1636","crate_id":0,"name":"emit","span":{"filename":"src/lib.rs","begin":[97,0],"end":[99,1]},"visibility":"public","docs":"Writes a config flag for rustc on standard out.\n\nThis looks like: `cargo:rustc-cfg=CFG`\n\nCargo will use this in arguments to rustc, like `--cfg CFG`.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["cfg",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"b:2:3207-0:171:1629":{"id":"b:2:3207-0:171:1629","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:3181:232","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:3177:233","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"AutoCfg","id":"0:171:1629","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3210:128","2:3211:1431"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"1:5575:2847":{"id":"1:5575:2847","crate_id":1,"name":"DirBuilderExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5576:4903"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:4896:3311":{"id":"2:4896:3311","crate_id":2,"name":"AsyncIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:4897:2489","2:4898:58572","2:4899:2492"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3654:3278":{"id":"2:3654:3278","crate_id":2,"name":"Generator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3656:242","2:3657:208","2:3658:58778"],"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":{"kind":"tuple","inner":[]},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13797:59573":{"id":"2:13797:59573","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"trim_direction\", since = \"1.30.0\")]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3165:75":{"id":"2:3165:75","crate_id":2,"name":"AsRef","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3167:311"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3369:2278","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"2:13815:59579":{"id":"2:13815:59579","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"self::pattern":"2:13332:2574","prim@char":"1:15883:1949"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"trim_direction\", since = \"1.30.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13342:2568","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:13342:2568","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13357:2569","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:5505:2839":{"id":"1:5505:2839","crate_id":1,"name":"PermissionsExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5506:4903","1:5507:54355","1:5508:54356"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:12772:3685":{"id":"2:12772:3685","crate_id":2,"name":"SlicePattern","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:12773:2489","2:12774:58767"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:6647:2827":{"id":"1:6647:2827","crate_id":1,"name":"FromRawFd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6648:55367"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"a:2:3364:215-0:171:1629":{"id":"a:2:3364:215-0:171:1629","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:3364:215","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"AutoCfg","id":"0:171:1629","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:13721:55522":{"id":"2:13721:55522","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:47810:176"},"attrs":["#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]","#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47808:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:11205:218","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:11205:218","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:4097-0:171:1629":{"id":"b:2:4097-0:171:1629","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:3369:2278","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:4095:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"AutoCfg","id":"0:171:1629","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:4099:1443"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:11205:218":{"id":"2:11205:218","crate_id":2,"name":"SliceIndex","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:11207:183","2:11208:55521","2:11209:55522","2:11210:55523","2:11211:55524","2:11212:757","2:11213:758"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3369:2278","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"2:11196:2835","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"5:6165:2115":{"id":"5:6165:2115","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:8472:220"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["from",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8472:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13342:2568","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3617:132":{"id":"2:3617:132","crate_id":2,"name":"FnMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3619:383"],"generics":{"params":[{"name":"Args","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"2:3620:133","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Args"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3812:3595":{"id":"2:3812:3595","crate_id":2,"name":"OneSidedRange","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3369:2278","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"2:3743:3594","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:10578:2444":{"id":"2:10578:2444","crate_id":2,"name":"UpperHex","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10579:664"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13739:1776":{"id":"2:13739:1776","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"self::pattern":"2:13332:2574","prim@char":"1:15883:1949"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13342:2568","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13737:59565":{"id":"2:13737:59565","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\")]","#[allow(deprecated)]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"LinesAny","id":"2:50053:2588","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13827:54323":{"id":"2:13827:54323","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3506:3152":{"id":"2:3506:3152","crate_id":2,"name":"Shl","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3508:183","2:3509:1244"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13712:59562":{"id":"2:13712:59562","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n# Panics\n\nPanics if `index > self.len()`.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"2:13710:59561"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:69":{"id":"0:69","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[73,0],"end":[73,21]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"error::Error","name":"Error","id":"0:134:128","glob":false}},"2:13715:52943":{"id":"2:13715:52943","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\nBasic usage:\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:12796:1899"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"str_as_bytes\", since = \"1.39.0\")]","#[must_use]","#[allow(unused_attributes)]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13729:55544":{"id":"2:13729:55544","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_mut":"2:13730:55545"},"attrs":["#[must_use]","#[stable(feature = \"str_split_at\", since = \"1.4.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3168:74":{"id":"2:3168:74","crate_id":2,"name":"AsMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3170:2479"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3369:2278","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"2:3484:3147":{"id":"2:3484:3147","crate_id":2,"name":"Not","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3485:183","2:3486:958"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13765:59566":{"id":"2:13765:59566","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"2:13332:2574","`DoubleEndedIterator`":"2:8717:121","str::rsplit_terminator":"2:13768:59567","str::split":"2:13756:1779","prim@char":"1:15883:1949"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitTerminator","id":"2:49839:2597","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13342:2568","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13707:798":{"id":"2:13707:798","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\nBasic usage:\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"1:15883:1949"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"const_str_len\", since = \"1.39.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:10846:2921":{"id":"2:10846:2921","crate_id":2,"name":"BuildHasher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10847:147","2:10848:32598","2:10849:53079"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3535:3166":{"id":"2:3535:3166","crate_id":2,"name":"ShrAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3537:1248"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:136":{"id":"0:136","crate_id":0,"name":null,"span":{"filename":"src/error.rs","begin":[8,9],"end":[8,14]},"visibility":{"restricted":{"parent":"0:44:1617","path":"::error"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10563:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:134:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:137:664"],"negative":false,"synthetic":false,"blanket_impl":null}},"5:6186:54321":{"id":"5:6186:54321","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"2:13828:54324"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]","#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8472:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:6241:2878":{"id":"1:6241:2878","crate_id":1,"name":"ExitStatusExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6242:57401","1:6243:6820","1:6244:57402","1:6245:57403","1:6246:57404","1:6247:57405"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"1:10416:2835","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"b:2:3212-0:171:1629":{"id":"b:2:3212-0:171:1629","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:3171:150","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:3181:232","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"AutoCfg","id":"0:171:1629","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3215:128","2:3216:1430"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:13774:55557":{"id":"2:13774:55557","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"self::pattern":"2:13332:2574","str::splitn":"2:13771:1914","prim@char":"1:15883:1949"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitN","id":"2:49911:2594","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13342:2568","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:13342:2568","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13357:2569","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:4097-0:134:128":{"id":"b:2:4097-0:134:128","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:3369:2278","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:4095:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:134:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:4099:1443"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:2922:125":{"id":"2:2922:125","crate_id":2,"name":"Eq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"PartialEq","id":"2:2917:185","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:9157:2617":{"id":"2:9157:2617","crate_id":2,"name":"TrustedLen","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"2:8874:158","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13716:59563":{"id":"2:13716:59563","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[stable(feature = \"str_mut_extras\", since = \"1.20.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:10576:2443":{"id":"2:10576:2443","crate_id":2,"name":"LowerHex","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10577:664"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3611:2280":{"id":"2:3611:2280","crate_id":2,"name":"Drop","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3612:583"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3174:136":{"id":"2:3174:136","crate_id":2,"name":"From","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3176:685"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3211:1431":{"id":"2:3211:1431","crate_id":2,"name":"try_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47933:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}},{"type":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"U"},"trait":{"name":"TryFrom","id":"2:3181:232","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:10570:120":{"id":"2:10570:120","crate_id":2,"name":"Display","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10571:664"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13736:1909":{"id":"2:13736:1909","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are ended with either a newline (`\\n`) or a carriage return with\na line feed (`\\r\\n`).\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\n\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line ending isn't required:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Lines","id":"2:50043:2114","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:6339:2880":{"id":"1:6339:2880","crate_id":1,"name":"JoinHandleExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6340:57565","1:6341:57566"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"a:2:3364:215-0:134:128":{"id":"a:2:3364:215-0:134:128","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:3364:215","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:134:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"b:2:3201-0:171:1629":{"id":"b:2:3201-0:171:1629","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:3174:136","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"AutoCfg","id":"0:171:1629","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3203:685"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:3374:107":{"id":"2:3374:107","crate_id":2,"name":"Copy","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2884:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"5:851:2543":{"id":"5:851:2543","crate_id":5,"name":"to_owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"generic","inner":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:23768:15519":{"id":"2:23768:15519","crate_id":2,"name":"SimdOrd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:23769:57838","2:23770:57837","2:23771:57839"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"SimdPartialOrd","id":"2:23763:3175","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:2867:2018":{"id":"2:2867:2018","crate_id":2,"name":"borrow","span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[rustc_diagnostic_item = \"noop_method_borrow\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:178":{"id":"0:178","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[82,9],"end":[82,14]},"visibility":"crate","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2884:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"AutoCfg","id":"0:171:1629","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:179:414"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:101:926":{"id":"0:101:926","crate_id":0,"name":"new","span":{"filename":"src/lib.rs","begin":[140,4],"end":[145,5]},"visibility":"public","docs":"Create a new `AutoCfg` instance.\n\n# Common errors\n\n- `rustc` can't be executed, from `RUSTC` or in the `PATH`.\n- The version output from `rustc` can't be parsed.\n- `OUT_DIR` is not set in the environment, or is not a writable directory.\n","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47933:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}},{"type":{"kind":"resolved_path","inner":{"name":"Error","id":"0:134:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2917:185":{"id":"2:2917:185","crate_id":2,"name":"PartialEq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2919:608","2:2920:913"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Rhs"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3369:2278","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"a:2:9533:2976-0:134:128":{"id":"a:2:9533:2976-0:134:128","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:9533:2976","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:134:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}},"1:5563:2844":{"id":"1:5563:2844","crate_id":1,"name":"DirEntryExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5564:54892"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3479:3205":{"id":"2:3479:3205","crate_id":2,"name":"RemAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3481:1111"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13357:2569":{"id":"2:13357:2569","crate_id":2,"name":"ReverseSearcher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:13359:2480","2:13360:57795","2:13361:57796"],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Searcher","id":"2:13351:2570","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3530:3146":{"id":"2:3530:3146","crate_id":2,"name":"ShlAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3532:1245"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"b:2:2865-0:134:128":{"id":"b:2:2865-0:134:128","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3369:2278","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2859:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:134:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2867:2018"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"a:2:3376:224-0:134:128":{"id":"a:2:3376:224-0:134:128","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3376:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:134:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"1:5425:2873":{"id":"1:5425:2873","crate_id":1,"name":"OsStringExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5426:52985","1:5427:3783"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"1:10416:2835","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3518:3158":{"id":"2:3518:3158","crate_id":2,"name":"BitAndAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3520:358"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:6219:2834":{"id":"1:6219:2834","crate_id":1,"name":"CommandExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6220:3086","1:6221:3087","1:6222:7402","1:6223:54522","1:6225:54526","1:6227:54523","1:6228:54524","1:6230:54525"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"1:10416:2835","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13725:55524":{"id":"2:13725:55524","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":["#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]","#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:11205:218","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:11205:218","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:13727:2942":{"id":"2:13727:2942","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"str::slice_mut_unchecked":"2:13728:59564","`str`":"1:15889:1954","crate::ops::Index":"2:3672:2968"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:10572:2441":{"id":"2:10572:2441","crate_id":2,"name":"Octal","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10573:664"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:14057:139":{"id":"2:14057:139","crate_id":2,"name":"Future","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:14058:183","2:14059:1020"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:4492:2108":{"id":"1:4492:2108","crate_id":1,"name":"BufRead","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4493:57437","1:4494:57438","1:4495:57440","1:4497:2107","1:4498:57439","1:4500:1779","1:4501:1909"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Read","id":"1:4410:2101","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:171:1629":{"id":"0:171:1629","crate_id":0,"name":"AutoCfg","span":{"filename":"src/lib.rs","begin":[83,0],"end":[90,1]},"visibility":"public","docs":"Helper to detect compiler features for `cfg` output in build scripts.","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["0:100","a:2:3376:224-0:171:1629","a:2:3405:2279-0:171:1629","a:2:9533:2976-0:171:1629","a:2:9534:2975-0:171:1629","a:2:3364:215-0:171:1629","b:2:3201-0:171:1629","b:2:3197-0:171:1629","b:2:3207-0:171:1629","b:2:2868-0:171:1629","b:2:4097-0:171:1629","b:2:2865-0:171:1629","b:2:3212-0:171:1629","b:5:848-0:171:1629","0:178","0:180"]}},"0:110:1719":{"id":"0:110:1719","crate_id":0,"name":"probe_sysroot_crate","span":{"filename":"src/lib.rs","begin":[246,4],"end":[249,5]},"visibility":"public","docs":"Tests whether the given sysroot crate can be used.\n\nThe test code is subject to change, but currently looks like:\n\n```ignore\nextern crate CRATE as probe;\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["name",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13745:55559":{"id":"2:13745:55559","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"self::pattern":"2:13332:2574","prim@char":"1:15883:1949"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13342:2568","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:13342:2568","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13357:2569","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13795:1785":{"id":"2:13795:1785","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:6649:2828":{"id":"1:6649:2828","crate_id":1,"name":"IntoRawFd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6650:57369"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:6163":{"id":"5:6163","crate_id":5,"name":null,"span":null,"visibility":{"restricted":{"parent":"5:5976:1353","path":"::str"}},"docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["5:6164:60218","5:6165:2115","5:6168:60219","5:6171:60220","5:6183:60221","5:6184:60222","5:6185:2133","5:6186:54321","5:6187:54322"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:4095:68":{"id":"2:4095:68","crate_id":2,"name":"Any","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:4096:1443"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"outlives":"'static"}],"implementations":[]}},"a:2:3405:2279-0:171:1629":{"id":"a:2:3405:2279-0:171:1629","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:3405:2279","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"AutoCfg","id":"0:171:1629","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:3522:3160":{"id":"2:3522:3160","crate_id":2,"name":"BitOrAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3524:360"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:116:1741":{"id":"0:116:1741","crate_id":0,"name":"emit_has_trait","span":{"filename":"src/lib.rs","begin":[302,4],"end":[306,5]},"visibility":"public","docs":"Emits a config value `has_TRAIT` if `probe_trait` returns true.\n\nAny non-identifier characters in the trait `name` will be replaced with\n`_` in the generated config value.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["name",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:8636:3308":{"id":"2:8636:3308","crate_id":2,"name":"Product","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8638:2534"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:8632:3306":{"id":"2:8632:3306","crate_id":2,"name":"Sum","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8634:2533"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3372:222":{"id":"2:3372:222","crate_id":2,"name":"StructuralPartialEq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:6187:54322":{"id":"5:6187:54322","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"2:13829:54325"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]","#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8472:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3103:3208":{"id":"2:3103:3208","crate_id":2,"name":"FloatToInt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"Int","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"2:3102:2835","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13799:59574":{"id":"2:13799:59574","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"trim_direction\", since = \"1.30.0\")]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:10801:143":{"id":"2:10801:143","crate_id":2,"name":"Hash","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10802:718","2:10804:54812"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"a:2:3405:2279-0:134:128":{"id":"a:2:3405:2279-0:134:128","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:3405:2279","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:134:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:3248:116":{"id":"2:3248:116","crate_id":2,"name":"Default","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3249:59"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:5567:2845":{"id":"1:5567:2845","crate_id":1,"name":"DirEntryExt2","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5568:54649"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"1:10416:2835","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"b:2:2868-0:134:128":{"id":"b:2:2868-0:134:128","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3369:2278","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2862:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:134:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2870:52866"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:3491:2922":{"id":"2:3491:2922","crate_id":2,"name":"BitAnd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3493:183","2:3494:357"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13792:59572":{"id":"2:13792:59572","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"prim@char":"1:15883:1949","`DoubleEndedIterator`":"2:8717:121","self::pattern":"2:13332:2574","str::match_indices":"2:13789:59571"},"attrs":["#[stable(feature = \"str_match_indices\", since = \"1.5.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatchIndices","id":"2:49957:2590","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13342:2568","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:13342:2568","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13357:2569","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:5431:2874":{"id":"1:5431:2874","crate_id":1,"name":"OsStrExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5432:4407","1:5433:52943"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"1:10416:2835","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:7602:2196":{"id":"1:7602:2196","crate_id":1,"name":"Termination","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:7603:54424"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:6502:1410":{"id":"5:6502:1410","crate_id":5,"name":"to_string","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8472:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"paths":{"2:47015:3403":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"1:5759:3127":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"17:11968:5029":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"2:32692:58487":{"crate_id":2,"path":["core","mem","valid_align","ValidAlignEnum32"],"kind":"enum"},"6:1558:6073":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"2:8197:3181":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"2:8717:121":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"2:49765:2580":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"16:3686:5587":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"2:32446:2556":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"9:1056:3914":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"17:11822:5005":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"2:13271:2176":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"1:4829:2988":{"crate_id":1,"path":["std","net","ip","display_buffer","IpDisplayBuffer"],"kind":"struct"},"17:8849:4487":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"16:4689:5604":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"1:14874:2193":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"16:3908:5590":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"6:4386:6427":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"2:4865:103":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"1:5563:2844":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"2:47925:190":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"16:6717:4232":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"2:46615:3461":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"9:996:3920":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"2:24854:173":{"crate_id":2,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"6:4116:6339":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"2:39184:2612":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"17:12015:5035":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"12:1784:4634":{"crate_id":12,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"17:0:1931":{"crate_id":17,"path":["object"],"kind":"module"},"1:13783:1624":{"crate_id":1,"path":["std","sys","unix","process","process_common","Stdio"],"kind":"enum"},"17:13975:5568":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"17:10445:4787":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"2:6640:3398":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"16:3494:4751":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"2:52379:3350":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"16:4871:5610":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"16:6277:4221":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"2:3501:2924":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"16:3221:4349":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"17:10476:4474":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"16:5668:4075":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"12:2052:2915":{"crate_id":12,"path":["hashbrown","set","Intersection"],"kind":"struct"},"17:9786:7294":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"17:13873:5543":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"1:8497:2223":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"6:4526:6485":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"1:9563:4681":{"crate_id":1,"path":["std","sys_common","rwlock","StaticRwLockWriteGuard"],"kind":"struct"},"1:11134:7177":{"crate_id":1,"path":["std","net","ip","fmt","Span"],"kind":"struct"},"2:3611:2280":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"2:48589:2444":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"6:5301:6577":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"12:2269:2960":{"crate_id":12,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"17:10775:7318":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"6:4340:6403":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"1:11088:2864":{"crate_id":1,"path":["std","net","ip","Ipv6Addr"],"kind":"struct"},"2:50072:2576":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"1:8000:4664":{"crate_id":1,"path":["std","sync","mpsc","spsc_queue","Queue"],"kind":"struct"},"2:3392:2611":{"crate_id":2,"path":["core","marker","Freeze"],"kind":"trait"},"6:571:6021":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"2:6900:58719":{"crate_id":2,"path":["core","iter","adapters","flatten","TrustedConstSize"],"kind":"trait"},"2:10034:79":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"1:3381:4662":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"1:10973:2110":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"2:51853:3356":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"2:24461:38433":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"18:849:4535":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"2:9533:2976":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"17:11212:4491":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"6:4148:6353":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"1:12596:7397":{"crate_id":1,"path":["std","sys","unix","fs","TimespecDebugAdapter"],"kind":"struct"},"6:4179:6363":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"2:2286:3214":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"5:7960:4656":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"2:50674:203":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"2:8682:2282":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"1:3042:1671":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"6:5398:6634":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"1:4351:2136":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"1:7436:2188":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"2:51570:7043":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"5:1296:3818":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"16:4599:5601":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"2:13351:2570":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"1:15882:1948":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"6:5186:6520":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"5:5166:664":{"crate_id":5,"path":["alloc","fmt"],"kind":"module"},"2:24311:6904":{"crate_id":2,"path":["core","num","dec2flt","common","AsciiStr"],"kind":"struct"},"17:10422:7306":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"12:399:3990":{"crate_id":12,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"2:3506:3152":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"1:6576:2834":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"1:1113:10348":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"1:11341:13623":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"2:24388:2557":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"1:3284:2121":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"16:6518:4185":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"12:2392:5896":{"crate_id":12,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"5:1518:2961":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"16:5923:4212":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"12:2412:5899":{"crate_id":12,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"1:2361:2671":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"17:13147:5337":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"17:1236:7289":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"2:24506:6926":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"1:1088:2548":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"17:13452:5413":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"5:8483:3705":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"2:46415:3471":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"17:9988:46338":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"2:3530:3146":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"1:6573:2832":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"1:14437:130":{"crate_id":1,"path":["std","sys","unix","fs","FileType"],"kind":"struct"},"5:7891:239":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"6:4012:6290":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"1:1105:7384":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"16:7741:4248":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"16:7369:4172":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"5:1055:3777":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"17:10318:4473":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"1:10703:3044":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"1:15906:1969":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"6:3972:6267":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"5:8226:2490":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"1:783:4682":{"crate_id":1,"path":["std","thread","local","fast","Key"],"kind":"struct"},"5:2284:3732":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"5:1626:94":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"2:28330:2555":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"2:5269:3500":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"1:8288:2897":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"17:13917:5558":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"6:1526:6060":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"2:46773:2061":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"6:157:39093":{"crate_id":6,"path":["libc","unix","FILE"],"kind":"enum"},"17:11354:4444":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"17:11305:5172":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"2:11682:2594":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"1:15902:1965":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"1:973:3033":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"2:53535:3320":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"9:234:3879":{"crate_id":9,"path":["miniz_oxide","deflate","core","HuffmanOxide"],"kind":"struct"},"2:10512:207":{"crate_id":2,"path":["core","fmt","Result"],"kind":"typedef"},"12:787:2952":{"crate_id":12,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"2:49587:3524":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"1:15899:1962":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"5:4665:4639":{"crate_id":5,"path":["alloc","collections","vec_deque","spec_extend","spec_extend","WrapAddOnDrop"],"kind":"struct"},"12:1682:3998":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"16:6075:4170":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"6:6925:6877":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"5:8232:3778":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"12:353:5892":{"crate_id":12,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"17:9958:60495":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"2:4783:2093":{"crate_id":2,"path":["core","array","try_collect_into_array","Guard"],"kind":"struct"},"5:5948:4645":{"crate_id":5,"path":["alloc","slice","insert_head","InsertionHole"],"kind":"struct"},"17:10937:7327":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"9:469:44064":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"2:49789:2113":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"17:681:4899":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"2:46211:197":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"1:10643:2709":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"1:3085:1619":{"crate_id":1,"path":["std","io"],"kind":"module"},"2:46963:3396":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"1:7470:2190":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"2:51671:7044":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"17:10571:4451":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"6:4434:6447":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"17:10390:4472":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"2:46754:3465":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"16:5721:4080":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"2:53741:7108":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"2:14057:139":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"2:49911:2594":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"1:5708:3121":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"1:7062:7391":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"5:3948:2125":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"2:37952:2422":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"1:15065:2944":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"2:24527:1896":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"17:11579:4948":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"6:3907:6221":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"6:4379:6425":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"5:2396:3819":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"2:53704:7105":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"16:7471:4167":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"2:2963:186":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"5:4372:2616":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"5:4509:2167":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"6:5974:6708":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"1:1991:146":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"17:12634:5158":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"6:3877:6203":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"16:2754:4091":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"2:47984:2616":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"1:14795:4690":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"1:10719:2125":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"2:11696:3520":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"2:3600:2116":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"6:1537:6065":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"5:844:227":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"17:9587:60503":{"crate_id":17,"path":["object","read","any","FileInternal"],"kind":"enum"},"17:12455:5124":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"2:48871:128":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"2:46995:3402":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"2:3471:3201":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"17:10068:4458":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"2:47331:7022":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"16:6026:4166":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"1:8715:2225":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"2:24415:6914":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"12:933:2954":{"crate_id":12,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"1:1431:2913":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"17:2314:4501":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"2:10580:191":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"5:3825:2167":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"2:50504:3547":{"crate_id":2,"path":["core","str","LinesAnyMap"],"kind":"struct"},"6:1606:6103":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"5:7048:3693":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"16:7792:4206":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"1:11882:2194":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"16:5257:4825":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"1:1592:2960":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"1:10914:2135":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"1:10217:4899":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"17:10831:4473":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"2:47874:3603":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"14:56:4920":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"1:9512:3059":{"crate_id":1,"path":["std","sys_common","remutex","ReentrantMutex"],"kind":"struct"},"1:8646:7392":{"crate_id":1,"path":["std","sync","mutex","fmt","LockedPlaceholder"],"kind":"struct"},"5:3106:6890":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"2:47074:3409":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"5:1701:2949":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"17:10198:7304":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"2:47857:2616":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"12:379:3991":{"crate_id":12,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"17:13428:5406":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"5:1760:3815":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"17:11457:4920":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"16:7100:4239":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"16:7721:4182":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"6:1626:6117":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"1:9427:54477":{"crate_id":1,"path":["std","sys_common","mutex","StaticMutex"],"kind":"struct"},"1:5330:1886":{"crate_id":1,"path":["std","num"],"kind":"module"},"6:1694:6170":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"6:1600:6101":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"6:6937:6879":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"2:23228:2835":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"1:1418:2950":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"6:5455:6656":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"12:2066:2917":{"crate_id":12,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"1:4476:55485":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"5:3838:2616":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"2:25151:2559":{"crate_id":2,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"1:15388:4015":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"2:46925:3392":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"16:7155:4244":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"2:13342:2568":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"6:4242:6368":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"5:6759:2219":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"2:46714:2585":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"1:11034:2860":{"crate_id":1,"path":["std","net","addr","SocketAddrV6"],"kind":"struct"},"16:3007:4344":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"2:3181:232":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"2:3453:3187":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"16:5869:191":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"17:13755:5514":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"2:49733:1897":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"1:11238:2858":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"2:5278:2458":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"1:10228:7405":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"2:50777:3382":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"17:13180:5348":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"16:7090:4238":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"18:169:52580":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"12:2280:2961":{"crate_id":12,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"2:9154:2175":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"1:15888:1953":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"17:11381:4901":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"1:4261:1620":{"crate_id":1,"path":["std","io","stdio","stderr"],"kind":"function"},"17:11937:5022":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"6:513:5985":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"6:1621:6115":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"5:1072:2167":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"2:2953:179":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"2:52023:3318":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"2:49352:3690":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"2:50011:2592":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"18:885:4538":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"16:5784:4082":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"2:46692:2586":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"5:1710:2950":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"16:7754:4249":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"6:3920:6231":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"19:0:1000":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"2:50692:192":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"1:6241:2878":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"18:661:4544":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"1:14647:53005":{"crate_id":1,"path":["std","sys","unix","process","process_common","ProgramKind"],"kind":"enum"},"1:11912:7199":{"crate_id":1,"path":["std","sync","mpsc","cache_aligned","CacheAligned"],"kind":"struct"},"2:3870:3291":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"1:8610:163":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"2:8636:3308":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"6:4088:6323":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"1:11952:2896":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"2:47064:3408":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"2:10578:2444":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"2:22881:58382":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"2:22847:57985":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_left","Rotate"],"kind":"struct"},"2:23437:3173":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"2:46944:3394":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"11:54:3974":{"crate_id":11,"path":["adler","Adler32"],"kind":"struct"},"17:10814:4443":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"2:2502:3312":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"16:7684:4181":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"2:49121:3305":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"17:10435:4430":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"6:1912:40401":{"crate_id":6,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"2:10245:3502":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"1:10794:2982":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"17:13549:5442":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"2:24400:3439":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"2:47992:2490":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"16:2959:4343":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"2:52875:3343":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"1:7739:54482":{"crate_id":1,"path":["std","sync","mpsc","blocking","WaitToken"],"kind":"struct"},"1:14894:2731":{"crate_id":1,"path":["std","sys","unix","time","SystemTime"],"kind":"struct"},"1:15883:1949":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"17:11945:5024":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"6:4356:6411":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"1:1146:10349":{"crate_id":1,"path":["std","backtrace","LazilyResolvedCapture"],"kind":"struct"},"5:8494:3706":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"5:5861:4636":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"6:6268:6850":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"6:1669:6151":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"2:3479:3205":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"1:5553:2843":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"1:14960:7214":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"2:50349:3233":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"17:10516:4841":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"1:15324:53002":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"1:5278:3071":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"2:3437:2925":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"2:47916:38654":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"17:9259:4825":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"1:14067:2126":{"crate_id":1,"path":["std","sys","unix","stdio","Stderr"],"kind":"struct"},"2:51422:3347":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"2:46603:3460":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"6:4538:6490":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"1:6219:2834":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"1:10278:4683":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"1:8863:2230":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"6:4135:6349":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"17:11530:4940":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"1:11868:2193":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"2:3374:107":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"6:601:6038":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"2:52725:3319":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"12:2253:2959":{"crate_id":12,"path":["hashbrown","set","Entry"],"kind":"enum"},"5:1502:2959":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"2:32632:3620":{"crate_id":2,"path":["core","mem","valid_align","ValidAlign"],"kind":"struct"},"16:6630:4377":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"2:47084:3410":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"1:14801:4691":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"1:13394:2681":{"crate_id":1,"path":["std","sys","unix","os","SplitPaths"],"kind":"struct"},"6:4474:6464":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"6:6034:6741":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"2:3676:3277":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"16:6907:4233":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"16:3402:4094":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"16:6931:4388":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"17:9004:46286":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"5:2005:2914":{"crate_id":5,"path":["alloc","collections","btree","map","DrainFilter"],"kind":"struct"},"17:9240:4424":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"1:3070:2727":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"1:8777:2234":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"2:48278:83":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"1:8453:2222":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"2:13332:2574":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"16:7637:4246":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"6:6931:6878":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"6:6856:6869":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"1:5978:3082":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"17:10187:7303":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"1:14379:2836":{"crate_id":1,"path":["std","sys","unix","fd","FileDesc"],"kind":"struct"},"2:2765:584":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"9:0:1924":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"2:46894:3389":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"6:4346:6405":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"5:8279:196":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"17:11282:46294":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"2:8632:3306":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"2:10582:2445":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"2:3522:3160":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"16:3366:4357":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"2:53619:3358":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"2:49747:2584":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"12:880:2914":{"crate_id":12,"path":["hashbrown","map","DrainFilter"],"kind":"struct"},"17:13155:5338":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"17:13094:5331":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"16:2905:4342":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"2:52425:3354":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"1:2909:129":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"9:809:2163":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"2:23232:2885":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"16:4198:5591":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"1:10678:130":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"6:6205:6825":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"17:11031:46292":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"12:777:2490":{"crate_id":12,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"2:50397:2598":{"crate_id":2,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"2:8874:158":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"17:13472:5420":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"1:7484:1623":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"1:10993:2114":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"1:8195:2163":{"crate_id":1,"path":["std","sync","mpsc","sync","State"],"kind":"struct"},"2:4161:3183":{"crate_id":2,"path":["core","any","Demand"],"kind":"struct"},"12:2036:2490":{"crate_id":12,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"2:47004:3400":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"2:53809:7112":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"17:11956:5027":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"2:14359:3313":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"2:49839:2597":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"17:10788:7320":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"10:0:1925":{"crate_id":10,"path":["rustc_std_workspace_alloc"],"kind":"module"},"6:3993:6277":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"6:5149:6494":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"2:52069:3322":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"2:14148:189":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"1:10443:3031":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"2:23102:3169":{"crate_id":2,"path":["core","core_simd","elements","int","SimdInt"],"kind":"trait"},"17:10093:4513":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"2:11589:2593":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"2:52661:3334":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"5:6775:3711":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"1:14453:119":{"crate_id":1,"path":["std","sys","unix","fs","DirBuilder"],"kind":"struct"},"17:9920:7296":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"16:4743:5606":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"9:927:44058":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"6:6896:6870":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"2:48406:1625":{"crate_id":2,"path":["core","sync","atomic","ATOMIC_USIZE_INIT"],"kind":"constant"},"17:10127:4473":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"1:6467:2842":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"17:10104:4514":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"1:15908:1971":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"2:3177:233":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"1:6477:6752":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"2:32792:58483":{"crate_id":2,"path":["core","mem","valid_align","ValidAlignEnum64"],"kind":"enum"},"2:48068:91":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"2:50512:3552":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"2:2181:583":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"2:4998:3491":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"2:50106:2587":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"1:2152:2918":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"16:5348:4056":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"18:744:60505":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"2:57952:7121":{"crate_id":2,"path":["core","core_simd","vector","ptr","SimdConstPtr"],"kind":"struct"},"2:46785:3600":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"2:11710:3521":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"1:4428:2103":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"1:4752:2856":{"crate_id":1,"path":["std","net","addr","ToSocketAddrs"],"kind":"trait"},"6:5447:6654":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"16:5238:44709":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"6:4218:6366":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"2:46848:2077":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"1:7782:4664":{"crate_id":1,"path":["std","sync","mpsc","mpsc_queue","Queue"],"kind":"struct"},"1:4467:1621":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"17:13138:5336":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"2:56242:3296":{"crate_id":2,"path":["core","core_simd","swizzle","Which"],"kind":"enum"},"2:53333:3351":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"18:790:4530":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"12:162:3988":{"crate_id":12,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"17:10464:4470":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"17:13440:5412":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"1:1441:2914":{"crate_id":1,"path":["std","collections","hash","map","DrainFilter"],"kind":"struct"},"6:4454:6457":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"6:4464:6463":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"1:10438:3014":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"16:3314:4089":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"2:37928:180":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"1:10468:3016":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"17:11689:4969":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"2:24:604":{"crate_id":2,"path":["core","env"],"kind":"macro"},"17:12527:5136":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"11:0:1926":{"crate_id":11,"path":["adler"],"kind":"module"},"5:8566:3756":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"1:10902:2139":{"crate_id":1,"path":["std","io","readbuf","BorrowedCursor"],"kind":"struct"},"1:8217:3788":{"crate_id":1,"path":["std","sync","mpsc","sync","Node"],"kind":"struct"},"1:5730:3123":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"4:0:1922":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"2:46735:3675":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"enum"},"2:46231:200":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"17:10028:7299":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"16:3521:5586":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"2:50043:2114":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"1:11890:7198":{"crate_id":1,"path":["std","sync","mpsc","blocking","SignalToken"],"kind":"struct"},"12:1183:3985":{"crate_id":12,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"2:10572:2441":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"17:9087:46289":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"17:12716:5167":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"2:49759:2581":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"1:1031:2852":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"5:6340:3760":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"7:0:1496":{"crate_id":7,"path":["unwind"],"kind":"module"},"5:5488:2093":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"6:1680:6159":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"1:5497:2840":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"5:3554:2914":{"crate_id":5,"path":["alloc","collections","btree","set","DrainFilter"],"kind":"struct"},"16:6858:4385":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"18:136:52578":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"1:12067:164":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"17:11563:4947":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"1:11201:3067":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"2:47840:2489":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"6:5293:6572":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"17:12406:5117":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"1:12087:2908":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"14:0:1928":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"2:13050:3541":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"2:5706:2075":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"18:694:4546":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"2:47976:2167":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"2:46768:101":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"16:7208:4245":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"6:4425:6441":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"1:12567:4687":{"crate_id":1,"path":["std","sys","unix","fs","Dir"],"kind":"struct"},"6:6229:6835":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"2:50285:3231":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"13:121:44605":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"3:0:436":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"2:50727:3559":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"2:25118:166":{"crate_id":2,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"5:3441:3730":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"6:6967:6885":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"1:2422:2689":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"5:3110:59142":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"16:4660:5603":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"2:5152:3494":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"17:10082:4512":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"2:48110:81":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"12:1147:2961":{"crate_id":12,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"1:4217:2130":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"2:3165:75":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"6:3981:6272":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"17:10489:4840":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"1:14460:2104":{"crate_id":1,"path":["std","sys","unix","io","IoSlice"],"kind":"struct"},"2:10523:135":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"16:5443:4064":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"2:50312:3232":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"17:8902:46284":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"1:13413:54320":{"crate_id":1,"path":["std","sys","unix","os","Env"],"kind":"struct"},"2:13362:2567":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"2:3463:2998":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"2:23175:3386":{"crate_id":2,"path":["core","core_simd","eq","SimdPartialEq"],"kind":"trait"},"1:6339:2880":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"1:853:3008":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"12:432:3989":{"crate_id":12,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"2:47302:7018":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"1:14968:2201":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"17:13961:5565":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"2:9655:2568":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"2:5147:3493":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"2:47043:3406":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"2:39144:3826":{"crate_id":2,"path":["core","error","private","Internal"],"kind":"struct"},"16:0:1930":{"crate_id":16,"path":["gimli"],"kind":"module"},"12:183:3992":{"crate_id":12,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"17:13859:5541":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"5:69:3755":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"17:13938:5561":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"2:46297:3593":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"1:12072:2226":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"17:12262:5074":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"1:2654:181":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"17:10223:4428":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"1:8187:3033":{"crate_id":1,"path":["std","sync","mpsc","sync","Packet"],"kind":"struct"},"1:997:2883":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"6:5439:6652":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"2:47311:2136":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"2:3459:3197":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"1:7939:3033":{"crate_id":1,"path":["std","sync","mpsc","shared","Packet"],"kind":"struct"},"1:15893:1956":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"1:1456:2953":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"6:1727:6186":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"12:764:2616":{"crate_id":12,"path":["hashbrown","map","IterMut"],"kind":"struct"},"2:46645:3676":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"2:3442:3190":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"6:6129:6773":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"13:0:1921":{"crate_id":13,"path":["std_detect"],"kind":"module"},"6:0:803":{"crate_id":6,"path":["libc"],"kind":"module"},"12:114:60488":{"crate_id":12,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"2:22900:58381":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"2:10570:120":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"1:11359:2153":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"1:859:3009":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"2:23974:57983":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"18:801:4531":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"16:3029:4345":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"2:10039:86":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"17:10015:7298":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"17:13721:5502":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"2:48152:88":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"2:48575:2441":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"12:0:1927":{"crate_id":12,"path":["hashbrown"],"kind":"module"},"9:692:3854":{"crate_id":9,"path":["miniz_oxide","deflate","core","CompressionStrategy"],"kind":"enum"},"1:2147:2917":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"18:729:60507":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"6:5419:6646":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"1:3459:2124":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"17:12196:5065":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"17:10503:4475":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"2:8669:137":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"6:1764:6197":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"16:5855:4085":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"2:48404:92":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"9:41:3904":{"crate_id":9,"path":["miniz_oxide","deflate","buffer","LocalBuf"],"kind":"struct"},"17:11701:4972":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"2:3467:2999":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"17:12573:5143":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"17:9183:4447":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"16:3243:4350":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"2:10250:3503":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"5:8271:2490":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"18:896:4539":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"17:11433:4919":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"2:25085:169":{"crate_id":2,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"2:50237:3230":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"1:3405:2117":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"6:626:6051":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"1:2135:2915":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"2:3614:131":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"1:14886:57433":{"crate_id":1,"path":["std","sys","unix","thread","cgroups","Cgroup"],"kind":"enum"},"1:3803:128":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"2:25019:167":{"crate_id":2,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"6:4020:6292":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"5:3402:2916":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"1:14912:7213":{"crate_id":1,"path":["std","sys","unix","time","Timespec"],"kind":"struct"},"2:24240:3572":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"1:11449:2165":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"2:46187:196":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"1:13761:54475":{"crate_id":1,"path":["std","sys","unix","process","process_common","Argv"],"kind":"struct"},"5:1684:2490":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"0:99:926":{"crate_id":0,"path":["autocfg","new"],"kind":"function"},"2:3526:3162":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"17:10039:7300":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"6:6250:6847":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"2:3382:2461":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"1:8446:2221":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"2:23387:15500":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","ToBitMask"],"kind":"trait"},"5:0:283":{"crate_id":5,"path":["alloc"],"kind":"module"},"6:4277:6370":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"2:9161:3179":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"1:14064:2130":{"crate_id":1,"path":["std","sys","unix","stdio","Stdout"],"kind":"struct"},"17:13293:5371":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"2:2859:97":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"1:10534:2676":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"1:15633:4692":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"17:9431:4830":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"1:12014:2902":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"16:4840:5609":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"2:50684:7040":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"5:3905:4636":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"2:50363:3234":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"2:46675:3671":{"crate_id":2,"path":["core","char","EscapeUnicodeState"],"kind":"enum"},"2:9157:2617":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"1:10942:2106":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"2:3620:133":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"5:3407:3729":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"5:1663:2167":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"6:4332:6399":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"1:14417:7210":{"crate_id":1,"path":["std","sys","unix","fs","FilePermissions"],"kind":"struct"},"16:7141:4243":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"1:10517:2927":{"crate_id":1,"path":["std","collections","hash","map","RandomState"],"kind":"struct"},"1:9653:4682":{"crate_id":1,"path":["std","sys_common","thread_local_key","Key"],"kind":"struct"},"6:6665:6857":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"1:15192:3063":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"2:50532:3548":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"3:321:207":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"2:23763:3175":{"crate_id":2,"path":["core","core_simd","ord","SimdPartialOrd"],"kind":"trait"},"2:8742:2281":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"1:7599:2195":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"2:50735:3560":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"1:13245:3078":{"crate_id":1,"path":["std","sys","unix","net","Socket"],"kind":"struct"},"17:12892:5184":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"16:3103:4356":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"2:51400:3359":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"1:15907:1970":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"2:24887:174":{"crate_id":2,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"1:15884:1950":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"2:2884:105":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"12:1703:3999":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"1:11501:2167":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"2:50063:2578":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"2:47286:7017":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"2:48893:71":{"crate_id":2,"path":["core","fmt","ArgumentV1"],"kind":"struct"},"1:6100:3083":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"2:2917:185":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"2:3370:2609":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"17:12607:5156":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"1:11966:2899":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"2:56651:241":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"6:5229:6538":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"17:10253:4423":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"1:2126:2913":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"12:895:3976":{"crate_id":12,"path":["hashbrown","map","ConsumeAllOnDrop"],"kind":"struct"},"2:47933:207":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"2:50088:2585":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"17:10340:4502":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"2:49857:2596":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"2:22862:57985":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_right","Rotate"],"kind":"struct"},"17:12282:5080":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"17:11713:4973":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"1:4143:3051":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"16:7415:4190":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"5:5388:202":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"6:527:5993":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"2:46631:3463":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"5:1673:2616":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"16:5303:4054":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"17:13953:5562":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"16:6980:4234":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"1:6841:2837":{"crate_id":1,"path":["std","os","net","tcp","TcpStreamExt"],"kind":"trait"},"16:6595:4184":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"2:3364:215":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"17:9561:4467":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"16:5217:4096":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"2:51500:3360":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"15:248:4007":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"2:12772:3685":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"2:53657:3323":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"2:53695:7104":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"1:10789:2981":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"12:928:2951":{"crate_id":12,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"2:23238:2887":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"17:13794:5522":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"1:5431:2874":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"18:0:1932":{"crate_id":18,"path":["memchr"],"kind":"module"},"1:11314:2824":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"5:3366:95":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"17:13565:5445":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"2:51356:7041":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"5:8361:2174":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"5:4281:2913":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"1:14862:2192":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatus"],"kind":"struct"},"17:10166:4839":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"6:5582:6701":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"2:9534:2975":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"16:3478:4352":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"6:4485:6470":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"6:580:6027":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"2:46972:7013":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"1:10655:2712":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"18:611:4541":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"17:9064:46288":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"1:8295:2898":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"1:15900:1963":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"16:3129:4355":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"2:14183:7378":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"6:3960:6264":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"5:7358:4636":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"17:11256:4896":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"16:4495:5599":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"17:12921:5204":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"5:4036:4636":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"1:1405:2949":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"17:10058:4518":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"1:3755:2984":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"16:6050:4214":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"2:47865:2490":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"2:7936:2498":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"2:50508:3550":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"6:5547:6676":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"6:3896:6213":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"6:5567:6690":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"2:14369:3561":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"9:776:3901":{"crate_id":9,"path":["miniz_oxide","deflate","CompressionLevel"],"kind":"enum"},"16:2937:4365":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"17:9275:4826":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"7:38:43954":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"2:3907:3292":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"1:4146:3052":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"6:1748:6193":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"1:4219:2131":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"1:11250:3125":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"17:9636:7291":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"18:820:4533":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"1:1466:2955":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"2:51901:3341":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"16:5745:4081":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"12:940:2955":{"crate_id":12,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"6:5390:6633":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"15:269:4011":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"16:6468:4226":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"6:1704:6176":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"2:49657:3528":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"2:12796:1899":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"2:52537:3342":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"6:5274:6570":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"6:4048:6304":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"2:48568:2442":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"2:47320:7020":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"12:559:144":{"crate_id":12,"path":["hashbrown","map","HashMap"],"kind":"struct"},"5:3960:3789":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"2:3174:136":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"1:6647:2827":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"6:5288:6571":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"2:3475:3203":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"1:15170:2865":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"17:13129:5332":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"17:13774:5519":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"16:6060:4209":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"17:12417:5119":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"2:8673:152":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"17:10558:7313":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"17:9517:2111":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"16:2883:4360":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"16:4439:5597":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"17:10407:4497":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"5:8389:102":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"16:4803:5608":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"2:3369:2278":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"2:47293:2225":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"5:777:7365":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"16:5273:4826":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"1:15897:1960":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"17:12157:5061":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"2:32988:3302":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"2:46594:7002":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"18:720:4736":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"16:7121:4241":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"17:11234:4489":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"2:53715:7106":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"2:2263:3210":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"6:4362:6414":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"1:10638:2708":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"17:10147:4837":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"9:686:3852":{"crate_id":9,"path":["miniz_oxide","deflate","core","SymFreq"],"kind":"struct"},"12:869:2913":{"crate_id":12,"path":["hashbrown","map","Drain"],"kind":"struct"},"16:6656:4379":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"17:11615:4955":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"2:2188:6896":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"17:13233:5360":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"2:10576:2443":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"6:5204:6533":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"2:51690:3317":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"16:4381:5595":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"2:47052:3407":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"17:12620:5157":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"16:5887:4087":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"12:815:2953":{"crate_id":12,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"1:11105:2987":{"crate_id":1,"path":["std","net","ip","Ipv6MulticastScope"],"kind":"enum"},"2:46370:2456":{"crate_id":2,"path":["core","any","tags","Ref"],"kind":"struct"},"1:14665:2194":{"crate_id":1,"path":["std","sys","unix","process","process_common","ExitCode"],"kind":"struct"},"2:51446:3339":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"17:10643:4844":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"6:1733:3077":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"2:3841:3288":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"17:12070:5046":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"16:4628:5602":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"16:6190:4220":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"2:50097:2586":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"2:46986:3397":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"2:11668:2595":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"2:3518:3158":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"17:11784:4997":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"2:8449:2215":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"5:3436:2915":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"17:13495:5428":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"2:51977:3333":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"2:23291:3173":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"12:979:2958":{"crate_id":12,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"2:8022:3261":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"6:4067:6312":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"2:53794:7111":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"1:15053:2938":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"1:12053:2224":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"2:46667:2587":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"5:8420:3600":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"16:2733:4092":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"5:6498:228":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"17:13196:5351":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"1:7602:2196":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"2:5224:2456":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"17:10586:7315":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"12:2032:2167":{"crate_id":12,"path":["hashbrown","set","Iter"],"kind":"struct"},"17:13404:5398":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"17:10530:4881":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"2:56599:241":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"17:10874:4878":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"5:8472:220":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"2:24821:172":{"crate_id":2,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"16:2981:4354":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"6:612:6043":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"2:4095:68":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"16:6482:4374":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"16:5948:4339":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"17:12431:5121":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"17:4008:7290":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"6:4416:6438":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"1:14399:7204":{"crate_id":1,"path":["std","sys","unix","fs","StatxExtraFields"],"kind":"struct"},"2:10801:143":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"6:6057:6759":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"1:2359:2670":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"2:4853:3258":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"16:6604:4230":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"2:49578:3523":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"6:545:6001":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"6:4081:6320":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"1:8732:3098":{"crate_id":1,"path":["std","sync","once","WaiterQueue"],"kind":"struct"},"2:11434:2113":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"2:14253:58564":{"crate_id":2,"path":["core","future","from_generator","GenFuture"],"kind":"struct"},"1:5575:2847":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"1:1460:2954":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"17:11603:4952":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"17:10975:7330":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"1:13607:2199":{"crate_id":1,"path":["std","sys","unix","pipe","AnonPipe"],"kind":"struct"},"1:14394:7202":{"crate_id":1,"path":["std","sys","unix","fs","FileAttr"],"kind":"struct"},"17:13595:5451":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"2:48362:85":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"2:24953:2560":{"crate_id":2,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"14:231:3708":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"16:3155:4346":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"14:189:7360":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"1:696:3004":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"6:1551:6070":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"16:3576:4755":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"2:24986:170":{"crate_id":2,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"2:51468:3327":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"18:774:4734":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"1:2130:2914":{"crate_id":1,"path":["std","collections","hash","set","DrainFilter"],"kind":"struct"},"8:0:1923":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"1:15849:54499":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"18:645:4543":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"2:56638:241":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"17:11130:4891":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"2:49957:2590":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"1:5154:3064":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"2:57973:7122":{"crate_id":2,"path":["core","core_simd","vector","ptr","SimdMutPtr"],"kind":"struct"},"1:10511:10347":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"1:15253:3071":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"12:1666:3997":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"1:3058:2721":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"2:56677:241":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"17:13271:5367":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"1:4036:2138":{"crate_id":1,"path":["std","io","readbuf","BorrowedBuf"],"kind":"struct"},"2:3103:3208":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"16:3340:4090":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"6:3966:6265":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"16:5941:4213":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"1:2119:2167":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"17:10455:4471":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"2:50536:3549":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"1:11507:2169":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"6:4296:6382":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"2:53871:7114":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"2:52198:7054":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"6:4142:6351":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"17:9746:7293":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"16:7200:4188":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"2:47808:178":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"1:3371:2122":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"2:50384:3236":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"2:2277:3213":{"crate_id":2,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"5:981:96":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"16:6557:4229":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"17:607:7288":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"17:13421:5405":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"1:13481:2989":{"crate_id":1,"path":["std","sys","unix","os_str","Slice"],"kind":"struct"},"16:4467:5598":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"2:8376:2135":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"17:10304:4464":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"2:2391:2985":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"17:11085:4493":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"2:53779:7110":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"2:52045:3321":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"17:12130:5057":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"17:11409:4905":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"2:48808:67":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"1:4256:2126":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"1:15854:10350":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"17:10266:4458":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"6:1588:6093":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"16:7025:4099":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"2:46858:2076":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"2:53411:3335":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"2:14456:142":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"1:4410:2101":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"17:12117:5054":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"6:1712:6177":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"16:6679:4381":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"1:2326:604":{"crate_id":1,"path":["std","env"],"kind":"module"},"16:6035:4208":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"2:8433:58963":{"crate_id":2,"path":["core","iter","sources","from_generator","FromGenerator"],"kind":"struct"},"2:50561:3000":{"crate_id":2,"path":["core","time","FromFloatSecsError"],"kind":"struct"},"1:3801:207":{"crate_id":1,"path":["std","io","error","Result"],"kind":"typedef"},"17:13215:5352":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"2:49569:3522":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"17:9676:60499":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"1:15315:7217":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"2:23151:2835":{"crate_id":2,"path":["core","core_simd","elements","sealed","Sealed"],"kind":"trait"},"5:3104:2542":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"17:11628:4957":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"1:2911:2710":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"2:11385:2167":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"6:6153:6785":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"9:1020:3921":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"16:6549:4187":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"17:11985:5032":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"6:1544:6068":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"6:4198:6364":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"1:5151:3063":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"0:98:1649":{"crate_id":0,"path":["autocfg","rerun_env"],"kind":"function"},"17:10394:4498":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"17:13073:5326":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"1:15890:1955":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"2:5078:2455":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"2:53081:3363":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"17:13908:5556":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"6:5240:6546":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"6:4516:6480":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"2:56612:241":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"18:712:2422":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"6:6007:6731":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"17:10545:7310":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"2:3672:2968":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"2:5727:3423":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"6:5541:6675":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"13:233:5891":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"1:1610:2962":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"0:97:1643":{"crate_id":0,"path":["autocfg","rerun_path"],"kind":"function"},"1:12565:2709":{"crate_id":1,"path":["std","sys","unix","fs","ReadDir"],"kind":"struct"},"2:50417:2599":{"crate_id":2,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"1:15865:52997":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"17:8954:4449":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"1:11154:3114":{"crate_id":1,"path":["std","net","parser","AddrKind"],"kind":"enum"},"2:49670:3529":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"1:14142:3016":{"crate_id":1,"path":["std","sys","unix","thread","Thread"],"kind":"struct"},"17:10949:7328":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"2:24539:2561":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"16:6504:4228":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"1:11264:3065":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"2:49356:3689":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"14:244:5844":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"17:13660:5495":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"6:6688:6868":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"17:12003:5033":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"17:13281:5368":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"2:25052:168":{"crate_id":2,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"1:11022:2859":{"crate_id":1,"path":["std","net","addr","SocketAddrV4"],"kind":"struct"},"2:24440:38441":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"18:754:60508":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"11:46:5902":{"crate_id":11,"path":["adler","algo","U32X4"],"kind":"struct"},"16:6310:4222":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"1:6481:6756":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"6:4410:6437":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"1:1374:2167":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"17:9883:60502":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"17:12143:4849":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"5:8373:2966":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"17:13369:5392":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"16:7702:4180":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"6:672:39427":{"crate_id":6,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"2:4489:2490":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"16:5412:4062":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"5:6739:69":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"6:4230:6367":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"16:5516:4068":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"17:9836:60498":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"2:3171:150":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"5:5906:2572":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"9:749:3856":{"crate_id":9,"path":["miniz_oxide","deflate","core","TDEFLStatus"],"kind":"enum"},"16:7281:4175":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"16:3461:4353":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"6:6902:6871":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"2:47033:3405":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"2:48945:73":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"2:7159:3401":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"2:3835:3286":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"6:6979:6887":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"2:49142:2163":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"16:6949:4389":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"1:15889:1954":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"6:634:6056":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"17:13887:5550":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"16:7309:4174":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"5:984:3776":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"17:2543:4469":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"17:10240:4420":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"5:8217:3700":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"17:13899:5552":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"17:9756:60500":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"1:15887:1952":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"2:51708:7045":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"17:13584:5450":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"5:2328:3820":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"16:4775:5607":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"17:9131:46290":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"5:5609:2219":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"2:51999:3336":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"17:12170:5062":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"5:7935:4650":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"15:0:1929":{"crate_id":15,"path":["addr2line"],"kind":"module"},"7:85:43961":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"2:22879:58384":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"2:46329:3290":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"17:12512:5132":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"6:607:6041":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"1:5746:3126":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"5:2266:4638":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"17:13029:5294":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"16:6873:3603":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"2:53730:7107":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"17:10925:7326":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"2:3405:2279":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"17:12048:5045":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"1:12228:2688":{"crate_id":1,"path":["std","sys","unix","args","Args"],"kind":"struct"},"17:12093:5052":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"17:4157:4452":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"17:12700:5165":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"2:46356:3275":{"crate_id":2,"path":["core","any","tags","Value"],"kind":"struct"},"1:7314:120":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"1:2510:2547":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"17:13735:5508":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"6:6135:6774":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"17:9396:4829":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"1:9267:7537":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"16:6286:4004":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"12:1203:3986":{"crate_id":12,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"5:1909:4636":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"17:12222:5069":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"1:10921:2137":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"2:2922:125":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"1:11836:2191":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"14:47:7360":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"2:51631:3328":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"18:829:4534":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"1:1261:144":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"2:13124:2577":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"2:14107:58563":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"2:13089:3543":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"2:3496:2923":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"1:15232:3064":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"16:6331:4003":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"6:6214:6828":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"2:49893:2595":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"5:8406:2060":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"16:5498:4067":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"16:3297:4404":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"1:1447:2951":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"18:811:4532":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"2:24068:2835":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"1:15071:2945":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"17:9326:4465":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"17:10801:4442":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"6:4028:6295":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"6:4321:6393":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"2:46954:3395":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"2:48929:2440":{"crate_id":2,"path":["core","fmt","FlagV1"],"kind":"enum"},"2:24332:3443":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"16:7355:4171":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"2:46903:2109":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"6:4127:6344":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"6:3987:6274":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"16:7449:4179":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"1:2651:182":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"1:11409:2163":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"1:15377:4015":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"5:1729:2952":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"16:5176:5614":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"1:15895:1958":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"2:23768:15519":{"crate_id":2,"path":["core","core_simd","ord","SimdOrd"],"kind":"trait"},"6:521:5990":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"2:11516:3516":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"2:49699:3532":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"12:1121:2960":{"crate_id":12,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"6:6114:6767":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"2:46728:3674":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"12:2419:2174":{"crate_id":12,"path":["hashbrown","TryReserveError"],"kind":"enum"},"2:46878:3390":{"crate_id":2,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"1:11518:2170":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"18:739:7283":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"1:10711:2123":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"6:6643:6856":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"2:46801:3601":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"18:152:52579":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"6:4308:6389":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"14:250:5846":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"1:2141:2916":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"1:3044:2717":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"2:53223:3331":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"2:48001:180":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"1:8096:3033":{"crate_id":1,"path":["std","sync","mpsc","stream","Packet"],"kind":"struct"},"18:782:4734":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"6:5378:6626":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"17:11640:4958":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"17:13361:5390":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"16:7826:3275":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"16:6099:4216":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"16:3199:4348":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"16:7169:4186":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"17:12348:5105":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"17:12250:5073":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"1:11894:54433":{"crate_id":1,"path":["std","sync","mpsc","shared","StartResult"],"kind":"enum"},"17:11742:4982":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"2:46934:3393":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"1:6649:2828":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"1:14931:2908":{"crate_id":1,"path":["std","sys","unix","time","inner","Instant"],"kind":"struct"},"6:5247:6550":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"17:9466:4831":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"2:50169:3222":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"6:4532:6487":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"6:4110:6336":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"17:11013:7333":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"17:10660:46476":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"1:3060:2722":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"2:13357:2569":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"17:9646:60497":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"16:5998:4153":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"6:6914:6873":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"2:50573:3617":{"crate_id":2,"path":["core","time","FromFloatSecsErrorKind"],"kind":"enum"},"17:13037:5296":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"17:9948:7297":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"16:4573:5600":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"2:10718:7377":{"crate_id":2,"path":["core","fmt","fmt","BorrowedPlaceholder"],"kind":"struct"},"2:49152:7034":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"16:5698:4079":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"2:5529:3668":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"17:13747:5511":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"5:8449:2059":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"1:10550:2683":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"1:15903:1966":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"16:3177:4347":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"16:7131:4242":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"12:952:2956":{"crate_id":12,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"1:1489:2958":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"2:53832:7113":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"2:49689:3531":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"1:4180:2129":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"17:9291:4827":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"17:13515:5434":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"1:5636:3118":{"crate_id":1,"path":["std","os","unix","net","addr","AsciiEscaped"],"kind":"struct"},"5:4709:4641":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"1:1397:2490":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"2:21:676":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"17:13323:5382":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"16:7868:128":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"2:48832:134":{"crate_id":2,"path":["core","fmt","rt","v1","FormatSpec"],"kind":"struct"},"17:11181:4895":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"17:13708:5496":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"2:47024:3404":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"1:10417:3005":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"17:10913:7325":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"1:11177:3115":{"crate_id":1,"path":["std","net","parser","AddrParseError"],"kind":"struct"},"2:3168:74":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"17:13167:5343":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"2:52301:3362":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"6:5488:6664":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"17:11168:4893":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"18:866:4537":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"17:13529:5436":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"17:13016:5287":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"2:49518:3519":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"2:3654:3278":{"crate_id":2,"path":["core","ops","generator","Generator"],"kind":"trait"},"6:4373:6422":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"2:49939:2589":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"16:6490:4227":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"6:4270:3084":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"17:2512:4499":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"16:6141:4218":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"2:50374:3235":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"17:294:7285":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"17:13331:5385":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"5:1719:2951":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"16:3077:4403":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"1:4383:2093":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"2:50191:3223":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"16:6533:4372":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"1:5738:3124":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"2:52120:7052":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"1:1483:2957":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"17:9796:60501":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"5:8436:2058":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"17:12758:5175":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"2:53756:7109":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"16:7247:4203":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"6:586:6030":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"12:843:2949":{"crate_id":12,"path":["hashbrown","map","Keys"],"kind":"struct"},"16:6089:4215":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"2:10846:2921":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"1:14429:2712":{"crate_id":1,"path":["std","sys","unix","fs","FileTimes"],"kind":"struct"},"2:51601:3340":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"17:12746:5172":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"1:1477:2956":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"17:10048:7301":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"2:24072:3174":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"17:13352:5389":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"17:10988:7331":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"2:22902:58379":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"1:2914:2714":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"16:5639:4072":{"crate_id":16,"path":["gimli","read","cfi","UninitializedUnwindContext"],"kind":"struct"},"1:15898:1961":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"1:11288:2833":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"17:1311:4519":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"18:668:4545":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"1:13859:2191":{"crate_id":1,"path":["std","sys","unix","process","process_common","CommandArgs"],"kind":"struct"},"16:4351:5594":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"2:3372:222":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"12:2045:2914":{"crate_id":12,"path":["hashbrown","set","DrainFilter"],"kind":"struct"},"2:10851:3304":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"2:49160:7035":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"1:5567:2845":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"18:766:4745":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"6:4075:6317":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"6:5433:6649":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"17:11068:4448":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"6:6908:6872":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"6:6120:6769":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"6:4005:6286":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"16:7079:4237":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"2:9535:3019":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"1:11190:3065":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"2:49607:3526":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"1:11998:2901":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"2:49644:3390":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"1:13928:4688":{"crate_id":1,"path":["std","sys","unix","stack_overflow","Handler"],"kind":"struct"},"2:3248:116":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"2:0:493":{"crate_id":2,"path":["core"],"kind":"module"},"1:12082:214":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"2:14420:203":{"crate_id":2,"path":["core","task","ready","Ready"],"kind":"struct"},"1:10665:2713":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"17:11725:4974":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"6:4315:6390":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"2:46124:3279":{"crate_id":2,"path":["core","ops","generator","GeneratorState"],"kind":"enum"},"2:51530:3348":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"17:12469:5126":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"17:12482:5127":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"1:5425:2873":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"2:24423:6915":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"2:4896:3311":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"2:50540:122":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"2:2862:98":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"17:9539:4488":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"2:47105:3411":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"1:2917:2102":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"6:88:39027":{"crate_id":6,"path":["libc","unix","DIR"],"kind":"enum"},"2:5321:2459":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"16:547:4076":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"2:13408:3225":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"5:1256:59005":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"0:171:1629":{"crate_id":0,"path":["autocfg","AutoCfg"],"kind":"struct"},"2:10513:1621":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"1:10999:2858":{"crate_id":1,"path":["std","net","addr","SocketAddr"],"kind":"enum"},"17:11671:4968":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"5:1751:196":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"9:963:3919":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"2:3743:3594":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"2:3829:138":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"17:11102:46293":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"2:32592:3592":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"6:6243:6844":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"2:46721:3673":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"6:6016:6732":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"2:11409:2616":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"5:7477:2490":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"6:1576:6084":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"2:51755:3361":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"5:8287:3704":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"16:7051:4235":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"2:50524:3553":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"2:10574:2442":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"6:5405:6635":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"16:2813:4359":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"1:9434:4679":{"crate_id":1,"path":["std","sys_common","mutex","StaticMutexGuard"],"kind":"struct"},"2:52455:3357":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"2:12228:3534":{"crate_id":2,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"16:7295:4176":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"2:51831:3353":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"2:50081:2575":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"2:3102:2835":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"12:1238:3987":{"crate_id":12,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"1:7093:7391":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"1:10527:2963":{"crate_id":1,"path":["std","collections","hash","map","DefaultHasher"],"kind":"struct"},"16:5289:4169":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"2:48826:70":{"crate_id":2,"path":["core","fmt","rt","v1","Argument"],"kind":"struct"},"17:12209:5067":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"1:6479:6754":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"16:7379:4192":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"17:12557:5139":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"16:6691:4231":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"1:11432:2164":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"5:6562:2913":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"2:3587:117":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"17:12496:5130":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"16:3051:4402":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"2:50520:3555":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"6:6027:6737":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"5:4694:240":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"2:3535:3166":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"17:12770:5182":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"6:4446:6452":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"2:49775:2111":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"1:11960:2490":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"2:51653:3332":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"17:9873:7295":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"2:23380:2835":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","sealed","Sealed"],"kind":"trait"},"5:3114:59143":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"2:48582:2443":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"2:10563:110":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"2:3376:224":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"17:9579:129":{"crate_id":17,"path":["object","read","any","File"],"kind":"struct"},"1:12106:2731":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"17:13247:5365":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"1:12030:2903":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"17:3743:4439":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"2:46097:2618":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"17:10962:7329":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"17:11754:4985":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"1:14404:2711":{"crate_id":1,"path":["std","sys","unix","fs","OpenOptions"],"kind":"struct"},"6:4055:6307":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"6:161:39094":{"crate_id":6,"path":["libc","unix","fpos_t"],"kind":"enum"},"6:4061:6309":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"1:4258:2127":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"2:10811:147":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"2:48026:84":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"17:11017:128":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"17:10622:4842":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"5:1276:3817":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"2:46363:3276":{"crate_id":2,"path":["core","any","tags","MaybeSizedValue"],"kind":"struct"},"2:32640:58484":{"crate_id":2,"path":["core","mem","valid_align","ValidAlignEnum16"],"kind":"enum"},"2:23049:3385":{"crate_id":2,"path":["core","core_simd","elements","float","SimdFloat"],"kind":"trait"},"1:11491:2166":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"16:6381:4183":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"1:6723:2825":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"17:11335:4445":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"2:24920:171":{"crate_id":2,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"0:0:1787":{"crate_id":0,"path":["autocfg"],"kind":"module"},"17:13345:5387":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"17:10364:4500":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"18:837:2570":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"2:13560:110":{"crate_id":2,"path":["core","str","lossy","Debug"],"kind":"struct"},"2:53473:3355":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"2:46171:198":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"1:1601:2961":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"2:39108:2197":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"6:5426:6648":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"17:13573:5446":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"18:651:4540":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"1:2481:2546":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"1:10799:1888":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"12:1881:146":{"crate_id":12,"path":["hashbrown","set","HashSet"],"kind":"struct"},"6:4392:6430":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"16:7184:4390":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"17:8929:46285":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"2:3447:3192":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"1:11854:2192":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"1:12077:213":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"2:3512:3155":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"2:23435:3316":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"1:11071:2863":{"crate_id":1,"path":["std","net","ip","Ipv4Addr"],"kind":"struct"},"2:10566:110":{"crate_id":2,"path":["core","fmt","macros","Debug"],"kind":"proc_derive"},"1:9394:4678":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"1:5519:2842":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"16:5566:4070":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"6:1567:6078":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"2:46655:3677":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"1:14630:2683":{"crate_id":1,"path":["std","sys","unix","os","JoinPathsError"],"kind":"struct"},"2:48446:2220":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"2:49679:3530":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"16:7110:4240":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"17:11797:5001":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"6:4402:6433":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"5:3105:59145":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"14:11:7360":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"16:6159:4173":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"1:11048:2862":{"crate_id":1,"path":["std","net","ip","IpAddr"],"kind":"enum"},"17:12674:5163":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"6:4160:6362":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"2:46698:3672":{"crate_id":2,"path":["core","char","EscapeDefaultState"],"kind":"enum"},"2:10584:2446":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"17:9716:60504":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"1:5513:2841":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"17:11769:4991":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"2:24364:6909":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"1:7456:2189":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"16:4942:5612":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"17:11514:4936":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"1:10416:2835":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"1:15886:1951":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"1:14779:4689":{"crate_id":1,"path":["std","sys","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"1:5860:3073":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"6:5216:6537":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"9:157:3871":{"crate_id":9,"path":["miniz_oxide","deflate","core","CompressorOxide"],"kind":"struct"},"12:2404:60492":{"crate_id":12,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"2:3853:3289":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"5:7731:3760":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"5:7551:4636":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"5:444:2283":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"2:39148:3182":{"crate_id":2,"path":["core","error","Source"],"kind":"struct"},"16:4975:5613":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"2:51947:3329":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"2:14072:151":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"1:15896:1959":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"1:1452:2952":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"6:4098:6330":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"5:7207:4650":{"crate_id":5,"path":["alloc","vec","drain_filter","drop","BackshiftOnDrop"],"kind":"struct"},"17:12585:5145":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"1:4485:2105":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"5:8549:2914":{"crate_id":5,"path":["alloc","vec","drain_filter","DrainFilter"],"kind":"struct"},"17:9826:4473":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"17:12687:5164":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"17:12731:5171":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"5:2843:3822":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"2:11627:3518":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"16:6173:4219":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"16:6342:4223":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"18:637:4734":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"18:621:4733":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"1:0:1344":{"crate_id":1,"path":["std"],"kind":"module"},"2:49597:3525":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"1:7422:2187":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"1:11245:3122":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"2:50053:2588":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"1:2397:2681":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"2:24513:2558":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"5:853:109":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"17:12302:5081":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"16:6433:4225":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"17:13557:5443":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"5:8249:3779":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"1:4492:2108":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"1:5505:2839":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"2:46275:201":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"16:7238:4189":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"1:1578:2959":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"6:565:6018":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"1:1108:7386":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"1:14470:57435":{"crate_id":1,"path":["std","sys","unix","kernel_copy","SpliceMode"],"kind":"enum"},"17:9930:60496":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"2:53675:7102":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"12:1162:3984":{"crate_id":12,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"6:3933:6241":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"1:15339:7218":{"crate_id":1,"path":["std","personality","dwarf","eh","EHContext"],"kind":"struct"},"2:4:985":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"17:9706:7292":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"2:47849:2167":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"5:4308:4636":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"16:3743:5588":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"5:7753:3761":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"6:4256:6369":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"1:6924:13622":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"2:11196:2835":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"2:46336:3185":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"16:5326:4055":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"1:1387:2616":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"1:14061:2128":{"crate_id":1,"path":["std","sys","unix","stdio","Stdin"],"kind":"struct"},"17:13257:5366":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"1:10986:2113":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"16:5685:4078":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"12:2072:2918":{"crate_id":12,"path":["hashbrown","set","Union"],"kind":"struct"},"2:51376:7042":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"2:50765:3384":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"17:9160:4490":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"2:8127:3429":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"17:542:4102":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"12:750:2167":{"crate_id":12,"path":["hashbrown","map","Iter"],"kind":"struct"},"2:50206:3226":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"5:2376:3837":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"6:6184:6811":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"6:5331:6600":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"16:7782:4178":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"17:12237:5072":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"2:48320:90":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"12:1256:2962":{"crate_id":12,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"16:5374:4058":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"5:6851:2093":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"16:5427:4063":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"16:3770:5589":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"16:2772:4366":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"17:13612:5458":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"17:510:7287":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"17:10610:7317":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"1:11292:6741":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"1:15904:1967":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"12:971:2957":{"crate_id":12,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"17:9361:4828":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"16:4903:5611":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"16:5605:4071":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"5:1740:2953":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"17:9033:46287":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"1:15881:1947":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"17:10899:7321":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"16:5959:4098":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"5:1547:2962":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"2:53684:7103":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"1:4178:2128":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"17:13602:5453":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"1:15894:1957":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"5:7312:2913":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"16:3265:4351":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"2:56664:241":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"16:7659:4247":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"6:4440:6449":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"1:10428:53004":{"crate_id":1,"path":["std","thread","local","fast","DtorState"],"kind":"enum"},"5:3395:2167":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"2:13013:3540":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"2:11477:2577":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"5:8241:2913":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"2:49113:7030":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"6:593:6033":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"12:2059:2916":{"crate_id":12,"path":["hashbrown","set","Difference"],"kind":"struct"},"1:9439:54476":{"crate_id":1,"path":["std","sys_common","mutex","MovableMutex"],"kind":"struct"},"17:10115:4515":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"2:25520:2554":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"17:10598:7316":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"17:12442:5122":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"6:5210:6536":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"1:8281:204":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"18:704:4734":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"5:5962:4648":{"crate_id":5,"path":["alloc","slice","merge","MergeHole"],"kind":"struct"},"6:5260:6559":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"16:7768:4177":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"17:11810:5002":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"1:11842:183":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"2:13073:3542":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"1:11985:2900":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"2:23138:3427":{"crate_id":2,"path":["core","core_simd","elements","uint","SimdUint"],"kind":"trait"},"1:4140:3050":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"2:52221:7055":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"1:7539:1624":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"17:12183:5064":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"2:14540:2992":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"17:13785:5520":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"6:5311:6584":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"17:11653:4959":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"17:13463:5417":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"6:4509:6477":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"2:52615:3330":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"17:12026:5036":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"6:539:5998":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"2:22834:2422":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"17:12957:5235":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"1:13744:1623":{"crate_id":1,"path":["std","sys","unix","process","process_common","Command"],"kind":"struct"},"2:47115:3263":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"5:4017:2914":{"crate_id":5,"path":["alloc","collections","linked_list","DrainFilter"],"kind":"struct"},"2:5214:3499":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"17:11142:4892":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"5:3814:161":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"16:6012:4168":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"2:5753:784":{"crate_id":2,"path":["core","iter"],"kind":"module"},"1:8860:2229":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"2:24348:6906":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"2:5143:2457":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"2:32626:2974":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"5:8308:2490":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"16:5460:4065":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"2:4841:3257":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"6:4287:6377":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"2:3491:2922":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"2:5298:2274":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"1:10554:3826":{"crate_id":1,"path":["std","error","private","Internal"],"kind":"struct"},"5:8466:6894":{"crate_id":5,"path":["alloc","slice","merge_sort","Run"],"kind":"struct"},"6:6671:6859":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"5:3428:2917":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"2:51552:3352":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"17:12360:5107":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"16:6643:4378":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"16:7063:4236":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"16:5530:4069":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"16:5396:4059":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"14:216:44639":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"2:49130:147":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"2:3824:229":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"1:8545:2233":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"6:1662:6147":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"5:4581:3802":{"crate_id":5,"path":["alloc","collections","vec_deque","pair_slices","PairSlices"],"kind":"struct"},"1:11196:3066":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"1:10930:2104":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"17:9206:46291":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"1:2466:1617":{"crate_id":1,"path":["std","error"],"kind":"module"},"2:50528:3554":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"16:4271:5592":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"17:2484:46376":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"6:533:5996":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"9:1075:3922":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"17:11907:5013":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"6:618:6046":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"17:12646:5159":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"12:2398:5897":{"crate_id":12,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"17:13840:5536":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"2:2213:1057":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"2:11205:218":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"2:50748:159":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"17:299:7286":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"1:9526:3060":{"crate_id":1,"path":["std","sys_common","remutex","ReentrantMutexGuard"],"kind":"struct"},"2:5034:3492":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"2:48236:89":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"1:11270:3085":{"crate_id":1,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"16:5649:4074":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"1:10303:4685":{"crate_id":1,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"6:6954:6884":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"6:1721:6183":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"16:6130:4217":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"1:11944:2167":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"2:46588:2586":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"17:13817:5535":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"16:4411:5596":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"1:8974:7392":{"crate_id":1,"path":["std","sync","rwlock","fmt","LockedPlaceholder"],"kind":"struct"},"2:49807:2593":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"1:15905:1968":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"2:11554:3517":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"16:2839:4340":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"6:1740:6189":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"17:13377:5394":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"16:6407:4224":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"17:11547:4942":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"16:7323:4191":{"crate_id":16,"path":["gimli","read","unit","UnitOffset"],"kind":"struct"},"2:12328:4660":{"crate_id":2,"path":["core","slice","sort","CopyOnDrop"],"kind":"struct"},"17:10851:4877":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"17:13481:5421":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"12:1103:2959":{"crate_id":12,"path":["hashbrown","map","Entry"],"kind":"enum"},"9:603:44133":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"1:6645:2826":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"16:5902:4211":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"2:48194:82":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"5:8257:59060":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"2:47907:3605":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"6:3883:6204":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"5:2619:3823":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"2:46253:199":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"12:472:60489":{"crate_id":12,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"2:50220:3229":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"2:23962:2886":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"17:11890:5007":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"6:6080:6760":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"2:3812:3595":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"2:47095:2110":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"12:856:2950":{"crate_id":12,"path":["hashbrown","map","Values"],"kind":"struct"},"1:2851:1618":{"crate_id":1,"path":["std","fs"],"kind":"module"},"1:2123:2490":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"1:7248:187":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"6:6943:6880":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"16:2792:4093":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"16:4316:5593":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"2:49993:2591":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"2:52167:7053":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"9:722:3855":{"crate_id":9,"path":["miniz_oxide","deflate","core","TDEFLFlush"],"kind":"enum"},"5:4765:4641":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"16:4716:5605":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"1:10695:119":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"17:12543:5137":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"2:49105:2967":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"2:3373:221":{"crate_id":2,"path":["core","marker","StructuralEq"],"kind":"trait"},"5:5976:1353":{"crate_id":5,"path":["alloc","str"],"kind":"module"},"17:11314:4466":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"2:24477:38442":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"1:9143:2884":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"2:52691:3337":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"1:14634:2875":{"crate_id":1,"path":["std","sys","unix","os_str","Buf"],"kind":"struct"},"2:4146:3184":{"crate_id":2,"path":["core","any","Provider"],"kind":"trait"},"14:194:44633":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"17:11922:5017":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"5:1533:2960":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"16:5362:4057":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"2:51801:3349":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"5:383:3786":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"2:3272:128":{"crate_id":2,"path":["core","error","Error"],"kind":"trait"},"17:13306:5377":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"1:8939:2232":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"12:2040:2913":{"crate_id":12,"path":["hashbrown","set","Drain"],"kind":"struct"},"6:5366:6621":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"1:15023:2936":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"2:12195:3533":{"crate_id":2,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"1:2420:2688":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"6:5178:6518":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"5:1152:4636":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"1:10496:10345":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"2:49618:3527":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"1:11256:3076":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"6:4493:6472":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"2:50516:3551":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"6:4208:6365":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"6:5998:6725":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"17:10211:7305":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"6:5982:6713":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"17:12383:5116":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"1:12125:2995":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"18:678:143":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"5:8314:2490":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"16:7264:196":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"2:24169:3571":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"2:3617:132":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"17:10136:7295":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"1:6745:2821":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"2:23426:2835":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"6:5478:6662":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"6:6097:6762":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"17:12660:5160":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"6:1634:6122":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"2:46916:3391":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"17:11591:4951":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"2:24788:175":{"crate_id":2,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"17:13507:5431":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"1:15038:2937":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"17:13539:5439":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"6:4038:6301":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"5:3462:2918":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"15:230:4006":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"17:11474:4925":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"5:5910:2573":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"0:96:1636":{"crate_id":0,"path":["autocfg","emit"],"kind":"function"},"2:6717:3399":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"9:900:5953":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"2:48841:67":{"crate_id":2,"path":["core","fmt","rt","v1","Alignment"],"kind":"enum"},"1:7834:3033":{"crate_id":1,"path":["std","sync","mpsc","oneshot","Packet"],"kind":"struct"},"6:1531:6062":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"16:2861:4341":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"17:10291:4461":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"2:48859:108":{"crate_id":2,"path":["core","fmt","rt","v1","Count"],"kind":"enum"},"2:3432:2997":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"2:2044:2093":{"crate_id":2,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"1:12558:129":{"crate_id":1,"path":["std","sys","unix","fs","File"],"kind":"struct"},"17:13522:5435":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"2:3484:3147":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"1:9558:4680":{"crate_id":1,"path":["std","sys_common","rwlock","StaticRwLockReadGuard"],"kind":"struct"},"17:13763:5515":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"9:27:3903":{"crate_id":9,"path":["miniz_oxide","deflate","buffer","HashBuffers"],"kind":"struct"},"17:11494:4935":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"2:53581:3338":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"2:14:2036":{"crate_id":2,"path":["core","write"],"kind":"macro"},"1:11905:54458":{"crate_id":1,"path":["std","sync","mpsc","sync","Failure"],"kind":"enum"},"17:11002:7332":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"12:466:60487":{"crate_id":12,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"1:7139:188":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"1:7734:3032":{"crate_id":1,"path":["std","sync","mpsc","blocking","Inner"],"kind":"struct"},"18:857:4536":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"1:10980:2111":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"1:10963:2109":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"1:15901:1964":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"2:56625:241":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"1:10648:2711":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"17:12318:5086":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"}},"external_crates":{"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"adler","html_root_url":"https://docs.rs/adler/0.2.3/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":21}