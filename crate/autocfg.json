{"root":"0:0:2584","crate_version":"1.3.0","includes_private":false,"index":{"0:68:1192":{"id":"0:68:1192","crate_id":0,"name":"new","span":{"filename":"src/lib.rs","begin":[144,4],"end":[149,5]},"visibility":"public","docs":"Creates a new `AutoCfg` instance.\n\n# Common errors\n\n- `rustc` can't be executed, from `RUSTC` or in the `PATH`.\n- The version output from `rustc` can't be parsed.\n- `OUT_DIR` is not set in the environment, or is not a writable directory.\n","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"Result","id":"2:42522:226","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}},{"type":{"resolved_path":{"name":"Error","id":"0:105:138","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:65:2399":{"id":"0:65:2399","crate_id":0,"name":"rerun_env","span":{"filename":"src/lib.rs","begin":[122,0],"end":[124,1]},"visibility":"public","docs":"Writes a line telling Cargo to rerun the build script if the environment\nvariable `var` changes.\n\nThis looks like: `cargo:rerun-if-env-changed=VAR`\n\nThis requires at least cargo 0.21.0, corresponding to rustc 1.20.0.  Earlier\nversions of cargo will simply ignore the directive.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["var",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13500:33971":{"id":"2:13500:33971","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"üóª‚ààüåè\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"üçî‚ààüåè\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:13558:2747":{"id":"2:13558:2747","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"1:12388:476","self::pattern":"2:13180:3432","str::rsplitn":"2:13561:26956"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitN","id":"2:44363:3455","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13186:3426","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13570:2866":{"id":"2:13570:2866","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::rmatches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"2:13180:3432","`DoubleEndedIterator`":"2:8342:130","prim@char":"1:12388:476","str::rmatches":"2:13573:33977"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Matches","id":"2:44463:3451","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13186:3426","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13491:1008":{"id":"2:13491:1008","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"∆íoo\".len(), 4); // fancy f!\nassert_eq!(\"∆íoo\".chars().count(), 3);\n```","links":{"prim@char":"1:12388:476"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13596:26173":{"id":"2:13596:26173","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns the substring after the prefix,\nwrapped in `Some`. Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12388:476","self::pattern":"2:13180:3432"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["prefix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42390:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13186:3426","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:3212:247-0:105:138":{"id":"a:2:3212:247-0:105:138","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3212:247","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:105:138","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:85:2532":{"id":"0:85:2532","crate_id":0,"name":"emit_path_cfg","span":{"filename":"src/lib.rs","begin":[366,4],"end":[370,5]},"visibility":"public","docs":"Emits the given `cfg` value if `probe_path` returns true.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["path",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["cfg",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13518:2563":{"id":"2:13518:2563","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"yÃÜ\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'yÃÜ'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:12388:476"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chars","id":"2:44229:3441","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:5:793-0:155:2380":{"id":"b:5:793-0:155:2380","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2732:113","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:789:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"AutoCfg","id":"0:155:2380","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:795:3393","5:796:3394","5:797:3395"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"5:5711":{"id":"5:5711","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["5:5712:34684","5:5713:14513","5:5716:34685","5:5719:34686","5:5727:34687","5:5728:34688","5:5729:2979","5:5730:26198","5:5731:26199"],"negative":false,"synthetic":false,"blanket_impl":null}}},"5:5728:34688":{"id":"5:5728:34688","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:306:3096","`String`":"5:7771:243"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:306:3096","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"5:7771:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13512:33973":{"id":"2:13512:33973","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"1:12394:1739","crate::ops::IndexMut":"2:3490:9015","str::slice_unchecked":"2:13511:33972"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:13552:33975":{"id":"2:13552:33975","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"2:13180:3432","str::split":"2:13543:2576","prim@char":"1:12388:476","`DoubleEndedIterator`":"2:8342:130","str::rsplit_terminator":"2:13555:33976"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitTerminator","id":"2:44309:3457","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13186:3426","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:73:2448":{"id":"0:73:2448","crate_id":0,"name":"probe_rustc_version","span":{"filename":"src/lib.rs","begin":[223,4],"end":[225,5]},"visibility":"public","docs":"Tests whether the current `rustc` reports a version greater than\nor equal to \"`major`.`minor`\".","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["major",{"primitive":"usize"}],["minor",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13521:31873":{"id":"2:13521:31873","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"2:13522:31940"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitWhitespace","id":"2:44533:3436","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13584:33980":{"id":"2:13584:33980","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  ◊¢◊ë◊®◊ô◊™  \";\nassert!(Some('◊¢') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:90:2548":{"id":"0:90:2548","crate_id":0,"name":"emit_has_type","span":{"filename":"src/lib.rs","begin":[415,4],"end":[419,5]},"visibility":"public","docs":"Emits a config value `has_TYPE` if `probe_type` returns true.\n\nAny non-identifier characters in the type `name` will be replaced with\n`_` in the generated config value.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["name",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13599:26961":{"id":"2:13599:26961","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12388:476","self::pattern":"2:13180:3432"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["suffix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42390:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13186:3426","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13186:3426","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13201:3427","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:108:811":{"id":"0:108:811","crate_id":0,"name":"fmt","span":{"filename":"src/error.rs","begin":[9,9],"end":[9,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:10377:144","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:10358:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:94:2559":{"id":"0:94:2559","crate_id":0,"name":"probe_constant","span":{"filename":"src/lib.rs","begin":[453,4],"end":[455,5]},"visibility":"public","docs":"Tests whether the given constant expression can be used.\n\nThe test code is subject to change, but currently looks like:\n\n```ignore\npub const PROBE: () = ((), EXPR).0;\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["expr",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5716:34685":{"id":"5:5716:34685","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7771:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["count",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7771:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13186:3426","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13623:8976":{"id":"2:13623:8976","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"‚ù§\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"‚ù§\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"‚ù§\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"2:5024:8976"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDefault","id":"2:44567:3446","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:64:2393":{"id":"0:64:2393","crate_id":0,"name":"rerun_path","span":{"filename":"src/lib.rs","begin":[111,0],"end":[113,1]},"visibility":"public","docs":"Writes a line telling Cargo to rerun the build script if `path` changes.\n\nThis looks like: `cargo:rerun-if-changed=PATH`\n\nThis requires at least cargo 0.7.0, corresponding to rustc 1.6.0.  Earlier\nversions of cargo will simply ignore the directive.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["path",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13593:33985":{"id":"2:13593:33985","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12388:476","self::pattern":"2:13180:3432"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13186:3426","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13543:2576":{"id":"2:13543:2576","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"2:13180:3432","`DoubleEndedIterator`":"2:8342:130","prim@char":"1:12388:476","str::split_whitespace":"2:13521:31873","str::rsplit":"2:13549:26953"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Split","id":"2:44259:2957","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13186:3426","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13515:26948":{"id":"2:13515:26948","crate_id":2,"name":"split_at_checked","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that‚Äôs not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut_checked`]\nmethod.\n\n[`split_at_mut_checked`]: str::split_at_mut_checked\n\n# Examples\n\n```\nlet s = \"Per Martin-L√∂f\";\n\nlet (first, last) = s.split_at_checked(3).unwrap();\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-L√∂f\", last);\n\nassert_eq!(None, s.split_at_checked(13));  // Inside ‚Äú√∂‚Äù\nassert_eq!(None, s.split_at_checked(16));  // Beyond the string length\n```","links":{"str::split_at_mut_checked":"2:13516:26949"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"2:42390:194","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:42483:8983-0:105:138":{"id":"a:2:42483:8983-0:105:138","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:42483:8983","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:105:138","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"0:27:2703":{"id":"0:27:2703","crate_id":0,"name":"description","span":{"filename":"src/error.rs","begin":[15,4],"end":[17,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3828-0:105:138":{"id":"b:2:3828-0:105:138","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:32623:3089","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3826:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:105:138","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3830:1839"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:86:2535":{"id":"0:86:2535","crate_id":0,"name":"probe_trait","span":{"filename":"src/lib.rs","begin":[379,4],"end":[381,5]},"visibility":"public","docs":"Tests whether the given trait can be used.\n\nThe test code is subject to change, but currently looks like:\n\n```ignore\npub trait Probe: TRAIT + Sized {}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["name",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:32681:3090-0:105:138":{"id":"a:2:32681:3090-0:105:138","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32681:3090","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:105:138","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:13529:2744":{"id":"2:13529:2744","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, in which case this function will return true if\nthe `&str` is a prefix of this string slice.\n\nThe [pattern] can also be a [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\nThese will only be checked against the first character of this string slice.\nLook at the second example below regarding behavior for slices of [`char`]s.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```\n\n```\nlet bananas = \"bananas\";\n\n// Note that both of these assert successfully.\nassert!(bananas.starts_with(&['b', 'a', 'n', 'a']));\nassert!(bananas.starts_with(&['a', 'b', 'c', 'd']));\n```","links":{"prim@char":"1:12388:476","self::pattern":"2:13180:3432"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13186:3426","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:89:2544":{"id":"0:89:2544","crate_id":0,"name":"probe_type","span":{"filename":"src/lib.rs","begin":[407,4],"end":[409,5]},"visibility":"public","docs":"Tests whether the given type can be used.\n\nThe test code is subject to change, but currently looks like:\n\n```ignore\npub type Probe = TYPE;\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["name",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13492:2575":{"id":"2:13492:2575","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13605:33987":{"id":"2:13605:33987","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12388:476","self::pattern":"2:13180:3432"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13186:3426","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13617:26202":{"id":"2:13617:26202","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GR√ú√üE, J√úRGEN ‚ù§\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"gr√ú√üe, j√úrgen ‚ù§\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:71:1224":{"id":"0:71:1224","crate_id":0,"name":"no_std","span":{"filename":"src/lib.rs","begin":[210,4],"end":[212,5]},"visibility":"public","docs":"Returns whether `AutoCfg` is using `#![no_std]` in its probes.\n\nThis is automatically detected during construction -- if an empty probe\nfails while one with `#![no_std]` succeeds, then the attribute will be\nused for all further probes. This is usually only necessary when the\n`TARGET` lacks `std` altogether. If neither succeeds, `no_std` is not\nset, but that `AutoCfg` will probably only work for version checks.\n\nThis attribute changes the implicit [prelude] from `std` to `core`,\nwhich may affect the paths you need to use in other probes. It also\nrestricts some types that otherwise get additional methods in `std`,\nlike floating-point trigonometry and slice sorting.\n\nSee also [`set_no_std`](#method.set_no_std).\n\n[prelude]: https://doc.rust-lang.org/reference/names/preludes.html#the-no_std-attribute","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:3830:1839":{"id":"2:3830:1839","crate_id":2,"name":"type_id","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"TypeId","id":"2:40105:7218","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:32681:3090-0:155:2380":{"id":"a:2:32681:3090-0:155:2380","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32681:3090","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"AutoCfg","id":"0:155:2380","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:13501:336":{"id":"2:13501:336","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"2:13502:26921","`u8`":"1:12407:1869"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13579:33979":{"id":"2:13579:33979","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"2:13180:3432","`DoubleEndedIterator`":"2:8342:130","prim@char":"1:12388:476","str::match_indices":"2:13576:33978"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatchIndices","id":"2:44427:3450","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13186:3426","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13186:3426","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13201:3427","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2721:26118":{"id":"2:2721:26118","crate_id":2,"name":"borrow_mut","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13494:33969":{"id":"2:13494:33969","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji üßë‚Äçüî¨ (scientist) could be split so that the string only\nincludes üßë (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"‚ù§Ô∏èüß°üíõüíöüíôüíú\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"‚ù§Ô∏èüß°\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:87:2539":{"id":"0:87:2539","crate_id":0,"name":"emit_has_trait","span":{"filename":"src/lib.rs","begin":[387,4],"end":[391,5]},"visibility":"public","docs":"Emits a config value `has_TRAIT` if `probe_trait` returns true.\n\nAny non-identifier characters in the trait `name` will be replaced with\n`_` in the generated config value.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["name",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5966:1799":{"id":"5:5966:1799","crate_id":5,"name":"to_string","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7771:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2993-0:155:2380":{"id":"b:2:2993-0:155:2380","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2966:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"AutoCfg","id":"0:155:2380","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2995:841"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:63:693":{"id":"0:63:693","crate_id":0,"name":"emit","span":{"filename":"src/lib.rs","begin":[101,0],"end":[103,1]},"visibility":"public","docs":"Writes a config flag for rustc on standard out.\n\nThis looks like: `cargo:rustc-cfg=CFG`\n\nCargo will use this in arguments to rustc, like `--cfg CFG`.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["cfg",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13621:33989":{"id":"2:13621:33989","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"‚ù§\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"‚ù§\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"‚ù§\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"‚ù§\\n!\".escape_debug().to_string(), \"‚ù§\\\\n!\");\n```","links":{"`char::escape_debug`":"2:5023:33989"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDebug","id":"2:44558:3445","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13496:33970":{"id":"2:13496:33970","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nIf `index` is greater than the length of the string, this returns the length of the string.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"‚ù§Ô∏èüß°üíõüíöüíôüíú\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"‚ù§Ô∏èüß°üíõ\");\n```","links":{"str::floor_char_boundary":"2:13494:33969"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:82:2520":{"id":"0:82:2520","crate_id":0,"name":"emit_sysroot_crate","span":{"filename":"src/lib.rs","begin":[338,4],"end":[342,5]},"visibility":"public","docs":"Emits a config value `has_CRATE` if `probe_sysroot_crate` returns true.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["name",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13523:2742":{"id":"2:13523:2742","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nNote that any carriage return (`\\r`) not immediately followed by a\nline feed (`\\n`) does not split a line. These carriage returns are\nthereby included in the produced lines.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\r\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\n// Trailing carriage return is included in the last line\nassert_eq!(Some(\"baz\\r\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line does not require any ending:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Lines","id":"2:44513:2953","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:26":{"id":"0:26","crate_id":0,"name":null,"span":{"filename":"src/error.rs","begin":[14,0],"end":[27,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["provide","description","type_id","source","cause"],"trait":{"name":"Error","id":"2:3052:138","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:105:138","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:27:2703","0:28:447"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2719-0:155:2380":{"id":"b:2:2719-0:155:2380","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32623:3089","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2713:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"AutoCfg","id":"0:155:2380","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2721:26118"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13503:26917":{"id":"2:13503:26917","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"üóª‚ààüåè\");\n\nassert_eq!(Some(\"üóª\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:42392:191"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:42390:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:11313:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:11313:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13589:33983":{"id":"2:13589:33983","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"◊¢◊ë◊®◊ô◊™  \";\nassert!(Some('◊™') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:28:447":{"id":"0:28:447","crate_id":0,"name":"cause","span":{"filename":"src/error.rs","begin":[19,4],"end":[26,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:42390:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"dyn_trait":{"traits":[{"trait":{"name":"error::Error","id":"2:3052:138","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]}],"lifetime":null}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13520:7046":{"id":"2:13520:7046","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"2:44245:2956","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13514:26945":{"id":"2:13514:26945","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_mut_checked`](str::split_at_mut_checked).\n\n# Examples\n\n```\nlet mut s = \"Per Martin-L√∂f\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-L√∂f\", last);\n}\nassert_eq!(\"PER Martin-L√∂f\", s);\n```","links":{"str::split_at":"2:13513:26944","str::split_at_mut_checked":"2:13516:26949"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13614:26861":{"id":"2:13614:26861","crate_id":2,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"2:40291:14351","Self::is_ascii":"2:13613:26196"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:42390:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"AsciiChar","id":"2:40291:14351","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2993-0:105:138":{"id":"b:2:2993-0:105:138","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2966:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:105:138","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2995:841"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:67":{"id":"0:67","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[135,0],"end":[463,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"AutoCfg","id":"0:155:2380","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:68:1192","0:69:2410","0:71:1224","0:72:2445","0:73:2448","0:74:2453","0:80:2424","0:81:2517","0:82:2520","0:83:2525","0:84:2530","0:85:2532","0:86:2535","0:87:2539","0:88:2541","0:89:2544","0:90:2548","0:91:2550","0:92:2553","0:93:2556","0:94:2559","0:95:2562"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:3212:247-0:155:2380":{"id":"a:2:3212:247-0:155:2380","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3212:247","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"AutoCfg","id":"0:155:2380","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:13546:26951":{"id":"2:13546:26951","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"1:12388:476","self::pattern":"2:13180:3432"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitInclusive","id":"2:12995:3435","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13186:3426","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13526:2573":{"id":"2:13526:2573","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"1:12388:476","self::pattern":"2:13180:3432"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13186:3426","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5713:14513":{"id":"5:5713:14513","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7771:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["from",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7771:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13186:3426","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2989-0:155:2380":{"id":"b:2:2989-0:155:2380","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2966:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2963:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"AutoCfg","id":"0:155:2380","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2992:2417"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"5:5712:34684":{"id":"5:5712:34684","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:306:3096","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"5:306:3096","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:66:1192":{"id":"0:66:1192","crate_id":0,"name":"new","span":{"filename":"src/lib.rs","begin":[131,0],"end":[133,1]},"visibility":"public","docs":"Creates a new `AutoCfg` instance.\n\n# Panics\n\nPanics if `AutoCfg::new()` returns an error.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"AutoCfg","id":"0:155:2380","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:83:2525":{"id":"0:83:2525","crate_id":0,"name":"probe_path","span":{"filename":"src/lib.rs","begin":[351,4],"end":[353,5]},"visibility":"public","docs":"Tests whether the given path can be used.\n\nThe test code is subject to change, but currently looks like:\n\n```ignore\npub use PATH;\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["path",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:42484:9101-0:105:138":{"id":"a:2:42484:9101-0:105:138","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:42484:9101","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:105:138","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"2:13567:26959":{"id":"2:13567:26959","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42390:194","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13186:3426","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13186:3426","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13201:3427","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:29":{"id":"0:29","crate_id":0,"name":null,"span":{"filename":"src/error.rs","begin":[29,0],"end":[42,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Display","id":"2:10416:129","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:105:138","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:30:811"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13505:26918":{"id":"2:13505:26918","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:42392:191"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:42390:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:11313:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:11313:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:162":{"id":"0:162","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[86,9],"end":[86,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2732:113","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"AutoCfg","id":"0:155:2380","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:163:480"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13507:26919":{"id":"2:13507:26919","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"üóª‚ààüåè\";\nunsafe {\n    assert_eq!(\"üóª\", v.get_unchecked(0..4));\n    assert_eq!(\"‚àà\", v.get_unchecked(4..7));\n    assert_eq!(\"üåè\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:11313:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:11313:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:13620:26866":{"id":"2:13620:26866","crate_id":2,"name":"trim_ascii","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing ASCII whitespace\nremoved.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\nassert_eq!(\"\\r hello world\\n \".trim_ascii(), \"hello world\");\nassert_eq!(\"  \".trim_ascii(), \"\");\nassert_eq!(\"\".trim_ascii(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:1066:38331"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2999-0:105:138":{"id":"b:2:2999-0:105:138","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2973:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2969:258","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:105:138","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3002:138","2:3003:1826"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2716-0:155:2380":{"id":"b:2:2716-0:155:2380","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32623:3089","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2710:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"AutoCfg","id":"0:155:2380","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2718:2851"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:81:2517":{"id":"0:81:2517","crate_id":0,"name":"probe_sysroot_crate","span":{"filename":"src/lib.rs","begin":[332,4],"end":[335,5]},"visibility":"public","docs":"Tests whether the given sysroot crate can be used.\n\nThe test code is subject to change, but currently looks like:\n\n```ignore\nextern crate CRATE as probe;\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["name",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:3247:3504-0:155:2380":{"id":"a:2:3247:3504-0:155:2380","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"2:3247:3504","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"AutoCfg","id":"0:155:2380","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:36-0:105:138":{"id":"0:36-0:105:138","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[74,0],"end":[74,21]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"error::Error","name":"Error","id":"0:105:138","glob":false}}},"a:2:42484:9101-0:155:2380":{"id":"a:2:42484:9101-0:155:2380","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:42484:9101","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"AutoCfg","id":"0:155:2380","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2999-0:155:2380":{"id":"b:2:2999-0:155:2380","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2973:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2969:258","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"AutoCfg","id":"0:155:2380","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3002:138","2:3003:1826"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13525:31890":{"id":"2:13525:31890","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\n```\nlet text = \"Za≈º√≥≈Çƒá gƒô≈õlƒÖ ja≈∫≈Ñ\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EncodeUtf16","id":"2:44551:3433","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13615:26200":{"id":"2:13615:26200","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferr√∂s\".eq_ignore_ascii_case(\"FERR√∂S\"));\nassert!(!\"Ferr√∂s\".eq_ignore_ascii_case(\"FERR√ñS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:5:5964-0:105:138":{"id":"b:5:5964-0:105:138","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"2:10416:129","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:32623:3089","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"ToString","id":"5:5962:251","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:105:138","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:5966:1799"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:2992:2417":{"id":"2:2992:2417","crate_id":2,"name":"into","span":null,"visibility":"default","docs":"Calls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of\n<code>[From]&lt;T&gt; for U</code> chooses to do.","links":{"From":"2:2966:145"},"attrs":["#[track_caller]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"U"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:30:811":{"id":"0:30:811","crate_id":0,"name":"fmt","span":{"filename":"src/error.rs","begin":[30,4],"end":[41,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"2:10377:144","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"Result","id":"2:42522:226","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}},{"type":{"resolved_path":{"name":"fmt::Error","id":"2:43414:138","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13524:33974":{"id":"2:13524:33974","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\", suggestion =\n\"lines\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinesAny","id":"2:44523:3448","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5727:34687":{"id":"5:5727:34687","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"ÂÜúÂéÜÊñ∞Âπ¥\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tsch√º√ü\";\n\nassert_eq!(\"TSCH√úSS\", s.to_uppercase());\n```","links":{"`String`":"5:7771:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7771:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13539:3336":{"id":"2:13539:3336","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('√©'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"2:42392:191","prim@char":"1:12388:476","self::pattern":"2:13180:3432"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42390:194","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13186:3426","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13186:3426","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13201:3427","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:32622:237-0:105:138":{"id":"a:2:32622:237-0:105:138","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:32622:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:105:138","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:3004-0:155:2380":{"id":"b:2:3004-0:155:2380","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2963:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2973:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"AutoCfg","id":"0:155:2380","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3007:138","2:3008:1824"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:3247:3504-0:105:138":{"id":"a:2:3247:3504-0:105:138","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"2:3247:3504","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:105:138","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:13516:26949":{"id":"2:13516:26949","crate_id":2,"name":"split_at_mut_checked","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that‚Äôs not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at_checked`] method.\n\n[`split_at_checked`]: str::split_at_checked\n\n# Examples\n\n```\nlet mut s = \"Per Martin-L√∂f\".to_string();\nif let Some((first, last)) = s.split_at_mut_checked(3) {\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-L√∂f\", last);\n}\nassert_eq!(\"PER Martin-L√∂f\", s);\n\nassert_eq!(None, s.split_at_mut_checked(13));  // Inside ‚Äú√∂‚Äù\nassert_eq!(None, s.split_at_mut_checked(16));  // Beyond the string length\n```","links":{"str::split_at_checked":"2:13515:26948"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"2:42390:194","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13509:26920":{"id":"2:13509:26920","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"üóª‚ààüåè\");\nunsafe {\n    assert_eq!(\"üóª\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"‚àà\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"üåè\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:11313:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:11313:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2719-0:105:138":{"id":"b:2:2719-0:105:138","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32623:3089","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2713:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:105:138","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2721:26118"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13588:33982":{"id":"2:13588:33982","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  ◊¢◊ë◊®◊ô◊™\";\nassert!(Some('◊¢') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:42483:8983-0:155:2380":{"id":"a:2:42483:8983-0:155:2380","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:42483:8983","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"AutoCfg","id":"0:155:2380","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:13618:26864":{"id":"2:13618:26864","crate_id":2,"name":"trim_ascii_start","span":null,"visibility":"public","docs":"Returns a string slice with leading ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\nassert_eq!(\" \\t \\u{3000}hello world\\n\".trim_ascii_start(), \"\\u{3000}hello world\\n\");\nassert_eq!(\"  \".trim_ascii_start(), \"\");\nassert_eq!(\"\".trim_ascii_start(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:1066:38331"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2989-0:105:138":{"id":"b:2:2989-0:105:138","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2966:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2963:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:105:138","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2992:2417"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13624:33990":{"id":"2:13624:33990","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"‚ù§\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"‚ù§\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"‚ù§\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"2:5021:33990"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeUnicode","id":"2:44576:3447","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13511:33972":{"id":"2:13511:33972","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\n\nunsafe {\n    assert_eq!(\"L√∂we ËÄÅËôé L√©opard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"1:12394:1739","str::slice_mut_unchecked":"2:13512:33973","crate::ops::Index":"2:39936:9014"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:13608:33988":{"id":"2:13608:33988","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12388:476","self::pattern":"2:13180:3432"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13186:3426","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13186:3426","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13201:3427","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5730:26198":{"id":"5:5730:26198","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Gr√º√üe, J√ºrgen ‚ù§\";\n\nassert_eq!(\"GR√º√üE, J√ºRGEN ‚ù§\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"2:13616:26201"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7771:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:164":{"id":"0:164","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[86,16],"end":[86,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10411:120","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"AutoCfg","id":"0:155:2380","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:165:811"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:3008:1824":{"id":"2:3008:1824","crate_id":2,"name":"try_from","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["value",{"generic":"U"}]],"output":{"resolved_path":{"name":"Result","id":"2:42522:226","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"T"},"trait":{"name":"TryFrom","id":"2:2973:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13535:2743":{"id":"2:13535:2743","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('√©'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"2:42392:191","prim@char":"1:12388:476","self::pattern":"2:13180:3432"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42390:194","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13186:3426","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13576:33978":{"id":"2:13576:33978","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"2:13180:3432","`DoubleEndedIterator`":"2:8342:130","prim@char":"1:12388:476","str::rmatch_indices":"2:13579:33979"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"MatchIndices","id":"2:44409:3449","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13186:3426","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:3002:138":{"id":"2:3002:138","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"2:2973:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}}},"0:95:2562":{"id":"0:95:2562","crate_id":0,"name":"emit_constant_cfg","span":{"filename":"src/lib.rs","begin":[458,4],"end":[462,5]},"visibility":"public","docs":"Emits the given `cfg` value if `probe_constant` returns true.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["expr",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["cfg",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13613:26196":{"id":"2:13613:26196","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Gr√º√üe, J√ºrgen ‚ù§\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:155:2380":{"id":"0:155:2380","crate_id":0,"name":"AutoCfg","span":{"filename":"src/lib.rs","begin":[87,0],"end":[94,1]},"visibility":"public","docs":"Helper to detect compiler features for `cfg` output in build scripts.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["0:67","a:2:32622:237-0:155:2380","a:2:3212:247-0:155:2380","a:2:42483:8983-0:155:2380","a:2:32681:3090-0:155:2380","a:2:3247:3504-0:155:2380","a:2:42484:9101-0:155:2380","b:2:2993-0:155:2380","b:2:3828-0:155:2380","b:2:2719-0:155:2380","b:2:2716-0:155:2380","b:2:3004-0:155:2380","b:2:2999-0:155:2380","b:2:2989-0:155:2380","b:5:793-0:155:2380","0:162","0:164"]}}},"2:13611:2752":{"id":"2:13611:2752","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"2:13141:137","`FromStr`":"2:13140:3007"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:42522:226","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"FromStr","id":"2:13140:3007","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"2:13140:3007","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2718:2851":{"id":"2:2718:2851","crate_id":2,"name":"borrow","span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[rustc_diagnostic_item = \"noop_method_borrow\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:163:480":{"id":"0:163:480","crate_id":0,"name":"clone","span":{"filename":"src/lib.rs","begin":[86,9],"end":[86,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"AutoCfg","id":"0:155:2380","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13519:7470":{"id":"2:13519:7470","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"yÃÜes\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'yÃÜ')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the previous character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:12388:476"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CharIndices","id":"2:44235:3440","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:80:2424":{"id":"0:80:2424","crate_id":0,"name":"probe_raw","span":{"filename":"src/lib.rs","begin":[321,4],"end":[323,5]},"visibility":"public","docs":"Tests whether the given code can be compiled as a Rust library.\n\nThis will only return `Ok` if the compiler ran and exited successfully,\nper `ExitStatus::success()`.\nThe code is passed to the compiler exactly as-is, notably not even\nadding the [`#![no_std]`][Self::no_std] attribute like other probes.\n\nRaw probes are useful for testing functionality that's not yet covered\nby the rest of the `AutoCfg` API. For example, the following attribute\n**must** be used at the crate level, so it wouldn't work within the code\ntemplates used by other `probe_*` methods.\n\n```\n# extern crate autocfg;\n# // Normally, cargo will set `OUT_DIR` for build scripts.\n# std::env::set_var(\"OUT_DIR\", \"target\");\nlet ac = autocfg::new();\nassert!(ac.probe_raw(\"#![no_builtins]\").is_ok());\n```\n\nRust nightly features could be tested as well -- ideally including a\ncode sample to ensure the unstable feature still works as expected.\nFor example, `slice::group_by` was renamed to `chunk_by` when it was\nstabilized, even though the feature name was unchanged, so testing the\n`#![feature(..)]` alone wouldn't reveal that. For larger snippets,\n[`include_str!`] may be useful to load them from separate files.\n\n```\n# extern crate autocfg;\n# // Normally, cargo will set `OUT_DIR` for build scripts.\n# std::env::set_var(\"OUT_DIR\", \"target\");\nlet ac = autocfg::new();\nlet code = r#\"\n    #![feature(slice_group_by)]\n    pub fn probe(slice: &[i32]) -> impl Iterator<Item = &[i32]> {\n        slice.group_by(|a, b| a == b)\n    }\n\"#;\nif ac.probe_raw(code).is_ok() {\n    autocfg::emit(\"has_slice_group_by\");\n}\n```","links":{"Self::no_std":"0:71:1224","`include_str!`":"2:34:947"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["code",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:42522:226","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}},{"type":{"resolved_path":{"name":"Error","id":"0:105:138","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13573:33977":{"id":"2:13573:33977","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"2:13180:3432","`DoubleEndedIterator`":"2:8342:130","prim@char":"1:12388:476","str::matches":"2:13570:2866"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatches","id":"2:44481:3452","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13186:3426","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13186:3426","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13201:3427","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:84:2530":{"id":"0:84:2530","crate_id":0,"name":"emit_has_path","span":{"filename":"src/lib.rs","begin":[359,4],"end":[363,5]},"visibility":"public","docs":"Emits a config value `has_PATH` if `probe_path` returns true.\n\nAny non-identifier characters in the `path` will be replaced with\n`_` in the generated config value.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["path",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:0:2584":{"id":"0:0:2584","crate_id":0,"name":"autocfg","span":{"filename":"src/lib.rs","begin":[1,0],"end":[535,1]},"visibility":"public","docs":"A Rust library for build scripts to automatically configure code based on\ncompiler support.  Code snippets are dynamically tested to see if the `rustc`\nwill accept them, rather than hard-coding specific version support.\n\n\n## Usage\n\nAdd this to your `Cargo.toml`:\n\n```toml\n[build-dependencies]\nautocfg = \"1\"\n```\n\nThen use it in your `build.rs` script to detect compiler features.  For\nexample, to test for 128-bit integer support, it might look like:\n\n```rust\nextern crate autocfg;\n\nfn main() {\n#   // Normally, cargo will set `OUT_DIR` for build scripts.\n#   std::env::set_var(\"OUT_DIR\", \"target\");\n    let ac = autocfg::new();\n    ac.emit_has_type(\"i128\");\n\n    // (optional) We don't need to rerun for anything external.\n    autocfg::rerun_path(\"build.rs\");\n}\n```\n\nIf the type test succeeds, this will write a `cargo:rustc-cfg=has_i128` line\nfor Cargo, which translates to Rust arguments `--cfg has_i128`.  Then in the\nrest of your Rust code, you can add `#[cfg(has_i128)]` conditions on code that\nshould only be used when the compiler supports it.\n\n## Caution\n\nMany of the probing methods of `AutoCfg` document the particular template they\nuse, **subject to change**. The inputs are not validated to make sure they are\nsemantically correct for their expected use, so it's _possible_ to escape and\ninject something unintended. However, such abuse is unsupported and will not\nbe considered when making changes to the templates.","links":{},"attrs":["#![deny(missing_debug_implementations)]","#![deny(missing_docs)]","#![allow(unknown_lints)]","#![allow(bare_trait_objects)]","#![allow(ellipsis_inclusive_range_patterns)]"],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:36-0:105:138","0:155:2380","0:63:693","0:64:2393","0:65:2399","0:66:1192"],"is_stripped":false}}},"2:13522:31940":{"id":"2:13522:31940","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"2:13521:31873"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitAsciiWhitespace","id":"2:44542:3434","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13513:26944":{"id":"2:13513:26944","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_checked`](str::split_at_checked).\n\n# Examples\n\n```\nlet s = \"Per Martin-L√∂f\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-L√∂f\", last);\n```","links":{"str::split_at_checked":"2:13515:26948","str::split_at_mut":"2:13514:26945"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13564:26958":{"id":"2:13564:26958","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42390:194","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13186:3426","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:32622:237-0:155:2380":{"id":"a:2:32622:237-0:155:2380","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:32622:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"AutoCfg","id":"0:155:2380","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:3004-0:105:138":{"id":"b:2:3004-0:105:138","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2963:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2973:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:105:138","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3007:138","2:3008:1824"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:3003:1826":{"id":"2:3003:1826","crate_id":2,"name":"try_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Result","id":"2:42522:226","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"2:2973:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:107":{"id":"0:107","crate_id":0,"name":null,"span":{"filename":"src/error.rs","begin":[9,9],"end":[9,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10411:120","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:105:138","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:108:811"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:74:2453":{"id":"0:74:2453","crate_id":0,"name":"emit_rustc_version","span":{"filename":"src/lib.rs","begin":[229,4],"end":[233,5]},"visibility":"public","docs":"Sets a `cfg` value of the form `rustc_major_minor`, like `rustc_1_29`,\nif the current `rustc` is at least that version.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["major",{"primitive":"usize"}],["minor",{"primitive":"usize"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:795:3393":{"id":"5:795:3393","crate_id":5,"name":"Owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"b:2:3828-0:155:2380":{"id":"b:2:3828-0:155:2380","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:32623:3089","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3826:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"AutoCfg","id":"0:155:2380","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3830:1839"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:165:811":{"id":"0:165:811","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[86,16],"end":[86,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:10377:144","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:10358:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13502:26921":{"id":"2:13502:26921","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:12407:1869"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2716-0:105:138":{"id":"b:2:2716-0:105:138","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32623:3089","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2710:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:105:138","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2718:2851"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13549:26953":{"id":"2:13549:26953","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"2:13180:3432","`DoubleEndedIterator`":"2:8342:130","prim@char":"1:12388:476","str::split":"2:13543:2576"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplit","id":"2:44277:3453","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13186:3426","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13186:3426","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13201:3427","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13555:33976":{"id":"2:13555:33976","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"2:13180:3432","str::split":"2:13543:2576","prim@char":"1:12388:476","str::split_terminator":"2:13552:33975"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitTerminator","id":"2:44327:3456","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13186:3426","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13186:3426","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13201:3427","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13619:26865":{"id":"2:13619:26865","crate_id":2,"name":"trim_ascii_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\nassert_eq!(\"\\r hello world\\u{3000}\\n \".trim_ascii_end(), \"\\r hello world\\u{3000}\");\nassert_eq!(\"  \".trim_ascii_end(), \"\");\nassert_eq!(\"\".trim_ascii_end(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:1066:38331"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5729:2979":{"id":"5:5729:2979","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7771:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7771:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5731:26199":{"id":"5:5731:26199","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Gr√º√üe, J√ºrgen ‚ù§\";\n\nassert_eq!(\"gr√º√üe, j√ºrgen ‚ù§\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"2:13617:26202"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7771:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13616:26201":{"id":"2:13616:26201","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Gr√º√üe, J√ºrgen ‚ù§\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GR√º√üE, J√ºRGEN ‚ù§\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:796:3394":{"id":"5:796:3394","crate_id":5,"name":"to_owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13586:33981":{"id":"2:13586:33981","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  ◊¢◊ë◊®◊ô◊™  \";\nassert!(Some('◊™') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:797:3395":{"id":"5:797:3395","crate_id":5,"name":"clone_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["target",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:91:2550":{"id":"0:91:2550","crate_id":0,"name":"emit_type_cfg","span":{"filename":"src/lib.rs","begin":[422,4],"end":[426,5]},"visibility":"public","docs":"Emits the given `cfg` value if `probe_type` returns true.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["name",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["cfg",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13499:26602":{"id":"2:13499:26602","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:12727:2716"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2995:841":{"id":"2:2995:841","crate_id":2,"name":"from","span":null,"visibility":"default","docs":"Returns the argument unchanged.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["t",{"generic":"T"}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:88:2541":{"id":"0:88:2541","crate_id":0,"name":"emit_trait_cfg","span":{"filename":"src/lib.rs","begin":[394,4],"end":[398,5]},"visibility":"public","docs":"Emits the given `cfg` value if `probe_trait` returns true.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["name",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["cfg",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13532:26960":{"id":"2:13532:26960","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"1:12388:476","self::pattern":"2:13180:3432"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13186:3426","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13186:3426","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13201:3427","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:69:2410":{"id":"0:69:2410","crate_id":0,"name":"with_dir","span":{"filename":"src/lib.rs","begin":[159,4],"end":[192,5]},"visibility":"public","docs":"Creates a new `AutoCfg` instance with the specified output directory.\n\n# Common errors\n\n- `rustc` can't be executed, from `RUSTC` or in the `PATH`.\n- The version output from `rustc` can't be parsed.\n- `dir` is not a writable directory.\n","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["dir",{"generic":"T"}]],"output":{"resolved_path":{"name":"Result","id":"2:42522:226","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}},{"type":{"resolved_path":{"name":"Error","id":"0:105:138","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2963:163","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"PathBuf","id":"1:5351:204","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13493:33968":{"id":"2:13493:33968","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\nassert!(s.is_char_boundary(0));\n// start of `ËÄÅ`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `√∂`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `ËÄÅ`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13561:26956":{"id":"2:13561:26956","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"1:12388:476","str::splitn":"2:13558:2747","self::pattern":"2:13180:3432"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitN","id":"2:44381:3454","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13186:3426","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13186:3426","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13201:3427","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:3007:138":{"id":"2:3007:138","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Infallible","id":"2:32546:3022","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"0:72:2445":{"id":"0:72:2445","crate_id":0,"name":"set_no_std","span":{"filename":"src/lib.rs","begin":[217,4],"end":[219,5]},"visibility":"public","docs":"Sets whether `AutoCfg` should use `#![no_std]` in its probes.\n\nSee also [`no_std`](#method.no_std).","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["no_std",{"primitive":"bool"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:93:2556":{"id":"0:93:2556","crate_id":0,"name":"emit_expression_cfg","span":{"filename":"src/lib.rs","begin":[440,4],"end":[444,5]},"visibility":"public","docs":"Emits the given `cfg` value if `probe_expression` returns true.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["expr",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["cfg",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13602:33986":{"id":"2:13602:33986","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12388:476","self::pattern":"2:13180:3432"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13186:3426","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13186:3426","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13201:3427","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:92:2553":{"id":"0:92:2553","crate_id":0,"name":"probe_expression","span":{"filename":"src/lib.rs","begin":[435,4],"end":[437,5]},"visibility":"public","docs":"Tests whether the given expression can be used.\n\nThe test code is subject to change, but currently looks like:\n\n```ignore\npub fn probe() { let _ = EXPR; }\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["expr",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13590:33984":{"id":"2:13590:33984","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"1:12388:476","self::pattern":"2:13180:3432"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13186:3426","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13186:3426","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"2:13206:3425","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13490":{"id":"2:13490","crate_id":2,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["2:13491:1008","2:13492:2575","2:13493:33968","2:13494:33969","2:13496:33970","2:13499:26602","2:13500:33971","2:13501:336","2:13502:26921","2:13503:26917","2:13505:26918","2:13507:26919","2:13509:26920","2:13511:33972","2:13512:33973","2:13513:26944","2:13514:26945","2:13515:26948","2:13516:26949","2:13518:2563","2:13519:7470","2:13520:7046","2:13521:31873","2:13522:31940","2:13523:2742","2:13524:33974","2:13525:31890","2:13526:2573","2:13529:2744","2:13532:26960","2:13535:2743","2:13539:3336","2:13543:2576","2:13546:26951","2:13549:26953","2:13552:33975","2:13555:33976","2:13558:2747","2:13561:26956","2:13564:26958","2:13567:26959","2:13570:2866","2:13573:33977","2:13576:33978","2:13579:33979","2:13582:2582","2:13584:33980","2:13586:33981","2:13588:33982","2:13589:33983","2:13590:33984","2:13593:33985","2:13596:26173","2:13599:26961","2:13602:33986","2:13605:33987","2:13608:33988","2:13611:2752","2:13613:26196","2:13614:26861","2:13615:26200","2:13616:26201","2:13617:26202","2:13618:26864","2:13619:26865","2:13620:26866","2:13621:33989","2:13623:8976","2:13624:33990"],"negative":false,"synthetic":false,"blanket_impl":null}}},"5:5719:34686":{"id":"5:5719:34686","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Œ£\";\n\nassert_eq!(\"œÉ\", sigma.to_lowercase());\n\n// but at the end of a word, it's œÇ, not œÉ:\nlet odysseus = \"·ΩàŒîŒ•Œ£Œ£ŒïŒéŒ£\";\n\nassert_eq!(\"·ΩÄŒ¥œÖœÉœÉŒµœçœÇ\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"ÂÜúÂéÜÊñ∞Âπ¥\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7771:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7771:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:105:138":{"id":"0:105:138","crate_id":0,"name":"Error","span":{"filename":"src/error.rs","begin":[10,0],"end":[12,1]},"visibility":"public","docs":"A common error type for the `autocfg` crate.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["a:2:32622:237-0:105:138","a:2:3212:247-0:105:138","a:2:42483:8983-0:105:138","a:2:32681:3090-0:105:138","a:2:3247:3504-0:105:138","a:2:42484:9101-0:105:138","b:2:2993-0:105:138","b:2:3828-0:105:138","b:2:2719-0:105:138","b:2:2716-0:105:138","b:2:3004-0:105:138","b:2:2999-0:105:138","b:2:2989-0:105:138","b:5:5964-0:105:138","0:107","0:29","0:26"]}}},"2:13582:2582":{"id":"2:13582:2582","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}}},"paths":{"1:3684:2946":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"17:12931:4456":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"1:10920:8205":{"crate_id":1,"path":["std","sys","pal","unix","fd","FileDesc"],"kind":"struct"},"2:3293:14251":{"crate_id":2,"path":["core","ops","async_function","AsyncFnOnce"],"kind":"trait"},"2:47071:7582":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"17:16750:5294":{"crate_id":17,"path":["object","xcoff","ExpAux"],"kind":"struct"},"17:13970:4578":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"2:44783:7475":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"2:45242:7502":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"2:44481:3452":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"16:7521:5617":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"1:11690:2999":{"crate_id":1,"path":["std","sys","thread_local","fast_local","eager","State"],"kind":"enum"},"2:31035:31887":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum"],"kind":"enum"},"2:33849:9109":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"17:13921:4571":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"17:11016:7861":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"1:8612:7713":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"5:7582:210":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"2:40105:7218":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"1:2505:3577":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"17:14627:4713":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"1:4826:6874":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"function"},"2:4805:3323":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"17:16377:5197":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"17:12711:7921":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"17:15689:4999":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"1:1905:3474":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"17:14043:4592":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"6:5127:6333":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"2:23309:2712":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"2:42409:173":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"2:42908:2375":{"crate_id":2,"path":["core","sync","atomic","ATOMIC_USIZE_INIT"],"kind":"constant"},"2:47423:7621":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"2:4652:3322":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"17:11733:21928":{"crate_id":17,"path":["object","read","coff","import","ImportName"],"kind":"enum"},"16:3695:5380":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"1:12410:1863":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"2:6782:7069":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"2:21887:3313":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"2:13254:14279":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"17:14084:4604":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"11:2148:8031":{"crate_id":11,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"17:10418:21891":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"6:7308:6827":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"6:6652:6728":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"6:5139:6334":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"16:8528:5744":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"1:5672:114":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"2:44229:3441":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"2:44576:3447":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"1:952:8036":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"2:12695:14611":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"1:12401:742":{"crate_id":1,"path":["std","f128"],"kind":"primitive"},"6:1514:6038":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"2:7721:14348":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"2:46568:7545":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"6:8014:6977":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"2:23018:7099":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"17:11465:4340":{"crate_id":17,"path":["object","read","archive","ArchiveSymbolIterator"],"kind":"struct"},"2:11460:3003":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"1:9305:116":{"crate_id":1,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"14:31:8016":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"1:9134:3019":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"2:41379:2955":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"1:9185:3003":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"16:7807:35379":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"17:11222:7864":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"17:16822:4572":{"crate_id":17,"path":["object","xcoff","Rel32"],"kind":"struct"},"2:2766:201":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"17:14738:4743":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"2:41120:7369":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"17:13871:4562":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"16:2920:5349":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"16:6731:7977":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"11:396:35342":{"crate_id":11,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"2:12727:2716":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"1:8244:128":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"5:735:8044":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"1:9201:3340":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"1:384:8127":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"17:12122:4374":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"5:1548:3513":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"17:12648:4431":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"6:1703:6158":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"17:12216:4384":{"crate_id":17,"path":["object","read","elf","attributes","AttributeIndexIterator"],"kind":"struct"},"17:15036:4797":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"5:5006:217":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"1:8561:2953":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"18:563:4171":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"16:7030:5530":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"6:1696:6155":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"14:160:8016":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"16:7959:5680":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"16:7212:5569":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"2:5287:33014":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"2:46731:7554":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"16:2900:5348":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"1:6201:7662":{"crate_id":1,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"2:3288:14250":{"crate_id":2,"path":["core","ops","async_function","AsyncFnMut"],"kind":"trait"},"2:12303:8095":{"crate_id":2,"path":["core","slice","iter","ChunkByMut"],"kind":"struct"},"6:7341:6850":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"2:45062:14651":{"crate_id":2,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"17:16728:5288":{"crate_id":17,"path":["object","xcoff","FunAux32"],"kind":"struct"},"1:8044:4397":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"17:16159:5142":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"16:6781:5501":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"16:6998:5521":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"17:15431:4931":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"2:46585:7546":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"2:9438:8087":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"2:43360:5718":{"crate_id":2,"path":["core","fmt","rt","Flag"],"kind":"enum"},"17:12293:7904":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"2:8766:14504":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"16:6123:5358":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"1:4812:9041":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"6:5477:6487":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"2:23433:7134":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroUsizeInner"],"kind":"struct"},"2:42648:97":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"17:11503:4343":{"crate_id":17,"path":["object","read","archive","ArchiveSymbol"],"kind":"struct"},"1:12394:1739":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"5:3095:33651":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"11:1580:8038":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"17:11757:21929":{"crate_id":17,"path":["object","read","coff","import","ImportType"],"kind":"enum"},"1:2328:3564":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"17:13014:7928":{"crate_id":17,"path":["object","read","xcoff","file","XcoffFile"],"kind":"struct"},"5:3318:33663":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"6:1539:6052":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"17:13193:7936":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegment"],"kind":"struct"},"1:910:5858":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"17:11720:4350":{"crate_id":17,"path":["object","read","coff","import","ImportFile"],"kind":"struct"},"18:531:4166":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"17:10729:4324":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"2:23477:7138":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI64Inner"],"kind":"struct"},"8:0:2755":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"17:14586:4706":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"1:505:30960":{"crate_id":1,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"16:8612:5374":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"17:13055:4344":{"crate_id":17,"path":["object","read","xcoff","section","SectionTable"],"kind":"struct"},"17:15090:4803":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"6:7361:6856":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"5:4337:2931":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"17:16684:5277":{"crate_id":17,"path":["object","xcoff","FileAux64"],"kind":"struct"},"17:15160:4816":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"6:7577:6962":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"1:7490:30855":{"crate_id":1,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"17:667:4307":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"17:10115:21881":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"16:3987:4221":{"crate_id":16,"path":["gimli","arch","PowerPc64"],"kind":"struct"},"17:10843:4327":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"6:5381:6427":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"17:12082:4370":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"17:11579:7873":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"16:3587:5379":{"crate_id":16,"path":["gimli","arch","MIPS"],"kind":"struct"},"1:4230:9046":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"16:6749:5498":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"2:8260:14505":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"2:5266:438":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"6:7350:6851":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"1:6736:3062":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"1:11129:30959":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"2:45255:33008":{"crate_id":2,"path":["core","task","wake","ExtData"],"kind":"enum"},"6:4976:6279":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"1:11381:8210":{"crate_id":1,"path":["std","sys","os_str","bytes","Slice"],"kind":"struct"},"2:21943:33486":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"17:10938:35384":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"1:2479:3567":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"6:1632:6119":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"6:5349:6414":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_resp"],"kind":"struct"},"17:16187:5149":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"2:38698:14532":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"1:11963:7773":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"2:46547:7544":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"2:22430:9120":{"crate_id":2,"path":["core","core_simd","to_bytes","ToBytes"],"kind":"trait"},"2:41082:7364":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"1:11007:29491":{"crate_id":1,"path":["std","sys","pal","unix","kernel_copy","FdHandle"],"kind":"enum"},"1:12408:1851":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"17:10564:4319":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"5:7540:8070":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"12:0:2759":{"crate_id":12,"path":["rustc_std_workspace_alloc"],"kind":"module"},"1:5184:9093":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"17:16775:5299":{"crate_id":17,"path":["object","xcoff","BlockAux64"],"kind":"struct"},"1:8107:3485":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"16:8669:5674":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"1:946:8051":{"crate_id":1,"path":["std","collections","hash","map","ExtractIf"],"kind":"struct"},"6:5319:6408":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"1:5274:8149":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"2:38533:14529":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"1:3347:2974":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"1:8493:2983":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"17:12869:4494":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"10:0:2757":{"crate_id":10,"path":["adler"],"kind":"module"},"2:40976:2898":{"crate_id":2,"path":["core","ffi","c_char"],"kind":"type_alias"},"1:9734:139":{"crate_id":1,"path":["std","sys","pal","unix","fs","File"],"kind":"struct"},"16:6822:21823":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCacheStrategy"],"kind":"enum"},"2:46716:7553":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"17:10928:7860":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"6:5036:6311":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"1:12411:1845":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"2:3644:14534":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"6:5044:6316":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"17:12191:4381":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsectionIterator"],"kind":"struct"},"17:11386:21907":{"crate_id":17,"path":["object","read","archive","Members"],"kind":"enum"},"17:14520:4697":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"2:32592:5674":{"crate_id":2,"path":["core","error","tags","Value"],"kind":"struct"},"16:6111:5420":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"17:506:4261":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"1:4777:9085":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"1:12403:902":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"17:14872:4765":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"17:14393:4677":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"2:46632:7549":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"2:47050:7581":{"crate_id":2,"path":["core","core_arch","simd","m32x8"],"kind":"struct"},"0:155:2380":{"crate_id":0,"path":["autocfg","AutoCfg"],"kind":"struct"},"2:47373:7619":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"1:5656:3016":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"18:491:4160":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"17:13095:4466":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolTable"],"kind":"struct"},"17:14963:4781":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"2:22464:33496":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"2:40815:3445":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"2:45276:180":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"2:46436:7531":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"2:10203:2914":{"crate_id":2,"path":["core","fmt","builders","FormatterFn"],"kind":"struct"},"5:6811:3340":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"17:14031:4591":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"6:6666:6730":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"1:8638:8177":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"2:11743:3455":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"5:1604:8036":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"1:5117:9088":{"crate_id":1,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"16:2724:5340":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"1:9455:162":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"6:8284:6997":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"1:5855:220":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"17:12787:4433":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"6:6473:6627":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"2:43088:2916":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"11:881:8029":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"1:1852:703":{"crate_id":1,"path":["std","env"],"kind":"module"},"1:8578:9033":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"2:40799:3447":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"1:3349:2975":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"1:2081:198":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"2:7615:3347":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"17:11515:7869":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"5:2157:2971":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"2:45201:207":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"5:1645:8050":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"2:40709:7349":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"14:7:8016":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"2:44381:3454":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"2:3041:124":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"1:9746:26301":{"crate_id":1,"path":["std","sys","pal","unix","fs","Dir"],"kind":"struct"},"6:5641:6554":{"crate_id":6,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"1:4174:9041":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"1:6300:30951":{"crate_id":1,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"17:16036:5092":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"2:3217:3327":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"17:15973:5076":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"2:44981:7488":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"1:1617:3003":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"2:8293:146":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"1:9339:8191":{"crate_id":1,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"17:13361:4488":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"1:9193:8184":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"1:9763:128":{"crate_id":1,"path":["std","sys","pal","unix","fs","DirBuilder"],"kind":"struct"},"5:3703:182":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"1:902:3340":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"11:2440:8037":{"crate_id":11,"path":["hashbrown","table","Drain"],"kind":"struct"},"6:473:5958":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"2:41403:7388":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"16:6302:5446":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"2:44105:7450":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"2:10672:9027":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"17:11358:21906":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"17:16613:4555":{"crate_id":17,"path":["object","xcoff","SectionHeader64"],"kind":"struct"},"17:14821:4760":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"2:3935:8037":{"crate_id":2,"path":["core","array","drain","Drain"],"kind":"struct"},"5:3339:5862":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"16:4404:5387":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"1:8086:8981":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"2:6273:7068":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"17:11691:7876":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"2:45001:7493":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"6:6708:6748":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_mmap_offsets"],"kind":"struct"},"17:13933:4572":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"1:2018:794":{"crate_id":1,"path":["std","ffi"],"kind":"module"},"6:5494:6492":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_128"],"kind":"struct"},"5:5561:3430":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"17:12335:7908":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"6:5265:6381":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"16:5060:5397":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"2:41051:8109":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"2:46776:7571":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"2:41230:4182":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"2:45234:8122":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"2:3273:5634":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"2:2082:1373":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"2:3093:3401":{"crate_id":2,"path":["core","error","Request"],"kind":"struct"},"2:42426:3513":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"17:10793:4203":{"crate_id":17,"path":["object","read","read_cache","ReadCacheRange"],"kind":"struct"},"17:12992:4461":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"1:10979:140":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileType"],"kind":"struct"},"17:15812:5029":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"2:42184:9034":{"crate_id":2,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"11:2420:3340":{"crate_id":11,"path":["hashbrown","table","IntoIter"],"kind":"struct"},"18:589:4172":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"2:42570:3513":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"2:13180:3432":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"6:7563:6953":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"16:8179:5689":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"2:40788:7355":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"17:12056:4368":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"2:14228:9000":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"17:2406:7848":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"16:3141:4208":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"17:14947:4777":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"1:11254:7495":{"crate_id":1,"path":["std","sys","pal","unix","time","Nanoseconds"],"kind":"struct"},"2:34781:5639":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"11:740:8022":{"crate_id":11,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"16:8585:8012":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"17:16714:5285":{"crate_id":17,"path":["object","xcoff","CsectAux64"],"kind":"struct"},"2:40118:7220":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"2:44094:8118":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"2:13416:120":{"crate_id":2,"path":["core","str","lossy","Debug"],"kind":"struct"},"0:66:1192":{"crate_id":0,"path":["autocfg","new"],"kind":"function"},"1:11066:3021":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","ExitCode"],"kind":"struct"},"17:16218:5157":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"2:42474:8110":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"16:6173:5425":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"17:13385:4489":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"2:22046:7097":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"1:12355:26636":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"1:3665:26551":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"1:10998:2951":{"crate_id":1,"path":["std","sys","pal","unix","io","IoSlice"],"kind":"struct"},"17:12392:4393":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"16:7838:21829":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"2:46393:7528":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"2:13937:205":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"17:15496:4967":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"6:4890:6240":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"16:7168:5557":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"9:328:5913":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"2:44157:7091":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"2:42562:3003":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"2:22938:9195":{"crate_id":2,"path":["core","core_simd","simd","cmp","ord","SimdOrd"],"kind":"trait"},"17:12163:4377":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsectionIterator"],"kind":"struct"},"6:4896:6242":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"6:1675:6145":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"11:2466:8051":{"crate_id":11,"path":["hashbrown","table","ExtractIf"],"kind":"struct"},"17:13070:4360":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolTable"],"kind":"struct"},"16:6462:21822":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"17:13205:7937":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"1:9741:3583":{"crate_id":1,"path":["std","sys","pal","unix","fs","ReadDir"],"kind":"struct"},"1:12400:763":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"2:44245:2956":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"17:16642:5266":{"crate_id":17,"path":["object","xcoff","Symbol32"],"kind":"struct"},"2:41214:7380":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"1:12393:1705":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"5:2594:7028":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"2:39936:9014":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"1:661:3398":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"16:5417:5409":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"2:10416:129":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"6:6521:6652":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"1:4930:9054":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"17:10534:4317":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"1:12391:1329":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"2:22797:9205":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr"],"kind":"trait"},"1:7325:8455":{"crate_id":1,"path":["std","sys","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"11:328:5853":{"crate_id":11,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"1:5305:8149":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"6:6623:6715":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"6:517:5986":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"2:11509:2957":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"17:12249:7901":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"17:11617:7864":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"17:15997:5080":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"17:12359:7910":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"2:32613:7208":{"crate_id":2,"path":["core","error","Source"],"kind":"struct"},"17:13290:4275":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"16:546:5310":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"17:13818:4555":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"16:6696:7968":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"11:854:8026":{"crate_id":11,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"2:43595:7438":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"17:2378:21956":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"17:10803:2956":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"2:44551:3433":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"2:45292:7505":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"2:2732:113":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"16:5255:5404":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"17:15621:4984":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"10:44:5875":{"crate_id":10,"path":["adler","Adler32"],"kind":"struct"},"2:42909:91":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"5:7618:3340":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"17:11173:35387":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"1:5794:3017":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"6:4997:6290":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"17:16812:5305":{"crate_id":17,"path":["object","xcoff","DwarfAux64"],"kind":"struct"},"2:10420:2915":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"2:43081:2915":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"17:11281:7865":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"1:4986:8148":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"2:40928:2893":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"14:214:5837":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"1:1115:8035":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"18:754:4202":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"6:8249:6989":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"14:0:2760":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"2:43835:7447":{"crate_id":2,"path":["core","slice","sort","stable","drift","DriftsortRun"],"kind":"struct"},"11:1023:8030":{"crate_id":11,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"6:5151:6335":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"17:15050:4798":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"2:40028:214":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"16:5172:5401":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"1:8890:3004":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"6:6813:6781":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"17:10141:21882":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"6:5482:6489":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"17:3503:7852":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"17:15531:4968":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"17:13515:21898":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"11:1880:3003":{"crate_id":11,"path":["hashbrown","set","Iter"],"kind":"struct"},"1:10626:3019":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","CommandArgs"],"kind":"struct"},"15:306:20912":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"2:46518:7543":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"6:1563:6069":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"2:1838:14461":{"crate_id":2,"path":["core","intrinsics","AggregateRawPtr"],"kind":"trait"},"2:38643:14531":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"2:42870:96":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"1:12413:1931":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"2:44756:7474":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"11:1064:20885":{"crate_id":11,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"6:6790:6775":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"17:13781:4542":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"2:46241:7515":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"11:1105:8033":{"crate_id":11,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"16:7495:5610":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"2:22677:9200":{"crate_id":2,"path":["core","core_simd","simd","num","float","SimdFloat"],"kind":"trait"},"2:3455:141":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"6:5670:6565":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"2:44523:3448":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"17:13028:7930":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSectionIterator"],"kind":"struct"},"18:659:7836":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"2:44985:7489":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"6:4964:6274":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"16:2530:5331":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"1:1489:156":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"16:4766:5389":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"1:4566:8147":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"5:1379:5620":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"17:14917:4774":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"6:5051:6318":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"2:44641:14285":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"17:15148:4812":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"1:10960:7750":{"crate_id":1,"path":["std","sys","pal","unix","fs","FilePermissions"],"kind":"struct"},"1:12404:908":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"2:46938:7577":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"17:16507:4541":{"crate_id":17,"path":["object","xcoff","FileHeader64"],"kind":"struct"},"1:12386:420":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"17:16832:4577":{"crate_id":17,"path":["object","xcoff","Rel64"],"kind":"struct"},"2:13140:3007":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"6:6381:6574":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"17:15777:5023":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"1:1867:3464":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"6:5357:6415":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_addfd"],"kind":"struct"},"1:8874:3002":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"16:8298:5703":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"2:4914:3325":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"2:43331:2913":{"crate_id":2,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"6:523:5989":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"1:7946:30949":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"5:2377:7027":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"6:6758:6765":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_statistics_v1"],"kind":"struct"},"6:1643:6127":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"17:11401:4335":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"7:79:20798":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"2:5986:2931":{"crate_id":2,"path":["core","iter","adapters","filter","next_chunk","Guard"],"kind":"struct"},"6:1507:6036":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"2:44427:3450":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"1:1633:5860":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"3:0:510":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"17:10696:4323":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"2:33365:5630":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"16:5318:5406":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"17:14750:4746":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"16:7016:5528":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"2:23189:31888":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"17:11163:4360":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"6:8330:7006":{"crate_id":6,"path":["libc","unix","linux_like","linux","canxl_frame"],"kind":"struct"},"5:3809:34844":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"2:12270:8094":{"crate_id":2,"path":["core","slice","iter","ChunkBy"],"kind":"struct"},"1:8363:2702":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"17:12319:7906":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"2:22811:14543":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_exposed_provenance"],"kind":"function"},"1:2242:129":{"crate_id":1,"path":["std","ffi","os_str","Display"],"kind":"struct"},"1:4411:8145":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"16:6876:5513":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"6:6411:6599":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"6:5255:6375":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"2:43620:157":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"16:6794:5502":{"crate_id":16,"path":["gimli","read","relocate","RelocateReader"],"kind":"struct"},"17:14652:4715":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"2:22905:9196":{"crate_id":2,"path":["core","core_simd","simd","cmp","eq","SimdPartialEq"],"kind":"trait"},"1:12409:1857":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"2:7720:14347":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccess"],"kind":"trait"},"2:11313:239":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"5:1395:8031":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"17:16179:5148":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"5:7093:14305":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstDataSrcBufDrop"],"kind":"struct"},"2:23124:7101":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"1:3536:2982":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"2:42505:14603":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"2:44558:3445":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"1:12414:1435":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"5:6730:34844":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"17:12673:7915":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"5:6551:9209":{"crate_id":5,"path":["alloc","task","LocalWake"],"kind":"trait"},"2:47148:7614":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"2:3438:14244":{"crate_id":2,"path":["core","ops","deref","DerefPure"],"kind":"trait"},"6:5230:6362":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"5:1898:8051":{"crate_id":5,"path":["alloc","collections","btree","map","ExtractIf"],"kind":"struct"},"1:9491:7741":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"17:5305:7856":{"crate_id":17,"path":["object","read","xcoff","relocation","XcoffRelocationIterator"],"kind":"struct"},"17:11851:7883":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"2:2713:104":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"6:4947:6268":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"9:390:20805":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"11:835:8023":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"6:5295:6397":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"2:6159:7065":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"1:10944:7744":{"crate_id":1,"path":["std","sys","pal","unix","fs","StatxExtraFields"],"kind":"struct"},"17:12234:4471":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"5:5565:3431":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"1:11713:7767":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"17:14599:4708":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"1:10786:4397":{"crate_id":1,"path":["std","sys","pal","unix","thread","Thread"],"kind":"struct"},"2:41254:7384":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"11:2539:5866":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"1:9140:199":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"16:6042:5357":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"17:16209:5155":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"16:5282:5405":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"2:47021:7580":{"crate_id":2,"path":["core","core_arch","simd","m16x16"],"kind":"struct"},"2:40098:8108":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"1:11982:7774":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"2:23422:7133":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU128Inner"],"kind":"struct"},"1:4492:8146":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"5:7759:8071":{"crate_id":5,"path":["alloc","rc","UniqueRc"],"kind":"struct"},"17:11124:35389":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"6:5057:6320":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"6:1690:6154":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"2:46226:7514":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"2:41182:7377":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"6:1530:6046":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"2:34608:14528":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"5:7518:7040":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"17:10778:7857":{"crate_id":17,"path":["object","read","read_cache","ReadCache"],"kind":"struct"},"1:9351:8193":{"crate_id":1,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"5:1410:8030":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"1:4699:9068":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"6:5271:6384":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"2:3263:9110":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"17:13006:4464":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"6:5007:6297":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"16:8483:5740":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"17:10274:21886":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"17:13322:21897":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"5:3277:101":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"17:13554:4499":{"crate_id":17,"path":["object","read","RelocationMapEntry"],"kind":"struct"},"2:3490:9015":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"1:11337:7757":{"crate_id":1,"path":["std","sys","personality","dwarf","eh","EHContext"],"kind":"struct"},"1:965:8023":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"9:445:20804":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"16:7358:5363":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"2:32622:237":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"2:45193:227":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"2:2960:77":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"1:1628:8051":{"crate_id":1,"path":["std","collections","hash","set","ExtractIf"],"kind":"struct"},"1:9266:9106":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"11:772:5858":{"crate_id":11,"path":["hashbrown","map","Keys"],"kind":"struct"},"2:43376:31899":{"crate_id":2,"path":["core","fmt","rt","ArgumentType"],"kind":"enum"},"2:14093:116":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"6:7391:6877":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"5:3347:5860":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"1:9224:7734":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"1:8644:7715":{"crate_id":1,"path":["std","os","unix","net","ucred","UCred"],"kind":"struct"},"1:3445:2973":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"16:6064:5359":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"1:6817:3057":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"2:42330:7713":{"crate_id":2,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"2:22452:7098":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"1:1930:3481":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"6:6480:6631":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"16:2570:5333":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"6:6611:6708":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"5:3875:8052":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"17:14099:4610":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"1:6010:3049":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"2:22142:3585":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"1:2729:14626":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"2:10637:157":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"17:14902:4770":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"16:6890:5355":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"17:15939:5068":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"6:5412:1258":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"5:7257:34871":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"2:42168:7402":{"crate_id":2,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"1:9359:7737":{"crate_id":1,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"17:12762:7925":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"2:3205:3502":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"2:46649:7550":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"16:7471:5608":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"5:6148:3045":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"11:1725:156":{"crate_id":11,"path":["hashbrown","set","HashSet"],"kind":"struct"},"2:4852:14328":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"5:7510:3340":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"6:5217:6358":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"5:7691:2892":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"5:1625:8022":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"9:355:20819":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"17:15439:4932":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"17:13692:4518":{"crate_id":17,"path":["object","archive","AixFileHeader"],"kind":"struct"},"6:5311:6404":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"17:13266:21896":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"2:3402:14253":{"crate_id":2,"path":["core","ops","coroutine","Coroutine"],"kind":"trait"},"18:726:4197":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"1:9346:8192":{"crate_id":1,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"16:6852:5509":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"6:479:5961":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"1:5351:204":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"5:898:8045":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"17:14284:4657":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"1:4116:9036":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"17:14845:4763":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"1:4208:9042":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"1:8541:2955":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"16:8121:210":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"5:4569:2931":{"crate_id":5,"path":["alloc","collections","vec_deque","shrink_to","Guard"],"kind":"struct"},"17:11232:21909":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"6:1625:6115":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"17:12798:22025":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"6:8353:7012":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"11:1564:20886":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"2:46378:7527":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"2:10358:226":{"crate_id":2,"path":["core","fmt","Result"],"kind":"type_alias"},"5:291:34844":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"16:6205:21820":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"6:8296:6999":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"17:15905:5055":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"16:7350:5591":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"15:288:20911":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"2:44886:3459":{"crate_id":2,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"17:11065:7862":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"5:4142:8037":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"1:4160:9039":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"5:2304:7021":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"1:1982:3396":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"6:559:6010":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"1:936:8037":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"2:10058:32101":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"17:3720:7853":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"6:5593:6526":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"17:15953:5070":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"1:4218:9043":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"1:3039:8140":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"2:44176:7092":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"1:2084:197":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"17:583:7844":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"2:41161:7375":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"17:12962:22026":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"1:12402:920":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"1:4677:9067":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"5:1496:100":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"2:23211:7112":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"2:44218:3444":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"18:635:4184":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"2:23378:7129":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU8Inner"],"kind":"struct"},"2:13201:3427":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"2:34050:14523":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"2:39953:213":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"1:9318:26161":{"crate_id":1,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"1:6217:220":{"crate_id":1,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"17:12605:4360":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"17:317:7841":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"2:40939:14590":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"17:11630:4346":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"1:3910:8142":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"6:5562:6517":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"2:44845:7477":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"11:2228:5864":{"crate_id":11,"path":["hashbrown","table","HashTable"],"kind":"struct"},"2:43603:7440":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"2:4722:221":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"16:7424:21827":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"1:8667:3605":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"6:6691:6738":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sockaddr_xdp"],"kind":"struct"},"16:7192:21826":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"16:2506:5330":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"17:15106:4805":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"2:42484:9101":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"17:15121:4809":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"5:7550:7041":{"crate_id":5,"path":["alloc","collections","btree","map","UnorderedKeyError"],"kind":"struct"},"17:15760:5020":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"11:1085:35347":{"crate_id":11,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"17:12952:4458":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"2:8009:2981":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"2:2937:14350":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"2:40778:7354":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"2:44820:7476":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"16:6098:7940":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"1:10969:3584":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileTimes"],"kind":"struct"},"17:16494:4527":{"crate_id":17,"path":["object","xcoff","FileHeader32"],"kind":"struct"},"2:46465:7540":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"5:894:102":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"2:43611:7441":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"17:13635:4508":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"6:6876:6794":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"6:4984:6284":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"2:41173:7376":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"16:8058:8010":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"17:10516:21894":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"5:6532:9208":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"17:15769:5021":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"16:5198:5402":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"17:12570:7914":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"16:2467:5323":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"2:43435:2368":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"1:10377:8196":{"crate_id":1,"path":["std","sys","pal","unix","os","EnvStrDebug"],"kind":"struct"},"6:4816:6189":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"6:545:6002":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"2:44084:7089":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"17:15655:4996":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"2:34:947":{"crate_id":2,"path":["core","include_str"],"kind":"macro"},"16:6337:5449":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"1:12339:8213":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"17:11958:7886":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"2:39940:7212":{"crate_id":2,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"1:3656:2372":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"5:3306:3003":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"1:8201:3580":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"1:8834:3001":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"2:43852:7449":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"1:4015:8144":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"2:47461:7623":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"5:4307:2931":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"2:44691:7471":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"1:12388:476":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"6:5648:6557":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"2:44074:8117":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"18:521:26090":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"6:5325:6409":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"2:45005:7494":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"2:44166:8120":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"2:3736:14255":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"1:9177:3021":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"17:13983:4579":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"17:12906:4453":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"2:23466:7137":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI32Inner"],"kind":"struct"},"16:4983:5396":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"1:3913:8143":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"6:5488:6490":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls_crypto_info"],"kind":"struct"},"6:6672:6733":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"17:12306:4388":{"crate_id":17,"path":["object","read","macho","fat","MachOFatFile"],"kind":"struct"},"2:33916:9111":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"16:2435:20958":{"crate_id":16,"path":["gimli","common","Vendor"],"kind":"enum"},"2:3285:14249":{"crate_id":2,"path":["core","ops","async_function","AsyncFn"],"kind":"trait"},"1:7891:4307":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"2:14116:7094":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"1:11026:3485":{"crate_id":1,"path":["std","sys","pal","unix","os","JoinPathsError"],"kind":"struct"},"16:8096:8011":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"2:44868:3458":{"crate_id":2,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"1:8502:2951":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"16:6904:5516":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"9:500:5935":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"1:957:8021":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"2:11702:8091":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"5:2357:35314":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"18:765:26089":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"2:41618:2982":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"5:798:119":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"17:16323:5187":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"16:2620:5335":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"17:12044:7896":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"1:1621:3340":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"5:1259:34826":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"1:12360:8982":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"16:6084:5415":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"0:64:2393":{"crate_id":0,"path":["autocfg","rerun_path"],"kind":"function"},"6:1569:6071":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"17:15064:4801":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"1:10669:30955":{"crate_id":1,"path":["std","sys","pal","unix","stack_overflow","Handler"],"kind":"struct"},"5:7574:3340":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"6:5088:6330":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"2:3052:138":{"crate_id":2,"path":["core","error","Error"],"kind":"trait"},"2:44677:7468":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"1:8230:140":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"1:9372:26143":{"crate_id":1,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"16:7372:5364":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"2:44144:8119":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"17:12371:4391":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"2:43095:2923":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"6:1494:6030":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"2:11771:8092":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"2:31009:7143":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"2:39990:212":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"9:480:20803":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"2:46678:7551":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"17:13306:4485":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"6:7463:6890":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"1:7415:28214":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"16:6421:5313":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"17:14533:4399":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"17:12749:7924":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"1:8271:2969":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"2:2710:103":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"6:4829:6199":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"2:8395:3094":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"17:10549:4318":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"17:12851:4449":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"2:13822:8101":{"crate_id":2,"path":["core","future","async_drop","AsyncDropInPlace"],"kind":"struct"},"1:8196:3583":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"17:16008:5084":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"2:22026:3585":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"2:45176:151":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"17:12583:4429":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"16:7789:35378":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"17:16341:5193":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"2:42318:7416":{"crate_id":2,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"1:8279:2971":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"6:5165:6336":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"17:13854:4560":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"6:8031:6987":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"17:12149:4376":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSection"],"kind":"struct"},"1:3304:29262":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"2:43848:7448":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"6:6507:6651":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"11:434:35350":{"crate_id":11,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"2:3247:3504":{"crate_id":2,"path":["core","marker","Freeze"],"kind":"trait"},"1:3074:138":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"2:30741:3404":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"2:44056:7087":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"2:44662:7462":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"17:16761:5295":{"crate_id":17,"path":["object","xcoff","BlockAux32"],"kind":"struct"},"1:8630:8180":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"1:2323:139":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"16:7508:5614":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"5:5962:251":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"2:46917:7576":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"18:706:3428":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"2:4:1271":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"1:6700:3053":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"2:47470:7624":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"2:4861:3324":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"17:15557:4974":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"17:15731:5013":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"1:2477:2418":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"17:15989:5079":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"16:6188:5427":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"1:378:8125":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"16:5742:4318":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"2:23296:3406":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"17:11566:7872":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"2:9872:85":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"17:12028:7891":{"crate_id":17,"path":["object","read","elf","note","GnuProperty"],"kind":"struct"},"6:5629:6548":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifc_ifcu"],"kind":"union"},"2:42352:7417":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"2:42833:89":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"16:7938:5677":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"16:8209:5360":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"1:11727:7768":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"17:16171:5145":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"17:12280:7902":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"2:6082:2931":{"crate_id":2,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"6:5196:6346":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"16:2990:5352":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"2:2610:14543":{"crate_id":2,"path":["core","ptr","with_exposed_provenance"],"kind":"function"},"1:680:8132":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"17:16399:5203":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"17:12886:4451":{"crate_id":17,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"2:3684:31955":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"2:3420:125":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"17:12108:4373":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"2:4604:7058":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"17:14220:4628":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"2:2957:78":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"1:11123:30921":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"17:11432:21908":{"crate_id":17,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"2:2045:678":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"17:11864:7884":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"1:4222:9044":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"16:2840:5345":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"17:13181:7935":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegmentIterator"],"kind":"struct"},"2:44977:7487":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"17:16656:5270":{"crate_id":17,"path":["object","xcoff","Symbol64"],"kind":"struct"},"17:16520:5221":{"crate_id":17,"path":["object","xcoff","AuxHeader32"],"kind":"struct"},"2:40954:2894":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"2:21909:33490":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_elements_right","Rotate"],"kind":"struct"},"5:3094:3393":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"17:14933:4775":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"1:11907:8144":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"1:5620:3014":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"17:14547:4702":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"2:41205:7379":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"6:6462:6619":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"5:5309:3045":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"16:5449:5410":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"16:7883:5463":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"2:43642:7445":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"16:8233:21831":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"17:13757:4541":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"2:42443:7422":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"2:39856:3517":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"1:2551:2370":{"crate_id":1,"path":["std","io"],"kind":"module"},"16:6502:20930":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"6:6564:6681":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"17:15946:5069":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"16:2660:5337":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"17:14573:4705":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"5:4217:3513":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"1:11707:3026":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"2:13195:3428":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"1:5862:7662":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"16:2684:5338":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"17:16283:5176":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"2:47580:7638":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"18:698:4189":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"1:12395:1829":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"17:16362:5196":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"5:4172:34844":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"2:34262:14526":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"2:22783:3585":{"crate_id":2,"path":["core","core_simd","simd","num","sealed","Sealed"],"kind":"trait"},"2:10359:2372":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"6:5387:6430":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"16:6808:5353":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"2:2969:258":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"2:46600:7547":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"2:4573:8079":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"1:10375:8197":{"crate_id":1,"path":["std","sys","pal","unix","os","Env"],"kind":"struct"},"2:4507:14320":{"crate_id":2,"path":["core","async_iter","async_iter","IntoAsyncIterator"],"kind":"trait"},"2:46273:7517":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"17:13537:4456":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"16:8105:5687":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"11:2400:3513":{"crate_id":11,"path":["hashbrown","table","IterMut"],"kind":"struct"},"18:680:4185":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"6:5117:6332":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"16:7542:5619":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"1:9428:2931":{"crate_id":1,"path":["std","sync","poison","Guard"],"kind":"struct"},"17:12941:4457":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"2:11484:3513":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"17:11998:7889":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"16:6843:5508":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"2:0:568":{"crate_id":2,"path":["core"],"kind":"module"},"6:6823:6783":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"5:1595:5859":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"5:938:8998":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"2:44993:7491":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"5:5825:14303":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"16:4120:5382":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"2:45009:7495":{"crate_id":2,"path":["core","time","Nanoseconds"],"kind":"struct"},"17:12018:7890":{"crate_id":17,"path":["object","read","elf","note","GnuPropertyIterator"],"kind":"struct"},"6:491:5966":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"2:44131:7090":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"1:988:8028":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"1:11989:7774":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"16:2880:5347":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"2:8760:3514":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"5:5150:2931":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"1:8005:3585":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"5:306:3096":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"2:5094:14338":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"17:16311:5185":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"17:11706:7877":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"1:5869:7663":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"13:110:35356":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"16:4241:5385":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"2:41073:7362":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"6:553:6007":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"1:11758:7771":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"17:13471:4438":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"11:2137:8030":{"crate_id":11,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"5:6116:72":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"1:9437:235":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"2:23341:3585":{"crate_id":2,"path":["core","num","nonzero","private","Sealed"],"kind":"trait"},"11:1140:8034":{"crate_id":11,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"5:6900:34844":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"1:11235:3020":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"1:8021:8164":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"16:896:7939":{"crate_id":16,"path":["gimli","read","endian_slice","DebugBytes"],"kind":"struct"},"2:11103:32771":{"crate_id":2,"path":["core","slice","sort","shared","smallsort","CopyOnDrop"],"kind":"struct"},"1:961:8022":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"2:44834:14286":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"17:12550:4426":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"17:16084:5129":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"6:5186:6339":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"6:5301:6400":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"2:43632:2999":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"16:8014:5370":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"6:4990:6287":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"16:2550:5332":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"5:3105:33629":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"2:42796:95":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"5:1586:5858":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"16:7416:7981":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"2:11664:3453":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"1:8353:8170":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"1:1928:3480":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"2:3433:2958":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"2:42418:3003":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"16:8223:5691":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"11:2545:5867":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"2:8804:32105":{"crate_id":2,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"6:8267:6992":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"5:3716:3003":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"17:14375:4676":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"1:3599:2940":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"18:735:26088":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"6:1584:6083":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"16:0:2762":{"crate_id":16,"path":["gimli"],"kind":"module"},"16:8626:5753":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"2:23411:7132":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU64Inner"],"kind":"struct"},"2:10629:153":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"6:7454:6886":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"6:1521:6041":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"0:65:2399":{"crate_id":0,"path":["autocfg","rerun_env"],"kind":"function"},"2:42212:7409":{"crate_id":2,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"2:46209:7511":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"17:13222:21895":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"6:5533:6500":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"1:532:8962":{"crate_id":1,"path":["std","thread","PanicGuard"],"kind":"struct"},"1:3307:31426":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"16:2796:5343":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"17:15701:5002":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"2:5325:2984":{"crate_id":2,"path":["core","io","borrowed_buf","BorrowedBuf"],"kind":"struct"},"1:5533:129":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"9:422:20806":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"1:11034:2374":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Stdio"],"kind":"enum"},"17:10442:21892":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"2:41060:2954":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"17:15981:5077":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"6:6748:6758":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_statistics"],"kind":"struct"},"17:13041:7931":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSection"],"kind":"struct"},"16:6239:5433":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"2:23389:7130":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU16Inner"],"kind":"struct"},"5:2275:7018":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"17:15887:5051":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"6:6659:6729":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"16:4956:5395":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"5:7869:8074":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"1:2325:3563":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"16:7949:5367":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"16:7044:5361":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"2:21955:33498":{"crate_id":2,"path":["core","core_simd","swizzle","resize","Resize"],"kind":"struct"},"2:11629:8090":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"2:32599:8107":{"crate_id":2,"path":["core","error","tags","MaybeSizedValue"],"kind":"struct"},"2:40703:3446":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"17:12135:4375":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"18:573:4161":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"1:597:8129":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"11:1914:5862":{"crate_id":11,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"2:21941:33500":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"0:63:693":{"crate_id":0,"path":["autocfg","emit"],"kind":"function"},"17:11777:4357":{"crate_id":17,"path":["object","read","coff","import","ImportObjectData"],"kind":"struct"},"17:15739:5016":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"1:10949:3580":{"crate_id":1,"path":["std","sys","pal","unix","fs","OpenOptions"],"kind":"struct"},"17:16668:5272":{"crate_id":17,"path":["object","xcoff","FileAux32"],"kind":"struct"},"1:8191:3582":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"2:42514:3516":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"2:22585:9116":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"6:6544:6665":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"6:7448:6884":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"5:4536:2931":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"17:15919:5062":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"11:685:3513":{"crate_id":11,"path":["hashbrown","map","IterMut"],"kind":"struct"},"17:10487:21893":{"crate_id":17,"path":["object","common","RelocationFlags"],"kind":"enum"},"6:5420:6448":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"7:0:1921":{"crate_id":7,"path":["unwind"],"kind":"module"},"2:10966:32773":{"crate_id":2,"path":["core","slice","sort","unstable","quicksort","GapGuardRaw"],"kind":"struct"},"16:3048:20960":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"5:6169:14843":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"15:394:20922":{"crate_id":15,"path":["addr2line","DebugFile"],"kind":"enum"},"17:15641:4992":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"18:80:26078":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"2:41612:7392":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"2:22759:9202":{"crate_id":2,"path":["core","core_simd","simd","num","uint","SimdUint"],"kind":"trait"},"2:13845:7373":{"crate_id":2,"path":["core","future","async_drop","Fuse"],"kind":"struct"},"1:9300:8185":{"crate_id":1,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"2:2222:189":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"2:2771:135":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"2:33577:14522":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"1:8484:2981":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"5:1636:210":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"5:7747:2897":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"2:46179:7507":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"11:2366:8042":{"crate_id":11,"path":["hashbrown","table","AbsentEntry"],"kind":"struct"},"2:46258:7516":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"17:16332:5191":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"17:12524:7911":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"6:5179:6337":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"6:465:5953":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"1:8689:7716":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"17:11952:7885":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"2:32624:244":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"17:15665:4997":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"16:8711:5760":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"2:40895:7358":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"1:8208:3584":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"6:8255:6990":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"1:4822:6870":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"function"},"17:10630:4321":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"17:12816:4438":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"2:32713:115":{"crate_id":2,"path":["core","marker","ConstParamTy"],"kind":"trait"},"6:5520:6499":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_chacha20_poly1305"],"kind":"struct"},"17:1339:7846":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"1:8624:9066":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"17:14335:4668":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"2:41143:7373":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"1:7834:8459":{"crate_id":1,"path":["std","panicking","rust_panic_without_hook","RewrapBox"],"kind":"struct"},"2:47542:7630":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"5:1424:8035":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"1:11975:26399":{"crate_id":1,"path":["std","panicking","panic_count","MustAbort"],"kind":"enum"},"17:14416:4680":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"1:2715:2968":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"16:7223:5570":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"17:11475:21909":{"crate_id":17,"path":["object","read","archive","SymbolIteratorInternal"],"kind":"enum"},"18:113:26080":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"5:3101:33630":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"1:5726:2374":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"11:2495:20881":{"crate_id":11,"path":["hashbrown","Equivalent"],"kind":"trait"},"1:11752:7770":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"17:14019:4588":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"2:34117:14525":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"2:1969:2931":{"crate_id":2,"path":["core","mem","maybe_uninit","Guard"],"kind":"struct"},"2:23071:7100":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"1:6479:7662":{"crate_id":1,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"11:351:35344":{"crate_id":11,"path":["hashbrown","raw","FullBucketsIndices"],"kind":"struct"},"1:2751:2959":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"17:11291:35382":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"1:1624:8037":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"17:11902:4365":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"17:14114:4616":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"11:842:8997":{"crate_id":11,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"1:8567:8177":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"17:12826:4440":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"6:6599:6703":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"2:47618:7640":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"1:8006:7665":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"5:3940:8051":{"crate_id":5,"path":["alloc","collections","linked_list","ExtractIf"],"kind":"struct"},"17:14152:4624":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"5:1132:34844":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"17:12347:7909":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"2:4726:8080":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"2:44277:3453":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"1:573:8967":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"1:5103:9087":{"crate_id":1,"path":["std","os","net","linux_ext","socket","UnixSocketExt"],"kind":"trait"},"1:1650:5863":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"2:8757:150":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"2:47315:7617":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"2:22848:9206":{"crate_id":2,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr"],"kind":"trait"},"2:40048:216":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"16:8000:5369":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"17:0:2763":{"crate_id":17,"path":["object"],"kind":"module"},"16:3126:20961":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"2:2343:7056":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"17:13209:138":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"5:3860:2971":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"2:47516:7628":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"5:1614:8021":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"1:8358:8171":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"2:9551:3426":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"11:488:154":{"crate_id":11,"path":["hashbrown","map","HashMap"],"kind":"struct"},"2:42722:94":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"2:8304:165":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"2:40994:2912":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"17:13119:4467":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbol"],"kind":"struct"},"6:8302:7000":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"17:12723:7922":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"5:1239:33656":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"1:11307:162":{"crate_id":1,"path":["std","sys","pal","unix","time","Instant"],"kind":"struct"},"16:6144:21819":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"2:3258:9108":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"1:2790:2970":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"2:46340:7525":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"2:42946:98":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"2:6982:7074":{"crate_id":2,"path":["core","iter","adapters","map_windows","Buffer"],"kind":"struct"},"17:12687:7919":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"5:1794:34844":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"1:4110:9037":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"6:1589:6085":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"2:8450:178":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"18:670:7840":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"17:13349:4487":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"2:44259:2957":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"2:47481:7625":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"18:623:35395":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"2:30971:7142":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"17:13798:4545":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"11:1888:8037":{"crate_id":11,"path":["hashbrown","set","Drain"],"kind":"struct"},"11:1907:5861":{"crate_id":11,"path":["hashbrown","set","Difference"],"kind":"struct"},"16:7075:21825":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"16:5689:5412":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"2:42685:87":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"2:3581:211":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"1:11823:26187":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"11:698:3340":{"crate_id":11,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"17:15315:4838":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"1:4824:6872":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"function"},"6:5507:6498":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_256"],"kind":"struct"},"1:4330:9062":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"2:2966:145":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"5:2265:8962":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"6:5395:6435":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"11:2323:8030":{"crate_id":11,"path":["hashbrown","table","OccupiedEntry"],"kind":"struct"},"1:9420:3051":{"crate_id":1,"path":["std","sync","mutex","MappedMutexGuard"],"kind":"struct"},"18:96:26079":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"11:2551:35354":{"crate_id":11,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"11:2301:5620":{"crate_id":11,"path":["hashbrown","table","Entry"],"kind":"enum"},"2:23178:3405":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"17:11114:7863":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"2:41596:7391":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"18:689:4188":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"6:532:5995":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"6:8343:7010":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"16:4184:5384":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"2:8256:14506":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"17:11457:4339":{"crate_id":17,"path":["object","read","archive","ArchiveOffset"],"kind":"struct"},"6:5224:6359":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"17:15586:4980":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"1:11701:7764":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"1:9311:8187":{"crate_id":1,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"1:8250:7669":{"crate_id":1,"path":["std","hash","random","RandomState"],"kind":"struct"},"6:7414:6878":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"5:7560:33670":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"6:4902:6245":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"2:2596:679":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"16:7980:5368":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"17:14346:4671":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"5:0:309":{"crate_id":5,"path":["alloc"],"kind":"module"},"16:5224:5403":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"16:3110:5375":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"16:7919:8003":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"6:578:6020":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"2:40910:7360":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"5:7707:2895":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"1:10443:3024":{"crate_id":1,"path":["std","sys","pal","unix","pipe","AnonPipe"],"kind":"struct"},"16:5113:5399":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"1:12371:26142":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"5:7735:2896":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"16:6256:5438":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"16:8598:8015":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"1:3072:226":{"crate_id":1,"path":["std","io","error","Result"],"kind":"type_alias"},"17:15136:4456":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"16:4694:5388":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"2:46294:7522":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"1:11289:7756":{"crate_id":1,"path":["std","sys","pal","unix","time","Timespec"],"kind":"struct"},"6:6723:6753":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_mmap_offsets_v1"],"kind":"struct"},"2:42370:7418":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"2:46843:7574":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"6:6419:6601":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"2:10063:33511":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"6:5375:6425":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"5:994:8999":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"16:5144:5400":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"17:15785:5025":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"2:33983:14524":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"1:5797:3018":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"17:13890:4567":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"17:12225:4385":{"crate_id":17,"path":["object","read","elf","attributes","AttributeReader"],"kind":"struct"},"2:23951:236":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"1:3402:2977":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"1:8663:8181":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"16:6368:5455":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"17:11971:7887":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"16:6680:7965":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackageSections"],"kind":"struct"},"17:10031:21879":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"11:2559:5869":{"crate_id":11,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"16:7386:5593":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"1:4928:9052":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"17:14483:4693":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"11:1601:8039":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"11:102:5848":{"crate_id":11,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"9:53:20822":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"2:47501:7627":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"17:15602:4983":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"2:46503:7542":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"17:13610:4507":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"6:5107:6331":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"1:4891:9067":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"1:1645:5862":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"1:9473:3587":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"6:5586:6524":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"1:923:5859":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"6:7487:6903":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"17:12176:4378":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsection"],"kind":"struct"},"1:9432:234":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"2:32623:3089":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"17:14327:4666":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"6:6526:6653":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"17:11309:7866":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"2:12941:7457":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"2:47527:7629":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"13:229:5847":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"2:2612:14544":{"crate_id":2,"path":["core","ptr","with_exposed_provenance_mut"],"kind":"function"},"2:2052:7051":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"6:5441:6463":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"1:12398:744":{"crate_id":1,"path":["std","f16"],"kind":"primitive"},"6:1684:6151":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"2:41589:7390":{"crate_id":2,"path":["core","iter","sources","from_coroutine","FromCoroutine"],"kind":"struct"},"18:651:4161":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"2:42130:170":{"crate_id":2,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"16:8565:5750":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"6:4881:6235":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"16:4929:5394":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"2:4883:3086":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"16:2748:5341":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"2:40923:107":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"2:41645:7396":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"17:14672:4718":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"2:23488:7139":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI128Inner"],"kind":"struct"},"1:12387:1188":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"16:6389:7942":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"5:7059:14303":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"1:11111:30965":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"14:220:5839":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"2:3826:71":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"2:47490:7626":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"6:6534:6658":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"2:3671:14317":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"16:6588:5493":{"crate_id":16,"path":["gimli","read","cfi","UnwindExpression"],"kind":"struct"},"17:13733:4527":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"6:6740:6757":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_umem_reg_v1"],"kind":"struct"},"2:46805:7572":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"17:15351:4869":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"11:798:8037":{"crate_id":11,"path":["hashbrown","map","Drain"],"kind":"struct"},"2:22425:3585":{"crate_id":2,"path":["core","core_simd","to_bytes","sealed","Sealed"],"kind":"trait"},"2:21973:3585":{"crate_id":2,"path":["core","core_simd","cast","sealed","Sealed"],"kind":"trait"},"2:7786:32015":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"6:6493:6640":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"6:5450:6469":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"16:2640:5336":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"1:10986:7753":{"crate_id":1,"path":["std","sys","pal","unix","fs","Mode"],"kind":"struct"},"2:45183:219":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"1:11272:3587":{"crate_id":1,"path":["std","sys","pal","unix","time","SystemTime"],"kind":"struct"},"16:7305:5585":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"16:5709:21818":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"17:16198:5154":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"1:12412:977":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"1:1106:8031":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"1:6527:220":{"crate_id":1,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"17:10823:4326":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"17:14460:4688":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"2:46407:7529":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"17:11539:4344":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"6:4914:6254":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"6:1489:6028":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"2:45027:131":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"17:15963:5073":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"11:2121:5620":{"crate_id":11,"path":["hashbrown","set","Entry"],"kind":"enum"},"2:13962:8102":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"17:14859:4764":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"2:42483:8983":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"18:598:35393":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"17:10394:21890":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"6:586:6024":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"2:41244:7383":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"5:2171:8052":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"17:13398:4491":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"1:11246:29494":{"crate_id":1,"path":["std","sys","pal","unix","thread","cgroups","Cgroup"],"kind":"enum"},"1:12006:30919":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Bomb"],"kind":"struct"},"6:5334:6412":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_sizes"],"kind":"struct"},"2:43348:7436":{"crate_id":2,"path":["core","fmt","rt","Count"],"kind":"enum"},"1:8748:2998":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"1:6376:7094":{"crate_id":1,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"2:40750:31901":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"6:6449:6618":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"17:12066:2377":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"2:44235:3440":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"17:15829:5037":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"2:47657:7656":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"2:40008:215":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"2:23262:31912":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"17:14708:4724":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"17:13909:4568":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"5:7676:8996":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"17:11878:4360":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"17:14140:4621":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"16:6658:7959":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"2:39277:14533":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"2:34435:14527":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"2:44973:7486":{"crate_id":2,"path":["core","str","LinesMap"],"kind":"struct"},"2:41195:7378":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"5:789:250":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"6:485:5964":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"17:14438:4687":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"7:32:20791":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"17:15410:4921":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"1:11049:26170":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","ProgramKind"],"kind":"enum"},"2:3449:3091":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"14:165:20892":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"5:7530:8037":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"17:12537:7912":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"6:4792:6172":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"1:685:8978":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"2:44409:3449":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"2:824:190":{"crate_id":2,"path":["core","num","nonzero","NonZero"],"kind":"struct"},"6:6882:6795":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"17:13491:4496":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"6:8319:7005":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"18:538:4169":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"17:14560:4703":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"2:42611:90":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"17:13945:4575":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"2:44533:3436":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"5:7184:264":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"2:40822:14344":{"crate_id":2,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"18:481:4159":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"2:22891:3585":{"crate_id":2,"path":["core","core_simd","simd","ptr","sealed","Sealed"],"kind":"trait"},"6:4842:6209":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"6:4929:6260":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"16:2486:5329":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"16:2704:5339":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"6:5428:6453":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"2:44542:3434":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"11:785:5859":{"crate_id":11,"path":["hashbrown","map","Values"],"kind":"struct"},"6:6700:6744":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_ring_offset"],"kind":"struct"},"5:6032:8037":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"1:6871:3063":{"crate_id":1,"path":["std","sync","reentrant_lock","ReentrantLock"],"kind":"struct"},"2:23499:7140":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroIsizeInner"],"kind":"struct"},"17:14358:4673":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"6:5541:6505":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"2:14173:152":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"1:971:8997":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"2:40765:7353":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"15:327:20916":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"2:44309:3457":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"2:22:826":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"16:7731:7422":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"2:40068:8990":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"1:3617:2942":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"2:10418:2916":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"6:5205:6351":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"2:13206:3425":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"2:22862:14543":{"crate_id":2,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr","with_exposed_provenance"],"kind":"function"},"17:15753:5019":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"2:26351:267":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"16:908:7842":{"crate_id":16,"path":["gimli","read","endian_slice","DebugLen"],"kind":"struct"},"2:6971:7077":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindows"],"kind":"struct"},"5:3729:3513":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"17:14507:4694":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"6:1551:6061":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"2:44997:7492":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"2:8342:130":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"6:4937:6262":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"2:22028:9114":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"1:6696:3052":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"2:41101:134":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"2:31024:2913":{"crate_id":2,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"6:8199:6988":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"1:10939:7742":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileAttr"],"kind":"struct"},"2:21926:33492":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"6:4875:6233":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"1:8072:8980":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"16:8267:5699":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"5:7501:3682":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"18:643:4161":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"2:3458:142":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"1:8263:8169":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"5:4506:34853":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"16:2860:5346":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"10:36:5874":{"crate_id":10,"path":["adler","algo","U32X4"],"kind":"struct"},"6:5069:6329":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"17:12897:4452":{"crate_id":17,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"17:10977:35383":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"17:11926:4367":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"1:9415:187":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"17:13592:4504":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"2:32546:3022":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"17:10784:7858":{"crate_id":17,"path":["object","read","read_cache","ReadCacheInternal"],"kind":"struct"},"18:581:3313":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"16:6028:5354":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"6:4869:6232":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"16:155:5308":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"16:5379:5408":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"2:43397:2913":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"2:4795:7059":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"17:14832:4761":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"6:6443:6617":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"2:25:703":{"crate_id":2,"path":["core","env"],"kind":"macro"},"2:45171:7501":{"crate_id":2,"path":["core","future","async_drop","Noop"],"kind":"struct"},"2:8313:3095":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"2:23139:7102":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"1:8092:3484":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"1:1869:3465":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"2:3254:3506":{"crate_id":2,"path":["core","marker","FnPtr"],"kind":"trait"},"17:15549:4973":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"1:5582:2373":{"crate_id":1,"path":["std","process"],"kind":"module"},"1:3443:2972":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"2:23227:31878":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"1:8548:2956":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"5:1223:34828":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"2:10677:7081":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"2:44065:7088":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"2:46422:7530":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"1:5983:3048":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"6:7518:6929":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"17:16739:5293":{"crate_id":17,"path":["object","xcoff","FunAux64"],"kind":"struct"},"6:8290:6998":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"5:3352:33672":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"17:12860:4450":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"9:176:20871":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"1:7796:8456":{"crate_id":1,"path":["std","panicking","begin_panic_handler","FormatStringPayload"],"kind":"struct"},"11:1893:8051":{"crate_id":11,"path":["hashbrown","set","ExtractIf"],"kind":"struct"},"17:14692:4719":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"1:5009:9051":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"17:15931:5065":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"1:11222:2713":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","ExitStatus"],"kind":"struct"},"14:187:20899":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"2:11552:3435":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"16:903:7841":{"crate_id":16,"path":["gimli","read","endian_slice","DebugByte"],"kind":"struct"},"11:2533:5865":{"crate_id":11,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"17:12840:4445":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"1:10249:7413":{"crate_id":1,"path":["std","sys","pal","unix","net","Socket"],"kind":"struct"},"17:11527:7870":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"6:6680:6735":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"17:14773:4755":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"16:6408:5459":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"2:10424:2924":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"2:3212:247":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"2:23400:7131":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU32Inner"],"kind":"struct"},"2:5367:988":{"crate_id":2,"path":["core","iter"],"kind":"module"},"1:5976:3047":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"16:4152:5383":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"11:2566:3006":{"crate_id":11,"path":["hashbrown","TryReserveError"],"kind":"enum"},"17:11319:35388":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"17:12736:7923":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"17:14072:4601":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"5:3373:5863":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"17:16632:5265":{"crate_id":17,"path":["object","xcoff","SymbolBytes"],"kind":"struct"},"16:5649:5411":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"1:12415:13":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"1:8511:2952":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"11:1674:35338":{"crate_id":11,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"1:4338:9063":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"1:6885:3064":{"crate_id":1,"path":["std","sync","reentrant_lock","ReentrantLockGuard"],"kind":"struct"},"2:4365:2931":{"crate_id":2,"path":["core","array","Guard"],"kind":"struct"},"6:1711:6162":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"17:10861:139":{"crate_id":17,"path":["object","read","any","File"],"kind":"enum"},"18:507:4161":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"17:11818:7882":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"2:10428:2921":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"17:10097:21880":{"crate_id":17,"path":["object","common","SubArchitecture"],"kind":"enum"},"17:12699:7920":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"2:41024:2985":{"crate_id":2,"path":["core","io","borrowed_buf","BorrowedCursor"],"kind":"struct"},"2:22933:9197":{"crate_id":2,"path":["core","core_simd","simd","cmp","ord","SimdPartialOrd"],"kind":"trait"},"17:13719:4526":{"crate_id":17,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"6:5249:6373":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"16:8636:21833":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"1:6590:186":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"1:2493:3571":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"1:6942:233":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"1:7384:30923":{"crate_id":1,"path":["std","sys","thread_local","abort_on_dtor_unwind","DtorUnwindGuard"],"kind":"struct"},"17:16264:5171":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"17:2227:7847":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"6:5288:6395":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"2:47270:7616":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"17:13145:7932":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatIterator"],"kind":"struct"},"17:15573:4975":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"17:14055:4593":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"17:3854:7854":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"2:47225:7615":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"17:16019:5085":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"2:44513:2953":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"17:14001:4587":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"2:41152:7374":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"17:14640:4714":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"17:13082:7864":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolIterator"],"kind":"struct"},"5:7232:34867":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"16:8723:138":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"1:9151:2713":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"17:15852:5040":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"2:13805:8098":{"crate_id":2,"path":["core","future","async_drop","AsyncDropOwning"],"kind":"struct"},"5:6684:8037":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"1:437:185":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"17:16145:5136":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"16:7554:21828":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"17:14127:4620":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"5:5619:1739":{"crate_id":5,"path":["alloc","str"],"kind":"module"},"2:21924:33494":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"16:7990:5682":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"17:15896:5054":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"17:13169:7934":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatSectionIterator"],"kind":"struct"},"1:7170:9112":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"5:4491:265":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"6:4921:6258":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"17:14997:4794":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"2:41603:3052":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"1:892:3513":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"2:23320:3420":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"17:15836:5038":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"1:8255:7670":{"crate_id":1,"path":["std","hash","random","DefaultHasher"],"kind":"struct"},"2:31382:196":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"2:41004:2911":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"2:46699:7552":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"1:9164:3020":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"2:44005:8116":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"1:2011:3397":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"5:7784:7047":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"6:4970:6276":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"18:548:153":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"2:4441:8077":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"1:1639:5861":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"17:13838:4556":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"2:4068:3340":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"17:15024:4796":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"2:33153:5633":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"2:39968:210":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"16:7058:5532":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"2:45303:5872":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"2:31003:7049":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"17:11592:4300":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"1:9442:3059":{"crate_id":1,"path":["std","sync","rwlock","MappedRwLockReadGuard"],"kind":"struct"},"6:5341:6413":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif"],"kind":"struct"},"6:5635:6551":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifconf"],"kind":"struct"},"2:44855:7481":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"17:15475:4962":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"2:6977:7076":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindowsInner"],"kind":"struct"},"2:44567:3446":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"17:11553:7871":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"1:3674:2943":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"2:40902:7359":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"struct"},"11:1049:8031":{"crate_id":11,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"1:7820:8458":{"crate_id":1,"path":["std","panicking","begin_panic","Payload"],"kind":"struct"},"1:3848:9035":{"crate_id":1,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"1:11741:8161":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"17:1220:7845":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"5:7610:3340":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"2:42522:226":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"2:32682:3508":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"16:4810:5390":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"1:5465:203":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"18:0:2764":{"crate_id":18,"path":["memchr"],"kind":"module"},"0:0:2584":{"crate_id":0,"path":["autocfg"],"kind":"module"},"16:6269:5439":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"2:47565:7637":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"5:1011:3003":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"17:14807:4758":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"1:9576:3480":{"crate_id":1,"path":["std","sys","pal","unix","args","Args"],"kind":"struct"},"2:42390:194":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"1:11536:30962":{"crate_id":1,"path":["std","sys","sync","once","futex","CompletionGuard"],"kind":"struct"},"16:6573:5490":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"17:10597:4320":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"2:44989:7490":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"6:6902:6809":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"2:3665:14318":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"1:10517:114":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Command"],"kind":"struct"},"5:4377:3003":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"17:10663:4322":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"2:11785:8093":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"1:12392:335":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"1:8731:9097":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"6:7604:6968":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"16:6942:5519":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"2:12918:7456":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"16:6640:7949":{"crate_id":16,"path":["gimli","read","dwarf","DwarfSections"],"kind":"struct"},"2:41091:7365":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"2:22152:9115":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"2:32588:8106":{"crate_id":2,"path":["core","error","private","Internal"],"kind":"struct"},"2:22583:3585":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"2:43414:138":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"6:564:6012":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"2:45179:164":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"11:430:35349":{"crate_id":11,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"1:6392:30922":{"crate_id":1,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"1:7738:26652":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"2:2148:14554":{"crate_id":2,"path":["core","ptr","metadata","Thin"],"kind":"trait_alias"},"11:0:2758":{"crate_id":11,"path":["hashbrown"],"kind":"module"},"6:6770:6767":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_desc"],"kind":"struct"},"17:15876:5047":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"1:12407:1869":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"2:3659:147":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"5:7720:14590":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"1:7901:8162":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"2:11591:8089":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"2:14136:7096":{"crate_id":2,"path":["core","task","wake","LocalWaker"],"kind":"struct"},"2:10959:32770":{"crate_id":2,"path":["core","slice","sort","unstable","quicksort","GapGuard"],"kind":"struct"},"2:42296:31941":{"crate_id":2,"path":["core","net","parser","AddrKind"],"kind":"enum"},"2:2973:257":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"2:32711:3507":{"crate_id":2,"path":["core","marker","Tuple"],"kind":"trait"},"16:8066:21830":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"6:5471:6484":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"2:42587:196":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"5:5516:34844":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"1:8901:3005":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"17:15077:4802":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"17:10246:21885":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"6:5622:6545":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"17:11448:7868":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"11:809:8051":{"crate_id":11,"path":["hashbrown","map","ExtractIf"],"kind":"struct"},"1:6814:3056":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"2:8069:3040":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"1:10746:2972":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stderr"],"kind":"struct"},"2:44327:3456":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"17:12920:4454":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"5:7665:3006":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"1:8026:7666":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"1:5640:3015":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"2:22809:32069":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_addr"],"kind":"function"},"2:10426:206":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"2:47344:7618":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"2:11303:3585":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"2:46486:7541":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"5:221:8043":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"1:677:8130":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"16:8151:5372":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"1:2299:2369":{"crate_id":1,"path":["std","fs"],"kind":"module"},"6:1727:6166":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"1:2332:2941":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"4:0:2754":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"2:46955:7578":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"6:4805:6181":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"1:5606:3013":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"1:9287:3050":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"2:38588:14530":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"1:9447:3060":{"crate_id":1,"path":["std","sync","rwlock","MappedRwLockWriteGuard"],"kind":"struct"},"17:16241:5170":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"11:2349:8031":{"crate_id":11,"path":["hashbrown","table","VacantEntry"],"kind":"struct"},"16:3889:4213":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"2:2808:202":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"2:31409:3313":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"1:8218:3581":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"5:7853:8051":{"crate_id":5,"path":["alloc","vec","extract_if","ExtractIf"],"kind":"struct"},"5:1564:3340":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"1:5094:9086":{"crate_id":1,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"2:23247:31916":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"16:7159:5556":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"1:628:8975":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"17:5131:7855":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolIterator"],"kind":"struct"},"2:12341:3437":{"crate_id":2,"path":["core","slice","raw","from_raw_parts"],"kind":"function"},"2:47444:7622":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"11:873:8028":{"crate_id":11,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"6:570:6015":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"6:6631:6716":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"1:8619:7714":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"1:3566:2931":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"2:13910:33378":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"2:10411:120":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"17:12035:5864":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"17:15540:4972":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"1:0:1731":{"crate_id":1,"path":["std"],"kind":"module"},"5:2825:7031":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"6:5658:6558":{"crate_id":6,"path":["libc","unix","linux_like","linux","sched_attr"],"kind":"struct"},"16:7765:5657":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"16:7578:7737":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"17:12983:22027":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"6:6777:6768":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","iocb"],"kind":"struct"},"17:13157:7933":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdat"],"kind":"struct"},"17:11788:7878":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"2:4488:14248":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"16:8320:21832":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"6:1597:6090":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"2:41111:7367":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"17:16297:5178":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"16:7337:5589":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"2:9401:8086":{"crate_id":2,"path":["core","panic","panic_info","PanicMessage"],"kind":"struct"},"6:5405:6442":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"2:12711:8096":{"crate_id":2,"path":["core","slice","GetManyMutError"],"kind":"struct"},"17:15844:5039":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"1:11015:29493":{"crate_id":1,"path":["std","sys","pal","unix","kernel_copy","SpliceMode"],"kind":"enum"},"1:9392:7740":{"crate_id":1,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"16:8137:5371":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"2:10422:2923":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"9:0:2756":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"2:3343:5635":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"1:994:8029":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"16:3308:5320":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"2:21975:9118":{"crate_id":2,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"2:4731:8081":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"2:12881:7453":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"1:4932:9055":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"16:8503:5741":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"1:12389:1891":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"1:11886:8143":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"6:4957:6271":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"17:15679:4998":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"2:10430:2922":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"17:11678:7875":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"1:4067:2700":{"crate_id":1,"path":["std","num"],"kind":"module"},"6:1657:6138":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"16:2415:20931":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"1:4168:9040":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"6:7469:6892":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"2:44708:7472":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"2:46326:7524":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"17:16555:5251":{"crate_id":17,"path":["object","xcoff","AuxHeader64"],"kind":"struct"},"5:4917:811":{"crate_id":5,"path":["alloc","fmt"],"kind":"module"},"17:472:7843":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"6:0:1013":{"crate_id":6,"path":["libc"],"kind":"module"},"6:1667:6144":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"1:8796:2999":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"16:5085:5398":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"16:2966:5351":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"17:10368:21889":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"5:7771:243":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"14:202:14287":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"16:3834:5381":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"2:13186:3426":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"2:41031:7090":{"crate_id":2,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"2:22721:9201":{"crate_id":2,"path":["core","core_simd","simd","num","int","SimdInt"],"kind":"trait"},"2:42434:3340":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"17:322:7842":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"17:14975:4783":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"2:46617:7548":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"5:3313:5861":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"2:45266:8124":{"crate_id":2,"path":["core","task","wake","ContextBuilder"],"kind":"struct"},"3:234:226":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"6:8261:6991":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"11:1884:3340":{"crate_id":11,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"16:4844:5391":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"11:1158:8035":{"crate_id":11,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"16:4873:5392":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"6:6638:6717":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"1:4888:9089":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"11:2380:3003":{"crate_id":11,"path":["hashbrown","table","Iter"],"kind":"struct"},"2:10377:144":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"1:4146:9038":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"2:47595:7639":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"17:13958:4577":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"17:16132:5130":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"6:6917:6820":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"17:16798:5304":{"crate_id":17,"path":["object","xcoff","DwarfAux32"],"kind":"struct"},"16:3014:20959":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"1:8554:2957":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"16:6738:35376":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"17:12095:4372":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"17:16595:4545":{"crate_id":17,"path":["object","xcoff","SectionHeader32"],"kind":"struct"},"1:4346:9064":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"2:10831:32774":{"crate_id":2,"path":["core","slice","sort","stable","merge","MergeState"],"kind":"struct"},"1:982:8026":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"11:708:8021":{"crate_id":11,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"2:41389:7387":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"2:46826:7573":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"17:14312:4664":{"crate_id":17,"path":["object","macho","DyldSubCacheEntryV2"],"kind":"struct"},"16:2590:5334":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"2:3461:143":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"2:45315:7506":{"crate_id":2,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"2:2963:163":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"17:12625:4430":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"1:10740:2974":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stdin"],"kind":"struct"},"1:3310:31427":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"16:7401:35371":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"1:4308:30854":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"5:4582:34853":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"11:299:5850":{"crate_id":11,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"1:10356:3474":{"crate_id":1,"path":["std","sys","pal","unix","os","SplitPaths"],"kind":"struct"},"2:3207:118":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"2:40739:7350":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"1:12405:914":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"11:1920:5863":{"crate_id":11,"path":["hashbrown","set","Union"],"kind":"struct"},"2:9877:92":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"2:3699:14252":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"11:671:3003":{"crate_id":11,"path":["hashbrown","map","Iter"],"kind":"struct"},"1:6055:3061":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"6:6731:6754":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_umem_reg"],"kind":"struct"},"5:7794:8072":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"2:42578:3340":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"6:5025:6306":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"16:6608:206":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"2:23455:7136":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI16Inner"],"kind":"struct"},"2:44186:8121":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"2:41129:7370":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"6:7586:6965":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"18:515:4164":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"16:6970:5356":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"9:236:2999":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"17:15418:4924":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"17:13570:21899":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"17:15714:5008":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"2:22154:7097":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"2:46888:7575":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"14:40:4542":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"17:14299:4662":{"crate_id":17,"path":["object","macho","DyldSubCacheEntryV1"],"kind":"struct"},"6:538:5998":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"2:4453:8078":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"11:1900:5860":{"crate_id":11,"path":["hashbrown","set","Intersection"],"kind":"struct"},"6:5019:6303":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"16:6866:21824":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"17:14269:4653":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"2:23203:7111":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"16:5727:4317":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"2:4465:110":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"16:8546:5747":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"17:2437:7851":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"1:1097:8030":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"17:14886:4768":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"16:7969:5681":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"2:46976:7579":{"crate_id":2,"path":["core","core_arch","simd","m8x32"],"kind":"struct"},"17:15286:4818":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"17:15864:5046":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"2:39892:14254":{"crate_id":2,"path":["core","ops","coroutine","CoroutineState"],"kind":"enum"},"17:12976:4460":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"6:5366:6419":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"1:2645:2967":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"17:16385:5200":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"5:2182:8053":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMutKey"],"kind":"struct"},"2:2802:195":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"5:3097:7024":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"19:0:1306":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"16:7282:5584":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"11:1005:5620":{"crate_id":11,"path":["hashbrown","map","Entry"],"kind":"enum"},"17:13451:4494":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"16:6914:5517":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"2:43389:74":{"crate_id":2,"path":["core","fmt","rt","Argument"],"kind":"struct"},"17:11075:35385":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"11:364:35340":{"crate_id":11,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"1:766:154":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"2:821:3407":{"crate_id":2,"path":["core","num","nonzero","ZeroablePrimitive"],"kind":"trait"},"16:7907:5676":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"2:46311:7523":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"6:6765:6766":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_options"],"kind":"struct"},"1:4359:9065":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"2:40861:7357":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"18:613:35396":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"2:12995:3435":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"5:40:9016":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"2:44463:3451":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"11:830:8036":{"crate_id":11,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"16:2450:5321":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"1:3493:2962":{"crate_id":1,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"16:6713:7969":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"5:1533:3003":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"16:5348:5407":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"16:6984:5373":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"17:12409:22001":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"5:7590:7042":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"6:7431:6879":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"2:41637:7394":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"2:22034:9117":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"16:7462:7982":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"2:42759:88":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"2:40291:14351":{"crate_id":2,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"2:11757:3454":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"2:40966:2956":{"crate_id":2,"path":["core","ffi","c_str","Bytes"],"kind":"struct"},"17:16786:5301":{"crate_id":17,"path":["object","xcoff","StatAux"],"kind":"struct"},"17:10167:21883":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"6:7368:3605":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"17:16701:5279":{"crate_id":17,"path":["object","xcoff","CsectAux32"],"kind":"struct"},"6:5676:6567":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"1:9207:7733":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"2:43321:7426":{"crate_id":2,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"1:8531:2954":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"15:0:2761":{"crate_id":15,"path":["addr2line"],"kind":"module"},"1:10743:2976":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stdout"],"kind":"struct"},"17:13427:4492":{"crate_id":17,"path":["object","read","ObjectMapFile"],"kind":"struct"},"17:14405:4679":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"13:0:2753":{"crate_id":13,"path":["std_detect"],"kind":"module"},"6:6716:6752":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_ring_offset_v1"],"kind":"struct"},"17:10332:21888":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"17:10218:21884":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"1:1083:5620":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"17:14612:4710":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"17:11805:7881":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"17:12008:4255":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"16:6625:5496":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"6:5603:6531":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"6:8273:6993":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"17:15010:4795":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"6:5282:6392":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"5:3465:8051":{"crate_id":5,"path":["alloc","collections","btree","set","ExtractIf"],"kind":"struct"},"1:12399:747":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"5:7083:14304":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"17:10296:21887":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"2:43650:7446":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"2:47402:7620":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"6:7332:6844":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"6:6437:6614":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"16:6159:5422":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"6:7316:6832":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"16:5757:5413":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"6:1500:6033":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"1:8884:3003":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"17:12204:4382":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsection"],"kind":"struct"},"17:12260:22000":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCacheSlice"],"kind":"enum"},"6:8008:6975":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"2:2155:7052":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"17:16026:5087":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"16:7716:35375":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"2:23444:7135":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI8Inner"],"kind":"struct"},"2:44363:3455":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"18:608:7835":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"16:4267:5386":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"2:43102:2924":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"1:10534:26298":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Argv"],"kind":"struct"},"1:879:3003":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"17:13547:7938":{"crate_id":17,"path":["object","read","RelocationMap"],"kind":"struct"},"2:41627:7393":{"crate_id":2,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"1:12174:26805":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"16:6953:5520":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"2:32606:3323":{"crate_id":2,"path":["core","error","tags","Ref"],"kind":"struct"},"16:4902:5393":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"2:46361:7526":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"1:11446:3758":{"crate_id":1,"path":["std","sys","os_str","bytes","Buf"],"kind":"struct"},"16:3441:5378":{"crate_id":16,"path":["gimli","arch","LoongArch"],"kind":"struct"},"1:1972:2367":{"crate_id":1,"path":["std","error"],"kind":"module"},"5:6274:2931":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"17:11985:7888":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"1:2495:3572":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"6:5462:6478":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"2:42152:7400":{"crate_id":2,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"6:7986:6974":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"17:11421:7867":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"16:8165:5362":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"2:2936:3585":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"16:2772:5342":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"1:11846:8142":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"16:6440:21821":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"11:123:5849":{"crate_id":11,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"2:23289:7123":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"2:15:2710":{"crate_id":2,"path":["core","write"],"kind":"macro"},"6:7539:6943":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"1:7808:8457":{"crate_id":1,"path":["std","panicking","begin_panic_handler","StaticStrPayload"],"kind":"struct"},"1:3448:2371":{"crate_id":1,"path":["std","io","stdio","stderr"],"kind":"function"},"16:8043:35370":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"1:3400:2976":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"2:44205:2714":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"2:45051:7498":{"crate_id":2,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"6:7548:6946":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"2:21897:33490":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_elements_left","Rotate"],"kind":"struct"},"17:11606:4360":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"6:8308:7001":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"2:46194:7510":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"1:12406:895":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"16:2820:5344":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"1:8573:8179":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"16:8028:5683":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"17:11831:4344":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"16:2950:5350":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"2:42983:3046":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"2:12957:7458":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"6:5570:6519":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"6:5682:6570":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"2:36657:5640":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"1:6424:8153":{"crate_id":1,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"17:12776:7926":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"1:8819:3000":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"1:9251:9104":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"6:5551:6511":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"17:11026:35386":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"16:7259:5583":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"17:14796:4756":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"1:9236:9105":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"17:11653:4348":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"6:497:5969":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"2:23155:7106":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"2:7837:14500":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"2:3654:254":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"2:40807:3446":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"16:6837:7980":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"18:718:4194":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"2:2146:14553":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"6:5241:6369":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"2:32681:3090":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"1:8722:8182":{"crate_id":1,"path":["std","panic","PanicHookInfo"],"kind":"struct"},"17:13662:4514":{"crate_id":17,"path":["object","archive","AixHeader"],"kind":"struct"}},"external_crates":{"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":30}