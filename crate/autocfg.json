{"root":"0:0:2251","crate_version":"1.3.0","includes_private":false,"index":{"2:13291:2249":{"id":"2:13291:2249","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:82:2186":{"id":"0:82:2186","crate_id":0,"name":"emit_sysroot_crate","span":{"filename":"src/lib.rs","begin":[338,4],"end":[342,5]},"visibility":"public","docs":"Emits a config value `has_CRATE` if `probe_sysroot_crate` returns true.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["name",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13211:28520":{"id":"2:13211:28520","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:12355:1851"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:0:2251":{"id":"0:0:2251","crate_id":0,"name":"autocfg","span":{"filename":"src/lib.rs","begin":[1,0],"end":[535,1]},"visibility":"public","docs":"A Rust library for build scripts to automatically configure code based on\ncompiler support.  Code snippets are dynamically tested to see if the `rustc`\nwill accept them, rather than hard-coding specific version support.\n\n\n## Usage\n\nAdd this to your `Cargo.toml`:\n\n```toml\n[build-dependencies]\nautocfg = \"1\"\n```\n\nThen use it in your `build.rs` script to detect compiler features.  For\nexample, to test for 128-bit integer support, it might look like:\n\n```rust\nextern crate autocfg;\n\nfn main() {\n#   // Normally, cargo will set `OUT_DIR` for build scripts.\n#   std::env::set_var(\"OUT_DIR\", \"target\");\n    let ac = autocfg::new();\n    ac.emit_has_type(\"i128\");\n\n    // (optional) We don't need to rerun for anything external.\n    autocfg::rerun_path(\"build.rs\");\n}\n```\n\nIf the type test succeeds, this will write a `cargo:rustc-cfg=has_i128` line\nfor Cargo, which translates to Rust arguments `--cfg has_i128`.  Then in the\nrest of your Rust code, you can add `#[cfg(has_i128)]` conditions on code that\nshould only be used when the compiler supports it.\n\n## Caution\n\nMany of the probing methods of `AutoCfg` document the particular template they\nuse, **subject to change**. The inputs are not validated to make sure they are\nsemantically correct for their expected use, so it's _possible_ to escape and\ninject something unintended. However, such abuse is unsupported and will not\nbe considered when making changes to the templates.","links":{},"attrs":["#![deny(missing_debug_implementations)]","#![deny(missing_docs)]","#![allow(unknown_lints)]","#![allow(bare_trait_objects)]","#![allow(ellipsis_inclusive_range_patterns)]"],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:36-0:105:137","0:155:2046","0:63:686","0:64:2059","0:65:2065","0:66:1178"],"is_stripped":false}}},"2:13234:31928":{"id":"2:13234:31928","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EncodeUtf16","id":"2:44185:3099","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:74:2119":{"id":"0:74:2119","crate_id":0,"name":"emit_rustc_version","span":{"filename":"src/lib.rs","begin":[229,4],"end":[233,5]},"visibility":"public","docs":"Sets a `cfg` value of the form `rustc_major_minor`, like `rustc_1_29`,\nif the current `rustc` is at least that version.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["major",{"primitive":"usize"}],["minor",{"primitive":"usize"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13314:33436":{"id":"2:13314:33436","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12336:471","self::pattern":"2:12889:3098"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12895:3092","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13264:33425":{"id":"2:13264:33425","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"2:12889:3098","str::split":"2:13252:2243","prim@char":"1:12336:471","str::split_terminator":"2:13261:33424"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitTerminator","id":"2:43961:3122","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12895:3092","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12895:3092","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12910:3093","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5636:27991":{"id":"5:5636:27991","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"2:13326:27994"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7645:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:88:2207":{"id":"0:88:2207","crate_id":0,"name":"emit_trait_cfg","span":{"filename":"src/lib.rs","begin":[394,4],"end":[398,5]},"visibility":"public","docs":"Emits the given `cfg` value if `probe_trait` returns true.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["name",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["cfg",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:85:2198":{"id":"0:85:2198","crate_id":0,"name":"emit_path_cfg","span":{"filename":"src/lib.rs","begin":[366,4],"end":[370,5]},"visibility":"public","docs":"Emits the given `cfg` value if `probe_path` returns true.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["path",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["cfg",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13216:28518":{"id":"2:13216:28518","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10979:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10979:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:13323:28418":{"id":"2:13323:28418","crate_id":2,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"2:39902:14029","Self::is_ascii":"2:13322:27988"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:42001:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"AsciiChar","id":"2:39902:14029","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13221:33422":{"id":"2:13221:33422","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"1:12342:1721","crate::ops::IndexMut":"2:3423:8692","str::slice_unchecked":"2:13220:33421"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:13218:28519":{"id":"2:13218:28519","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10979:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10979:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:13202:33417":{"id":"2:13202:33417","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5632:34137":{"id":"5:5632:34137","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:7645:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7645:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:91:2216":{"id":"0:91:2216","crate_id":0,"name":"emit_type_cfg","span":{"filename":"src/lib.rs","begin":[422,4],"end":[426,5]},"visibility":"public","docs":"Emits the given `cfg` value if `probe_type` returns true.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["name",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["cfg",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:32292:2758-0:105:137":{"id":"a:2:32292:2758-0:105:137","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32292:2758","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:105:137","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:30:802":{"id":"0:30:802","crate_id":0,"name":"fmt","span":{"filename":"src/error.rs","begin":[30,4],"end":[41,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"2:10294:143","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"Result","id":"2:42134:226","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}},{"type":{"resolved_path":{"name":"fmt::Error","id":"2:43046:137","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:27:2371":{"id":"0:27:2371","crate_id":0,"name":"description","span":{"filename":"src/error.rs","begin":[15,4],"end":[17,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:83:2191":{"id":"0:83:2191","crate_id":0,"name":"probe_path","span":{"filename":"src/lib.rs","begin":[351,4],"end":[353,5]},"visibility":"public","docs":"Tests whether the given path can be used.\n\nThe test code is subject to change, but currently looks like:\n\n```ignore\npub use PATH;\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["path",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13212:28516":{"id":"2:13212:28516","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:42003:191"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:42001:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10979:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10979:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13228:7158":{"id":"2:13228:7158","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the previous character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:12336:471"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CharIndices","id":"2:43869:3106","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13225:28547":{"id":"2:13225:28547","crate_id":2,"name":"split_at_mut_checked","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that’s not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at_checked`] method.\n\n[`split_at_checked`]: str::split_at_checked\n\n# Examples\n\n```\n#![feature(split_at_checked)]\n\nlet mut s = \"Per Martin-Löf\".to_string();\nif let Some((first, last)) = s.split_at_mut_checked(3) {\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n\nassert_eq!(None, s.split_at_mut_checked(13));  // Inside “ö”\nassert_eq!(None, s.split_at_mut_checked(16));  // Beyond the string length\n```","links":{"str::split_at_checked":"2:13224:28546"},"attrs":["#[must_use]","#[unstable(feature = \"split_at_checked\", reason = \"new API\", issue =\n\"119128\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"2:42001:194","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2937-0:105:137":{"id":"b:2:2937-0:105:137","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2896:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2906:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:105:137","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2940:137","2:2941:1806"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13305:25804":{"id":"2:13305:25804","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns the substring after the prefix,\nwrapped in `Some`. Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12336:471","self::pattern":"2:12889:3098"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["prefix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42001:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12895:3092","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:65:2065":{"id":"0:65:2065","crate_id":0,"name":"rerun_env","span":{"filename":"src/lib.rs","begin":[122,0],"end":[124,1]},"visibility":"public","docs":"Writes a line telling Cargo to rerun the build script if the environment\nvariable `var` changes.\n\nThis looks like: `cargo:rerun-if-env-changed=VAR`\n\nThis requires at least cargo 0.21.0, corresponding to rustc 1.20.0.  Earlier\nversions of cargo will simply ignore the directive.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["var",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:64:2059":{"id":"0:64:2059","crate_id":0,"name":"rerun_path","span":{"filename":"src/lib.rs","begin":[111,0],"end":[113,1]},"visibility":"public","docs":"Writes a line telling Cargo to rerun the build script if `path` changes.\n\nThis looks like: `cargo:rerun-if-changed=PATH`\n\nThis requires at least cargo 0.7.0, corresponding to rustc 1.6.0.  Earlier\nversions of cargo will simply ignore the directive.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["path",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13200:997":{"id":"2:13200:997","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"1:12336:471"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13299:33433":{"id":"2:13299:33433","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"1:12336:471","self::pattern":"2:12889:3098"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12895:3092","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12895:3092","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"2:12915:3091","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13328:28422":{"id":"2:13328:28422","crate_id":2,"name":"trim_ascii_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\"\\r hello world\\u{3000}\\n \".trim_ascii_end(), \"\\r hello world\\u{3000}\");\nassert_eq!(\"  \".trim_ascii_end(), \"\");\nassert_eq!(\"\".trim_ascii_end(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:991:37921"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5633:34138":{"id":"5:5633:34138","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:304:2762","`String`":"5:7645:243"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:304:2762","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"5:7645:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13220:33421":{"id":"2:13220:33421","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"1:12342:1721","str::slice_mut_unchecked":"2:13221:33422","crate::ops::Index":"2:39547:8691"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:3180:3170-0:155:2046":{"id":"a:2:3180:3170-0:155:2046","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"2:3180:3170","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"AutoCfg","id":"0:155:2046","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:13229:6733":{"id":"2:13229:6733","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"2:43879:2624","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13252:2243":{"id":"2:13252:2243","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"2:12889:3098","`DoubleEndedIterator`":"2:8269:129","prim@char":"1:12336:471","str::split_whitespace":"2:13230:31863","str::rsplit":"2:13258:28551"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Split","id":"2:43893:2625","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12895:3092","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:81:2183":{"id":"0:81:2183","crate_id":0,"name":"probe_sysroot_crate","span":{"filename":"src/lib.rs","begin":[332,4],"end":[335,5]},"visibility":"public","docs":"Tests whether the given sysroot crate can be used.\n\nThe test code is subject to change, but currently looks like:\n\n```ignore\nextern crate CRATE as probe;\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["name",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:63:686":{"id":"0:63:686","crate_id":0,"name":"emit","span":{"filename":"src/lib.rs","begin":[101,0],"end":[103,1]},"visibility":"public","docs":"Writes a config flag for rustc on standard out.\n\nThis looks like: `cargo:rustc-cfg=CFG`\n\nCargo will use this in arguments to rustc, like `--cfg CFG`.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["cfg",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:84:2196":{"id":"0:84:2196","crate_id":0,"name":"emit_has_path","span":{"filename":"src/lib.rs","begin":[359,4],"end":[363,5]},"visibility":"public","docs":"Emits a config value `has_PATH` if `probe_path` returns true.\n\nAny non-identifier characters in the `path` will be replaced with\n`_` in the generated config value.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["path",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13203:33418":{"id":"2:13203:33418","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13298:33432":{"id":"2:13298:33432","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13258:28551":{"id":"2:13258:28551","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"2:12889:3098","`DoubleEndedIterator`":"2:8269:129","prim@char":"1:12336:471","str::split":"2:13252:2243"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplit","id":"2:43911:3119","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12895:3092","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12895:3092","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12910:3093","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13326:27994":{"id":"2:13326:27994","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13214:28517":{"id":"2:13214:28517","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:42003:191"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:42001:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10979:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10979:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5621:34135":{"id":"5:5621:34135","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7645:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["count",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7645:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12895:3092","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5635:27990":{"id":"5:5635:27990","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"2:13325:27993"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7645:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3764-0:105:137":{"id":"b:2:3764-0:105:137","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:32234:2757","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3762:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:105:137","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3766:1821"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13230:31863":{"id":"2:13230:31863","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"2:13231:31893"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitWhitespace","id":"2:44167:3102","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2936:1808":{"id":"2:2936:1808","crate_id":2,"name":"try_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Result","id":"2:42134:226","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"2:2906:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:42095:8662-0:155:2046":{"id":"a:2:42095:8662-0:155:2046","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:42095:8662","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"AutoCfg","id":"0:155:2046","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:2940:137":{"id":"2:2940:137","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Infallible","id":"2:32157:2690","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"2:13295:33430":{"id":"2:13295:33430","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13308:28559":{"id":"2:13308:28559","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12336:471","self::pattern":"2:12889:3098"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["suffix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42001:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12895:3092","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12895:3092","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12910:3093","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:32233:237-0:105:137":{"id":"a:2:32233:237-0:105:137","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:32233:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:105:137","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:2:32233:237-0:155:2046":{"id":"a:2:32233:237-0:155:2046","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:32233:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"AutoCfg","id":"0:155:2046","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"5:741:3060":{"id":"5:741:3060","crate_id":5,"name":"to_owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:3766:1821":{"id":"2:3766:1821","crate_id":2,"name":"type_id","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"TypeId","id":"2:39716:6907","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13329:28423":{"id":"2:13329:28423","crate_id":2,"name":"trim_ascii","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing ASCII whitespace\nremoved.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\"\\r hello world\\n \".trim_ascii(), \"hello world\");\nassert_eq!(\"  \".trim_ascii(), \"\");\nassert_eq!(\"\".trim_ascii(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:991:37921"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:86:2201":{"id":"0:86:2201","crate_id":0,"name":"probe_trait","span":{"filename":"src/lib.rs","begin":[379,4],"end":[381,5]},"visibility":"public","docs":"Tests whether the given trait can be used.\n\nThe test code is subject to change, but currently looks like:\n\n```ignore\npub trait Probe: TRAIT + Sized {}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["name",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:108:802":{"id":"0:108:802","crate_id":0,"name":"fmt","span":{"filename":"src/error.rs","begin":[9,9],"end":[9,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:10294:143","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:10275:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2926-0:155:2046":{"id":"b:2:2926-0:155:2046","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2899:144","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"AutoCfg","id":"0:155:2046","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2928:832"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:66:1178":{"id":"0:66:1178","crate_id":0,"name":"new","span":{"filename":"src/lib.rs","begin":[131,0],"end":[133,1]},"visibility":"public","docs":"Creates a new `AutoCfg` instance.\n\n# Panics\n\nPanics if `AutoCfg::new()` returns an error.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"AutoCfg","id":"0:155:2046","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2937-0:155:2046":{"id":"b:2:2937-0:155:2046","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2896:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2906:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"AutoCfg","id":"0:155:2046","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2940:137","2:2941:1806"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13255:28549":{"id":"2:13255:28549","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"1:12336:471","self::pattern":"2:12889:3098"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitInclusive","id":"2:12704:3101","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12895:3092","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13332:8654":{"id":"2:13332:8654","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"2:4958:8654"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDefault","id":"2:44201:3112","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:5:738-0:155:2046":{"id":"b:5:738-0:155:2046","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2665:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:734:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"AutoCfg","id":"0:155:2046","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:740:3059","5:741:3060","5:742:3061"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13261:33424":{"id":"2:13261:33424","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"2:12889:3098","str::split":"2:13252:2243","prim@char":"1:12336:471","`DoubleEndedIterator`":"2:8269:129","str::rsplit_terminator":"2:13264:33425"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitTerminator","id":"2:43943:3123","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12895:3092","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:42095:8662-0:105:137":{"id":"a:2:42095:8662-0:105:137","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:42095:8662","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:105:137","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"2:13288:33428":{"id":"2:13288:33428","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"2:12889:3098","`DoubleEndedIterator`":"2:8269:129","prim@char":"1:12336:471","str::match_indices":"2:13285:33427"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatchIndices","id":"2:44061:3116","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12895:3092","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12895:3092","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12910:3093","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5616":{"id":"5:5616","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["5:5617:34134","5:5618:14191","5:5621:34135","5:5624:34136","5:5632:34137","5:5633:34138","5:5634:2647","5:5635:27990","5:5636:27991"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:2651:2519":{"id":"2:2651:2519","crate_id":2,"name":"borrow","span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[rustc_diagnostic_item = \"noop_method_borrow\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:90:2214":{"id":"0:90:2214","crate_id":0,"name":"emit_has_type","span":{"filename":"src/lib.rs","begin":[415,4],"end":[419,5]},"visibility":"public","docs":"Emits a config value `has_TYPE` if `probe_type` returns true.\n\nAny non-identifier characters in the type `name` will be replaced with\n`_` in the generated config value.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["name",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:80:2090":{"id":"0:80:2090","crate_id":0,"name":"probe_raw","span":{"filename":"src/lib.rs","begin":[321,4],"end":[323,5]},"visibility":"public","docs":"Tests whether the given code can be compiled as a Rust library.\n\nThis will only return `Ok` if the compiler ran and exited successfully,\nper `ExitStatus::success()`.\nThe code is passed to the compiler exactly as-is, notably not even\nadding the [`#![no_std]`][Self::no_std] attribute like other probes.\n\nRaw probes are useful for testing functionality that's not yet covered\nby the rest of the `AutoCfg` API. For example, the following attribute\n**must** be used at the crate level, so it wouldn't work within the code\ntemplates used by other `probe_*` methods.\n\n```\n# extern crate autocfg;\n# // Normally, cargo will set `OUT_DIR` for build scripts.\n# std::env::set_var(\"OUT_DIR\", \"target\");\nlet ac = autocfg::new();\nassert!(ac.probe_raw(\"#![no_builtins]\").is_ok());\n```\n\nRust nightly features could be tested as well -- ideally including a\ncode sample to ensure the unstable feature still works as expected.\nFor example, `slice::group_by` was renamed to `chunk_by` when it was\nstabilized, even though the feature name was unchanged, so testing the\n`#![feature(..)]` alone wouldn't reveal that. For larger snippets,\n[`include_str!`] may be useful to load them from separate files.\n\n```\n# extern crate autocfg;\n# // Normally, cargo will set `OUT_DIR` for build scripts.\n# std::env::set_var(\"OUT_DIR\", \"target\");\nlet ac = autocfg::new();\nlet code = r#\"\n    #![feature(slice_group_by)]\n    pub fn probe(slice: &[i32]) -> impl Iterator<Item = &[i32]> {\n        slice.group_by(|a, b| a == b)\n    }\n\"#;\nif ac.probe_raw(code).is_ok() {\n    autocfg::emit(\"has_slice_group_by\");\n}\n```","links":{"Self::no_std":"0:71:1210","`include_str!`":"2:34:936"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["code",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:42134:226","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}},{"type":{"resolved_path":{"name":"Error","id":"0:105:137","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13311:33435":{"id":"2:13311:33435","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12336:471","self::pattern":"2:12889:3098"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12895:3092","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12895:3092","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12910:3093","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:26":{"id":"0:26","crate_id":0,"name":null,"span":{"filename":"src/error.rs","begin":[14,0],"end":[27,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["source","type_id","cause","provide","description"],"trait":{"name":"Error","id":"2:2985:137","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:105:137","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:27:2371","0:28:442"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13227:2229":{"id":"2:13227:2229","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:12336:471"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chars","id":"2:43863:3107","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13233:33423":{"id":"2:13233:33423","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\", suggestion =\n\"lines\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinesAny","id":"2:44157:3114","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13276:28557":{"id":"2:13276:28557","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42001:194","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12895:3092","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12895:3092","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12910:3093","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13297:33431":{"id":"2:13297:33431","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13208:28476":{"id":"2:13208:28476","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:12436:2384"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:67":{"id":"0:67","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[135,0],"end":[463,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"AutoCfg","id":"0:155:2046","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:68:1178","0:69:2076","0:71:1210","0:72:2111","0:73:2114","0:74:2119","0:80:2090","0:81:2183","0:82:2186","0:83:2191","0:84:2196","0:85:2198","0:86:2201","0:87:2205","0:88:2207","0:89:2210","0:90:2214","0:91:2216","0:92:2219","0:93:2222","0:94:2225","0:95:2228"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:165:802":{"id":"0:165:802","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[86,16],"end":[86,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:10294:143","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:10275:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:740:3059":{"id":"5:740:3059","crate_id":5,"name":"Owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"5:5617:34134":{"id":"5:5617:34134","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:304:2762","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"5:304:2762","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13273:28556":{"id":"2:13273:28556","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42001:194","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12895:3092","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13282:33426":{"id":"2:13282:33426","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"2:12889:3098","`DoubleEndedIterator`":"2:8269:129","prim@char":"1:12336:471","str::matches":"2:13279:2534"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatches","id":"2:44115:3118","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12895:3092","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12895:3092","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12910:3093","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2932-0:105:137":{"id":"b:2:2932-0:105:137","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2906:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2902:258","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:105:137","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2935:137","2:2936:1808"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13222:28542":{"id":"2:13222:28542","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_checked`](str::split_at_checked).\n\n# Examples\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_checked":"2:13224:28546","str::split_at_mut":"2:13223:28543"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:72:2111":{"id":"0:72:2111","crate_id":0,"name":"set_no_std","span":{"filename":"src/lib.rs","begin":[217,4],"end":[219,5]},"visibility":"public","docs":"Sets whether `AutoCfg` should use `#![no_std]` in its probes.\n\nSee also [`no_std`](#method.no_std).","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["no_std",{"primitive":"bool"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:29":{"id":"0:29","crate_id":0,"name":null,"span":{"filename":"src/error.rs","begin":[29,0],"end":[42,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Display","id":"2:10325:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:105:137","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:30:802"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:3764-0:155:2046":{"id":"b:2:3764-0:155:2046","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:32234:2757","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3762:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"AutoCfg","id":"0:155:2046","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3766:1821"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2652-0:105:137":{"id":"b:2:2652-0:105:137","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32234:2757","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2646:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:105:137","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2654:25789"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:32292:2758-0:155:2046":{"id":"a:2:32292:2758-0:155:2046","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32292:2758","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"AutoCfg","id":"0:155:2046","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:13223:28543":{"id":"2:13223:28543","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_mut_checked`](str::split_at_mut_checked).\n\n# Examples\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"2:13222:28542","str::split_at_mut_checked":"2:13225:28547"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:162":{"id":"0:162","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[86,9],"end":[86,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2665:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"AutoCfg","id":"0:155:2046","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:163:475"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13231:31893":{"id":"2:13231:31893","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"2:13230:31863"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitAsciiWhitespace","id":"2:44176:3100","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13244:2411":{"id":"2:13244:2411","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"2:42003:191","prim@char":"1:12336:471","self::pattern":"2:12889:3098"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42001:194","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12895:3092","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13327:28421":{"id":"2:13327:28421","crate_id":2,"name":"trim_ascii_start","span":null,"visibility":"public","docs":"Returns a string slice with leading ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\" \\t \\u{3000}hello world\\n\".trim_ascii_start(), \"\\u{3000}hello world\\n\");\nassert_eq!(\"  \".trim_ascii_start(), \"\");\nassert_eq!(\"\".trim_ascii_start(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:991:37921"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:89:2210":{"id":"0:89:2210","crate_id":0,"name":"probe_type","span":{"filename":"src/lib.rs","begin":[407,4],"end":[409,5]},"visibility":"public","docs":"Tests whether the given type can be used.\n\nThe test code is subject to change, but currently looks like:\n\n```ignore\npub type Probe = TYPE;\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["name",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5618:14191":{"id":"5:5618:14191","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7645:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["from",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7645:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12895:3092","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:5:5866-0:105:137":{"id":"b:5:5866-0:105:137","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"2:10325:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:32234:2757","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"ToString","id":"5:5864:251","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:105:137","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:5868:1781"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2649-0:155:2046":{"id":"b:2:2649-0:155:2046","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32234:2757","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2643:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"AutoCfg","id":"0:155:2046","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2651:2519"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13248:3002":{"id":"2:13248:3002","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"2:42003:191","prim@char":"1:12336:471","self::pattern":"2:12889:3098"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42001:194","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12895:3092","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12895:3092","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12910:3093","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:73:2114":{"id":"0:73:2114","crate_id":0,"name":"probe_rustc_version","span":{"filename":"src/lib.rs","begin":[223,4],"end":[225,5]},"visibility":"public","docs":"Tests whether the current `rustc` reports a version greater than\nor equal to \"`major`.`minor`\".","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["major",{"primitive":"usize"}],["minor",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13209:33420":{"id":"2:13209:33420","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:3145:247-0:105:137":{"id":"a:2:3145:247-0:105:137","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3145:247","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:105:137","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:2:42096:8778-0:105:137":{"id":"a:2:42096:8778-0:105:137","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:42096:8778","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:105:137","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"0:163:475":{"id":"0:163:475","crate_id":0,"name":"clone","span":{"filename":"src/lib.rs","begin":[86,9],"end":[86,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"AutoCfg","id":"0:155:2046","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13199":{"id":"2:13199","crate_id":2,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["2:13200:997","2:13201:2242","2:13202:33417","2:13203:33418","2:13205:33419","2:13208:28476","2:13209:33420","2:13210:336","2:13211:28520","2:13212:28516","2:13214:28517","2:13216:28518","2:13218:28519","2:13220:33421","2:13221:33422","2:13222:28542","2:13223:28543","2:13224:28546","2:13225:28547","2:13227:2229","2:13228:7158","2:13229:6733","2:13230:31863","2:13231:31893","2:13232:2410","2:13233:33423","2:13234:31928","2:13235:2240","2:13238:2412","2:13241:28558","2:13244:2411","2:13248:3002","2:13252:2243","2:13255:28549","2:13258:28551","2:13261:33424","2:13264:33425","2:13267:2415","2:13270:28554","2:13273:28556","2:13276:28557","2:13279:2534","2:13282:33426","2:13285:33427","2:13288:33428","2:13291:2249","2:13293:33429","2:13295:33430","2:13297:33431","2:13298:33432","2:13299:33433","2:13302:33434","2:13305:25804","2:13308:28559","2:13311:33435","2:13314:33436","2:13317:33437","2:13320:2420","2:13322:27988","2:13323:28418","2:13324:27992","2:13325:27993","2:13326:27994","2:13327:28421","2:13328:28422","2:13329:28423","2:13330:33438","2:13332:8654","2:13333:33439"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2922-0:105:137":{"id":"b:2:2922-0:105:137","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2899:144","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2896:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:105:137","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2925:2083"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13210:336":{"id":"2:13210:336","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"2:13211:28520","`u8`":"1:12355:1851"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13235:2240":{"id":"2:13235:2240","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"1:12336:471","self::pattern":"2:12889:3098"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12895:3092","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13320:2420":{"id":"2:13320:2420","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"2:12850:136","`FromStr`":"2:12849:2675"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:42134:226","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"FromStr","id":"2:12849:2675","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"2:12849:2675","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2652-0:155:2046":{"id":"b:2:2652-0:155:2046","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32234:2757","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2646:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"AutoCfg","id":"0:155:2046","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2654:25789"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13333:33439":{"id":"2:13333:33439","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"2:4955:33439"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeUnicode","id":"2:44210:3113","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:105:137":{"id":"0:105:137","crate_id":0,"name":"Error","span":{"filename":"src/error.rs","begin":[10,0],"end":[12,1]},"visibility":"public","docs":"A common error type for the `autocfg` crate.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["a:2:32233:237-0:105:137","a:2:42095:8662-0:105:137","a:2:3180:3170-0:105:137","a:2:3145:247-0:105:137","a:2:32292:2758-0:105:137","a:2:42096:8778-0:105:137","b:2:2922-0:105:137","b:2:2649-0:105:137","b:2:2937-0:105:137","b:2:2926-0:105:137","b:2:3764-0:105:137","b:2:2652-0:105:137","b:2:2932-0:105:137","b:5:5866-0:105:137","0:26","0:29","0:107"]}}},"2:2935:137":{"id":"2:2935:137","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"2:2906:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}}},"0:164":{"id":"0:164","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[86,16],"end":[86,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10320:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"AutoCfg","id":"0:155:2046","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:165:802"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13293:33429":{"id":"2:13293:33429","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:28:442":{"id":"0:28:442","crate_id":0,"name":"cause","span":{"filename":"src/error.rs","begin":[19,4],"end":[26,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:42001:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"dyn_trait":{"traits":[{"trait":{"name":"error::Error","id":"2:2985:137","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]}],"lifetime":null}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2932-0:155:2046":{"id":"b:2:2932-0:155:2046","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2906:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2902:258","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"AutoCfg","id":"0:155:2046","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2935:137","2:2936:1808"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:2925:2083":{"id":"2:2925:2083","crate_id":2,"name":"into","span":null,"visibility":"default","docs":"Calls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of\n<code>[From]&lt;T&gt; for U</code> chooses to do.","links":{"From":"2:2899:144"},"attrs":["#[track_caller]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"U"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2654:25789":{"id":"2:2654:25789","crate_id":2,"name":"borrow_mut","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13317:33437":{"id":"2:13317:33437","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12336:471","self::pattern":"2:12889:3098"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12895:3092","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12895:3092","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12910:3093","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13324:27992":{"id":"2:13324:27992","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:742:3061":{"id":"5:742:3061","crate_id":5,"name":"clone_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["target",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5868:1781":{"id":"5:5868:1781","crate_id":5,"name":"to_string","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7645:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:93:2222":{"id":"0:93:2222","crate_id":0,"name":"emit_expression_cfg","span":{"filename":"src/lib.rs","begin":[440,4],"end":[444,5]},"visibility":"public","docs":"Emits the given `cfg` value if `probe_expression` returns true.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["expr",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["cfg",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13201:2242":{"id":"2:13201:2242","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2922-0:155:2046":{"id":"b:2:2922-0:155:2046","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2899:144","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2896:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"AutoCfg","id":"0:155:2046","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2925:2083"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13232:2410":{"id":"2:13232:2410","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nNote that any carriage return (`\\r`) not immediately followed by a\nline feed (`\\n`) does not split a line. These carriage returns are\nthereby included in the produced lines.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\r\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\n// Trailing carriage return is included in the last line\nassert_eq!(Some(\"baz\\r\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line does not require any ending:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Lines","id":"2:44147:2621","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13330:33438":{"id":"2:13330:33438","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"2:4957:33438"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDebug","id":"2:44192:3111","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:36-0:105:137":{"id":"0:36-0:105:137","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[74,0],"end":[74,21]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"error::Error","name":"Error","id":"0:105:137","glob":false}}},"2:2941:1806":{"id":"2:2941:1806","crate_id":2,"name":"try_from","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["value",{"generic":"U"}]],"output":{"resolved_path":{"name":"Result","id":"2:42134:226","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"T"},"trait":{"name":"TryFrom","id":"2:2906:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13224:28546":{"id":"2:13224:28546","crate_id":2,"name":"split_at_checked","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that’s not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut_checked`]\nmethod.\n\n[`split_at_mut_checked`]: str::split_at_mut_checked\n\n# Examples\n\n```\n#![feature(split_at_checked)]\n\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at_checked(3).unwrap();\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n\nassert_eq!(None, s.split_at_checked(13));  // Inside “ö”\nassert_eq!(None, s.split_at_checked(16));  // Beyond the string length\n```","links":{"str::split_at_mut_checked":"2:13225:28547"},"attrs":["#[must_use]","#[unstable(feature = \"split_at_checked\", reason = \"new API\", issue =\n\"119128\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"2:42001:194","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13279:2534":{"id":"2:13279:2534","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::rmatches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"2:12889:3098","`DoubleEndedIterator`":"2:8269:129","prim@char":"1:12336:471","str::rmatches":"2:13282:33426"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Matches","id":"2:44097:3117","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12895:3092","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13322:27988":{"id":"2:13322:27988","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5624:34136":{"id":"5:5624:34136","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7645:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7645:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:69:2076":{"id":"0:69:2076","crate_id":0,"name":"with_dir","span":{"filename":"src/lib.rs","begin":[159,4],"end":[192,5]},"visibility":"public","docs":"Creates a new `AutoCfg` instance with the specified output directory.\n\n# Common errors\n\n- `rustc` can't be executed, from `RUSTC` or in the `PATH`.\n- The version output from `rustc` can't be parsed.\n- `dir` is not a writable directory.\n","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["dir",{"generic":"T"}]],"output":{"resolved_path":{"name":"Result","id":"2:42134:226","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}},{"type":{"resolved_path":{"name":"Error","id":"0:105:137","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2896:163","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"PathBuf","id":"1:5326:204","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13205:33419":{"id":"2:13205:33419","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nIf `index` is greater than the length of the string, this returns the length of the string.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"2:13203:33418"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2926-0:105:137":{"id":"b:2:2926-0:105:137","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2899:144","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:105:137","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2928:832"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:71:1210":{"id":"0:71:1210","crate_id":0,"name":"no_std","span":{"filename":"src/lib.rs","begin":[210,4],"end":[212,5]},"visibility":"public","docs":"Returns whether `AutoCfg` is using `#![no_std]` in its probes.\n\nThis is automatically detected during construction -- if an empty probe\nfails while one with `#![no_std]` succeeds, then the attribute will be\nused for all further probes. This is usually only necessary when the\n`TARGET` lacks `std` altogether. If neither succeeds, `no_std` is not\nset, but that `AutoCfg` will probably only work for version checks.\n\nThis attribute changes the implicit [prelude] from `std` to `core`,\nwhich may affect the paths you need to use in other probes. It also\nrestricts some types that otherwise get additional methods in `std`,\nlike floating-point trigonometry and slice sorting.\n\nSee also [`set_no_std`](#method.set_no_std).\n\n[prelude]: https://doc.rust-lang.org/reference/names/preludes.html#the-no_std-attribute","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2928:832":{"id":"2:2928:832","crate_id":2,"name":"from","span":null,"visibility":"default","docs":"Returns the argument unchanged.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["t",{"generic":"T"}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:107":{"id":"0:107","crate_id":0,"name":null,"span":{"filename":"src/error.rs","begin":[9,9],"end":[9,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10320:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:105:137","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:108:802"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13267:2415":{"id":"2:13267:2415","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"1:12336:471","self::pattern":"2:12889:3098","str::rsplitn":"2:13270:28554"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitN","id":"2:43997:3121","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12895:3092","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13238:2412":{"id":"2:13238:2412","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, in which case this function will return true if\nthe `&str` is a prefix of this string slice.\n\nThe [pattern] can also be a [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\nThese will only be checked against the first character of this string slice.\nLook at the second example below regarding behavior for slices of [`char`]s.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```\n\n```\nlet bananas = \"bananas\";\n\n// Note that both of these assert successfully.\nassert!(bananas.starts_with(&['b', 'a', 'n', 'a']));\nassert!(bananas.starts_with(&['a', 'b', 'c', 'd']));\n```","links":{"prim@char":"1:12336:471","self::pattern":"2:12889:3098"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12895:3092","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:155:2046":{"id":"0:155:2046","crate_id":0,"name":"AutoCfg","span":{"filename":"src/lib.rs","begin":[87,0],"end":[94,1]},"visibility":"public","docs":"Helper to detect compiler features for `cfg` output in build scripts.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["0:67","a:2:32233:237-0:155:2046","a:2:42095:8662-0:155:2046","a:2:3180:3170-0:155:2046","a:2:3145:247-0:155:2046","a:2:32292:2758-0:155:2046","a:2:42096:8778-0:155:2046","b:2:2922-0:155:2046","b:2:2649-0:155:2046","b:2:2937-0:155:2046","b:2:2926-0:155:2046","b:2:3764-0:155:2046","b:2:2652-0:155:2046","b:2:2932-0:155:2046","b:5:738-0:155:2046","0:162","0:164"]}}},"2:13241:28558":{"id":"2:13241:28558","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"1:12336:471","self::pattern":"2:12889:3098"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12895:3092","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12895:3092","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12910:3093","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13302:33434":{"id":"2:13302:33434","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12336:471","self::pattern":"2:12889:3098"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12895:3092","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13285:33427":{"id":"2:13285:33427","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"2:12889:3098","`DoubleEndedIterator`":"2:8269:129","prim@char":"1:12336:471","str::rmatch_indices":"2:13288:33428"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"MatchIndices","id":"2:44043:3115","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12895:3092","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5634:2647":{"id":"5:5634:2647","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7645:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7645:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:94:2225":{"id":"0:94:2225","crate_id":0,"name":"probe_constant","span":{"filename":"src/lib.rs","begin":[453,4],"end":[455,5]},"visibility":"public","docs":"Tests whether the given constant expression can be used.\n\nThe test code is subject to change, but currently looks like:\n\n```ignore\npub const PROBE: () = ((), EXPR).0;\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["expr",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:68:1178":{"id":"0:68:1178","crate_id":0,"name":"new","span":{"filename":"src/lib.rs","begin":[144,4],"end":[149,5]},"visibility":"public","docs":"Creates a new `AutoCfg` instance.\n\n# Common errors\n\n- `rustc` can't be executed, from `RUSTC` or in the `PATH`.\n- The version output from `rustc` can't be parsed.\n- `OUT_DIR` is not set in the environment, or is not a writable directory.\n","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"Result","id":"2:42134:226","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}},{"type":{"resolved_path":{"name":"Error","id":"0:105:137","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:3180:3170-0:105:137":{"id":"a:2:3180:3170-0:105:137","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"2:3180:3170","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:105:137","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2649-0:105:137":{"id":"b:2:2649-0:105:137","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32234:2757","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2643:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:105:137","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2651:2519"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13270:28554":{"id":"2:13270:28554","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"1:12336:471","str::splitn":"2:13267:2415","self::pattern":"2:12889:3098"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitN","id":"2:44015:3120","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12895:3092","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12895:3092","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12910:3093","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13325:27993":{"id":"2:13325:27993","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:92:2219":{"id":"0:92:2219","crate_id":0,"name":"probe_expression","span":{"filename":"src/lib.rs","begin":[435,4],"end":[437,5]},"visibility":"public","docs":"Tests whether the given expression can be used.\n\nThe test code is subject to change, but currently looks like:\n\n```ignore\npub fn probe() { let _ = EXPR; }\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["expr",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:95:2228":{"id":"0:95:2228","crate_id":0,"name":"emit_constant_cfg","span":{"filename":"src/lib.rs","begin":[458,4],"end":[462,5]},"visibility":"public","docs":"Emits the given `cfg` value if `probe_constant` returns true.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["expr",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["cfg",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:87:2205":{"id":"0:87:2205","crate_id":0,"name":"emit_has_trait","span":{"filename":"src/lib.rs","begin":[387,4],"end":[391,5]},"visibility":"public","docs":"Emits a config value `has_TRAIT` if `probe_trait` returns true.\n\nAny non-identifier characters in the trait `name` will be replaced with\n`_` in the generated config value.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["name",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:3145:247-0:155:2046":{"id":"a:2:3145:247-0:155:2046","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3145:247","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"AutoCfg","id":"0:155:2046","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:2:42096:8778-0:155:2046":{"id":"a:2:42096:8778-0:155:2046","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:42096:8778","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"AutoCfg","id":"0:155:2046","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}}},"paths":{"1:10416:2692":{"crate_id":1,"path":["std","sys","pal","unix","pipe","AnonPipe"],"kind":"struct"},"11:687:3179":{"crate_id":11,"path":["hashbrown","map","IterMut"],"kind":"struct"},"17:13785:4315":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"2:40816:7067":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"2:22421:8878":{"crate_id":2,"path":["core","core_simd","simd","num","int","SimdInt"],"kind":"trait"},"5:7727:7740":{"crate_id":5,"path":["alloc","vec","extract_if","ExtractIf"],"kind":"struct"},"1:7983:3251":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"1:11694:7461":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"18:754:3868":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"1:6173:7351":{"crate_id":1,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"17:12949:4088":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"6:517:5673":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"6:8006:6662":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"6:5219:6046":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"1:3897:7832":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"16:6066:5108":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"1:11843:7833":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"16:7888:5350":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"2:47135:7316":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"11:102:5535":{"crate_id":11,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"2:32976:5277":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"17:11256:4003":{"crate_id":17,"path":["object","read","coff","import","ImportFile"],"kind":"struct"},"2:23170:6826":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI32Inner"],"kind":"struct"},"17:12707:7625":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"6:5344:6101":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_resp"],"kind":"struct"},"6:5588:6213":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"16:6342:35000":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"6:5002:5984":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"16:6948:5013":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"11:351:34966":{"crate_id":11,"path":["hashbrown","raw","FullBucketsIndices"],"kind":"struct"},"16:8216:5400":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"6:5031:5998":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"1:8606:8743":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"17:12238:7611":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"2:46202:7233":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"1:12353:903":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"15:0:2429":{"crate_id":15,"path":["addr2line"],"kind":"module"},"2:3601:13996":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"1:11508:30564":{"crate_id":1,"path":["std","sys","sync","once","futex","CompletionGuard"],"kind":"struct"},"6:8259:6678":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"2:46859:7304":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"2:2735:195":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"17:14449:4439":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"17:13252:4191":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"16:7813:5338":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"17:14038:4352":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"2:46782:7303":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"17:11537:7576":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"6:5390:6122":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"6:6524:6340":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"1:11583:7896":{"crate_id":1,"path":["std","sys","thread_local","fast_local","Key"],"kind":"struct"},"6:485:5651":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"1:9291:25843":{"crate_id":1,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"2:10327:2584":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"2:21726:3251":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"16:6504:5162":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"2:40754:7061":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"2:4786:14006":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"2:32217:2989":{"crate_id":2,"path":["core","error","tags","Ref"],"kind":"struct"},"2:42301:86":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"16:7355:5304":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"1:8874:2673":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"1:7718:30448":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"2:33188:14200":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"2:4002:3006":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"17:11142:4013":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"5:1168:33348":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"6:6763:6453":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_options"],"kind":"struct"},"17:12494:4112":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"2:47036:7309":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"2:2529:672":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"17:15039:4630":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"11:787:5546":{"crate_id":11,"path":["hashbrown","map","Values"],"kind":"struct"},"1:9405:234":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"1:4094:8714":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"2:13930:8677":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"1:9388:187":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"2:47199:7326":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"16:3669:3876":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"1:1997:3063":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"1:9260:2718":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"17:12371:4143":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"17:15301:4694":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"6:5489:6179":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_128"],"kind":"struct"},"1:3056:226":{"crate_id":1,"path":["std","io","error","Result"],"kind":"type_alias"},"5:3297:33307":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"11:1917:5549":{"crate_id":11,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"2:41963:7105":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"2:41014:7076":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"17:11621:4023":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"2:43029:2581":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"1:1855:3131":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"2:2890:77":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"5:1493:3179":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"2:10320:119":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"1:8244:7856":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"1:6843:2731":{"crate_id":1,"path":["std","sync","reentrant_lock","ReentrantLock"],"kind":"struct"},"2:44342:7160":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"16:4062:5036":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"16:8155:5397":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"10:36:5561":{"crate_id":10,"path":["adler","algo","U32X4"],"kind":"struct"},"16:5756:7629":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"16:6494:5161":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"2:12889:3098":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"17:11853:7597":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"1:6708:2730":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"11:1051:7720":{"crate_id":11,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"16:3475:5029":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"5:2539:6715":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"1:12358:1845":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"2:2089:6741":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"14:187:20578":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"6:6756:6452":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_statistics_v1"],"kind":"struct"},"1:8199:3247":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"1:1625:5548":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"14:220:5486":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"17:11524:7575":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"6:5290:6084":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"17:14025:4350":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"5:2210:8640":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"1:8857:2671":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"1:9239:8783":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"16:7580:5329":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"17:13832:4321":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"17:9916:21567":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"17:15616:4796":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"17:10710:7550":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"1:865:2671":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"17:11595:4021":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"2:46266:7237":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"2:41941:7402":{"crate_id":2,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"16:5914:5087":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"1:10933:7440":{"crate_id":1,"path":["std","sys","pal","unix","fs","FilePermissions"],"kind":"struct"},"16:2612:4990":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"2:40662:7797":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"6:5174:6024":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"6:6491:6327":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"6:6460:6306":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"17:14575:4106":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"1:3291:27912":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"2:46705:7270":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"1:1916:3147":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"17:11812:7592":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"1:10952:139":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileType"],"kind":"struct"},"17:16235:4952":{"crate_id":17,"path":["object","xcoff","DwarfAux32"],"kind":"struct"},"16:6606:5175":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"5:2220:6705":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"1:4914:8729":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"16:7006:7668":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"2:43021:73":{"crate_id":2,"path":["core","fmt","rt","Argument"],"kind":"struct"},"16:6940:5238":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"1:5766:2685":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"1:7920:30605":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"17:15931:4173":{"crate_id":17,"path":["object","xcoff","FileHeader32"],"kind":"struct"},"6:7575:6649":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"5:1559:7710":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"17:15678:4818":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"18:521:25758":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"11:2548:5554":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"6:6657:6416":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"17:11392:7570":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"17:13173:4172":{"crate_id":17,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"2:746:3073":{"crate_id":2,"path":["core","num","nonzero","ZeroablePrimitive"],"kind":"trait"},"2:45945:7211":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"6:8328:6693":{"crate_id":6,"path":["libc","unix","linux_like","linux","canxl_frame"],"kind":"struct"},"17:11567:7578":{"crate_id":17,"path":["object","read","elf","note","GnuProperty"],"kind":"struct"},"16:2528:4986":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"17:15010:4622":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"5:3674:3179":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"17:10534:35008":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"2:2902:258":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"5:1590:7739":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"1:2535:2036":{"crate_id":1,"path":["std","io"],"kind":"module"},"0:66:1178":{"crate_id":0,"path":["autocfg","new"],"kind":"function"},"17:12213:7609":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"6:4985:5974":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"16:7648:7699":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"2:41248:7082":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"5:5470:3097":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"2:42980:7124":{"crate_id":2,"path":["core","fmt","rt","Count"],"kind":"enum"},"17:14284:4407":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"17:15799:4844":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"17:15769:4839":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"1:4130:8715":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"17:12621:4118":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbol"],"kind":"struct"},"2:22915:6801":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"1:9197:7424":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"17:16079:4914":{"crate_id":17,"path":["object","xcoff","Symbol32"],"kind":"struct"},"17:11493:7572":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"6:1580:5770":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"2:5260:2652":{"crate_id":2,"path":["core","io","borrowed_buf","BorrowedBuf"],"kind":"struct"},"5:2302:33294":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"17:9781:21564":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"1:5948:2715":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"5:5934:7726":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"6:5083:6017":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"6:5677:6257":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"17:12508:4115":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"2:21746:6786":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"2:22511:14221":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_exposed_provenance"],"kind":"function"},"16:3925:5035":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"17:13412:4223":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"17:11016:7554":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"16:6456:21502":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"17:11051:7556":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"2:47150:7317":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"11:1066:20564":{"crate_id":11,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"6:0:1002":{"crate_id":6,"path":["libc"],"kind":"module"},"2:22285:8793":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"1:8172:3248":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"1:8088:3151":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"5:7415:7759":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"17:11405:7571":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"1:9464:7431":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"6:4965:5963":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"2:44900:7813":{"crate_id":2,"path":["core","task","wake","ContextBuilder"],"kind":"struct"},"16:5960:5095":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"5:7132:34562":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"7:32:20469":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"17:15214:4671":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"2:47214:7327":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"6:7485:6590":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"17:11674:4028":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"1:11311:7447":{"crate_id":1,"path":["std","sys","personality","dwarf","eh","EHContext"],"kind":"struct"},"17:13387:4218":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"6:6900:6496":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"6:4916:5945":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"1:5593:2682":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"17:11242:7564":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"1:5506:128":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"17:11647:4026":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"6:1686:5841":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"2:44937:5559":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"1:12336:471":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"2:21624:32526":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"6:1547:5748":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"17:11115:7560":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"6:5052:6007":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"17:11605:2043":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"2:41238:7081":{"crate_id":2,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"16:6560:5006":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"17:11324:7565":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"5:3258:5548":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"2:46041:7217":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"17:15368:4713":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"18:718:3860":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"2:32157:2690":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"1:9174:3006":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"17:12768:21551":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"16:7590:5019":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"17:10877:7552":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"16:5802:21497":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"16:4718:5046":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"2:40825:7068":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"2:30622:6832":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"1:6789:2725":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"5:4848:802":{"crate_id":5,"path":["alloc","fmt"],"kind":"module"},"2:8183:14183":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"17:11293:21601":{"crate_id":17,"path":["object","read","coff","import","ImportType"],"kind":"enum"},"1:11911:26005":{"crate_id":1,"path":["std","panicking","panic_count","MustAbort"],"kind":"enum"},"2:42095:8662":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"1:8260:2639":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"1:10599:2687":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","CommandArgs"],"kind":"struct"},"17:15168:4660":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"17:15624:4797":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"1:10350:7881":{"crate_id":1,"path":["std","sys","pal","unix","os","EnvStrDebug"],"kind":"struct"},"5:3292:5547":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"11:2443:7726":{"crate_id":11,"path":["hashbrown","table","Drain"],"kind":"struct"},"2:47176:7319":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"17:13146:4164":{"crate_id":17,"path":["object","archive","AixFileHeader"],"kind":"struct"},"17:403:7533":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"2:7939:2649":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"1:10222:7101":{"crate_id":1,"path":["std","sys","pal","unix","net","Socket"],"kind":"struct"},"1:4202:8720":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"17:14311:4409":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"2:42992:5365":{"crate_id":2,"path":["core","fmt","rt","Flag"],"kind":"enum"},"17:10622:35002":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"6:5046:6005":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"1:9113:199":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"0:63:686":{"crate_id":0,"path":["autocfg","emit"],"kind":"function"},"1:10959:7443":{"crate_id":1,"path":["std","sys","pal","unix","fs","Mode"],"kind":"struct"},"6:7467:6579":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"1:11663:7458":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"17:16105:4920":{"crate_id":17,"path":["object","xcoff","FileAux32"],"kind":"struct"},"16:7132:5266":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"2:2893:76":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"17:15655:4805":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"17:15445:4732":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"2:32324:114":{"crate_id":2,"path":["core","marker","ConstParamTy"],"kind":"trait"},"9:330:5600":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"1:3432:2037":{"crate_id":1,"path":["std","io","stdio","stderr"],"kind":"function"},"17:13844:4323":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"6:7429:6566":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"6:6874:6481":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"2:5028:14016":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"1:974:7717":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"1:9721:28173":{"crate_id":1,"path":["std","sys","pal","unix","fs","Dir"],"kind":"struct"},"16:6026:5104":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"1:669:7821":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"17:15266:4685":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"2:23192:6828":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI128Inner"],"kind":"struct"},"2:40772:7063":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"1:878:3179":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"5:1540:5546":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"16:7549:5327":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"17:11026:21583":{"crate_id":17,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"2:32235:244":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"16:7857:5346":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"17:11702:4030":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsectionIterator"],"kind":"struct"},"2:42496:95":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"2:23082:6818":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU8Inner"],"kind":"struct"},"9:53:20501":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"16:6976:5240":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"5:304:2762":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"2:3388:140":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"6:7359:6543":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"11:774:5545":{"crate_id":11,"path":["hashbrown","map","Keys"],"kind":"struct"},"2:43046:137":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"2:40865:7072":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"16:3899:5034":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"16:5781:5008":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"17:15992:4899":{"crate_id":17,"path":["object","xcoff","AuxHeader64"],"kind":"struct"},"2:32764:5280":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"9:424:20485":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"6:4959:5961":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"1:7870:3972":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"6:7546:6633":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"14:202:13965":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"1:8555:7866":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"5:939:8676":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"1:8543:2621":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"6:1526:5733":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"17:15748:4833":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"11:2151:7720":{"crate_id":11,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"1:2699:2636":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"11:1160:7724":{"crate_id":11,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"2:43791:6780":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"17:14847:4568":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"1:5438:203":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"17:12530:7618":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSectionIterator"],"kind":"struct"},"2:6713:6757":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"2:22125:3251":{"crate_id":2,"path":["core","core_simd","to_bytes","sealed","Sealed"],"kind":"trait"},"5:1369:7724":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"1:3294:27913":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"6:5477:6176":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"2:4538:6746":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"17:13959:4341":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"1:1968:3062":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"1:7880:7900":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"1:922:7726":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"2:47007:7308":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"1:3999:7833":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"1:5834:7351":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"11:2469:7740":{"crate_id":11,"path":["hashbrown","table","ExtractIf"],"kind":"struct"},"5:7435:33261":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"2:44275:13963":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"6:8253:6677":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"6:5617:6232":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"6:8265:6679":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"2:46070:7219":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"2:32203:5321":{"crate_id":2,"path":["core","error","tags","Value"],"kind":"struct"},"1:9332:7427":{"crate_id":1,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"16:7755:5012":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"1:12361:1912":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"16:7727:5021":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"1:938:7725":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"2:40539:2561":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"1:4916:8731":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"17:13363:4214":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"2:21609:32517":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_elements_right","Rotate"],"kind":"struct"},"6:7330:6531":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"2:32199:7794":{"crate_id":2,"path":["core","error","private","Internal"],"kind":"struct"},"17:10170:3976":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"2:3150:2993":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"12:0:2427":{"crate_id":12,"path":["rustc_std_workspace_alloc"],"kind":"module"},"2:44910:180":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"5:7634:7760":{"crate_id":5,"path":["alloc","rc","UniqueRc"],"kind":"struct"},"1:10971:2619":{"crate_id":1,"path":["std","sys","pal","unix","io","IoSlice"],"kind":"struct"},"6:4787:5859":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"16:6120:21500":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"11:434:34971":{"crate_id":11,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"1:4685:8745":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"2:42418:94":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"1:9410:235":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"17:15473:4740":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"2:44115:3118":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"2:22966:31910":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"2:40577:2624":{"crate_id":2,"path":["core","ffi","c_str","Bytes"],"kind":"struct"},"17:14356:4418":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"1:6364:30567":{"crate_id":1,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"17:15608:4793":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"2:22775:6789":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"2:42134:226":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"1:8704:8774":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"1:3894:7831":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"17:12695:7624":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegment"],"kind":"struct"},"6:4942:5955":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"17:14325:4412":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"2:46350:7241":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"1:4995:8728":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"17:13235:4188":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"6:1621:5802":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"17:12443:4108":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"2:44643:7183":{"crate_id":2,"path":["core","time","Nanoseconds"],"kind":"struct"},"17:15569:4778":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"17:11443:4018":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"17:15635:4802":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"1:6857:2732":{"crate_id":1,"path":["std","sync","reentrant_lock","ReentrantLockGuard"],"kind":"struct"},"2:2699:201":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"1:10989:30196":{"crate_id":1,"path":["std","sys","pal","unix","kernel_copy","SpliceMode"],"kind":"enum"},"17:13325:4208":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"13:0:2421":{"crate_id":13,"path":["std_detect"],"kind":"module"},"11:1923:5550":{"crate_id":11,"path":["hashbrown","set","Union"],"kind":"struct"},"17:10997:3994":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"2:43943:3123":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"2:2896:163":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"6:5200:6038":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"2:12963:13957":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"17:13015:4106":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"17:11313:4010":{"crate_id":17,"path":["object","read","coff","import","ImportObjectData"],"kind":"struct"},"6:5181:6026":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"6:5039:6003":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"2:12895:3092":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"1:2735:2627":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"6:6379:6261":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"17:10887:35004":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"11:1603:7728":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"1:9365:7430":{"crate_id":1,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"11:123:5536":{"crate_id":11,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"6:6788:6462":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"17:14868:4578":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"1:11040:2689":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","ExitCode"],"kind":"struct"},"2:2545:14222":{"crate_id":2,"path":["core","ptr","with_exposed_provenance_mut"],"kind":"function"},"17:15434:4728":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"17:9737:21548":{"crate_id":17,"path":["object","common","SubArchitecture"],"kind":"enum"},"5:7493:3006":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"17:16212:4947":{"crate_id":17,"path":["object","xcoff","BlockAux64"],"kind":"struct"},"2:21728:8791":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"2:43879:2624":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"6:4924:5947":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"2:44061:3116":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"6:7306:6514":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"5:6968:13983":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstDataSrcBufDrop"],"kind":"struct"},"1:12362:1419":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"17:15333:4702":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"16:867:7531":{"crate_id":16,"path":["gimli","read","endian_slice","DebugByte"],"kind":"struct"},"17:11764:4039":{"crate_id":17,"path":["object","read","elf","attributes","AttributeReader"],"kind":"struct"},"2:44868:7811":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"2:9793:91":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"17:15734:4826":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"17:12929:4143":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"17:13723:4299":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"6:5636:6241":{"crate_id":6,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"16:6480:5005":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"2:12627:7144":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"4:0:2422":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"16:3810:5032":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"2:3221:13928":{"crate_id":2,"path":["core","ops","async_function","AsyncFnMut"],"kind":"trait"},"1:12287:7903":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"18:0:2432":{"crate_id":18,"path":["memchr"],"kind":"module"},"2:3145:247":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"2:47229:7328":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"17:11128:3965":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"17:14587:4456":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"2:32293:3174":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"16:4502:5040":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"16:6231:5139":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"2:2665:112":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"1:2461:2084":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"2:6908:6764":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindowsInner"],"kind":"struct"},"6:523:5676":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"6:6775:6455":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","iocb"],"kind":"struct"},"17:11467:4020":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"17:13538:4250":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"6:7446:6571":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"1:4324:8740":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"6:1707:5849":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"17:10769:35003":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"1:9393:2719":{"crate_id":1,"path":["std","sync","mutex","MappedMutexGuard"],"kind":"struct"},"2:43235:7128":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"2:42576:97":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"17:11075:3997":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"1:11246:3253":{"crate_id":1,"path":["std","sys","pal","unix","time","SystemTime"],"kind":"struct"},"11:1891:7726":{"crate_id":11,"path":["hashbrown","set","Drain"],"kind":"struct"},"2:44167:3102":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"2:22483:3251":{"crate_id":2,"path":["core","core_simd","simd","num","sealed","Sealed"],"kind":"trait"},"2:23159:6825":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI16Inner"],"kind":"struct"},"16:4424:5038":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"17:9807:21554":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"1:11899:7463":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"5:6934:13981":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"2:44176:3100":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"2:1964:671":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"6:4824:5886":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"2:45860:7202":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"16:2788:4998":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"17:10044:21570":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"2:43243:7129":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"2:7716:31459":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"2:4660:7769":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"11:710:7710":{"crate_id":11,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"17:11773:4122":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"14:7:7705":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"1:8626:7404":{"crate_id":1,"path":["std","os","unix","net","ucred","UCred"],"kind":"struct"},"5:7566:2560":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"16:5927:5088":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"1:9345:25841":{"crate_id":1,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"1:4972:7837":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"2:10325:128":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"17:1098:7535":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"2:5222:32713":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"16:7741:5022":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"16:7528:5324":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"18:659:7526":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"2:22893:31937":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"1:12351:891":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"1:4158:8718":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"2:10275:226":{"crate_id":2,"path":["core","fmt","Result"],"kind":"type_alias"},"17:11367:3997":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"2:42734:2592":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"16:8136:5394":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"2:2974:123":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"11:837:7712":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"2:46152:7231":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"0:65:2065":{"crate_id":0,"path":["autocfg","rerun_env"],"kind":"function"},"5:1077:34542":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"1:617:8653":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"16:2548:4987":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"17:12175:7603":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"2:10276:2038":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"2:40784:7064":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"6:5515:6186":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_chacha20_poly1305"],"kind":"struct"},"1:4877:8744":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"2:3394:142":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"2:46589:7266":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"16:4468:5039":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"17:3264:7542":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"17:10092:21571":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"6:8029:6674":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"6:578:5707":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"3:0:505":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"2:30367:3070":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"6:5122:6020":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"1:12354:884":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"1:11209:2688":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"2:3026:3067":{"crate_id":2,"path":["core","error","Request"],"kind":"struct"},"2:8269:129":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"17:11419:4013":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"2:38144:14207":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"5:6072:14524":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"17:3473:7543":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"17:10439:3985":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"1:8189:3250":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"2:46572:7265":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"2:40550:14267":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"16:2572:4988":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"16:7769:5336":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"1:9738:127":{"crate_id":1,"path":["std","sys","pal","unix","fs","DirBuilder"],"kind":"struct"},"2:749:190":{"crate_id":2,"path":["core","num","nonzero","NonZero"],"kind":"struct"},"17:13766:4310":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"2:43690:6776":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"1:943:7710":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"16:7397:34998":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"5:7393:6727":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"17:14414:4427":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"1:5613:2683":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"17:10185:3977":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"16:6782:21504":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"2:38254:14209":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"6:1628:5806":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"2:40740:7058":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"17:15249:4677":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"1:10490:113":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Command"],"kind":"struct"},"17:12572:4013":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolTable"],"kind":"struct"},"1:8053:8659":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"2:32233:237":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"1:8073:3150":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"17:15778:4841":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"2:42713:2583":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"1:9107:2687":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"17:10018:21550":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"17:14986:4620":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"1:5249:7838":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"17:12107:4013":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"2:11934:7782":{"crate_id":2,"path":["core","slice","iter","ChunkBy"],"kind":"struct"},"1:11097:30594":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"16:3329:5028":{"crate_id":16,"path":["gimli","arch","LoongArch"],"kind":"struct"},"6:5557:6204":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"16:6962:5014":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"1:8601:7403":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"18:689:3854":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"1:8620:7864":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"17:13753:4308":{"crate_id":17,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"17:12464:21695":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"2:40642:6779":{"crate_id":2,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"1:4100:8713":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"6:6821:6470":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"13:229:5534":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"5:4252:2599":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"2:45995:7214":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"17:16187:4942":{"crate_id":17,"path":["object","xcoff","ExpAux"],"kind":"struct"},"17:16259:4218":{"crate_id":17,"path":["object","xcoff","Rel32"],"kind":"struct"},"2:43699:6777":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"1:2004:785":{"crate_id":1,"path":["std","ffi"],"kind":"module"},"1:11782:7831":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"6:1639:5814":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"1:3023:7829":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"6:5020:5993":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"17:15058:4631":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"2:9975:33218":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"6:6505:6338":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"16:2902:20637":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"16:6412:21501":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCacheStrategy"],"kind":"enum"},"1:4478:7835":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"1:8067:8660":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"17:14246:4402":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"6:7348:6538":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"1:4152:8717":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"1:9158:2671":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"2:10579:8704":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"17:10828:35007":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"17:15176:4663":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"17:12300:21694":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"16:3614:5030":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"2:22130:8797":{"crate_id":2,"path":["core","core_simd","to_bytes","ToBytes"],"kind":"trait"},"2:9788:84":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"2:42379:87":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"17:13899:4332":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"11:2352:7720":{"crate_id":11,"path":["hashbrown","table","VacantEntry"],"kind":"struct"},"1:8211:139":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"1:11355:7895":{"crate_id":1,"path":["std","sys","os_str","bytes","Slice"],"kind":"struct"},"1:10507:28172":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Argv"],"kind":"struct"},"17:15814:4845":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"6:6721:6440":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_mmap_offsets_v1"],"kind":"struct"},"5:6433:8886":{"crate_id":5,"path":["alloc","task","LocalWake"],"kind":"trait"},"17:14091:4359":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"1:1069:5267":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"2:10333:2592":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"5:7107:34558":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"16:4771:5048":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"17:12478:4111":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"2:13665:7790":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"2:40855:7071":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"2:4439:13998":{"crate_id":2,"path":["core","async_iter","async_iter","IntoAsyncIterator"],"kind":"trait"},"6:6441:6304":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"17:13485:4237":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"1:5326:204":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"5:6775:34542":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"2:11216:3101":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"17:13272:4201":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"18:538:3835":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"16:8259:5321":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"16:6047:7631":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"17:16121:4925":{"crate_id":17,"path":["object","xcoff","FileAux64"],"kind":"struct"},"6:6714:6439":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_ring_offset_v1"],"kind":"struct"},"6:7984:6661":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"2:40389:7042":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"2:44417:7163":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"1:12346:735":{"crate_id":1,"path":["std","f16"],"kind":"primitive"},"2:40361:31903":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"1:3520:2650":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"1:3333:2643":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"2:43961:3122":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"2:44489:7169":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"1:5644:113":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"5:839:101":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"5:2127:7742":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMutKey"],"kind":"struct"},"2:46283:7238":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"7:79:20476":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"1:5982:2717":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"1:11263:7446":{"crate_id":1,"path":["std","sys","pal","unix","time","Timespec"],"kind":"struct"},"2:44619:7177":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"2:46439:7260":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"2:6204:6756":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"17:10954:21581":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"14:165:20571":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"5:7385:3006":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"11:2326:7719":{"crate_id":11,"path":["hashbrown","table","OccupiedEntry"],"kind":"struct"},"2:46219:7234":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"2:44157:3114":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"1:11281:162":{"crate_id":1,"path":["std","sys","pal","unix","time","Instant"],"kind":"struct"},"16:6588:5167":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"17:11715:4031":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsection"],"kind":"struct"},"5:7645:243":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"18:598:35014":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"1:8474:2651":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"16:8226:21511":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"6:7412:6565":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"2:2068:14232":{"crate_id":2,"path":["core","ptr","metadata","Thin"],"kind":"trait_alias"},"6:1559:5756":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"6:5102:6018":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"16:2854:5001":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"6:6811:6468":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"2:46012:7215":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"2:32234:2757":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"16:6648:5179":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"2:44201:3112":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"17:14933:4614":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"1:2316:2609":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"2:12420:7784":{"crate_id":2,"path":["core","slice","GetManyMutError"],"kind":"struct"},"1:674:8656":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"2:43482:7136":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"5:3410:7740":{"crate_id":5,"path":["alloc","collections","btree","set","ExtractIf"],"kind":"struct"},"1:5280:7838":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"17:15418:4725":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"1:980:7718":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"16:8188:7704":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"2:44635:7181":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"2:38888:14211":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"16:4560:5042":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"9:447:20483":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"17:12584:7551":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolIterator"],"kind":"struct"},"2:44623:7178":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"17:12189:7607":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"5:4451:34549":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"17:9858:21565":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"17:14386:4421":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"2:41929:7104":{"crate_id":2,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"2:7651:14025":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccess"],"kind":"trait"},"2:47124:7315":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"5:2770:6718":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"17:15376:4716":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"1:1614:7740":{"crate_id":1,"path":["std","collections","hash","set","ExtractIf"],"kind":"struct"},"1:12334:417":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"2:11173:2625":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"5:5466:3096":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"2:2704:134":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"6:1663:5831":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"2:44827:227":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"6:5581:6211":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"2:3590:254":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"6:6435:6301":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"17:15426:4727":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"2:40314:3112":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"6:5361:6106":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"16:150:4958":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"6:5643:6244":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"16:6246:206":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"16:7633:34992":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"2:21852:8792":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"1:8493:2620":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"16:6749:5203":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"15:288:20590":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"17:15720:4824":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"16:6353:5146":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"2:12910:3093":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"1:9209:8782":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"6:6678:6422":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"16:5722:5009":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"2:22497:8882":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr"],"kind":"trait"},"1:1092:7720":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"17:14968:4615":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"2:10544:157":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"1:8549:7864":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"17:14788:4516":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"1:4294:27495":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"6:8317:6692":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"1:666:7819":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"2:39551:6901":{"crate_id":2,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"17:13308:4206":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"11:875:7717":{"crate_id":11,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"1:6672:2721":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"17:15126:4646":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"5:3040:34935":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"2:13795:115":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"5:3318:5550":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"16:7910:21510":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"1:11616:7454":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"2:4385:7767":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"2:11421:3120":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"1:10759:4046":{"crate_id":1,"path":["std","sys","pal","unix","thread","Thread"],"kind":"struct"},"16:7111:5264":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"16:7168:7427":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"17:11730:4034":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsectionIterator"],"kind":"struct"},"17:14131:4363":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"1:8465:2649":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"2:10337:2589":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"1:12303:30434":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"2:43869:3106":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"10:44:5562":{"crate_id":10,"path":["adler","Adler32"],"kind":"struct"},"16:2728:4995":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"6:8271:6680":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"18:515:3830":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"16:6427:7667":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"2:1888:2599":{"crate_id":2,"path":["core","mem","maybe_uninit","Guard"],"kind":"struct"},"6:7537:6630":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"1:12308:8661":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"15:327:20595":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"6:1593:5777":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"2:25:696":{"crate_id":2,"path":["core","env"],"kind":"macro"},"17:15356:4710":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"1:896:5545":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"17:15206:4669":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"17:13999:4347":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"2:40763:7062":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"2:39639:214":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"17:14876:4579":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"2:12666:7146":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"2:43997:3121":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"2:44810:150":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"2:12590:7141":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"16:4614:5044":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"2:13551:7061":{"crate_id":2,"path":["core","future","async_drop","Fuse"],"kind":"struct"},"6:8306:6688":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"6:5415:6135":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"2:3138:3168":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"6:4932:5949":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"2:46099:7228":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"6:6689:6425":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sockaddr_xdp"],"kind":"struct"},"2:45907:7205":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"16:4940:5054":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"11:2140:7719":{"crate_id":11,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"17:2175:21628":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"2:40376:7041":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"16:5037:5057":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"5:1509:3006":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"17:9886:21566":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"17:11755:4038":{"crate_id":17,"path":["object","read","elf","attributes","AttributeIndexIterator"],"kind":"struct"},"1:3832:8712":{"crate_id":1,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"2:42536:2041":{"crate_id":2,"path":["core","sync","atomic","ATOMIC_USIZE_INIT"],"kind":"constant"},"6:4971:5966":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"6:7314:6519":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"5:3251:2671":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"17:261:7532":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"17:12399:4102":{"crate_id":17,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"1:8671:7405":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"6:1490:5717":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"2:41223:7080":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"17:13526:4247":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"1:9420:2728":{"crate_id":1,"path":["std","sync","rwlock","MappedRwLockWriteGuard"],"kind":"struct"},"17:16249:4953":{"crate_id":17,"path":["object","xcoff","DwarfAux64"],"kind":"struct"},"5:7485:3006":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"2:43274:7133":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"2:43227:7126":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"2:42117:14280":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"2:45928:7210":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"17:10905:7553":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"17:12264:7613":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"5:3263:33308":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"16:7509:7691":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"1:10642:30560":{"crate_id":1,"path":["std","sys","pal","unix","stack_overflow","Handler"],"kind":"struct"},"16:4531:5041":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"2:21626:32523":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"17:15944:4187":{"crate_id":17,"path":["object","xcoff","FileHeader64"],"kind":"struct"},"9:0:2424":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"6:5472:6174":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"16:5347:5061":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"1:5089:8764":{"crate_id":1,"path":["std","os","net","linux_ext","socket","UnixSocketExt"],"kind":"trait"},"2:42720:2584":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"2:22164:32511":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"16:5367:21496":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"17:14475:4441":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"1:5579:2681":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"5:6176:2599":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"1:888:3006":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"18:491:3826":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"17:15023:4627":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"6:6471:6314":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"17:11102:7559":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"2:47095:7312":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"2:8689:3180":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"6:8341:6697":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"17:4821:7545":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolIterator"],"kind":"struct"},"17:3597:7544":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"17:11877:4040":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"2:34:936":{"crate_id":2,"path":["core","include_str"],"kind":"macro"},"2:4373:7766":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"6:8247:6676":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"17:13594:4267":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"17:12433:4106":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"1:4144:8716":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"2:13875:152":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"6:5598:6218":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"1:3649:28174":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"17:12647:7620":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatIterator"],"kind":"struct"},"1:11688:7460":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"1:3058:137":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"1:1891:3140":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"6:5671:6254":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"5:7405:7726":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"17:13473:4234":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"2:46234:7235":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"17:13877:4331":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"2:21641:32519":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"2:8240:2761":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"6:1692:5842":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"6:5064:6016":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"17:12127:4080":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"16:4976:5055":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"6:7602:6655":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"2:43863:3107":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"11:673:2671":{"crate_id":11,"path":["hashbrown","map","Iter"],"kind":"struct"},"1:1101:7724":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"17:13606:4270":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"17:10284:3980":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"17:13553:4256":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"2:42615:2714":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"1:8002:7851":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"17:15289:4688":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"16:2660:4992":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"2:44835:207":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"1:12356:1833":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"1:4812:6561":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"function"},"17:11557:7577":{"crate_id":17,"path":["object","read","elf","note","GnuPropertyIterator"],"kind":"struct"},"17:12289:4083":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"17:14977:4619":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"18:643:3827":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"2:11328:3119":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"6:6532:6345":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"6:5436:6150":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"2:41741:170":{"crate_id":2,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"2:7652:14026":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"2:44390:7162":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"2:22882:3071":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"17:256:7531":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"16:5769:5069":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"18:726:3863":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"2:4665:7770":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"17:11269:21600":{"crate_id":17,"path":["object","read","coff","import","ImportName"],"kind":"enum"},"2:43852:3110":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"2:2276:6744":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"2:46904:7305":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"2:44015:3120":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"16:6317:7656":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"2:23181:6827":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI64Inner"],"kind":"struct"},"2:39467:3183":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"16:6466:5158":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"2:46056:7218":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"11:832:7725":{"crate_id":11,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"2:22859:6795":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"17:14079:4358":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"11:2231:5551":{"crate_id":11,"path":["hashbrown","table","HashTable"],"kind":"struct"},"1:2463:3233":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"5:1581:210":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"2:3423:8692":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"5:2322:6714":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"11:2536:5552":{"crate_id":11,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"2:10584:6769":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"17:11661:4027":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"17:14516:4446":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"2:6090:6753":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"5:3885:7740":{"crate_id":5,"path":["alloc","collections","linked_list","ExtractIf"],"kind":"struct"},"14:214:5484":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"6:5160:6023":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"6:5266:6071":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"16:2838:5000":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"5:7582:2563":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"2:47252:7329":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"2:43486:7137":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"1:7354:8136":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"17:11089:7558":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"1:10329:3140":{"crate_id":1,"path":["std","sys","pal","unix","os","SplitPaths"],"kind":"struct"},"2:43708:7806":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"5:7551:8673":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"2:3762:70":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"17:10317:3981":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"2:33661:14201":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"17:14994:4621":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"16:2508:4985":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"2:46949:7306":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"5:289:34542":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"1:11759:27490":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"17:9984:21569":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"16:4352:5037":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"16:3029:3871":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"6:5466:6171":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"1:752:154":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"2:23013:2380":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"17:10612:7548":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"2:1971:6738":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"1:2774:2638":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"17:10573:35010":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"16:3196:4970":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"2:45960:7212":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"5:3805:2639":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"16:7061:5255":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"2:21587:2979":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"2:23115:6821":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU64Inner"],"kind":"struct"},"11:2562:5556":{"crate_id":11,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"17:13922:4337":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"6:4979:5971":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"16:7144:21506":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"2:44296:7150":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"2:4848:2991":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"17:16269:4223":{"crate_id":17,"path":["object","xcoff","Rel64"],"kind":"struct"},"17:11841:7596":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"17:12516:7616":{"crate_id":17,"path":["object","read","xcoff","file","XcoffFile"],"kind":"struct"},"17:14503:4445":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"17:11042:7555":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"6:1585:5772":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"6:6519:6339":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"6:5244:6060":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"16:2374:4979":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"16:5686:5004":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"2:3226:13929":{"crate_id":2,"path":["core","ops","async_function","AsyncFnOnce"],"kind":"trait"},"6:1723:5853":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"2:45813:7195":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"6:5457:6165":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"1:909:5546":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"16:542:4960":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"2:7546:3013":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"16:6813:5217":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"1:2477:3237":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"5:883:8675":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"1:9324:7878":{"crate_id":1,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"2:42037:3179":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"2:2899:144":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"17:11510:7574":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"1:10713:2642":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stdin"],"kind":"struct"},"1:9428:162":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"2:42727:2591":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"1:9273:7870":{"crate_id":1,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"17:437:3925":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"2:45843:7199":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"6:4909:5941":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"1:4798:8718":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"5:7540:2674":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"2:22637:8874":{"crate_id":2,"path":["core","core_simd","simd","cmp","ord","SimdPartialOrd"],"kind":"trait"},"17:12808:4136":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"16:4882:5052":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"2:40712:133":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"6:5314:6095":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"2:46551:7264":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"5:956:2671":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"1:8721:2666":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"1:9716:3249":{"crate_id":1,"path":["std","sys","pal","unix","fs","ReadDir"],"kind":"struct"},"1:4192:8719":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"2:3180:3170":{"crate_id":2,"path":["core","marker","Freeze"],"kind":"trait"},"2:43067:2034":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"16:860:7628":{"crate_id":16,"path":["gimli","read","endian_slice","DebugBytes"],"kind":"struct"},"18:113:25747":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"1:8612:7867":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"1:9284:7872":{"crate_id":1,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"5:1204:33349":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"2:44607:7174":{"crate_id":2,"path":["core","str","LinesMap"],"kind":"struct"},"18:698:3855":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"17:12969:4145":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"17:15190:4666":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"17:15390:4718":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"1:7473:27492":{"crate_id":1,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"6:545:5689":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"6:479:5648":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"16:8093:5388":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"6:570:5702":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"1:8863:2672":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"2:39716:6907":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"2:32322:3173":{"crate_id":2,"path":["core","marker","Tuple"],"kind":"trait"},"2:2001:1358":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"17:12422:4104":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"2:32292:2758":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"16:8073:5387":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"16:2478:4984":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"16:7052:7669":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"17:12056:4075":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"6:6706:6435":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_mmap_offsets"],"kind":"struct"},"17:12388:4101":{"crate_id":17,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"2:46251:7236":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"2:42045:3006":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"1:3601:2610":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"2:7999:2708":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"17:11354:7569":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"1:7140:8789":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"1:8523:2623":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"1:1603:2671":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"2:33728:14203":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"17:12792:3939":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"6:1699:5845":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"10:0:2425":{"crate_id":10,"path":["adler"],"kind":"module"},"16:4802:5049":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"6:465:5640":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"17:12328:4090":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"2:8695:14181":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"1:3427:2640":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"2:40418:3112":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"1:11926:7464":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"2:46312:7239":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"6:5306:6091":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"16:2303:20610":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"2:21673:3251":{"crate_id":2,"path":["core","core_simd","cast","sealed","Sealed"],"kind":"trait"},"17:11063:7557":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"1:4214:8723":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"5:7449:3006":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"5:4282:2599":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"17:11915:21670":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"1:8182:3246":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"1:4663:8744":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"1:8530:2624":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"6:532:5682":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"2:30616:6736":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"6:5112:6019":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"1:1958:2033":{"crate_id":1,"path":["std","error"],"kind":"module"},"18:680:3851":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"2:43820:7810":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"2:10759:32555":{"crate_id":2,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"16:2592:4989":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"1:6562:186":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"17:10982:21582":{"crate_id":17,"path":["object","read","archive","Members"],"kind":"enum"},"1:1914:3146":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"5:7743:7763":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"11:1903:5547":{"crate_id":11,"path":["hashbrown","set","Intersection"],"kind":"struct"},"5:4117:34542":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"6:6621:6402":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"1:12340:335":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"2:2906:257":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"6:1496:5720":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"2:22459:8879":{"crate_id":2,"path":["core","core_simd","simd","num","uint","SimdUint"],"kind":"trait"},"2:39659:216":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"17:14723:4465":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"16:7711:210":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"2:3620:33122":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"2:46365:7242":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"2:22722:6788":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"2:42953:7114":{"crate_id":2,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"2:44097:3117":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"2:2870:14028":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"2:2080:6739":{"crate_id":2,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"2:40506:7046":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"17:13738:4303":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"5:1843:7740":{"crate_id":5,"path":["alloc","collections","btree","map","ExtractIf"],"kind":"struct"},"11:2542:5553":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"2:10331:2591":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"2:3672:13933":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"1:8536:2625":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"1:12319:25834":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"1:9546:3146":{"crate_id":1,"path":["std","sys","pal","unix","args","Args"],"kind":"struct"},"2:11293:7778":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"17:13375:4217":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"17:15596:4790":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"17:15151:4655":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"6:5212:6045":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"2:42096:8778":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"17:12251:7612":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"2:42457:88":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"2:46027:7216":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"2:3335:13931":{"crate_id":2,"path":["core","ops","coroutine","Coroutine"],"kind":"trait"},"2:22595:3251":{"crate_id":2,"path":["core","core_simd","simd","ptr","sealed","Sealed"],"kind":"trait"},"1:4345:8742":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"6:6768:6454":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_desc"],"kind":"struct"},"2:33594:14202":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"2:41763:7088":{"crate_id":2,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"2:40320:7037":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"17:14855:4571":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"2:13818:6783":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"1:8769:2667":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"5:5729:13981":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"1:6272:30607":{"crate_id":1,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"16:8175:7701":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"5:219:7732":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"2:44631:7180":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"2:41214:2720":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"17:12863:4139":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"16:2338:4971":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"11:490:154":{"crate_id":11,"path":["hashbrown","map","HashMap"],"kind":"struct"},"6:5536:6192":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"16:4587:5043":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"11:1728:156":{"crate_id":11,"path":["hashbrown","set","HashSet"],"kind":"struct"},"16:4743:5047":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"16:5863:21498":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"19:0:1291":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"16:6442:5154":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"1:1619:5547":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"16:2708:4994":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"11:1910:5548":{"crate_id":11,"path":["hashbrown","set","Difference"],"kind":"struct"},"16:6634:5011":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"2:47078:7311":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"6:6670:6420":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"2:30584:6831":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"5:5230:2713":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"9:357:20498":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"1:1475:156":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"2:44210:3113":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"16:0:2430":{"crate_id":16,"path":["gimli"],"kind":"module"},"16:6543:5166":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"1:521:8640":{"crate_id":1,"path":["std","thread","PanicGuard"],"kind":"struct"},"16:6433:5153":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"17:15701:4819":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"17:13509:4239":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"17:12900:4142":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"2:6013:2599":{"crate_id":2,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"17:12278:7614":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"6:5653:6245":{"crate_id":6,"path":["libc","unix","linux_like","linux","sched_attr"],"kind":"struct"},"17:14051:4354":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"1:4808:6557":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"function"},"2:12008:3103":{"crate_id":2,"path":["core","slice","raw","from_raw_parts"],"kind":"function"},"2:36268:5287":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"6:5546:6198":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"1:586:7818":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"1:5955:2716":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"17:11341:7568":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"2:10979:239":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"2:3196:8787":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"1:11103:30602":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"2:44813:164":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"11:2124:5267":{"crate_id":11,"path":["hashbrown","set","Entry"],"kind":"enum"},"5:4938:217":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"11:856:7715":{"crate_id":11,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"16:2355:4973":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"17:13064:4153":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"2:42223:89":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"5:0:309":{"crate_id":5,"path":["alloc"],"kind":"module"},"2:11148:3179":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"1:8649:3271":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"2:4739:2989":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"2:10791:31986":{"crate_id":2,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"2:4420:13926":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"1:4918:8732":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"2:2985:137":{"crate_id":2,"path":["core","error","Error"],"kind":"trait"},"18:573:3827":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"2:23000:3072":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"2:47115:7314":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"17:13986:4346":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"2:43252:157":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"2:33527:8788":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"11:1676:34969":{"crate_id":11,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"17:10155:3975":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"6:8351:6699":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"2:40587:2566":{"crate_id":2,"path":["core","ffi","c_char"],"kind":"type_alias"},"2:11967:7783":{"crate_id":2,"path":["core","slice","iter","ChunkByMut"],"kind":"struct"},"1:2629:2635":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"16:4641:5045":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"2:42340:93":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"2:3869:7726":{"crate_id":2,"path":["core","array","drain","Drain"],"kind":"struct"},"6:7561:6640":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"2:41907:31920":{"crate_id":2,"path":["core","net","parser","AddrKind"],"kind":"enum"},"1:4552:7836":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"17:16176:4941":{"crate_id":17,"path":["object","xcoff","FunAux64"],"kind":"struct"},"2:47057:7310":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"17:12030:7599":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"2:44611:7175":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"16:2684:4993":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"1:3640:2038":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"2:42199:196":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"17:15138:4649":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"16:6385:5149":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"2:22:817":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"1:9415:2727":{"crate_id":1,"path":["std","sync","rwlock","MappedRwLockReadGuard"],"kind":"struct"},"17:11227:7563":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"1:10942:3250":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileTimes"],"kind":"struct"},"17:11825:7594":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"5:4481:2599":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"1:3658:2611":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"6:5565:6206":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"16:2768:4997":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"5:4436:265":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"8:0:2423":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"1:1631:5549":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"6:6447:6305":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"16:6991:34990":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"6:5329:6099":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_sizes"],"kind":"struct"},"16:2998:5025":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"1:12347:738":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"17:12201:7608":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"2:2869:3251":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"5:6019:71":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"16:5700:5007":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"1:10912:7432":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileAttr"],"kind":"struct"},"2:40521:7048":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"6:7516:6616":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"1:2309:3229":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"11:742:7711":{"crate_id":11,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"17:12485:21696":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"2:13838:6785":{"crate_id":2,"path":["core","task","wake","LocalWaker"],"kind":"struct"},"14:0:2428":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"11:800:7726":{"crate_id":11,"path":["hashbrown","map","Drain"],"kind":"struct"},"2:30995:196":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"2:3366:2626":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"1:3331:2642":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"9:502:5622":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"6:553:5694":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"2:12436:2384":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"16:6620:5177":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"6:4897:5932":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"2:46477:7262":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"2:8377:178":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"17:11547:3918":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"2:22564:14221":{"crate_id":2,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr","with_exposed_provenance"],"kind":"function"},"2:13528:7789":{"crate_id":2,"path":["core","future","async_drop","AsyncDropInPlace"],"kind":"struct"},"17:10818:7551":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"17:13437:4225":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"1:5080:8763":{"crate_id":1,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"2:44043:3115":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"2:41795:8711":{"crate_id":2,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"6:5528:6187":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"17:14271:4405":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"17:14235:4400":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"1:2479:3238":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"17:2037:7537":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"17:12089:4078":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"5:3754:34542":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"2:42262:96":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"2:41981:7106":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"17:15197:4668":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"1:12352:897":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"1:1083:7719":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"17:14402:4425":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"16:3014:20639":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"5:1441:99":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"17:14298:4408":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"1:9446:3253":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"2:44468:13964":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"6:5320:6096":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"2:5917:2599":{"crate_id":2,"path":["core","iter","adapters","filter","next_chunk","Guard"],"kind":"struct"},"6:473:5645":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"2:34392:5286":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"17:11166:3999":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"2:3206:5281":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"2:46978:7307":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"17:13581:4266":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"17:15222:4673":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"5:3284:5549":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"17:14189:4390":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"6:586:5711":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"1:3386:2645":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"1:1636:5550":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"2:0:563":{"crate_id":2,"path":["core"],"kind":"module"},"2:46333:7240":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"6:6629:6403":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"1:4316:8739":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"1:4874:8766":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"2:43911:3119":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"2:43718:6778":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"18:623:35015":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"6:1535:5739":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"1:4810:6559":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"function"},"2:30648:31914":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum"],"kind":"enum"},"2:47161:7318":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"1:5841:7352":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"6:6738:6444":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_umem_reg_v1"],"kind":"struct"},"6:5624:6235":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifc_ifcu"],"kind":"union"},"2:2155:189":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"1:5103:8765":{"crate_id":1,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"17:13855:4324":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"16:7014:21505":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"2:4729:6747":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"2:42054:7110":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"6:7366:3271":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"17:11865:7598":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"17:513:7534":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"2:32224:6897":{"crate_id":2,"path":["core","error","Source"],"kind":"struct"},"16:5742:5064":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"17:14436:4438":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"16:6160:20609":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"5:5422:34542":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"6:8300:6687":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"17:14147:4368":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"17:11788:7588":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"6:7584:6652":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"17:15313:4695":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"17:16151:4933":{"crate_id":17,"path":["object","xcoff","CsectAux64"],"kind":"struct"},"5:6414:8885":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"17:14599:4463":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"2:42085:7798":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"2:43008:31901":{"crate_id":2,"path":["core","fmt","rt","ArgumentType"],"kind":"enum"},"17:12887:4140":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"1:4051:2368":{"crate_id":1,"path":["std","num"],"kind":"module"},"2:43739:7138":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"16:6098:21499":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"2:21643:32513":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"6:7389:6564":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"6:5146:6022":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"2:44311:7156":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"6:1510:5725":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"2:40513:7047":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"struct"},"17:14012:4349":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"1:9319:7877":{"crate_id":1,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"6:6597:6390":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"6:1671:5832":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"16:6758:5204":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"2:3218:13927":{"crate_id":2,"path":["core","ops","async_function","AsyncFn"],"kind":"trait"},"2:43800:7809":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"2:4296:2599":{"crate_id":2,"path":["core","array","Guard"],"kind":"struct"},"16:6079:4963":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"2:44479:7165":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"17:15116:4645":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"11:2304:5267":{"crate_id":11,"path":["hashbrown","table","Entry"],"kind":"enum"},"2:42537:90":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"17:14066:4357":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"17:0:2431":{"crate_id":17,"path":["object"],"kind":"module"},"1:947:7711":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"5:40:8693":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"2:22283:3251":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"6:1680:5838":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"16:6532:5165":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"2:3353:124":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"18:563:3837":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"16:5107:5059":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"2:23203:6829":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroIsizeInner"],"kind":"struct"},"6:6562:6368":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"2:3635:13930":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"17:13046:4150":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"2:21675:8795":{"crate_id":2,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"18:608:7525":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"2:22907:6800":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"17:15822:4848":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"17:12342:4095":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"1:6912:233":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"2:44615:7176":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"2:39709:7796":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"2:33873:14204":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"2:43778:7808":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"17:11634:4025":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"2:46610:7267":{"crate_id":2,"path":["core","core_arch","simd","m8x32"],"kind":"struct"},"17:12076:7602":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"2:8220:145":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"17:13211:4187":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"1:5629:2684":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"2:40565:2562":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"2:23045:3251":{"crate_id":2,"path":["core","num","nonzero","private","Sealed"],"kind":"trait"},"17:10524:7547":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"16:8118:5391":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"16:7473:5112":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"17:14545:4449":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"1:8231:7358":{"crate_id":1,"path":["std","hash","random","RandomState"],"kind":"struct"},"1:5827:220":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"16:5995:5098":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"16:7428:21507":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"11:430:34975":{"crate_id":11,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"2:4586:2988":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"5:3820:7741":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"5:7465:6729":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"17:12454:4109":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"17:13814:4320":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"2:10329:2583":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"16:2323:20636":{"crate_id":16,"path":["gimli","common","Vendor"],"kind":"enum"},"6:6542:6352":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"2:44147:2621":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"1:8344:2370":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"6:4885:5927":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"16:2878:5002":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"9:392:20484":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"16:4856:5051":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"2:41779:7090":{"crate_id":2,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"5:2249:6708":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"2:44696:14332":{"crate_id":2,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"5:4515:34549":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"1:4763:8762":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"1:968:7715":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"14:31:7705":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"2:39547:8691":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"6:6880:6482":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"16:4830:5050":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"17:13424:4224":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"17:15957:4869":{"crate_id":17,"path":["object","xcoff","AuxHeader32"],"kind":"struct"},"17:12671:7622":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatSectionIterator"],"kind":"struct"},"17:10137:21547":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"2:40806:7066":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"6:8282:6684":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"2:2066:14231":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"17:12225:7610":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"5:4087:7726":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"16:2458:4983":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"2:41823:7097":{"crate_id":2,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"14:160:7705":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"17:2234:7541":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"1:8792:2668":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"16:6927:5236":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"6:5502:6185":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_256"],"kind":"struct"},"2:10693:14299":{"crate_id":2,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"1:5159:8770":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"17:14111:4362":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"2:23104:6820":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU32Inner"],"kind":"struct"},"17:10399:2624":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"5:1324:5267":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"17:16223:4949":{"crate_id":17,"path":["object","xcoff","StatAux"],"kind":"struct"},"2:44520:3125":{"crate_id":2,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"2:34219:14206":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"2:22993:6812":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"11:883:7718":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"1:2070:197":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"6:5296:6087":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"5:843:7734":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"6:6698:6431":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_ring_offset"],"kind":"struct"},"5:1355:7719":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"16:7539:5017":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"2:44325:7159":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"1:5555:2039":{"crate_id":1,"path":["std","process"],"kind":"module"},"16:2438:4982":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"2:46655:7268":{"crate_id":2,"path":["core","core_arch","simd","m16x16"],"kind":"struct"},"2:44661:130":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"2:4:1256":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"5:1739:34542":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"2:41000:7075":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"5:6958:13982":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"18:507:3827":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"16:6398:5003":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"2:22509:33026":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_addr"],"kind":"function"},"1:4397:7834":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"17:11898:4042":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"2:3517:211":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"18:96:25746":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"5:5077:2599":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"5:6612:34542":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"1:6786:2724":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"2:43264:2667":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"2:39579:210":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"1:2307:138":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"1:11918:7464":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"1:10893:7890":{"crate_id":1,"path":["std","sys","pal","unix","fd","FileDesc"],"kind":"struct"},"2:6902:6765":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindows"],"kind":"struct"},"16:7497:5323":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"5:7610:2564":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"6:5630:6238":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifconf"],"kind":"struct"},"17:16050:4201":{"crate_id":17,"path":["object","xcoff","SectionHeader64"],"kind":"struct"},"1:10719:2640":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stderr"],"kind":"struct"},"17:13674:4274":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"1:2226:128":{"crate_id":1,"path":["std","ffi","os_str","Display"],"kind":"struct"},"16:6335:7664":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"17:12353:4099":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"16:872:7532":{"crate_id":16,"path":["gimli","read","endian_slice","DebugLen"],"kind":"struct"},"1:9166:7869":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"6:1565:5758":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"2:4397:109":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"6:7461:6577":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"6:6664:6417":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"1:8594:7402":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"1:9312:7876":{"crate_id":1,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"18:735:25756":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"11:1883:2671":{"crate_id":11,"path":["hashbrown","set","Iter"],"kind":"struct"},"16:5817:5071":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"17:14752:4485":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"17:15400:4721":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"17:14341:4414":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"2:4507:7768":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"1:957:8674":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"18:651:3827":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"2:39601:212":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"0:0:2251":{"crate_id":0,"path":["autocfg"],"kind":"module"},"5:7059:264":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"17:9938:21568":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"2:40433:14022":{"crate_id":2,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"2:11435:7780":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"17:4986:7546":{"crate_id":17,"path":["object","read","xcoff","relocation","XcoffRelocationIterator"],"kind":"struct"},"2:42020:173":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"1:7984:7354":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"17:12683:7623":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegmentIterator"],"kind":"struct"},"6:5400:6129":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"1:1610:7726":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"1:10917:7434":{"crate_id":1,"path":["std","sys","pal","unix","fs","StatxExtraFields"],"kind":"struct"},"5:743:118":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"1:7939:30592":{"crate_id":1,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"2:12404:14288":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"16:5006:5056":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"1:12350:909":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"6:5407:1243":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"1:2067:198":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"5:1184:33389":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"2:44639:7182":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"2:22152:6787":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"16:7306:34997":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"17:12993:21574":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"17:12724:21572":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"17:1207:7536":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"1:2489:3243":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"5:1570:7711":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"2:40693:7052":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"2:22377:8877":{"crate_id":2,"path":["core","core_simd","simd","num","float","SimdFloat"],"kind":"trait"},"16:7656:21508":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"2:40702:7053":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"1:3384:2644":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"2:3580:14212":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"5:6051:2713":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"1:7397:30138":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"2:40635:2653":{"crate_id":2,"path":["core","io","borrowed_buf","BorrowedCursor"],"kind":"struct"},"2:11255:7777":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"11:2383:2671":{"crate_id":11,"path":["hashbrown","table","Iter"],"kind":"struct"},"17:12543:7619":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSection"],"kind":"struct"},"1:5698:2040":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"5:3661:2671":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"1:8483:2619":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"11:1896:7740":{"crate_id":11,"path":["hashbrown","set","ExtractIf"],"kind":"struct"},"2:2741:202":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"17:11688:4029":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSection"],"kind":"struct"},"1:8560:8710":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"6:6409:6286":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"2:42001:194":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"1:6451:7351":{"crate_id":1,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"17:11583:7583":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"2:21734:8794":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"17:15760:4835":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"17:13497:4238":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"6:6609:6395":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"2:43467:7135":{"crate_id":2,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"2:22951:31913":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"2:44502:3124":{"crate_id":2,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"17:13024:21575":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"1:1607:3006":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"17:10661:7549":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"2:10776:30595":{"crate_id":2,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"2:23126:6822":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU128Inner"],"kind":"struct"},"1:3477:2630":{"crate_id":1,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"6:5370:6112":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"1:1838:696":{"crate_id":1,"path":["std","env"],"kind":"module"},"17:10218:3978":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"11:2498:20560":{"crate_id":11,"path":["hashbrown","Equivalent"],"kind":"trait"},"2:42182:3179":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"5:5524:1721":{"crate_id":5,"path":["alloc","str"],"kind":"module"},"18:670:7530":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"6:538:5685":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"2:2543:14221":{"crate_id":2,"path":["core","ptr","with_exposed_provenance"],"kind":"function"},"5:4322:2671":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"17:10419:3984":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"17:10457:138":{"crate_id":17,"path":["object","read","any","File"],"kind":"enum"},"18:548:153":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"1:6668:2720":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"5:7457:210":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"2:43810:6781":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"2:46522:7263":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"2:10969:3251":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"17:10251:3979":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"6:1517:5728":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"17:9755:21546":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"6:4864:5919":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"17:2203:7538":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"2:47291:7345":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"2:43839:2382":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"2:40426:3111":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"2:10294:143":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"16:7085:5257":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"6:5283:6082":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"17:12043:7600":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"1:9278:115":{"crate_id":1,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"2:44627:7179":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"2:47104:7313":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"1:12363:13":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"1:8225:127":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"2:38199:14208":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"16:8301:5407":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"2:40684:7050":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"17:10759:4013":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"6:8012:6664":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"2:40472:7045":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"1:4332:8741":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"17:11574:5551":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"1:11605:25835":{"crate_id":1,"path":["std","sys","thread_local","fast_local","DtorState"],"kind":"enum"},"5:7425:6728":{"crate_id":5,"path":["alloc","collections","btree","map","UnorderedKeyError"],"kind":"struct"},"16:7604:5020":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"11:1142:7723":{"crate_id":11,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"2:40841:3848":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"2:13125:119":{"crate_id":2,"path":["core","str","lossy","Debug"],"kind":"struct"},"2:30637:2581":{"crate_id":2,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"16:6849:5230":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"6:6729:6441":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_umem_reg"],"kind":"struct"},"2:3607:13995":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"2:40793:7065":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"9:238:2667":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"17:15463:4735":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"16:6574:5023":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"2:8686:149":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"2:10120:2582":{"crate_id":2,"path":["core","fmt","builders","FormatterFn"],"kind":"struct"},"5:1340:7720":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"2:5302:977":{"crate_id":2,"path":["core","iter"],"kind":"module"},"11:1007:5267":{"crate_id":11,"path":["hashbrown","map","Entry"],"kind":"enum"},"6:5191:6033":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"2:13613:33057":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"17:15582:4784":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"16:7570:5018":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"1:8339:7858":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"2:1761:14139":{"crate_id":2,"path":["core","intrinsics","AggregateRawPtr"],"kind":"trait"},"17:13089:4154":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"11:2423:3006":{"crate_id":11,"path":["hashbrown","table","IntoIter"],"kind":"struct"},"17:11743:4035":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsection"],"kind":"struct"},"13:110:34978":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"2:41207:7079":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"2:12650:7145":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"2:22843:6791":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"1:9401:2599":{"crate_id":1,"path":["std","sync","poison","Guard"],"kind":"struct"},"17:13774:4312":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"6:5277:6079":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"14:40:4188":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"2:40410:3113":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"17:10671:35005":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"17:15836:4851":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"2:40990:2623":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"1:3429:2641":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"2:8187:14182":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"16:7823:21509":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"11:1087:34976":{"crate_id":11,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"2:22828:6790":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"1:11196:2381":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","ExitStatus"],"kind":"struct"},"1:7325:30600":{"crate_id":1,"path":["std","sys","thread_local","abort_on_dtor_unwind","DtorUnwindGuard"],"kind":"struct"},"6:559:5697":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"2:13640:205":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"5:5864:251":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"16:2748:4996":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"17:12150:4081":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"1:8513:2622":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"1:12343:1811":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"2:45892:7204":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"17:15456:4733":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"6:8197:6675":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"18:613:35013":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"2:46684:7269":{"crate_id":2,"path":["core","core_arch","simd","m32x8"],"kind":"struct"},"1:3668:2614":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"17:15102:4644":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"0:64:2059":{"crate_id":0,"path":["autocfg","rerun_path"],"kind":"function"},"17:13187:4173":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"2:46181:7232":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"17:13116:4160":{"crate_id":17,"path":["object","archive","AixHeader"],"kind":"struct"},"2:42174:2671":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"17:15324:4699":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"17:11497:7573":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"17:15383:4717":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"1:12337:1873":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"5:7622:2565":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"2:21655:32521":{"crate_id":2,"path":["core","core_simd","swizzle","resize","Resize"],"kind":"struct"},"16:2394:4980":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"1:8252:2637":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"17:10068:21553":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"1:8847:2670":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"1:4206:8721":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"16:7379:34999":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"2:22609:8873":{"crate_id":2,"path":["core","core_simd","simd","cmp","eq","SimdPartialEq"],"kind":"trait"},"6:5382:6117":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"17:14489:4442":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"16:8202:5024":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"1:12357:1839":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"1:10348:7882":{"crate_id":1,"path":["std","sys","pal","unix","os","Env"],"kind":"struct"},"16:2808:4999":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"16:7559:5328":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"2:3382:2759":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"2:9356:7775":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"16:5897:5082":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"2:38309:14210":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"2:11449:7781":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"1:3550:2599":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"6:4876:5922":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"1:8807:2669":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"17:14177:4387":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"2:10335:206":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"2:44926:7193":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"17:12851:4138":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"1:6348:6783":{"crate_id":1,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"11:299:5537":{"crate_id":11,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"16:7321:7110":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"1:12360:966":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"2:2646:103":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"5:1478:2671":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"17:11153:7551":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"11:328:5540":{"crate_id":11,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"11:811:7740":{"crate_id":11,"path":["hashbrown","map","ExtractIf"],"kind":"struct"},"2:23148:6824":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI8Inner"],"kind":"struct"},"11:2569:2674":{"crate_id":11,"path":["hashbrown","TryReserveError"],"kind":"enum"},"17:15646:4803":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"5:3222:100":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"17:9671:21549":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"2:45974:7213":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"6:1503:5723":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"2:23137:6823":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroUsizeInner"],"kind":"struct"},"16:7686:7700":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"16:8313:137":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"6:4811:5876":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"2:4817:2754":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"6:4837:5896":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"1:11228:7183":{"crate_id":1,"path":["std","sys","pal","unix","time","Nanoseconds"],"kind":"struct"},"16:5846:5076":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"11:2369:7731":{"crate_id":11,"path":["hashbrown","table","AbsentEntry"],"kind":"struct"},"6:5376:6114":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"16:6665:21503":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"1:6189:220":{"crate_id":1,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"2:22931:31890":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"16:5075:5058":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"2:12915:3091":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"17:16198:4943":{"crate_id":17,"path":["object","xcoff","BlockAux32"],"kind":"struct"},"17:16165:4936":{"crate_id":17,"path":["object","xcoff","FunAux32"],"kind":"struct"},"1:9224:8781":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"2:11407:3121":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"2:44949:7194":{"crate_id":2,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"2:22550:8883":{"crate_id":2,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr"],"kind":"trait"},"2:41229:2650":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"1:0:1713":{"crate_id":1,"path":["std"],"kind":"module"},"1:367:7814":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"0:155:2046":{"crate_id":0,"path":["autocfg","AutoCfg"],"kind":"struct"},"1:6396:7842":{"crate_id":1,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"6:4992:5977":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"6:5014:5990":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"5:3042:6711":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"2:7767:14177":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"2:44185:3099":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"16:6278:7638":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"2:21597:32517":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_elements_left","Rotate"],"kind":"struct"},"17:12318:4088":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"17:12824:21573":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"2:40722:7055":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"17:15410:4724":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"17:12408:4103":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"11:700:3006":{"crate_id":11,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"6:5336:6100":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif"],"kind":"struct"},"1:11085:30562":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"2:4795:2990":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"5:3046:33352":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"1:3288:31059":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"2:43282:7134":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"1:10980:30198":{"crate_id":1,"path":["std","sys","pal","unix","kernel_copy","FdHandle"],"kind":"enum"},"17:10915:35006":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"1:3583:2608":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"16:3842:5033":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"1:494:30598":{"crate_id":1,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"2:42190:3006":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"2:9980:33203":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"1:12335:1174":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"1:9709:138":{"crate_id":1,"path":["std","sys","pal","unix","fs","File"],"kind":"struct"},"16:4913:5053":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"5:7376:3348":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"2:45828:7198":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"6:4952:5958":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"3:234:226":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"2:5201:435":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"1:6027:2729":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"11:2403:3179":{"crate_id":11,"path":["hashbrown","table","IterMut"],"kind":"struct"},"18:531:3832":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"9:178:20550":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"17:13568:4262":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"2:23655:236":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"2:10339:2590":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"17:12557:3997":{"crate_id":17,"path":["object","read","xcoff","section","SectionTable"],"kind":"struct"},"6:5352:6102":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_addfd"],"kind":"struct"},"2:44876:7190":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"1:8334:7857":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"2:44805:7189":{"crate_id":2,"path":["core","future","async_drop","Noop"],"kind":"struct"},"11:1025:7719":{"crate_id":11,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"2:11366:7779":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"1:11622:2694":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"17:12597:4117":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolTable"],"kind":"struct"},"1:9150:2689":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"11:1566:20565":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"1:11649:7457":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"17:13972:4048":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"2:10536:153":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"2:3191:8785":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"2:8322:2760":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"17:16032:4191":{"crate_id":17,"path":["object","xcoff","SectionHeader32"],"kind":"struct"},"2:40534:106":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"2:31022:2979":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"17:10720:35009":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"1:12122:28417":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"17:11799:7589":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"1:9124:2381":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"5:3050:33351":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"1:426:185":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"2:33460:8786":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"2:39619:215":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"15:306:20591":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"17:13455:4233":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"2:40615:2579":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"2:23093:6819":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU16Inner"],"kind":"struct"},"2:39679:8667":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"5:7658:6734":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"2:44685:7186":{"crate_id":2,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"15:394:20601":{"crate_id":15,"path":["addr2line","DebugFile"],"kind":"enum"},"2:3276:5282":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"6:4800:5868":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"2:21854:6786":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"2:42029:2671":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"2:42963:2581":{"crate_id":2,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"1:6499:220":{"crate_id":1,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"17:12711:137":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"2:44454:7164":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"2:40671:2622":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"1:650:3064":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"16:7695:5334":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"18:765:25757":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"1:8645:7868":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"2:3391:141":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"16:3778:5031":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"2:21842:3251":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"17:14560:4453":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"1:12348:754":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"16:6802:5216":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"16:2636:4991":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"6:8294:6686":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"2:3371:13921":{"crate_id":2,"path":["core","ops","deref","DerefPure"],"kind":"trait"},"17:14260:4404":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"2:4656:221":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"2:3595:146":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"5:6693:3006":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"6:5445:6156":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"5:3039:3059":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"11:0:2426":{"crate_id":11,"path":["hashbrown"],"kind":"module"},"6:1653:5825":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"5:3648:182":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"11:1582:7727":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"2:42126:3182":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"2:12904:3094":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"16:6263:5144":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"2:43893:2625":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"16:6895:5232":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"2:43639:7805":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"5:4162:3179":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"1:12355:1851":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"17:16093:4918":{"crate_id":17,"path":["object","xcoff","Symbol64"],"kind":"struct"},"6:7452:6573":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"17:16138:4927":{"crate_id":17,"path":["object","xcoff","CsectAux32"],"kind":"struct"},"1:8177:3249":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"1:11677:7850":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"2:26055:267":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"2:40350:7038":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"17:15273:4686":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"1:11822:7832":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"2:3187:3172":{"crate_id":2,"path":["core","marker","FnPtr"],"kind":"trait"},"2:39503:13932":{"crate_id":2,"path":["core","ops","coroutine","CoroutineState"],"kind":"enum"},"5:2102:2639":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"2:34046:14205":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"6:6417:6288":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"1:2312:3230":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"1:11220:30199":{"crate_id":1,"path":["std","sys","pal","unix","thread","cgroups","Cgroup"],"kind":"enum"},"1:12342:1721":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"16:5400:3976":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"5:734:250":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"16:7799:5010":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"2:41256:7084":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"2:8733:33217":{"crate_id":2,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"2:15:2378":{"crate_id":2,"path":["core","write"],"kind":"macro"},"17:13946:4338":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"1:951:7712":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"17:13292:4202":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"5:7668:7761":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"6:5250:6062":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"6:5236:6056":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"1:2713:30595":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"16:6300:7653":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"6:1485:5715":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"2:39564:213":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"16:7098:5261":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"6:7339:6537":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"2:8231:165":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"17:15342:4703":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"17:12362:4100":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"17:14372:4419":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"2:9467:3092":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"17:13344:4213":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"1:12359:1827":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"1:12341:1687":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"17:16069:4913":{"crate_id":17,"path":["object","xcoff","SymbolBytes"],"kind":"struct"},"6:6636:6404":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"17:14212:4399":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"17:13399:4221":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"2:39902:14029":{"crate_id":2,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"5:1531:5545":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"16:7618:5330":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"1:11000:3151":{"crate_id":1,"path":["std","sys","pal","unix","os","JoinPathsError"],"kind":"struct"},"2:23024:3086":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"1:10922:3246":{"crate_id":1,"path":["std","sys","pal","unix","fs","OpenOptions"],"kind":"struct"},"7:0:1902":{"crate_id":7,"path":["unwind"],"kind":"module"},"17:11214:7562":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"16:5831:5074":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"9:482:20482":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"1:562:8645":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"1:2283:2035":{"crate_id":1,"path":["std","fs"],"kind":"module"},"6:8288:6685":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"5:1549:7725":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"6:4870:5920":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"5:680:7733":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"6:5423:6140":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"1:10716:2644":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stdout"],"kind":"struct"},"16:5307:5060":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"1:12349:733":{"crate_id":1,"path":["std","f128"],"kind":"primitive"},"17:11189:4001":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"16:2418:4981":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"1:9137:2688":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"2:40731:7057":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"17:597:3972":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"17:15078:4639":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"6:6478:6318":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"5:2116:7741":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"18:481:3825":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"17:10350:3982":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"1:5769:2686":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"2:46410:7259":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"2:40399:7043":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"6:5665:6252":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"1:11008:2040":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Stdio"],"kind":"enum"},"11:1107:7722":{"crate_id":11,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"2:45875:7203":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"18:635:3850":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"11:844:8674":{"crate_id":11,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"18:581:2979":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"17:14463:4440":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"1:8236:7359":{"crate_id":1,"path":["std","hash","random","DefaultHasher"],"kind":"struct"},"11:396:34962":{"crate_id":11,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"1:11418:3424":{"crate_id":1,"path":["std","sys","os_str","bytes","Buf"],"kind":"struct"},"6:5134:6021":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"16:2936:20638":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"17:13797:4317":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"16:5415:5062":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"1:8025:4046":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"6:5260:6068":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"2:43765:6779":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"17:14912:4609":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"16:6872:5231":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"5:7595:14267":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"1:373:7816":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"2:46460:7261":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"2:46120:7229":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"17:14529:4447":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"1:8007:7355":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"17:15092:4643":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"2:44817:219":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"2:2643:102":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"2:46137:7230":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"18:589:3838":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"11:2554:34964":{"crate_id":11,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"2:40605:2580":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"2:41200:7078":{"crate_id":2,"path":["core","iter","sources","from_coroutine","FromCoroutine"],"kind":"struct"},"6:5483:6177":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls_crypto_info"],"kind":"struct"},"1:12339:1314":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"1:1853:3130":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"6:497:5656":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"6:6915:6507":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"18:706:3094":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"16:5385:3975":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"6:6650:6415":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"2:12704:3101":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"17:12659:7621":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdat"],"kind":"struct"},"5:6566:7726":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"2:3140:117":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"1:11023:25814":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","ProgramKind"],"kind":"enum"},"1:9180:7423":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"6:564:5699":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"1:932:7740":{"crate_id":1,"path":["std","collections","hash","map","ExtractIf"],"kind":"struct"},"2:11124:2671":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"6:5225:6049":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"6:491:5653":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"11:364:34960":{"crate_id":11,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"2:32210:7795":{"crate_id":2,"path":["core","error","tags","MaybeSizedValue"],"kind":"struct"},"6:6746:6445":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_statistics"],"kind":"struct"},"17:15521:4777":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"17:15281:4687":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"2:6913:6762":{"crate_id":2,"path":["core","iter","adapters","map_windows","Buffer"],"kind":"struct"},"2:44889:32729":{"crate_id":2,"path":["core","task","wake","ExtData"],"kind":"enum"},"11:1887:3006":{"crate_id":11,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"2:12849:2675":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"2:39729:6909":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"2:22642:8872":{"crate_id":2,"path":["core","core_simd","simd","cmp","ord","SimdOrd"],"kind":"trait"},"18:80:25745":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"2:43728:7807":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"2:13511:7786":{"crate_id":2,"path":["core","future","async_drop","AsyncDropOwning"],"kind":"struct"},"2:44192:3111":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"6:4891:5929":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"}},"external_crates":{"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":29}