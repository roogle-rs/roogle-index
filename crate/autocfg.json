{"root":"0:0:2618","crate_version":"1.3.0","includes_private":false,"index":{"b:5:5978-0:105:149":{"id":"b:5:5978-0:105:149","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"2:10794:132","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:33061:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"ToString","id":"5:5976:264","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:105:149","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:5980:1825"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:89:2578":{"id":"0:89:2578","crate_id":0,"name":"probe_type","span":{"filename":"src/lib.rs","begin":[407,4],"end":[409,5]},"visibility":"public","docs":"Tests whether the given type can be used.\n\nThe test code is subject to change, but currently looks like:\n\n```ignore\npub type Probe = TYPE;\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["name",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13940:30033":{"id":"2:13940:30033","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:12505:1895"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13929:1024":{"id":"2:13929:1024","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"1:12486:490"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:93:2590":{"id":"0:93:2590","crate_id":0,"name":"emit_expression_cfg","span":{"filename":"src/lib.rs","begin":[440,4],"end":[444,5]},"visibility":"public","docs":"Emits the given `cfg` value if `probe_expression` returns true.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["expr",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["cfg",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3092-0:105:149":{"id":"b:2:3092-0:105:149","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:3051:174","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:3061:270","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:105:149","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3095:149","2:3096:1850"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2775-0:105:149":{"id":"b:2:2775-0:105:149","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:33061:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2769:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:105:149","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2777:26213"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2804-0:155:2414":{"id":"b:2:2804-0:155:2414","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2792:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"CloneToUninit","id":"2:2802:3340","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"AutoCfg","id":"0:155:2414","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2806:26218"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13954:30060":{"id":"2:13954:30060","crate_id":2,"name":"split_at_mut_checked","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that’s not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at_checked`] method.\n\n[`split_at_checked`]: str::split_at_checked\n\n# Examples\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\nif let Some((first, last)) = s.split_at_mut_checked(3) {\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n\nassert_eq!(None, s.split_at_mut_checked(13));  // Inside “ö”\nassert_eq!(None, s.split_at_mut_checked(16));  // Beyond the string length\n```","links":{"str::split_at_checked":"2:13953:30059"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"2:42827:205","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:84:2564":{"id":"0:84:2564","crate_id":0,"name":"emit_has_path","span":{"filename":"src/lib.rs","begin":[359,4],"end":[363,5]},"visibility":"public","docs":"Emits a config value `has_PATH` if `probe_path` returns true.\n\nAny non-identifier characters in the `path` will be replaced with\n`_` in the generated config value.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["path",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13996:2783":{"id":"2:13996:2783","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"1:12486:490","self::pattern":"2:13618:3473","str::rsplitn":"2:13999:30067"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitN","id":"2:44934:3496","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13624:3467","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13958:7166":{"id":"2:13958:7166","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"2:44816:2991","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2772-0:105:149":{"id":"b:2:2772-0:105:149","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:33061:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2766:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:105:149","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2774:2887"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:82:2554":{"id":"0:82:2554","crate_id":0,"name":"emit_sysroot_crate","span":{"filename":"src/lib.rs","begin":[338,4],"end":[342,5]},"visibility":"public","docs":"Emits a config value `has_CRATE` if `probe_sysroot_crate` returns true.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["name",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:91:2584":{"id":"0:91:2584","crate_id":0,"name":"emit_type_cfg","span":{"filename":"src/lib.rs","begin":[422,4],"end":[426,5]},"visibility":"public","docs":"Emits the given `cfg` value if `probe_type` returns true.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["name",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["cfg",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2775-0:155:2414":{"id":"b:2:2775-0:155:2414","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:33061:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2769:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"AutoCfg","id":"0:155:2414","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2777:26213"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:85:2566":{"id":"0:85:2566","crate_id":0,"name":"emit_path_cfg","span":{"filename":"src/lib.rs","begin":[366,4],"end":[370,5]},"visibility":"public","docs":"Emits the given `cfg` value if `probe_path` returns true.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["path",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["cfg",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:14017:34371":{"id":"2:14017:34371","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"2:13618:3473","`DoubleEndedIterator`":"2:8516:133","prim@char":"1:12486:490","str::match_indices":"2:14014:34370"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatchIndices","id":"2:44998:3491","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13624:3467","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13624:3467","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13639:3468","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2806:26218":{"id":"2:2806:26218","crate_id":2,"name":"clone_to_uninit","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["dst",{"raw_pointer":{"mutable":true,"type":{"generic":"T"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:69:2444":{"id":"0:69:2444","crate_id":0,"name":"with_dir","span":{"filename":"src/lib.rs","begin":[159,4],"end":[192,5]},"visibility":"public","docs":"Creates a new `AutoCfg` instance with the specified output directory.\n\n# Common errors\n\n- `rustc` can't be executed, from `RUSTC` or in the `PATH`.\n- The version output from `rustc` can't be parsed.\n- `dir` is not a writable directory.\n","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["dir",{"generic":"T"}]],"output":{"resolved_path":{"name":"Result","id":"2:43092:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}},{"type":{"resolved_path":{"name":"Error","id":"0:105:149","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:3051:174","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"PathBuf","id":"1:5363:215","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:786:3434":{"id":"5:786:3434","crate_id":5,"name":"Owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"2:14061:9073":{"id":"2:14061:9073","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"2:5153:9073"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDefault","id":"2:45138:3487","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3081-0:155:2414":{"id":"b:2:3081-0:155:2414","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:3054:156","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"AutoCfg","id":"0:155:2414","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3083:857"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:14052:29964":{"id":"2:14052:29964","crate_id":2,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"2:40728:14447","Self::is_ascii":"2:14051:29447"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:42827:205","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"AsciiChar","id":"2:40728:14447","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:42920:9080-0:155:2414":{"id":"a:2:42920:9080-0:155:2414","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:42920:9080","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"AutoCfg","id":"0:155:2414","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:13984:30062":{"id":"2:13984:30062","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"1:12486:490","self::pattern":"2:13618:3473"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitInclusive","id":"2:13408:3476","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13624:3467","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:33060:248-0:155:2414":{"id":"a:2:33060:248-0:155:2414","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:33060:248","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"AutoCfg","id":"0:155:2414","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:13999:30067":{"id":"2:13999:30067","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"1:12486:490","str::splitn":"2:13996:2783","self::pattern":"2:13618:3473"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitN","id":"2:44952:3495","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13624:3467","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13624:3467","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13639:3468","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:3948:1865":{"id":"2:3948:1865","crate_id":2,"name":"type_id","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"TypeId","id":"2:40544:7337","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:83:2559":{"id":"0:83:2559","crate_id":0,"name":"probe_path","span":{"filename":"src/lib.rs","begin":[351,4],"end":[353,5]},"visibility":"public","docs":"Tests whether the given path can be used.\n\nThe test code is subject to change, but currently looks like:\n\n```ignore\npub use PATH;\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["path",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:86:2569":{"id":"0:86:2569","crate_id":0,"name":"probe_trait","span":{"filename":"src/lib.rs","begin":[379,4],"end":[381,5]},"visibility":"public","docs":"Tests whether the given trait can be used.\n\nThe test code is subject to change, but currently looks like:\n\n```ignore\npub trait Probe: TRAIT + Sized {}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["name",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13945:30031":{"id":"2:13945:30031","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:11699:251","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:11699:251","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"5:5727:14609":{"id":"5:5727:14609","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7809:256"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["from",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7809:256","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13624:3467","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:14014:34370":{"id":"2:14014:34370","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"2:13618:3473","`DoubleEndedIterator`":"2:8516:133","prim@char":"1:12486:490","str::rmatch_indices":"2:14017:34371"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"MatchIndices","id":"2:44980:3490","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13624:3467","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:3338:3544-0:105:149":{"id":"a:2:3338:3544-0:105:149","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"2:3338:3544","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:105:149","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:14031:34377":{"id":"2:14031:34377","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12486:490","self::pattern":"2:13618:3473"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13624:3467","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:788:3436":{"id":"5:788:3436","crate_id":5,"name":"clone_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["target",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13967:2780":{"id":"2:13967:2780","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, in which case this function will return true if\nthe `&str` is a prefix of this string slice.\n\nThe [pattern] can also be a [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\nThese will only be checked against the first character of this string slice.\nLook at the second example below regarding behavior for slices of [`char`]s.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```\n\n```\nlet bananas = \"bananas\";\n\n// Note that both of these assert successfully.\nassert!(bananas.starts_with(&['b', 'a', 'n', 'a']));\nassert!(bananas.starts_with(&['a', 'b', 'c', 'd']));\n```","links":{"prim@char":"1:12486:490","self::pattern":"2:13618:3473"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13624:3467","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:95:2596":{"id":"0:95:2596","crate_id":0,"name":"emit_constant_cfg","span":{"filename":"src/lib.rs","begin":[458,4],"end":[462,5]},"visibility":"public","docs":"Emits the given `cfg` value if `probe_constant` returns true.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["expr",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["cfg",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:14037:30071":{"id":"2:14037:30071","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12486:490","self::pattern":"2:13618:3473"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["suffix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42827:205","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13624:3467","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13624:3467","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13639:3468","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:42921:9199-0:155:2414":{"id":"a:2:42921:9199-0:155:2414","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:42921:9199","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"AutoCfg","id":"0:155:2414","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:3090:149":{"id":"2:3090:149","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"2:3061:270","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}}},"0:80:2458":{"id":"0:80:2458","crate_id":0,"name":"probe_raw","span":{"filename":"src/lib.rs","begin":[321,4],"end":[323,5]},"visibility":"public","docs":"Tests whether the given code can be compiled as a Rust library.\n\nThis will only return `Ok` if the compiler ran and exited successfully,\nper `ExitStatus::success()`.\nThe code is passed to the compiler exactly as-is, notably not even\nadding the [`#![no_std]`][Self::no_std] attribute like other probes.\n\nRaw probes are useful for testing functionality that's not yet covered\nby the rest of the `AutoCfg` API. For example, the following attribute\n**must** be used at the crate level, so it wouldn't work within the code\ntemplates used by other `probe_*` methods.\n\n```\n# extern crate autocfg;\n# // Normally, cargo will set `OUT_DIR` for build scripts.\n# std::env::set_var(\"OUT_DIR\", \"target\");\nlet ac = autocfg::new();\nassert!(ac.probe_raw(\"#![no_builtins]\").is_ok());\n```\n\nRust nightly features could be tested as well -- ideally including a\ncode sample to ensure the unstable feature still works as expected.\nFor example, `slice::group_by` was renamed to `chunk_by` when it was\nstabilized, even though the feature name was unchanged, so testing the\n`#![feature(..)]` alone wouldn't reveal that. For larger snippets,\n[`include_str!`] may be useful to load them from separate files.\n\n```\n# extern crate autocfg;\n# // Normally, cargo will set `OUT_DIR` for build scripts.\n# std::env::set_var(\"OUT_DIR\", \"target\");\nlet ac = autocfg::new();\nlet code = r#\"\n    #![feature(slice_group_by)]\n    pub fn probe(slice: &[i32]) -> impl Iterator<Item = &[i32]> {\n        slice.group_by(|a, b| a == b)\n    }\n\"#;\nif ac.probe_raw(code).is_ok() {\n    autocfg::emit(\"has_slice_group_by\");\n}\n```","links":{"Self::no_std":"0:71:1240","`include_str!`":"2:34:963"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["code",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:43092:237","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}},{"type":{"resolved_path":{"name":"Error","id":"0:105:149","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5730:35077":{"id":"5:5730:35077","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7809:256"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["count",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7809:256","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13624:3467","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3081-0:105:149":{"id":"b:2:3081-0:105:149","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:3054:156","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:105:149","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3083:857"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:14049:2788":{"id":"2:14049:2788","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"2:13579:148","`FromStr`":"2:13578:3042"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:43092:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"FromStr","id":"2:13578:3042","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"2:13578:3042","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13959:32015":{"id":"2:13959:32015","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"2:13960:31944"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitWhitespace","id":"2:45104:3477","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:68:1208":{"id":"0:68:1208","crate_id":0,"name":"new","span":{"filename":"src/lib.rs","begin":[144,4],"end":[149,5]},"visibility":"public","docs":"Creates a new `AutoCfg` instance.\n\n# Common errors\n\n- `rustc` can't be executed, from `RUSTC` or in the `PATH`.\n- The version output from `rustc` can't be parsed.\n- `OUT_DIR` is not set in the environment, or is not a writable directory.\n","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"Result","id":"2:43092:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}},{"type":{"resolved_path":{"name":"Error","id":"0:105:149","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:71:1240":{"id":"0:71:1240","crate_id":0,"name":"no_std","span":{"filename":"src/lib.rs","begin":[210,4],"end":[212,5]},"visibility":"public","docs":"Returns whether `AutoCfg` is using `#![no_std]` in its probes.\n\nThis is automatically detected during construction -- if an empty probe\nfails while one with `#![no_std]` succeeds, then the attribute will be\nused for all further probes. This is usually only necessary when the\n`TARGET` lacks `std` altogether. If neither succeeds, `no_std` is not\nset, but that `AutoCfg` will probably only work for version checks.\n\nThis attribute changes the implicit [prelude] from `std` to `core`,\nwhich may affect the paths you need to use in other probes. It also\nrestricts some types that otherwise get additional methods in `std`,\nlike floating-point trigonometry and slice sorting.\n\nSee also [`set_no_std`](#method.set_no_std).\n\n[prelude]: https://doc.rust-lang.org/reference/names/preludes.html#the-no_std-attribute","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:14053:29451":{"id":"2:14053:29451","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13928":{"id":"2:13928","crate_id":2,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["2:13929:1024","2:13930:2609","2:13931:34360","2:13932:34361","2:13934:34362","2:13937:29941","2:13938:34363","2:13939:350","2:13940:30033","2:13941:30029","2:13943:30030","2:13945:30031","2:13947:30032","2:13949:34364","2:13950:34365","2:13951:30055","2:13952:30056","2:13953:30059","2:13954:30060","2:13956:2597","2:13957:7593","2:13958:7166","2:13959:32015","2:13960:31944","2:13961:2778","2:13962:34366","2:13963:32004","2:13964:2607","2:13967:2780","2:13970:29600","2:13973:2779","2:13977:3376","2:13981:2610","2:13984:30062","2:13987:30064","2:13990:34367","2:13993:34368","2:13996:2783","2:13999:30067","2:14002:30069","2:14005:30070","2:14008:2901","2:14011:34369","2:14014:34370","2:14017:34371","2:14020:2616","2:14022:34372","2:14024:34373","2:14026:34374","2:14027:34375","2:14028:34376","2:14031:34377","2:14034:26238","2:14037:30071","2:14040:34378","2:14043:34379","2:14046:34380","2:14049:2788","2:14051:29447","2:14052:29964","2:14053:29451","2:14054:29452","2:14055:29453","2:14056:29967","2:14057:29968","2:14058:29969","2:14059:34381","2:14061:9073","2:14062:34382"],"negative":false,"synthetic":false,"blanket_impl":null}}},"5:5745:29450":{"id":"5:5745:29450","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"2:14055:29453"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7809:256","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:3080:2451":{"id":"2:3080:2451","crate_id":2,"name":"into","span":null,"visibility":"default","docs":"Calls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of\n<code>[From]&lt;T&gt; for U</code> chooses to do.","links":{"From":"2:3054:156"},"attrs":["#[track_caller]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"U"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:3303:260-0:105:149":{"id":"a:2:3303:260-0:105:149","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3303:260","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:105:149","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:14026:34374":{"id":"2:14026:34374","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:28:461":{"id":"0:28:461","crate_id":0,"name":"cause","span":{"filename":"src/error.rs","begin":[19,4],"end":[26,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:42827:205","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"dyn_trait":{"traits":[{"trait":{"name":"error::Error","id":"2:3140:149","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]}],"lifetime":null}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:73:2482":{"id":"0:73:2482","crate_id":0,"name":"probe_rustc_version","span":{"filename":"src/lib.rs","begin":[223,4],"end":[225,5]},"visibility":"public","docs":"Tests whether the current `rustc` reports a version greater than\nor equal to \"`major`.`minor`\".","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["major",{"primitive":"usize"}],["minor",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:33119:3124-0:155:2414":{"id":"a:2:33119:3124-0:155:2414","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:33119:3124","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"AutoCfg","id":"0:155:2414","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:27:2739":{"id":"0:27:2739","crate_id":0,"name":"description","span":{"filename":"src/error.rs","begin":[15,4],"end":[17,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5741:35079":{"id":"5:5741:35079","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:7809:256"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7809:256","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:3083:857":{"id":"2:3083:857","crate_id":2,"name":"from","span":null,"visibility":"default","docs":"Returns the argument unchanged.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["t",{"generic":"T"}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13953:30059":{"id":"2:13953:30059","crate_id":2,"name":"split_at_checked","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that’s not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut_checked`]\nmethod.\n\n[`split_at_mut_checked`]: str::split_at_mut_checked\n\n# Examples\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at_checked(3).unwrap();\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n\nassert_eq!(None, s.split_at_checked(13));  // Inside “ö”\nassert_eq!(None, s.split_at_checked(16));  // Beyond the string length\n```","links":{"str::split_at_mut_checked":"2:13954:30060"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"2:42827:205","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13950:34365":{"id":"2:13950:34365","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"1:12492:1765","crate::ops::IndexMut":"2:3608:9112","str::slice_unchecked":"2:13949:34364"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:14034:26238":{"id":"2:14034:26238","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns the substring after the prefix,\nwrapped in `Some`. Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12486:490","self::pattern":"2:13618:3473"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["prefix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42827:205","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13624:3467","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:26":{"id":"0:26","crate_id":0,"name":null,"span":{"filename":"src/error.rs","begin":[14,0],"end":[27,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["source","cause","provide","type_id","description"],"trait":{"name":"Error","id":"2:3140:149","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:105:149","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:27:2739","0:28:461"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:165:827":{"id":"0:165:827","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[86,16],"end":[86,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:10753:155","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:10734:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13952:30056":{"id":"2:13952:30056","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_mut_checked`](str::split_at_mut_checked).\n\n# Examples\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"2:13951:30055","str::split_at_mut_checked":"2:13954:30060"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:65:2433":{"id":"0:65:2433","crate_id":0,"name":"rerun_env","span":{"filename":"src/lib.rs","begin":[122,0],"end":[124,1]},"visibility":"public","docs":"Writes a line telling Cargo to rerun the build script if the environment\nvariable `var` changes.\n\nThis looks like: `cargo:rerun-if-env-changed=VAR`\n\nThis requires at least cargo 0.21.0, corresponding to rustc 1.20.0.  Earlier\nversions of cargo will simply ignore the directive.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["var",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13943:30030":{"id":"2:13943:30030","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:42829:202"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:42827:205","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:11699:251","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:11699:251","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13981:2610":{"id":"2:13981:2610","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"2:13618:3473","`DoubleEndedIterator`":"2:8516:133","prim@char":"1:12486:490","str::split_whitespace":"2:13959:32015","str::rsplit":"2:13987:30064"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Split","id":"2:44830:2992","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13624:3467","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5726:35076":{"id":"5:5726:35076","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:297:3130","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"5:297:3130","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:67":{"id":"0:67","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[135,0],"end":[463,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"AutoCfg","id":"0:155:2414","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:68:1208","0:69:2444","0:71:1240","0:72:2479","0:73:2482","0:74:2487","0:80:2458","0:81:2551","0:82:2554","0:83:2559","0:84:2564","0:85:2566","0:86:2569","0:87:2573","0:88:2575","0:89:2578","0:90:2582","0:91:2584","0:92:2587","0:93:2590","0:94:2593","0:95:2596"],"negative":false,"synthetic":false,"blanket_impl":null}}},"5:5725":{"id":"5:5725","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["5:5726:35076","5:5727:14609","5:5730:35077","5:5733:35078","5:5741:35079","5:5742:35080","5:5743:3014","5:5744:29449","5:5745:29450"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13963:32004":{"id":"2:13963:32004","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EncodeUtf16","id":"2:45122:3474","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:14056:29967":{"id":"2:14056:29967","crate_id":2,"name":"trim_ascii_start","span":null,"visibility":"public","docs":"Returns a string slice with leading ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\nassert_eq!(\" \\t \\u{3000}hello world\\n\".trim_ascii_start(), \"\\u{3000}hello world\\n\");\nassert_eq!(\"  \".trim_ascii_start(), \"\");\nassert_eq!(\"\".trim_ascii_start(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:1126:38466"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13931:34360":{"id":"2:13931:34360","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13970:29600":{"id":"2:13970:29600","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"1:12486:490","self::pattern":"2:13618:3473"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13624:3467","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13624:3467","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13639:3468","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:29":{"id":"0:29","crate_id":0,"name":null,"span":{"filename":"src/error.rs","begin":[29,0],"end":[42,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Display","id":"2:10794:132","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:105:149","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:30:827"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:74:2487":{"id":"0:74:2487","crate_id":0,"name":"emit_rustc_version","span":{"filename":"src/lib.rs","begin":[229,4],"end":[233,5]},"visibility":"public","docs":"Sets a `cfg` value of the form `rustc_major_minor`, like `rustc_1_29`,\nif the current `rustc` is at least that version.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["major",{"primitive":"usize"}],["minor",{"primitive":"usize"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:162":{"id":"0:162","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[86,9],"end":[86,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2792:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"AutoCfg","id":"0:155:2414","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:163:494"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13951:30055":{"id":"2:13951:30055","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_checked`](str::split_at_checked).\n\n# Examples\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_checked":"2:13953:30059","str::split_at_mut":"2:13952:30056"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:3338:3544-0:155:2414":{"id":"a:2:3338:3544-0:155:2414","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"2:3338:3544","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"AutoCfg","id":"0:155:2414","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:14057:29968":{"id":"2:14057:29968","crate_id":2,"name":"trim_ascii_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\nassert_eq!(\"\\r hello world\\u{3000}\\n \".trim_ascii_end(), \"\\r hello world\\u{3000}\");\nassert_eq!(\"  \".trim_ascii_end(), \"\");\nassert_eq!(\"\".trim_ascii_end(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:1126:38466"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13934:34362":{"id":"2:13934:34362","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nIf `index` is greater than the length of the string, this returns the length of the string.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"2:13932:34361"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3087-0:105:149":{"id":"b:2:3087-0:105:149","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:3061:270","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:3057:271","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:105:149","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3090:149","2:3091:1852"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:105:149":{"id":"0:105:149","crate_id":0,"name":"Error","span":{"filename":"src/error.rs","begin":[10,0],"end":[12,1]},"visibility":"public","docs":"A common error type for the `autocfg` crate.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["a:2:3338:3544-0:105:149","a:2:42921:9199-0:105:149","a:2:42920:9080-0:105:149","a:2:33119:3124-0:105:149","a:2:3303:260-0:105:149","a:2:33060:248-0:105:149","b:2:3081-0:105:149","b:2:3946-0:105:149","b:2:2772-0:105:149","b:2:3087-0:105:149","b:2:2775-0:105:149","b:2:3077-0:105:149","b:2:3092-0:105:149","b:5:5978-0:105:149","0:29","0:26","0:107"]}}},"0:88:2575":{"id":"0:88:2575","crate_id":0,"name":"emit_trait_cfg","span":{"filename":"src/lib.rs","begin":[394,4],"end":[398,5]},"visibility":"public","docs":"Emits the given `cfg` value if `probe_trait` returns true.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["name",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["cfg",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:66:1208":{"id":"0:66:1208","crate_id":0,"name":"new","span":{"filename":"src/lib.rs","begin":[131,0],"end":[133,1]},"visibility":"public","docs":"Creates a new `AutoCfg` instance.\n\n# Panics\n\nPanics if `AutoCfg::new()` returns an error.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"AutoCfg","id":"0:155:2414","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3087-0:155:2414":{"id":"b:2:3087-0:155:2414","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:3061:270","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:3057:271","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"AutoCfg","id":"0:155:2414","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3090:149","2:3091:1852"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:5:784-0:155:2414":{"id":"b:5:784-0:155:2414","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2792:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:780:263","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"AutoCfg","id":"0:155:2414","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:786:3434","5:787:3435","5:788:3436"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13932:34361":{"id":"2:13932:34361","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3077-0:105:149":{"id":"b:2:3077-0:105:149","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:3054:156","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:3051:174","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:105:149","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3080:2451"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:108:827":{"id":"0:108:827","crate_id":0,"name":"fmt","span":{"filename":"src/error.rs","begin":[9,9],"end":[9,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:10753:155","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:10734:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13938:34363":{"id":"2:13938:34363","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"5:5743:3014":{"id":"5:5743:3014","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7809:256"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7809:256","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:14040:34378":{"id":"2:14040:34378","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12486:490","self::pattern":"2:13618:3473"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13624:3467","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13624:3467","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13639:3468","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3946-0:155:2414":{"id":"b:2:3946-0:155:2414","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:33061:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3944:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"AutoCfg","id":"0:155:2414","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3948:1865"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"5:5733:35078":{"id":"5:5733:35078","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7809:256"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7809:256","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13937:29941":{"id":"2:13937:29941","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:13140:2752"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:14002:30069":{"id":"2:14002:30069","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42827:205","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13624:3467","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:14054:29452":{"id":"2:14054:29452","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:787:3435":{"id":"5:787:3435","crate_id":5,"name":"to_owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13941:30029":{"id":"2:13941:30029","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:42829:202"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:42827:205","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:11699:251","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:11699:251","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:3096:1850":{"id":"2:3096:1850","crate_id":2,"name":"try_from","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["value",{"generic":"U"}]],"output":{"resolved_path":{"name":"Result","id":"2:43092:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"T"},"trait":{"name":"TryFrom","id":"2:3061:270","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13961:2778":{"id":"2:13961:2778","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nNote that any carriage return (`\\r`) not immediately followed by a\nline feed (`\\n`) does not split a line. These carriage returns are\nthereby included in the produced lines.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\r\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\n// Trailing carriage return is included in the last line\nassert_eq!(Some(\"baz\\r\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line does not require any ending:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Lines","id":"2:45084:2988","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:94:2593":{"id":"0:94:2593","crate_id":0,"name":"probe_constant","span":{"filename":"src/lib.rs","begin":[453,4],"end":[455,5]},"visibility":"public","docs":"Tests whether the given constant expression can be used.\n\nThe test code is subject to change, but currently looks like:\n\n```ignore\npub const PROBE: () = ((), EXPR).0;\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["expr",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:36-0:105:149":{"id":"0:36-0:105:149","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[74,0],"end":[74,21]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"error::Error","name":"Error","id":"0:105:149","glob":false}}},"0:87:2573":{"id":"0:87:2573","crate_id":0,"name":"emit_has_trait","span":{"filename":"src/lib.rs","begin":[387,4],"end":[391,5]},"visibility":"public","docs":"Emits a config value `has_TRAIT` if `probe_trait` returns true.\n\nAny non-identifier characters in the trait `name` will be replaced with\n`_` in the generated config value.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["name",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:163:494":{"id":"0:163:494","crate_id":0,"name":"clone","span":{"filename":"src/lib.rs","begin":[86,9],"end":[86,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"AutoCfg","id":"0:155:2414","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:164":{"id":"0:164","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[86,16],"end":[86,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10789:122","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"AutoCfg","id":"0:155:2414","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:165:827"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:3946-0:105:149":{"id":"b:2:3946-0:105:149","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:33061:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3944:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:105:149","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3948:1865"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:72:2479":{"id":"0:72:2479","crate_id":0,"name":"set_no_std","span":{"filename":"src/lib.rs","begin":[217,4],"end":[219,5]},"visibility":"public","docs":"Sets whether `AutoCfg` should use `#![no_std]` in its probes.\n\nSee also [`no_std`](#method.no_std).","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["no_std",{"primitive":"bool"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:14008:2901":{"id":"2:14008:2901","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::rmatches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"2:13618:3473","`DoubleEndedIterator`":"2:8516:133","prim@char":"1:12486:490","str::rmatches":"2:14011:34369"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Matches","id":"2:45034:3492","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13624:3467","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:30:827":{"id":"0:30:827","crate_id":0,"name":"fmt","span":{"filename":"src/error.rs","begin":[30,4],"end":[41,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"2:10753:155","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"Result","id":"2:43092:237","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}},{"type":{"resolved_path":{"name":"fmt::Error","id":"2:43985:149","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13993:34368":{"id":"2:13993:34368","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"2:13618:3473","str::split":"2:13981:2610","prim@char":"1:12486:490","str::split_terminator":"2:13990:34367"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitTerminator","id":"2:44898:3497","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13624:3467","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13624:3467","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13639:3468","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3092-0:155:2414":{"id":"b:2:3092-0:155:2414","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:3051:174","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:3061:270","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"AutoCfg","id":"0:155:2414","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3095:149","2:3096:1850"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:33119:3124-0:105:149":{"id":"a:2:33119:3124-0:105:149","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:33119:3124","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:105:149","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:14043:34379":{"id":"2:14043:34379","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12486:490","self::pattern":"2:13618:3473"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13624:3467","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:3095:149":{"id":"2:3095:149","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Infallible","id":"2:32984:3057","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"2:2777:26213":{"id":"2:2777:26213","crate_id":2,"name":"borrow_mut","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:14011:34369":{"id":"2:14011:34369","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"2:13618:3473","`DoubleEndedIterator`":"2:8516:133","prim@char":"1:12486:490","str::matches":"2:14008:2901"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatches","id":"2:45052:3493","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13624:3467","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13624:3467","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13639:3468","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:3091:1852":{"id":"2:3091:1852","crate_id":2,"name":"try_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Result","id":"2:43092:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"2:3061:270","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:14055:29453":{"id":"2:14055:29453","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:90:2582":{"id":"0:90:2582","crate_id":0,"name":"emit_has_type","span":{"filename":"src/lib.rs","begin":[415,4],"end":[419,5]},"visibility":"public","docs":"Emits a config value `has_TYPE` if `probe_type` returns true.\n\nAny non-identifier characters in the type `name` will be replaced with\n`_` in the generated config value.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["name",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:63:708":{"id":"0:63:708","crate_id":0,"name":"emit","span":{"filename":"src/lib.rs","begin":[101,0],"end":[103,1]},"visibility":"public","docs":"Writes a config flag for rustc on standard out.\n\nThis looks like: `cargo:rustc-cfg=CFG`\n\nCargo will use this in arguments to rustc, like `--cfg CFG`.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["cfg",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13962:34366":{"id":"2:13962:34366","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\", suggestion =\n\"lines\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinesAny","id":"2:45094:3489","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2772-0:155:2414":{"id":"b:2:2772-0:155:2414","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:33061:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2766:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"AutoCfg","id":"0:155:2414","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2774:2887"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13939:350":{"id":"2:13939:350","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"2:13940:30033","`u8`":"1:12505:1895"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13947:30032":{"id":"2:13947:30032","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:11699:251","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:11699:251","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:13990:34367":{"id":"2:13990:34367","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"2:13618:3473","str::split":"2:13981:2610","prim@char":"1:12486:490","`DoubleEndedIterator`":"2:8516:133","str::rsplit_terminator":"2:13993:34368"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitTerminator","id":"2:44880:3498","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13624:3467","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:42921:9199-0:105:149":{"id":"a:2:42921:9199-0:105:149","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:42921:9199","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:105:149","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"2:13960:31944":{"id":"2:13960:31944","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"2:13959:32015"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitAsciiWhitespace","id":"2:45113:3475","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13964:2607":{"id":"2:13964:2607","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"1:12486:490","self::pattern":"2:13618:3473"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13624:3467","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:107":{"id":"0:107","crate_id":0,"name":null,"span":{"filename":"src/error.rs","begin":[9,9],"end":[9,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10789:122","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:105:149","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:108:827"],"negative":false,"synthetic":false,"blanket_impl":null}}},"5:5742:35080":{"id":"5:5742:35080","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:297:3130","`String`":"5:7809:256"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:297:3130","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"5:7809:256","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5980:1825":{"id":"5:5980:1825","crate_id":5,"name":"to_string","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7809:256","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:14059:34381":{"id":"2:14059:34381","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"2:5152:34381"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDebug","id":"2:45129:3486","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:14062:34382":{"id":"2:14062:34382","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"2:5150:34382"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeUnicode","id":"2:45147:3488","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13977:3376":{"id":"2:13977:3376","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"2:42829:202","prim@char":"1:12486:490","self::pattern":"2:13618:3473"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42827:205","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13624:3467","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13624:3467","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13639:3468","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:33060:248-0:105:149":{"id":"a:2:33060:248-0:105:149","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:33060:248","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:105:149","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:14046:34380":{"id":"2:14046:34380","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12486:490","self::pattern":"2:13618:3473"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13624:3467","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13624:3467","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13639:3468","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:14005:30070":{"id":"2:14005:30070","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42827:205","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13624:3467","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13624:3467","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13639:3468","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:14020:2616":{"id":"2:14020:2616","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:0:2618":{"id":"0:0:2618","crate_id":0,"name":"autocfg","span":{"filename":"src/lib.rs","begin":[1,0],"end":[535,1]},"visibility":"public","docs":"A Rust library for build scripts to automatically configure code based on\ncompiler support.  Code snippets are dynamically tested to see if the `rustc`\nwill accept them, rather than hard-coding specific version support.\n\n\n## Usage\n\nAdd this to your `Cargo.toml`:\n\n```toml\n[build-dependencies]\nautocfg = \"1\"\n```\n\nThen use it in your `build.rs` script to detect compiler features.  For\nexample, to test for 128-bit integer support, it might look like:\n\n```rust\nextern crate autocfg;\n\nfn main() {\n#   // Normally, cargo will set `OUT_DIR` for build scripts.\n#   std::env::set_var(\"OUT_DIR\", \"target\");\n    let ac = autocfg::new();\n    ac.emit_has_type(\"i128\");\n\n    // (optional) We don't need to rerun for anything external.\n    autocfg::rerun_path(\"build.rs\");\n}\n```\n\nIf the type test succeeds, this will write a `cargo:rustc-cfg=has_i128` line\nfor Cargo, which translates to Rust arguments `--cfg has_i128`.  Then in the\nrest of your Rust code, you can add `#[cfg(has_i128)]` conditions on code that\nshould only be used when the compiler supports it.\n\n## Caution\n\nMany of the probing methods of `AutoCfg` document the particular template they\nuse, **subject to change**. The inputs are not validated to make sure they are\nsemantically correct for their expected use, so it's _possible_ to escape and\ninject something unintended. However, such abuse is unsupported and will not\nbe considered when making changes to the templates.","links":{},"attrs":["#![deny(missing_debug_implementations)]","#![deny(missing_docs)]","#![allow(unknown_lints)]","#![allow(bare_trait_objects)]","#![allow(ellipsis_inclusive_range_patterns)]"],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:36-0:105:149","0:155:2414","0:63:708","0:64:2427","0:65:2433","0:66:1208"],"is_stripped":false}}},"2:13949:34364":{"id":"2:13949:34364","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"1:12492:1765","str::slice_mut_unchecked":"2:13950:34365","crate::ops::Index":"2:40375:9111"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:14051:29447":{"id":"2:14051:29447","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:14028:34376":{"id":"2:14028:34376","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"1:12486:490","self::pattern":"2:13618:3473"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13624:3467","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13624:3467","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"2:13644:3466","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:14027:34375":{"id":"2:14027:34375","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13930:2609":{"id":"2:13930:2609","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13956:2597":{"id":"2:13956:2597","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:12486:490"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chars","id":"2:44800:3482","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13957:7593":{"id":"2:13957:7593","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the previous character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:12486:490"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CharIndices","id":"2:44806:3481","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:14058:29969":{"id":"2:14058:29969","crate_id":2,"name":"trim_ascii","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing ASCII whitespace\nremoved.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\nassert_eq!(\"\\r hello world\\n \".trim_ascii(), \"hello world\");\nassert_eq!(\"  \".trim_ascii(), \"\");\nassert_eq!(\"\".trim_ascii(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:1126:38466"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:64:2427":{"id":"0:64:2427","crate_id":0,"name":"rerun_path","span":{"filename":"src/lib.rs","begin":[111,0],"end":[113,1]},"visibility":"public","docs":"Writes a line telling Cargo to rerun the build script if `path` changes.\n\nThis looks like: `cargo:rerun-if-changed=PATH`\n\nThis requires at least cargo 0.7.0, corresponding to rustc 1.6.0.  Earlier\nversions of cargo will simply ignore the directive.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["path",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13973:2779":{"id":"2:13973:2779","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"2:42829:202","prim@char":"1:12486:490","self::pattern":"2:13618:3473"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42827:205","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13624:3467","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:92:2587":{"id":"0:92:2587","crate_id":0,"name":"probe_expression","span":{"filename":"src/lib.rs","begin":[435,4],"end":[437,5]},"visibility":"public","docs":"Tests whether the given expression can be used.\n\nThe test code is subject to change, but currently looks like:\n\n```ignore\npub fn probe() { let _ = EXPR; }\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["expr",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:3303:260-0:155:2414":{"id":"a:2:3303:260-0:155:2414","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3303:260","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"AutoCfg","id":"0:155:2414","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:155:2414":{"id":"0:155:2414","crate_id":0,"name":"AutoCfg","span":{"filename":"src/lib.rs","begin":[87,0],"end":[94,1]},"visibility":"public","docs":"Helper to detect compiler features for `cfg` output in build scripts.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["0:67","a:2:3338:3544-0:155:2414","a:2:42921:9199-0:155:2414","a:2:42920:9080-0:155:2414","a:2:33119:3124-0:155:2414","a:2:3303:260-0:155:2414","a:2:33060:248-0:155:2414","b:2:3081-0:155:2414","b:2:3946-0:155:2414","b:2:2772-0:155:2414","b:2:3087-0:155:2414","b:2:2775-0:155:2414","b:2:3077-0:155:2414","b:2:2804-0:155:2414","b:2:3092-0:155:2414","b:5:784-0:155:2414","0:162","0:164"]}}},"2:2774:2887":{"id":"2:2774:2887","crate_id":2,"name":"borrow","span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[rustc_diagnostic_item = \"noop_method_borrow\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:14022:34372":{"id":"2:14022:34372","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:14024:34373":{"id":"2:14024:34373","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5744:29449":{"id":"5:5744:29449","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"2:14054:29452"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7809:256","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3077-0:155:2414":{"id":"b:2:3077-0:155:2414","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:3054:156","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:3051:174","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"AutoCfg","id":"0:155:2414","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3080:2451"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:42920:9080-0:105:149":{"id":"a:2:42920:9080-0:105:149","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:42920:9080","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:105:149","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"2:13987:30064":{"id":"2:13987:30064","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"2:13618:3473","`DoubleEndedIterator`":"2:8516:133","prim@char":"1:12486:490","str::split":"2:13981:2610"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplit","id":"2:44848:3494","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13624:3467","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13624:3467","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13639:3468","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:81:2551":{"id":"0:81:2551","crate_id":0,"name":"probe_sysroot_crate","span":{"filename":"src/lib.rs","begin":[332,4],"end":[335,5]},"visibility":"public","docs":"Tests whether the given sysroot crate can be used.\n\nThe test code is subject to change, but currently looks like:\n\n```ignore\nextern crate CRATE as probe;\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["name",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}}},"paths":{"2:14283:7492":{"crate_id":2,"path":["core","future","async_drop","Fuse"],"kind":"struct"},"2:33804:5750":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"2:11965:3476":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"2:45084:2988":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"2:23665:31998":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"1:8892:3037":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"16:7372:5485":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"2:41840:7507":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"1:6606:197":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"2:45744:7624":{"crate_id":2,"path":["core","future","async_drop","Noop"],"kind":"struct"},"16:7521:5737":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"1:12458:9079":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"6:7361:6976":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"1:5742:2408":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"11:881:8155":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"17:15121:4930":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"1:3917:8269":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"17:12191:4502":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsectionIterator"],"kind":"struct"},"17:13933:4693":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"2:34016:14618":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"2:41642:7498":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"6:1667:6264":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"2:33026:8232":{"crate_id":2,"path":["core","error","private","Internal"],"kind":"struct"},"2:41339:7478":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"struct"},"6:6917:6940":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"18:608:7961":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"2:48153:7761":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"1:2497:3611":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"5:4332:2966":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"1:5363:215":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"6:4792:6292":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"2:33062:257":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"1:12469:27348":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"17:15024:4917":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"17:16555:5372":{"crate_id":17,"path":["object","xcoff","AuxHeader64"],"kind":"struct"},"1:2555:2404":{"crate_id":1,"path":["std","io"],"kind":"module"},"2:47917:7741":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"1:10487:3059":{"crate_id":1,"path":["std","sys","pal","unix","pipe","AnonPipe"],"kind":"struct"},"2:2209:2452":{"crate_id":2,"path":["core","ptr","metadata","metadata"],"kind":"function"},"6:465:6073":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"2:3608:9112":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"16:6942:5640":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"17:10823:4447":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"2:13294:7576":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"1:8579:2988":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"2:41347:7479":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"1:3311:29385":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"17:13635:4629":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"1:2522:3619":{"crate_id":1,"path":["std","fs","exists"],"kind":"function"},"2:13140:2752":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"2:23915:7257":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI64Inner"],"kind":"struct"},"6:1500:6153":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"18:706:3469":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"6:5271:6504":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"6:7431:6999":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"2:22863:3625":{"crate_id":2,"path":["core","core_simd","to_bytes","sealed","Sealed"],"kind":"trait"},"6:5282:6512":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"2:40379:7331":{"crate_id":2,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"2:45418:7600":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"1:5656:3050":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"1:8852:3036":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"16:6502:21026":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"6:8249:7109":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"6:8343:7130":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"2:11015:168":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"2:8931:161":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"1:2329:3603":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"5:1616:8148":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"17:10246:21981":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"2:41236:3488":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"17:15090:4924":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"17:13451:4615":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"5:5429:14363":{"crate_id":5,"path":["alloc","rc","UniqueRcUninit"],"kind":"struct"},"1:10987:7873":{"crate_id":1,"path":["std","sys","pal","unix","fs","FilePermissions"],"kind":"struct"},"2:14554:7213":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"1:3078:149":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"17:12962:22122":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"16:8320:21928":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"2:33030:5794":{"crate_id":2,"path":["core","error","tags","Value"],"kind":"struct"},"1:8062:4518":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"1:11598:28804":{"crate_id":1,"path":["std","sys","sync","once","futex","CompletionGuard"],"kind":"struct"},"2:3391:5754":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"1:4172:9137":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"17:15431:5052":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"17:16656:5391":{"crate_id":17,"path":["object","xcoff","Symbol64"],"kind":"struct"},"5:1123:34199":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"2:8934:3554":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"17:15315:4959":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"2:45558:7612":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"6:5230:6482":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"2:47399:7696":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"6:6876:6914":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"16:5742:4439":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"1:5622:3048":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"6:7341:6970":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"17:11566:7998":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"17:10803:2991":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"16:4152:5504":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"17:12851:4570":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"6:8273:7113":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"16:8267:5819":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"16:8209:5481":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"1:12505:1895":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"16:6731:8103":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"2:10427:32084":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"2:3576:153":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"2:5012:3121":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"17:15586:5101":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"16:2990:5473":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"17:16832:4698":{"crate_id":17,"path":["object","xcoff","Rel64"],"kind":"struct"},"11:2349:8157":{"crate_id":11,"path":["hashbrown","table","VacantEntry"],"kind":"struct"},"6:5658:6678":{"crate_id":6,"path":["libc","unix","linux_like","linux","sched_attr"],"kind":"struct"},"16:7980:5489":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"16:3110:5496":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"1:9594:3521":{"crate_id":1,"path":["std","sys","pal","unix","args","Args"],"kind":"struct"},"1:2755:2994":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"17:15148:4933":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"16:7282:5705":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"2:45546:7609":{"crate_id":2,"path":["core","str","LinesMap"],"kind":"struct"},"5:985:9096":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"2:47594:7703":{"crate_id":2,"path":["core","core_arch","simd","m16x16"],"kind":"struct"},"16:2840:5466":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"2:34556:14621":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"5:789:121":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"1:1100:8156":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"2:23816:7248":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU8Inner"],"kind":"struct"},"6:570:6135":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"1:11856:8287":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"1:9305:3085":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"17:15731:5134":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"6:5051:6438":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"2:43157:207":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"9:422:20903":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"1:9759:3623":{"crate_id":1,"path":["std","sys","pal","unix","fs","ReadDir"],"kind":"struct"},"16:7883:5584":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"6:8261:7111":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"16:5449:5531":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"1:10419:8323":{"crate_id":1,"path":["std","sys","pal","unix","os","Env"],"kind":"struct"},"2:47490:7699":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"6:8031:7107":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"6:1727:6286":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"16:5144:5521":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"11:835:8149":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"1:9195:3056":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"1:12501:918":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"2:23882:7254":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI8Inner"],"kind":"struct"},"1:9438:3086":{"crate_id":1,"path":["std","sync","mutex","MappedMutexGuard"],"kind":"struct"},"9:500:6055":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"5:7539:3803":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"6:4881:6355":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"17:13028:8056":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSectionIterator"],"kind":"struct"},"16:6368:5576":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"16:0:2798":{"crate_id":16,"path":["gimli"],"kind":"module"},"16:6808:5474":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"1:7838:8555":{"crate_id":1,"path":["std","panicking","begin_panic","Payload"],"kind":"struct"},"2:41691:7503":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"5:1214:34177":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"2:15:2746":{"crate_id":2,"path":["core","write"],"kind":"macro"},"17:14438:4808":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"16:2486:5450":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"11:2148:8157":{"crate_id":11,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"16:7416:8107":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"1:12511:1957":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"5:3309:34269":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"1:12493:1855":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"17:11691:8002":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"1:10966:7865":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileAttr"],"kind":"struct"},"17:10141:21978":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"16:7508:5734":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"2:3817:115":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"6:5311:6524":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"17:12347:8035":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"6:6534:6778":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"17:11173:35511":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"17:10368:21985":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"1:8226:3624":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"1:1872:3506":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"2:42605:7521":{"crate_id":2,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"17:14547:4823":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"1:8110:3525":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"2:41403:2991":{"crate_id":2,"path":["core","ffi","c_str","Bytes"],"kind":"struct"},"18:481:4280":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"17:12736:8049":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"1:991:8154":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"16:8096:8137":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"2:14574:7215":{"crate_id":2,"path":["core","task","wake","LocalWaker"],"kind":"struct"},"6:1711:6282":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"1:2483:3607":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"1:2509:3617":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"16:4810:5511":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"1:5885:7786":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"16:896:8065":{"crate_id":16,"path":["gimli","read","endian_slice","DebugBytes"],"kind":"struct"},"2:45428:7604":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"2:3045:78":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"1:9377:7860":{"crate_id":1,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"2:41376:14685":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"16:7938:5797":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"16:6573:5611":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"17:13570:21995":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"1:11081:27352":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","ProgramKind"],"kind":"enum"},"18:680:4306":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"17:14099:4731":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"5:6130:72":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"16:8669:5794":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"6:4890:6360":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"6:1563:6189":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"5:1889:8177":{"crate_id":5,"path":["alloc","collections","btree","map","ExtractIf"],"kind":"struct"},"1:4120:9133":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"2:9726:3467":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"1:11034:31879":{"crate_id":1,"path":["std","sys","pal","unix","kernel_copy","FdHandle"],"kind":"enum"},"6:6526:6773":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"1:4903:9164":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"2:7863:14443":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccess"],"kind":"trait"},"2:43181:90":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"6:7463:7010":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"2:45807:8248":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"17:14773:4876":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"16:2550:5453":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"5:7773:2931":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"11:328:5973":{"crate_id":11,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"17:15829:5158":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"2:45815:7625":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"1:9242:7857":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"17:15981:5198":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"5:3085:3434":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"1:4312:28737":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"5:1370:5740":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"2:43255:87":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"1:11355:173":{"crate_id":1,"path":["std","sys","pal","unix","time","Instant"],"kind":"struct"},"16:7990:5802":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"2:23871:7253":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroUsizeInner"],"kind":"struct"},"17:16171:5266":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"2:47272:7675":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"1:9509:7864":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"2:8448:176":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"6:1514:6158":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"11:740:8148":{"crate_id":11,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"2:42649:7528":{"crate_id":2,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"16:2796:5464":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"2:45052:3493":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"2:884:201":{"crate_id":2,"path":["core","num","nonzero","NonZero"],"kind":"struct"},"6:1494:6150":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"0:64:2427":{"crate_id":0,"path":["autocfg","rerun_path"],"kind":"function"},"1:9473:173":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"16:7807:35502":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"2:41619:7496":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"17:11309:7992":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"6:5420:6568":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"2:40555:7339":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"1:4071:2736":{"crate_id":1,"path":["std","num"],"kind":"module"},"6:4970:6396":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"19:0:1323":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"5:5976:264":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"6:5217:6478":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"1:8549:2989":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"16:7542:5739":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"16:6239:5554":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"17:12319:8032":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"5:3338:5980":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"2:13408:3476":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"17:11515:7995":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"11:1893:8177":{"crate_id":11,"path":["hashbrown","set","ExtractIf"],"kind":"struct"},"1:5106:9183":{"crate_id":1,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"2:12042:8216":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"1:7508:28726":{"crate_id":1,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"2:3802:33519":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"17:2437:7977":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"17:13014:8054":{"crate_id":17,"path":["object","read","xcoff","file","XcoffFile"],"kind":"struct"},"5:2256:9059":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"1:3570:2966":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"16:7949:5488":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"17:11788:8004":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"2:45550:7610":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"17:14586:4827":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"1:8281:8295":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"5:4498:34241":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"2:42959:7545":{"crate_id":2,"path":["core","range","iter","IterRange"],"kind":"struct"},"2:40295:3557":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"17:10097:21976":{"crate_id":17,"path":["object","common","SubArchitecture"],"kind":"enum"},"1:1627:8163":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"2:35220:5759":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"1:11013:7876":{"crate_id":1,"path":["std","sys","pal","unix","fs","Mode"],"kind":"struct"},"17:13798:4666":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"2:46980:7652":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"5:3364:5983":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"1:9329:8313":{"crate_id":1,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"11:708:8147":{"crate_id":11,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"2:23456:7218":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"11:123:5969":{"crate_id":11,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"17:12869:4615":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"6:7548:7066":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"5:1555:3381":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"2:4934:3363":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"5:6162:3080":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"17:16198:5275":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"2:7119:7193":{"crate_id":2,"path":["core","iter","adapters","map_windows","Buffer"],"kind":"struct"},"6:6882:6915":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"6:5025:6426":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"5:1002:3038":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"1:8381:2738":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"2:8457:3129":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"2:48230:7779":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"1:11944:8268":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"2:41580:7492":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"5:39:9113":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"6:5635:6671":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifconf"],"kind":"struct"},"2:43553:3081":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"5:1636:8176":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"17:11958:8012":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"16:3126:21057":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"17:14807:4879":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"2:41667:4303":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"17:16008:5205":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"17:12537:8038":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"1:3351:3009":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"1:600:8255":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"2:48017:7745":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"2:3783:14414":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"2:14348:32498":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"16:5113:5520":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"2:23577:7221":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"17:10218:21980":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"2:43072:223":{"crate_id":2,"path":["core","range","RangeFrom"],"kind":"struct"},"2:44934:3496":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"1:769:165":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"6:4997:6410":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"17:14933:4896":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"2:42064:7512":{"crate_id":2,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"1:8596:9130":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"16:8626:5873":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"1:9369:8319":{"crate_id":1,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"1:5286:8275":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"16:7223:5691":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"16:6738:35501":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"2:42911:8236":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"2:44419:7571":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"1:895:3553":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"6:6700:6864":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_ring_offset"],"kind":"struct"},"2:42863:3553":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"17:11733:22024":{"crate_id":17,"path":["object","read","coff","import","ImportName"],"kind":"enum"},"2:3025:14446":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"2:3051:174":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"9:0:2792":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"16:5085:5519":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"1:12502:924":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"1:1492:167":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"1:11842:7892":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"17:3854:7980":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"6:5428:6573":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"16:6640:8075":{"crate_id":16,"path":["gimli","read","dwarf","DwarfSections"],"kind":"struct"},"5:5839:14399":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"2:43092:237":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"1:12512:1456":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"17:16684:5398":{"crate_id":17,"path":["object","xcoff","FileAux64"],"kind":"struct"},"1:10787:3011":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stdout"],"kind":"struct"},"17:10564:4440":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"17:10861:150":{"crate_id":17,"path":["object","read","any","File"],"kind":"enum"},"6:8302:7120":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"11:299:5970":{"crate_id":11,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"16:4844:5512":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"2:43292:94":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"17:16026:5208":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"11:488:165":{"crate_id":11,"path":["hashbrown","map","HashMap"],"kind":"struct"},"6:479:6081":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"2:45407:14382":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"5:7758:14685":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"2:24389:247":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"1:5813:3053":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"2:43665:2958":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"17:14997:4915":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"2:22411:3625":{"crate_id":2,"path":["core","core_simd","cast","sealed","Sealed"],"kind":"trait"},"17:12983:22123":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"5:7628:7162":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"16:6658:8085":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"2:3772:267":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"11:1049:8157":{"crate_id":11,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"17:12335:8034":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"17:10784:7984":{"crate_id":17,"path":["object","read","read_cache","ReadCacheInternal"],"kind":"struct"},"11:2366:8168":{"crate_id":11,"path":["hashbrown","table","AbsentEntry"],"kind":"struct"},"2:40487:227":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"2:44737:8246":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"2:12716:8221":{"crate_id":2,"path":["core","slice","iter","ChunkByMut"],"kind":"struct"},"2:47946:7742":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"2:41443:2933":{"crate_id":2,"path":["core","ffi","c_char"],"kind":"type_alias"},"17:14299:4783":{"crate_id":17,"path":["object","macho","DyldSubCacheEntryV1"],"kind":"struct"},"1:2499:3612":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"6:7414:6998":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"2:47304:7677":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"17:13006:4585":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"17:11281:7991":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"15:288:21007":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"2:31473:31954":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum"],"kind":"enum"},"17:14152:4745":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"2:40429:223":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"17:13119:4588":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbol"],"kind":"struct"},"17:10663:4443":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"1:12507:1883":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"1:2719:3003":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"2:44203:3034":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"17:11606:4481":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"1:4781:9182":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"6:5019:6423":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"17:13909:4689":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"2:4492:2966":{"crate_id":2,"path":["core","array","Guard"],"kind":"struct"},"6:8255:7110":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"16:903:7967":{"crate_id":16,"path":["gimli","read","endian_slice","DebugByte"],"kind":"struct"},"1:5317:8275":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"2:47996:7744":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"2:41244:3487":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"17:11527:7996":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"5:1386:8157":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"1:10830:4518":{"crate_id":1,"path":["std","sys","pal","unix","thread","Thread"],"kind":"struct"},"6:5395:6555":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"1:4816:9138":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"1:11752:3034":{"crate_id":1,"path":["std","sys","thread_local","native","eager","State"],"kind":"enum"},"11:854:8152":{"crate_id":11,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"16:5689:5533":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"6:1584:6203":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"2:45235:7585":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"5:1230:34194":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"17:15540:5093":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"1:12087:7898":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"17:12293:8030":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"17:16714:5406":{"crate_id":17,"path":["object","xcoff","CsectAux64"],"kind":"struct"},"17:12249:8027":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"1:9357:8317":{"crate_id":1,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"2:44998:3491":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"6:5366:6539":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"17:15777:5144":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"2:45849:191":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"17:16520:5342":{"crate_id":17,"path":["object","xcoff","AuxHeader32"],"kind":"struct"},"2:10734:237":{"crate_id":2,"path":["core","fmt","Result"],"kind":"type_alias"},"2:41140:3487":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"2:45570:7615":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"17:15641:5113":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"2:2896:213":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"1:974:9094":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"1:8209:3622":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"5:6844:3381":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"11:2466:8177":{"crate_id":11,"path":["hashbrown","table","ExtractIf"],"kind":"struct"},"17:16812:5426":{"crate_id":17,"path":["object","xcoff","DwarfAux64"],"kind":"struct"},"2:0:582":{"crate_id":2,"path":["core"],"kind":"module"},"1:8642:9163":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"1:8529:2987":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"16:7495:5730":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"2:46846:7640":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"5:7745:2930":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"17:12723:8048":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"17:14832:4882":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"16:5224:5524":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"2:45578:7617":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"17:13471:4559":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"5:1524:3038":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"2:47141:7668":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"2:3579:154":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"17:11902:4486":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"17:13719:4647":{"crate_id":17,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"6:491:6086":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"16:5417:5530":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"2:13644:3466":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"1:12497:763":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"2:2802:3340":{"crate_id":2,"path":["core","clone","CloneToUninit"],"kind":"trait"},"1:4942:9151":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"16:6256:5559":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"2:26789:281":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"2:3129:126":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"1:6440:8279":{"crate_id":1,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"17:15010:4916":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"6:5622:6665":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"2:22466:9212":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"2:48034:7746":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"16:8298:5823":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"9:445:20901":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"5:6531:14947":{"crate_id":5,"path":["alloc","sync","UniqueArcUninit"],"kind":"struct"},"6:6666:6850":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"1:5598:2407":{"crate_id":1,"path":["std","process"],"kind":"module"},"17:16311:5306":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"17:11075:35513":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"11:1064:20982":{"crate_id":11,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"2:43960:74":{"crate_id":2,"path":["core","fmt","rt","Argument"],"kind":"struct"},"2:43479:91":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"9:390:20902":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"9:236:3034":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"2:47158:7669":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"2:14260:8227":{"crate_id":2,"path":["core","future","async_drop","AsyncDropInPlace"],"kind":"struct"},"2:45582:7618":{"crate_id":2,"path":["core","time","Nanoseconds"],"kind":"struct"},"6:6480:6751":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"5:3933:8177":{"crate_id":5,"path":["alloc","collections","linked_list","ExtractIf"],"kind":"struct"},"1:11320:3627":{"crate_id":1,"path":["std","sys","pal","unix","time","SystemTime"],"kind":"struct"},"2:22364:33574":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"2:40728:14447":{"crate_id":2,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"17:12234:4592":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"17:16385:5321":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"2:47009:7654":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"2:46799:7637":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"2:46995:7653":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"17:11114:7989":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"2:41413:2947":{"crate_id":2,"path":["core","ffi","va_list","VaListImpl"],"kind":"struct"},"2:13370:7581":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"2:14243:8224":{"crate_id":2,"path":["core","future","async_drop","AsyncDropOwning"],"kind":"struct"},"16:6625:5617":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"2:8152:3016":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"11:1023:8156":{"crate_id":11,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"2:45122:3474":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"17:14917:4895":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"2:7758:3388":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"2:13633:3469":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"2:2112:7170":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"6:1703:6278":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"17:5131:7981":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolIterator"],"kind":"struct"},"16:5709:21914":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"6:6473:6747":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"2:42920:9080":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"6:497:6089":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"16:6890:5476":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"1:10670:3054":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","CommandArgs"],"kind":"struct"},"2:3762:14630":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"2:43027:221":{"crate_id":2,"path":["core","range","Range"],"kind":"struct"},"6:8353:7132":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"6:1589:6205":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"6:7586:7085":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"5:3268:101":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"5:282:34199":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"2:47205:7672":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"17:11401:4456":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"16:2748:5462":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"2:31409:7261":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"2:47190:7671":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"5:6717:8163":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"2:4781:3362":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"17:11553:7997":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"1:997:8155":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"17:13838:4677":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"11:785:5979":{"crate_id":11,"path":["hashbrown","map","Values"],"kind":"struct"},"1:12510:993":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"2:33044:3363":{"crate_id":2,"path":["core","error","tags","Ref"],"kind":"struct"},"16:7969:5801":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"17:10696:4444":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"11:2539:5986":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"2:23329:3625":{"crate_id":2,"path":["core","core_simd","simd","ptr","sealed","Sealed"],"kind":"trait"},"1:7964:28812":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"2:23904:7256":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI32Inner"],"kind":"struct"},"2:881:3448":{"crate_id":2,"path":["core","num","nonzero","ZeroablePrimitive"],"kind":"trait"},"16:7212:5690":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"2:40392:224":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"16:6713:8095":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"5:7118:14400":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"2:11686:3625":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"17:15050:4919":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"16:4902:5514":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"6:1696:6275":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"17:15418:5045":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"2:45113:3475":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"2:43968:2948":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"1:2336:2976":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"17:15905:5176":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"2:42589:7519":{"crate_id":2,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"6:4921:6378":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"16:2640:5457":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"2:40447:226":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"18:635:4305":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"18:538:4290":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"17:12941:4578":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"2:10808:2957":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"2:47349:7694":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"11:1884:3381":{"crate_id":11,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"2:23021:3625":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"1:7410:28810":{"crate_id":1,"path":["std","sys","thread_local","abort_on_dtor_unwind","DtorUnwindGuard"],"kind":"struct"},"5:2162:8178":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"6:1551:6181":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"6:1690:6274":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"6:5520:6619":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_chacha20_poly1305"],"kind":"struct"},"2:31179:3445":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"1:2794:3005":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"2:11007:164":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"5:7578:8196":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"2:2652:694":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"11:2380:3038":{"crate_id":11,"path":["hashbrown","table","Iter"],"kind":"struct"},"17:14358:4794":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"17:14335:4789":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"1:6316:28827":{"crate_id":1,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"18:491:4281":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"2:42880:7541":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"2:43329:88":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"6:4875:6353":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"6:7577:7082":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"2:44174:7563":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"17:15665:5118":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"16:8151:5493":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"2:7114:7195":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindowsInner"],"kind":"struct"},"17:10843:4448":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"6:8308:7121":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"6:8267:7112":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"16:7259:5704":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"2:43672:2959":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"16:3889:4334":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"6:7539:7063":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"6:6638:6837":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"2:44800:3482":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"1:12491:1731":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"2:48074:7750":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"2:41423:2946":{"crate_id":2,"path":["core","ffi","va_list","VaList"],"kind":"struct"},"1:882:3038":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"1:1620:3038":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"5:3297:3038":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"17:11421:7993":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"2:41259:14440":{"crate_id":2,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"2:3140:149":{"crate_id":2,"path":["core","error","Error"],"kind":"trait"},"17:15689:5120":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"2:23300:14639":{"crate_id":2,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr","with_exposed_provenance"],"kind":"function"},"2:41632:7497":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"17:12897:4573":{"crate_id":17,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"17:15769:5142":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"6:8014:7097":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"5:1539:3553":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"2:43132:3038":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"2:45600:134":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"1:4940:9149":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"2:2890:206":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"2:44789:3485":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"5:1487:100":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"16:8565:5870":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"1:8814:3034":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"17:11805:8007":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"18:573:4282":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"17:15760:5141":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"15:327:21012":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"17:13890:4688":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"2:22362:33583":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"16:908:7968":{"crate_id":16,"path":["gimli","read","endian_slice","DebugLen"],"kind":"struct"},"2:34489:14619":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"1:4234:9143":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"6:538:6118":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"5:3694:193":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"1:2733:14723":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"2:12115:8217":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"2:23249:14639":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_exposed_provenance"],"kind":"function"},"6:7604:7088":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"17:11232:22005":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"2:10753:155":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"16:7838:21925":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"1:12005:8270":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"2:46966:7651":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"16:8636:21929":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"6:4842:6329":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"2:47378:7695":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"17:13290:4396":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"17:16642:5387":{"crate_id":17,"path":["object","xcoff","Symbol32"],"kind":"struct"},"6:5117:6452":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"18:643:4282":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"17:12108:4494":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"16:7919:8129":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"16:3695:5501":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"16:6440:21917":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"2:22472:9215":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"2:2854:212":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"17:15351:4990":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"1:8268:7792":{"crate_id":1,"path":["std","hash","random","RandomState"],"kind":"struct"},"2:4056:8163":{"crate_id":2,"path":["core","array","drain","Drain"],"kind":"struct"},"17:15864:5167":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"2:47251:7674":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"2:44702:7209":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"1:11984:8269":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"17:11016:7987":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"17:12931:4577":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"1:2303:2403":{"crate_id":1,"path":["std","fs"],"kind":"module"},"17:15077:4923":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"5:4135:8163":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"2:33060:248":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"11:685:3553":{"crate_id":11,"path":["hashbrown","map","IterMut"],"kind":"struct"},"18:765:26185":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"1:4496:8272":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"2:43946:32018":{"crate_id":2,"path":["core","fmt","rt","ArgumentType"],"kind":"enum"},"5:7729:2927":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"17:16323:5308":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"5:1415:8161":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"1:8566:2991":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"6:5057:6440":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"1:9450:245":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"5:7267:34234":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"18:113:26176":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"2:44980:3490":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"17:16613:4676":{"crate_id":17,"path":["object","xcoff","SectionHeader64"],"kind":"struct"},"16:2860:5467":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"16:8028:5803":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"2:3296:276":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"2:9613:8213":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"17:15753:5140":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"2:46782:7634":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"6:8008:7095":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"1:11921:28732":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"16:6028:5475":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"2:45876:5992":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"2:41589:7493":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"16:6462:21918":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"16:5379:5529":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"2:22590:9213":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"17:11878:4481":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"2:47528:7701":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"2:23509:7219":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"6:1569:6191":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"16:6064:5480":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"5:1586:5979":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"1:5129:9185":{"crate_id":1,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"1:6495:7785":{"crate_id":1,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"1:1908:3515":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"5:1401:8156":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"16:6084:5536":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"11:2228:5984":{"crate_id":11,"path":["hashbrown","table","HashTable"],"kind":"struct"},"6:7448:7004":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"2:33051:7327":{"crate_id":2,"path":["core","error","Source"],"kind":"struct"},"16:7075:21921":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"5:2295:7141":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"11:842:9094":{"crate_id":11,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"5:3086:34197":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"2:45214:14381":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"16:7192:21922":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"2:12683:8220":{"crate_id":2,"path":["core","slice","iter","ChunkBy"],"kind":"struct"},"2:43918:7559":{"crate_id":2,"path":["core","fmt","rt","Count"],"kind":"enum"},"16:8066:21926":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"6:4947:6388":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"1:9284:9204":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"17:16187:5270":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"2:23838:7250":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU32Inner"],"kind":"struct"},"2:23641:7230":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"2:9576:8212":{"crate_id":2,"path":["core","panic","panic_info","PanicMessage"],"kind":"struct"},"2:23779:3625":{"crate_id":2,"path":["core","num","nonzero","private","Sealed"],"kind":"trait"},"2:11346:32109":{"crate_id":2,"path":["core","slice","sort","unstable","quicksort","GapGuardRaw"],"kind":"struct"},"17:11222:7990":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"17:10274:21982":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"17:12840:4566":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"2:11483:32111":{"crate_id":2,"path":["core","slice","sort","shared","smallsort","CopyOnDrop"],"kind":"struct"},"17:11678:8001":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"2:22580:3625":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"6:6623:6835":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"5:3304:5981":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"2:4189:3381":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"17:16283:5297":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"2:45356:7598":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"5:2266:7138":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"2:41332:7477":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"2:10572:2949":{"crate_id":2,"path":["core","fmt","builders","FormatterFn"],"kind":"struct"},"6:1597:6210":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"17:16019:5206":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"16:6852:5630":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"17:13733:4648":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"17:11539:4465":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"5:5575:3471":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"1:5196:9191":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"17:16494:4648":{"crate_id":17,"path":["object","xcoff","FileHeader32"],"kind":"struct"},"1:8044:7789":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"1:8662:7838":{"crate_id":1,"path":["std","os","unix","net","ucred","UCred"],"kind":"struct"},"2:7864:14444":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"17:15160:4937":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"1:6716:3088":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"17:14460:4809":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"2:47416:7697":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"1:9446:2966":{"crate_id":1,"path":["std","sync","poison","Guard"],"kind":"struct"},"17:16341:5314":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"17:12135:4496":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"1:11302:7618":{"crate_id":1,"path":["std","sys","pal","unix","time","Nanoseconds"],"kind":"struct"},"2:44952:3495":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"2:43478:2409":{"crate_id":2,"path":["core","sync","atomic","ATOMIC_USIZE_INIT"],"kind":"constant"},"2:41225:7474":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"1:6026:3084":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"1:3043:8266":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"17:13157:8059":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdat"],"kind":"struct"},"17:10534:4438":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"2:23197:9300":{"crate_id":2,"path":["core","core_simd","simd","num","uint","SimdUint"],"kind":"trait"},"2:31441:3342":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"17:14220:4749":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"2:5043:3365":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"1:3076:237":{"crate_id":1,"path":["std","io","error","Result"],"kind":"type_alias"},"6:6731:6874":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_umem_reg"],"kind":"struct"},"2:47091:7666":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"17:15844:5160":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"6:5562:6637":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"2:42999:7546":{"crate_id":2,"path":["core","range","iter","IterRangeInclusive"],"kind":"struct"},"11:830:8162":{"crate_id":11,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"17:16297:5299":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"17:16507:4662":{"crate_id":17,"path":["object","xcoff","FileHeader64"],"kind":"struct"},"2:23860:7252":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU128Inner"],"kind":"struct"},"17:14796:4877":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"16:6749:5619":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"1:8637:7837":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"1:11066:2408":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Stdio"],"kind":"enum"},"16:5649:5532":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"2:47549:7702":{"crate_id":2,"path":["core","core_arch","simd","m8x32"],"kind":"struct"},"17:3720:7979":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"1:1109:8157":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"6:6611:6828":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"3:234:237":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"5:7219:278":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"2:3944:71":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"2:48168:7762":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"2:23159:9299":{"crate_id":2,"path":["core","core_simd","simd","num","int","SimdInt"],"kind":"trait"},"17:13818:4676":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"1:964:8148":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"8:0:2791":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"1:12499:758":{"crate_id":1,"path":["std","f128"],"kind":"primitive"},"6:6419:6721":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"17:2406:7974":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"2:44880:3498":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"5:5001:228":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"2:40331:14351":{"crate_id":2,"path":["core","ops","coroutine","CoroutineState"],"kind":"enum"},"1:5672:3051":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"5:4300:2966":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"1:5810:3052":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"17:10938:35512":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"5:7292:34245":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"1:680:8256":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"17:13427:4613":{"crate_id":17,"path":["object","read","ObjectMapFile"],"kind":"struct"},"17:11777:4478":{"crate_id":17,"path":["object","read","coff","import","ImportObjectData"],"kind":"struct"},"17:13222:21991":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"2:39082:14627":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"1:2246:132":{"crate_id":1,"path":["std","ffi","os_str","Display"],"kind":"struct"},"14:40:4663":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"2:23115:9298":{"crate_id":2,"path":["core","core_simd","simd","num","float","SimdFloat"],"kind":"trait"},"1:9364:8318":{"crate_id":1,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"17:12711:8047":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"16:7959:5800":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"1:381:8251":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"1:8837:3035":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"1:11006:151":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileType"],"kind":"struct"},"17:13945:4696":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"17:16399:5324":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"2:48054:7748":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"2:23286:9304":{"crate_id":2,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr"],"kind":"trait"},"6:6437:6734":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"1:2021:810":{"crate_id":1,"path":["std","ffi"],"kind":"module"},"1:1985:3437":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"2:31847:3353":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"2:12156:3496":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"17:14872:4886":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"2:44191:168":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"17:13970:4699":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"17:11757:22025":{"crate_id":17,"path":["object","read","coff","import","ImportType"],"kind":"enum"},"16:2704:5460":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"1:11058:3526":{"crate_id":1,"path":["std","sys","pal","unix","os","JoinPathsError"],"kind":"struct"},"6:5151:6455":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"16:8058:8136":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"2:41146:7468":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"2:23685:31993":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"17:11432:22004":{"crate_id":17,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"17:14375:4797":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"17:16362:5317":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"1:3669:28745":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"6:5462:6598":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"1:11816:7888":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"1:8585:8303":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"2:6410:7187":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"11:102:5968":{"crate_id":11,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"16:7058:5653":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"1:11294:31880":{"crate_id":1,"path":["std","sys","pal","unix","thread","cgroups","Cgroup"],"kind":"enum"},"16:7731:7541":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"16:6337:5570":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"17:12886:4572":{"crate_id":17,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"6:1657:6258":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"5:3851:3006":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"6:5044:6436":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"1:8090:9077":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"2:3381:9208":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"16:6159:5543":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"17:10418:21987":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"6:6691:6858":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sockaddr_xdp"],"kind":"struct"},"5:1627:221":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"17:15973:5197":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"1:11867:7894":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"1:11025:2986":{"crate_id":1,"path":["std","sys","pal","unix","io","IoSlice"],"kind":"struct"},"17:10729:4445":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"2:41391:2929":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"17:11465:4461":{"crate_id":17,"path":["object","read","archive","ArchiveSymbolIterator"],"kind":"struct"},"15:306:21008":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"17:14405:4800":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"17:13398:4612":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"2:44830:2992":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"6:5295:6517":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"16:8546:5867":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"6:5186:6459":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"6:4929:6380":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"16:6098:8066":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"17:16264:5292":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"2:41538:145":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"6:5670:6685":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"1:1653:5983":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"17:11926:4488":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"17:16775:5420":{"crate_id":17,"path":["object","xcoff","BlockAux64"],"kind":"struct"},"6:1530:6166":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"6:5301:6520":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"6:5477:6607":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"17:16132:5251":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"1:12453:26882":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"6:7518:7049":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"16:2920:5470":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"2:41651:7499":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"17:14284:4778":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"2:42049:7511":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"17:14750:4867":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"2:22484:7216":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"17:11985:8014":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"2:14531:118":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"6:5127:6453":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"1:9254:9203":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"2:11339:32106":{"crate_id":2,"path":["core","slice","sort","unstable","quicksort","GapGuard"],"kind":"struct"},"17:12095:4493":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"6:1521:6161":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"14:0:2796":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"2:3699:222":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"6:5341:6533":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif"],"kind":"struct"},"2:42855:3038":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"16:4404:5508":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"1:8219:3620":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"17:10928:7986":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"16:8233:21927":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"6:5488:6610":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls_crypto_info"],"kind":"struct"},"2:2403:7175":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"2:3376:9206":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"6:5007:6417":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"5:3800:34199":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"18:735:26184":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"2:41202:7472":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"1:2481:2452":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"2:45574:7616":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"17:12008:4376":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"2:45250:7591":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"2:41519:7483":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"17:11720:4471":{"crate_id":17,"path":["object","read","coff","import","ImportFile"],"kind":"struct"},"5:3866:8178":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"2:4594:111":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"2:23649:7231":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"1:8024:7788":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"2:22890:7217":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"2:44645:8243":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"1:6833:3092":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"6:1489:6148":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"2:3181:3442":{"crate_id":2,"path":["core","error","Request"],"kind":"struct"},"1:11050:8307":{"crate_id":1,"path":["std","sys","pal","unix","linux","pidfd","PidFd"],"kind":"struct"},"6:6493:6760":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"17:10597:4441":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"2:5460:3019":{"crate_id":2,"path":["core","io","borrowed_buf","BorrowedBuf"],"kind":"struct"},"1:4681:9164":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"2:48115:7753":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"13:110:35486":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"16:155:5429":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"2:14611:163":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"2:39137:14628":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"2:47222:7673":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"18:563:4292":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"17:12280:8028":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"6:1625:6235":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"1:440:196":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"2:42921:9199":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"17:13193:8062":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegment"],"kind":"struct"},"1:913:5978":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"5:4210:3553":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"1:10947:8331":{"crate_id":1,"path":["std","sys","pal","unix","fd","FileDesc"],"kind":"struct"},"17:12860:4571":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"2:7980:14596":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"1:12498:779":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"2:44213:7568":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"17:16750:5415":{"crate_id":17,"path":["object","xcoff","ExpAux"],"kind":"struct"},"2:13639:3468":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"17:15106:4926":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"2:41557:7488":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"1:9225:7856":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"17:12082:4491":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"12:0:2795":{"crate_id":12,"path":["rustc_std_workspace_alloc"],"kind":"module"},"17:15946:5190":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"17:11124:35516":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"17:12920:4575":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"2:3567:3125":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"16:7159:5677":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"5:7094:14399":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"2:44627:7206":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"17:15876:5168":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"17:2378:22052":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"6:5641:6674":{"crate_id":6,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"17:11291:35510":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"2:41816:2990":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"2:13354:7580":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"2:1898:14557":{"crate_id":2,"path":["core","intrinsics","AggregateRawPtr"],"kind":"trait"},"6:1507:6156":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"11:434:35480":{"crate_id":11,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"5:4912:827":{"crate_id":5,"path":["alloc","fmt"],"kind":"module"},"2:13854:122":{"crate_id":2,"path":["core","str","lossy","Debug"],"kind":"struct"},"2:22464:3625":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"1:9152:3054":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"16:7578:7860":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"11:2400:3553":{"crate_id":11,"path":["hashbrown","table","IterMut"],"kind":"struct"},"2:23937:7259":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroIsizeInner"],"kind":"struct"},"2:47975:7743":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"17:12216:4505":{"crate_id":17,"path":["object","read","elf","attributes","AttributeIndexIterator"],"kind":"struct"},"1:10400:3515":{"crate_id":1,"path":["std","sys","pal","unix","os","SplitPaths"],"kind":"struct"},"5:3330:5982":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"14:187:20995":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"16:7424:21923":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"16:7716:35505":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"1:9764:28742":{"crate_id":1,"path":["std","sys","pal","unix","fs","Dir"],"kind":"struct"},"1:7814:8553":{"crate_id":1,"path":["std","panicking","begin_panic_handler","FormatStringPayload"],"kind":"struct"},"1:8262:130":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"2:31462:2948":{"crate_id":2,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"2:33149:3547":{"crate_id":2,"path":["core","marker","Tuple"],"kind":"trait"},"2:43403:89":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"16:8137:5492":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"2:45264:7594":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"1:8520:2986":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"2:41826:7506":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"2:8569:3128":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"2:47038:7663":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"17:12035:5984":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"17:15887:5172":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"17:13322:21993":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"17:15953:5191":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"17:15963:5194":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"2:3789:14413":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"2:44806:3481":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"2:3024:3625":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"17:12056:4489":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"11:671:3038":{"crate_id":11,"path":["hashbrown","map","Iter"],"kind":"struct"},"17:14072:4722":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"6:8296:7119":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"17:14886:4889":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"1:4350:9161":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"2:10432:32145":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"16:2415:21027":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"2:31820:207":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"2:14375:216":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"17:15931:5186":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"6:5570:6639":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"17:15439:5053":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"18:718:4315":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"16:8179:5809":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"2:44221:7569":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"2:40544:7337":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"17:10442:21988":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"1:10996:3624":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileTimes"],"kind":"struct"},"17:12687:8045":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"16:2966:5472":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"2:42621:9131":{"crate_id":2,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"2:48089:7751":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"0:0:2618":{"crate_id":0,"path":["autocfg"],"kind":"module"},"18:589:4293":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"17:15286:4939":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"2:4702:8205":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"2:23747:2748":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"1:985:8152":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"16:7030:5651":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"16:8223:5811":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"11:2545:5987":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"1:12104:28820":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Bomb"],"kind":"struct"},"17:14845:4884":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"14:214:5957":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"5:3096:34196":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"16:4983:5517":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"1:683:8258":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"0:155:2414":{"crate_id":0,"path":["autocfg","AutoCfg"],"kind":"struct"},"2:7108:7196":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindows"],"kind":"struct"},"1:2332:3604":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"17:16739:5414":{"crate_id":17,"path":["object","xcoff","FunAux64"],"kind":"struct"},"2:22902:33580":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"2:2208:14650":{"crate_id":2,"path":["core","ptr","metadata","Thin"],"kind":"trait_alias"},"1:11283:3055":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"2:41187:31921":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"5:7568:8163":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"17:13306:4606":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"11:1725:167":{"crate_id":11,"path":["hashbrown","set","HashSet"],"kind":"struct"},"16:2900:5469":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"1:8681:8307":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"1:688:9075":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"1:8902:3038":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"2:45749:162":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"6:6507:6771":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"16:6998:5642":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"17:14114:4737":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"2:6219:2966":{"crate_id":2,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"1:6233:231":{"crate_id":1,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"6:6723:6873":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_mmap_offsets_v1"],"kind":"struct"},"2:44747:7211":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"16:6123:5479":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"6:1643:6247":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"2:10241:85":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"2:8940:14600":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"17:12524:8037":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"16:6269:5560":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"1:9158:210":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"1:12492:1765":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"1:8766:3033":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"2:6919:7188":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"6:4984:6404":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"1:968:8149":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"17:16084:5250":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"6:5507:6618":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_256"],"kind":"struct"},"10:0:2793":{"crate_id":10,"path":["adler"],"kind":"module"},"16:7765:5777":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"2:22379:33569":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"16:2590:5455":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"2:3520:14350":{"crate_id":2,"path":["core","ops","coroutine","Coroutine"],"kind":"trait"},"2:10796:2951":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"6:7368:3645":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"17:13349:4608":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"2:44636:7207":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"1:3678:2978":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"5:2148:3006":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"5:7598:34266":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"1:8289:3004":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"5:212:8169":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"1:12485:1204":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"6:5593:6646":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"6:4869:6352":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"5:4562:2966":{"crate_id":5,"path":["alloc","collections","vec_deque","shrink_to","Guard"],"kind":"struct"},"14:31:8142":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"11:1105:8159":{"crate_id":11,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"17:13921:4692":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"17:10977:35514":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"13:0:2789":{"crate_id":13,"path":["std_detect"],"kind":"module"},"16:7462:8108":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"16:8612:5495":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"17:13266:21992":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"17:11630:4467":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"16:3987:4342":{"crate_id":16,"path":["gimli","arch","PowerPc64"],"kind":"struct"},"11:351:35472":{"crate_id":11,"path":["hashbrown","raw","FullBucketsIndices"],"kind":"struct"},"1:5479:214":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"11:1914:5982":{"crate_id":11,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"17:15549:5094":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"17:14627:4834":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"16:8503:5861":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"16:6970:5477":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"1:535:9059":{"crate_id":1,"path":["std","thread","PanicGuard"],"kind":"struct"},"2:47798:7738":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"5:4483:279":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"11:2137:8156":{"crate_id":11,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"17:15531:5089":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"2:8437:157":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"6:5482:6609":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"17:14001:4708":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"17:12648:4552":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"6:5265:6501":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"1:11163:28819":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"16:5727:4438":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"6:6790:6895":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"1:9169:2749":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"6:5319:6528":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"11:2420:3381":{"crate_id":11,"path":["hashbrown","table","IntoIter"],"kind":"struct"},"2:22592:7216":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"11:772:5978":{"crate_id":11,"path":["hashbrown","map","Keys"],"kind":"struct"},"2:23893:7255":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI16Inner"],"kind":"struct"},"17:12826:4561":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"6:1675:6265":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"2:33037:8233":{"crate_id":2,"path":["core","error","tags","MaybeSizedValue"],"kind":"struct"},"2:22868:9218":{"crate_id":2,"path":["core","core_simd","to_bytes","ToBytes"],"kind":"trait"},"1:4342:9160":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"17:13041:8057":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSection"],"kind":"struct"},"17:11457:4460":{"crate_id":17,"path":["object","read","archive","ArchiveOffset"],"kind":"struct"},"11:1085:35475":{"crate_id":11,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"2:47173:7670":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"6:6680:6855":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"17:14520:4818":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"16:8711:5880":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"11:1564:20983":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"16:6914:5638":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"2:3538:127":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"1:12486:490":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"1:12489:1348":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"17:11998:8015":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"2:44728:7210":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"2:3573:152":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"1:12508:1889":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"2:10800:2958":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"1:11442:8336":{"crate_id":1,"path":["std","sys","os_str","bytes","Slice"],"kind":"struct"},"17:14346:4792":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"17:15852:5161":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"17:15714:5129":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"16:2450:5442":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"17:13958:4698":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"6:8290:7118":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"17:13871:4683":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"16:5348:5528":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"16:6984:5494":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"17:12699:8046":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"17:13547:8064":{"crate_id":17,"path":["object","read","RelocationMap"],"kind":"struct"},"1:9318:8311":{"crate_id":1,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"1:9336:26230":{"crate_id":1,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"6:6443:6737":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"2:2766:103":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"2:8403:14601":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"2:33592:5753":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"1:12496:760":{"crate_id":1,"path":["std","f16"],"kind":"primitive"},"2:43051:225":{"crate_id":2,"path":["core","range","RangeInclusive"],"kind":"struct"},"6:5387:6550":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"18:548:164":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"6:4805:6301":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"2:23926:7258":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI128Inner"],"kind":"struct"},"6:7350:6971":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"2:31447:7262":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"6:8284:7117":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"17:11358:22002":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"1:9781:130":{"crate_id":1,"path":["std","sys","pal","unix","fs","DirBuilder"],"kind":"struct"},"2:47120:7667":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"5:6935:34199":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"14:160:8142":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"1:10293:7532":{"crate_id":1,"path":["std","sys","pal","unix","net","Socket"],"kind":"struct"},"6:7487:7023":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"11:873:8154":{"crate_id":11,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"2:4636:14416":{"crate_id":2,"path":["core","async_iter","async_iter","IntoAsyncIterator"],"kind":"trait"},"2:22325:3353":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"2:43440:96":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"17:12122:4495":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"1:8707:7839":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"17:15896:5175":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"9:53:20919":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"2:5441:452":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"6:6813:6901":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"2:3406:14348":{"crate_id":2,"path":["core","ops","async_function","AsyncFnMut"],"kind":"trait"},"1:4703:9165":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"16:5757:5534":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"1:10976:3620":{"crate_id":1,"path":["std","sys","pal","unix","fs","OpenOptions"],"kind":"struct"},"2:33151:117":{"crate_id":2,"path":["core","marker","ConstParamTy"],"kind":"trait"},"1:6071:3096":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"6:5551:6631":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"17:16179:5269":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"2:45441:3499":{"crate_id":2,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"17:317:7967":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"2:38972:14625":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"1:5871:231":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"2:45624:7621":{"crate_id":2,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"2:43985:149":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"5:2173:8179":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMutKey"],"kind":"struct"},"1:3404:3011":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"2:47059:7664":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"16:7337:5710":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"6:5450:6589":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"5:5579:3472":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"17:12787:4554":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"2:40375:9111":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"17:14127:4741":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"17:14327:4787":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"2:42055:3017":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"5:3720:3553":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"1:8248:151":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"2:23371:9295":{"crate_id":2,"path":["core","core_simd","simd","cmp","ord","SimdPartialOrd"],"kind":"trait"},"16:6953:5641":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"2:41681:7502":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"18:623:35526":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"17:14599:4829":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"2:3303:260":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"16:3441:5499":{"crate_id":16,"path":["gimli","arch","LoongArch"],"kind":"struct"},"11:1907:5981":{"crate_id":11,"path":["hashbrown","set","Difference"],"kind":"struct"},"2:44182:7564":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"17:3503:7978":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"6:1632:6239":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"1:8740:8308":{"crate_id":1,"path":["std","panic","PanicHookInfo"],"kind":"struct"},"6:6902:6929":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"16:8165:5483":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"16:2772:5463":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"11:1880:3038":{"crate_id":11,"path":["hashbrown","set","Iter"],"kind":"struct"},"11:2301:5740":{"crate_id":11,"path":["hashbrown","table","Entry"],"kind":"enum"},"2:46951:7650":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"2:12170:3495":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"17:16786:5422":{"crate_id":17,"path":["object","xcoff","StatAux"],"kind":"struct"},"2:23616:3446":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"1:10421:8322":{"crate_id":1,"path":["std","sys","pal","unix","os","EnvStrDebug"],"kind":"struct"},"2:44665:8244":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"2:4924:7178":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"16:6822:21919":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCacheStrategy"],"kind":"enum"},"17:13491:4617":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"2:13108:14708":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"17:13082:7990":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolIterator"],"kind":"struct"},"2:42033:7510":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"2:46831:7639":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"16:2820:5465":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"17:11475:22005":{"crate_id":17,"path":["object","read","archive","SymbolIteratorInternal"],"kind":"enum"},"16:6866:21920":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"9:480:20900":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"6:5676:6687":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"2:23593:7225":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"17:10793:4324":{"crate_id":17,"path":["object","read","read_cache","ReadCacheRange"],"kind":"struct"},"17:14640:4835":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"6:6652:6848":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"14:202:14383":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"16:2950:5471":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"2:10802:2959":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"2:46752:7630":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"1:12513:13":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"1:12061:7897":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"1:8908:3039":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"17:12149:4497":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSection"],"kind":"struct"},"17:10296:21983":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"2:41461:3020":{"crate_id":2,"path":["core","io","borrowed_buf","BorrowedCursor"],"kind":"struct"},"1:1636:5980":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"17:1339:7972":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"16:6173:5546":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"1:7919:8288":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"17:12952:4579":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"2:33119:3124":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"17:15919:5183":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"5:2368:7147":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"17:13781:4663":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"2:47721:7737":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"17:14612:4831":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"17:14975:4904":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"18:96:26175":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"1:5115:9184":{"crate_id":1,"path":["std","os","net","linux_ext","socket","UnixSocketExt"],"kind":"trait"},"16:7350:5712":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"1:11508:3879":{"crate_id":1,"path":["std","sys","os_str","bytes","Buf"],"kind":"struct"},"1:1631:8177":{"crate_id":1,"path":["std","collections","hash","set","ExtractIf"],"kind":"struct"},"17:15739:5137":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"6:4896:6362":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"5:1605:8147":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"2:5502:1004":{"crate_id":2,"path":["core","iter"],"kind":"module"},"1:1975:2401":{"crate_id":1,"path":["std","error"],"kind":"module"},"1:11385:7880":{"crate_id":1,"path":["std","sys","personality","dwarf","eh","EHContext"],"kind":"struct"},"1:7756:26869":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"1:631:9072":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"2:41497:2989":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"18:598:35524":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"1:5992:3082":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"17:12550:4547":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"16:6680:8091":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackageSections"],"kind":"struct"},"1:12073:29225":{"crate_id":1,"path":["std","panicking","panic_count","MustAbort"],"kind":"enum"},"2:6296:7184":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"6:4937:6382":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"17:15939:5189":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"1:4114:9134":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"2:41215:7473":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"1:1086:5740":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"11:2559:5989":{"crate_id":11,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"1:10561:116":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Command"],"kind":"struct"},"11:1158:8161":{"crate_id":11,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"17:16728:5409":{"crate_id":17,"path":["object","xcoff","FunAux32"],"kind":"struct"},"2:42942:14699":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"5:297:3130":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"1:4826:6990":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"function"},"17:13757:4662":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"2:2206:14649":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"5:1250:34180":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"2:23700:32003":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"5:7785:2932":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"1:6958:244":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"1:664:3439":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"5:3343:34268":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"17:13610:4628":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"1:4570:8273":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"2:35047:14624":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"1:4178:9138":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"2:48191:7763":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"5:7822:7167":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"9:355:20916":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"6:523:6109":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"17:16632:5386":{"crate_id":17,"path":["object","xcoff","SymbolBytes"],"kind":"struct"},"1:10713:28814":{"crate_id":1,"path":["std","sys","pal","unix","stack_overflow","Handler"],"kind":"struct"},"11:2323:8156":{"crate_id":11,"path":["hashbrown","table","OccupiedEntry"],"kind":"struct"},"18:521:26186":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"2:48043:7747":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"17:15812:5150":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"17:14947:4898":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"2:13124:8222":{"crate_id":2,"path":["core","slice","GetManyMutError"],"kind":"struct"},"1:3603:2975":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"1:6830:3091":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"6:5682:6690":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"2:34:963":{"crate_id":2,"path":["core","include_str"],"kind":"macro"},"2:25:719":{"crate_id":2,"path":["core","env"],"kind":"macro"},"1:6543:231":{"crate_id":1,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"6:6544:6785":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"17:14507:4815":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"17:14708:4845":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"17:12260:22096":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCacheSlice"],"kind":"enum"},"17:14416:4801":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"16:6205:21916":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"1:4334:9159":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"1:9203:3038":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"0:65:2433":{"crate_id":0,"path":["autocfg","rerun_env"],"kind":"function"},"5:3088:7144":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"6:5603:6651":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"5:7556:7160":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"5:7907:8200":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"17:13662:4635":{"crate_id":17,"path":["object","archive","AixHeader"],"kind":"struct"},"6:6564:6801":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"18:515:4285":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"17:5305:7982":{"crate_id":17,"path":["object","read","xcoff","relocation","XcoffRelocationIterator"],"kind":"struct"},"1:4212:9139":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"5:7128:14401":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstDataSrcBufDrop"],"kind":"struct"},"17:16241:5291":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"6:6449:6738":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"5:7832:8198":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"1:3914:8268":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"2:41528:7484":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"6:5381:6547":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"2:46899:7647":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"16:546:5431":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"17:14902:4891":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"11:2121:5740":{"crate_id":11,"path":["hashbrown","set","Entry"],"kind":"enum"},"2:42767:7836":{"crate_id":2,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"1:9465:3095":{"crate_id":1,"path":["std","sync","rwlock","MappedRwLockWriteGuard"],"kind":"struct"},"17:11026:35515":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"2:4981:14424":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"6:5088:6450":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"2:42827:205":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"1:12437:8339":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"2:41488:8235":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"6:6740:6877":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_umem_reg_v1"],"kind":"struct"},"16:6781:5622":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"2:33061:250":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"2:2215:7171":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"2:13624:3467":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"17:12371:4512":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"17:10394:21986":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"10:44:5995":{"crate_id":10,"path":["adler","Adler32"],"kind":"struct"},"17:14560:4824":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"17:14483:4814":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"2:2105:693":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"17:472:7969":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"2:48100:7752":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"2:22393:33572":{"crate_id":2,"path":["core","core_simd","swizzle","resize","Resize"],"kind":"struct"},"2:45129:3486":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"2:4851:232":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"2:4990:3364":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"6:553:6127":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"2:43651:2950":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"2:42789:7536":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"2:3298:120":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"6:4829:6319":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"17:12028:8017":{"crate_id":17,"path":["object","read","elf","note","GnuProperty"],"kind":"struct"},"6:4902:6365":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"2:3556:14342":{"crate_id":2,"path":["core","ops","deref","DerefPure"],"kind":"trait"},"17:12044:8022":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"16:4873:5513":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"2:23562:7220":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"6:5139:6454":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"17:15496:5088":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"5:6288:2966":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"2:10798:2950":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"6:559:6130":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"17:10487:21989":{"crate_id":17,"path":["object","common","RelocationFlags"],"kind":"enum"},"6:6631:6836":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"2:3048:77":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"1:6887:3098":{"crate_id":1,"path":["std","sync","reentrant_lock","ReentrantLock"],"kind":"struct"},"17:322:7968":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"16:7401:35500":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"5:5633:1765":{"crate_id":5,"path":["alloc","str"],"kind":"module"},"1:4019:8270":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"6:473:6078":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"2:45459:3500":{"crate_id":2,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"2:41365:2928":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"2:11922:2992":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"2:44576:8242":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"6:5165:6456":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"1:8559:2990":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"2:23727:7242":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"6:4957:6391":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"17:12359:8036":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"1:3660:2406":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"2:3461:5755":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"17:11579:7999":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"17:15410:5042":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"16:8528:5864":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"17:13181:8061":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegmentIterator"],"kind":"struct"},"2:11050:9124":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"1:12487:1917":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"17:12605:4481":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"9:328:6033":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"2:2769:104":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"14:165:20988":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"17:11818:8008":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"17:12816:4559":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"16:6144:21915":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"17:14652:4836":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"18:80:26174":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"1:926:5979":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"17:14533:4520":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"2:2142:1393":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"2:43140:3553":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"2:4855:8206":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"2:3854:131":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"2:41598:7494":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"2:45756:230":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"1:4998:8274":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"17:11617:7990":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"1:4830:6994":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"function"},"1:10578:28741":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Argv"],"kind":"struct"},"2:11897:3553":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"11:2440:8163":{"crate_id":11,"path":["hashbrown","table","Drain"],"kind":"struct"},"1:9433:198":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"1:3621:2977":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"2:46934:7649":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"2:10735:2406":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"1:1624:3381":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"2:2282:200":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"6:6659:6849":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"6:517:6106":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"2:3403:14347":{"crate_id":2,"path":["core","ops","async_function","AsyncFn"],"kind":"trait"},"2:3054:156":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"6:5375:6545":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"11:1580:8164":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"1:6392:7213":{"crate_id":1,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"17:13070:4481":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolTable"],"kind":"struct"},"2:33120:3548":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"1:8297:3006":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"5:7648:3381":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"16:6042:5478":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"5:6584:9307":{"crate_id":5,"path":["alloc","task","LocalWake"],"kind":"trait"},"17:14859:4885":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"17:14312:4785":{"crate_id":17,"path":["object","macho","DyldSubCacheEntryV2"],"kind":"struct"},"2:42040:3087":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"5:2585:7148":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"2:44406:7570":{"crate_id":2,"path":["core","slice","sort","stable","drift","DriftsortRun"],"kind":"struct"},"17:15602:5104":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"2:44715:8245":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"17:13554:4620":{"crate_id":17,"path":["object","read","RelocationMapEntry"],"kind":"struct"},"2:41298:7476":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"1:2014:3438":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"2:22381:33579":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"5:7714:9093":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"2:41468:7209":{"crate_id":2,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"2:2816:3341":{"crate_id":2,"path":["core","clone","InitializingSlice"],"kind":"struct"},"1:9219:3381":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"6:5586:6644":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"2:12077:3494":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"17:12570:8040":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"1:5021:9148":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"16:6111:5541":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"17:12204:4503":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsection"],"kind":"struct"},"17:15136:4577":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"2:4617:14346":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"17:14738:4864":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"16:4184:5505":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"6:4976:6399":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"2:3057:271":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"5:780:263":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"17:15989:5200":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"1:9410:7863":{"crate_id":1,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"5:7588:7161":{"crate_id":5,"path":["alloc","collections","btree","map","UnorderedKeyError"],"kind":"struct"},"17:506:4382":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"17:16701:5400":{"crate_id":17,"path":["object","xcoff","CsectAux32"],"kind":"struct"},"17:11864:8010":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"17:13537:4577":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"1:1931:3521":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"1:7347:8552":{"crate_id":1,"path":["std","sys","backtrace","print","DisplayBacktrace"],"kind":"struct"},"6:5179:6457":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"16:7358:5484":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"15:394:21018":{"crate_id":15,"path":["addr2line","DebugFile"],"kind":"enum"},"2:43901:2948":{"crate_id":2,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"2:42567:181":{"crate_id":2,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"2:4582:8204":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"10:36:5994":{"crate_id":10,"path":["adler","algo","U32X4"],"kind":"struct"},"2:23235:9303":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr"],"kind":"trait"},"17:14269:4774":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"5:726:8170":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"1:8919:3040":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"17:13205:8063":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"6:5196:6466":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"2:39027:14626":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"2:44655:7208":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"2:2029:2966":{"crate_id":2,"path":["core","mem","maybe_uninit","Guard"],"kind":"struct"},"1:9269:9202":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"1:4363:9162":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"2:45566:7614":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"17:15701:5123":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"17:15621:5105":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"1:3406:3012":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"17:15557:5095":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"11:2533:5985":{"crate_id":11,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"5:5304:3080":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"11:809:8177":{"crate_id":11,"path":["hashbrown","map","ExtractIf"],"kind":"struct"},"7:32:20888":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"17:12583:4550":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"18:0:2800":{"crate_id":18,"path":["memchr"],"kind":"module"},"1:12500:936":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"1:3447:3007":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"6:6462:6739":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"16:6302:5567":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"17:14393:4798":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"1:6217:7785":{"crate_id":1,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"1:8104:9078":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"16:8598:8141":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"6:5412:1275":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"11:2566:3041":{"crate_id":11,"path":["hashbrown","TryReserveError"],"kind":"enum"},"2:2666:14639":{"crate_id":2,"path":["core","ptr","with_exposed_provenance"],"kind":"function"},"1:8648:8306":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"6:7316:6952":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"1:1855:719":{"crate_id":1,"path":["std","env"],"kind":"module"},"6:5205:6471":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"1:8371:8296":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"1:9752:150":{"crate_id":1,"path":["std","sys","pal","unix","fs","File"],"kind":"struct"},"2:10789:122":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"11:2495:20978":{"crate_id":11,"path":["hashbrown","Equivalent"],"kind":"trait"},"6:5036:6431":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"1:8749:9195":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"17:16332:5312":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"6:4990:6407":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"6:5441:6583":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"16:4120:5503":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"2:44816:2991":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"1:3688:2981":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"2:43017:7547":{"crate_id":2,"path":["core","range","iter","IterRangeFrom"],"kind":"struct"},"17:10516:21990":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"17:14140:4742":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"16:7554:21924":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"11:2551:35479":{"crate_id":11,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"2:34422:14620":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"5:7656:3381":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"6:532:6115":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"16:3141:4329":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"6:7332:6964":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"16:4241:5506":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"2:48063:7749":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"2:48138:7760":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"2:11699:251":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"1:7441:27377":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"1:10971:7867":{"crate_id":1,"path":["std","sys","pal","unix","fs","StatxExtraFields"],"kind":"struct"},"17:11163:4481":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"17:13515:21994":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"1:8023:3625":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"2:3338:3544":{"crate_id":2,"path":["core","marker","Freeze"],"kind":"trait"},"1:11142:28807":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"16:7168:5678":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"1:12080:7898":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"17:14043:4713":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"2:46767:7633":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"2:41548:7486":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"17:16209:5276":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"2:47623:7704":{"crate_id":2,"path":["core","core_arch","simd","m32x8"],"kind":"struct"},"6:6748:6878":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_statistics"],"kind":"struct"},"1:8214:3623":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"11:430:35484":{"crate_id":11,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"2:44423:7572":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"5:6565:9306":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"2:5223:14434":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"6:5334:6532":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_sizes"],"kind":"struct"},"1:8273:7793":{"crate_id":1,"path":["std","hash","random","DefaultHasher"],"kind":"struct"},"2:13331:7579":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"2:41610:7495":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"6:5533:6620":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"1:5878:7785":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"6:5541:6625":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"2:42074:7513":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"1:905:3381":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"2:22413:9216":{"crate_id":2,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"6:6708:6868":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_mmap_offsets"],"kind":"struct"},"17:11319:35517":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"17:14692:4840":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"5:7797:8197":{"crate_id":5,"path":["alloc","rc","UniqueRc"],"kind":"struct"},"17:14084:4725":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"1:8572:2992":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"6:0:1029":{"crate_id":6,"path":["libc"],"kind":"module"},"2:7929:32216":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"1:4222:9140":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"16:6408:5580":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"1:12504:911":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"1:5636:3049":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"17:11831:4465":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"16:5255:5525":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"0:63:708":{"crate_id":0,"path":["autocfg","emit"],"kind":"function"},"2:14400:8228":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"17:16377:5318":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"16:8105:5807":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"17:0:2799":{"crate_id":17,"path":["object"],"kind":"module"},"6:5471:6604":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"16:4956:5516":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"14:220:5959":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"5:889:8171":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"2:45774:218":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"17:15679:5119":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"5:4165:34199":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"6:1684:6271":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"2:12198:8219":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"2:44676:7573":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"1:9182:3055":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"2:8516:133":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"1:3308:27113":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"2:23023:9214":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"1:5688:116":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"2:40507:9087":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"2:37096:5760":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"1:9455:246":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"16:3308:5441":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"16:5172:5522":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"2:45104:3477":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"17:12906:4574":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"17:11448:7994":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"2:47888:7740":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"6:578:6140":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"1:9390:27298":{"crate_id":1,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"2:40407:221":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"5:3707:3038":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"1:12503:930":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"2:23827:7249":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU16Inner"],"kind":"struct"},"17:11386:22003":{"crate_id":17,"path":["object","read","archive","Members"],"kind":"enum"},"6:5255:6495":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"2:8978:32088":{"crate_id":2,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"6:1539:6172":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"18:581:3353":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"5:1577:5978":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"1:2084:209":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"1:12272:28809":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"1:8125:3526":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"18:726:4318":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"18:651:4282":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"6:6411:6719":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"1:11098:3056":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","ExitCode"],"kind":"struct"},"2:47461:7698":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"17:667:4428":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"6:6381:6694":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"16:6904:5637":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"17:2227:7973":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"1:8591:8305":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"17:13209:149":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"1:11270:2749":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","ExitStatus"],"kind":"struct"},"18:670:7966":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"6:545:6122":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"16:3834:5502":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"1:960:8147":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"1:10784:3009":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stdin"],"kind":"struct"},"9:176:20968":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"16:2530:5452":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"5:7809:256":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"16:2620:5456":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"17:16145:5257":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"2:40467:225":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"18:531:4287":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"6:564:6132":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"1:12509:1871":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"1:1870:3505":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"5:885:102":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"1:949:8177":{"crate_id":1,"path":["std","collections","hash","map","ExtractIf"],"kind":"struct"},"17:15064:4922":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"7:79:20895":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"2:45635:14748":{"crate_id":2,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"17:13983:4700":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"6:586:6144":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"1:4900:9186":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"1:3497:2997":{"crate_id":1,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"5:0:323":{"crate_id":5,"path":["alloc"],"kind":"module"},"2:4733:7177":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"5:7620:221":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"16:6421:5434":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"11:396:35470":{"crate_id":11,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"1:8039:8290":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"6:8319:7125":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"2:45562:7613":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"16:8121:221":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"17:14055:4714":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"5:7548:3381":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"6:6765:6886":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_options"],"kind":"struct"},"2:22335:33577":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_elements_left","Rotate"],"kind":"struct"},"16:5318:5527":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"1:3540:3017":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"16:7016:5649":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"5:5530:34199":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"17:11653:4469":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"2:23343:9294":{"crate_id":2,"path":["core","core_simd","simd","cmp","eq","SimdPartialEq"],"kind":"trait"},"6:5249:6493":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"5:4372:3038":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"1:8376:8297":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"1:7826:8554":{"crate_id":1,"path":["std","panicking","begin_panic_handler","StaticStrPayload"],"kind":"struct"},"17:14821:4881":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"17:15785:5146":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"16:6876:5634":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"2:44757:8247":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"16:6696:8094":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"1:11042:31877":{"crate_id":1,"path":["std","sys","pal","unix","kernel_copy","SpliceMode"],"kind":"enum"},"16:8723:149":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"17:13169:8060":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatSectionIterator"],"kind":"struct"},"16:6794:5623":{"crate_id":16,"path":["gimli","read","relocate","RelocateReader"],"kind":"struct"},"2:23627:31958":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"17:14672:4839":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"17:1220:7971":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"17:12625:4551":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"11:698:3381":{"crate_id":11,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"15:0:2797":{"crate_id":15,"path":["addr2line"],"kind":"module"},"1:6408:28826":{"crate_id":1,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"17:12976:4581":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"5:6183:14939":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"5:7703:3041":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"17:16798:5425":{"crate_id":17,"path":["object","xcoff","DwarfAux32"],"kind":"struct"},"16:8585:8138":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"2:43891:7548":{"crate_id":2,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"2:47644:7705":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"1:1933:3522":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"2:41566:7489":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"6:6716:6872":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_ring_offset_v1"],"kind":"struct"},"17:12163:4498":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsectionIterator"],"kind":"struct"},"2:45752:175":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"2:41176:7469":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"6:8330:7126":{"crate_id":6,"path":["libc","unix","linux_like","linux","canxl_frame"],"kind":"struct"},"5:1785:34199":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"17:14963:4902":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"6:5325:6529":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"2:45828:32995":{"crate_id":2,"path":["core","task","wake","ExtData"],"kind":"enum"},"16:5282:5526":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"2:10806:2956":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"6:7391:6997":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"5:4529:2966":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"18:698:4310":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"16:6188:5548":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"1:1642:5981":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"11:1674:35476":{"crate_id":11,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"1:2649:3002":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"17:12798:22121":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"17:13854:4681":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"6:5494:6612":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_128"],"kind":"struct"},"6:6672:6853":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"2:8624:189":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"1:11424:7884":{"crate_id":1,"path":["std","sys","exit_guard","PThread"],"kind":"struct"},"17:583:7970":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"1:3852:9132":{"crate_id":1,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"6:8199:7108":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"5:5145:2966":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"16:7789:35506":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"2:3551:2993":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"11:1140:8160":{"crate_id":11,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"2:32984:3057":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"17:12225:4506":{"crate_id":17,"path":["object","read","elf","attributes","AttributeReader"],"kind":"struct"},"2:40537:8234":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"17:10332:21984":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"2:23221:3625":{"crate_id":2,"path":["core","core_simd","simd","num","sealed","Sealed"],"kind":"trait"},"2:2859:146":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"1:3452:2405":{"crate_id":1,"path":["std","io","stdio","stderr"],"kind":"function"},"2:45094:3489":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"2:45147:3488":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"1:8656:8303":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"5:1595:8162":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"2:11873:3038":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"1:12484:434":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"17:16218:5278":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"2:11055:7200":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"16:6389:8068":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"17:10630:4442":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"17:12776:8052":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"17:16036:5213":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"17:11971:8013":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"1:11337:7879":{"crate_id":1,"path":["std","sys","pal","unix","time","Timespec"],"kind":"struct"},"2:43366:95":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"6:5349:6534":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_resp"],"kind":"struct"},"1:4164:9136":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"2:44776:2750":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"3:0:524":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"2:39716:14629":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"5:7612:3381":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"2:34701:14622":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"6:6770:6887":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_desc"],"kind":"struct"},"2:11209:32110":{"crate_id":2,"path":["core","slice","sort","stable","merge","MergeState"],"kind":"struct"},"17:16595:4666":{"crate_id":17,"path":["object","xcoff","SectionHeader32"],"kind":"struct"},"14:7:8142":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"2:23734:3447":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"2:46913:7648":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"2:42755:7535":{"crate_id":2,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"2:42807:7537":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"2:3344:3546":{"crate_id":2,"path":["core","marker","FnPtr"],"kind":"trait"},"6:5107:6451":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"1:5549:132":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"16:2660:5458":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"17:13361:4609":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"16:4694:5509":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"17:13592:4625":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"16:2570:5454":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"17:13055:4465":{"crate_id":17,"path":["object","read","xcoff","section","SectionTable"],"kind":"struct"},"2:41360:107":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"2:45766:238":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"16:2684:5459":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"2:10794:132":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"1:9491:3627":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"2:46814:7638":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"11:1920:5983":{"crate_id":11,"path":["hashbrown","set","Union"],"kind":"struct"},"6:5357:6535":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_addfd"],"kind":"struct"},"5:7891:8177":{"crate_id":5,"path":["alloc","vec","extract_if","ExtractIf"],"kind":"struct"},"5:929:9095":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"2:23849:7251":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU64Inner"],"kind":"struct"},"17:16159:5263":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"2:45138:3487":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"2:3308:3367":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"16:2724:5461":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"5:6046:8163":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"17:11503:4464":{"crate_id":17,"path":["object","read","archive","ArchiveSymbol"],"kind":"struct"},"2:42871:3381":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"16:7471:5729":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"1:11822:3061":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"1:955:8162":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"2:41510:7481":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"5:2816:7151":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"17:10549:4439":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"6:5069:6449":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"2:4860:8207":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"11:1900:5980":{"crate_id":11,"path":["hashbrown","set","Intersection"],"kind":"struct"},"2:47511:7700":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"2:34874:14623":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"2:44166:7561":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"16:6843:5629":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"16:7386:5714":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"16:4267:5507":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"1:3314:29384":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"2:45839:8250":{"crate_id":2,"path":["core","task","wake","ContextBuilder"],"kind":"struct"},"6:4914:6374":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"17:12392:4514":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"17:13145:8058":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatIterator"],"kind":"struct"},"17:12749:8050":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"2:45865:7628":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"17:10778:7983":{"crate_id":17,"path":["object","read","read_cache","ReadCache"],"kind":"struct"},"1:4415:8271":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"16:2880:5468":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"1:939:8163":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"17:12018:8016":{"crate_id":17,"path":["object","read","elf","note","GnuPropertyIterator"],"kind":"struct"},"16:6837:8106":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"1:9460:3094":{"crate_id":1,"path":["std","sync","rwlock","MappedRwLockReadGuard"],"kind":"struct"},"2:47289:7676":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"2:46884:7646":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"1:8630:7836":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"6:6599:6823":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"17:16822:4693":{"crate_id":17,"path":["object","xcoff","Rel32"],"kind":"struct"},"1:8502:3016":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"2:46867:7645":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"5:3092:34195":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"11:1005:5740":{"crate_id":11,"path":["hashbrown","map","Entry"],"kind":"enum"},"2:5408:32301":{"crate_id":2,"path":["core","ffi","va_list","sealed_trait","VaArgSafe"],"kind":"trait"},"2:3777:158":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"2:12004:8215":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"6:5288:6515":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"1:10790:3007":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stderr"],"kind":"struct"},"1:3353:3010":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"1:4944:9152":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"6:6521:6772":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"16:4929:5515":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"2:43148:3381":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"16:5060:5518":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"16:7907:5796":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"6:5224:6479":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"2:34355:9209":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"16:3048:21056":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"2:10804:217":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"6:5629:6668":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifc_ifcu"],"kind":"union"},"2:8212:3075":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"18:613:35523":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"11:1601:8165":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"2:12184:8218":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"17:11065:7988":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"2:43218:97":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"2:43658:2951":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"16:8483:5860":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"16:2435:21054":{"crate_id":16,"path":["gimli","common","Vendor"],"kind":"enum"},"1:7186:9210":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"18:659:7962":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"13:229:5967":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"2:13692:14375":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"11:0:2794":{"crate_id":11,"path":["hashbrown"],"kind":"module"},"16:8014:5491":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"2:4:1288":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"16:6588:5614":{"crate_id":16,"path":["gimli","read","cfi","UnwindExpression"],"kind":"struct"},"17:15997:5201":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"6:485:6084":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"2:23376:9293":{"crate_id":2,"path":["core","core_simd","simd","cmp","ord","SimdOrd"],"kind":"trait"},"1:4828:6992":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"function"},"1:1118:8161":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"2:43516:98":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"17:12409:22097":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"2:4570:8203":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"5:2348:35398":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"1:576:9064":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"2:42846:184":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"1:11157:28816":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"1:0:1757":{"crate_id":1,"path":["std"],"kind":"module"},"17:13095:4587":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolTable"],"kind":"struct"},"2:42733:31992":{"crate_id":2,"path":["core","net","parser","AddrKind"],"kind":"enum"},"16:4766:5510":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"1:3449:3008":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"2:23247:32187":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_addr"],"kind":"function"},"16:8043:35499":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"1:8685:3645":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"2:41252:3486":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"16:3014:21055":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"17:10167:21979":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"6:6823:6903":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"17:15036:4918":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"5:4575:34241":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"16:7305:5706":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"2:45393:7599":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"2:44848:3494":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"2:3061:270":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"17:15655:5117":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"1:1648:5982":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"1:6752:3097":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"1:5999:3083":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"17:10115:21977":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"1:6712:3087":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"1:7909:4428":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"2:22347:33577":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_elements_right","Rotate"],"kind":"struct"},"2:23758:3461":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"2:45554:7611":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"16:8000:5490":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"1:12490:349":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"1:12506:1877":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"16:2506:5451":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"17:13692:4639":{"crate_id":17,"path":["object","archive","AixFileHeader"],"kind":"struct"},"1:387:8253":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"6:4816:6309":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"1:508:28817":{"crate_id":1,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"17:15836:5159":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"17:11706:8003":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"17:11592:4421":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"6:5648:6677":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"17:11952:8011":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"2:2668:14640":{"crate_id":2,"path":["core","ptr","with_exposed_provenance_mut"],"kind":"function"},"2:44006:2402":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"2:47843:7739":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"6:5241:6489":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"2:8399:14602":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"2:42026:7509":{"crate_id":2,"path":["core","iter","sources","from_coroutine","FromCoroutine"],"kind":"struct"},"2:12754:3478":{"crate_id":2,"path":["core","slice","raw","from_raw_parts"],"kind":"function"},"17:12992:4582":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"18:754:4323":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"7:0:1947":{"crate_id":7,"path":["unwind"],"kind":"module"},"17:14019:4709":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"1:4150:9135":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"16:3587:5500":{"crate_id":16,"path":["gimli","arch","MIPS"],"kind":"struct"},"16:5198:5523":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"16:2467:5444":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"1:8511:3018":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"17:14031:4712":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"16:7044:5482":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"6:7986:7094":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"18:689:4309":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"2:45888:7629":{"crate_id":2,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"17:16668:5393":{"crate_id":17,"path":["object","xcoff","FileAux32"],"kind":"struct"},"2:47076:7665":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"17:12176:4499":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsection"],"kind":"struct"},"1:11828:7891":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"1:2327:150":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"6:6758:6885":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_statistics_v1"],"kind":"struct"},"17:14573:4826":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"0:66:1208":{"crate_id":0,"path":["autocfg","new"],"kind":"function"},"6:6777:6888":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","iocb"],"kind":"struct"},"2:44898:3497":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"5:6763:34199":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"2:45034:3492":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"4:0:2790":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"1:8236:3621":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"2:2792:114":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"11:364:35468":{"crate_id":11,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"2:14666:9097":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"1:9323:118":{"crate_id":1,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"1:2087:208":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"6:7563:7073":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"1:6901:3099":{"crate_id":1,"path":["std","sync","reentrant_lock","ReentrantLockGuard"],"kind":"struct"},"2:13618:3473":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"16:6608:217":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"11:798:8163":{"crate_id":11,"path":["hashbrown","map","Drain"],"kind":"struct"},"1:4226:9141":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"17:12673:8041":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"5:3456:8177":{"crate_id":5,"path":["alloc","collections","btree","set","ExtractIf"],"kind":"struct"},"6:7454:7006":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"17:12066:2411":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"6:4964:6394":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"17:15475:5083":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"17:15573:5096":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"17:10031:21975":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"6:7469:7012":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"2:22:842":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"11:1888:8163":{"crate_id":11,"path":["hashbrown","set","Drain"],"kind":"struct"},"2:42082:7515":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"6:5405:6562":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"2:43930:5838":{"crate_id":2,"path":["core","fmt","rt","Flag"],"kind":"enum"},"2:34288:9207":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"2:10246:92":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"17:13385:4610":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"1:7852:8556":{"crate_id":1,"path":["std","panicking","rust_panic_without_hook","RewrapBox"],"kind":"struct"},"2:45281:7595":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"17:12762:8051":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"17:16761:5416":{"crate_id":17,"path":["object","xcoff","BlockAux32"],"kind":"struct"},"1:11873:7895":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"17:12306:4509":{"crate_id":17,"path":["object","read","macho","fat","MachOFatFile"],"kind":"struct"},"6:7308:6947":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"17:11851:8009":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"2:13578:3042":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"2:42951:3556":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"2:3411:14349":{"crate_id":2,"path":["core","ops","async_function","AsyncFnOnce"],"kind":"trait"},"2:45329:7597":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"1:9211:8310":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"18:507:4282":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"}},"external_crates":{"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":32}